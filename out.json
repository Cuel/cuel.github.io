[
  {
    "component": "advanced_ballistics",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "[\"ACE3 Equipment\", QGVAR(ProtractorKey), localize LSTRING(ProtractorKey),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {false};\n\n    // Statement\n    [] call FUNC(displayProtractor);\n},\n{false},\n[37, [true, true, false]], false, 0] call CBA_fnc_addKeybind; // (CTRL + SHIFT + K)\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"initKeybinds.sqf\"\n\nGVAR(currentbulletID) = -1;\n\nGVAR(Protractor) = false;\nGVAR(ProtractorStart) = CBA_missionTime;\nGVAR(allBullets) = [];\nGVAR(currentGrid) = 0;\n\nif (!hasInterface) exitWith {};\n\n[\"ace_settingsInitialized\", {\n    //If not enabled, dont't add PFEH\n    if (!GVAR(enabled)) exitWith {};\n\n    //Run the terrain processor\n    [] call FUNC(initializeTerrainExtension);\n\n    // Register fire event handler\n    [\"ace_firedPlayer\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n    [\"ace_firedPlayerNonLocal\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n\n    //Add warnings for missing compat PBOs (only if AB is on)\n    {\n        _x params [\"_modPBO\", \"_compatPBO\"];\n        if ((isClass (configFile >> \"CfgPatches\" >> _modPBO)) && {!isClass (configFile >> \"CfgPatches\" >> _compatPBO)}) then {\n            WARNING_2(\"Weapon Mod [%1] missing ace compat pbo [%2] (from @ace\\optionals)\",_modPBO,_compatPBO);\n        };\n    } forEach [\n        [\"RH_acc\",\"ace_compat_rh_acc\"],\n        [\"RH_de_cfg\",\"ace_compat_rh_de\"],\n        [\"RH_m4_cfg\",\"ace_compat_rh_m4\"],\n        [\"RH_PDW\",\"ace_compat_rh_pdw\"],\n        [\"RKSL_PMII\",\"ace_compat_rksl_pm_ii\"],\n        [\"iansky_opt\",\"ace_compat_sma3_iansky\"],\n        [\"R3F_Armes\",\"ace_compat_r3f\"]\n    ];\n}] call CBA_fnc_addEventHandler;\n\n#ifdef DEBUG_MODE_FULL\n    call FUNC(diagnoseWeapons);\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_calculateAmmoTemperatureVelocityShift.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Calculates the ammo temperature induced muzzle velocity shift\n *\n * Arguments:\n * 0: muzzle velocity shift lookup table - m/s <ARRAY>\n * 1: temperature - degrees celcius <NUMBER>\n *\n * Return Value:\n * muzzle velocity shift - m/s <NUMBER>\n *\n * Example:\n * [[], 5] call ace_advanced_ballistics_fnc_calcilateAmmoTemperatureVelocityShift\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_muzzleVelocityShiftTable\", \"_temperature\"];\n\n// Check if muzzleVelocityShiftTable is less than 11 Entrys\nif ((count _muzzleVelocityShiftTable) < 11) exitWith {0};\nprivate _muzzleVelocityShiftTableUpperLimit = _muzzleVelocityShiftTable select 10;\nif (isNil \"_muzzleVelocityShiftTableUpperLimit\") exitWith {0};\n\n// Find exact data index required for given temperature\nprivate _temperatureIndexFunction = 0 max ((_temperature + 15) / 5) min 10;\n\n// Lower and upper data index used for interpolation\nprivate _temperatureIndexA = floor(_temperatureIndexFunction);\nprivate _temperatureIndexB = ceil(_temperatureIndexFunction);\n\nlinearConversion [_temperatureIndexA, _temperatureIndexB, _temperatureIndexFunction, _muzzleVelocityShiftTable select _temperatureIndexA, _muzzleVelocityShiftTable select _temperatureIndexB, true] // Return\n",
        "functionName": "ace_advanced_ballistics_fnc_calculateAmmoTemperatureVelocityShift"
      },
      {
        "fileName": "fnc_calculateAtmosphericCorrection.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Calculates the atmospherically corrected ballistic coefficient\n *\n * Arguments:\n * 0: ballistic coefficient - G1-G7 <NUMBER>\n * 1: temperature - degrees celcius <NUMBER>\n * 2: pressure - hPa <NUMBER>\n * 3: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\n * 4: atmosphereModel - ICAO or ASM <STRING>\n *\n * Return Value:\n * corrected ballistic coefficient <NUMBER>\n *\n * Example:\n * [2, 5, 5, 0.5, \"ASM\"] call ace_advanced_ballistics_fnc_calculateAtmosphericCorrection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ballisticCoefficient\", \"_temperature\"/*in C*/, \"_pressure\"/*in hPa*/, \"_relativeHumidity\"/*as ratio 0-1*/, \"_atmosphereModel\"/*\"ICAO\" or \"ASM\"*/];\n\nprivate _airDensity = [_temperature, _pressure, _relativeHumidity] call EFUNC(weather,calculateAirDensity);\n\nif (_atmosphereModel == \"ICAO\") then {\n    (STD_AIR_DENSITY_ICAO / _airDensity) * _ballisticCoefficient\n} else {\n    (STD_AIR_DENSITY_ASM / _airDensity) * _ballisticCoefficient\n};\n",
        "functionName": "ace_advanced_ballistics_fnc_calculateAtmosphericCorrection"
      },
      {
        "fileName": "fnc_calculateBarrelLengthVelocityShift.sqf",
        "content": "/*\n * Author: Ruthberg, MikeMatrix, joko // Jonas\n *\n * Calculates the muzzle velocity shift caused by different barrel lengths\n *\n * Arguments:\n * 0: barrel length - mm <NUMBER>\n * 1: muzzle velocity lookup table - m/s <ARRAY>\n * 2: barrel length lookup table - mm <ARRAY>\n * 3: muzzle velocity - m/s <NUMBER>\n *\n * Return Value:\n * muzzle velocity shift - m/s <NUMBER>\n *\n * Example:\n * [5, [0,5], [0,5], 5] call ace_advanced_ballistics_fnc_calculateBarrelLengthVelocityShift\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_barrelLength\", \"_muzzleVelocityTable\", \"_barrelLengthTable\", \"_muzzleVelocity\"];\nTRACE_4(\"params\",_barrelLength,_muzzleVelocityTable,_barrelLengthTable,_muzzleVelocity);\n\n// If barrel length is not defined, then there is no point in calculating muzzle velocity\nif (_barrelLength == 0) exitWith { 0 };\n\nprivate _muzzleVelocityTableCount = count _muzzleVelocityTable;\nprivate _barrelLengthTableCount = count _barrelLengthTable;\n\n// Exit if tables are different sizes, have no elements or have only one element\nif (_muzzleVelocityTableCount != _barrelLengthTableCount || _muzzleVelocityTableCount == 0) exitWith { 0 };\nif (_muzzleVelocityTableCount == 1) exitWith { (_muzzleVelocityTable select 0) - _muzzleVelocity };\n\n// If we have the precise barrel length value, return result immediately\nif (_barrelLength in _barrelLengthTable) exitWith {\n    (_muzzleVelocityTable select (_barrelLengthTable find _barrelLength)) - _muzzleVelocity\n};\n\n// Limit values to lower and upper bound of data we have available\nif (_barrelLength <= (_barrelLengthTable select 0)) exitWith { (_muzzleVelocityTable select 0) - _muzzleVelocity };\nif (_barrelLength >= (_barrelLengthTable select _barrelLengthTableCount - 1)) exitWith { (_muzzleVelocityTable select _barrelLengthTableCount - 1) - _muzzleVelocity };\n\nprivate _upperDataIndex = 0;\nprivate _lowerDataIndex = 1;\n\n// Find closest bordering values for barrel length\n{\n    if (_barrelLength <= _x) exitWith {\n        _upperDataIndex = _forEachIndex;\n        _lowerDataIndex = _upperDataIndex - 1;\n    };\n} forEach _barrelLengthTable;\n\n(linearConversion [_barrelLengthTable select _lowerDataIndex, _barrelLengthTable select _upperDataIndex, _barrelLength, _muzzleVelocityTable select _lowerDataIndex, _muzzleVelocityTable select _upperDataIndex]) - _muzzleVelocity // Return\n",
        "functionName": "ace_advanced_ballistics_fnc_calculateBarrelLengthVelocityShift"
      },
      {
        "fileName": "fnc_calculateRetardation.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Calculates the retardation of the bullet\n *\n * Arguments:\n * 0: drag model - integer 1-7 <NUMBER>\n * 1: drag coefficient - bc <NUMBER>\n * 2: velocity - m/s <NUMBER>\n *\n * Return Value:\n * retardation - m/(s^2) <NUMBER>\n *\n * Example:\n * [5, 20, 10] call ace_advanced_ballistics_fnc_calculateRetardation\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Source: GNU Exterior Ballistics\n\nprivate [\"_A\", \"_M\"];\nparams [\"_dragModel\", \"_dragCoefficient\", \"_velocity\"];\n_velocity = _velocity * 3.2808399;\n\nswitch _dragModel do {\n    case 1: {\n        call {\n            if (_velocity > 4230) exitWith { _A = 0.0001477404177730177; _M = 1.9565; };\n            if (_velocity > 3680) exitWith { _A = 0.0001920339268755614; _M = 1.925; };\n            if (_velocity > 3450) exitWith { _A = 0.0002894751026819746; _M = 1.875; };\n            if (_velocity > 3295) exitWith { _A = 0.0004349905111115636; _M = 1.825; };\n            if (_velocity > 3130) exitWith { _A = 0.0006520421871892662; _M = 1.775; };\n            if (_velocity > 2960) exitWith { _A = 0.0009748073694078696; _M = 1.725; };\n            if (_velocity > 2830) exitWith { _A = 0.001453721560187286; _M = 1.675; };\n            if (_velocity > 2680) exitWith { _A = 0.002162887202930376; _M = 1.625; };\n            if (_velocity > 2460) exitWith { _A = 0.003209559783129881; _M = 1.575; };\n            if (_velocity > 2225) exitWith { _A = 0.003904368218691249; _M = 1.55; };\n            if (_velocity > 2015) exitWith { _A = 0.003222942271262336; _M = 1.575; };\n            if (_velocity > 1890) exitWith { _A = 0.002203329542297809; _M = 1.625; };\n            if (_velocity > 1810) exitWith { _A = 0.001511001028891904; _M = 1.675; };\n            if (_velocity > 1730) exitWith { _A = 0.0008609957592468259; _M = 1.75; };\n            if (_velocity > 1595) exitWith { _A = 0.0004086146797305117; _M = 1.85; };\n            if (_velocity > 1520) exitWith { _A = 0.0001954473210037398; _M = 1.95; };\n            if (_velocity > 1420) exitWith { _A = 0.00005431896266462351; _M = 2.125; };\n            if (_velocity > 1360) exitWith { _A = 0.000008847742581674416; _M = 2.375; };\n            if (_velocity > 1315) exitWith { _A = 0.000001456922328720298; _M = 2.625; };\n            if (_velocity > 1280) exitWith { _A = 0.0000002419485191895565; _M = 2.875; };\n            if (_velocity > 1220) exitWith { _A = 0.00000001657956321067612; _M = 3.25; };\n            if (_velocity > 1185) exitWith { _A = 0.0000000004745469537157371; _M = 3.75; };\n            if (_velocity > 1150) exitWith { _A = 0.00000000001379746590025088; _M = 4.25; };\n            if (_velocity > 1100) exitWith { _A = 0.0000000000004070157961147882; _M = 4.75; };\n            if (_velocity > 1060) exitWith { _A = 0.00000000000002938236954847331; _M = 5.125; };\n            if (_velocity > 1025) exitWith { _A = 0.00000000000001228597370774746; _M = 5.25; };\n            if (_velocity >  980) exitWith { _A = 0.00000000000002916938264100495; _M = 5.125; };\n            if (_velocity >  945) exitWith { _A = 0.0000000000003855099424807451; _M = 4.75; };\n            if (_velocity >  905) exitWith { _A = 0.00000000001185097045689854; _M = 4.25; };\n            if (_velocity >  860) exitWith { _A = 0.0000000003566129470974951; _M = 3.75; };\n            if (_velocity >  810) exitWith { _A = 0.00000001045513263966272; _M = 3.25; };\n            if (_velocity >  780) exitWith { _A = 0.0000001291159200846216; _M = 2.875; };\n            if (_velocity >  750) exitWith { _A = 0.0000006824429329105383; _M = 2.625; };\n            if (_velocity >  700) exitWith { _A = 0.000003569169672385163; _M = 2.375; };\n            if (_velocity >  640) exitWith { _A = 0.00001839015095899579; _M = 2.125; };\n            if (_velocity >  600) exitWith { _A = 0.00005711174688734240; _M = 1.950; };\n            if (_velocity >  550) exitWith { _A = 0.00009226557091973427; _M = 1.875; };\n            if (_velocity >  250) exitWith { _A = 0.00009337991957131389; _M = 1.875; };\n            if (_velocity >  100) exitWith { _A = 0.00007225247327590413; _M = 1.925; };\n            if (_velocity >   65) exitWith { _A = 0.00005792684957074546; _M = 1.975; };\n            if (_velocity >    0) exitWith { _A = 0.00005206214107320588; _M = 2.000; };\n        };\n    };\n    case 2: {\n        call {\n            if (_velocity > 1674) exitWith { _A = 0.0079470052136733; _M = 1.36999902851493; };\n            if (_velocity > 1172) exitWith { _A = 0.00100419763721974; _M = 1.65392237010294; };\n            if (_velocity > 1060) exitWith { _A = 0.0000000000000000000000715571228255369; _M = 7.91913562392361; };\n            if (_velocity >  949) exitWith { _A = 0.000000000139589807205091; _M = 3.81439537623717; };\n            if (_velocity >  670) exitWith { _A = 0.000234364342818625; _M = 1.71869536324748; };\n            if (_velocity >  335) exitWith { _A = 0.000177962438921838; _M = 1.76877550388679; };\n            if (_velocity >    0) exitWith { _A = 0.0000518033561289704; _M = 1.98160270524632; };\n        };\n    };\n    case 5: {\n        call {\n            if (_velocity > 1730) exitWith { _A = 0.00724854775171929; _M = 1.41538574492812; };\n            if (_velocity > 1228) exitWith { _A = 0.0000350563361516117; _M = 2.13077307854948; };\n            if (_velocity > 1116) exitWith { _A = 0.000000000000184029481181151; _M = 4.81927320350395; };\n            if (_velocity > 1004) exitWith { _A = 0.000000000000000000000134713064017409; _M = 7.8100555281422; };\n            if (_velocity >  837) exitWith { _A = 0.000000103965974081168; _M = 2.84204791809926; };\n            if (_velocity >  335) exitWith { _A = 0.0001093015938698234; _M = 1.81096361579504; };\n            if (_velocity >    0) exitWith { _A = 0.0000351963178524273; _M = 2.00477856801111; };\n        };\n    };\n    case 6: {\n        call {\n            if (_velocity > 3236) exitWith { _A = 0.0455384883480781; _M = 1.15997674041274; };\n            if (_velocity > 2065) exitWith { _A = 0.07167261849653769; _M = 1.10704436538885; };\n            if (_velocity > 1311) exitWith { _A = 0.00166676386084348; _M = 1.60085100195952; };\n            if (_velocity > 1144) exitWith { _A = 0.000000101482730119215; _M = 2.9569674731838; };\n            if (_velocity > 1004) exitWith { _A = 0.00000000000000000431542773103552; _M = 6.34106317069757; };\n            if (_velocity >  670) exitWith { _A = 0.0000204835650496866; _M = 2.11688446325998; };\n            if (_velocity >    0) exitWith { _A = 0.0000750912466084823; _M = 1.92031057847052; };\n        };\n    };\n    case 7: {\n        call {\n            if (_velocity > 4200) exitWith { _A = 0.00000000129081656775919; _M = 3.24121295355962; };\n            if (_velocity > 3000) exitWith { _A = 0.0171422231434847; _M = 1.27907168025204; };\n            if (_velocity > 1470) exitWith { _A = 0.00233355948302505; _M = 1.52693913274526; };\n            if (_velocity > 1260) exitWith { _A = 0.000797592111627665; _M = 1.67688974440324; };\n            if (_velocity > 1110) exitWith { _A = 0.00000000000571086414289273; _M = 4.3212826264889; };\n            if (_velocity >  960) exitWith { _A = 0.0000000000000000302865108244904; _M = 5.99074203776707; };\n            if (_velocity >  670) exitWith { _A = 0.00000752285155782535; _M = 2.1738019851075; };\n            if (_velocity >  540) exitWith { _A = 0.0000131766281225189; _M = 2.08774690257991; };\n            if (_velocity >    0) exitWith { _A = 0.0000134504843776525; _M = 2.08702306738884; };\n        };\n    };\n    case 8: {\n        call {\n            if (_velocity > 3571) exitWith { _A = 0.0112263766252305; _M = 1.33207346655961; };\n            if (_velocity > 1841) exitWith { _A = 0.0167252613732636; _M = 1.28662041261785; };\n            if (_velocity > 1120) exitWith { _A = 0.00220172456619625; _M = 1.55636358091189; };\n            if (_velocity > 1088) exitWith { _A = 0.00000000000000020538037167098; _M = 5.80410776994789; };\n            if (_velocity >  976) exitWith { _A = 0.00000000000592182174254121; _M = 4.29275576134191; };\n            if (_velocity >    0) exitWith { _A = 0.000043917343795117; _M = 1.99978116283334; };\n        };\n    };\n};\n\nif (!isNil \"_A\" && !isNil \"_M\" && _velocity > 0 && _velocity < 10000) then {\n    (_A * (_velocity ^ _M) / _dragCoefficient) / 3.2808399\n} else {\n    0\n};\n",
        "functionName": "ace_advanced_ballistics_fnc_calculateRetardation"
      },
      {
        "fileName": "fnc_calculateStabilityFactor.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Calculates the stability factor of a bullet\n *\n * Arguments:\n * 0: caliber - mm <NUMBER>\n * 1: bullet length - mm <NUMBER>\n * 2: bullet mass - grams <NUMBER>\n * 3: barrel twist - mm <NUMBER>\n * 4: muzzle velocity shift - m/s <NUMBER>\n * 5: temperature - degrees celcius <NUMBER>\n * 6: barometric Pressure - hPA <NUMBER>\n *\n * Return Value:\n * stability factor <NUMBER>\n *\n * Example:\n * [1, 2, 3, 4, 5, 6, 7] call ace_advanced_ballistics_fnc_calculateStabilityFactor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_barrelTwist\", \"_muzzleVelocity\", \"_temperature\", \"_barometricPressure\"];\n\n// Source: http://www.jbmballistics.com/ballistics/bibliography/articles/miller_stability_1.pdf\nprivate _twist = _barrelTwist / _caliber;\nprivate _length = _bulletLength / _caliber;\n\nprivate _stabilityFactor = 7587000 * _bulletMass / (_twist^2 * _caliber^3 * _length * (1 + _length^2));\n\nif (_muzzleVelocity > 341.376) then {\n    (_stabilityFactor * (_muzzleVelocity / 853.44) ^ (1/3)) * KELVIN(_temperature) / KELVIN(15) * 1013.25 / _barometricPressure\n} else {\n    (_stabilityFactor * (_muzzleVelocity / 341.376) ^ (1/3)) * KELVIN(_temperature) / KELVIN(15) * 1013.25 / _barometricPressure\n};\n",
        "functionName": "ace_advanced_ballistics_fnc_calculateStabilityFactor"
      },
      {
        "fileName": "fnc_diagnoseWeapons.sqf",
        "content": "/*\n * Author: esteldunedain\n *\n * This function diagnoses all primary weapons to find cases in which the initial\n * velocity of shots with and without AB significantly mismatch\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_ballistics_fnc_diagnoseWeapons\n *\n * Public: No\n */\n#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nprivate _diagnoseStartTime = diag_tickTime;\n#ifdef DEBUG_INIT_SPEEDS\n    private _data = [];\n    private _weapons = [];\n    private _magazines = [];\n    private _weaponInitSpeeds = [];\n    private _magazineInitSpeeds = [];\n#endif\n\nprivate _cfgWeapons = configFile >> \"CfgWeapons\";\nfor \"_i\" from 0 to (count _cfgWeapons)-1 do {\n    private _weaponConfig = _cfgWeapons select _i;\n    if (isClass _weaponConfig) then {\n        private _weapon = configName _weaponConfig;\n        private _weaponType = getNumber (_weaponConfig >> \"Type\");\n        if (_weaponType in [1, 2]) then {\n            // The weapon is a primary weapon or a handgun weapon\n\n            private _weaponInitSpeed = getNumber (_weaponConfig >> \"initSpeed\");\n            private _magazines = getArray (_weaponConfig >> \"magazines\");\n            {\n                private _magazine = _x;\n                private _magazineInitSpeed = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\n                private _ammo = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\n\n                // Vanilla initial speed --------------------------\n                private _vanillaInitialSpeed = _magazineInitSpeed;\n                if (_weaponInitSpeed > 0) then {\n                    _vanillaInitialSpeed = _weaponInitSpeed;\n                } else {\n                    if (_weaponInitSpeed < 0) then {\n                        _vanillaInitialSpeed = _vanillaInitialSpeed * (-_weaponInitSpeed);\n                    };\n                };\n                // --------------------------------------------------\n\n                // AB initial speed --------------------------------\n                // Get Weapon and Ammo Configurations\n                private _AmmoCacheEntry = uiNamespace getVariable format[QGVAR(%1), _ammo];\n                if (isNil \"_AmmoCacheEntry\") then {\n                     _AmmoCacheEntry = _ammo call FUNC(readAmmoDataFromConfig);\n                };\n                private _WeaponCacheEntry = uiNamespace getVariable format[QGVAR(%1), _weapon];\n                if (isNil \"_WeaponCacheEntry\") then {\n                     _WeaponCacheEntry = _weapon call FUNC(readWeaponDataFromConfig);\n                };\n                _AmmoCacheEntry params [\"_airFriction\", \"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_transonicStabilityCoef\", \"_dragModel\", \"_ballisticCoefficients\", \"_velocityBoundaries\", \"_atmosphereModel\", \"_ammoTempMuzzleVelocityShifts\", \"_muzzleVelocityTable\", \"_barrelLengthTable\", \"_muzzleVelocityVariationSD\"];\n                _WeaponCacheEntry params [\"_barrelTwist\", \"_twistDirection\", \"_barrelLength\"];\n\n                private _barrelVelocityShift = [_barrelLength, _muzzleVelocityTable, _barrelLengthTable, _vanillaInitialSpeed] call FUNC(calculateBarrelLengthVelocityShift);\n                private _abInitialSpeed = _vanillaInitialSpeed + _barrelVelocityShift;\n                // --------------------------------------------------\n                \n                if (_weapon find \"_base\" == -1 && _weapon find \"_Base\" == -1) then {\n#ifdef DEBUG_INIT_SPEEDS\n                    _data pushBack [-_forEachIndex, _abInitialSpeed, _magazine, _weapon];\n#endif\n                    if (_barrelLength > 0 && abs(_vanillaInitialSpeed - _abInitialSpeed) > abs(_abInitialSpeed) * 0.0025) then {\n                        diag_log text format [\"AB_Diagnose_initSpeed,%1,%2,%3,%4,%5,%6,%7,%8\",_weapon,_magazine,_ammo,_magazineInitSpeed,_weaponInitSpeed,_vanillaInitialSpeed,_abInitialSpeed,_abInitialSpeed/_vanillaInitialSpeed];\n                    };\n                    if (_barrelTwist == 0) then {\n                        diag_log text format [\"AB_Diagnose_barrelTwist,%1,%2,%3,%4,%5\",_weapon,_magazine,_ammo,_twistDirection,_barrelTwist];\n                    };\n                    if (_barrelLength == 0) then {\n                        diag_log text format [\"AB_Diagnose_barrelLength,%1,%2,%3,%4,%5\",_weapon,_magazine,_ammo,_barrelLength];\n                    };\n                };\n            } forEach _magazines;\n        };\n    };\n};\n\n#ifdef DEBUG_INIT_SPEEDS\n    _data sort false;\n    {\n        _x params [\"_magazineIndex\", \"_abInitialSpeed\", \"_magazine\", \"_weapon\"];\n        if (_magazines find _magazine == -1) then {\n            private _magSpeed = _abInitialSpeed;\n            private _ammoRef = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\n            if (_ammoRef != \"\") then {\n                {\n                    private _ammo = getText (configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\n                    if (_ammo == _ammoRef) exitWith {\n                        _magSpeed = _magazineInitSpeeds select _forEachIndex;\n                    };\n                } forEach _magazines;\n            };\n            _magazines pushBack _magazine;\n            _magazineInitSpeeds pushBack round(_magSpeed);\n        };\n        if (_weapons find _weapon == -1) then {\n            _weapons pushBack _weapon;\n            _magIndex = _magazines find _magazine;\n            _magSpeed = _magazineInitSpeeds select _magIndex;\n            _weaponInitSpeeds pushBack (_abInitialSpeed / _magSpeed);\n        };\n    } forEach _data;\n    {\n        _x params [\"_magazineIndex\", \"_abInitialSpeed\", \"_magazine\", \"_weapon\"];\n        _magIndex = _magazines find _magazine;\n        _magSpeed = _magazineInitSpeeds select _magIndex;\n        _wepIndex = _weapons find _weapon;\n        _wepSpeed = _weaponInitSpeeds select _wepIndex;\n    } forEach _data;\n    {\n        diag_log text format [\"AB_WeaponInitSpeed,%1,%2\", _x, _weaponInitSpeeds select _forEachIndex];\n    } forEach _weapons;\n    {\n        diag_log text format [\"AB_MagazineInitSpeed,%1,%2\", _x, _magazineInitSpeeds select _forEachIndex];\n    } forEach _magazines;\n#endif\n\ndiag_log format[\"AdvancedBallistics: Finished 'diagnoseWeapons' in %1 seconds\", (diag_tickTime - _diagnoseStartTime) toFixed 2];\n",
        "functionName": "ace_advanced_ballistics_fnc_diagnoseWeapons"
      },
      {
        "fileName": "fnc_displayProtractor.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Displays a protractor in the top left corner of the screen\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_ballistics_fnc_displayProtractor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"RscProtractor\")\n#define __ctrl1 (__dsp displayCtrl 132950)\n#define __ctrl2 (__dsp displayCtrl 132951)\n\nif (GVAR(Protractor)) exitWith {\n    GVAR(Protractor) = false;\n    1 cutText [\"\", \"PLAIN\"];\n    true\n};\nif (weaponLowered ACE_player) exitWith { false };\nif (vehicle ACE_player != ACE_player) exitWith { false };\nif (currentWeapon ACE_player != primaryWeapon ACE_player) exitWith { false };\n\n2 cutText [\"\", \"PLAIN\"];\nEGVAR(weather,WindInfo) = false;\n([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\nGVAR(Protractor) = true;\n\n[{\n    params [\"\",\"_idPFH\"];\n    if !(GVAR(Protractor) && !(weaponLowered ACE_player) && currentWeapon ACE_player == primaryWeapon ACE_player) exitWith {\n        GVAR(Protractor) = false;\n        1 cutText [\"\", \"PLAIN\"];\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n\n    1 cutRsc [\"RscProtractor\", \"PLAIN\", 1, false];\n\n    __ctrl1 ctrlSetScale 1;\n    __ctrl1 ctrlCommit 0;\n    __ctrl1 ctrlSetText QPATHTOF(UI\\protractor.paa);\n    __ctrl1 ctrlSetTextColor [1, 1, 1, 1];\n\n    __ctrl2 ctrlSetScale 1;\n    __ctrl2 ctrlSetPosition [SafeZoneX + 0.001, SafeZoneY - 0.001 - 0.1074 * (-0.86 max ((ACE_player weaponDirection currentWeapon ACE_player) select 2) min 0.86), 0.2, 0.2 * 4/3];\n    __ctrl2 ctrlCommit 0;\n    __ctrl2 ctrlSetText QPATHTOF(UI\\protractor_marker.paa);\n    __ctrl2 ctrlSetTextColor [1, 1, 1, 1];\n\n}, 0.1, []] call CBA_fnc_addPerFrameHandler;\n\ntrue\n",
        "functionName": "ace_advanced_ballistics_fnc_displayProtractor"
      },
      {
        "fileName": "fnc_handleFired.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg\n *\n * Handles advanced ballistics for (BulletBase) projectiles. Called from the unified fired EH only for players.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_ballistics_fnc_handleFired\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nif (!(_ammo isKindOf \"BulletBase\")) exitWith {};\nif (!alive _projectile) exitWith {};\nif (_unit distance ACE_player > GVAR(simulationRadius)) exitWith {};\nif (underwater _unit) exitWith {};\n\nprivate _abort = GVAR(disabledInFullAutoMode) && {getNumber(configFile >> \"CfgWeapons\" >> _weapon >> _mode >> \"autoFire\") == 1};\nif (!local _unit && {!_abort && !GVAR(simulateForEveryone)}) then {\n    // The shooter is non local -> abort unless we match an exception rule        \n    _abort = !GVAR(simulateForGroupMembers) || {group ACE_player != group _unit};\n    if (_abort && GVAR(simulateForSnipers)) then {\n        if (currentWeapon _unit == primaryWeapon _unit && count primaryWeaponItems _unit > 2) then {\n            private _opticsName = (primaryWeaponItems _unit) select 2;\n            private _opticType = getNumber(configFile >> \"CfgWeapons\" >> _opticsName >> \"ItemInfo\" >> \"opticType\");\n            _abort = _opticType != 2; // We only abort if the non local shooter is not a sniper\n        };\n    };\n};\n//if (!GVAR(vehicleGunnerEnabled) && !(_unit isKindOf \"Man\")) then { _abort = true; }; // We currently do not have firedEHs on vehicles\n\n// Get Weapon and Ammo Configurations\nprivate _AmmoCacheEntry = uiNamespace getVariable format[QGVAR(%1), _ammo];\nif (isNil \"_AmmoCacheEntry\") then {\n     _AmmoCacheEntry = _ammo call FUNC(readAmmoDataFromConfig);\n};\nprivate _WeaponCacheEntry = uiNamespace getVariable format[QGVAR(%1), _weapon];\nif (isNil \"_WeaponCacheEntry\") then {\n     _WeaponCacheEntry = _weapon call FUNC(readWeaponDataFromConfig);\n};\n\n_AmmoCacheEntry params [\"_airFriction\", \"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_transonicStabilityCoef\", \"_dragModel\", \"_ballisticCoefficients\", \"_velocityBoundaries\", \"_atmosphereModel\", \"_ammoTempMuzzleVelocityShifts\", \"_muzzleVelocityTable\", \"_barrelLengthTable\", \"_muzzleVelocityVariationSD\"];\n_WeaponCacheEntry params [\"_barrelTwist\", \"_twistDirection\", \"_barrelLength\"];\n\nprivate _temperature = nil; // We need the variable in this scope. So we need to init it here.\n\nprivate _ammoCount = _unit ammo _muzzle;\n\nprivate _bulletVelocity = velocity _projectile;\nprivate _muzzleVelocity = vectorMagnitude _bulletVelocity;\n\nif (GVAR(barrelLengthInfluenceEnabled)) then {\n    _muzzleVelocity = _muzzleVelocity + ([_barrelLength, _muzzleVelocityTable, _barrelLengthTable, _muzzleVelocity] call FUNC(calculateBarrelLengthVelocityShift));\n};\nif (GVAR(ammoTemperatureEnabled)) then {\n    _temperature = ((getPosASL _unit) select 2) call EFUNC(weather,calculateTemperatureAtHeight);\n    _muzzleVelocity = _muzzleVelocity + ([_ammoTempMuzzleVelocityShifts, _temperature] call FUNC(calculateAmmoTemperatureVelocityShift));\n};\nif (GVAR(muzzleVelocityVariationEnabled)) then {\n    private _time = round (CBA_missionTime / 2);\n    // Generate seed from publicly known values (via Cantor pairing function)\n    private _seed = 0.5 * (_time + _ammoCount) * (_time + _ammoCount + 1) + _ammoCount;\n    // Generate normally distributed random number (via Box–Muller transform)\n    private _z = sqrt(-2.0 * ln(0.00000001 max (-_seed random 1))) * cos(_seed random 360);\n    \n    _muzzleVelocity = _muzzleVelocity * (_z * _muzzleVelocityVariationSD + 1);\n};\n\n_bulletVelocity = (vectorNormalized _bulletVelocity) vectorMultiply _muzzleVelocity;\n_projectile setVelocity _bulletVelocity;\n\nif (_abort) exitWith {\n    if (missionNamespace getVariable [QEGVAR(windDeflection,enabled), false]) then {\n        EGVAR(windDeflection,trackedBullets) pushBack [_projectile, getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\")];\n    };\n};\n\nprivate _bulletTraceVisible = false;\nif (GVAR(bulletTraceEnabled) && cameraView == \"GUNNER\") then {\n    if (currentWeapon ACE_player == binocular ACE_player) then {\n        _bulletTraceVisible = true;\n    } else {\n        if (currentWeapon ACE_player == primaryWeapon ACE_player && count primaryWeaponItems ACE_player > 2) then {\n            private _opticsName = (primaryWeaponItems ACE_player) select 2;\n            private _opticType = getNumber(configFile >> \"CfgWeapons\" >> _opticsName >> \"ItemInfo\" >> \"opticType\");\n            _bulletTraceVisible = _opticType == 2;\n        };\n    };\n};\n\nprivate _stabilityFactor = 1.5;\nif (_caliber * _bulletLength * _bulletMass * _barrelTwist > 0) then {\n    if (isNil \"_temperature\") then {\n        _temperature = ((getPosASL _unit) select 2) call EFUNC(weather,calculateTemperatureAtHeight);\n    };\n    private _barometricPressure = ((getPosASL _projectile) select 2) call EFUNC(weather,calculateBarometricPressure);\n    _stabilityFactor = [_caliber, _bulletLength, _bulletMass, _barrelTwist, _muzzleVelocity, _temperature, _barometricPressure] call FUNC(calculateStabilityFactor);\n};\n\nGVAR(currentbulletID) = (GVAR(currentbulletID) + 1) % 10000;\n\n\"ace_advanced_ballistics\" callExtension format[\"new:%1:%2:%3:%4:%5:%6:%7:%8:%9:%10:%11:%12:%13:%14:%15:%16:%17:%18\", GVAR(currentbulletID), _ammoCount, _airFriction, _ballisticCoefficients, _velocityBoundaries, _atmosphereModel, _dragModel, _stabilityFactor, _twistDirection, _transonicStabilityCoef, getPosASL _projectile, _bulletVelocity, EGVAR(common,mapLatitude), EGVAR(weather,currentTemperature), EGVAR(common,mapAltitude), EGVAR(weather,currentHumidity), EGVAR(weather,currentOvercast), CBA_missionTime toFixed 6];\n\nGVAR(allBullets) pushBack [_projectile, _caliber, _bulletTraceVisible, GVAR(currentbulletID)];\n\nif (isNil QGVAR(BulletPFH)) then {\n    GVAR(BulletPFH) = [FUNC(handleFirePFH), GVAR(simulationInterval), []] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_advanced_ballistics_fnc_handleFired"
      },
      {
        "fileName": "fnc_handleFirePFH.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg, joko // Jonas\n * Handle the PFH for Bullets\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_ballistics_fnc_handleFirePFH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n{\n    _x params [\"_bullet\",\"_caliber\",\"_bulletTraceVisible\",\"_index\"];\n\n    if (!alive _bullet) then {\n        GVAR(allBullets) deleteAt (GVAR(allBullets) find _x);\n    } else {\n        private _bulletVelocity = velocity _bullet;\n        private _bulletPosition = getPosASL _bullet;\n\n        if (_bulletTraceVisible && {vectorMagnitude _bulletVelocity > 500}) then {\n            drop [\"\\A3\\data_f\\ParticleEffects\\Universal\\Refract\",\"\",\"Billboard\",1,0.1,getPos _bullet,[0,0,0],0,1.275,1,0,[0.02*_caliber,0.01*_caliber],[[0,0,0,0.65],[0,0,0,0.2]],[1,0],0,0,\"\",\"\",\"\"];\n        };\n\n        _bullet setVelocity (_bulletVelocity vectorAdd (parseSimpleArray (\"ace_advanced_ballistics\" callExtension format[\"simulate:%1:%2:%3:%4:%5:%6\", _index, _bulletVelocity, _bulletPosition, wind, ASLToATL(_bulletPosition) select 2, CBA_missionTime toFixed 6])));\n    };\n    nil\n} count +GVAR(allBullets);\n\nif (GVAR(allBullets) isEqualTo []) then {\n    [_this select 1] call CBA_fnc_removePerFrameHandler;\n    GVAR(BulletPFH) = nil;\n};\n",
        "functionName": "ace_advanced_ballistics_fnc_handleFirePFH"
      },
      {
        "fileName": "fnc_initializeTerrainExtension.sqf",
        "content": "/*\n * Author: Ruthberg\n * Initializes the advanced ballistics dll extension with terrain data\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_ballistics_fnc_initializeTerrainExtension\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\nif (!GVAR(enabled)) exitWith {};\n\nprivate _initStartTime = diag_tickTime;\nprivate _mapSize = getNumber (configFile >> \"CfgWorlds\" >> worldName >> \"MapSize\");\n\nif ((\"ace_advanced_ballistics\" callExtension format[\"init:%1:%2\", worldName, _mapSize]) == \"Terrain already initialized\") exitWith {\n    INFO_1(\"Terrain already initialized [world: %1]\", worldName);\n    #ifdef DEBUG_MODE_FULL\n        systemChat \"AdvancedBallistics: Terrain already initialized\";\n    #endif\n};\n\nprivate _mapGrids = ceil(_mapSize / 50) + 1;\nprivate _gridCells = _mapGrids * _mapGrids;\n\nGVAR(currentGrid) = 0;\n\nINFO_2(\"Starting Terrain Extension [cells: %1] [world: %2]\", _gridCells, worldName);\n\n[{\n    params [\"_args\",\"_idPFH\"];\n    _args params [\"_mapGrids\", \"_gridCells\", \"_initStartTime\"];\n\n    if (GVAR(currentGrid) >= _gridCells) exitWith {\n        INFO_2(\"Finished terrain initialization in %1 seconds [world: %2]\", (diag_tickTime - _initStartTime) toFixed 2, worldName);\n        #ifdef DEBUG_MODE_FULL\n            systemChat format[\"AdvancedBallistics: Finished terrain initialization in %1 seconds\", (diag_tickTime - _initStartTime) toFixed 2];\n        #endif\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n\n    for \"_i\" from 1 to 50 do {\n        private _x = floor(GVAR(currentGrid) / _mapGrids) * 50;\n        private _y = (GVAR(currentGrid) - floor(GVAR(currentGrid) / _mapGrids) * _mapGrids) * 50;\n        private _gridCenter = [_x + 25, _y + 25];\n        private _gridHeight = round(getTerrainHeightASL _gridCenter);\n        private _gridNumObjects = count (_gridCenter nearObjects [\"Building\", 50]);\n        private _gridSurfaceIsWater = if (surfaceIsWater _gridCenter) then {1} else {0};\n        \"ace_advanced_ballistics\" callExtension format[\"set:%1:%2:%3\", _gridHeight, _gridNumObjects, _gridSurfaceIsWater];\n        GVAR(currentGrid) = GVAR(currentGrid) + 1;\n        if (GVAR(currentGrid) >= _gridCells) exitWith {};\n    };\n\n}, 0, [_mapGrids, _gridCells, _initStartTime]] call CBA_fnc_addPerFrameHandler\n",
        "functionName": "ace_advanced_ballistics_fnc_initializeTerrainExtension"
      },
      {
        "fileName": "fnc_initModuleSettings.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg\n * Module for adjusting the advanced ballistics settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_advanced_ballistics_fnc_initModuleSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\",\"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(muzzleVelocityVariationEnabled), \"muzzleVelocityVariationEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(ammoTemperatureEnabled), \"ammoTemperatureEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(barrelLengthInfluenceEnabled), \"barrelLengthInfluenceEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(bulletTraceEnabled), \"bulletTraceEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(simulateForEveryone), \"simulateForEveryone\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(disabledInFullAutoMode), \"disabledInFullAutoMode\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(simulateForSnipers), \"simulateForSnipers\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(simulateForGroupMembers), \"simulateForGroupMembers\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(simulationInterval), \"simulationInterval\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(simulationRadius), \"simulationRadius\"] call EFUNC(common,readSettingFromModule);\n\nGVAR(simulationInterval) = 0 max GVAR(simulationInterval) min 0.2;\n",
        "functionName": "ace_advanced_ballistics_fnc_initModuleSettings"
      },
      {
        "fileName": "fnc_readAmmoDataFromConfig.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Reads the ammo class config and updates the config cache\n *\n * Arguments:\n * ammo - classname <STRING>\n *\n * Return Value:\n * 0: _airFriction <NUMBER>\n * 1: _caliber <NUMBER>\n * 2: _bulletLength <NUMBER>\n * 3: _bulletMass <NUMBER>\n * 4: _transonicStabilityCoef <NUMBER>\n * 5: _dragModel <NUMBER>\n * 6: _ballisticCoefficients <NUMBER>\n * 7: _velocityBoundaries <NUMBER>\n * 8: _atmosphereModel <NUMBER>\n * 9: _ammoTempMuzzleVelocityShifts <NUMBER>\n * 10: _muzzleVelocityTable <NUMBER>\n * 11: _barrelLengthTable <NUMBER>\n *\n * Example:\n * [\"ammo\"] call ace_advanced_ballistics_fnc_readAmmoDataFromConfig\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nTRACE_1(\"Reading Ammo Config\",_this);\n\nprivate _ammoConfig = configFile >> \"CfgAmmo\" >> _this;\n\nprivate _airFriction = getNumber(_ammoConfig >> \"airFriction\");\nprivate _caliber = 0 max getNumber(_ammoConfig >> \"ACE_caliber\");\nprivate _bulletLength = 0 max getNumber(_ammoConfig >> \"ACE_bulletLength\");\nprivate _bulletMass = 0 max getNumber(_ammoConfig >> \"ACE_bulletMass\");\nprivate _transonicStabilityCoef = 0 max getNumber(_ammoConfig >> \"ACE_transonicStabilityCoef\") min 1;\nif (_transonicStabilityCoef == 0) then {\n    _transonicStabilityCoef = 0.5;\n};\nprivate _dragModel = getNumber(_ammoConfig >> \"ACE_dragModel\");\nif (!(_dragModel in [1, 2, 5, 6, 7, 8])) then {\n    _dragModel = 1;\n};\nprivate _ballisticCoefficients = getArray(_ammoConfig >> \"ACE_ballisticCoefficients\");\nprivate _velocityBoundaries = getArray(_ammoConfig >> \"ACE_velocityBoundaries\");\nprivate _atmosphereModel = getText(_ammoConfig >> \"ACE_standardAtmosphere\");\nif (_atmosphereModel isEqualTo \"\") then {\n    _atmosphereModel = \"ICAO\";\n};\nprivate _muzzleVelocityVariationSD = DEFAULT_MUZZLE_VELOCITY_VARIATION_SD;\nif (isNumber (_ammoConfig >> \"ACE_muzzleVelocityVariationSD\")) then {\n    _muzzleVelocityVariationSD = getNumber(_ammoConfig >> \"ACE_muzzleVelocityVariationSD\") / 100;\n};\nprivate _ammoTempMuzzleVelocityShifts = getArray(_ammoConfig >> \"ACE_ammoTempMuzzleVelocityShifts\");\nprivate _muzzleVelocityTable = getArray(_ammoConfig >> \"ACE_muzzleVelocities\");\nprivate _barrelLengthTable = getArray(_ammoConfig >> \"ACE_barrelLengths\");\n\n//Handle subsonic ammo that would have a huge muzzle velocity shift (when ballistic configs not explicitly defined)\nprivate _typicalSpeed = getNumber (_ammoConfig >> \"typicalSpeed\");\nif ((_typicalSpeed > 0) && {_typicalSpeed < 360}) then {\n    private _inheritedBarrelConfig = (!(_muzzleVelocityTable isEqualTo [])) && {(configProperties [_ammoConfig, \"(configName _x) == 'ACE_muzzleVelocities'\", false]) isEqualTo []};\n    private _inheritedTempConfig = (!(_ammoTempMuzzleVelocityShifts isEqualTo [])) && {(configProperties [_ammoConfig, \"(configName _x) == 'ACE_ammoTempMuzzleVelocityShifts'\", false]) isEqualTo []};\n    TRACE_3(\"subsonic\",_typicalSpeed,_inheritedBarrelConfig,_inheritedTempConfig);\n    if (_inheritedBarrelConfig || _inheritedTempConfig) then {\n        private _parentConfig = inheritsFrom _ammoConfig;\n        private _parentSpeed = getNumber (_parentConfig >> \"typicalSpeed\");\n        WARNING_4(\"Subsonic Ammo %1 (%2 m/s) missing `ACE_muzzleVelocities` or `ACE_ammoTempMuzzleVelocityShifts` configs, attempting to use parent %3 (%4m/s)\",_this,_typicalSpeed,configName _parentConfig, _parentSpeed);\n        if (_parentSpeed <= 0) exitWith {//Handle weird or null parent\n            _muzzleVelocityTable = [];\n            _ammoTempMuzzleVelocityShifts = [];\n        };\n        private _linearMuliplier = _typicalSpeed / _parentSpeed;\n        if (_inheritedBarrelConfig) then {\n            if (!((configProperties [_parentConfig, \"(configName _x) == 'ACE_muzzleVelocities'\", false]) isEqualTo [])) then {\n                TRACE_2(\"Parent Has Defined Barrel MV\",_linearMuliplier,_muzzleVelocityTable);\n                { _muzzleVelocityTable set [_forEachIndex, (_x * _linearMuliplier)]; } forEach _muzzleVelocityTable;\n            } else {\n                TRACE_2(\"Parent DOES NOT Have Defined Barrel MV\",_linearMuliplier,_muzzleVelocityTable);\n                _muzzleVelocityTable = [];\n            };\n        };\n        if (_inheritedTempConfig) then {\n            if (!((configProperties [_parentConfig, \"(configName _x) == 'ACE_ammoTempMuzzleVelocityShifts'\", false]) isEqualTo [])) then {\n                TRACE_2(\"Parent Has Defined Ammo Temp Shifts\",_linearMuliplier,_muzzleVelocityTable);\n                { _ammoTempMuzzleVelocityShifts set [_forEachIndex, (_x * _linearMuliplier)]; } forEach _ammoTempMuzzleVelocityShifts;\n            } else {\n                TRACE_2(\"Parent DOES NOT Have Defined Ammo Temp Shifts\",_linearMuliplier,_muzzleVelocityTable);\n                _ammoTempMuzzleVelocityShifts = [];\n            };\n        };\n    };\n};\n\nprivate _result = [_airFriction, _caliber, _bulletLength, _bulletMass, _transonicStabilityCoef, _dragModel, _ballisticCoefficients, _velocityBoundaries, _atmosphereModel, _ammoTempMuzzleVelocityShifts, _muzzleVelocityTable, _barrelLengthTable, _muzzleVelocityVariationSD];\n\nuiNamespace setVariable [format[QGVAR(%1), _this], _result];\n\n_result\n",
        "functionName": "ace_advanced_ballistics_fnc_readAmmoDataFromConfig"
      },
      {
        "fileName": "fnc_readWeaponDataFromConfig.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Reads the weapon class config and updates the config cache\n *\n * Arguments:\n * weapon - classname <STRING>\n *\n * Return Value:\n * 0: _barrelTwist <NUMBER>\n * 1: _twistDirection <NUMBER>\n * 2: _barrelLength <NUMBER>\n *\n * Example:\n * [\"weapon\"] call ace_advanced_ballistics_fnc_readWeaponDataFromConfig\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _weaponConfig = (configFile >> \"CfgWeapons\" >> _this);\n\nprivate _barrelTwist = 0 max getNumber(_weaponConfig >> \"ACE_barrelTwist\");\nprivate _twistDirection = [0, 1] select (_barrelTwist != 0);\nif (isNumber (_weaponConfig >> \"ACE_twistDirection\")) then {\n    _twistDirection = getNumber (_weaponConfig >> \"ACE_twistDirection\");\n    if !(_twistDirection in [-1, 0, 1]) then {\n        _twistDirection = 1;\n    };\n};\n\nprivate _barrelLength = 0 max getNumber(_weaponConfig >> \"ACE_barrelLength\");\n\nprivate _result = [_barrelTwist, _twistDirection, _barrelLength];\n\nuiNamespace setVariable [format[QGVAR(%1), _this], _result];\n\n_result\n",
        "functionName": "ace_advanced_ballistics_fnc_readWeaponDataFromConfig"
      }
    ]
  },
  {
    "component": "advanced_fatigue",
    "files": [
      {
        "fileName": "initSettings.sqf",
        "content": "[\n    QGVAR(enabled),\n    \"CHECKBOX\",\n    [LSTRING(Enabled), LSTRING(Enabled_Description)],\n    \"ACE3 Advanced Fatigue\",\n    true,\n    true\n] call CBA_Settings_fnc_init;\n\n[\n    QGVAR(enableStaminaBar),\n    \"CHECKBOX\",\n    [LSTRING(EnableStaminaBar), LSTRING(EnableStaminaBar_Description)],\n    \"ACE3 Advanced Fatigue\",\n    true,\n    true, {\n        if (!_this) then {\n            private _staminaBarContainer = uiNamespace getVariable [QGVAR(staminaBarContainer), controlNull];\n            _staminaBarContainer ctrlSetFade 1;\n            _staminaBarContainer ctrlCommit 0;\n        };\n    }\n] call CBA_Settings_fnc_init;\n\n[\n    QGVAR(performanceFactor),\n    \"SLIDER\",\n    [LSTRING(PerformanceFactor), LSTRING(PerformanceFactor_Description)],\n    \"ACE3 Advanced Fatigue\",\n    [0, 2, 1, 1],\n    true\n] call CBA_Settings_fnc_init;\n\n[\n    QGVAR(recoveryFactor),\n    \"SLIDER\",\n    [LSTRING(RecoveryFactor), LSTRING(RecoveryFactor_Description)],\n    \"ACE3 Advanced Fatigue\",\n    [0, 2, 1, 1],\n    true\n] call CBA_Settings_fnc_init;\n\n[\n    QGVAR(loadFactor),\n    \"SLIDER\",\n    [LSTRING(LoadFactor), LSTRING(LoadFactor_Description)],\n    \"ACE3 Advanced Fatigue\",\n    [0, 2, 1, 1],\n    true\n] call CBA_Settings_fnc_init;\n\n[\n    QGVAR(terrainGradientFactor),\n    \"SLIDER\",\n    [LSTRING(TerrainGradientFactor), LSTRING(TerrainGradientFactor_Description)],\n    \"ACE3 Advanced Fatigue\",\n    [0, 2, 1, 1],\n    true\n] call CBA_Settings_fnc_init;\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\nif (!hasInterface) exitWith {};\n\n[\"ace_settingsInitialized\", {\n    if (!GVAR(enabled)) exitWith {};\n\n    // - Post process effect ------------------------------------------------------\n    GVAR(ppeBlackout) = ppEffectCreate [\"ColorCorrections\", 4220];\n    GVAR(ppeBlackout) ppEffectEnable true;\n    GVAR(ppeBlackout) ppEffectForceInNVG true;\n    GVAR(ppeBlackout) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];\n    GVAR(ppeBlackout) ppEffectCommit 0.4;\n\n    // - GVAR updating and initialization -----------------------------------------\n    [\"unit\", FUNC(handlePlayerChanged), true] call CBA_fnc_addPlayerEventHandler;\n\n    [\"visibleMap\", {\n        params [\"\", \"_visibleMap\"]; // command visibleMap is updated one frame later\n        private _staminaBarContainer = uiNamespace getVariable [QGVAR(staminaBarContainer), controlNull];\n        _staminaBarContainer ctrlShow ((!_visibleMap) && {(vehicle ACE_player) == ACE_player});\n    }, true] call CBA_fnc_addPlayerEventHandler;\n    [\"vehicle\", {\n        private _staminaBarContainer = uiNamespace getVariable [QGVAR(staminaBarContainer), controlNull];\n        _staminaBarContainer ctrlShow ((!visibleMap) && {(vehicle ACE_player) == ACE_player});\n    }, true] call CBA_fnc_addPlayerEventHandler;\n\n    // - Duty factors -------------------------------------------------------------\n    if ([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\n        [QEGVAR(medical,pain), { // 0->1.0, 0.5->1.05, 1->1.1\n            linearConversion [0, 1, (_this getVariable [QEGVAR(medical,pain), 0]), 1, 1.1, true];\n        }] call FUNC(addDutyFactor);\n        [QEGVAR(medical,bloodVolume), { // 100->1.0, 90->1.1, 80->1.2\n            linearConversion [100, 0, (_this getVariable [QEGVAR(medical,bloodVolume), 100]), 1, 2, true];\n        }] call FUNC(addDutyFactor);\n    };\n    if ([\"ACE_Dragging\"] call EFUNC(common,isModLoaded)) then {\n        [QEGVAR(dragging,isCarrying), {\n            [1, 3] select (_this getVariable [QEGVAR(dragging,isCarrying), false]);\n        }] call FUNC(addDutyFactor);\n    };\n    if ([\"ACE_Weather\"] call EFUNC(common,isModLoaded)) then {\n        [QEGVAR(weather,temperature), { // 35->1, 45->2\n            linearConversion [35, 45, (missionNamespace getVariable [QEGVAR(weather,currentTemperature), 25]), 1, 2, true];\n        }] call FUNC(addDutyFactor);\n    };\n\n    // - Add main loop at 1 second interval -------------------------------------------------------------\n    [FUNC(mainLoop), [], 1] call CBA_fnc_waitAndExecute;\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_settingChanged\", {\n    params [\"_name\", \"_value\"];\n\n    if (_name == QGVAR(enableStaminaBar) && {!_value}) then {\n        private _staminaBarContainer = uiNamespace getVariable [QGVAR(staminaBarContainer), controlNull];\n        _staminaBarContainer ctrlSetFade 1;\n        _staminaBarContainer ctrlCommit 0;\n    };\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n//#include \"initSettings.sqf\"\n\nGVAR(staminaBarWidth) = 10 * (((safezoneW / safezoneH) min 1.2) / 40);\nGVAR(dutyList) = [[], []];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addDutyFactor.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Adds a duty factor.\n *\n * Arguments:\n * 0: Factor ID <STRING>\n * 1: Factor <NUMBER> or <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ID\", 5] call ace_advanced_fatigue_fnc_addDutyFactor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [[\"_id\", \"\", [\"\"]], [\"_factor\", 1, [0, {}]]];\nif (_id == \"\" || {_factor isEqualTo 1}) exitWith {};\n\nGVAR(dutyList) params [\"_idList\", \"_factorList\"];\n_idList pushBack _id;\n_factorList pushBack _factor,\n",
        "functionName": "ace_advanced_fatigue_fnc_addDutyFactor"
      },
      {
        "fileName": "fnc_createStaminaBar.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Creates the stamina bar.\n *\n * Arguments:\n * 0: Display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [DISPLAY] call ace_advanced_fatigue_fnc_createStaminaBar\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_display\"];\n\nprivate _staminaBar = _display ctrlCreate [QGVAR(StaminaBarContainer), -1];\nuiNamespace setVariable [QGVAR(staminaBarContainer), _staminaBar];\n\n_staminaBar ctrlSetFade 1;\n_staminaBar ctrlCommit 0;\n",
        "functionName": "ace_advanced_fatigue_fnc_createStaminaBar"
      },
      {
        "fileName": "fnc_getAnimDuty.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Calculates the duty of the current animation.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Animation name <STRING>\n *\n * Return Value:\n * Duty <NUMBER>\n *\n * Example:\n * [player, \"AidlPercMstpSlowWrflDnon_G05\"] call ace_advanced_fatigue_fnc_getAnimDuty\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\", \"_animName\"];\n\nprivate _duty = 1;\nprivate _animType = _animName select [1, 3];\n\nGVAR(isSwimming) = false;\nGVAR(isProne) = (stance _unit) == \"PRONE\";\n\nif (_animType in [\"idl\", \"mov\", \"adj\"]) then {\n    switch (_animName select [5, 3]) do {\n        case (\"knl\"): {\n            _duty = 1.5;\n        };\n        case (\"pne\"): {\n            _duty = 10;\n            GVAR(isProne) = true; // #4880 - Unarmed sprint->prone has wrong `stance`\n        };\n        default {\n            _duty = 1;\n        };\n    };\n\n    if (currentWeapon _unit != handgunWeapon _unit) then {\n        if (_animName select [13, 3] == \"ras\") then {\n            // low ready jog\n            _duty = _duty * 1.2;\n            if (_animName select [9, 3] == \"tac\") then {\n                // high ready jog/walk\n                _duty = _duty * 1.5;\n            };\n        };\n    };\n} else {\n    // swimming and diving\n    switch (true) do {\n        case (_animType in [\"swm\", \"ssw\", \"bsw\"]): {\n            _duty = 6.5;\n            GVAR(isSwimming) = true;\n        };\n        case (_animType in [\"dve\", \"sdv\", \"bdv\"]): {\n            _duty = 2.5;\n            GVAR(isSwimming) = true;\n        };\n    };\n};\n\n_duty\n",
        "functionName": "ace_advanced_fatigue_fnc_getAnimDuty"
      },
      {
        "fileName": "fnc_getMetabolicCosts.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Calculates the current metabolic costs for a unit.\n * Calculation is done according to the Pandolf/Wojtowicz formulas.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Speed <NUMBER>\n *\n * Return Value:\n * Metabolic cost <NUMBER>\n *\n * Example:\n * [player, 3.3] call ace_advanced_fatigue_fnc_getMetabolicCosts\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\", \"_velocity\"];\n\nprivate _gearMass = ((_unit getVariable [QEGVAR(movement,totalLoad), loadAbs _unit]) / 22.046) * GVAR(loadFactor);\n\nprivate _terrainAngle = asin (1 - ((surfaceNormal getPosASL _unit) select 2));\nprivate _terrainGradient = (_terrainAngle / 45 min 1) * 5 * GVAR(terrainGradientFactor);\nprivate _duty = GVAR(animDuty);\n\n{\n    if (_x isEqualType 0) then {\n        _duty = _duty * _x;\n    } else {\n        _duty = _duty * (_unit call _x);\n    };\n} forEach (GVAR(dutyList) select 1);\n\nif (GVAR(isSwimming)) then {\n    _terrainGradient = 0;\n};\n\nif (_velocity > 2) then {\n    (\n        2.10 * SIM_BODYMASS\n        + 4 * (SIM_BODYMASS + _gearMass) * ((_gearMass / SIM_BODYMASS) ^ 2)\n        + (SIM_BODYMASS + _gearMass) * (0.90 * (_velocity ^ 2) + 0.66 * _velocity * _terrainGradient)\n    ) * 0.23 * _duty\n} else {\n    (\n        1.05 * SIM_BODYMASS\n        + 4 * (SIM_BODYMASS + _gearMass) * ((_gearMass / SIM_BODYMASS) ^ 2)\n        + (SIM_BODYMASS + _gearMass) * (1.15 * (_velocity ^ 2) + 0.66 * _velocity * _terrainGradient)\n    ) * 0.23 * _duty\n};\n",
        "functionName": "ace_advanced_fatigue_fnc_getMetabolicCosts"
      },
      {
        "fileName": "fnc_handleEffects.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Handles any audible, visual and physical effects of fatigue.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fatigue <NUMBER>\n * 2: Speed <NUMBER>\n * 3: Overexhausted <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player, 0.5, 3.3, true] call ace_advanced_fatigue_fnc_handleEffects\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\", \"_fatigue\", \"_speed\", \"_overexhausted\"];\n\n#ifdef DEBUG_MODE_FULL\n    systemChat str _fatigue;\n    systemChat str vectorMagnitude velocity _unit;\n#endif\n\n// - Audible effects ----------------------------------------------------------\nGVAR(lastBreath) = GVAR(lastBreath) + 1;\nif (_fatigue > 0.4 && {GVAR(lastBreath) > (_fatigue * -10 + 9)} && {!underwater _unit}) then {\n    switch (true) do {\n        case (_fatigue < 0.6): {\n            playSound (QGVAR(breathLow) + str(floor random 6));\n        };\n        case (_fatigue < 0.85): {\n            playSound (QGVAR(breathMid) + str(floor random 6));\n        };\n        default {\n            playSound (QGVAR(breathMax) + str(floor random 6));\n        };\n    };\n    GVAR(lastBreath) = 0;\n};\n\n// - Visual effects -----------------------------------------------------------\nGVAR(ppeBlackoutLast) = GVAR(ppeBlackoutLast) + 1;\nif (GVAR(ppeBlackoutLast) == 1) then {\n    GVAR(ppeBlackout) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];\n    GVAR(ppeBlackout) ppEffectCommit 1;\n} else {\n    if (_fatigue > 0.85) then {\n        if (GVAR(ppeBlackoutLast) > (100 - _fatigue * 100) / 3) then {\n            GVAR(ppeBlackout) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[2,2,0,0,0,0.1,0.5]];\n            GVAR(ppeBlackout) ppEffectCommit 1;\n            GVAR(ppeBlackoutLast) = 0;\n        };\n    };\n};\n\n// - Physical effects ---------------------------------------------------------\nif (GVAR(isSwimming)) exitWith {\n    _unit setAnimSpeedCoef linearConversion [0.7, 0.9, _fatigue, 1, 0.5, true];\n\n    if ((isSprintAllowed _unit) && {_fatigue > 0.7}) then {\n        [_unit, \"blockSprint\", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);\n    } else {\n        if ((!isSprintAllowed _unit) && {_fatigue < 0.7}) then {\n            [_unit, \"blockSprint\", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);\n        };\n    };\n};\nif ((getAnimSpeedCoef _unit) != 1) then {\n    _unit setAnimSpeedCoef 1;\n};\n\nif (_overexhausted) then {\n    [_unit, \"forceWalk\", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);\n} else {\n    if (isForcedWalk _unit && {_fatigue < 0.7}) then {\n        [_unit, \"forceWalk\", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);\n    } else {\n        if ((isSprintAllowed _unit) && {_fatigue > 0.7}) then {\n            [_unit, \"blockSprint\", QUOTE(ADDON), true] call EFUNC(common,statusEffect_set);\n        } else {\n            if ((!isSprintAllowed _unit) && {_fatigue < 0.6}) then {\n                [_unit, \"blockSprint\", QUOTE(ADDON), false] call EFUNC(common,statusEffect_set);\n            };\n        };\n    };\n};\n\nswitch (stance _unit) do {\n    case (\"CROUCH\"): {\n        _unit setCustomAimCoef (1.0 + _fatigue ^ 2 * 0.1);\n    };\n    case (\"PRONE\"): {\n        _unit setCustomAimCoef (1.0 + _fatigue ^ 2 * 2.0);\n    };\n    default {\n        _unit setCustomAimCoef (1.5 + _fatigue ^ 2 * 3.0);\n    };\n};\n",
        "functionName": "ace_advanced_fatigue_fnc_handleEffects"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Handles switching units (once on init and afterwards via Zeus).\n *\n * Arguments:\n * 0: New Unit <OBJECT>\n * 1: Old Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [newbob, oldbob] call ace_advanced_fatigue_fnc_handlePlayerChanged\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_newUnit\", \"_oldUnit\"];\nTRACE_2(\"unit changed\",_newUnit,_oldUnit);\n\nif !(isNull _oldUnit) then {\n    _oldUnit enableStamina true;\n    _oldUnit removeEventHandler [\"AnimChanged\", _oldUnit getVariable [QGVAR(animHandler), -1]];\n    _oldUnit setVariable [QGVAR(animHandler), nil];\n    TRACE_1(\"remove old\",_oldUnit getVariable QGVAR(animHandler));\n\n    _oldUnit setVariable [QGVAR(ae1Reserve), GVAR(ae1Reserve)];\n    _oldUnit setVariable [QGVAR(ae2Reserve), GVAR(ae2Reserve)];\n    _oldUnit setVariable [QGVAR(anReserve), GVAR(anReserve)];\n    _oldUnit setVariable [QGVAR(anFatigue), GVAR(anFatigue)];\n    _oldUnit setVariable [QGVAR(muscleDamage), GVAR(muscleDamage)];\n};\n\n_newUnit enableStamina false;\n\n// Don't add a new EH if the unit respawned\nif (_newUnit getVariable [QGVAR(animHandler), -1] == -1) then {\n    private _animHandler = _newUnit addEventHandler [\"AnimChanged\", {\n        GVAR(animDuty) = _this call FUNC(getAnimDuty);\n    }];\n    TRACE_1(\"add new\",_animHandler);\n    _newUnit setVariable [QGVAR(animHandler), _animHandler];\n};\n\nGVAR(ae1Reserve)      = _newUnit getVariable [QGVAR(ae1Reserve), AE1_MAXRESERVE];\nGVAR(ae2Reserve)      = _newUnit getVariable [QGVAR(ae2Reserve), AE2_MAXRESERVE];\nGVAR(anReserve)       = _newUnit getVariable [QGVAR(anReserve), AN_MAXRESERVE];\nGVAR(anFatigue)       = _newUnit getVariable [QGVAR(anFatigue), 0];\nGVAR(muscleDamage)    = _newUnit getVariable [QGVAR(muscleDamage), 0];\n\n// Clean variables for respawning units\n{\n    _newUnit setVariable [_x, nil];\n} forEach [QGVAR(ae1Reserve), QGVAR(ae2Reserve), QGVAR(anReserve), QGVAR(anFatigue), QGVAR(muscleDamage)];\n\nGVAR(VO2Max)          = 35 + 20 * (_newUnit getVariable [QGVAR(performanceFactor), GVAR(performanceFactor)]);\nGVAR(VO2MaxPower)     = GVAR(VO2Max) * SIM_BODYMASS * 0.23 * JOULES_PER_ML_O2 / 60;\nGVAR(peakPower)       = VO2MAX_STRENGTH * GVAR(VO2MaxPower);\n\nGVAR(ae1PathwayPower) = GVAR(peakPower) / (13.3 + 16.7 + 113.3) * 13.3 * ANTPERCENT ^ 1.28 * 1.362;\nGVAR(ae2PathwayPower) = GVAR(peakPower) / (13.3 + 16.7 + 113.3) * 16.7 * ANTPERCENT ^ 1.28 * 1.362;\n\nGVAR(ppeBlackoutLast) = 100;\nGVAR(lastBreath)      = 0;\nGVAR(animDuty)        = [_newUnit, animationState _newUnit] call FUNC(getAnimDuty);\n",
        "functionName": "ace_advanced_fatigue_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handleStaminaBar.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Handles visual changes of the stamina bar.\n *\n * Arguments:\n * Percent of stamina remaining <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [0.5] call ace_advanced_fatigue_fnc_handleStaminaBar\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_stamina\"];\n\nprivate _staminaBarContainer = uiNamespace getVariable [QGVAR(staminaBarContainer), controlNull];\n\n// - Size ---------------------------------------------------------------------\n// Shrink the container to cut off the image (other wise it would just get stretched)\nprivate _posAndSize = ctrlPosition _staminaBarContainer;\n_posAndSize set [2, _stamina * GVAR(staminaBarWidth)];\n_staminaBarContainer ctrlSetPosition _posAndSize;\n\n// - Opacity ------------------------------------------------------------------\nif (_stamina >= 0.8) then {\n    _staminaBarContainer ctrlSetFade (0.9 + 0.1 * (_stamina - 0.8) / 0.2);\n} else {\n    _staminaBarContainer ctrlSetFade (0.9 * _stamina / 0.8);\n};\n\n// - Color --------------------------------------------------------------------\n// 1.0 - 0.8: White\n// 0.6 - 0.4: Orange\n// 0.4 - 0.2: Red\nprivate _color = [1, 1, 1];\nif (_stamina < 0.6) then {\n    if (_stamina < 0.4) then {\n        _color = [1, 0, 0] vectorAdd ([0, 0.65, 0] vectorMultiply ((_stamina - 0.2) / 0.2));\n    } else {\n        _color = [1, 0.65, 0] vectorAdd ([0, 0.35, 1] vectorMultiply ((_stamina - 0.4) / 0.2));\n    };\n};\n_color pushBack 1;\n(_staminaBarContainer controlsGroupCtrl 10) ctrlSetTextColor _color;\n\n_staminaBarContainer ctrlCommit 1;\n",
        "functionName": "ace_advanced_fatigue_fnc_handleStaminaBar"
      },
      {
        "fileName": "fnc_mainLoop.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Main looping function that updates fatigue values.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_fatigue_fnc_mainLoop\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nif (!alive ACE_player) exitWith { // Dead people don't breath, Will also handle null (Map intros)\n    [FUNC(mainLoop), [], 1] call CBA_fnc_waitAndExecute;\n    private _staminaBarContainer = uiNamespace getVariable [QGVAR(staminaBarContainer), controlNull];\n    _staminaBarContainer ctrlSetFade 1;\n    _staminaBarContainer ctrlCommit 1;\n};\n\nprivate _currentWork = REE;\nprivate _currentSpeed = (vectorMagnitude (velocity ACE_player)) min 6;\n\n// fix #4481. Diving to the ground is recorded as PRONE stance with running speed velocity. Cap maximum speed to fix.\nif (GVAR(isProne)) then {\n    _currentSpeed = _currentSpeed min 1.5;\n};\n\nif ((vehicle ACE_player == ACE_player) && {_currentSpeed > 0.1} && {isTouchingGround ACE_player || {underwater ACE_player}}) then {\n    _currentWork = [ACE_player, _currentSpeed] call FUNC(getMetabolicCosts);\n    _currentWork = _currentWork max REE;\n};\n\n// Calculate muscle damage increase\n// Note: Muscle damage recovery is ignored as it takes multiple days\nGVAR(muscleDamage) = GVAR(muscleDamage) + (_currentWork / GVAR(peakPower)) ^ 3.2 * 0.00004;\nprivate _muscleIntegritySqrt = sqrt (1 - GVAR(muscleDamage));\n\n// Calculate available power\nprivate _ae1PathwayPowerFatigued = GVAR(ae1PathwayPower) * sqrt (GVAR(ae1Reserve) / AE1_MAXRESERVE) * OXYGEN * _muscleIntegritySqrt;\nprivate _ae2PathwayPowerFatigued = GVAR(ae2PathwayPower) * sqrt (GVAR(ae2Reserve) / AE2_MAXRESERVE) * OXYGEN * _muscleIntegritySqrt;\n\n// Calculate how much power is consumed from each reserve\nprivate _ae1Power = _currentWork min _ae1PathwayPowerFatigued;\nprivate _ae2Power = ((_currentWork - _ae1Power) max 0) min _ae2PathwayPowerFatigued;\nprivate _anPower  = (_currentWork - _ae1Power - _ae2Power) max 0;\n\n// Remove ATP from reserves for current work\nGVAR(ae1Reserve) = GVAR(ae1Reserve) - _ae1Power / WATTSPERATP;\nGVAR(ae2Reserve) = GVAR(ae2Reserve) - _ae2Power / WATTSPERATP;\nGVAR(anReserve)  = GVAR(anReserve)  -  _anPower / WATTSPERATP;\n// Increase anearobic fatigue\nGVAR(anFatigue)  = GVAR(anFatigue) + _anPower * (0.057 / GVAR(peakPower)) * 1.1;\n\n// Aerobic ATP reserve recovery\nGVAR(ae1Reserve) = ((GVAR(ae1Reserve) + OXYGEN * 6.60 * (GVAR(ae1PathwayPower) - _ae1Power) / GVAR(ae1PathwayPower) * GVAR(recoveryFactor)) min AE1_MAXRESERVE) max 0;\nGVAR(ae2Reserve) = ((GVAR(ae2Reserve) + OXYGEN * 5.83 * (GVAR(ae2PathwayPower) - _ae2Power) / GVAR(ae2PathwayPower) * GVAR(recoveryFactor)) min AE2_MAXRESERVE) max 0;\n\n// Anaerobic ATP reserver and fatigue recovery\nGVAR(anReserve) = ((GVAR(anReserve)\n    + (_ae1PathwayPowerFatigued + _ae2PathwayPowerFatigued - _ae1Power - _ae2Power) / GVAR(VO2MaxPower) * 56.7 * GVAR(anFatigue) ^ 2 * GVAR(recoveryFactor)\n) min AN_MAXRESERVE) max 0;\n\nGVAR(anFatigue) = ((GVAR(anFatigue)\n    - (_ae1PathwayPowerFatigued + _ae2PathwayPowerFatigued - _ae1Power - _ae2Power) * (0.057 / GVAR(peakPower)) * GVAR(anFatigue) ^ 2 * GVAR(recoveryFactor)\n) min 1) max 0;\n\nprivate _aeReservePercentage = (GVAR(ae1Reserve) / AE1_MAXRESERVE + GVAR(ae2Reserve) / AE2_MAXRESERVE) / 2;\nprivate _anReservePercentage = GVAR(anReserve) / AN_MAXRESERVE;\nprivate _perceivedFatigue = 1 - (_anReservePercentage min _aeReservePercentage);\n\n[ACE_player, _perceivedFatigue, _currentSpeed, GVAR(anReserve) == 0] call FUNC(handleEffects);\n\nif (GVAR(enableStaminaBar)) then {\n    [GVAR(anReserve) / AN_MAXRESERVE] call FUNC(handleStaminaBar);\n};\n\n[FUNC(mainLoop), [], 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_advanced_fatigue_fnc_mainLoop"
      },
      {
        "fileName": "fnc_moduleSettings.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Initializes the module settings.\n *\n * Arguments:\n * 0: Module <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [MODULE] call ace_advanced_fatigue_fnc_moduleSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_logic\"];\n\n[_logic, QGVAR(enabled), \"Enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(performanceFactor), \"PerformanceFactor\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(recoveryFactor), \"RecoveryFactor\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(loadFactor), \"LoadFactor\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(terrainGradientFactor), \"TerrainGradientFactor\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_advanced_fatigue_fnc_moduleSettings"
      },
      {
        "fileName": "fnc_removeDutyFactor.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Removes a duty factor.\n *\n * Arguments:\n * 0: Factor ID <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ID\"] call ace_advanced_fatigue_fnc_removeDutyFactor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [[\"_id\", \"\", [\"\"]]];\n\nGVAR(dutyList) params [\"_idList\", \"_factorList\"];\nprivate _index = _idList find _id;\n\nif (_index != -1) then {\n    _idList deleteAt _index;\n    _factorList deleteAt _index;\n};\n",
        "functionName": "ace_advanced_fatigue_fnc_removeDutyFactor"
      }
    ]
  },
  {
    "component": "advanced_throwing",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n// Fired XEH\n[QGVAR(throwFiredXEH), FUNC(throwFiredXEH)] call CBA_fnc_addEventHandler;\n\n// Exit on HC\nif (!hasInterface) exitWith {};\n\n// Ammo/Magazines look-up hash for correctness of initSpeed\nGVAR(ammoMagLookup) = call CBA_fnc_createNamespace;\n{\n    {\n        private _ammo = getText (configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\n        if (_ammo != \"\") then { GVAR(ammoMagLookup) setVariable [_ammo, _x]; };\n    } count (getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> _x >> \"magazines\"));\n    nil\n} count getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> \"muzzles\");\n\n\n// Add keybinds\n[\"ACE3 Weapons\", QGVAR(prepare), localize LSTRING(Prepare), {\n    // Condition\n    if (!([ACE_player] call FUNC(canPrepare))) exitWith {false};\n    if (EGVAR(common,isReloading)) exitWith {true};\n\n    // Statement\n    [ACE_player] call FUNC(prepare);\n\n    true\n}, {false}, [34, [true, false, false]], false] call CBA_fnc_addKeybind; // Shift + G\n\n[\"ACE3 Weapons\", QGVAR(dropModeToggle), localize LSTRING(DropModeToggle), {\n    // Condition\n    if (!(ACE_player getVariable [QGVAR(inHand), false]) || {underwater ACE_player}) exitWith {false};\n\n    // Statement\n    private _currentDropMode = ACE_player getVariable [QGVAR(dropMode), false];\n    ACE_player setVariable [QGVAR(dropMode), !_currentDropMode];\n\n    ACE_player setVariable [QGVAR(throwType), THROW_TYPE_DEFAULT]; // Reset for consistency when opening\n    call FUNC(updateControlsHint); // Change controls hint for MMB\n    true\n}, {false}, [34, [false, true, false]], false] call CBA_fnc_addKeybind; // Ctrl + G\n\n[\"ACE3 Weapons\", QGVAR(dropModeHold), localize LSTRING(DropModeHold), {\n    // Condition\n    if !(ACE_player getVariable [QGVAR(inHand), false]) exitWith {false};\n\n    // Statement\n    ACE_player setVariable [QGVAR(dropMode), true];\n    ACE_player setVariable [QGVAR(throwType), THROW_TYPE_DEFAULT]; // Reset for consistency when opening\n    call FUNC(updateControlsHint); // Change controls hint for MMB\n    true\n}, {\n    // Condition\n    if !(ACE_player getVariable [QGVAR(inHand), false]) exitWith {false};\n\n    // Statement\n    ACE_player setVariable [QGVAR(dropMode), false];\n    call FUNC(updateControlsHint); // Change controls hint for MMB\n    true\n}, [0, [false, false, false]], false] call CBA_fnc_addKeybind; // Empty\n\n\n// Event handlers\n[\"unit\", {\n    [_this select 1, \"Player changed\"] call FUNC(exitThrowMode);\n}] call CBA_fnc_addPlayerEventhandler;\n\n[\"visibleMap\", {\n    params [\"\", \"_visibleMap\"]; // command visibleMap is updated one frame later\n    if (_visibleMap && {ACE_player getVariable [QGVAR(inHand), false]}) then {\n        [ACE_player, \"Opened Map\"] call FUNC(exitThrowMode);\n    };\n}] call CBA_fnc_addPlayerEventhandler;\n\n\n[\"ace_interactMenuOpened\", {\n    // Exit if advanced throwing is disabled (pick up only supports advanced throwing)\n    if (!GVAR(enabled)) exitWith {};\n\n    if (ACE_player getVariable [QGVAR(inHand), false]) then {\n        [ACE_player, \"Interact menu opened\"] call FUNC(exitThrowMode);\n    } else {\n        params [\"_interactionType\"];\n        // Ignore self-interaction menu, when in vehicle and when pick up is disabled\n        if (GVAR(enablePickUp) && {_interactionType == 0} && {vehicle ACE_player == ACE_player}) then {\n            // Show pick up actions on CfgAmmo's\n            call FUNC(renderPickUpInteraction);\n        };\n    };\n}] call CBA_fnc_addEventHandler;\n\n\n// Set last thrown time on Vanilla Throwing and Advanced Throwing\n[\"ace_firedPlayer\", {\n    //IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\"];\n    if (_weapon == \"Throw\") then {\n        _unit setVariable [QGVAR(lastThrownTime), CBA_missionTime];\n    };\n}] call CBA_fnc_addEventHandler;\n\n\n// Display handlers\n[\"KeyDown\", {_this call FUNC(onKeyDown)}] call CBA_fnc_addDisplayHandler;\n[\"MouseButtonDown\", {_this call FUNC(onMouseButtonDown)}] call CBA_fnc_addDisplayHandler;\n[\"MouseZChanged\", {_this call FUNC(onMouseScroll)}] call CBA_fnc_addDisplayHandler;\n\n\n#ifdef DRAW_THROW_PATH\nGVAR(predictedPath) = [];\nGVAR(flightPath) = [];\n\naddMissionEventHandler [\"Draw3D\", { // Blue is predicted before throw, red is real\n    {\n        _x params [\"\", \"_newTrajAGL\"];\n        drawIcon3D [\"\\a3\\ui_f\\data\\gui\\cfg\\hints\\icon_text\\group_1_ca.paa\", [0,0,1,1], _newTrajAGL, 1, 1, 0, \"\", 2];\n    } forEach GVAR(predictedPath);\n    {\n        _x params [\"_pos\", \"_vectorUp\"];\n        drawIcon3D [\"\\a3\\ui_f\\data\\gui\\cfg\\hints\\icon_text\\group_1_ca.paa\", [1,0,0,1], _pos, 1, 1, 0, \"\", 2];\n        drawLine3D [_pos, _pos vectorAdd _vectorUp, [1,0,1,1]];\n    } forEach GVAR(flightPath);\n}];\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canPrepare.sqf",
        "content": "/*\n * Author: Jonpas\n * Checks if a throwable can be prepared.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Ignore Last Thrown Time <BOOL> (default: false)\n *\n * Return Value:\n * Can Prepare <BOOL>\n *\n * Example:\n * [unit] call ace_advanced_throwing_fnc_canPrepare\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_ignoreLastThrownTime\", false]];\n\n// Don't delay when picking up\nif (_ignoreLastThrownTime) then {\n    _unit setVariable [QGVAR(lastThrownTime), -1];\n};\n\nGVAR(enabled) &&\n\n#ifdef ALLOW_QUICK_THROW\n{true} &&\n#else\n{_unit getVariable [QGVAR(lastThrownTime), CBA_missionTime - 3] < CBA_missionTime - 2} && // Prevent throwing in quick succession\n#endif\n\n{!(call EFUNC(common,isFeatureCameraActive))} &&\n{[_unit, objNull, [\"isNotInside\", \"isNotSwimming\", \"isNotSitting\"/*, \"isNotOnLadder\"*/]] call EFUNC(common,canInteractWith)} && // Ladder needs positioning fixes on throw\n{_unit call CBA_fnc_canUseWeapon} // Disable in non-FFV seats due to surface detection issues\n",
        "functionName": "ace_advanced_throwing_fnc_canPrepare"
      },
      {
        "fileName": "fnc_canThrow.sqf",
        "content": "/*\n * Author: Jonpas\n * Checks if a throwable can be thrown.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Can Throw <BOOL>\n *\n * Example:\n * [unit] call ace_advanced_throwing_fnc_canThrow\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif !(_unit getVariable [QGVAR(inHand), false]) exitWith {false};\n\nif (vehicle _unit != _unit) exitWith {\n    private _startPos = eyePos _unit;\n    private _aimLinePos = AGLToASL (positionCameraToWorld [0, 0, 1]);\n    private _intersections = lineIntersectsSurfaces [_startPos, _aimLinePos, _unit, objNull, false];\n    //TRACE_1(\"Intersections\",_intersections);\n\n    (_intersections select {(vehicle _unit) in (_x select 3)}) isEqualTo []\n};\n\ntrue\n",
        "functionName": "ace_advanced_throwing_fnc_canThrow"
      },
      {
        "fileName": "fnc_drawArc.sqf",
        "content": "/*\n * Author: Zapat, Dslyecxi, Jonpas\n * Draws throw arc.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Flight path (just for debug) <ARRAY>\n *\n * Example:\n * call ace_advanced_throwing_fnc_drawArc\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Disable drawing when intersecting with the vehicle\nif !([ACE_player] call FUNC(canThrow)) exitWith {\n    drawIcon3D [\"\\a3\\ui_f\\data\\igui\\cfg\\actions\\obsolete\\ui_action_cancel_manualfire_ca.paa\", [1, 0, 0, 1], positionCameraToWorld [0, 0, 1], 1, 1, 0, \"\", 1];\n};\n\nprivate _activeThrowable = ACE_player getVariable [QGVAR(activeThrowable), objNull];\n\n// Exit during switches and similar where object can be null for a very short amount of time\nif (isNull _activeThrowable) exitWith {};\n\nprivate _dropMode = ACE_player getVariable [QGVAR(dropMode), false];\nprivate _throwType = ACE_player getVariable [QGVAR(throwType), THROW_TYPE_DEFAULT];\nprivate _throwSpeed = ACE_player getVariable [QGVAR(throwSpeed), THROW_SPEED_DEFAULT];\n\nprivate _direction = [THROWSTYLE_NORMAL_DIR, THROWSTYLE_HIGH_DIR] select (_throwType == \"high\" || {_dropMode});\nprivate _velocity = [_throwSpeed, _throwSpeed / THROWSTYLE_HIGH_VEL_COEF / 1.25] select (_throwType == \"high\");\n_velocity = [_velocity, THROWSTYLE_DROP_VEL] select _dropMode;\n\nprivate _viewStart = AGLToASL (positionCameraToWorld [0, 0, 0]);\nprivate _viewEnd = AGLToASL (positionCameraToWorld _direction);\n\nprivate _initialVelocity = (vectorNormalized (_viewEnd vectorDiff _viewStart)) vectorMultiply (_velocity);\nprivate _prevTrajASL = getPosASLVisual _activeThrowable;\n\nprivate _pathData = [];\n\nfor \"_i\" from 0.05 to 1.45 step 0.1 do {\n    private _newTrajASL = (getPosASLVisual _activeThrowable) vectorAdd (_initialVelocity vectorMultiply _i) vectorAdd ([0, 0, -4.9] vectorMultiply (_i * _i));\n    private _cross = 0;\n\n    if (_newTrajASL distance (getPosASLVisual ACE_player) <= 20) then {\n        if ((ASLToATL _newTrajASL) select 2 <= 0) then {\n            _cross = 1; // 1: Distance Limit (Green)\n        } else {\n            // Even vanilla throwables go through glass, only \"GEOM\" LOD will stop it but that will also stop it when there is glass in a window\n            if (lineIntersects [_prevTrajASL, _newTrajASL]) then { // Checks the \"VIEW\" LOD\n                _cross = 2; // 2: View LOD Block (Red)\n            } else {\n                if (!((lineIntersectsSurfaces [_prevTrajASL, _newTrajASL, _activeThrowable, ACE_player, true, 1, \"GEOM\", \"FIRE\"]) isEqualTo [])) then {\n                    _cross = 3; // 3: GEOM/FIRE LOD Block (Yellow) - pass a3 bulding glass, but blocked on some CUP glass\n                };\n            };\n        };\n\n        private _iDim = linearConversion [20, 0, _newTrajASL distance (getPosASLVisual ACE_player), 0.3, 2.5, true];\n        private _alpha = linearConversion [20, 0, _newTrajASL distance (getPosASLVisual ACE_player), 0.05, 0.7, true];\n        private _movePerc = linearConversion [3, 0, vectorMagnitude (velocity ACE_player), 0, 1, true];\n        _alpha = _alpha * _movePerc;\n\n        private _col = [ [1, 1, 1, _alpha], [0, 1, 0, _alpha], [1, 0, 0, _alpha], [1, 1, 0, _alpha] ] select _cross;\n\n        if (_cross != 2 && {lineIntersects [eyePos ACE_player, _newTrajASL]}) then {\n            _col set [3, 0.1];\n        };\n\n        _pathData pushBack [_col, ASLToAGL _newTrajASL, _iDim];\n    };\n\n    if (_cross > 0) exitWith {};\n\n    _prevTrajASL = _newTrajASL;\n};\n\nreverse _pathData;\n// To get the sort order correct from our POV, particularly when using outlined dots\n{\n    _x params [\"_col\", \"_newTrajAGL\", \"_iDim\"];\n    drawIcon3D [\"\\a3\\ui_f\\data\\gui\\cfg\\hints\\icon_text\\group_1_ca.paa\", _col, _newTrajAGL, _iDim, _iDim, 0, \"\", 2];\n\n    #ifdef DRAW_THROW_PATH\n        drawIcon3D [\"\", _col, _newTrajAGL, _iDim, _iDim, 0, str (ACE_player distance _newTrajAGL), 2, 0.05, \"RobotoCondensed\"];\n    #endif\n} forEach _pathData;\n\n_pathData\n",
        "functionName": "ace_advanced_throwing_fnc_drawArc"
      },
      {
        "fileName": "fnc_drawThrowable.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas, SilentSpike\n * Handles drawing the currently selected or cooked throwable.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_advanced_throwing_fnc_drawThrowable\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (dialog || {!(ACE_player getVariable [QGVAR(inHand), false])} || {!([ACE_player, true] call FUNC(canPrepare))}) exitWith {\n    [ACE_player, \"In dialog or no throwable in hand or cannot prepare throwable\"] call FUNC(exitThrowMode);\n};\n\nprivate _primed = ACE_player getVariable [QGVAR(primed), false];\nprivate _activeThrowable = ACE_player getVariable [QGVAR(activeThrowable), objNull];\n\n// Exit if throwable died primed in hand\nif (isNull _activeThrowable && {_primed}) exitWith {\n    [ACE_player, \"Throwable died primed in hand\"] call FUNC(exitThrowMode);\n};\n\nprivate _throwable = currentThrowable ACE_player;\n\n// Inventory check\nif (_throwable isEqualTo [] && {!_primed}) exitWith {\n    [ACE_player, \"No valid throwables\"] call FUNC(exitThrowMode);\n};\n\nprivate _throwableMag = _throwable param [0, \"#none\"];\n\n// If not primed, double check we actually have the magazine in inventory\nif ((!_primed) && {!((_throwableMag in (uniformItems ACE_player)) || {_throwableMag in (vestItems ACE_player)} || {_throwableMag in (backpackItems ACE_player)})}) exitWith {\n    [ACE_player, \"No valid throwable (glitched currentThrowable)\"] call FUNC(exitThrowMode);\n};\n\n// Get correct throw power for primed grenade\nif (_primed) then {\n    private _ammoType = typeOf _activeThrowable;\n    _throwableMag = GVAR(ammoMagLookup) getVariable _ammoType;\n    if (isNil \"_throwableMag\") then {\n        // What we're trying to throw must not be a normal throwable because it is not in our lookup hash (e.g. 40mm smoke)\n        // Just use HandGrenade as it has an average initSpeed value\n        _throwableMag = \"HandGrenade\";\n    };\n};\n\n// Some throwables have different classname for magazine and ammo\n// Primed magazine may be different, read speed before checking primed magazine!\nprivate _throwSpeed = getNumber (configFile >> \"CfgMagazines\" >> _throwableMag >> \"initSpeed\");\n\n// Reduce power of throw over shoulder and to sides\nprivate _unitDirVisual = getDirVisual ACE_player;\nprivate _cameraDir = getCameraViewDirection ACE_player;\n_cameraDir = (_cameraDir select 0) atan2 (_cameraDir select 1);\n\nprivate _phi = abs (_cameraDir - _unitDirVisual) % 360;\n_phi = [_phi, 360 - _phi] select (_phi > 180);\n\nprivate _power = linearConversion [0, 180, _phi - 30, 1, 0.3, true];\nACE_player setVariable [QGVAR(throwSpeed), _throwSpeed * _power];\n\n#ifdef DEBUG_MODE_FULL\nhintSilent format [\"Heading: %1\\nPower: %2\\nSpeed: %3\\nThrowMag: %4\\nMuzzle: %5\", _phi, _power, _throwSpeed * _power, _throwableMag, ACE_player getVariable [QGVAR(activeMuzzle), \"\"]];\n#endif\n\nprivate _throwableType = getText (configFile >> \"CfgMagazines\" >> _throwableMag >> \"ammo\");\n\nif (!([ACE_player] call FUNC(canThrow)) && {!_primed}) exitWith {\n    if (!isNull _activeThrowable) then {\n        deleteVehicle _activeThrowable;\n        // Restore muzzle ammo (setAmmo 1 has no impact if no appliccable throwable in inventory)\n        ACE_player setAmmo [ACE_player getVariable [QGVAR(activeMuzzle), \"\"], 1];\n    };\n};\n\nif (isNull _activeThrowable || {(_throwableType != typeOf _activeThrowable) && {!_primed}}) then {\n    if (!isNull _activeThrowable) then {\n        deleteVehicle _activeThrowable;\n        // Restore muzzle ammo (setAmmo 1 has no impact if no appliccable throwable in inventory)\n        ACE_player setAmmo [ACE_player getVariable [QGVAR(activeMuzzle), \"\"], 1];\n    };\n    _activeThrowable = _throwableType createVehicleLocal [0, 0, 0];\n    _activeThrowable enableSimulation false;\n    ACE_player setVariable [QGVAR(activeThrowable), _activeThrowable];\n\n    // Set muzzle ammo to 0 to block vanilla throwing (can only be 0 or 1)\n    private _muzzle = _throwableMag call FUNC(getMuzzle);\n    ACE_player setAmmo [_muzzle, 0];\n    ACE_player setVariable [QGVAR(activeMuzzle), _muzzle];\n};\n\n// Exit in case of explosion in hand\nif (isNull _activeThrowable) exitWith {\n    [ACE_player, \"No active throwable (explosion in hand)\"] call FUNC(exitThrowMode);\n};\n\n// Exit if locality changed (someone took the throwable from hand)\nif (!local _activeThrowable && {ACE_player getVariable [QGVAR(localityChanged), true]}) exitWith {\n    [ACE_player, \"Throwable locality changed\"] call FUNC(exitThrowMode);\n};\n\n// Set position\nprivate _posHeadRel = ACE_player selectionPosition \"head\";\n\nprivate _leanCoef = (_posHeadRel select 0) - 0.15; // 0.15 counters the base offset\n// Don't take leaning into account when weapon is lowered due to jiggling when walking side-ways (bandaid)\nif (abs _leanCoef < 0.15 || {vehicle ACE_player != ACE_player} || {weaponLowered ACE_player}) then {\n    _leanCoef = 0;\n};\n\nprivate _posCameraWorld = AGLToASL (positionCameraToWorld [0, 0, 0]);\n_posHeadRel = _posHeadRel vectorAdd [-0.03, 0.01, 0.15]; // Bring closer to eyePos value\nprivate _posFin = AGLToASL (ACE_player modelToWorldVisual _posHeadRel);\n\nprivate _throwType = ACE_player getVariable [QGVAR(throwType), THROW_TYPE_DEFAULT];\n\n// Orient it nicely, point towards player\n_activeThrowable setDir (_unitDirVisual + 90);\n\nprivate _pitch = [-30, -90] select (_throwType == \"high\");\n[_activeThrowable, _pitch, 0] call BIS_fnc_setPitchBank;\n\n// Force drop mode if underwater\nif (underwater player) then {\n    ACE_player setVariable [QGVAR(dropMode), true];\n};\n\nif (ACE_player getVariable [QGVAR(dropMode), false]) then {\n    _posFin = _posFin vectorAdd (AGLToASL (positionCameraToWorld [_leanCoef, 0, ACE_player getVariable [QGVAR(dropDistance), DROP_DISTANCE_DEFAULT]]));\n\n    // Even vanilla throwables go through glass, only \"GEOM\" LOD will stop it but that will also stop it when there is no glass in a window\n    if (lineIntersects [_posCameraWorld, _posFin vectorDiff _posCameraWorld]) then {\n        ACE_player setVariable [QGVAR(dropDistance), ((ACE_player getVariable [QGVAR(dropDistance), DROP_DISTANCE_DEFAULT]) - 0.1) max DROP_DISTANCE_DEFAULT];\n    };\n} else {\n    private _xAdjustBonus = [0, -0.075] select (_throwType == \"high\");\n    private _yAdjustBonus = [0, 0.1] select (_throwType == \"high\");\n    private _cameraOffset = [_leanCoef, 0, 0.3] vectorAdd [-0.1, -0.15, -0.03] vectorAdd [_xAdjustBonus, _yAdjustBonus, 0];\n\n    _posFin = _posFin vectorAdd (AGLToASL (positionCameraToWorld _cameraOffset));\n\n    if (vehicle ACE_player != ACE_player) then {\n        // Counteract vehicle velocity including acceleration\n        private _vectorDiff = (velocity (vehicle ACE_player)) vectorMultiply (time - (ACE_player getVariable [QGVAR(lastTick), time]) + 0.01);\n        _posFin = _posFin vectorAdd _vectorDiff;\n        ACE_player setVariable [QGVAR(lastTick), time];\n    };\n};\n\n_activeThrowable setPosASL (_posFin vectorDiff _posCameraWorld);\n",
        "functionName": "ace_advanced_throwing_fnc_drawThrowable"
      },
      {
        "fileName": "fnc_exitThrowMode.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas\n * Exits throw mode.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Reason <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, \"reason\"] call ace_advanced_throwing_fnc_exitThrowMode\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_reason\"];\nTRACE_2(\"params\",_unit,_reason);\n\nif !(_unit getVariable [QGVAR(inHand), false]) exitWith {};\n\n#ifdef DEBUG_MODE_FULL\n    systemChat format [\"Exit Throw Mode: %1\", _reason];\n#endif\n\nprivate _activeThrowable = _unit getVariable [QGVAR(activeThrowable), objNull];\nif !(_unit getVariable [QGVAR(primed), false]) then {\n    deleteVehicle _activeThrowable;\n} else {\n    _unit setVariable [QGVAR(lastThrownTime), CBA_missionTime];\n    // Fix floating for throwables without proper physics (eg. IR Grenade)\n    _activeThrowable setVelocity [0, 0, -0.1];\n\n    // Set thrower\n    private _instigator = (getShotParents _activeThrowable) param [1, _unit]; // getShotParents could be [] on replaced grenades (like IR chemlight)\n    [QEGVAR(common,setShotParents), [_activeThrowable, _unit, _instigator]] call CBA_fnc_serverEvent;\n};\n\n// Restore muzzle ammo (setAmmo 1 has no impact if no appliccable throwable in inventory)\n_unit setAmmo [_unit getVariable [QGVAR(activeMuzzle), \"\"], 1];\n\n_unit setVariable [QGVAR(inHand), false];\n_unit setVariable [QGVAR(primed), false];\n_unit setVariable [QGVAR(activeThrowable), objNull];\n_unit setVariable [QGVAR(activeMuzzle), \"\"];\n_unit setVariable [QGVAR(throwType), THROW_TYPE_DEFAULT];\n_unit setVariable [QGVAR(throwSpeed), THROW_SPEED_DEFAULT];\n_unit setVariable [QGVAR(dropMode), false];\n_unit setVariable [QGVAR(dropDistance), DROP_DISTANCE_DEFAULT];\n\n// Remove controls hint (check if ever enabled is inside the function)\ncall EFUNC(interaction,hideMouseHint);\n\n// Remove throw action\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(throwAction), -1]] call EFUNC(common,removeActionEventHandler);\n\n// Remove throw arc draw\nif (!isNil QGVAR(draw3DHandle)) then {\n    removeMissionEventHandler [\"Draw3D\", GVAR(draw3DHandle)];\n    GVAR(draw3DHandle) = nil;\n};\n",
        "functionName": "ace_advanced_throwing_fnc_exitThrowMode"
      },
      {
        "fileName": "fnc_getMuzzle.sqf",
        "content": "/*\n * Author: PabstMirror\n * Retrieve muzzle name from config.\n *\n * Arguments:\n * 0: Magazine Classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * \"magazine\" call ace_advanced_throwing_fnc_getMuzzle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_magazineClassname\"];\n\n_magazineClassname = toLower _magazineClassname;\nprivate _throwMuzzles = getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> \"muzzles\");\n\n_throwMuzzles = _throwMuzzles select {_magazineClassname in ((getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> _x >> \"magazines\")) apply {toLower _x})};\n\n[_throwMuzzles select 0, \"\"] select (_throwMuzzles isEqualTo [])\n",
        "functionName": "ace_advanced_throwing_fnc_getMuzzle"
      },
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: Jonpas\n * Initializes the Advanced Throwing module.\n *\n * Arguments:\n * 0: Logic <OBJECT>\n * 1: Synchronized Units <ARRAY>\n * 2: Module Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic, [unit1, unit2], true] call ace_advanced_throwing_fnc_moduleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(showThrowArc), \"showThrowArc\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(showMouseControls), \"showMouseControls\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(enablePickUp), \"enablePickUp\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(enablePickUpAttached), \"enablePickUpAttached\"] call EFUNC(common,readSettingFromModule);\n\nINFO_1(\"Advanced Throwing Module Initialized. Enabled: %1\",GVAR(enabled));\n",
        "functionName": "ace_advanced_throwing_fnc_moduleInit"
      },
      {
        "fileName": "fnc_onKeyDown.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas\n * Key down event.\n *\n * Arguments:\n * 0: Control <CONTROL>\n * 1: Key <NUMBER>\n * 2: Shift <BOOL>\n * 3: Ctrl <BOOL>\n * 4: Alt <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [control, 5, false, true, false] call ace_advanced_throwing_fnc_onKeyDown\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif !(ACE_player getVariable [QGVAR(inHand), false]) exitWith {false};\n\nparams [\"\", \"_key\", \"_shift\", \"_ctrl\", \"_alt\"];\n\n// Exit if any of the action keys is pressed\n{\n    if (_key in _x) exitWith {\n        [ACE_player, \"Pressed a key that cycles us out of throwables\"] call FUNC(exitThrowMode);\n    };\n} forEach [\n    actionKeys \"ReloadMagazine\",\n    actionKeys \"Handgun\",\n    actionKeys \"Binoculars\",\n    actionKeys \"SwitchWeapon\",\n    actionKeys \"Optics\",\n    actionKeys \"NextWeapon\",\n    actionKeys \"PrevWeapon\",\n    actionKeys \"OpticsTemp\",\n    actionKeys \"SwitchPrimary\",\n    actionKeys \"SwitchHandgun\",\n    actionKeys \"SwitchSecondary\"\n];\n\nfalse\n",
        "functionName": "ace_advanced_throwing_fnc_onKeyDown"
      },
      {
        "fileName": "fnc_onMouseButtonDown.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas\n * Mouse button down event.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_throwing_fnc_onMouseButtonDown\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif !(ACE_player getVariable [QGVAR(inHand), false]) exitWith {};\n\nparams [\"\", \"_key\"];\n\n// Left mouse button\n// \"DefaultAction\" doesn't get executed when in driver seat or in FFV seat with weapon lowered\nif (_key == 0) exitWith {\n    if (!isNull (ACE_player getVariable [QGVAR(activeThrowable), objNull])) then {\n        // Look gets automatically pointed at weapon direction on first LMB press when in FFV seat, require weapon to be up if in vehicle\n        private _inVehicle = vehicle ACE_player != ACE_player;\n        if (!_inVehicle || {_inVehicle && {!weaponLowered ACE_player}}) then {\n            [ACE_player] call FUNC(throw);\n        };\n    };\n};\n\nprivate _primed = ACE_player getVariable [QGVAR(primed), false];\n\n// Right mouse button\nif (_key == 1) exitWith {\n    if (!_primed) then {\n        [ACE_player, \"Storing throwable\"] call FUNC(exitThrowMode);\n    };\n};\n\n// Middle mouse button\nif (_key == 2 && {!_primed}) exitWith {\n    [ACE_player, true] call FUNC(prime);\n};\n",
        "functionName": "ace_advanced_throwing_fnc_onMouseButtonDown"
      },
      {
        "fileName": "fnc_onMouseScroll.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas\n * Mouse scroll wheel changed event.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_advanced_throwing_fnc_onMouseScroll\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif !(ACE_player getVariable [QGVAR(inHand), false]) exitWith {};\n\nparams [\"\", \"_amount\"];\n\nif (ACE_player getVariable [QGVAR(dropMode), false]) then {\n    private _dropDistance = ACE_player getVariable [QGVAR(dropDistance), DROP_DISTANCE_DEFAULT];\n    if (_amount < 0) then {\n        // Move closer\n        ACE_player setVariable [QGVAR(dropDistance), (_dropDistance - 0.1) max DROP_DISTANCE_DEFAULT];\n    } else {\n        // Move further\n        ACE_player setVariable [QGVAR(dropDistance), (_dropDistance + 0.1) min 1];\n    };\n\n    // Limit distance in vehicle\n    if (vehicle ACE_player != ACE_player) then {\n        ACE_player setVariable [QGVAR(dropDistance), (ACE_player getVariable [QGVAR(dropDistance), DROP_DISTANCE_DEFAULT]) min 0.5];\n    };\n} else {\n    private _throwType = ACE_player getVariable [QGVAR(throwType), THROW_TYPE_DEFAULT];\n    if (_amount < 0) then {\n        if (_throwType == \"high\") then {\n            ACE_player setVariable [QGVAR(throwType), THROW_TYPE_DEFAULT];\n        };\n    } else {\n        if (_throwType == \"normal\") then {\n            ACE_player setVariable [QGVAR(throwType), \"high\"];\n        };\n    };\n    TRACE_2(\"Change Throw Type\",_amount,ACE_player getVariable QGVAR(throwType));\n};\n",
        "functionName": "ace_advanced_throwing_fnc_onMouseScroll"
      },
      {
        "fileName": "fnc_pickUp.sqf",
        "content": "/*\n * Author: Jonpas\n * Picks up a throwable from the ground.\n *\n * Arguments:\n * 0: Pick Up Helper <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [helper, player] call ace_advanced_throwing_fnc_pickUp\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_helper\", \"_unit\"];\nTRACE_2(\"params\",_helper,_unit);\n\nprivate _activeThrowable = _helper getVariable [QGVAR(throwable), objNull];\n\nif (isNull _activeThrowable) exitWith {TRACE_2(\"throwable is null\",_helper,_activeThrowable);};\n\n// Detach if attached (to vehicle for example or another player)\nprivate _attachedTo = attachedTo _activeThrowable;\nif (!isNull _attachedTo) then {\n    private _attachedList = _attachedTo getVariable [QEGVAR(attach,attached), []];\n    {\n        _x params [\"_xObject\"];\n        if (_activeThrowable == _xObject) exitWith {\n            TRACE_2(\"removing from ace_attach\",_attachedTo,_attachedList);\n            _attachedList deleteAt _forEachIndex;\n            _attachedTo setVariable [QEGVAR(attach,attached), _attachedList, true];\n        };\n    } forEach _attachedList;\n    detach _activeThrowable;\n};\n\n// Change locality for manipulation (some commands require local object, such as setVelocity)\nif (!local _activeThrowable) then {\n    [\"ace_setOwner\", [_activeThrowable, CBA_clientID]] call CBA_fnc_serverEvent;\n\n    // Mark when it's safe to exit throw mode (locality change has delay)\n    _unit setVariable [QGVAR(localityChanged), false];\n    [{\n        // Becomes local or times out\n        local (_this select 0) || {(_this select 1) + 5 < CBA_missionTime}\n    }, {\n        (_this select 2) setVariable [QGVAR(localityChanged), true];\n    }, [_activeThrowable, CBA_missionTime, _unit]] call CBA_fnc_waitUntilAndExecute;\n};\n\n// Invoke listenable event\n[\"ace_throwablePickedUp\", [_activeThrowable, _unit, _attachedTo]] call CBA_fnc_localEvent;\n\n_unit setVariable [QGVAR(primed), true];\n_unit setVariable [QGVAR(activeThrowable), _activeThrowable];\n\n_unit call FUNC(prepare);\n",
        "functionName": "ace_advanced_throwing_fnc_pickUp"
      },
      {
        "fileName": "fnc_prepare.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas\n * Prepares throwable or selects the next.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit] call ace_advanced_throwing_fnc_prepare\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\n// Select next throwable if one already in hand\nif (_unit getVariable [QGVAR(inHand), false]) exitWith {\n    TRACE_1(\"inHand\",_unit);\n    if (!(_unit getVariable [QGVAR(primed), false])) then {\n        TRACE_1(\"not primed\",_unit);\n        // Restore muzzle ammo (setAmmo 1 has no impact if no appliccable throwable in inventory)\n        // selectNextGrenade relies on muzzles array (setAmmo 0 removes the muzzle from the array and current can't be found, cycles between 0 and 1 muzzles)\n        ACE_player setAmmo [ACE_player getVariable [QGVAR(activeMuzzle), \"\"], 1];\n        [_unit] call EFUNC(weaponselect,selectNextGrenade);\n    };\n};\n\n// Try selecting next throwable if none currently selected\nif (isNull (_unit getVariable [QGVAR(activeThrowable), objNull]) && {(currentThrowable _unit) isEqualTo []} && {!([_unit] call EFUNC(weaponselect,selectNextGrenade))}) exitWith {\n    TRACE_1(\"no throwables\",_unit);\n};\n\n\n_unit setVariable [QGVAR(inHand), true];\n\n// Add controls hint\ncall FUNC(updateControlsHint);\n\n// Add throw action to suppress weapon firing (not possible to suppress mouseButtonDown event)\n_unit setVariable [QGVAR(throwAction), [_unit, \"DefaultAction\", {true}, {true}] call EFUNC(common,addActionEventHandler)];\n\n// Draw throwable and throw arc if enabled\nGVAR(draw3DHandle) = addMissionEventHandler [\"Draw3D\", {\n    call FUNC(drawThrowable);\n    if (GVAR(showThrowArc)) then {\n        call FUNC(drawArc);\n    };\n}];\n",
        "functionName": "ace_advanced_throwing_fnc_prepare"
      },
      {
        "fileName": "fnc_prime.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas\n * Primes the throwable, creates global throwable vehicle and throws Fired XEH.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Show Hint <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit] call ace_advanced_throwing_fnc_prime\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_showHint\", false]];\nTRACE_2(\"params\",_unit,_showHint);\n\n_unit setVariable [QGVAR(primed), true];\n\n// Remove item before cooking to prevent weaponselect showing more throwables than there actually are in inventory\nprivate _throwableMag = (currentThrowable _unit) select 0;\n_unit removeItem _throwableMag;\n\nprivate _throwableType = getText (configFile >> \"CfgMagazines\" >> _throwableMag >> \"ammo\");\nprivate _muzzle = _unit getVariable [QGVAR(activeMuzzle), \"\"];\n\n// Set muzzle ammo to 0 to block vanilla throwing (can only be 0 or 1), removeItem above resets it\n_unit setAmmo [_muzzle, 0];\n\n// Handle weird scripted grenades (RHS) which could cause unexpected behaviour\nprivate _nonInheritedCfg = configProperties [configFile >> \"CfgAmmo\" >> _throwableType, 'configName _x == QGVAR(replaceWith)', false];\nif ((count _nonInheritedCfg) == 1) then {\n    _throwableType = getText (_nonInheritedCfg select 0);\n};\n\n// Create actual throwable globally\nprivate _activeThrowableOld = _unit getVariable [QGVAR(activeThrowable), objNull];\nprivate _activeThrowable = createVehicle [_throwableType, _activeThrowableOld, [], 0, \"CAN_COLLIDE\"];\n_unit setVariable [QGVAR(activeThrowable), _activeThrowable];\ndeleteVehicle _activeThrowableOld;\n\n// Throw Fired XEH\n[QGVAR(throwFiredXEH), [\n    _unit, // unit\n    \"Throw\", // weapon\n    _muzzle, // muzzle\n    _muzzle, // mode\n    _throwableType, // ammo\n    _throwableMag, // magazine\n    _activeThrowable // projectile\n]] call CBA_fnc_globalEvent;\n\n// Set prime instigator\n[QEGVAR(common,setShotParents), [_activeThrowable, _unit, _unit]] call CBA_fnc_serverEvent;\n\nif (_showHint) then {\n    // Show primed hint\n    private _displayNameShort = getText (configFile >> \"CfgMagazines\" >> _throwableMag >> \"displayNameShort\");\n    private _picture = getText (configFile >> \"CfgMagazines\" >> _throwableMag >> \"picture\");\n\n    [[_displayNameShort, localize LSTRING(Primed)] joinString \" \", _picture] call EFUNC(common,displayTextPicture);\n\n    // Change controls hint for RMB\n    call FUNC(updateControlsHint);\n};\n",
        "functionName": "ace_advanced_throwing_fnc_prime"
      },
      {
        "fileName": "fnc_renderPickUpInteraction.sqf",
        "content": "/*\n * Author: PabstMirror, Jonpas\n * When interact_menu starts rendering (from \"interact_keyDown\" event).\n * Add pick up helpers to all nearby throwables and keep setting them to their position (setVariable and attachTo does not work on CfgAmmo).\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_advanced_throwing_fnc_renderPickUpInteraction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n[{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_setPosition\", \"_addedPickUpHelpers\", \"_throwablesHelped\", \"_nearThrowables\"];\n\n    // isNull is necessarry to prevent rare error when ending mission with interact key down\n    if (EGVAR(interact_menu,keyDown) && {!isNull ACE_player}) then {\n        // Rescan when player moved >5 meters from last pos, nearObjects can be costly with a lot of objects around\n        if ((getPosASL ACE_player) distance _setPosition > 5) then {\n             // Grenades inherit from GrenadeHand, IR throwbles from IRStrobeBase, IR Chemlights are special snowflakes\n             // nearEntities does not see throwables\n            _nearThrowables = ACE_player nearObjects [\"GrenadeHand\", PICK_UP_DISTANCE];\n            _nearThrowables append (ACE_player nearObjects [\"IRStrobeBase\", PICK_UP_DISTANCE]);\n            _nearThrowables append (ACE_player nearObjects [\"ACE_Chemlight_IR_Dummy\", PICK_UP_DISTANCE]);\n\n            {\n                if (!(_x in _throwablesHelped) &&\n                    {!(_x isKindOf \"SmokeShellArty\")} && {!(_x isKindOf \"G_40mm_Smoke\")} && // All smokes inherit from \"GrenadeHand\" >> \"SmokeShell\"\n                    {GVAR(enablePickUpAttached) || {!GVAR(enablePickUpAttached) && {isNull (attachedTo _x)}}}\n                ) then {\n                    TRACE_2(\"Making PickUp Helper\",_x,typeOf _x);\n                    private _pickUpHelper = QGVAR(pickUpHelper) createVehicleLocal [0, 0, 0];\n\n                    _pickUpHelper attachTo [_x, [0, 0, 0]];\n                    _pickUpHelper setVariable [QGVAR(throwable), _x];\n\n                    _addedPickUpHelpers pushBack _pickUpHelper;\n                    _throwablesHelped pushBack _x;\n                };\n                nil\n            } count _nearThrowables;\n\n            _args set [0, getPosASL ACE_player];\n            _args set [3, _nearThrowables];\n        };\n\n        // Make sure helper is on correct location as it will not automatically move\n        // attachTo is not supported with CfgAmmo, it is only used to get location\n        {\n            // Only handling with attachTo works nicely\n            _x attachTo [_x getVariable [QGVAR(throwable), objNull], [0, 0, 0]];\n            nil\n        } count _addedPickUpHelpers;\n    } else {\n        TRACE_1(\"Cleaning Pick Up Helpers\",count _addedPickUpHelpers);\n        {deleteVehicle _x} count _addedPickUpHelpers;\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n}, 0, [(getPosASL ACE_player) vectorAdd [-100, 0, 0], [], [], []]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_advanced_throwing_fnc_renderPickUpInteraction"
      },
      {
        "fileName": "fnc_throw.sqf",
        "content": "/*\n * Author: Dslyecxi, Jonpas\n * Throw selected throwable.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * unit call ace_advanced_throwing_fnc_throw\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\n// Prime the throwable if it hasn't been cooking already\n// Next to proper simulation this also has to happen before delay for orientation of the throwable to be set\nif (!(_unit getVariable [QGVAR(primed), false])) then {\n    [_unit] call FUNC(prime);\n};\n\n[_unit, \"ThrowGrenade\"] call EFUNC(common,doGesture);\n\n// Pass position to reset later because animation may change it in certain stances\n[{\n    params [\"_unit\", \"_activeThrowable\", \"_posThrown\", \"_throwType\", \"_throwSpeed\", \"_dropMode\"];\n    TRACE_6(\"delayParams\",_unit,_activeThrowable,_posThrown,_throwType,_throwSpeed,_dropMode);\n\n    // Reset position in case animation changed it\n    _activeThrowable setPosASL _posThrown;\n\n    // Launch actual throwable\n    private _direction = [THROWSTYLE_NORMAL_DIR, THROWSTYLE_HIGH_DIR] select (_throwType == \"high\" || {_dropMode});\n    private _velocity = [_throwSpeed, _throwSpeed / THROWSTYLE_HIGH_VEL_COEF / 1.25] select (_throwType == \"high\");\n    _velocity = [_velocity, THROWSTYLE_DROP_VEL] select _dropMode;\n\n    private _p2 = (eyePos _unit) vectorAdd (AGLToASL (positionCameraToWorld _direction)) vectorDiff (AGLToASL (positionCameraToWorld [0, 0, 0]));\n    private _p1 = AGLtoASL (_activeThrowable modelToWorldVisual [0, 0, 0]);\n\n    private _newVelocity = (_p1 vectorFromTo _p2) vectorMultiply _velocity;\n\n    // Adjust for throwing from inside vehicles, where we have a vehicle-based velocity that can't be compensated for by a human\n    if (vehicle _unit != _unit) then {\n        _newVelocity = _newVelocity vectorAdd (velocity (vehicle _unit));\n    };\n\n    private _config = configFile >> \"CfgAmmo\" >> typeOf _activeThrowable;\n    private _torqueDir = vectorNormalized (getArray (_config >> QGVAR(torqueDirection)));\n    private _torqueMag = getNumber (_config >> QGVAR(torqueMagnitude));\n    private _torque = _torqueDir vectorMultiply _torqueMag;\n\n    // Drop if unit dies during throw process\n    if (alive _unit) then {\n        _activeThrowable setVelocity _newVelocity;\n        _activeThrowable addTorque (_unit vectorModelToWorld _torque);\n    };\n\n    // Invoke listenable event\n    [\"ace_throwableThrown\", [_unit, _activeThrowable]] call CBA_fnc_localEvent;\n}, [\n    _unit,\n    _unit getVariable [QGVAR(activeThrowable), objNull],\n    getPosASLVisual (_unit getVariable [QGVAR(activeThrowable), objNull]),\n    _unit getVariable [QGVAR(throwType), THROW_TYPE_DEFAULT],\n    _unit getVariable [QGVAR(throwSpeed), THROW_SPEED_DEFAULT],\n    _unit getVariable [QGVAR(dropMode), false]\n], 0.3] call CBA_fnc_waitAndExecute;\n\n\n#ifdef DRAW_THROW_PATH\nGVAR(predictedPath) = call FUNC(drawArc); // Save the current throw arc\nGVAR(flightPath) = [];\nGVAR(flightRotation) = [];\n(_unit getVariable QGVAR(activeThrowable)) spawn {\n    while {!isNull _this && {(getPosATL _this) select 2 > 0.05}} do {\n        GVAR(flightPath) pushBack [ASLtoAGL (getPosASL _this), vectorUp _this];\n        sleep 0.05;\n    };\n};\n#endif\n\n\n// Stop rendering arc and doing rendering magic while throw is happening\n[_unit, \"Completed a throw fully\"] call FUNC(exitThrowMode);\n",
        "functionName": "ace_advanced_throwing_fnc_throw"
      },
      {
        "fileName": "fnc_throwFiredXEH.sqf",
        "content": "/*\n * Author: CBA Team\n * Throws Fired XEH.\n *\n * Arguments:\n * 0: unit - Object the event handler is assigned to <OBJECT>\n * 1: weapon - Fired weapon <STRING>\n * 2: muzzle - Muzzle that was used <STRING>\n * 3: mode - Current mode of the fired weapon <STRING>\n * 4: ammo - Ammo used <STRING>\n * 5: magazine - magazine name which was used <STRING>\n * 6: projectile - Object of the projectile that was shot <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, \"weapon\", \"muzle\", \"mode\", \"ammo\", \"magazine\", projectile] call ace_advanced_throwing_fnc_throwFiredXEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nTRACE_1(\"Fired\",_this);\n\n{\n    _this call _x;\n} forEach ((_this select 0) getVariable \"cba_xeh_fired\");\n",
        "functionName": "ace_advanced_throwing_fnc_throwFiredXEH"
      },
      {
        "fileName": "fnc_updateControlsHint.sqf",
        "content": "/*\n * Author: Jonpas\n * Updates controls hints based on current state.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_advanced_throwing_fnc_updateControlsHint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!GVAR(showMouseControls)) exitWith {};\n\nprivate _primed = ACE_player getVariable [QGVAR(primed), false];\n\nprivate _mmb = [localize LSTRING(ChangeMode), localize LSTRING(Extend)] select (ACE_player getVariable [QGVAR(dropMode), false]);\n\nif (!_primed) then {\n    _mmb = [_mmb, localize LSTRING(Cook)] joinString \" / \";\n};\n\n[\n    localize LSTRING(Throw),\n    [localize ELSTRING(common,Cancel), \"\"] select _primed,\n    _mmb\n] call EFUNC(interaction,showMouseHint);\n",
        "functionName": "ace_advanced_throwing_fnc_updateControlsHint"
      }
    ]
  },
  {
    "component": "ai",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(AISection), {\n    params [[\"_units\", [], [[]]], [\"_sections\", [], [[]]], [\"_bool\", true, [true]]];\n    {\n        private _section = _x;\n        {\n            if (_bool) then {\n                _x enableAI _section;\n            } else {\n                _x disableAI _section;\n            };\n            LOG(format [ARR_4(\"XEH_postInit: %1 disableAI %2 | ID %3\", _x, _section, clientOwner)]);\n        } foreach (_units select {local _x});\n    } foreach _sections\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(unGarrison), FUNC(unGarrison)] call CBA_fnc_addEventHandler;\n[QGVAR(doMove), {\n    params [\"_unitsArray\"];\n    {  \n        _x params [\"_unit\", \"_pos\"];\n        //_unit doFollow leader _unit;\n        _unit setDestination [_pos, \"LEADER PLANNED\", true];\n        _unit doMove _pos;\n        LOG(format [ARR_4(\"XEH_postInit: %1 doMove %2 | ID %3\", _unit, _pos, clientOwner)]);\n    } foreach _unitsArray\n}] call CBA_fnc_addEventHandler;\n[QGVAR(setBehaviour), {\n    params [\"_groupsArray\", \"_behaviour\"];\n    {  \n        _x params [\"_group\"];\n        _group setBehaviour _behaviour;\n        LOG(format [ARR_4(\"XEH_postInit: %1 setBehaviour %2 | ID %3\", _group, _behaviour, clientOwner)]);\n    } foreach _groupsArray\n}] call CBA_fnc_addEventHandler;\n[QGVAR(enableAttack), {\n    params [\"_unitsArray\", \"_mode\"];\n    {\n        _x params [\"_unit\"];\n        _unit enableAttack _mode;\n        LOG(format [ARR_4(\"XEH_postInit: %1 enableAttack %2 | ID %3\", _unit, _mode, clientOwner)]);\n    } foreach _unitsArray\n}] call CBA_fnc_addEventHandler;\n\n#ifdef DEBUG_MODE_FULL\n    addMissionEventHandler [\"Draw3D\", {\n        private _unitMoveList = missionNameSpace getVariable [QGVAR(garrison_unitMoveList), []];\n\n        {\n            _x params  [\"_unit\", \"_pos\"];\n\n            switch true do {\n                case (surfaceIsWater (getPos _unit) && {surfaceIsWater _pos}) : {\n                    for \"_i\" from 0 to 3 do {\n                        drawLine3D [_unit modelToWorldVisualWorld [0,0,1], (AGLtoASL _pos), [1,0,0,1]];\n                    };\n                    drawIcon3D [\"\\a3\\ui_f\\data\\map\\groupicons\\waypoint.paa\", [1,0,0,1], (AGLtoASL _pos), 0.75, 0.75, 0.75];\n                };\n\n                case (!surfaceIsWater (getPos _unit) && {!surfaceIsWater _pos}) : {\n                    for \"_i\" from 0 to 3 do {\n                        drawLine3D [_unit modelToWorldVisual [0,0,1], _pos, [1,0,0,1]];\n                    };\n                    drawIcon3D [\"\\a3\\ui_f\\data\\map\\groupicons\\waypoint.paa\", [1,0,0,1], _pos, 0.75, 0.75, 0.75];\n                };\n\n                case (!surfaceIsWater (getPos _unit) && {surfaceIsWater _pos}) : {\n                    for \"_i\" from 0 to 3 do {\n                        drawLine3D [_unit modelToWorldVisual [0,0,1], (AGLToASL _pos), [1,0,0,1]];\n                    };\n                    drawIcon3D [\"\\a3\\ui_f\\data\\map\\groupicons\\waypoint.paa\", [1,0,0,1], (AGLtoASL _pos), 0.75, 0.75, 0.75];\n                };\n\n                case (surfaceIsWater (getPos _unit) && {!surfaceIsWater _pos}) : {\n                    for \"_i\" from 0 to 3 do {\n                        drawLine3D [_unit modelToWorldVisualWorld  [0,0,1], _pos, [1,0,0,1]];\n                    };\n                    drawIcon3D [\"\\a3\\ui_f\\data\\map\\groupicons\\waypoint.paa\", [1,0,0,1], _pos, 0.75, 0.75, 0.75];\n                };\n            };\n        } foreach _unitMoveList;\n    }];\n#endif"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_garrison.sqf",
        "content": "/*\n * Author: alganthe\n * Garrison function used to garrison AI inside buildings.\n *\n * Arguments:\n * 0: The building(s) nearest this position are used <POSITION>\n * 1: Limit the building search to those type of building <ARRAY>\n * 2: Units that will be garrisoned <ARRAY>\n * 3: Radius to fill building(s) <SCALAR> (default: 50)\n * 4: 0: even filling, 1: building by building, 2: random filling <SCALAR> (default: 0)\n * 5: True to fill building(s) from top to bottom <BOOL> (default: false) (note: only works with filling mode 0 and 1)\n * 6: Teleport units <BOOL> (default: false)\n\n * Return Value:\n * Units not garrisoned <ARRAY>\n *\n * Example:\n * [position, nil, [unit1, unit2, unit3, unitN], 200, 1, false, false] call ace_ai_fnc_garrison\n *\n * Public: Yes\n*/\n#include \"script_component.hpp\"\n\nparams [[\"_startingPos\",[0,0,0], [[]], 3], [\"_buildingTypes\", [\"Building\"], [[]]], [\"_unitsArray\", [], [[]]], [\"_fillingRadius\", 50, [0]], [\"_fillingType\", 0, [0]], [\"_topDownFilling\", false, [true]], [\"_teleport\", false, [true]]];\n\nTRACE_6(\"fnc_garrison: Start\",_startingPos,_buldingTypes,count _unitsArray,_fillingRadius,_fillingTYpe,_topDownFilling);\n\n_unitsArray = _unitsArray select {alive _x && {!isPlayer _x}};\n\nif (_startingPos isEqualTo [0,0,0]) exitWith {\n    TRACE_1(\"fnc_garrison: StartingPos error\",_startingPos);\n    [LSTRING(GarrisonInvalidPosition)] call EFUNC(common,displayTextStructured);\n};\n\nif (count _unitsArray == 0 || {isNull (_unitsArray select 0)}) exitWith {\n    TRACE_1(\"fnc_garrison: Units error\",_unitsArray);\n    [LSTRING(GarrisonNoUnits)] call EFUNC(common,displayTextStructured);\n};\n\nprivate _buildings = nearestObjects [_startingPos, _buildingTypes, ([_fillingRadius, 50] select (_fillingRadius < 50))];\nif (_fillingRadius >= 50) then {\n    _buildings = [_buildings] call CBA_fnc_shuffle;\n};\n\nif (count _buildings == 0) exitWith {\n    TRACE_1(\"fnc_garrison: Building error\",_buildings);\n    [LSTRING(GarrisonNoBuilding)] call EFUNC(common,displayTextStructured);\n};\n\nprivate _buildingsIndex = [];\n\nif (_topDownFilling) then {\n    {\n        private _buildingPos = _x buildingPos -1;\n\n        // Those reverse are necessary, as dumb as it is there's no better way to sort those subarrays in sqf\n        {\n            reverse _x;\n        } foreach _buildingPos;\n\n        _buildingPos sort false;\n\n        {\n            reverse _x;\n        } foreach _buildingPos;\n\n        _buildingsIndex pushBack _buildingPos;\n    } foreach _buildings;\n} else {\n    {\n        _buildingsIndex pushBack (_x buildingPos -1);\n    } foreach _buildings;\n};\n\n// Remove buildings without positions\n{\n    _buildingsIndex deleteAt (_buildingsIndex find _x);\n} foreach (_buildingsIndex select {count _x == 0});\n\n//Remove positions units are already pathing to\n_buildingsIndex = _buildingsIndex apply {\n    private _testedBuilding = _x;\n\n    _testedBuilding select {\n        private _testedPos = _x;\n        (({(_x select 1) isEqualTo _testedPos} count (missionNameSpace getVariable [QGVAR(garrison_unitMoveList), []])) == 0)\n    }\n};\n\n// Warn the user that there's not enough positions to place all units\nprivate _count = 0;\n{_count = _count + count _x} foreach _buildingsIndex;\nif ( (count _unitsArray) - _count > 0) then {\n    TRACE_4(\"fnc_garrison: Not enough spots to place all units\",_unitsArray,count _unitsArray,_count,((count _unitsArray) - _count > 0));\n    [LSTRING(GarrisonNotEnoughPos)] call EFUNC(common,displayTextStructured);\n};\n\nprivate _placedUnits = [];\nprivate _unitMoveList = [];\n\n// Force all units to un-garrison\n[QGVAR(unGarrison), [_unitsArray], _unitsArray] call CBA_fnc_targetEvent;\n\nprivate _fnc_comparePos = {\n    params [\"_nearestUnits\", \"_pos\"];\n    ({\n        if (surfaceIsWater getPos _x) then {\n            floor ((getPosASL _x) select 2) == floor ((AGLtoASL _pos) select 2)\n        } else {\n            floor ((getPosATL _x) select 2) == floor (_pos select 2)\n        };\n    } count _nearestUnits) > 0\n};\n\n// Do the placement\nswitch (_fillingType) do {\n\n    // Even filling\n    case 0: {\n\n        while {count _unitsArray > 0} do {\n            if (count _buildingsIndex == 0) exitWith {};\n            private _building = _buildingsIndex select 0;\n\n            if (_building isEqualTo []) then {\n                LOG(format [ARR_2(\"fnc_garrison: Empty building array | removing building from buildingsIndex | %1 buildings remaining\",count _buildingsIndex)]);\n                _buildingsIndex deleteAt 0;\n\n            } else {\n                private _pos = _building select 0;\n                private _nearestUnits = (_pos nearEntities [\"CAManBase\", 2]);\n                LOG(format [ARR_3(\"fnc_garrison: Unit detection | %1 units nearby | %2 units within height\",count _nearestUnits, {floor ((getPos _x) select 2) == floor (_pos select 2)} count _nearestUnits)]);\n\n                if (count _nearestUnits  > 0 && {[_nearestUnits, _pos] call _fnc_comparePos}) then {\n                    LOG(format [ARR_2(\"fnc_garrison: Unit present | removing position | %1 positions remaining for this building\",count (_buildingsIndex select (_buildingsIndex find _building)) - 1)]);\n                    _buildingsIndex set [0,  _building - [_pos]];\n\n                } else {\n                    private _unit = _unitsArray select 0;\n                    private _posSurface = surfaceIsWater _pos;\n\n                    if (_teleport) then {\n                        doStop _unit;\n                        if (_posSurface) then {\n                            _unit setPosASL (AGLtoASL _pos);\n                        } else {\n                            _unit setPosATL _pos;\n                        };\n\n                    } else {\n                        _unitMoveList pushBack [_unit,[_pos, AGLToASL _pos] select (_posSurface)];\n                    };\n\n                    _placedUnits pushBack _unit;\n                    _unitsArray deleteAt (_unitsArray find _unit);\n                    _building deleteAt 0;\n                    _buildingsIndex deleteAt 0;\n                    _buildingsIndex pushBackUnique _building;\n                    _unit setVariable [QGVAR(garrisonned), true, true];\n                };\n            };\n        };\n    };\n\n    // Building by building\n    case 1: {\n\n        while {count _unitsArray > 0} do {\n            if (count _buildingsIndex == 0) exitWith {};\n            private _building = _buildingsIndex select 0;\n\n            if (_building isEqualTo []) then {\n                LOG(format [ARR_2(\"fnc_garrison: empty building array | removing building from buildingsIndex | %1 buildings remaining\",count _buildingsIndex)]);\n                _buildingsIndex deleteAt 0;\n\n            } else {\n                private _pos = _building select 0;\n                private _nearestUnits = (_pos nearEntities [\"CAManBase\", 2]);\n                LOG(format [ARR_3(\"fnc_garrison: Unit detection | %1 units nearby | %2 units within height\",count _nearestUnits, {floor ((getPos _x) select 2) == floor (_pos select 2)} count _nearestUnits)]);\n\n                if (count _nearestUnits  > 0 && {[_nearestUnits, _pos] call _fnc_comparePos}) then {\n                    LOG(format [ARR_2(\"fnc_garrison: Unit present | removing position | %1 positions remaining for this building\",count (_buildingsIndex select (_buildingsIndex find _building)) - 1)]);\n                    _buildingsIndex set [0, _building - [_pos]];\n\n                } else {\n                    private _unit = _unitsArray select 0;\n                    private _posSurface = surfaceIsWater _pos;\n\n                    if (_teleport) then {\n                        doStop _unit;\n                        if (_posSurface) then {\n                            _unit setPosASL (AGLtoASL _pos);\n                        } else {\n                            _unit setPosATL _pos;\n                        };\n\n                    } else {\n                        _unitMoveList pushBack [_unit,[_pos, AGLToASL _pos] select (_posSurface)];\n                    };\n\n                    _placedUnits pushBack _unit;\n                    _unitsArray deleteAt (_unitsArray find _unit);\n                    _buildingsIndex set [0, _building - [_pos]];\n                    _unit setVariable [QGVAR(garrisonned), true, true];\n                };\n            };\n        };\n    };\n\n    // Random\n    case 2: {\n\n        while {count _unitsArray > 0} do {\n            if (count _buildingsIndex == 0) exitWith {};\n            private _building = selectRandom _buildingsIndex;\n\n            if (_building isEqualTo []) then {\n                LOG(format [ARR_2(\"fnc_garrison: empty building array | removing building from buildingsIndex | %1 buildings remaining\",count _buildingsIndex)]);\n                _buildingsIndex deleteAt (_buildingsIndex find _building);\n\n            } else {\n                private _pos = selectRandom _building;\n                private _nearestUnits = (_pos nearEntities [\"CAManBase\", 2]);\n                LOG(format [ARR_3(\"fnc_garrison: Unit detection | %1 units nearby | %2 units within height\",count _nearestUnits, {floor ((getPos _x) select 2) == floor (_pos select 2)} count _nearestUnits)]);\n\n                if (count _nearestUnits  > 0 && {[_nearestUnits, _pos] call _fnc_comparePos}) then {\n                    LOG(format [ARR_2(\"fnc_garrison: Unit present | removing position | %1 positions remaining for this building\",count (_buildingsIndex select (_buildingsIndex find _building)) - 1)]);\n                    _buildingsIndex set [(_buildingsIndex find _building), _building - [_pos]];\n\n                } else {\n                    private _unit = _unitsArray select 0;\n                   private _posSurface = surfaceIsWater _pos;\n\n                    if (_teleport) then {\n                        doStop _unit;\n                        if (_posSurface) then {\n                            _unit setPosASL (AGLtoASL _pos);\n                        } else {\n                            _unit setPosATL _pos;\n                        };\n\n                    } else {\n                        _unitMoveList pushBack [_unit,[_pos, AGLToASL _pos] select (_posSurface)];\n                    };\n\n                    _placedUnits pushBack _unit;\n                    _unitsArray deleteAt (_unitsArray find _unit);\n                    _buildingsIndex set [(_buildingsIndex find _building), _building - [_pos]];\n                    _unit setVariable [QGVAR(garrisonned), true, true];\n                };\n            };\n        };\n    };\n};\n\nTRACE_1(format [ARR_2(\"fnc_garrison: while loop ended | %1 units ready to be treated by PFH\",count _unitMoveList)], _teleport);\n\n// Update the unit list and remove duplicate positions and units\nprivate _garrison_unitMoveList = missionNameSpace getVariable [QGVAR(garrison_unitMoveList), []];\n\n_garrison_unitMoveList = _garrison_unitMoveList select {\n    _x params [\"_testedUnit\", \"_testedPos\"];\n    ({(_x select 0) isEqualTo _testedUnit} count _unitMoveList == 0)\n};\n\n_garrison_unitMoveList append _unitMoveList;\n\nmissionNameSpace setVariable [QGVAR(garrison_unitMoveList), _garrison_unitMoveList, true];\n\nif (_teleport) then {\n    [QGVAR(AISection), [_placedUnits, [\"PATH\"], false], _placedUnits] call CBA_fnc_targetEvent;\n\n} else {\n    [_unitMoveList] call FUNC(garrisonMove);\n};\n\nTRACE_1(format [ARR_3(\"fnc_garrison: End | %1 units left | %2 buildings left\", count _unitsArray, count _buildingsIndex)], _unitsArray);\n_unitsArray\n",
        "functionName": "ace_ai_fnc_garrison"
      },
      {
        "fileName": "fnc_garrisonMove.sqf",
        "content": "/*\n * Author: alganthe\n * Internal function used by ace_ai_fnc_garrison to make the units move to the positions it picked.\n *\n * Arguments:\n * 0: Array of arrays <ARRAY>\n *    0: Unit needing to be placed <UNIT>\n *    1: Position the unit need to be placed at <POSITION>\n *\n * Return Value:\n * Nothing\n *\n * Example:\n * [ [unit1, [10, 10, 10]], [unit2, [30, 30, 30]], [unitN, getPos player] ] call ace_ai_fnc_garrisonMove\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [ [\"_unitMoveList\", nil, [[]]] ];\n\nif (isNil \"_unitMoveList\") exitWith {};\n\n// Start initial movement\nprivate _unitMoveListUnits = (_unitMoveList apply {_x select 0});\n[QGVAR(setBehaviour), [(_unitMoveListUnits select {leader _x == _x}), \"AWARE\"], _unitMoveListUnits] call CBA_fnc_targetEvent;\n[QGVAR(AISection), [_unitMoveListUnits, [\"FSM\"], false], _unitMoveListUnits] call CBA_fnc_targetEvent;\n[QGVAR(doMove), [_unitMoveList], _unitMoveListUnits] call CBA_fnc_targetEvent;\n[QGVAR(enableAttack), [_unitMoveListUnits select {leader _x == _x}, false], _unitMoveListUnits] call CBA_fnc_targetEvent;\n\n{\n    _x setVariable [QGVAR(garrisonMove_failSafe), nil, true];\n    _x setVariable [QGVAR(garrisonMove_unitPosMemory), nil, true];\n} foreach _unitMoveListUnits;\n\n// Avoid duplicate PFHs \nif (isNil QGVAR(garrison_moveUnitPFH)) then {\n    missionNameSpace setVariable [QGVAR(garrison_moveUnitPFH), true, true];\n\n    // PFH checking if the units have reached their destination\n    [{\n        params [\"_args\", \"_pfhID\"];\n\n        private _unitMoveList = missionNameSpace getVariable [QGVAR(garrison_unitMoveList), []];\n\n        // End PFH if all units are placed / unable to reach position\n        if (_unitMoveList isEqualTo []) then {\n            missionNameSpace setVariable [QGVAR(garrison_moveUnitPFH), nil, true];\n            LOG(\"garrisonMove PFH: PFH finished it's job | deleting PFH\");\n            _pfhID call CBA_fnc_removePerFrameHandler;\n\n        } else {\n            {\n                _x params  [\"_unit\", \"_pos\"];\n\n                // Check if unit is alive or even existing\n                if (!alive _unit) then {\n                    _unitMoveList deleteAt (_unitMoveList find _x);\n                    LOG(format [ARR_2(\"garrisonMove PFH: unit dead or deleted | %1 units left\", count _unitMoveList)]);\n\n                } else {\n                    private _unitPos = getPos _unit;\n                    if (surfaceisWater _unitPos) then {\n                        _unitPos = getPosASL _unit;\n                    } else {\n                        _unitPos = getPosATL _unit;\n                    };\n\n                    if (unitReady _unit) then {\n                        // Check for distance, doMove and AI are moody and may stop for no reason, within 6 meters and ready should be fine\n                        if (_unitPos distance _pos < 3) then { \n                            _unit setVariable [QGVAR(garrisonMove_failSafe), nil, true];\n                            _unit setVariable [QGVAR(garrisonMove_unitPosMemory), nil, true];\n                            _unit setVariable [QGVAR(garrisonned), true, true];\n                            _unitMoveList deleteAt (_unitMoveList find _x);\n\n                            [QGVAR(AISection), [[_unit], [\"PATH\"], false], _unit] call CBA_fnc_targetEvent;\n                            [QGVAR(AISection), [[_unit], [\"FSM\"], true], _unit] call CBA_fnc_targetEvent;\n\n                            if ({(_x select 0) in units _unit && {!isPlayer (_x select 0)}} count _unitMoveList == 0) then {\n                                [QGVAR(enableAttack), [[_unit], true], _unit] call CBA_fnc_targetEvent;\n                            };\n                            \n                            LOG(format [ARR_2(\"garrisonMove PFH: unit in position | %1 units left\", count _unitMoveList)]);\n\n                        } else {\n                            // Tell the unit to move if an order wasn't given within 30s, avoid doMove spam\n                           (_unit getVariable [QGVAR(garrisonMove_failSafe), [CBA_missionTime, 5]]) params [\"_failSafeTimer\", \"_failSafeRemainingAttemps\"];\n\n                            if (_failSafeTimer <= CBA_missionTime) then {\n                                if (_failSafeRemainingAttemps == 0 ) then {\n                                    _unit setVariable [QGVAR(garrisonMove_failSafe), nil, true];\n                                    _unit setVariable [QGVAR(garrisonMove_unitPosMemory), nil, true];\n                                    [QGVAR(unGarrison), [[_unit]], _unit] call CBA_fnc_targetEvent;\n                                    _unitMoveList deleteAt (_unitMoveList find _x);\n                                    LOG(\"garrisonMove PFH unitReady: all moving commands failed | restoring AI capabilities\");\n\n                                } else {\n                                    _unit setVariable [QGVAR(garrisonMove_failSafe), [_failSafeTimer + 15, _failSafeRemainingAttemps - 1]];\n                                    [QGVAR(doMove), [[[_unit, _pos]]], _unit] call CBA_fnc_targetEvent;\n                                    LOG(\"garrisonMove PFH unitReady: unit not close enough | Sending another doMove command\");\n                                };\n                            };\n                        };\n                    } else {\n                        (_unit getVariable [QGVAR(garrisonMove_unitPosMemory), [CBA_missionTime, [0,0,0]]]) params [\"_unitPosTimer\", \"_unitOldPos\"];\n\n                        // AI may sometimes not be able to report unitReady, this is to avoid the PFH running forever\n                        switch true do { \n                            case ((_unitPosTimer + 15) < CBA_missionTime && {(_unitPos distance _pos) < 3}) : {\n                                TRACE_1(\"case 1\",_unit);\n                                _unit setVariable [QGVAR(garrisonMove_failSafe), nil, true];\n                                _unit setVariable [QGVAR(garrisonMove_unitPosMemory), nil, true];\n                                _unit setVariable [QGVAR(garrisonned), true, true];\n                                _unitMoveList deleteAt (_unitMoveList find _x);\n\n                                [QGVAR(AISection), [[_unit], [\"PATH\"], false], _unit] call CBA_fnc_targetEvent;\n                                [QGVAR(AISection), [[_unit], [\"FSM\"], true], _unit] call CBA_fnc_targetEvent;\n\n                                if ({(_x select 0) in units _unit && {!isPlayer (_x select 0)}} count _unitMoveList == 0) then {\n                                    [QGVAR(enableAttack), [[_unit], true], _unit] call CBA_fnc_targetEvent;\n                                };\n\n                                LOG(format [ARR_2(\"garrisonMove PFH unitNotReady: unit in position | %1 units left\", count _unitMoveList)]);\n                            };\n\n                            case ((_unitPosTimer + 15) < CBA_missionTime && {_unitOldPos distance _unitPos < 0.5}) : {\n                                TRACE_3(\"case 2\",_unit, ((_unitPosTimer + 15) < CBA_missionTime), (_unitOldPos distance _unitPos < 0.5));\n                                _unit setVariable [QGVAR(garrisonMove_failSafe), nil, true];\n                                _unit setVariable [QGVAR(garrisonMove_unitPosMemory), nil, true];\n                                [QGVAR(unGarrison), [[_unit]], _unit] call CBA_fnc_targetEvent;\n                                _unitMoveList deleteAt (_unitMoveList find _x);\n                                LOG(\"garrisonMove PFH unitNotReady: all moving commands failed | restoring AI capabilities\");\n                            };\n\n                            case (_unitOldPos distance _unitPos < 0.5) : {};\n\n                            default {\n                                _unit setVariable [QGVAR(garrisonMove_unitPosMemory), [CBA_missionTime, _unitPos]];\n                            }; \n                        };\n                    };\n                };\n            } foreach _unitMoveList;\n\n            missionNameSpace setVariable [QGVAR(garrison_unitMoveList), _unitMoveList, true];\n        };\n    }, 0.5, []] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_ai_fnc_garrisonMove"
      },
      {
        "fileName": "fnc_unGarrison.sqf",
        "content": "/*\n * Author: alganthe\n * Used to un-garrison units.\n *\n * Arguments:\n * 0: Units to un-garrison <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit1, unit2, unit3] call ace_ai_fnc_unGarrison\n *\n * Public: Yes\n *\n*/\n#include \"script_component.hpp\"\n\nparams [[\"_units\", [], [[]]]];\n\n_units = _units select {local _x};\n\n{\n    if (!isPlayer _x && {local _x}) then {\n        _x enableAI \"PATH\";\n        _x enableAI \"FSM\";\n\n        private _leader = leader _x;\n\n        TRACE_3(\"fnc_ungarrison: unit and leader\",_x , _leader, (_leader == _x));\n\n        _x setVariable [QGVAR(garrisonned), false, true];\n\n        if (_leader != _x) then {\n            doStop _x;\n            _x doFollow _leader;\n\n        } else {\n            _x doMove ((nearestBuilding (getPos _x)) buildingExit 0);\n        };\n\n        private _fnc_countGarrisonnedUnits = {\n            params [\"_unit\", \"_bool\"];\n            if (_bool) then {\n                ({(_x getVariable [QGVAR(garrisonned), false]) && {!isPlayer _x}} count units _unit)\n            } else {\n                ({!(_x getVariable [QGVAR(garrisonned), false]) && {!isPlayer _x}} count units _unit)\n            };\n            \n        };\n\n        if ([_x, true] call _fnc_countGarrisonnedUnits == ({!isPlayer _x} count (units _x)) - 1 || {[_x, false] call _fnc_countGarrisonnedUnits == {!isPlayer _x} count (units _x)}) then {\n            LOG(\"fnc_ungarrison: enableAttack true\");\n            (group _x) enableAttack true;\n        };\n    };\n} foreach _units;\n",
        "functionName": "ace_ai_fnc_unGarrison"
      }
    ]
  },
  {
    "component": "aircraft",
    "files": [
      {
        "fileName": "XEH_postInitClient.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nprivate _cfgAction = configFile >> \"CfgActions\" >> \"Eject\";\nGVAR(ejectActionParams) = [\n    [\n        \"\", // will be set with setUserActionText\n        {\n            params [\"_vehicle\", \"_unit\"];\n            private _preserveEngineOn = (_unit == driver _vehicle) && {isEngineOn _vehicle};\n            moveOut _unit;\n            if (_preserveEngineOn) then {\n                // vehicle is local to last driver, no need to care\n                _vehicle engineOn true;\n            };\n        },\n        nil,\n        getNumber (_cfgAction >> \"priority\"),\n        false,\n        true,\n        getText (_cfgAction >> \"shortcut\"),\n        '[_this, _target] call DFUNC(canShowEject)'\n    ],\n    getText (_cfgAction >> \"text\"),\n    getText (_cfgAction >> \"textDefault\")\n];\n\n[\"Helicopter\", \"initPost\", LINKFUNC(initEjectAction)] call CBA_fnc_addClassEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canShowEject.sqf",
        "content": "/*\n * Author: Dystopian\n * Check if Eject action can be shown.\n *\n * Arguments:\n * 0: Unit who calls action <OBJECT>\n * 1: Vehicle which action is attached to <OBJECT>\n *\n * Return Value:\n * Can show <BOOL>\n *\n * Example:\n * [player, vehicle player] call ace_aircraft_fnc_canShowEject\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define FULLCREW_UNIT       0\n#define FULLCREW_ROLE       1\n#define FULLCREW_TURRETPATH 3\n\nparams [\"_unit\", \"_vehicle\"];\n\n_vehicle == vehicle _unit\n&& {\n    private _ejectVarName = \"\";\n    {\n        if (_unit == _x select FULLCREW_UNIT) exitWith {\n            _ejectVarName = format [QGVAR(ejectAction_%1_%2), _x select FULLCREW_ROLE, _x select FULLCREW_TURRETPATH];\n        };\n    } count fullCrew _vehicle;\n    _vehicle getVariable [_ejectVarName, false]\n}\n",
        "functionName": "ace_aircraft_fnc_canShowEject"
      },
      {
        "fileName": "fnc_initEjectAction.sqf",
        "content": "/*\n * Author: Dystopian\n * Add Eject action to vehicle if needed.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorObject] call ace_aircraft_fnc_initEjectAction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nif (unitIsUAV _vehicle) exitWith {};\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\nprivate _addAction = false;\n\nif (0 == getNumber (_config >> \"driverCanEject\")) then {\n    TRACE_2(\"eject action\",typeOf _vehicle,\"driver\");\n    _vehicle setVariable [QGVAR(ejectAction_driver_[]), true];\n    _addAction = true;\n};\n\n{\n    {\n        _x params [\"\", \"_role\", \"\", \"_turretPath\"];\n        if (0 == getNumber (([_config, _turretPath] call CBA_fnc_getTurret) >> \"canEject\")) then {\n            TRACE_2(\"eject action\",typeOf _vehicle,_turretPath);\n            _vehicle setVariable [format [QGVAR(ejectAction_%1_%2), _role, _turretPath], true];\n            _addAction = true;\n        };\n    } forEach fullCrew [_vehicle, _x, true];\n} forEach [\"gunner\", \"commander\", \"turret\"];\n\nif (!_addAction) exitWith {};\n\nGVAR(ejectActionParams) params [\"_params\", \"_text\", \"_picture\"];\nprivate _actionID = _vehicle addAction _params;\n_vehicle setUserActionText [_actionID, _text, \"\", _picture];\n_vehicle setVariable [QGVAR(ejectAction), _actionID];\n",
        "functionName": "ace_aircraft_fnc_initEjectAction"
      }
    ]
  },
  {
    "component": "apl",
    "files": [],
    "functions": []
  },
  {
    "component": "atragmx",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "[\"ACE3 Equipment\", QGVAR(ATragMXDialogKey), localize LSTRING(ATragMXDialogKey),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    if (GVAR(active)) exitWith {\n        closeDialog 0;\n        false\n    };\n    // Statement\n    [] call FUNC(create_dialog);\n    false\n},\n{false},\n[0, [false, false, false]], false, 0] call CBA_fnc_addKeybind; // (empty default key)\n\n\n//Add deviceKey entry:\nprivate _conditonCode = {\n    [] call FUNC(can_show);\n};\nprivate _toggleCode = {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {};\n    if (GVAR(active)) exitWith {\n        closeDialog 0;\n    };\n    // Statement\n    [] call FUNC(create_dialog);\n};\nprivate _closeCode = {\n    if (GVAR(active)) exitWith {\n        closeDialog 0;\n    };\n};\n[(localize LSTRING(Name)), QPATHTOF(UI\\ATRAG_Icon.paa), _conditonCode, _toggleCode, _closeCode] call EFUNC(common,deviceKeyRegisterNew);\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"initKeybinds.sqf\"\n\nGVAR(active) = false;\nGVAR(initialised) = false;\n\n[QEGVAR(vector,rangefinderData), {_this call FUNC(sord)}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_add_new_gun.sqf",
        "content": "/*\n * Author: Ruthberg\n * Adds a new (default) gun profile to the profileNamespace\n *\n * Arguments:\n * Nothing\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_add_new_gun\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ncall FUNC(trim_gun_name);\n\nprivate _gunName = ctrlText 11001;\n\nif (_gunName != \"\") then {\n    private _gunProfileEntry = [_gunName, 810, 100, 0.0679, -0.0010350, 3.81, 0, 2, 10, 120, 0, 0, 9.525, 7.82, 25.40, 0.393, 1, \"ICAO\", [[-15,0],[0,0],[10,0],[15,0],[25,0],[30,0],[35,0]], [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true];\n\n    GVAR(gunList) = GVAR(gunList) + [_gunProfileEntry];\n\n    lbAdd [6000, _gunName];\n\n    call FUNC(store_gun_list);\n};\n",
        "functionName": "ace_atragmx_fnc_add_new_gun"
      },
      {
        "fileName": "fnc_calculate_distance_at_velocity.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates distance at which the bullet velocity drops below the threshold velocity\n *\n * Arguments:\n * theshold velocity <NUMBER>\n *\n * Return Value:\n * distance <NUMBER>\n *\n * Example:\n * 403 call ace_atragmx_fnc_calculate_distance_at_velocity\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __DELTA_T 0.001\n\nif (isNil QGVAR(targetSolutionInput)) exitWith { 0 };\n\nprivate _thresholdVelocity = _this;\nprivate _velocity = GVAR(targetSolutionInput) select 4;\n\nif (_velocity <= _thresholdVelocity) exitWith { 0 };\n\nprivate _distance = 0;\n\nwhile {_velocity > _thresholdVelocity} do {\n    private _bc = GVAR(targetSolutionInput) select 14;\n    private _dragModel = GVAR(targetSolutionInput) select 15;\n    private _temperature = GVAR(targetSolutionInput) select 5;\n    private _drag = parseNumber((\"ace_advanced_ballistics\" callExtension format[\"retard:%1:%2:%3:%4\", _dragModel, _bc, _velocity, _temperature]));\n    _distance = _distance + _velocity * __DELTA_T;\n    _velocity = _velocity - (_drag * __DELTA_T);\n};\n\n_distance\n",
        "functionName": "ace_atragmx_fnc_calculate_distance_at_velocity"
      },
      {
        "fileName": "fnc_calculate_range_card.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the range card output based on the current data set\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_calculate_range_card\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(rangeCardData) = [];\n\nprivate _targetRange = GVAR(rangeCardEndRange);\nif (GVAR(currentUnit) == 1) then {\n    _targetRange = _targetRange / 1.0936133;\n};\n\nprivate _solutionInput = +GVAR(targetSolutionInput);\n_solutionInput set [ 8, round(_solutionInput select 4)];\n_solutionInput set [13, _targetRange];\n_solutionInput set [17, true];\n\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    private _c1 = [_targetRange] call FUNC(lookup_c1_ballistic_coefficient);\n    _solutionInput set [14, _c1];\n};\n\nprivate _result = _solutionInput call FUNC(calculate_solution);\n",
        "functionName": "ace_atragmx_fnc_calculate_range_card"
      },
      {
        "fileName": "fnc_calculate_solution.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the fireing solution\n *\n * Arguments:\n * 0: Scope base angle <NUMBER>\n * 1: Bullet mass <NUMBER>\n * 2: Bore height <NUMBER>\n * 3: air friction <NUMBER>\n * 4: muzzle velocity <NUMBER>\n * 5: temperature <NUMBER>\n * 6: barometric pressure <NUMBER>\n * 7: relative humidity <NUMBER>\n * 8: simulation steps <NUMBER>\n * 9: wind speed <ARRAY>\n * 10: wind direction <NUMBER>\n * 11: inclination angle <NUMBER>\n * 12: target speed <NUMBER>\n * 13: target range <NUMBER>\n * 14: ballistic coefficient <NUMBER>\n * 15: drag model <NUMBER>\n * 16: atmosphere model <STRING>\n * 17: Store range card data? <BOOL>\n * 18: Stability factor <NUMBER>\n * 19: Twist Direction <NUMBER>\n * 20: Latitude <NUMBER>\n *\n * Return Value:\n * 0: Elevation (MOA) <NUMBER>\n * 1: Windage (MOA) <ARRAY>\n * 2: Lead (MOA) <NUMBER>\n * 3: Time of fligth (SECONDS) <NUMBER>\n * 4: Remaining velocity (m/s) <NUMBER>\n * 5: Remaining kinetic energy (ft·lb) <NUMBER>\n * 6: Vertical coriolis drift (MOA) <NUMBER>\n * 7: Horizontal coriolis drift (MOA) <NUMBER>\n * 8: Spin drift (MOA) <NUMBER>\n *\n * Example:\n * call ace_atragmx_fnc_calculate_solution\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\n    \"_scopeBaseAngle\", \"_bulletMass\", \"_boreHeight\", \"_airFriction\", \"_muzzleVelocity\",\n    \"_temperature\", \"_barometricPressure\", \"_relativeHumidity\", \"_simSteps\", \"_windSpeed\",\n    \"_windDirection\", \"_inclinationAngle\", \"_targetSpeed\", \"_targetRange\", \"_bc\", \"_dragModel\",\n    \"_atmosphereModel\", \"_storeRangeCardData\", \"_stabilityFactor\", \"_twistDirection\", \"_latitude\",\n    \"_directionOfFire\"\n];\n_windSpeed params [\"_windSpeed1\", \"_windSpeed2\"];\n\nprivate _tx = 0;\nprivate _tz = 0;\nprivate _lastBulletPos = [0, 0, 0];\nprivate _bulletPos = [0, 0, 0];\nprivate _bulletVelocity = [0, 0, 0];\nprivate _bulletAccel = [0, 0, 0];\nprivate _bulletSpeed = 0;\nprivate _gravity = [0, sin(_scopeBaseAngle + _inclinationAngle) * -GRAVITY, cos(_scopeBaseAngle + _inclinationAngle) * -GRAVITY];\nprivate _deltaT = 1 / _simSteps;\n\nprivate _elevation = 0;\nprivate _windage1 = 0;\nprivate _windage2 = 0;\nprivate _lead = 0;\nprivate _TOF = 0;\nprivate _trueVelocity = [0, 0, 0];\nprivate _trueSpeed = 0;\nprivate _verticalCoriolis = 0;\nprivate _verticalDeflection = 0;\nprivate _horizontalCoriolis = 0;\nprivate _horizontalDeflection = 0;\nprivate _spinDrift = 0;\nprivate _spinDeflection = 0;\n\nprivate _n = 0;\nprivate _range = 0;\nprivate _trueRange = 0;\nprivate _rangeFactor = 1;\nif (_storeRangeCardData) then {\n    if (GVAR(currentUnit) == 1) then {\n        _rangeFactor = 1.0936133;\n    };\n    GVAR(rangeCardData) = [];\n};\n\nprivate _wind1 = [cos(270 - _windDirection * 30) * _windSpeed1, sin(270 - _windDirection * 30) * _windSpeed1, 0];\nprivate _wind2 = [cos(270 - _windDirection * 30) * _windSpeed2, sin(270 - _windDirection * 30) * _windSpeed2, 0];\nprivate _windDrift = 0;\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    _bc = parseNumber((\"ace_advanced_ballistics\" callExtension format[\"atmosphericCorrection:%1:%2:%3:%4:%5\", _bc, _temperature, _barometricPressure, _relativeHumidity, _atmosphereModel]));\n};\n\nprivate _eoetvoesMultiplier = 0;\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    _eoetvoesMultiplier = 2 * (0.0000729 * _muzzleVelocity / -GRAVITY) * cos(_latitude) * sin(_directionOfFire);\n};\n\n_bulletPos set [0, 0];\n_bulletPos set [1, 0];\n_bulletPos set [2, -(_boreHeight / 100)];\n\n_bulletVelocity set [0, 0];\n_bulletVelocity set [1, Cos(_scopeBaseAngle) * _muzzleVelocity];\n_bulletVelocity set [2, Sin(_scopeBaseAngle) * _muzzleVelocity];\n\nwhile {_TOF < 15 && (_bulletPos select 1) < _targetRange} do {\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\n\n    _trueVelocity = _bulletVelocity vectorDiff _wind1;\n    _trueSpeed = vectorMagnitude _trueVelocity;\n\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n        private _drag = parseNumber((\"ace_advanced_ballistics\" callExtension format[\"retard:%1:%2:%3:%4\", _dragModel, _bc, _trueSpeed, _temperature]));\n        _bulletAccel = (vectorNormalized _trueVelocity) vectorMultiply (-1 * _drag);\n    } else {\n        _bulletAccel = _trueVelocity vectorMultiply (_trueSpeed * _airFriction);\n    };\n\n    _bulletAccel = _bulletAccel vectorAdd _gravity;\n\n    _lastBulletPos = _bulletPos;\n    _bulletPos = _bulletPos vectorAdd (_bulletVelocity vectorMultiply (_deltaT * 0.5));\n    _bulletVelocity = _bulletVelocity vectorAdd (_bulletAccel vectorMultiply _deltaT);\n    _bulletPos = _bulletPos vectorAdd (_bulletVelocity vectorMultiply (_deltaT * 0.5));\n\n    _TOF = _TOF + _deltaT;\n\n    if (_storeRangeCardData) then {\n        _range = GVAR(rangeCardStartRange) + _n * GVAR(rangeCardIncrement);\n        if ((_bulletPos select 1) * _rangeFactor >= _range && _range <= GVAR(rangeCardEndRange)) then {\n            _trueRange = _range / _rangeFactor;\n            if (_trueRange != 0) then {\n                _tx = (_lastBulletPos select 0) + (_trueRange - (_lastBulletPos select 1)) * ((_bulletPos select 0) - (_lastBulletPos select 0)) / ((_bulletPos select 1) - (_lastBulletPos select 1));\n                _tz = (_lastBulletPos select 2) + (_trueRange - (_lastBulletPos select 1)) * ((_bulletPos select 2) - (_lastBulletPos select 2)) / ((_bulletPos select 1) - (_lastBulletPos select 1));\n                _elevation = - atan(_tz / _trueRange);\n                _windage1 = - atan(_tx / _trueRange);\n                _windDrift = (_wind2 select 0) * (_TOF - _trueRange / _muzzleVelocity);\n                _windage2 = - atan(_windDrift / _trueRange);\n                _lead = (_targetSpeed * _TOF) / (Tan(MRAD_TO_DEG(1)) * _trueRange);\n            };\n            _kineticEnergy = 0.5 * (_bulletMass / 1000 * (_bulletSpeed ^ 2));\n            _kineticEnergy = _kineticEnergy * 0.737562149;\n\n            if ((missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) && (_bulletPos select 1) > 0) then {\n                // Coriolis\n                _horizontalDeflection = 0.0000729 * (_bulletPos select 1) * _TOF * sin(_latitude);\n                _horizontalCoriolis = - atan(_horizontalDeflection / (_bulletPos select 1));\n                _windage1 = _windage1 + _horizontalCoriolis;\n                _windage2 = _windage2 + _horizontalCoriolis;\n                // Eoetvoes\n                _verticalDeflection = (_bulletPos select 2) * _eoetvoesMultiplier;\n                _verticalCoriolis = - atan(_verticalDeflection / (_bulletPos select 1));\n                _elevation = _elevation + _verticalCoriolis;\n                // Spin drift\n                _spinDeflection = _twistDirection * 0.0254 * 1.25 * (_stabilityFactor + 1.2) * _TOF ^ 1.83;\n                _spinDrift = - atan(_spinDeflection / (_bulletPos select 1));\n                _windage1 = _windage1 + _spinDrift;\n                _windage2 = _windage2 + _spinDrift;\n            };\n\n            GVAR(rangeCardData) set [_n, [_range, _elevation * 60, [_windage1 * 60, _windage2 * 60], _lead, _TOF, _bulletSpeed, _kineticEnergy]];\n            _n = _n + 1;\n        };\n    };\n};\n\nif (_targetRange != 0) then {\n    _tx = (_lastBulletPos select 0) + (_targetRange - (_lastBulletPos select 1)) * ((_bulletPos select 0) - (_lastBulletPos select 0)) / ((_bulletPos select 1) - (_lastBulletPos select 1));\n    _tz = (_lastBulletPos select 2) + (_targetRange - (_lastBulletPos select 1)) * ((_bulletPos select 2) - (_lastBulletPos select 2)) / ((_bulletPos select 1) - (_lastBulletPos select 1));\n    _elevation = - atan(_tz / _targetRange);\n    _windage1 = - atan(_tx / _targetRange);\n    _windDrift = (_wind2 select 0) * (_TOF - _targetRange / _muzzleVelocity);\n    _windage2 = - atan(_windDrift / _targetRange);\n    _lead = (_targetSpeed * _TOF) / (Tan(MRAD_TO_DEG(1)) * _targetRange);\n};\n\n_kineticEnergy = 0.5 * (_bulletMass / 1000 * (_bulletSpeed ^ 2));\n_kineticEnergy = _kineticEnergy * 0.737562149;\n\nif ((missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) && (_bulletPos select 1) > 0) then {\n    // Coriolis\n    _horizontalDeflection = 0.0000729 * (_bulletPos select 1) * _TOF * sin(_latitude);\n    _horizontalCoriolis = - atan(_horizontalDeflection / (_bulletPos select 1));\n    _windage1 = _windage1 + _horizontalCoriolis;\n    _windage2 = _windage2 + _horizontalCoriolis;\n    // Eoetvoes\n    _verticalDeflection = (_bulletPos select 2) * _eoetvoesMultiplier;\n    _verticalCoriolis = - atan(_verticalDeflection / (_bulletPos select 1));\n    _elevation = _elevation + _verticalCoriolis;\n    // Spin drift\n    _spinDeflection = _twistDirection * 0.0254 * 1.25 * (_stabilityFactor + 1.2) * _TOF ^ 1.83;\n    _spinDrift = - atan(_spinDeflection / (_bulletPos select 1));\n    _windage1 = _windage1 + _spinDrift;\n    _windage2 = _windage2 + _spinDrift;\n};\n\n[_elevation * 60, [_windage1 * 60, _windage2 * 60], _lead, _TOF, _bulletSpeed, _kineticEnergy, _verticalCoriolis * 60, _horizontalCoriolis * 60, _spinDrift * 60]\n",
        "functionName": "ace_atragmx_fnc_calculate_solution"
      },
      {
        "fileName": "fnc_calculate_target_range_assist.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the target range and updates the output fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_calculate_target_range_assist\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _angle = parseNumber(ctrlText 7012);\nprivate _targetSize = abs(parseNumber(ctrlText 7010));\nif (GVAR(rangeAssistUseTargetHeight)) then {\n    _targetSize = _targetSize * cos(_angle);\n};\nswitch (GVAR(rangeAssistTargetSizeUnit)) do {\n    case 0: {\n        _targetSize = _targetSize * 0.0254;\n    };\n    case 1: {\n        _targetSize = _targetSize * 0.3048;\n    };\n    case 2: {\n        _targetSize = _targetSize * 0.01;\n    };\n};\nprivate _imageSize = parseNumber(ctrlText 7011);\nswitch (GVAR(rangeAssistImageSizeUnit)) do {\n    case 0: {\n        _imageSize = _imageSize / 6400 * 360;\n    };\n    case 1: {\n        _imageSize = _imageSize / 60;\n    };\n    case 2: {\n        _imageSize = _imageSize / 60 / 1.047;\n    };\n};\nprivate _estRange = abs(parseNumber(ctrlText 7013));\nif (GVAR(currentUnit) == 1) then {\n    _estRange = _estRange / 1.0936133;\n};\n\nswitch (_this) do {\n    case 0: {\n        _targetSize = tan(_imageSize) * _estRange;\n\n        if (GVAR(rangeAssistUseTargetHeight) && cos(_angle) != 0) then {\n            _targetSize = _targetSize / cos(_angle);\n        };\n\n        switch (GVAR(rangeAssistTargetSizeUnit)) do {\n            case 0: {\n                _targetSize = _targetSize / 0.0254;\n            };\n            case 1: {\n                _targetSize = _targetSize / 0.3048;\n            };\n            case 2: {\n                _targetSize = _targetSize / 0.01;\n            };\n        };\n\n        ctrlSetText [7010, Str(Round(_targetSize * 100) / 100)];\n    };\n    case 1: {\n        if (_estRange > 0) then {\n            _imageSize = atan(_targetSize / _estRange);\n        };\n\n        switch (GVAR(rangeAssistImageSizeUnit)) do {\n            case 0: {\n                _imageSize = _imageSize * 6400 / 360;\n            };\n            case 1: {\n                _imageSize = _imageSize * 60;\n            };\n            case 2: {\n                _imageSize = _imageSize * 60 * 1.047;\n            };\n        };\n\n        ctrlSetText [7011, Str(Round(_imageSize * 100) / 100)];\n    };\n    case 2: {\n        if (tan(_imageSize) != 0) then {\n            _estRange = _targetSize / tan(_imageSize);\n        };\n\n        ctrlSetText [7013, Str(Round(_estRange))];\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_calculate_target_range_assist"
      },
      {
        "fileName": "fnc_calculate_target_solution.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the fireing solution and updates the result input/output fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_calculate_target_solution\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n[] call FUNC(parse_input);\n\nprivate _scopeBaseAngle = (GVAR(workingMemory) select 3);\n\nprivate _bulletMass = GVAR(workingMemory) select 12;\nprivate _bulletDiameter = GVAR(workingMemory) select 13;\nprivate _boreHeight = GVAR(workingMemory) select 5;\nprivate _airFriction = GVAR(workingMemory) select 4;\nprivate _barrelTwist = GVAR(workingMemory) select 14;\nprivate _muzzleVelocity = GVAR(workingMemory) select 1;\nprivate _bc = GVAR(workingMemory) select 15;\nprivate _dragModel = GVAR(workingMemory) select 16;\nprivate _atmosphereModel = GVAR(workingMemory) select 17;\n\nprivate _twistDirection = 0;\nif (_barrelTwist > 0) then {\n    _twistDirection = 1;\n} else {\n    if (_barrelTwist < 0) then {\n        _twistDirection = -1;\n    };\n};\n_barrelTwist = abs(_barrelTwist);\n\nprivate _altitude = GVAR(altitude);\nprivate _temperature = GVAR(temperature);\nprivate _barometricPressure = GVAR(barometricPressure);\nprivate _relativeHumidity = GVAR(relativeHumidity);\nif (!GVAR(atmosphereModeTBH)) then {\n    _barometricPressure = 1013.25 * (1 - (0.0065 * _altitude) / (273.15 + _temperature + 0.0065 * _altitude)) ^ 5.255754495;\n    _relativeHumidity = 0.5;\n};\n\nprivate _bulletLength = 50 * _bulletMass / ((_bulletDiameter/2)^2);\nprivate _stabilityFactor = 1.5;\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    if (_bulletDiameter > 0 && _bulletLength > 0 && _bulletMass > 0 && _barrelTwist > 0) then {\n        _stabilityFactor = [_bulletDiameter, _bulletLength, _bulletMass, _barrelTwist * 10, _muzzleVelocity, _temperature, _barometricPressure] call EFUNC(advanced_ballistics,calculateStabilityFactor);\n    };\n};\n\nprivate _latitude = GVAR(latitude) select GVAR(currentTarget);\nprivate _directionOfFire = GVAR(directionOfFire) select GVAR(currentTarget);\nprivate _windSpeed1 = GVAR(windSpeed1) select GVAR(currentTarget);\nprivate _windSpeed2 = GVAR(windSpeed2) select GVAR(currentTarget);\nprivate _windDirection = GVAR(windDirection) select GVAR(currentTarget);\nprivate _inclinationAngle = GVAR(inclinationAngle) select GVAR(currentTarget);\nprivate _targetSpeed = GVAR(targetSpeed) select GVAR(currentTarget);\nprivate _targetRange = GVAR(targetRange) select GVAR(currentTarget);\n\nGVAR(targetSolutionInput) = [_scopeBaseAngle, _bulletMass, _boreHeight, _airFriction, _muzzleVelocity, _temperature, _barometricPressure, _relativeHumidity, round(_muzzleVelocity),\n            [_windSpeed1, _windSpeed2], _windDirection, _inclinationAngle, _targetSpeed, _targetRange, _bc, _dragModel, _atmosphereModel, false, _stabilityFactor, _twistDirection, _latitude, _directionOfFire];\n\nprivate _result = GVAR(targetSolutionInput) call FUNC(calculate_solution);\n\nGVAR(elevationOutput) set [GVAR(currentTarget), _result select 0];\nGVAR(windage1Output) set [GVAR(currentTarget), (_result select 1) select 0];\nGVAR(windage2Output) set [GVAR(currentTarget), (_result select 1) select 1];\nGVAR(leadOutput) set [GVAR(currentTarget), _result select 2];\nGVAR(tofOutput) set [GVAR(currentTarget), _result select 3];\nGVAR(velocityOutput) set [GVAR(currentTarget), _result select 4];\nGVAR(verticalCoriolisOutput) set [GVAR(currentTarget), _result select 6];\nGVAR(horizontalCoriolisOutput) set [GVAR(currentTarget), _result select 7];\nGVAR(spinDriftOutput) set [GVAR(currentTarget), _result select 8];\n\n[] call FUNC(update_result);\n",
        "functionName": "ace_atragmx_fnc_calculate_target_solution"
      },
      {
        "fileName": "fnc_calculate_target_speed_assist.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the target speed and updates the output fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_calculate_target_speed_assist\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _targetRange = parseNumber(ctrlText 8004);\nprivate _numTicks = parseNumber(ctrlText 8005);\nprivate _timeSecs = parseNumber(ctrlText 8006);\nprivate _estSpeed = 0;\n\nif (GVAR(currentUnit) == 1) then {\n    _targetRange = _targetRange / 1.0936133;\n};\n\nswitch (GVAR(rangeAssistImageSizeUnit)) do {\n    case 0: {\n        _numTicks = _numTicks / 6400 * 360;\n    };\n    case 1: {\n        _numTicks = _numTicks / 60;\n    };\n    case 2: {\n        _numTicks = _numTicks / 60 / 1.047;\n    };\n};\n\nif (_timeSecs > 0) then {\n    _estSpeed = tan(_numTicks) * _targetRange / _timeSecs;\n};\n\nif (GVAR(currentUnit) != 2) then {\n    _estSpeed = _estSpeed * 2.23693629;\n};\n\nctrlSetText [8007, Str(Round(_estSpeed * 10) / 10)];\n",
        "functionName": "ace_atragmx_fnc_calculate_target_speed_assist"
      },
      {
        "fileName": "fnc_calculate_truing_drop.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the truing drop and updates the output fields\n *\n * Arguments:\n * parse input <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_calculate_truing_drop\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _parseInput = _this;\n\nprivate _transonicRange = GVAR(truingDropRangeData) select 0;\nprivate _subsonicRange  = GVAR(truingDropRangeData) select 1;\nprivate _transonicDrop = GVAR(truingDropDropData) select 1;\nprivate _subsonicDrop  = GVAR(truingDropDropData) select 2;\n\nif (_parseInput) then {\n    _transonicRange = 0 max abs(parseNumber(ctrlText 18011)) min 4000;\n    _subsonicRange = 0 max abs(parseNumber(ctrlText 18012)) min 4000;\n    if (GVAR(currentUnit) != 2) then {\n        _transonicRange = _transonicRange * 0.9144;\n        _subsonicRange = _subsonicRange * 0.9144;\n    };\n    _transonicRange = Round(_transonicRange);\n    _subsonicRange  = Round(_subsonicRange);\n\n    _subsonicRange = _transonicRange max _subsonicRange;\n\n    _transonicDrop = -100 max parseNumber(ctrlText 18013) min 100;\n    _subsonicDrop = -100 max parseNumber(ctrlText 18014) min 100;\n    private _dropUnit = GVAR(currentScopeUnit);\n    if (_dropUnit == 3) then {\n        switch (GVAR(currentScopeClickUnit)) do {\n            case 0: { _dropUnit = 1; };\n            case 1: { _dropUnit = 2; };\n            case 2: { _dropUnit = 0; };\n        };\n    };\n    switch (_dropUnit) do {\n        case 0: {\n            _transonicDrop = MRAD_TO_MOA(_transonicDrop);\n            _subsonicDrop  = MRAD_TO_MOA(_subsonicDrop);\n        };\n        case 2: {\n            _transonicDrop = _transonicDrop / 1.047;\n            _subsonicDrop  = _subsonicDrop  / 1.047;\n        };\n    };\n    _transonicDrop = Round(_transonicDrop * 100) / 100;\n    _subsonicDrop  = Round(_subsonicDrop  * 100) / 100;\n\n    _subsonicDrop = _transonicDrop max _subsonicDrop;\n};\n\nif ((GVAR(truingDropDropData) select 0) == 0 || {!([_transonicRange, _subsonicRange] isEqualTo GVAR(truingDropRangeData))}) then {\n    if (isNil QGVAR(targetSolutionInput)) then {\n        call FUNC(calculate_target_solution);\n    };\n    private _solutionInput = +GVAR(targetSolutionInput);\n\n    if (_transonicRange == 0) then {\n        _transonicRange = Round(403 call FUNC(calculate_distance_at_velocity));\n    };\n    _solutionInput set [13, _transonicRange];\n    private _result1 = _solutionInput call FUNC(calculate_solution);\n    _transonicDrop = Round((_result1 select 0) * 100) / 100;\n    GVAR(truingDropRangeData) set [0, _transonicRange];\n    GVAR(truingDropDropData) set [1, _transonicDrop];\n    GVAR(truingDropReferenceDropData) set [0, _transonicDrop];\n\n    private _speedOfSound = (_solutionInput select 5) call EFUNC(weather,calculateSpeedOfSound);\n    if (_subsonicRange == 0) then {\n        _subsonicRange = _speedOfSound call FUNC(calculate_distance_at_velocity);\n        if (GVAR(currentUnit) == 2) then {\n            _subsonicRange = _subsonicRange + 200;\n        } else {\n            _subsonicRange = _subsonicRange + 200 * 1.0936133;\n        };\n        _subsonicRange = Round(_subsonicRange);\n    };\n    _solutionInput set [13, _subsonicRange];\n    private _result2 = _solutionInput call FUNC(calculate_solution);\n    _subsonicDrop = Round((_result2 select 0) * 100) / 100;\n    GVAR(truingDropRangeData) set [1, _subsonicRange];\n    GVAR(truingDropDropData) set [2, _subsonicDrop];\n    GVAR(truingDropReferenceDropData) set [1, _subsonicDrop];\n} else {\n    if (_transonicDrop != GVAR(truingDropDropData) select 1 || _subsonicDrop != GVAR(truingDropDropData) select 2) then {\n        GVAR(truingDropDropData) set [1, _transonicDrop];\n        GVAR(truingDropDropData) set [2, _subsonicDrop];\n        if (GVAR(truingDropMode) == 0) then {\n            call FUNC(true_muzzle_velocity);\n        } else {\n            call FUNC(true_c1_ballistic_coefficient);\n        };\n    };\n};\n\ncall FUNC(update_truing_drop_data);\n",
        "functionName": "ace_atragmx_fnc_calculate_truing_drop"
      },
      {
        "fileName": "fnc_can_show.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Tests if the ATragMX dialog can be shown\n *\n * Arguments:\n * None\n *\n * Return Value:\n * can_show <BOOL>\n *\n * Example:\n * call ace_atragmx_fnc_can_show\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n((\"ACE_ATragMX\" in (uniformItems ACE_player)) || (\"ACE_ATragMX\" in (vestItems ACE_player))) && !(underwater ACE_player);\n",
        "functionName": "ace_atragmx_fnc_can_show"
      },
      {
        "fileName": "fnc_change_gun.sqf",
        "content": "/*\n * Author: Ruthberg\n * Selects a new gun profile and updates the gun column and the result input/output fields\n *\n * Arguments:\n * gunID <number>\n * restore workingMemory from gunList <BOOL>\n * update display <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_change_gun\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_gunID\", \"_restoreMemory\", \"_updateDisplay\"];\n\nif (_gunID < 0 || _gunID > (count GVAR(gunList)) - 1) exitWith {};\n\nif (_restoreMemory) then {\n    GVAR(workingMemory) = +(GVAR(gunList) select _gunID);\n};\nGVAR(currentGun) = _gunID;\n\n[false, false] call FUNC(recalculate_muzzle_velocity);\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    false call FUNC(restore_truing_drop);\n    [false, false] call FUNC(recalculate_c1_ballistic_coefficient);\n};\n\nif (_updateDisplay) then {\n    lbSetCurSel [6000, GVAR(currentGun)];\n};\n\nGVAR(currentScopeUnit) = 0 max (GVAR(workingMemory) select 6) min 3;\nGVAR(currentScopeClickUnit) = 0 max (GVAR(workingMemory) select 7) min 2;\nGVAR(currentScopeClickNumber) = 1 max (GVAR(workingMemory) select 8) min 10;\n\nif (_updateDisplay) then {\n    [] call FUNC(update_gun);\n    [] call FUNC(update_gun_ammo_data);\n    [] call FUNC(update_muzzle_velocity_data);\n    [] call FUNC(update_c1_ballistic_coefficient_data);\n};\n\nGVAR(elevationOutput) set [GVAR(currentTarget), 0];\nGVAR(windage1Output) set [GVAR(currentTarget), 0];\nGVAR(windage2Output) set [GVAR(currentTarget), 0];\nGVAR(leadOutput) set [GVAR(currentTarget), 0];\nGVAR(tofOutput) set [GVAR(currentTarget), 0];\nGVAR(velocityOutput) set [GVAR(currentTarget), 0];\nGVAR(verticalCoriolisOutput) set [GVAR(currentTarget), 0];\nGVAR(horizontalCoriolisOutput) set [GVAR(currentTarget), 0];\nGVAR(spinDriftOutput) set [GVAR(currentTarget), 0];\n\nif (_updateDisplay) then {\n    [] call FUNC(calculate_target_solution);\n};\n",
        "functionName": "ace_atragmx_fnc_change_gun"
      },
      {
        "fileName": "fnc_change_target_slot.sqf",
        "content": "/*\n * Author: Ruthberg\n * Selects a target slot (A, B, C or D)\n *\n * Arguments:\n * target <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 2 call ace_atragmx_fnc_change_target_slot\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(currentTarget) = 0 max _this min 3;\n\nGVAR(targetRangeDirtyFlag) = true;\n\ncall FUNC(update_target_selection);\ncall FUNC(calculate_target_solution);\n",
        "functionName": "ace_atragmx_fnc_change_target_slot"
      },
      {
        "fileName": "fnc_clear_c1_ballistic_coefficient_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Clears the c1 ballistic coefficient data fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_clear_c1_ballistic_coefficient_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Distances\n{ctrlSetText [_x, \"0\"]} forEach [170021, 170022, 170023, 170024, 170025, 170026, 170027];\n// Ballistic Coefficients\n{ctrlSetText [_x, \"0\"]} forEach [170031, 170032, 170033, 170034, 170035, 170036, 170037];\n",
        "functionName": "ace_atragmx_fnc_clear_c1_ballistic_coefficient_data"
      },
      {
        "fileName": "fnc_clear_muzzle_velocity_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Clears the muzzle velocity data fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_clear_muzzle_velocity_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Temperatures\n{ctrlSetText [_x, \"0\"]} forEach [160021, 160022, 160023, 160024, 160025, 160026, 160027];\n// Muzzle velocities\n{ctrlSetText [_x, \"0\"]} forEach [160031, 160032, 160033, 160034, 160035, 160036, 160037];\n",
        "functionName": "ace_atragmx_fnc_clear_muzzle_velocity_data"
      },
      {
        "fileName": "fnc_clear_user_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Removes all user data from the profileNamespace\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_clear_user_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprofileNamespace setVariable [\"ACE_ATragMX_gunList\", nil];\n\nprofileNamespace setVariable [\"ACE_ATragMX_currentUnit\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_currentGun\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_currentTarget\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_currentScopeUnit\", nil];\n\nprofileNamespace setVariable [\"ACE_ATragMX_atmosphereModeTBH\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_altitude\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_temperature\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_barometricPressure\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_relativeHumidity\", nil];\n\nprofileNamespace setVariable [\"ACE_ATragMX_showCoriolis\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_showWind2\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_latitude\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_directionOfFire\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed1\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed2\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_windDirection\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_inclinationAngle\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeed\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeedDirection\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_targetRange\", nil];\n\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardStartRange\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardEndRange\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardIncrement\", nil];\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardCurrentColumn\", nil];\n",
        "functionName": "ace_atragmx_fnc_clear_user_data"
      },
      {
        "fileName": "fnc_create_dialog.sqf",
        "content": "/*\n * Author: Ruthberg\n * Creates the ATragMX dialog\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_create_dialog\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"ATragMX_Display\")\n#define __ctrlBackground (__dsp displayCtrl 720000)\n\n// Do all initialisation now\nif (!GVAR(initialised)) then {\n    [] call FUNC(initGunList);\n    [] call FUNC(init);\n    [] call FUNC(restore_user_data);\n    [] call FUNC(read_gun_list_entries_from_config);\n    GVAR(initialised) = true;\n    TRACE_1(\"\",GVAR(initialised));\n};\n\nif (GVAR(active)) exitWith { false };\nif (underwater ACE_player) exitWith { false };\nif (!(\"ACE_ATragMX\" in (uniformItems ACE_player)) && !(\"ACE_ATragMX\" in (vestItems ACE_player))) exitWith { false };\n\ncreateDialog 'ATragMX_Display';\n\ncall FUNC(update_target_selection);\n\nGVAR(showMainPage) call FUNC(show_main_page);\n\nGVAR(showAddNewGun) call FUNC(show_add_new_gun);\nGVAR(showAtmoEnvData) call FUNC(show_atmo_env_data);\nGVAR(showC1BallisticCoefficientData) call FUNC(show_c1_ballistic_coefficient_data);\nGVAR(showGunAmmoData) call FUNC(show_gun_ammo_data);\nGVAR(showGunList) call FUNC(show_gun_list);\nGVAR(showMuzzleVelocityData) call FUNC(show_muzzle_velocity_data);\nGVAR(showRangeCard) call FUNC(show_range_card);\nif (GVAR(showRangeCard)) then {\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 5001);\n    [] call FUNC(update_range_card);\n};\nGVAR(showRangeCardSetup) call FUNC(show_range_card_setup);\nGVAR(showSolutionSetup) call FUNC(show_solution_setup);\nGVAR(showTargetData) call FUNC(show_target_data);\nGVAR(showTargetRangeAssist) call FUNC(show_target_range_assist);\nGVAR(showTargetSpeedAssist) call FUNC(show_target_speed_assist);\nGVAR(showTargetSpeedAssistTimer) call FUNC(show_target_speed_assist_timer);\nGVAR(showTruingDrop) call FUNC(show_truing_drop);\n\n[GVAR(currentGun), false, true] call FUNC(change_gun);\n\n{\n    lbAdd [6000, _x select 0];\n} forEach GVAR(gunList);\n\nctrlShow [3001, false];\nctrlShow [3002, false];\n\n{\n    (__dsp displayCtrl _x) ctrlEnable false;\n} forEach [18006, 18007, 18008];\n\nGVAR(active) = true;\n\nGVAR(DialogPFH) = [{\n    if (!GVAR(active)) exitWith {\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n    __ctrlBackground ctrlSetText format [QPATHTOF(UI\\ATRAG_%1.paa), [\"N\", \"D\"] select (call EFUNC(common,ambientBrightness))];\n}, 60, []] call CBA_fnc_addPerFrameHandler;\n\ntrue\n",
        "functionName": "ace_atragmx_fnc_create_dialog"
      },
      {
        "fileName": "fnc_cycle_gun_list.sqf",
        "content": "/*\n * Author: Ruthberg\n * Cycles through the gun list\n *\n * Arguments:\n * step <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_cycle_scope_unit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!(GVAR(showMainPage) || GVAR(showGunList))) exitWith {};\n\n[(GVAR(currentGun) + (count GVAR(gunList)) + _this) % (count GVAR(gunList)), true, true] call FUNC(change_gun);\n",
        "functionName": "ace_atragmx_fnc_cycle_gun_list"
      },
      {
        "fileName": "fnc_cycle_image_size_units.sqf",
        "content": "/*\n * Author: Ruthberg\n * Cycles through the image size units\n *\n * Arguments:\n * step <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_cycle_image_size_units\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(rangeAssistImageSizeUnit) = (GVAR(rangeAssistImageSizeUnit) + 1) % (count GVAR(rangeAssistImageSizeUnits));\nctrlSetText [7015, GVAR(rangeAssistImageSizeUnits) select GVAR(rangeAssistImageSizeUnit)];\n",
        "functionName": "ace_atragmx_fnc_cycle_image_size_units"
      },
      {
        "fileName": "fnc_cycle_num_ticks_units.sqf",
        "content": "/*\n * Author: Ruthberg\n * Cycles through the num ticks units\n *\n * Arguments:\n * step <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_cycle_num_ticks_units\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(speedAssistNumTicksUnit) = (GVAR(speedAssistNumTicksUnit) + 1) % (count GVAR(speedAssistNumTicksUnits));\nctrlSetText [8009, GVAR(speedAssistNumTicksUnits) select GVAR(speedAssistNumTicksUnit)];\ncall FUNC(calculate_target_speed_assist);\n",
        "functionName": "ace_atragmx_fnc_cycle_num_ticks_units"
      },
      {
        "fileName": "fnc_cycle_range_card_columns.sqf",
        "content": "/*\n * Author: Ruthberg\n * Cycles through the range card columns\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_cycle_range_card_columns\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(rangeCardCurrentColumn) = (GVAR(rangeCardCurrentColumn) + 1) % (count GVAR(rangeCardLastColumns));\n\nctrlSetText [5006, (GVAR(rangeCardLastColumns) select GVAR(rangeCardCurrentColumn))];\n\n[] call FUNC(update_range_card);\n",
        "functionName": "ace_atragmx_fnc_cycle_range_card_columns"
      },
      {
        "fileName": "fnc_cycle_scope_unit.sqf",
        "content": "/*\n * Author: Ruthberg\n * Cycles through the scope units\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_cycle_scope_unit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(currentScopeUnit) = (GVAR(currentScopeUnit) + 1) % (count GVAR(scopeUnits));\nGVAR(workingMemory) set [6, GVAR(currentScopeUnit)];\n\ntrue call FUNC(show_main_page);\n\n[] call FUNC(update_scope_unit);\n[] call FUNC(update_result);\n",
        "functionName": "ace_atragmx_fnc_cycle_scope_unit"
      },
      {
        "fileName": "fnc_cycle_target_size_units.sqf",
        "content": "/*\n * Author: Ruthberg\n * Cycles through the target size units\n *\n * Arguments:\n * step <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_cycle_target_size_units\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(rangeAssistTargetSizeUnit) = (GVAR(rangeAssistTargetSizeUnit) + 1) % (count GVAR(rangeAssistTargetSizeUnits));\nctrlSetText [7014, GVAR(rangeAssistTargetSizeUnits) select GVAR(rangeAssistTargetSizeUnit)];\n",
        "functionName": "ace_atragmx_fnc_cycle_target_size_units"
      },
      {
        "fileName": "fnc_cycle_target_speed_direction.sqf",
        "content": "/*\n * Author: Ruthberg\n * Cycles through the target directions left/right\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_cycle_target_direction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif ((ctrlText 140051) == \">\") then {\n    ctrlSetText [140051, \"<\"];\n} else {\n    ctrlSetText [140051, \">\"];\n};\n",
        "functionName": "ace_atragmx_fnc_cycle_target_speed_direction"
      },
      {
        "fileName": "fnc_delete_gun.sqf",
        "content": "/*\n * Author: Ruthberg\n * Deletes the currently selected gun profile from the profileNamespace\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_delete_gun\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _index = lbCurSel 6000;\n\nif (_index == -1) exitWith {};\n\nif (GVAR(currentGun) > _index) then {\n    GVAR(currentGun) = GVAR(currentGun) - 1;\n};\n\nGVAR(gunList) set [_index, 0];\nGVAR(gunList) = GVAR(gunList) - [0];\n\nlbDelete [6000, _index];\n\ncall FUNC(store_gun_list);\n",
        "functionName": "ace_atragmx_fnc_delete_gun"
      },
      {
        "fileName": "fnc_evaluate_option_menu_input.sqf",
        "content": "/*\n * Author: Ruthberg\n * Evalutes input from the option menu\n *\n * Arguments:\n * option menu id <number>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_evaluate_option_menu_input\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_optionID\"];\n\nswitch (_optionID) do {\n    case 0: {};                                                     // Accuracy 1st\n    case 1: { 0 call FUNC(toggle_muzzle_velocity_data); };          // MuzVel Table\n    case 2: { 0 call FUNC(toggle_c1_ballistic_coefficient_data); }; // Bal Coef Table\n    case 3: { 0 call FUNC(toggle_target_speed_assist); };           // Target Speed Est\n    case 4: { 0 call FUNC(toggle_target_range_assist); };           // Target Range Est\n    case 5: { 0 call FUNC(toggle_truing_drop); };                   // Truing Drop\n    case 6: { 0 call FUNC(toggle_coriolis); };                      // Show Coriolis\n    case 7: { 0 call FUNC(toggle_solution_setup); };                // Set Clicks\n    case 8: {};                                                     // Gun Note\n};\n",
        "functionName": "ace_atragmx_fnc_evaluate_option_menu_input"
      },
      {
        "fileName": "fnc_init.sqf",
        "content": "/*\n * Author: Ruthberg\n * Inits all global variables with the default values\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_init\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n\nGVAR(workingMemory) = +(GVAR(gunList) select 0);\n\nGVAR(scopeUnits) = [\"MILs\", \"TMOA\", \"SMOA\", \"Clicks\"];\nGVAR(scopeClickUnits) = [\"TMOA\", \"SMOA\", \"MILs\"];\n\nGVAR(rangeCardStartRange) = 200;\nGVAR(rangeCardEndRange) = 2000;\nGVAR(rangeCardIncrement) = 50;\nGVAR(rangeCardLastColumns) = [\"Lead\", \"RemV\", \"RemE\", \"TmFlt\"];\nGVAR(rangeCardCurrentColumn) = 3;\nGVAR(rangeCardData) = [];\n\nGVAR(rangeAssistTargetSizeUnits) = [\"in\", \"ft\", \"cm\", \"m\"];\nGVAR(rangeAssistTargetSizeUnit) = 2;\nGVAR(rangeAssistImageSizeUnits) = [\"MIL\", \"TMOA\", \"IOA\"];\nGVAR(rangeAssistImageSizeUnit) = 0;\nGVAR(rangeAssistUseTargetHeight) = true;\n\nGVAR(speedAssistNumTicksUnits) = [\"MIL\", \"TMOA\", \"IOA\"];\nGVAR(speedAssistNumTicksUnit) = 0;\nGVAR(speedAssistTimer) = true;\n\nGVAR(currentUnit) = 2;\nGVAR(currentGun) = 0;\nGVAR(currentTarget) = 0;\nGVAR(currentScopeUnit) = 0;\nGVAR(currentScopeClickUnit) = 2;\nGVAR(currentScopeClickUnitTemp) = 2;\nGVAR(currentScopeClickNumber) = 10;\nGVAR(currentScopeClickNumberTemp) = 10;\n\nGVAR(atmosphereModeTBH) = true;\nGVAR(altitude) = 0;\nGVAR(temperature) = 15;\nGVAR(barometricPressure) = 1013.25;\nGVAR(relativeHumidity) = 0.0;\n\nGVAR(latitude) = [38, 38, 38, 38];\nGVAR(directionOfFire) = [0, 0, 0, 0];\nGVAR(windSpeed1) = [0, 0, 0, 0];\nGVAR(windSpeed2) = [0, 0, 0, 0];\nGVAR(windDirection) = [12, 12, 12, 12];\nGVAR(inclinationAngle) = [0, 0, 0, 0];\nGVAR(targetSpeed) = [0, 0, 0, 0];\nGVAR(targetSpeedDirection) = [1, 1, 1, 1];\nGVAR(targetRange) = [0, 0, 0, 0];\n\nGVAR(showWind2) = false;\nGVAR(showCoriolis) = false;\nGVAR(elevationOutput) = [0, 0, 0, 0];\nGVAR(windage1Output) = [0, 0, 0, 0];\nGVAR(windage2Output) = [0, 0, 0, 0];\nGVAR(leadOutput) = [0, 0, 0, 0];\nGVAR(tofOutput) = [0, 0, 0, 0];\nGVAR(velocityOutput) = [0, 0, 0, 0];\nGVAR(verticalCoriolisOutput) = [0, 0, 0, 0];\nGVAR(horizontalCoriolisOutput) = [0, 0, 0, 0];\nGVAR(spinDriftOutput) = [0, 0, 0, 0];\n\nGVAR(truingDropMode) = 0;\nGVAR(truingDropRangeData) = [0, 0];\nGVAR(truingDropDropData) = [0, 0, 0];\nGVAR(truingDropReferenceDropData) = [0, 0, 0];\nGVAR(truingDropC1) = 0;\nGVAR(truingDropMuzzleVelocity) = 0;\n\nGVAR(targetSolutionInput) = nil;\n\nGVAR(targetRangeDirtyFlag) = false;\n\nGVAR(showMainPage) = true;\nGVAR(showAddNewGun) = false;\nGVAR(showAtmoEnvData) = false;\nGVAR(showC1BallisticCoefficientData) = false;\nGVAR(showGunAmmoData) = false;\nGVAR(showGunList) = false;\nGVAR(showMuzzleVelocityData) = false;\nGVAR(showRangeCard) = false;\nGVAR(showRangeCardSetup) = false;\nGVAR(showSolutionSetup) = false;\nGVAR(showTargetData) = false;\nGVAR(showTargetRangeAssist) = false;\nGVAR(showTargetSpeedAssist) = false;\nGVAR(showTargetSpeedAssistTimer) = false;\nGVAR(showTruingDrop) = false;\n",
        "functionName": "ace_atragmx_fnc_init"
      },
      {
        "fileName": "fnc_initGunList.sqf",
        "content": "/*\n * Author: Ruthberg\n * Inits the gun list from user profile\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_initGunList\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nLOG_2(\"Trying to load gunlist from profile [Version: %1][Count: %2]\", profileNamespace getVariable [ARR_2(QGVAR(profileNamespaceVersion), 'none')], count (profileNamespace getVariable [ARR_2(QGVAR(gunList), [])]));\n\nprivate _resetGunList = true;\nif ((profileNamespace getVariable [\"ACE_ATragMX_profileNamespaceVersion\", 0]) == ATRAGMX_PROFILE_NAMESPACE_VERSION && {count (profileNamespace getVariable [\"ACE_ATragMX_gunList\", []]) > 0}) then {\n    GVAR(gunList) = profileNamespace getVariable \"ACE_ATragMX_gunList\";\n    _resetGunList = false;\n    {\n        // Verify each gun has correct param type\n        if (!(_x isEqualTypeArray [\"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \"\", [], [], false])) exitWith {\n            _resetGunList = true;\n        };\n    } forEach GVAR(gunList);\n};\n\nif (_resetGunList) then {\n    WARNING(\"Reseting Profile Gunlist\");\n    // Profile Name, Muzzle Velocity, Zero Range, Scope Base Angle, AirFriction, Bore Height, Scope Unit, Scope Click Unit, Scope Click Number, Maximum Elevation, Dialed Elevation, Dialed Windage, Mass, Bullet Diameter, Rifle Twist, BC, Drag Model, Atmosphere Model, Muzzle Velocity vs. Temperature Interpolation, C1 Ballistic Coefficient vs. Distance Interpolation, Persistent\n    GVAR(gunList) =  [[\"12.7x108mm\"        ,  812, 100, 0.0958029, -0.00063800, 8.89, 0, 2, 10, 120, 0, 0, 48.28, 12.7, 38.10, 0.630, 1, \"ASM\" , [[-15,793],[0,800],[10,807],[15,812],[25,826],[30,835],[35,846]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\"12.7x99mm AMAX\"    ,  852, 100, 0.0907214, -0.00037397, 8.89, 0, 2, 10, 120, 0, 0, 48.60, 12.7, 38.10, 1.050, 1, \"ASM\" , [[-15,833],[0,840],[10,847],[15,852],[25,866],[30,875],[35,886]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n                      [\"12.7x99mm\"         ,  892, 100, 0.0879633, -0.00058679, 8.89, 0, 2, 10, 120, 0, 0, 41.92, 12.7, 38.10, 0.670, 1, \"ASM\" , [[-15,873],[0,880],[10,887],[15,892],[25,906],[30,915],[35,926]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\"12.7x54mm\"         ,  299, 100, 0.3567550, -0.00019568, 6.60, 0, 2, 10, 120, 0, 0, 48.60, 12.7, 24.13, 1.050, 1, \"ASM\" , [[-15,297],[0,298],[10,299],[15,299],[25,301],[30,302],[35,303]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\".50 Beowulf\"       ,  562, 100, 0.1425100, -0.00205896, 6.60, 0, 2, 10, 120, 0, 0, 21.71, 12.7, 50.80, 0.210, 1, \"ASM\" , [[-15,560],[0,561],[10,562],[15,562],[25,564],[30,565],[35,566]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\".408 CheyTac 305gr\", 1059, 100, 0.0686329, -0.00065414, 7.37, 0, 2, 10, 120, 0, 0, 19.76, 10.4, 33.02, 0.569, 1, \"ICAO\", [[-15,1040],[0,1047],[10,1054],[15,1059],[25,1073],[30,1082],[35,1093]], [[0, 0.605], [1110, 0.569], [1500, 0.560], [1790, 0.551], [1990, 0.547], [2140, 0.545], [2300, 0.544]], true],\n                      [\".408 CheyTac 419gr\",  859, 100, 0.0816039, -0.00046249, 7.37, 0, 2, 10, 120, 0, 0, 27.15, 10.4, 33.02, 0.866, 1, \"ICAO\", [[-15,840],[0,847],[10,854],[15,859],[25,873],[30,882],[35,893]]       , [[0, 0.872], [1440, 0.862], [1630, 0.859], [1870, 0.852], [2090, 0.843], [2230, 0.838], [2420, 0.833]], true],\n\n                      [\"9.3×64mm\"          ,  862, 100, 0.0875873, -0.00110727, 8.13, 0, 2, 10, 120, 0, 0, 14.90, 9.30, 35.56, 0.368, 1, \"ASM\" , [[-15,843],[0,850],[10,857],[15,862],[25,876],[30,885],[35,896]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\".338LM 250gr\"      ,  872, 100, 0.0809096, -0.00060841, 7.37, 0, 2, 10, 120, 0, 0, 16.20, 8.58, 25.40, 0.645, 1, \"ICAO\", [[-15,853],[0,860],[10,867],[15,872],[25,886],[30,895],[35,906]]       , [[0, 0.656], [1300, 0.64], [1460, 0.636], [1770, 0.625], [1920, 0.621], [2030, 0.619], [2190, 0.618]], true],\n                      [\".338LM 300gr\"      ,  792, 100, 0.0890193, -0.00055706, 7.37, 0, 2, 10, 120, 0, 0, 19.44, 8.58, 25.40, 0.759, 1, \"ICAO\", [[-15,773],[0,780],[10,787],[15,792],[25,806],[30,815],[35,826]]       , [[0, 0.734], [1300, 0.726], [1500, 0.720], [1770, 0.708], [1880, 0.705], [2000, 0.702], [2110, 0.700]], true],\n                      [\".338LM API526\"     ,  872, 100, 0.0810834, -0.00069220, 7.37, 0, 2, 10, 120, 0, 0, 16.39, 8.58, 25.40, 0.580, 1, \"ICAO\", [[-15,853],[0,860],[10,867],[15,872],[25,886],[30,895],[35,906]]       , [[0, 0.590], [1180, 0.576], [1320, 0.572], [1570, 0.563], [1690, 0.560], [1860, 0.557], [2050, 0.555]], true],\n\n                      [\".300WM Mk248 Mod0\" ,  857, 100, 0.0825862, -0.00072468, 7.37, 0, 2, 10, 120, 0, 0, 12.31, 7.80, 25.40, 0.537, 1, \"ICAO\", [[-15,838],[0,845],[10,852],[15,857],[25,871],[30,880],[35,891]]       , [[0, 0.546], [1210, 0.529], [1470, 0.520], [1570, 0.518], [1730, 0.515], [1880, 0.513], [1970, 0.513]], true],\n                      [\".300WM Mk248 Mod1\" ,  839, 100, 0.0841417, -0.00063027, 7.37, 0, 2, 10, 120, 0, 0, 14.26, 7.80, 25.40, 0.619, 1, \"ICAO\", [[-15,820],[0,827],[10,834],[15,839],[25,853],[30,862],[35,873]]       , [[0, 0.623], [1150, 0.614], [1330, 0.609], [1620, 0.598], [1770, 0.595], [1970, 0.592], [2030, 0.591]], true],\n                      [\".300WM Berger OTM\" ,  792, 100, 0.0891300, -0.00055262, 7.37, 0, 2, 10, 120, 0, 0, 14.90, 7.80, 25.40, 0.715, 1, \"ICAO\", [[-15,773],[0,780],[10,787],[15,792],[25,806],[30,815],[35,826]]       , [[0, 0.721], [1400, 0.708], [1570, 0.703], [1860, 0.692], [1990, 0.689], [2140, 0.686], [2220, 0.685]], true],\n\n                      [\"7.62x54mmR\"        ,  828, 100, 0.0853677, -0.00103739, 7.11, 0, 2, 10, 120, 0, 0, 9.849, 7.92, 24.13, 0.400, 1, \"ICAO\", [[-15,809],[0,816],[10,823],[15,828],[25,842],[30,851],[35,862]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\"7.62x51mm M80\"     ,  802, 100, 0.0909184, -0.00103711, 7.62, 0, 2, 10, 120, 0, 0, 9.461, 7.82, 25.40, 0.398, 1, \"ICAO\", [[-15,783],[0,790],[10,797],[15,802],[25,816],[30,825],[35,836]]       , [[0, 0.399], [810, 0.392], [1030, 0.383], [1120, 0.381], [1270, 0.380], [1410, 0.379], [1530, 0.379]], true],\n                      [\"7.62x51mm M118LR\"  ,  757, 100, 0.0958841, -0.00085157, 7.62, 0, 2, 10, 120, 0, 0, 11.34, 7.82, 25.40, 0.482, 1, \"ICAO\", [[-15,738],[0,745],[10,752],[15,757],[25,771],[30,780],[35,791]]       , [[0, 0.483], [790, 0.479], [920, 0.475], [1130, 0.465], [1230, 0.462], [1420, 0.460], [1630, 0.459]], true],\n                      [\"7.62x51mm Mk316\"   ,  781, 100, 0.0928267, -0.00084311, 7.62, 0, 2, 10, 120, 0, 0, 11.34, 7.82, 25.40, 0.483, 1, \"ICAO\", [[-15,777],[0,778],[10,779],[15,781],[25,783],[30,785],[35,787]]       , [[0, 0.484], [830, 0.479], [950, 0.475], [1130, 0.467], [1260, 0.463], [1430, 0.461], [1660, 0.459]], true],\n                      [\"7.62x51mm Mk319\"   ,  900, 100, 0.0811838, -0.00104515, 7.62, 0, 2, 10, 120, 0, 0, 8.424, 7.82, 25.40, 0.377, 1, \"ICAO\", [[-15,898],[0,899],[10,900],[15,900],[25,902],[30,903],[35,904]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n                      [\"7.62x51mm M993\"    ,  912, 100, 0.0803840, -0.00109390, 7.62, 0, 2, 10, 120, 0, 0, 8.230, 7.82, 25.40, 0.359, 1, \"ICAO\", [[-15,893],[0,900],[10,907],[15,912],[25,926],[30,935],[35,946]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n                      [\"7.62x51mm Subsonic\",  314, 100, 0.3344490, -0.00060194, 6.86, 0, 2, 10, 120, 0, 0, 12.96, 7.82, 25.40, 0.502, 1, \"ICAO\", [[-15,312],[0,313],[10,314],[15,314],[25,316],[30,317],[35,318]]       , [[0, 0.303], [250, 0.409], [320, 0.427], [420, 0.445], [550, 0.460], [650, 0.467], [730, 0.470]], true],\n\n                      [\"7.62x39mm\"         ,  708, 100, 0.1066160, -0.00154815, 7.62, 0, 2, 10, 120, 0, 0, 7.970, 7.82, 25.40, 0.275, 1, \"ICAO\", [[-15,689],[0,696],[10,703],[15,708],[25,722],[30,731],[35,742]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\"6.5x39mm\"          ,  766, 100, 0.0872025, -0.00077363, 6.35, 0, 2, 10, 120, 0, 0, 7.970, 6.71, 22.86, 0.524, 1, \"ICAO\", [[-15,747],[0,754],[10,761],[15,766],[25,780],[30,789],[35,800]]       , [[0, 0.525], [910, 0.520], [1050, 0.515], [1270, 0.506], [1390, 0.503], [1570, 0.500], [1770, 0.498]], true],\n                      [\"6.5x47mm Lapua\"    ,  767, 100, 0.0868248, -0.00069003, 6.35, 0, 2, 10, 120, 0, 0, 9.007, 6.71, 22.86, 0.577, 1, \"ICAO\", [[-15,748],[0,755],[10,762],[15,767],[25,781],[30,790],[35,801]]       , [[0, 0.578], [970, 0.574], [1140, 0.569], [1430, 0.557], [1610, 0.553], [1750, 0.551], [1860, 0.550]], true],\n                      [\"6.5mm Creedmor\"    ,  822, 100, 0.0800956, -0.00062437, 6.35, 0, 2, 10, 120, 0, 0, 9.072, 6.71, 22.86, 0.632, 1, \"ICAO\", [[-15,803],[0,810],[10,817],[15,822],[25,836],[30,845],[35,856]]       , [[0, 0.635], [1150, 0.627], [1350, 0.621], [1630, 0.611], [1760, 0.607], [1860, 0.606], [2020, 0.604]], true],\n\n                      [\"5.8x42mm DBP87\"    ,  942, 100, 0.0916742, -0.00121087, 9.91, 0, 2, 10, 120, 0, 0, 4.150, 5.99, 24.40, 0.313, 1, \"ICAO\", [[-15,923],[0,930],[10,937],[15,942],[25,956],[30,965],[35,976]]       , [[0, 0.323], [760, 0.309], [970, 0.303], [1030, 0.302], [1130, 0.301], [1210, 0.300], [1510, 0.299]], true],\n\n                      [\"5.56x45mm M855\"    ,  862, 100, 0.0825404, -0.00130094, 7.11, 0, 2, 10, 120, 0, 0, 4.018, 5.70, 17.78, 0.302, 1, \"ASM\" , [[-15,843],[0,849],[10,857],[15,862],[25,876],[30,885],[35,898]]       , [[0, 0.306], [670, 0.298], [880, 0.291], [1000, 0.289], [1150, 0.288], [1340, 0.288], [1410, 0.288]], true],\n                      [\"5.56x45mm Mk262\"   ,  812, 100, 0.0872422, -0.00111805, 7.11, 0, 2, 10, 120, 0, 0, 4.990, 5.70, 17.78, 0.361, 1, \"ASM\" , [[-15,793],[0,800],[10,807],[15,812],[25,826],[30,835],[35,846]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n                      [\"5.56x45mm Mk318\"   ,  872, 100, 0.0814490, -0.00125880, 7.11, 0, 2, 10, 120, 0, 0, 4.018, 5.70, 17.78, 0.307, 1, \"ASM\" , [[-15,853],[0,860],[10,867],[15,872],[25,886],[30,895],[35,906]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n                      [\"5.56x45mm M995\"    ,  861, 100, 0.0825279, -0.00126182, 7.11, 0, 2, 10, 120, 0, 0, 4.536, 5.70, 17.78, 0.310, 1, \"ASM\" , [[-15,842],[0,849],[10,856],[15,861],[25,875],[30,884],[35,895]]       , [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]], true],\n\n                      [\"5.45x39mm 7N6M\"    ,  727, 100, 0.0802286, -0.00119458, 3.81, 0, 2, 10, 120, 0, 0, 3.428, 5.59, 16.00, 0.336, 1, \"ICAO\", [[-15,708],[0,715],[10,722],[15,727],[25,741],[30,750],[35,761]], [[0, 0.339], [730, 0.331], [960, 0.323], [1100, 0.321], [1220, 0.320], [1380, 0.320], [1480, 0.320]], true]];\n\n    [] call FUNC(clear_user_data);\n    profileNamespace setVariable [\"ACE_ATragMX_gunList\", GVAR(gunList)];\n};\n",
        "functionName": "ace_atragmx_fnc_initGunList"
      },
      {
        "fileName": "fnc_insert_c1_ballistic_coefficient_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Inserts entry in the c1 ballistic coefficient vs. distance interpolation table\n *\n * Arguments:\n * transonic range - <NUMBER>\n * subsonic range - <NUMBER>\n * c1 ballistic coefficient - <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [800, 0.485] call ace_atragmx_fnc_insert_c1_ballistic_coefficient_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_transonicRange\", \"_subsonicRange\", \"_c1\"];\n\nprivate _entries = {(_x select 1) > 0} count (GVAR(workingMemory) select 19);\n\nif (_entries > 0) then {\n    // Insert\n    private _insertIndex = 0;\n    private _minDiff = 10000;\n    {\n        if (_minDiff > 0 && {(((GVAR(workingMemory) select 19) select _forEachIndex) select 1) == 0}) then {\n            _insertIndex = _forEachIndex;\n            _minDiff = 0;\n        };\n        private _tr = ((GVAR(workingMemory) select 19) select _forEachIndex) select 0;\n        private _diff = abs(_subsonicRange - _tr);\n        if (_diff == 0) exitWith {\n            _insertIndex = _forEachIndex;\n        };\n        if (_diff < _minDiff) then {\n            _insertIndex = _forEachIndex;\n            _minDiff = _diff;\n        };\n    } forEach (GVAR(workingMemory) select 19);\n\n    (GVAR(workingMemory) select 19) set [_insertIndex, [_subsonicRange, 0.1 max _c1 min 2.0]];\n} else {\n    // Reset\n    private _zeroRange  = GVAR(workingMemory) select 2;\n    private _bc = GVAR(workingMemory) select 15;\n    GVAR(workingMemory) set [19, [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]];\n    (GVAR(workingMemory) select 19) set [0, [_zeroRange, _bc]];\n    (GVAR(workingMemory) select 19) set [1, [_transonicRange + (_subsonicRange - _transonicRange) * 0.75, _bc]];\n    (GVAR(workingMemory) select 19) set [2, [_subsonicRange, 0.1 max _c1 min 2.0]];\n};\n\ncall FUNC(update_c1_ballistic_coefficient_data);\n",
        "functionName": "ace_atragmx_fnc_insert_c1_ballistic_coefficient_data"
      },
      {
        "fileName": "fnc_insert_muzzle_velocity_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Inserts entry in the muzzle velocity vs. temperature interpolation table\n *\n * Arguments:\n * temperature - <NUMBER>\n * muzzle velocity - <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [10, 800] call ace_atragmx_fnc_insert_muzzle_velocity_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_temperature\", \"_muzzleVelocity\"];\n\nprivate _insertIndex = 0;\nprivate _minDiff = 1000;\n{\n    if (_minDiff > 0 && {(((GVAR(workingMemory) select 18) select _forEachIndex) select 1) == 0}) then {\n        _insertIndex = _forEachIndex;\n        _minDiff = 0;\n    };\n    private _t = ((GVAR(workingMemory) select 18) select _forEachIndex) select 0;\n    private _diff = abs(_temperature - _t);\n    if (_diff == 0) exitWith {\n        _insertIndex = _forEachIndex;\n    };\n    if (_diff < _minDiff) then {\n        _insertIndex = _forEachIndex;\n        _minDiff = _diff;\n    };\n} forEach (GVAR(workingMemory) select 18);\n\n(GVAR(workingMemory) select 18) set [_insertIndex, [_temperature, 0 max _muzzleVelocity min 1400]];\n\ncall FUNC(update_muzzle_velocity_data);\n",
        "functionName": "ace_atragmx_fnc_insert_muzzle_velocity_data"
      },
      {
        "fileName": "fnc_lookup_c1_ballistic_coefficient.sqf",
        "content": "/*\n * Author: Ruthberg\n * Lookup the correct C1 ballistic coefficient in the c1 ballistic coefficient vs. distance interpolation table\n *\n * Arguments:\n * Target Range <NUMBER>\n *\n * Return Value:\n * C1 ballistic coefficient <NUMBER\n *\n * Example:\n * call ace_atragmx_fnc_lookup_c1_ballistic_coefficient\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_targetRange\"];\n\nprivate _lookupTable = [];\n{\n    if ((_x select 1) > 0) then {\n        _lookupTable pushBack _x;\n    };\n} forEach (GVAR(workingMemory) select 19);\n\nprivate _lookupTableSize = count _lookupTable;\nif (_lookupTableSize < 2) exitWith { (GVAR(workingMemory) select 15) };\n_lookupTable sort true;\n\nprivate _lowerIndex = 0;\nprivate _upperIndex = 1;\n\nfor \"_index\" from 1 to (_lookupTableSize - 1) do {\n    _upperIndex = _index;\n    _lowerIndex = _upperIndex - 1;\n    if (((_lookupTable select _index) select 0) >= _targetRange) exitWith {};\n};\n\n(_lookupTable select _lowerIndex) params [\"_lowerDistance\", \"_lowerC1\"];\n(_lookupTable select _upperIndex) params [\"_upperDistance\", \"_upperC1\"];\n\n(0.1 max (linearConversion [_lowerDistance, _upperDistance, _targetRange, _lowerC1, _upperC1]) min 2.0)\n",
        "functionName": "ace_atragmx_fnc_lookup_c1_ballistic_coefficient"
      },
      {
        "fileName": "fnc_on_close_dialog.sqf",
        "content": "/*\n * Author: ACE-Team\n * On close Dialog\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_on_close_dialog\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nuiNamespace setVariable ['ATragMX_Display', nil];\nGVAR(active) = false;\n[GVAR(DialogPFH)] call CBA_fnc_removePerFrameHandler;\n",
        "functionName": "ace_atragmx_fnc_on_close_dialog"
      },
      {
        "fileName": "fnc_parse_input.sqf",
        "content": "/*\n * Author: Ruthberg\n * Parses all input fields in the gun-, atmosphere- and target column, the result input fields and the muzzle velocity data input fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_parse_input\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Muzzle velocity vs. temperature interpolation data\n{\n    private _temperature = parseNumber(ctrlText _x);\n    if (GVAR(currentUnit) != 2) then {\n        _temperature = -50 max _temperature min 160;\n        _temperature = (_temperature - 32) / 1.8;\n    } else {\n        _temperature = -50 max _temperature min 71;\n    };\n    ((GVAR(workingMemory) select 18) select _forEachIndex) set [0, _temperature];\n} forEach [160021, 160022, 160023, 160024, 160025, 160026, 160027];\n{\n    private _muzzleVelocity = abs(parseNumber(ctrlText _x));\n    if (_muzzleVelocity > 0) then {\n        if (GVAR(currentUnit) != 2) then {\n            _muzzleVelocity = 300 max _muzzleVelocity min 4500;\n            _muzzleVelocity = _muzzleVelocity * 0.3048;\n        } else {\n            _muzzleVelocity = 100 max _muzzleVelocity min 1400;\n        };\n    };\n    ((GVAR(workingMemory) select 18) select _forEachIndex) set [1, _muzzleVelocity];\n} forEach [160031, 160032, 160033, 160034, 160035, 160036, 160037];\n\n// C1 coefficient vs. distance interpolation data\n{\n    private _distance = abs(parseNumber(ctrlText _x));\n    if (_distance > 0) then {\n        if (GVAR(currentUnit) == 1) then {\n            _distance = 25 max _distance min 4000;\n            _distance = _distance * 0.9144;\n        } else {\n            _distance = 25 max _distance min 3700;\n        };\n    };\n    ((GVAR(workingMemory) select 19) select _forEachIndex) set [0, _distance];\n} forEach [170021, 170022, 170023, 170024, 170025, 170026, 170027];\n{\n    private _c1 = abs(parseNumber(ctrlText _x));\n    if (_c1 > 0) then {\n        _c1 = 0.1 max _c1 min 2.0;\n    };\n    ((GVAR(workingMemory) select 19) select _forEachIndex) set [1, _c1];\n} forEach [170031, 170032, 170033, 170034, 170035, 170036, 170037];\n\nGVAR(altitude) = parseNumber(ctrlText 130030);\nGVAR(temperature) = parseNumber(ctrlText 130040);\nGVAR(barometricPressure) = parseNumber(ctrlText 130050);\nGVAR(relativeHumidity) = parseNumber(ctrlText 130060) / 100;\nif (GVAR(currentUnit) != 2) then {\n    GVAR(altitude) = -1000 max GVAR(altitude) min 20000;\n    GVAR(temperature) = -50 max GVAR(temperature) min 160;\n    GVAR(barometricPressure) = 10 max GVAR(barometricPressure) min 40;\n    GVAR(altitude) = GVAR(altitude) * 0.3048;\n    GVAR(temperature) = (GVAR(temperature) - 32) / 1.8;\n    GVAR(barometricPressure) = GVAR(barometricPressure) * 33.86389;\n} else {\n    GVAR(altitude) = -300 max GVAR(altitude) min 6100;\n    GVAR(temperature) = -50 max GVAR(temperature) min 71;\n    GVAR(barometricPressure) = 340 max GVAR(barometricPressure) min 1350;\n};\n\nprivate _windSpeed1 = parseNumber(ctrlText 140020);\nprivate _windSpeed2 = parseNumber(ctrlText 140021);\nprivate _targetSpeed = parseNumber(ctrlText 140050);\nprivate _targetRange = parseNumber(ctrlText 140060);\nif (GVAR(currentUnit) != 2) then {\n    _windSpeed1 = 0 max _windSpeed1 min 50;\n    _windSpeed2 = 0 max _windSpeed2 min 50;\n    _targetSpeed = 0 max _targetSpeed min 50;\n    _windSpeed1 = _windSpeed1 * 0.44704;\n    _windSpeed2 = _windSpeed2 * 0.44704;\n    _targetSpeed = _targetSpeed * 0.44704;\n} else {\n    _windSpeed1 = 0 max _windSpeed1 min 25;\n    _windSpeed2 = 0 max _windSpeed2 min 25;\n    _targetSpeed = 0 max _targetSpeed min 25;\n};\nif (GVAR(currentUnit) == 1) then {\n    _targetRange = 25 max _targetRange min 4000;\n    _targetRange = _targetRange * 0.9144;\n} else {\n    _targetRange = 25 max _targetRange min 3700;\n};\nGVAR(targetRangeDirtyFlag) = GVAR(targetRangeDirtyFlag) || {_targetRange != GVAR(targetRange) select GVAR(currentTarget)};\nGVAR(latitude) set [GVAR(currentTarget), -90 max Round(parseNumber(ctrlText 140000)) min 90];\nGVAR(directionOfFire) set [GVAR(currentTarget), 0 max abs(Round(parseNumber(ctrlText 140010))) min 359];\nGVAR(windSpeed1) set [GVAR(currentTarget), _windSpeed1];\nGVAR(windSpeed2) set [GVAR(currentTarget), _windSpeed2];\nGVAR(windDirection) set [GVAR(currentTarget), 1 max Round(parseNumber(ctrlText 140030)) min 12];\nGVAR(targetSpeed) set [GVAR(currentTarget), _targetSpeed];\nGVAR(targetRange) set [GVAR(currentTarget), _targetRange];\nprivate _inclinationAngleCosine = 0.5 max parseNumber(ctrlText 140041) min 1;\nprivate _inclinationAngleDegree = -60 max round(parseNumber(ctrlText 140040)) min 60;\nif (_inclinationAngleDegree != GVAR(inclinationAngle) select GVAR(currentTarget)) then {\n    GVAR(inclinationAngle) set [GVAR(currentTarget), _inclinationAngleDegree];\n} else {\n    if (_inclinationAngleCosine != Round(cos(GVAR(inclinationAngle) select GVAR(currentTarget)) * 100) / 100) then {\n        GVAR(inclinationAngle) set [GVAR(currentTarget), round(acos(_inclinationAngleCosine))];\n    };\n};\nif ((ctrlText 140051) == \">\") then {\n    GVAR(targetSpeedDirection) set [GVAR(currentTarget), +1];\n} else {\n    GVAR(targetSpeedDirection) set [GVAR(currentTarget), -1];\n};\n\nprivate _boreHeight = parseNumber(ctrlText 120000);\nprivate _bulletMass = parseNumber(ctrlText 120010);\nprivate _bulletDiameter = parseNumber(ctrlText 120020);\nprivate _airFriction = parseNumber(ctrlText 120030);\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    _airFriction = 0.1 max _airFriction min 2;\n} else {\n    _airFriction = _airFriction / -1000;\n};\nprivate _rifleTwist = parseNumber(ctrlText 120040);\nprivate _muzzleVelocity = parseNumber(ctrlText 120050);\nprivate _zeroRange = parseNumber(ctrlText 120060);\nif (GVAR(currentUnit) != 2) then {\n    _boreHeight = 0.1 max _boreHeight min 5;\n    _bulletMass = 1 max _bulletMass min 1500;\n    _bulletDiameter = 0.1 max _bulletDiameter min 1.0;\n    _rifleTwist = 1 max _rifleTwist min 36;\n    _muzzleVelocity = 300 max _muzzleVelocity min 4500;\n    _boreHeight = _boreHeight * 2.54;\n    _bulletMass = _bulletMass * 0.06479891;\n    _bulletDiameter = _bulletDiameter * 2.54;\n    _rifleTwist = _rifleTwist * 2.54;\n    _muzzleVelocity = _muzzleVelocity * 0.3048;\n} else {\n    _boreHeight = 0.1 max _boreHeight min 10;\n    _bulletMass = 1 max _bulletMass min 100;\n    _bulletDiameter = 0.1 max _bulletDiameter min 2.5;\n    _rifleTwist = 1 max _rifleTwist min 75;\n    _muzzleVelocity = 100 max _muzzleVelocity min 1400;\n};\n_zeroRange = 25 max _zeroRange min 1000;\nif (GVAR(currentUnit) == 1) then {\n    _zeroRange = _zeroRange * 0.9144;\n};\nGVAR(workingMemory) set [5, _boreHeight];\nGVAR(workingMemory) set [12, _bulletMass];\nGVAR(workingMemory) set [13, _bulletDiameter * 10];\nGVAR(workingMemory) set [14, _rifleTwist];\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    if (_airFriction != GVAR(workingMemory) select 15) then {\n        (_airFriction - (GVAR(workingMemory) select 15)) call FUNC(shift_c1_ballistic_coefficient_data);\n    };\n    GVAR(workingMemory) set [15, _airFriction];\n} else {\n    GVAR(workingMemory) set [4, _airFriction];\n};\nif (_muzzleVelocity != GVAR(workingMemory) select 1) then {\n    (_muzzleVelocity - (GVAR(workingMemory) select 1)) call FUNC(shift_muzzle_velocity_data);\n};\nGVAR(workingMemory) set [1, _muzzleVelocity];\nGVAR(workingMemory) set [2, _zeroRange];\n\nif (GVAR(targetRangeDirtyFlag) && missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    [false, false] call FUNC(recalculate_c1_ballistic_coefficient);\n    GVAR(targetRangeDirtyFlag) = false;\n};\n\n[] call FUNC(update_gun);\n[] call FUNC(update_gun_ammo_data);\n[] call FUNC(update_atmosphere);\n[] call FUNC(update_atmo_env_data);\n[] call FUNC(update_target);\n[] call FUNC(update_target_data);\n[] call FUNC(update_muzzle_velocity_data);\n[] call FUNC(update_c1_ballistic_coefficient_data);\n\n[] call FUNC(store_user_data);\n",
        "functionName": "ace_atragmx_fnc_parse_input"
      },
      {
        "fileName": "fnc_read_gun_list_entries_from_config.sqf",
        "content": "/*\n * Author: Ruthberg\n * Reads gun list entries from the config and appends them to the gun list\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_read_gun_list_entries_from_config\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _validate_preset = {\n    private _valid = true;\n    if (count _this != 20) then {\n        private _errorMsg = format [\"Invalid preset array size: %1\", count _this];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 0 == \"\") then {\n        ERROR(\"Invalid gun profile name\");\n        _valid = false;\n    };\n    if (count (_this select 0) > 14) then {\n        WARNING(\"Gun profile name too long (max. allowed 14 characters)\");\n    };\n    if (_this select 1 < 0 || _this select 1 > 1400) then {\n        private _errorMsg = format [\"Invalid muzzle velocity: %1\", _this select 1];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 2 < 25 || _this select 2 > 1000) then {\n        private _errorMsg = format [\"Invalid zero range: %1\", _this select 2];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 4 > 0) then {\n        private _errorMsg = format [\"Invalid airFriction value: %1\", _this select 4];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 5 < 0.1 || _this select 5 > 10) then {\n        private _errorMsg = format [\"Invalid bore height value: %1\", _this select 4];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 12 < 1 || _this select 12 > 100) then {\n        private _errorMsg = format [\"Invalid bullet weight: %1\", _this select 12];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 13 < 1 || _this select 13 > 25) then {\n        private _errorMsg = format [\"Invalid bullet diameter: %1\", _this select 13];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 14 < 1 || _this select 14 > 75) then {\n        private _errorMsg = format [\"Invalid rifle twist: %1\", _this select 14];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 15 < 0.1 || _this select 15 > 2.0) then {\n        private _errorMsg = format [\"Invalid ballistic coefficient: %1\", _this select 15];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (_this select 16 != 1) then {\n        private _errorMsg = format [\"Invalid drag model: %1\", _this select 16];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (!((_this select 17) in [\"ASM\", \"ICAO\"])) then {\n        private _errorMsg = format [\"Invalid atmosphere model: %1\", _this select 17];\n        ERROR(_errorMsg);\n        _valid = false;\n    };\n    if (count (_this select 18) != 7) then {\n        private _errorMsg = format [\"Invalid muzzle velocity table array size: %1\", count (_this select 18)];\n        ERROR(_errorMsg);\n        _valid = false;\n    } else {\n        {\n            if (count _x != 2) exitWith {\n                private _errorMsg = format [\"Invalid muzzle velocity table subarray size: %1\", count _x];\n                ERROR(_errorMsg);\n                _valid = false;\n            };\n        } forEach (_this select 18);\n    };\n    if (count (_this select 19) != 7) then {\n        private _errorMsg = format [\"Invalid drag coefficient table array size: %1\", count (_this select 19)];\n        ERROR(_errorMsg);\n        _valid = false;\n    } else {\n        {\n            if (count _x != 2) exitWith {\n                private _errorMsg = format [\"Invalid drag coefficient table subarray size: %1\", count _x];\n                ERROR(_errorMsg);\n                _valid = false;\n            };\n        } forEach (_this select 19);\n    };\n    _valid\n};\n\n{\n    private _preset = _x >> \"preset\";\n\n    if (isArray(_preset)) then {\n        private _gun = getArray _preset;\n\n        if (_gun call _validate_preset) then {\n            _gun set [0, (_gun select 0) select [0, 14]];\n            _gun set [20, false];\n            GVAR(gunList) = GVAR(gunList) + [_gun];\n        };\n    };\n} forEach (\"true\" configClasses (configFile >> \"ACE_ATragMX_Presets\"));\n",
        "functionName": "ace_atragmx_fnc_read_gun_list_entries_from_config"
      },
      {
        "fileName": "fnc_recalculate_c1_ballistic_coefficient.sqf",
        "content": "/*\n * Author: Ruthberg\n * Recalculates the c1 ballistic coefficient based on the current target range\n *\n * Arguments:\n * parse input <BOOL>\n * update display <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_recalculate_c1_ballistic_coefficient\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_parseInput\", \"_updateDisplay\"];\n\nif (_parseInput) then {\n    [] call FUNC(parse_input);\n};\n\nprivate _c1 = [GVAR(targetRange) select GVAR(currentTarget)] call FUNC(lookup_c1_ballistic_coefficient);\n\nif (_c1 != GVAR(workingMemory) select 15) then {\n    GVAR(workingMemory) set [15, _c1];\n    if (_updateDisplay) then {\n        call FUNC(update_gun);\n        call FUNC(update_gun_ammo_data);\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_recalculate_c1_ballistic_coefficient"
      },
      {
        "fileName": "fnc_recalculate_muzzle_velocity.sqf",
        "content": "/*\n * Author: Ruthberg\n * Recalculates the muzzle velocity based on the muzzle velocity vs. temperature interpolation input\n *\n * Arguments:\n * parse input <BOOL>\n * update display <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_recalculate_muzzle_velocity\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_parseInput\", \"_updateDisplay\"];\n\nif (_parseInput) then {\n    [] call FUNC(parse_input);\n};\n\nprivate _lookupTable = [];\n{\n    if ((_x select 1) > 0) then {\n        _lookupTable pushBack _x;\n    };\n} forEach (GVAR(workingMemory) select 18);\n\nprivate _lookupTableSize = count _lookupTable;\nif (_lookupTableSize < 2) exitWith {};\n_lookupTable sort true;\n\nprivate _lowerIndex = 0;\nprivate _upperIndex = 1;\n\nfor \"_index\" from 1 to (_lookupTableSize - 1) do {\n    _upperIndex = _index;\n    _lowerIndex = _upperIndex - 1;\n    if (((_lookupTable select _index) select 0) >= GVAR(temperature)) exitWith {};\n};\n\n(_lookupTable select _lowerIndex) params [\"_lowerDistance\", \"_lowerMuzzleVelocity\"];\n(_lookupTable select _upperIndex) params [\"_upperDistance\", \"_upperMuzzleVelocity\"];\n\n_muzzleVelocity = 100 max (linearConversion [_lowerDistance, _upperDistance, GVAR(temperature), _lowerMuzzleVelocity, _upperMuzzleVelocity]) min 1400;\n\nif (_muzzleVelocity != GVAR(workingMemory) select 1) then {\n    GVAR(workingMemory) set [1, _muzzleVelocity];\n    if (_updateDisplay) then {\n        call FUNC(update_gun);\n        call FUNC(update_gun_ammo_data);\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_recalculate_muzzle_velocity"
      },
      {
        "fileName": "fnc_reset_relative_click_memory.sqf",
        "content": "/*\n * Author: Ruthberg\n * Resets the relative click memory and updates the result input/output fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_reset_relative_click_memory\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(workingMemory) set [10, 0];\nGVAR(workingMemory) set [11, 0];\n\n[] call FUNC(update_result);\n",
        "functionName": "ace_atragmx_fnc_reset_relative_click_memory"
      },
      {
        "fileName": "fnc_restore_atmo_default.sqf",
        "content": "/*\n * Author: Ruthberg\n * Restores the atmospheric data defaults\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_restore_atmo_default\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(atmosphereModeTBH) = true;\nGVAR(altitude) = 0;\nGVAR(temperature) = 15;\nGVAR(barometricPressure) = 1013.25;\nGVAR(relativeHumidity) = 0.0;\n\n[] call FUNC(update_atmo_selection);\n[] call FUNC(update_atmosphere);\n",
        "functionName": "ace_atragmx_fnc_restore_atmo_default"
      },
      {
        "fileName": "fnc_restore_truing_drop.sqf",
        "content": "/*\n * Author: Ruthberg\n * Restores the truing drop defaults\n *\n * Arguments:\n * update display <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_restore_truing_drop\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _updateDisplay = _this;\n\nGVAR(truingDropMode) = 0;\nGVAR(truingDropRangeData) = [0, 0];\nGVAR(truingDropDropData) = [0, 0, 0];\nGVAR(truingDropReferenceDropData) = [0, 0, 0];\nGVAR(truingDropC1) = 0;\nGVAR(truingDropMuzzleVelocity) = 0;\n\n// Resets input fields\ncall FUNC(update_truing_drop_selection);\n\nif (_updateDisplay) then {\n    // Repopulates input fields\n    false call FUNC(calculate_truing_drop);\n};\n",
        "functionName": "ace_atragmx_fnc_restore_truing_drop"
      },
      {
        "fileName": "fnc_restore_user_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Reads user data from profileNamespace\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_restore_user_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(currentUnit) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_currentUnit\", 2]) min 2;\n[(profileNamespace getVariable [\"ACE_ATragMX_currentGun\", 0]), true, false] call FUNC(change_gun);\nGVAR(currentTarget) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_currentTarget\", 0]) min 3;\n\nGVAR(atmosphereModeTBH) = profileNamespace getVariable [\"ACE_ATragMX_atmosphereModeTBH\", true];\nGVAR(altitude) = -1000 max (profileNamespace getVariable [\"ACE_ATragMX_altitude\", 0]) min 20000;\nGVAR(temperature) = -50 max (profileNamespace getVariable [\"ACE_ATragMX_temperature\", 15]) min 160;\nGVAR(barometricPressure) = 340 max (profileNamespace getVariable [\"ACE_ATragMX_barometricPressure\", 1013.25]) min 1350;\nGVAR(relativeHumidity) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_relativeHumidity\", 0.0]) min 1;\n\nGVAR(showWind2) = profileNamespace getVariable [\"ACE_ATragMX_showWind2\", false];\nGVAR(showCoriolis) = profileNamespace getVariable [\"ACE_ATragMX_showCoriolis\", true];\nGVAR(latitude) = profileNamespace getVariable [\"ACE_ATragMX_latitude\", [38, 38, 38, 38]];\nGVAR(directionOfFire) = profileNamespace getVariable [\"ACE_ATragMX_directionOfFire\", [0, 0, 0, 0]];\nGVAR(windSpeed1) = profileNamespace getVariable [\"ACE_ATragMX_windSpeed1\", [0, 0, 0, 0]];\nGVAR(windSpeed2) = profileNamespace getVariable [\"ACE_ATragMX_windSpeed2\", [0, 0, 0, 0]];\nGVAR(windDirection) = profileNamespace getVariable [\"ACE_ATragMX_windDirection\", [12, 12, 12, 12]];\nGVAR(inclinationAngle) = profileNamespace getVariable [\"ACE_ATragMX_inclinationAngle\", [0, 0, 0, 0]];\nGVAR(targetSpeed) = profileNamespace getVariable [\"ACE_ATragMX_targetSpeed\", [0, 0, 0, 0]];\nGVAR(targetSpeedDirection) = profileNamespace getVariable [\"ACE_ATragMX_targetSpeedDirection\", [1, 1, 1, 1]];\nGVAR(targetRange) = profileNamespace getVariable [\"ACE_ATragMX_targetRange\", [0, 0, 0, 0]];\n\nGVAR(rangeCardStartRange) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardStartRange\", 200]) min 3000;\nGVAR(rangeCardEndRange) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardEndRange\", 2000]) min 3000;\nGVAR(rangeCardIncrement) = 1 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardIncrement\", 50]) min 3000;\nGVAR(rangeCardCurrentColumn) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardCurrentColumn\", 3]) min 3;\n",
        "functionName": "ace_atragmx_fnc_restore_user_data"
      },
      {
        "fileName": "fnc_save_gun.sqf",
        "content": "/*\n * Author: Ruthberg\n * Saves the currently select gun profile into the profileNamespace\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_save_gun\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _index = 0 max (lbCurSel 6000);\n\nGVAR(gunList) set [_index, +GVAR(workingMemory)];\n\nlbClear 6000;\n{\n    lbAdd [6000, _x select 0];\n} forEach GVAR(gunList);\n\ncall FUNC(store_gun_list);\n",
        "functionName": "ace_atragmx_fnc_save_gun"
      },
      {
        "fileName": "fnc_shift_c1_ballistic_coefficient_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shifts all c1 ballistic coefficient entries in the c1 ballistic coefficient vs. distance interpolation table\n *\n * Arguments:\n * ballistic coefficient - <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 10 call ace_atragmx_fnc_shift_c1_ballistic_coefficient_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (_this == 0) exitWith {};\n\n{\n    private _c1 = _x select 1;\n    if (_c1 > 0) then {\n        ((GVAR(workingMemory) select 19) select _forEachIndex) set [1, 0.1 max (_c1 + _this) min 2];\n    }\n} forEach (GVAR(workingMemory) select 19);\n",
        "functionName": "ace_atragmx_fnc_shift_c1_ballistic_coefficient_data"
      },
      {
        "fileName": "fnc_shift_muzzle_velocity_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shifts all muzzle velocity entries in the muzzle velocity vs. temperature interpolation table\n *\n * Arguments:\n * velocity - <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 10 call ace_atragmx_fnc_shift_muzzle_velocity_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (_this == 0) exitWith {};\n\n{\n    private _velocity = _x select 1;\n    if (_velocity > 0) then {\n        ((GVAR(workingMemory) select 18) select _forEachIndex) set [1, 0 max (_velocity + _this) min 1400];\n    }\n} forEach (GVAR(workingMemory) select 18);\n",
        "functionName": "ace_atragmx_fnc_shift_muzzle_velocity_data"
      },
      {
        "fileName": "fnc_show_add_new_gun.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides add new gun controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_add_new_gun\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showAddNewGun) = _this;\n\n{ctrlShow [_x, _this]} forEach [11000, 11001, 11002, 11003];\n",
        "functionName": "ace_atragmx_fnc_show_add_new_gun"
      },
      {
        "fileName": "fnc_show_atmo_env_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the atmosphere and environmental data controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_atmo_env_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showAtmoEnvData) = _this;\n\n{ctrlShow [_x, _this]} forEach [13000, 13001, 13002, 13003, 130030, 13004, 130040, 13005, 130050, 13006, 130060, 13007, 13008, 13009, 13010, 13011];\n\nif (_this) then {\n    [] call FUNC(update_atmo_selection);\n    [] call FUNC(update_atmo_env_data);\n};\n",
        "functionName": "ace_atragmx_fnc_show_atmo_env_data"
      },
      {
        "fileName": "fnc_show_c1_ballistic_coefficient_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the c1 ballistic coefficient data controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_c1_ballistic_coefficient_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showC1BallisticCoefficientData) = _this;\n\n{ctrlShow [_x, _this]} forEach [17000, 17001, 170021, 170022, 170023, 170024, 170025, 170026, 170027, 170031, 170032, 170033, 170034, 170035, 170036, 170037, 17004, 17005, 17006, 17007, 17008, 17009];\n\nif (_this) then {\n    if (GVAR(currentUnit) != 1) then {\n        ctrlSetText [17000, \"Meters\"];\n    } else {\n        ctrlSetText [17000, \"Yards\"];\n    };\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 170031);\n    [] call FUNC(update_c1_ballistic_coefficient_data);\n};\n",
        "functionName": "ace_atragmx_fnc_show_c1_ballistic_coefficient_data"
      },
      {
        "fileName": "fnc_show_gun_ammo_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the gun ammo data controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_gun_ammo_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showGunAmmoData) = _this;\n\n{ctrlShow [_x, _this]} forEach [12000, 120000, 12001, 120010, 12002, 120020, 12003, 120030, 12004, 120040, 12005, 120050, 12006, 120060, 120061, 12007, 12008, 12009, 12010, 12011];\n\nif (_this) then {\n    [] call FUNC(update_gun_ammo_data);\n};\n",
        "functionName": "ace_atragmx_fnc_show_gun_ammo_data"
      },
      {
        "fileName": "fnc_show_gun_list.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the gun list controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_gun_list\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showGunList) = _this;\n\n{ctrlShow [_x, _this]} forEach [6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007];\n\nif (_this) then {\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 6002);\n    lbSetCurSel [6000, GVAR(currentGun)];\n};\n",
        "functionName": "ace_atragmx_fnc_show_gun_list"
      },
      {
        "fileName": "fnc_show_main_page.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the main menu controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_main_page\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showMainPage) = _this;\n\n{ctrlShow [_x, _this]} forEach [10, 100, 11, 110, 12, 120, 13, 130, 14, 140, 20, 200, 21, 210, 22, 220, 23, 230, 30, 300, 31, 310, 32, 320, 33, 330, 34, 340, 40, 400, 401, 402, 403, 41, 410, 411, 412, 42, 420,\n                                500, 501, 502, 503, 600, 601, 602, 603, 1000, 1001, 1002, 1003, 1004, 2000, 2001, 3000, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008];\n\nif (_this) then {\n    if (GVAR(showCoriolis)) then {\n        ctrlSetText [4003, \"Hold\"];\n        ctrlSetText [4004, \"Cor\"];\n        ctrlSetText [4005, \"Spin\"];\n        {ctrlShow [_x, false]} forEach [402, 4006, 4007];\n    } else {\n        ctrlSetText [4003, \"Abs\"];\n        ctrlSetText [4004, \"Rel\"];\n        ctrlSetText [4005, \"Cur\"];\n        private _visible = (GVAR(currentScopeUnit) == 3);\n         {ctrlShow [_x, _visible]} forEach [401, 402, 411, 412, 4004, 4005, 4006, 4007];\n    };\n    if (GVAR(atmosphereModeTBH)) then {\n        {ctrlShow [_x, false]} forEach [23, 230];\n    } else {\n        {ctrlShow [_x, false]} forEach [21, 210, 22, 220];\n    };\n    if (GVAR(currentScopeUnit) != 3) then {\n        {ctrlShow [_x, false]} forEach [2001];\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_show_main_page"
      },
      {
        "fileName": "fnc_show_muzzle_velocity_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the muzzle velocity data controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_muzzle_velocity_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showMuzzleVelocityData) = _this;\n\n{ctrlShow [_x, _this]} forEach [16000, 16001, 160021, 160022, 160023, 160024, 160025, 160026, 160027, 160031, 160032, 160033, 160034, 160035, 160036, 160037, 16004, 16005, 16006, 16007, 16008, 16009];\n\nif (_this) then {\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 160031);\n    [] call FUNC(update_muzzle_velocity_data);\n};\n",
        "functionName": "ace_atragmx_fnc_show_muzzle_velocity_data"
      },
      {
        "fileName": "fnc_show_range_card_setup.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the range card setup controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_range_card_setup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showRangeCardSetup) = _this;\n\n{ctrlShow [_x, _this]} forEach [10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009];\n\nif (_this) then {\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 10006);\n\n    ctrlSetText [10003, Str(Round(GVAR(rangeCardStartRange)))];\n    ctrlSetText [10004, Str(Round(GVAR(rangeCardEndRange)))];\n    ctrlSetText [10005, Str(Round(GVAR(rangeCardIncrement)))];\n};\n",
        "functionName": "ace_atragmx_fnc_show_range_card_setup"
      },
      {
        "fileName": "fnc_show_range_card.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the range card controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_range_card\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showRangeCard) = _this;\n\n{ctrlShow [_x, _this]} forEach [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007];\n",
        "functionName": "ace_atragmx_fnc_show_range_card"
      },
      {
        "fileName": "fnc_show_solution_setup.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the solution setup controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_solution_setup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showSolutionSetup) = _this;\n\n{ctrlShow [_x, _this]} forEach [15000, 15001, 15002, 15003, 15004, 15005, 15006, 15007, 15008, 15009, 15010, 15011, 15012];\n",
        "functionName": "ace_atragmx_fnc_show_solution_setup"
      },
      {
        "fileName": "fnc_show_target_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the target data controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_target_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showTargetData) = _this;\n\n{ctrlShow [_x, _this]} forEach [14000, 140000, 14001, 140010, 14002, 141020, 140020, 141021, 140021, 14003, 140030, 14004, 140040, 141040, 141041, 140041, 14005, 140050, 140051, 14006, 140060, 140061, 14007, 14008, 14009, 14010, 14011];\n\nif (_this) then {\n    [] call FUNC(update_target_data);\n};\n",
        "functionName": "ace_atragmx_fnc_show_target_data"
      },
      {
        "fileName": "fnc_show_target_range_assist.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the target range assist controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_target_range_assist\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showTargetRangeAssist) = _this;\n\n{ctrlShow [_x, _this]} forEach [7000, 7001, 7002, 7003, 7004, 7005, 7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017, 7018, 7019, 7020];\n\nif (_this) then {\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 7018);\n    ctrlSetText [7012, Str(parseNumber(ctrlText 320))];\n    ctrlSetText [7013, Str(parseNumber(ctrlText 340))];\n\n    if (GVAR(currentUnit) == 1) then {\n        ctrlSetText [7016, \"Yards\"];\n    } else {\n        ctrlSetText [7016, \"Meters\"];\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_show_target_range_assist"
      },
      {
        "fileName": "fnc_show_target_speed_assist_timer.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the target speed assist timer controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_target_speed_assist_timer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showTargetSpeedAssistTimer) = _this;\n\n{ctrlShow [_x, _this]} forEach [9000, 9001, 9002];\n",
        "functionName": "ace_atragmx_fnc_show_target_speed_assist_timer"
      },
      {
        "fileName": "fnc_show_target_speed_assist.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the target speed assist controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_target_speed_assist\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showTargetSpeedAssist) = _this;\n\n{ctrlShow [_x, _this]} forEach [8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015];\n\nif (_this) then {\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 8012);\n\n    ctrlSetText [8004, Str(Round((GVAR(targetRange) select GVAR(currentTarget))))];\n\n    if (GVAR(currentUnit) == 1) then {\n        ctrlSetText [8008, \"Yards\"];\n    } else {\n        ctrlSetText [8008, \"Meters\"];\n    };\n\n    if (GVAR(currentUnit) == 2) then {\n        ctrlSetText [8011, \"m/s\"];\n    } else {\n        ctrlSetText [8011, \"mph\"];\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_show_target_speed_assist"
      },
      {
        "fileName": "fnc_show_truing_drop.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows/Hides the truing drop controls\n *\n * Arguments:\n * visible - <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_show_truing_drop\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showTruingDrop) = _this;\n\n{ctrlShow [_x, _this]} forEach [18000, 18001, 18002, 18003, 18004, 18005, 18006, 18007, 18008, 18009, 18010, 18011, 18012, 18013, 18014, 18015, 18016, 18017, 18018, 18019, 18020];\n\nif (_this) then {\n    if (GVAR(currentUnit) == 2) then {\n        ctrlSetText [18000, format[\"ZR=%1meters\", Round(GVAR(workingMemory) select 2)]];\n    } else {\n        ctrlSetText [18000, format[\"ZR=%1yards\", Round((GVAR(workingMemory) select 2) * 1.0936133)]];\n    };\n    private _dropUnit = GVAR(currentScopeUnit);\n    if (_dropUnit == 3) then {\n        switch (GVAR(currentScopeClickUnit)) do {\n            case 0: { _dropUnit = 1; };\n            case 1: { _dropUnit = 2; };\n            case 2: { _dropUnit = 0; };\n        };\n    };\n    switch (_dropUnit) do {\n        case 0: { ctrlSetText [18001, \"Drop=mils\"]; };\n        case 1: { ctrlSetText [18001, \"Drop=tmoa\"]; };\n        case 2: { ctrlSetText [18001, \"Drop=smoa\"]; };\n    };\n    false call FUNC(calculate_truing_drop);\n    call FUNC(update_truing_drop_selection);\n};\n",
        "functionName": "ace_atragmx_fnc_show_truing_drop"
      },
      {
        "fileName": "fnc_sord.sqf",
        "content": "/*\n * Author: Ruthberg\n * Handles incoming data packets from the Vectronix Vector LRF\n *\n * Arguments:\n * 0: Slope distance (Meters) <NUMBER>\n * 1: Azimuth (Degrees) <NUMBER>\n * 2: Inclination (Degrees) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1000, 45, 1] call ace_microdagr_fnc_recieveRangefinderData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!GVAR(initialised)) exitWith {};\n\nparams [\"_slopeDistance\", \"_azimuth\", \"_inclination\"];\n\nGVAR(targetRangeDirtyFlag) = (round(_slopeDistance) != (GVAR(targetRange) select GVAR(currentTarget)));\n\nGVAR(inclinationAngle) set [GVAR(currentTarget), round(_inclination)];\nGVAR(directionOfFire) set [GVAR(currentTarget), round(_azimuth)];\nGVAR(targetRange) set [GVAR(currentTarget), round(_slopeDistance)];\n",
        "functionName": "ace_atragmx_fnc_sord"
      },
      {
        "fileName": "fnc_store_gun_list.sqf",
        "content": "/*\n * Author: Ruthberg\n * Saves the persistent gun list entries into profileNamespace\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_store_user_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _gunList = [];\n{\n    if (_x select 20) then {\n        _gunList pushBack _x;\n    };\n} forEach GVAR(gunList);\n\nprofileNamespace setVariable [\"ACE_ATragMX_gunList\", _gunList];\n",
        "functionName": "ace_atragmx_fnc_store_gun_list"
      },
      {
        "fileName": "fnc_store_user_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Saves user data into profileNamespace\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_store_user_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprofileNamespace setVariable [\"ACE_ATragMX_profileNamespaceVersion\", ATRAGMX_PROFILE_NAMESPACE_VERSION];\n\nprofileNamespace setVariable [\"ACE_ATragMX_currentUnit\", GVAR(currentUnit)];\nprofileNamespace setVariable [\"ACE_ATragMX_currentGun\", GVAR(currentGun)];\nprofileNamespace setVariable [\"ACE_ATragMX_currentTarget\", GVAR(currentTarget)];\n\nprofileNamespace setVariable [\"ACE_ATragMX_atmosphereModeTBH\", GVAR(atmosphereModeTBH)];\nprofileNamespace setVariable [\"ACE_ATragMX_altitude\", GVAR(altitude)];\nprofileNamespace setVariable [\"ACE_ATragMX_temperature\", GVAR(temperature)];\nprofileNamespace setVariable [\"ACE_ATragMX_barometricPressure\", GVAR(barometricPressure)];\nprofileNamespace setVariable [\"ACE_ATragMX_relativeHumidity\", GVAR(relativeHumidity)];\n\nprofileNamespace setVariable [\"ACE_ATragMX_showWind2\", GVAR(showWind2)];\nprofileNamespace setVariable [\"ACE_ATragMX_showCoriolis\", GVAR(showCoriolis)];\nprofileNamespace setVariable [\"ACE_ATragMX_latitude\", GVAR(latitude)];\nprofileNamespace setVariable [\"ACE_ATragMX_directionOfFire\", GVAR(directionOfFire)];\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed1\", GVAR(windSpeed1)];\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed2\", GVAR(windSpeed2)];\nprofileNamespace setVariable [\"ACE_ATragMX_windDirection\", GVAR(windDirection)];\nprofileNamespace setVariable [\"ACE_ATragMX_inclinationAngle\", GVAR(inclinationAngle)];\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeed\", GVAR(targetSpeed)];\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeedDirection\", GVAR(targetSpeedDirection)];\nprofileNamespace setVariable [\"ACE_ATragMX_targetRange\", GVAR(targetRange)];\n\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardStartRange\", GVAR(rangeCardStartRange)];\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardEndRange\", GVAR(rangeCardEndRange)];\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardIncrement\", GVAR(rangeCardIncrement)];\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardCurrentColumn\", GVAR(rangeCardCurrentColumn)];\n",
        "functionName": "ace_atragmx_fnc_store_user_data"
      },
      {
        "fileName": "fnc_target_speed_assist_timer.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows and starts the target speed assist timer\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_target_speed_assist_timer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif !(ctrlVisible 9000) then {\n\n    false call FUNC(show_target_speed_assist);\n    true call FUNC(show_target_speed_assist_timer);\n\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 9002);\n\n    [{\n        params [\"_args\"];\n        _args params [\"_startTime\"];\n\n        if (!(GVAR(speedAssistTimer))) exitWith {\n            GVAR(speedAssistTimer) = true;\n\n            ctrlSetText [8006, Str(Round((CBA_missionTime - _startTime) * 10) / 10)];\n\n            [] call FUNC(calculate_target_speed_assist);\n\n            false call FUNC(show_target_speed_assist_timer);\n            true call FUNC(show_target_speed_assist);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n        };\n\n        ctrlSetText [9001, Str(Round((CBA_missionTime - _startTime) * 10) / 10)];\n\n    }, 0.1, [CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_atragmx_fnc_target_speed_assist_timer"
      },
      {
        "fileName": "fnc_toggle_atmo_env_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the atmospheric data screen on/off\n *\n * Arguments:\n * Apply new data? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_atmo_env_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 13000) then {\n    false call FUNC(show_atmo_env_data);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        GVAR(truingDropDropData) set [0, 0];\n        [true, true] call FUNC(recalculate_muzzle_velocity);\n        call FUNC(calculate_target_solution);\n    } else {\n        call FUNC(update_atmo_env_data);\n    };\n} else {\n    true call FUNC(show_atmo_env_data);\n    false call FUNC(show_main_page);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_atmo_env_data"
      },
      {
        "fileName": "fnc_toggle_c1_ballistic_coefficient_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the c1 ballistic coefficient data screen on/off\n *\n * Arguments:\n * Apply new data? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_c1_ballistic_coefficient_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!(missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) exitWith {};\n\nif (ctrlVisible 17000) then {\n    false call FUNC(show_c1_ballistic_coefficient_data);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        [true, true] call FUNC(recalculate_c1_ballistic_coefficient);\n        call FUNC(calculate_target_solution);\n    } else {\n        call FUNC(update_c1_ballistic_coefficient_data);\n    };\n} else {\n    true call FUNC(show_c1_ballistic_coefficient_data);\n    false call FUNC(show_main_page);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_c1_ballistic_coefficient_data"
      },
      {
        "fileName": "fnc_toggle_coriolis.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the coriolis and spin drift output on/off\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_toggle_coriolis\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(showCoriolis) = !GVAR(showCoriolis);\ntrue call FUNC(show_main_page);\n",
        "functionName": "ace_atragmx_fnc_toggle_coriolis"
      },
      {
        "fileName": "fnc_toggle_gun_ammo_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the gun ammo data screen on/off\n *\n * Arguments:\n * Apply new data? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_gun_ammo_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 12000) then {\n    false call FUNC(show_gun_ammo_data);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        GVAR(truingDropDropData) set [0, 0];\n        call FUNC(update_zero_range);\n        call FUNC(calculate_target_solution);\n    } else {\n        call FUNC(update_gun_ammo_data);\n    };\n} else {\n    true call FUNC(show_gun_ammo_data);\n    false call FUNC(show_main_page);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_gun_ammo_data"
      },
      {
        "fileName": "fnc_toggle_gun_list.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the gun list screen on/off\n *\n * Arguments:\n * change gun? <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * false call ace_atragmx_fnc_toggle_gun_list\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 6000) then {\n    false call FUNC(show_gun_list);\n    true call FUNC(show_main_page);\n\n    if (_this) then {\n        [lbCurSel 6000, true, true] call FUNC(change_gun);\n    };\n} else {\n    false call FUNC(show_main_page);\n    true call FUNC(show_gun_list);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_gun_list"
      },
      {
        "fileName": "fnc_toggle_muzzle_velocity_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the muzzle velocity data screen on/off\n *\n * Arguments:\n * Apply new data? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_muzzle_velocity_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!(missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) exitWith {};\n\nif (ctrlVisible 16000) then {\n    false call FUNC(show_muzzle_velocity_data);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        [true, true] call FUNC(recalculate_muzzle_velocity);\n        call FUNC(calculate_target_solution);\n    } else {\n        call FUNC(update_muzzle_velocity_data);\n    };\n} else {\n    true call FUNC(show_muzzle_velocity_data);\n    false call FUNC(show_main_page);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_muzzle_velocity_data"
      },
      {
        "fileName": "fnc_toggle_option_menu.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the option menu on/off\n *\n * Arguments:\n * open menu item <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_option_menu\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 3001) then {\n    if (_this) then {\n        private _optionID = lbCurSel 3002;\n        if (_optionID > 0) then {\n            ctrlShow [3001, false];\n            ctrlShow [3002, false];\n            [_optionID] call FUNC(evaluate_option_menu_input);\n        };\n    } else {\n        ctrlShow [3001, false];\n        ctrlShow [3002, false];\n    };\n} else {\n    lbClear 3002;\n\n    lbAdd [3002, \"Accuracy 1st\"];\n    lbAdd [3002, \"Muz Vel Table\"];\n    lbAdd [3002, \"Drag Coef Table\"];\n    lbAdd [3002, \"Target Speed Est\"];\n    lbAdd [3002, \"Target Range Est\"];\n    lbAdd [3002, \"Truing Drop\"];\n    if (GVAR(showCoriolis)) then {\n        lbAdd [3002, \"Show Coriolis *\"];\n    } else {\n        lbAdd [3002, \"Show Coriolis\"];\n    };\n    lbAdd [3002, \"Set Clicks\"];\n    lbAdd [3002, \"Gun Note\"];\n\n    lbSetCurSel [3002, 0];\n\n    ctrlShow [3001, true];\n    ctrlShow [3002, true];\n\n    ctrlSetFocus ((uiNamespace getVariable [\"ATragMX_Display\", displayNull]) displayCtrl 3002);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_option_menu"
      },
      {
        "fileName": "fnc_toggle_range_card_setup.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the range card setup screen on/off\n *\n * Arguments:\n * Apply new range card settings <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_range_card_setup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 10000) then {\n    false call FUNC(show_range_card_setup);\n    true call FUNC(show_range_card);\n\n    if (_this == 1) then {\n        GVAR(rangeCardStartRange) = 0 max Round(parseNumber(ctrlText 10003)) min 3000;\n        GVAR(rangeCardEndRange) = 0 max Round(parseNumber(ctrlText 10004)) min 3000;\n        GVAR(rangeCardIncrement) = 1 max Round(parseNumber(ctrlText 10005)) min 3000;\n\n        [] call FUNC(calculate_range_card);\n        [] call FUNC(update_range_card);\n    };\n} else {\n    false call FUNC(show_range_card);\n    true call FUNC(show_range_card_setup);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_range_card_setup"
      },
      {
        "fileName": "fnc_toggle_range_card.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the range card screen on/off\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_toggle_range_card\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 5006) then {\n    false call FUNC(show_range_card);\n    true call FUNC(show_main_page);\n} else {\n    false call FUNC(show_main_page);\n    true call FUNC(show_range_card);\n\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 5001);\n\n    [] call FUNC(calculate_range_card);\n    [] call FUNC(update_range_card);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_range_card"
      },
      {
        "fileName": "fnc_toggle_solution_setup.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the solution setup screen on/off\n *\n * Arguments:\n * Apply new data? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_solution_setup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 15000) then {\n    false call FUNC(show_solution_setup);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        GVAR(currentScopeClickUnit) = GVAR(currentScopeClickUnitTemp);\n        GVAR(currentScopeClickNumber) = GVAR(currentScopeClickNumberTemp);\n        GVAR(workingMemory) set [7, GVAR(currentScopeClickUnit)];\n        GVAR(workingMemory) set [8, GVAR(currentScopeClickNumber)];\n       [] call FUNC(update_scope_unit);\n       [] call FUNC(update_result);\n    };\n} else {\n    true call FUNC(show_solution_setup);\n    false call FUNC(show_main_page);\n\n    GVAR(currentScopeClickUnitTemp) = GVAR(currentScopeClickUnit);\n    GVAR(currentScopeClickNumberTemp) = GVAR(currentScopeClickNumber);\n\n    [] call FUNC(update_solution_setup);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_solution_setup"
      },
      {
        "fileName": "fnc_toggle_target_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the target data screen on/off\n *\n * Arguments:\n * Apply new data? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_target_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 14000) then {\n    false call FUNC(show_target_data);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        call FUNC(calculate_target_solution);\n    } else {\n        call FUNC(update_target_data);\n    };\n} else {\n    true call FUNC(show_target_data);\n    false call FUNC(show_main_page);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_target_data"
      },
      {
        "fileName": "fnc_toggle_target_range_assist.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the target range assist screen on/off\n *\n * Arguments:\n * update range? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_target_range_assist\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 7000) then {\n    false call FUNC(show_target_range_assist);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        ctrlSetText [320, Str(parseNumber(ctrlText 7012))];\n        ctrlSetText [140040, Str(parseNumber(ctrlText 7012))];\n        ctrlSetText [340, Str(parseNumber(ctrlText 7013))];\n        ctrlSetText [140060, Str(parseNumber(ctrlText 7013))];\n        [] call FUNC(calculate_target_solution);\n    };\n} else {\n    false call FUNC(show_main_page);\n    true call FUNC(show_target_range_assist);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_target_range_assist"
      },
      {
        "fileName": "fnc_toggle_target_speed_assist.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the target speed assist screen on/off\n *\n * Arguments:\n * update speed? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_target_speed_assist\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (ctrlVisible 8000) then {\n    false call FUNC(show_target_speed_assist);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        [] call FUNC(calculate_target_speed_assist);\n        private _targetSpeed = parseNumber(ctrlText 8007);\n        if (_targetSpeed != 0) then {\n            ctrlSetText [330, Str(_targetSpeed)];\n            ctrlSetText [140050, Str(_targetSpeed)];\n            [] call FUNC(calculate_target_solution);\n        };\n    };\n} else {\n    false call FUNC(show_main_page);\n    true call FUNC(show_target_speed_assist);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_target_speed_assist"
      },
      {
        "fileName": "fnc_toggle_truing_drop.sqf",
        "content": "/*\n * Author: Ruthberg\n * Toggles the truing drop screen on/off\n *\n * Arguments:\n * Apply new data? <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 1 call ace_atragmx_fnc_toggle_truing_drop\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!(missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) exitWith {};\n\nif (ctrlVisible 18000) then {\n    false call FUNC(show_truing_drop);\n    true call FUNC(show_main_page);\n\n    if (_this == 1) then {\n        if (GVAR(truingDropMode) == 0) then {\n            [GVAR(temperature), GVAR(truingDropMuzzleVelocity)] call FUNC(insert_muzzle_velocity_data);\n            [false, true] call FUNC(recalculate_muzzle_velocity);\n        } else {\n            [GVAR(truingDropRangeData) select 0, GVAR(truingDropRangeData) select 1, GVAR(truingDropC1)] call FUNC(insert_c1_ballistic_coefficient_data);\n            [false, true] call FUNC(recalculate_c1_ballistic_coefficient);\n        };\n        call FUNC(calculate_target_solution);\n    } else {\n        call FUNC(update_truing_drop_data);\n    };\n} else {\n    false call FUNC(show_main_page);\n    true call FUNC(show_truing_drop);\n};\n",
        "functionName": "ace_atragmx_fnc_toggle_truing_drop"
      },
      {
        "fileName": "fnc_trim_gun_name.sqf",
        "content": "/*\n * Author: Ruthberg\n * Trims the gun name input field\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_trim_gun_name\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nctrlSetText [11001, (ctrlText 11001) select [0, 14]];\n",
        "functionName": "ace_atragmx_fnc_trim_gun_name"
      },
      {
        "fileName": "fnc_true_c1_ballistic_coefficient.sqf",
        "content": "/*\n * Author: Ruthberg\n * Trues the c1 ballistic coefficient\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_true_c1_ballistic_coefficient\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _referenceDrop = GVAR(truingDropDropData) select 0;\nprivate _actualDrop = GVAR(truingDropDropData) select 2;\n\nif (Round(_actualDrop * 10) / 10 == Round(_referenceDrop * 10) / 10) exitWith {};\n\nprivate _step = 0.01;\nif (_actualDrop > _referenceDrop) then {\n    _step = -0.01;\n};\n\nprivate _solutionInput = +GVAR(targetSolutionInput);\n_solutionInput set [ 8, 200];\n_solutionInput set [13, GVAR(truingDropRangeData) select 1];\nprivate _c1 = _solutionInput select 14;\n\n{\n    _step = _step * _x;\n    while { _actualDrop * _step < _referenceDrop * _step } do {\n        _c1 = _c1 + _step;\n        _solutionInput set [14, _c1];\n        private _result = _solutionInput call FUNC(calculate_solution);\n        _referenceDrop = (_result select 0);\n    };\n} forEach [1, -0.1];\n\nGVAR(truingDropC1) = _c1;\n",
        "functionName": "ace_atragmx_fnc_true_c1_ballistic_coefficient"
      },
      {
        "fileName": "fnc_true_muzzle_velocity.sqf",
        "content": "/*\n * Author: Ruthberg\n * Trues the muzzle velocity\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_true_muzzle_velocity\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _referenceDrop = GVAR(truingDropDropData) select 0;\nprivate _actualDrop = GVAR(truingDropDropData) select 1;\n\nif (Round(_actualDrop * 10) / 10 == Round(_referenceDrop * 10) / 10) exitWith {};\n\nprivate _step = 10;\nif (_actualDrop > _referenceDrop) then {\n    _step = -10;\n};\n\nprivate _solutionInput = +GVAR(targetSolutionInput);\n_solutionInput set [ 8, 200];\n_solutionInput set [13, GVAR(truingDropRangeData) select 0];\nprivate _muzzleVelocity = _solutionInput select 4;\n\n{\n    _step = _step * _x;\n    while { _actualDrop * _step < _referenceDrop * _step } do {\n        _muzzleVelocity = _muzzleVelocity + _step;\n        _solutionInput set [4, _muzzleVelocity];\n        private _result = _solutionInput call FUNC(calculate_solution);\n        _referenceDrop = (_result select 0);\n    };\n} forEach [1, -0.1];\n\nGVAR(truingDropMuzzleVelocity) = _muzzleVelocity;\n",
        "functionName": "ace_atragmx_fnc_true_muzzle_velocity"
      },
      {
        "fileName": "fnc_update_atmo_env_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the atmospheric data fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_atmo_env_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13007);\n\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [130040, Str(Round(GVAR(temperature) * 10) / 10)];\n} else {\n    ctrlSetText [130040, Str(Round((GVAR(temperature) * 1.8 + 32) * 10) / 10)];\n};\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [130050, Str(Round(GVAR(barometricPressure)))];\n} else {\n    ctrlSetText [130050, Str(Round(GVAR(barometricPressure) / 33.8638866667 * 100) / 100)];\n};\nctrlSetText [130060, Str(Round(GVAR(relativeHumidity) * 100 * 10) / 10)];\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [130030, Str(Round(GVAR(altitude)))];\n} else {\n    ctrlSetText [130030, Str(Round(GVAR(altitude) * 3.2808399))];\n};\n\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [13003, \"Altitude (m)\"];\n    ctrlSetText [13004, \"temperature (C)\"];\n    ctrlSetText [13005, \"Barom Pres (milibars)\"];\n} else {\n    ctrlSetText [13003, \"Altitude (ft)\"];\n    ctrlSetText [13004, \"temperature (F)\"];\n    ctrlSetText [13005, \"Barom Pres (in.merc.)\"];\n};\n",
        "functionName": "ace_atragmx_fnc_update_atmo_env_data"
      },
      {
        "fileName": "fnc_update_atmo_selection.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the atmospheric data input method\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_atmo_selection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13001) ctrlEnable true;\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13002) ctrlEnable true;\n\nif (GVAR(atmosphereModeTBH)) then {\n    ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13002) ctrlEnable false;\n    {ctrlShow [_x, false]} forEach [13003, 130030];\n    {ctrlShow [_x, true]} forEach [13005, 130050, 13006, 130060];\n} else {\n    ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13001) ctrlEnable false;\n    {ctrlShow [_x, false]} forEach [13005, 130050, 13006, 130060];\n    {ctrlShow [_x, true]} forEach [13003, 130030];\n};\n\n[] call FUNC(update_atmo_env_data);\n",
        "functionName": "ace_atragmx_fnc_update_atmo_selection"
      },
      {
        "fileName": "fnc_update_atmosphere.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates all atmosphere column input fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_atmosphere\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [200, Str(Round(GVAR(temperature) * 10) / 10)];\n} else {\n    ctrlSetText [200, Str(Round((GVAR(temperature) * 1.8 + 32) * 10) / 10)];\n};\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [210, Str(Round(GVAR(barometricPressure)))];\n} else {\n    ctrlSetText [210, Str(Round(GVAR(barometricPressure) / 33.8638866667 * 100) / 100)];\n};\nctrlSetText [220, Str(Round(GVAR(relativeHumidity) * 100 * 10) / 10)];\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [230, Str(Round(GVAR(altitude)))];\n} else {\n    ctrlSetText [230, Str(Round(GVAR(altitude) * 3.2808399))];\n};\n",
        "functionName": "ace_atragmx_fnc_update_atmosphere"
      },
      {
        "fileName": "fnc_update_c1_ballistic_coefficient_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the c1 ballistic coefficient data fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_c1_ballistic_coefficient_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Distances\nif (GVAR(currentUnit) != 1) then {\n    {ctrlSetText [_x, Str(Round(((GVAR(workingMemory) select 19) select _forEachIndex) select 0))]} forEach [170021, 170022, 170023, 170024, 170025, 170026, 170027];\n} else {\n    {ctrlSetText [_x, Str(Round((((GVAR(workingMemory) select 19) select _forEachIndex) select 0) * 1.0936133))]} forEach [170021, 170022, 170023, 170024, 170025, 170026, 170027];\n};\n// Ballistic coefficients\n{ctrlSetText [_x, Str(Round((((GVAR(workingMemory) select 19) select _forEachIndex) select 1) * 1000) / 1000)]} forEach [170031, 170032, 170033, 170034, 170035, 170036, 170037];\n",
        "functionName": "ace_atragmx_fnc_update_c1_ballistic_coefficient_data"
      },
      {
        "fileName": "fnc_update_gun_ammo_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the gun ammo data fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_gun_ammo_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 12008);\n\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [120000, Str(Round((GVAR(workingMemory) select 5) / 2.54 * 100) / 100)];\n} else {\n    ctrlSetText [120000, Str(Round((GVAR(workingMemory) select 5) * 100) / 100)];\n};\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [120010, Str(Round((GVAR(workingMemory) select 12) * 15.4323584))];\n} else {\n    ctrlSetText [120010, Str(Round(GVAR(workingMemory) select 12))];\n};\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [120020, Str(Round((GVAR(workingMemory) select 13) / 10 / 2.54 * 1000) / 1000)];\n} else {\n    ctrlSetText [120020, Str(Round((GVAR(workingMemory) select 13) / 10 * 1000) / 1000)];\n};\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    ctrlSetText [120030, Str(Round((GVAR(workingMemory) select 15) * 1000) / 1000)];\n} else {\n    ctrlSetText [120030, Str(Round((GVAR(workingMemory) select 4) * -1000 * 1000) / 1000)];\n};\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [120040, Str(Round((GVAR(workingMemory) select 14) / 2.54 * 10) / 10)];\n} else {\n    ctrlSetText [120040, Str(Round((GVAR(workingMemory) select 14) * 100) / 100)];\n};\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [120050, Str(Round((GVAR(workingMemory) select 1) * 3.2808399))];\n} else {\n    ctrlSetText [120050, Str(Round(GVAR(workingMemory) select 1))];\n};\nif (GVAR(currentUnit) == 1) then {\n    ctrlSetText [120060, Str(Round((GVAR(workingMemory) select 2) * 1.0936133))];\n} else {\n    ctrlSetText [120060, Str(Round(GVAR(workingMemory) select 2))];\n};\nif (GVAR(currentUnit) == 0) then {\n    ctrlSetText [120061, \"*\"];\n} else {\n    ctrlSetText [120061, \"\"];\n};\n\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [12000, \"Bore       (cm)\"];\n    ctrlSetText [12001, \"Bullet Weight (grams)\"];\n    ctrlSetText [12002, \"Bullet Diam  (cm)\"];\n    ctrlSetText [12004, \"Rifle Twist (cm/trn)\"];\n    ctrlSetText [12005, \"Muzzle Velocity (m/s)\"];\n} else {\n    ctrlSetText [12000, \"Bore       (inches)\"];\n    ctrlSetText [12001, \"Bullet Weight (grains)\"];\n    ctrlSetText [12002, \"Bullet Diam  (inches)\"];\n    ctrlSetText [12004, \"Rifle Twist (in/trn)\"];\n    ctrlSetText [12005, \"Muzzle Velocity (feet/sec)\"];\n};\n\nif (GVAR(currentUnit) == 1) then {\n    ctrlSetText [12006, \"Zero Range (yards)\"];\n} else {\n    ctrlSetText [12006, \"Zero Range (meters)\"];\n};\n",
        "functionName": "ace_atragmx_fnc_update_gun_ammo_data"
      },
      {
        "fileName": "fnc_update_gun.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates all gun column input fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_gun\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nctrlSetText [1000, GVAR(workingMemory) select 0];\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [100, Str(Round((GVAR(workingMemory) select 5) / 2.54 * 100) / 100)];\n} else {\n    ctrlSetText [100, Str(Round((GVAR(workingMemory) select 5) * 100) / 100)];\n};\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [110, Str(Round((GVAR(workingMemory) select 12) * 15.4323584))];\n} else {\n    ctrlSetText [110, Str(Round(GVAR(workingMemory) select 12))];\n};\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    ctrlSetText [120, Str(Round((GVAR(workingMemory) select 15) * 1000) / 1000)];\n} else {\n    ctrlSetText [120, Str(Round((GVAR(workingMemory) select 4) * -1000 * 1000) / 1000)];\n};\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [130, Str(Round((GVAR(workingMemory) select 1) * 3.2808399))];\n} else {\n    ctrlSetText [130, Str(Round(GVAR(workingMemory) select 1))];\n};\nswitch (GVAR(currentUnit)) do {\n    case 0: {\n        ctrlSetText [140, format[\"*%1\", Round(GVAR(workingMemory) select 2)]];\n    };\n    case 1: {\n        ctrlSetText [140, Str(Round((GVAR(workingMemory) select 2) * 1.0936133))];\n    };\n    case 2: {\n        ctrlSetText [140, Str(Round(GVAR(workingMemory) select 2))];\n    };\n};\n[] call FUNC(update_scope_unit);\n",
        "functionName": "ace_atragmx_fnc_update_gun"
      },
      {
        "fileName": "fnc_update_inclination_angle.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the inclination angle input fields\n *\n * Arguments:\n * Reference input field ID <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 0 call ace_atragmx_fnc_update_inclination_angle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _inclinationAngleCosine = 0.5 max parseNumber(ctrlText 140041) min 1;\nprivate _inclinationAngleDegree = -60 max parseNumber(ctrlText 140040) min 60;\n\nif (_this == 0) then {\n    ctrlSetText [140040, Str(round(acos(_inclinationAngleCosine)))];\n} else {\n    ctrlSetText [140041, Str(round(cos(_inclinationAngleDegree) * 100) / 100)];\n};\n",
        "functionName": "ace_atragmx_fnc_update_inclination_angle"
      },
      {
        "fileName": "fnc_update_muzzle_velocity_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the muzzle velocity data fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_muzzle_velocity_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(currentUnit) == 2) then {\n    // Temperatures\n    {ctrlSetText [_x, Str(Round((((GVAR(workingMemory) select 18) select _forEachIndex) select 0) * 10) / 10)]} forEach [160021, 160022, 160023, 160024, 160025, 160026, 160027];\n    // Muzzle velocities\n    {ctrlSetText [_x, Str(Round(((GVAR(workingMemory) select 18) select _forEachIndex) select 1))]} forEach [160031, 160032, 160033, 160034, 160035, 160036, 160037];\n} else {\n    // Temperatures\n    {ctrlSetText [_x, Str(Round(((((GVAR(workingMemory) select 18) select _forEachIndex) select 0) * 1.8 + 32) * 10) / 10)]} forEach [160021, 160022, 160023, 160024, 160025, 160026, 160027];\n    // Muzzle velocities\n    {ctrlSetText [_x, Str(Round((((GVAR(workingMemory) select 18) select _forEachIndex) select 1) * 3.2808399))]} forEach [160031, 160032, 160033, 160034, 160035, 160036, 160037];\n};\n",
        "functionName": "ace_atragmx_fnc_update_muzzle_velocity_data"
      },
      {
        "fileName": "fnc_update_range_card.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the range card listbox content\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_range_card\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _lastColumnOutput = \"\";\n\nif (GVAR(showWind2) && GVAR(rangeCardCurrentColumn) == 0) then {\n    ctrlSetText [5006, \"Wind2\"];\n} else {\n    ctrlSetText [5006, (GVAR(rangeCardLastColumns) select GVAR(rangeCardCurrentColumn))];\n};\n\nif (GVAR(currentUnit) == 1) then {\n    ctrlSetText [5003, \"Yards\"];\n} else {\n    ctrlSetText [5003, \"Meters\"];\n};\n\nlnbClear 5007;\n\nprivate _speedOfSound = GVAR(temperature) call EFUNC(weather,calculateSpeedOfSound);\n\n{\n    private _range = _x select 0;\n    private _elevation = _x select 1;\n    private _windage1 = (_x select 2) select 0;\n    private _windage2 = (_x select 2) select 1;\n    private _lead = _x select 3;\n    private _TOF =  _x select 4;\n    private _velocity = _x select 5;\n    private _kineticEnergy = _x select 6;\n\n    switch (GVAR(currentScopeUnit)) do {\n        case 0: {\n            _elevation = MOA_TO_MRAD(_elevation);\n            _windage1 = MOA_TO_MRAD(_windage1);\n            _windage2 = MOA_TO_MRAD(_windage2);\n        };\n        case 2: {\n            _elevation = _elevation * 1.047;\n            _windage1 = _windage1 * 1.047;\n            _windage2 = _windage2 * 1.047;\n        };\n        case 3: {\n            private _clickSize = [1, 1 / 1.047, MRAD_TO_MOA(1)] select (GVAR(workingMemory) select 7);\n            private _clickNumber = GVAR(workingMemory) select 8;\n            private _clickInterval = _clickSize / _clickNumber;\n\n            _elevation = Round(_elevation / _clickInterval);\n            _windage1 = Round(_windage1 / _clickInterval);\n            _windage2 = Round(_windage2 / _clickInterval);\n        };\n    };\n\n    private _elevationOutput = Str(Round(_elevation * 100) / 100);\n    private _windageOutput = Str(Round(_windage1 * 100) / 100);\n\n    private _rangeOutput = Str(_range);\n    if (_velocity < _speedOfSound) then {\n        _rangeOutput = _rangeOutput + \"*\";\n    };\n\n    if (GVAR(currentUnit) == 1) then {\n        _velocity = _velocity * 3.2808399;\n    };\n\n    switch (GVAR(rangeCardCurrentColumn)) do {\n        case 0: {\n            if (GVAR(showWind2)) then {\n                _lastColumnOutput = Str(Round(_windage2 * 100) / 100);\n            } else {\n                _lastColumnOutput = Str(Round(_lead * 100) / 100);\n            };\n        };\n        case 1: {\n            _lastColumnOutput = Str(Round(_velocity));\n        };\n        case 2: {\n            _lastColumnOutput = Str(Round(_kineticEnergy));\n        };\n        case 3: {\n            _lastColumnOutput = Str(Round(_TOF * 100) / 100);\n        }\n    };\n\n    lnbAddRow [5007, [_rangeOutput, _elevationOutput, _windageOutput, _lastColumnOutput]];\n} forEach GVAR(rangeCardData);\n",
        "functionName": "ace_atragmx_fnc_update_range_card"
      },
      {
        "fileName": "fnc_update_relative_click_memory.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the relative click memory\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_relative_click_memory\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(workingMemory) set [10, (GVAR(elevationOutput) select GVAR(currentTarget))];\nGVAR(workingMemory) set [11, (GVAR(windage1Output) select GVAR(currentTarget))];\n\n[] call FUNC(update_result);\n",
        "functionName": "ace_atragmx_fnc_update_relative_click_memory"
      },
      {
        "fileName": "fnc_update_result.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the result input and output fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_result\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _elevationAbs = GVAR(elevationOutput) select GVAR(currentTarget);\nprivate _elevationRel = 0;\nprivate _elevationCur = 0;\nprivate _windageAbs = GVAR(windage1Output) select GVAR(currentTarget);\nprivate _windageRel = 0;\nprivate _windageCur = 0;\n\nprivate _wind2 = GVAR(windage2Output) select GVAR(currentTarget);\n\nif (GVAR(showCoriolis)) then {\n    _elevationRel = GVAR(verticalCoriolisOutput) select GVAR(currentTarget);\n    _windageRel = GVAR(horizontalCoriolisOutput) select GVAR(currentTarget);\n\n    _windageCur = GVAR(spinDriftOutput) select GVAR(currentTarget);\n} else {\n    _elevationCur = GVAR(workingMemory) select 10;\n    _windageCur = GVAR(workingMemory) select 11;\n\n    _elevationRel = _elevationAbs - _elevationCur;\n    _windageRel = _windageAbs - _windageCur;\n};\n\nprivate _lead = GVAR(leadOutput) select GVAR(currentTarget);\n\nswitch (GVAR(currentScopeUnit)) do {\n    case 0: {\n        _elevationAbs = MOA_TO_MRAD(_elevationAbs);\n        _windageAbs = MOA_TO_MRAD(_windageAbs);\n\n        _wind2 = MOA_TO_MRAD(_wind2);\n\n        _elevationRel = MOA_TO_MRAD(_elevationRel);\n        _windageRel = MOA_TO_MRAD(_windageRel);\n\n        _elevationCur = MOA_TO_MRAD(_elevationCur);\n        _windageCur = MOA_TO_MRAD(_windageCur);\n    };\n    case 2: {\n        _elevationAbs = _elevationAbs * 1.047;\n        _windageAbs = _windageAbs * 1.047;\n\n        _wind2 = _wind2 / 1.047;\n\n        _elevationRel = _elevationRel * 1.047;\n        _windageRel = _windageRel * 1.047;\n\n        _elevationCur = _elevationCur * 1.047;\n        _windageCur = _windageCur * 1.047;\n    };\n    case 3: {\n        private _clickSize = [1, 1 / 1.047, MRAD_TO_MOA(1)] select (GVAR(workingMemory) select 7);\n        private _clickNumber = GVAR(workingMemory) select 8;\n        private _clickInterval = _clickSize / _clickNumber;\n\n        _elevationAbs = Round(_elevationAbs / _clickInterval);\n        _windageAbs = Round(_windageAbs / _clickInterval);\n\n        _wind2 = Round(_wind2 / _clickInterval);\n\n        _elevationRel = Round(_elevationRel / _clickInterval);\n        _windageRel = Round(_windageRel / _clickInterval);\n\n        _elevationCur = Round(_elevationCur / _clickInterval);\n        _windageCur = Round(_windageCur / _clickInterval);\n    };\n};\n\nif (GVAR(showWind2)) then {\n    ctrlSetText [42, \"Wind2\"];\n} else {\n    ctrlSetText [42, \"Lead\"];\n};\n\n_elevationAbs = Round(_elevationAbs * 100) / 100;\nif (_elevationAbs > 0) then {\n    ctrlSetText [400, format[\"%1\", abs(_elevationAbs)]];\n} else {\n    if (_elevationAbs < 0) then {\n        ctrlSetText [400, format[\"%1D\", abs(_elevationAbs)]];\n    } else {\n        ctrlSetText [400, \"0.0\"];\n    };\n};\n_elevationRel = Round(_elevationRel * 100) / 100;\nif (_elevationRel > 0) then {\n    ctrlSetText [401, format[\"%1\", abs(_elevationRel)]];\n} else {\n    if (_elevationRel < 0) then {\n        ctrlSetText [401, format[\"%1D\", abs(_elevationRel)]];\n    } else {\n        ctrlSetText [401, \"0.0\"];\n    };\n};\n_elevationCur = Round(_elevationCur * 100) / 100;\nif (_elevationCur > 0) then {\n    ctrlSetText [402, format[\"%1\", abs(_elevationCur)]];\n} else {\n    if (_elevationCur < 0) then {\n        ctrlSetText [402, format[\"%1D\", abs(_elevationCur)]];\n    } else {\n        ctrlSetText [402, \"0.0\"];\n    };\n};\n\n_windageAbs = Round(_windageAbs * 100) / 100;\nif (_windageAbs > 0) then {\n    ctrlSetText [410, format[\"%1R\", abs(_windageAbs)]];\n} else {\n    if (_windageAbs < 0) then {\n        ctrlSetText [410, format[\"%1L\", abs(_windageAbs)]];\n    } else {\n        ctrlSetText [410, \"0.0\"];\n    };\n};\n_windageRel = Round(_windageRel * 100) / 100;\nif (_windageRel > 0) then {\n    ctrlSetText [411, format[\"%1R\", abs(_windageRel)]];\n} else {\n    if (_windageRel < 0) then {\n        ctrlSetText [411, format[\"%1L\", abs(_windageRel)]];\n    } else {\n        ctrlSetText [411, \"0.0\"];\n    };\n};\n_windageCur = Round(_windageCur * 100) / 100;\nif (_windageCur > 0) then {\n    ctrlSetText [412, format[\"%1R\", abs(_windageCur)]];\n} else {\n    if (_windageCur < 0) then {\n        ctrlSetText [412, format[\"%1L\", abs(_windageCur)]];\n    } else {\n        ctrlSetText [412, \"0.0\"];\n    };\n};\n\nif (GVAR(showWind2)) then {\n    _wind2 = Round(_wind2 * 100) / 100;\n    if (_wind2 > 0) then {\n        ctrlSetText [420, format[\"%1R\", abs(_wind2)]];\n    } else {\n        if (_wind2 < 0) then {\n            ctrlSetText [420, format[\"%1L\", abs(_wind2)]];\n        } else {\n            ctrlSetText [420, \"0.0\"];\n        };\n    };\n} else {\n    _lead = Round(_lead * 100) / 100;\n    if (_lead > 0) then {\n        if ((GVAR(targetSpeedDirection) select GVAR(currentTarget)) == 1) then {\n            ctrlSetText [420, format[\"%1R\", abs(_lead)]];\n        } else {\n            ctrlSetText [420, format[\"%1L\", abs(_lead)]];\n        };\n    } else {\n        ctrlSetText [420, \"0.0\"];\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_update_result"
      },
      {
        "fileName": "fnc_update_scope_unit.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the scope unit fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_scope_unit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nctrlSetText [2000, GVAR(scopeUnits) select GVAR(currentScopeUnit)];\nctrlSetText [2001, Str(GVAR(currentScopeClickNumber))];\n\nif (GVAR(currentScopeUnit) == 3) then {\n    ctrlSetText [5000, format[\"Clicks=%1\", GVAR(currentScopeClickNumber)]];\n    if (GVAR(showMainPage)) then {\n        ctrlShow [2001, true];\n    };\n} else {\n    ctrlSetText [5000, GVAR(scopeUnits) select GVAR(currentScopeUnit)];\n    ctrlShow [2001, false];\n};\n",
        "functionName": "ace_atragmx_fnc_update_scope_unit"
      },
      {
        "fileName": "fnc_update_solution_setup.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates all solution setup input fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_solution_setup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n{((uiNamespace getVariable \"ATragMX_Display\") displayCtrl _x) ctrlEnable true} forEach [15001, 15002, 15003, 15004, 15005, 15006, 15008, 15009, 15010];\n\nswitch (GVAR(currentScopeClickNumberTemp)) do {\n    case 1:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15001) ctrlEnable false; };\n    case 2:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15002) ctrlEnable false; };\n    case 3:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15003) ctrlEnable false; };\n    case 4:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15004) ctrlEnable false; };\n    case 8:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15005) ctrlEnable false; };\n    case 10: { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15006) ctrlEnable false; };\n};\n\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl (15008 + GVAR(currentScopeClickUnitTemp))) ctrlEnable false;\n\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15011);\n",
        "functionName": "ace_atragmx_fnc_update_solution_setup"
      },
      {
        "fileName": "fnc_update_target_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates all target column input fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_target\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nctrlSetText [140000, Str(Round((GVAR(latitude) select GVAR(currentTarget)) * 100) / 100)];\nctrlSetText [140010, Str(Round((GVAR(directionOfFire) select GVAR(currentTarget)) * 100) / 100)];\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [140020, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\n    ctrlSetText [140021, Str(Round((GVAR(windSpeed2) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\n} else {\n    ctrlSetText [140020, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 100) / 100)];\n    ctrlSetText [140021, Str(Round((GVAR(windSpeed2) select GVAR(currentTarget)) * 100) / 100)];\n};\nctrlSetText [140030, Str(Round((GVAR(windDirection) select GVAR(currentTarget))))];\nctrlSetText [140040, Str(Round((GVAR(inclinationAngle) select GVAR(currentTarget))))];\nctrlSetText [140041, Str(Round(cos(GVAR(inclinationAngle) select GVAR(currentTarget)) * 100) / 100)];\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [140050, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\n} else {\n    ctrlSetText [140050, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 100) / 100)];\n};\nif ((GVAR(targetSpeedDirection) select GVAR(currentTarget)) == 1) then {\n    ctrlSetText [140051, \">\"];\n} else {\n    ctrlSetText [140051, \"<\"];\n};\nif (GVAR(currentUnit) == 1) then {\n    ctrlSetText [140060, Str(Round((GVAR(targetRange) select GVAR(currentTarget)) * 1.0936133))];\n} else {\n    ctrlSetText [140060, Str(Round((GVAR(targetRange) select GVAR(currentTarget))))];\n};\nif (GVAR(currentUnit) == 0) then {\n    ctrlSetText [140061, \"*\"];\n} else {\n    ctrlSetText [140061, \"\"];\n};\n\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [14002, \"Wind Speed (m/s)\"];\n    ctrlSetText [14005, \"Target Speed (m/s)\"];\n} else {\n    ctrlSetText [14002, \"Wind Speed (mph)\"];\n    ctrlSetText [14005, \"Target Speed (mph)\"];\n};\n\nif (GVAR(currentUnit) == 1) then {\n    ctrlSetText [14006, \"Target Range (yards)\"];\n} else {\n    ctrlSetText [14006, \"Target Range (meters)\"];\n};\n",
        "functionName": "ace_atragmx_fnc_update_target_data"
      },
      {
        "fileName": "fnc_update_target_selection.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates all input fields based on the currently selected target\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_target_selection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n{((uiNamespace getVariable \"ATragMX_Display\") displayCtrl _x) ctrlEnable true} forEach [500, 501, 502, 503];\n\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 500 + GVAR(currentTarget)) ctrlEnable false;\n\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 3000);\n\n[] call FUNC(update_unit_selection);\n",
        "functionName": "ace_atragmx_fnc_update_target_selection"
      },
      {
        "fileName": "fnc_update_target.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates all target column input fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_target\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(showWind2)) then {\n    if (GVAR(currentUnit) != 2) then {\n        ctrlSetText [300, format[\"%1/%2\", Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 2.23693629), Round((GVAR(windSpeed2) select GVAR(currentTarget)) * 2.23693629)]];\n    } else {\n        ctrlSetText [300, format[\"%1/%2\", Round(GVAR(windSpeed1) select GVAR(currentTarget)), Round(GVAR(windSpeed2) select GVAR(currentTarget))]];\n    };\n} else {\n    if (GVAR(currentUnit) != 2) then {\n        ctrlSetText [300, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\n    } else {\n        ctrlSetText [300, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 100) / 100)];\n    };\n};\nctrlSetText [310, Str(Round((GVAR(windDirection) select GVAR(currentTarget))))];\nctrlSetText [320, Str(Round((GVAR(inclinationAngle) select GVAR(currentTarget))))];\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [330, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\n} else {\n    ctrlSetText [330, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 100) / 100)];\n};\nswitch (GVAR(currentUnit)) do {\n    case 0: {\n        ctrlSetText [340, format[\"*%1\", Round((GVAR(targetRange) select GVAR(currentTarget)))]];\n    };\n    case 1: {\n        ctrlSetText [340, Str(Round((GVAR(targetRange) select GVAR(currentTarget)) * 1.0936133))];\n    };\n    case 2: {\n        ctrlSetText [340, Str(Round((GVAR(targetRange) select GVAR(currentTarget))))];\n    };\n};\n",
        "functionName": "ace_atragmx_fnc_update_target"
      },
      {
        "fileName": "fnc_update_truing_drop_data.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the truing drop data fields\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_truing_drop_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(currentUnit) == 2) then {\n    ctrlSetText [18011, Str(Round(GVAR(truingDropRangeData) select 0))];\n    ctrlSetText [18012, Str(Round(GVAR(truingDropRangeData) select 1))];\n} else {\n    ctrlSetText [18011, Str(Round((GVAR(truingDropRangeData) select 0) * 1.0936133))];\n    ctrlSetText [18012, Str(Round((GVAR(truingDropRangeData) select 1) * 1.0936133))];\n};\n\nif (GVAR(truingDropMode) == 0) then {\n    GVAR(truingDropDropData) set [0, GVAR(truingDropReferenceDropData) select 0];\n} else {\n    GVAR(truingDropDropData) set [0, GVAR(truingDropReferenceDropData) select 1];\n};\n\nprivate _dropUnit = GVAR(currentScopeUnit);\nif (_dropUnit == 3) then {\n    switch (GVAR(currentScopeClickUnit)) do {\n        case 0: { _dropUnit = 1; };\n        case 1: { _dropUnit = 2; };\n        case 2: { _dropUnit = 0; };\n    };\n};\n\nprivate _dropData = +GVAR(truingDropDropData);\n\nswitch (_dropUnit) do {\n    case 0: {\n        _dropData set [0, MOA_TO_MRAD(_dropData select 0)];\n        _dropData set [1, MOA_TO_MRAD(_dropData select 1)];\n        _dropData set [2, MOA_TO_MRAD(_dropData select 2)];\n    };\n    case 2: {\n        _dropData set [0, (_dropData select 0) * 1.047];\n        _dropData set [1, (_dropData select 1) * 1.047];\n        _dropData set [2, (_dropData select 2) * 1.047];\n    };\n};\n\nctrlSetText [18006, Str(Round((_dropData select 0) * 100) / 100)];\nctrlSetText [18013, Str(Round((_dropData select 1) * 100) / 100)];\nctrlSetText [18014, Str(Round((_dropData select 2) * 100) / 100)];\n\nif (GVAR(currentUnit) != 2) then {\n    ctrlSetText [18007, Str(Round((GVAR(workingMemory) select 1) * 3.2808399))];\n    ctrlSetText [18016, Str(Round((GVAR(workingMemory) select 1) * 3.2808399))];\n    if (GVAR(truingDropMuzzleVelocity) > 0) then {\n        ctrlSetText [18016, Str(Round(GVAR(truingDropMuzzleVelocity) * 3.2808399))];\n    };\n} else {\n    ctrlSetText [18007, Str(Round(GVAR(workingMemory) select 1))];\n    ctrlSetText [18016, Str(Round(GVAR(workingMemory) select 1))];\n    if (GVAR(truingDropMuzzleVelocity) > 0) then {\n        ctrlSetText [18016, Str(Round(GVAR(truingDropMuzzleVelocity)))];\n    };\n};\nctrlSetText [18008, Str(Round((GVAR(workingMemory) select 15) * 1000) / 1000)];\nctrlSetText [18017, Str(Round((GVAR(workingMemory) select 15) * 1000) / 1000)];\nif (GVAR(truingDropC1) > 0) then {\n    ctrlSetText [18017, Str(Round(GVAR(truingDropC1) * 1000) / 1000)];\n};\n",
        "functionName": "ace_atragmx_fnc_update_truing_drop_data"
      },
      {
        "fileName": "fnc_update_truing_drop_selection.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the truing drop input method\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_truing_drop_selection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"ATragMX_Display\")\n\n(__dsp displayCtrl 18009) ctrlEnable true;\n(__dsp displayCtrl 18010) ctrlEnable true;\n\nif (GVAR(truingDropMode) == 0) then {\n    (__dsp displayCtrl 18009) ctrlEnable false;\n    {\n        (__dsp displayCtrl _x) ctrlEnable true;\n    } forEach [18011, 18013, 18016];\n    {\n        (__dsp displayCtrl _x) ctrlEnable false;\n    } forEach [18012, 18014, 18017];\n    ctrlSetFocus (__dsp displayCtrl 18011);\n} else {\n    (__dsp displayCtrl 18010) ctrlEnable false;\n    {\n        (__dsp displayCtrl _x) ctrlEnable true;\n    } forEach [18012, 18014, 18017];\n    {\n        (__dsp displayCtrl _x) ctrlEnable false;\n    } forEach [18011, 18013, 18016];\n    ctrlSetFocus (__dsp displayCtrl 18012);\n};\n\n[] call FUNC(update_truing_drop_data);\n",
        "functionName": "ace_atragmx_fnc_update_truing_drop_selection"
      },
      {
        "fileName": "fnc_update_unit_selection.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates all input fields based on the currently selected unit\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_unit_selection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 600) ctrlEnable true;\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 601) ctrlEnable true;\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 602) ctrlEnable true;\n\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 600 + GVAR(currentUnit)) ctrlEnable false;\n\n[] call FUNC(update_gun);\n[] call FUNC(update_gun_ammo_data);\n[] call FUNC(update_atmosphere);\n[] call FUNC(update_atmo_env_data);\n[] call FUNC(update_target);\n[] call FUNC(update_target_data);\n[] call FUNC(update_muzzle_velocity_data);\n[] call FUNC(update_c1_ballistic_coefficient_data);\n\n[] call FUNC(update_result);\n",
        "functionName": "ace_atragmx_fnc_update_unit_selection"
      },
      {
        "fileName": "fnc_update_zero_range.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the scope base angle based on the zero range input\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_atragmx_fnc_update_zero_range\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n[] call FUNC(parse_input);\n\nprivate _bulletMass = GVAR(workingMemory) select 12;\nprivate _boreHeight = GVAR(workingMemory) select 5;\nprivate _airFriction = GVAR(workingMemory) select 4;\nprivate _muzzleVelocity = GVAR(workingMemory) select 1;\nprivate _bc = GVAR(workingMemory) select 15;\nprivate _dragModel = GVAR(workingMemory) select 16;\nprivate _atmosphereModel = GVAR(workingMemory) select 17;\nprivate _zeroRange = GVAR(workingMemory) select 2;\nprivate _altitude = GVAR(altitude);\nprivate _temperature = GVAR(temperature);\nprivate _barometricPressure = GVAR(barometricPressure);\nprivate _relativeHumidity = GVAR(relativeHumidity);\n\nif (!GVAR(atmosphereModeTBH)) then {\n    _barometricPressure = 1013.25 * (1 - (0.0065 * _altitude) / (273.15 + _temperature + 0.0065 * _altitude)) ^ 5.255754495;\n    _relativeHumidity = 0.5;\n};\n\nprivate _scopeBaseAngle = if (!(missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) then {\n    private _zeroAngle = \"ace_advanced_ballistics\" callExtension format [\"calcZero:%1:%2:%3:%4\", _zeroRange, _muzzleVelocity, _airFriction, _boreHeight];\n    (parseNumber _zeroAngle)\n} else {\n    private _zeroAngle = \"ace_advanced_ballistics\" callExtension format [\"calcZeroAB:%1:%2:%3:%4:%5:%6:%7:%8:%9\", _zeroRange, _muzzleVelocity, _boreHeight, _temperature, _barometricPressure, _relativeHumidity, _bc, _dragModel, _atmosphereModel];\n    (parseNumber _zeroAngle)\n};\n\nGVAR(workingMemory) set [2, _zeroRange];\nGVAR(workingMemory) set [3, _scopeBaseAngle];\n",
        "functionName": "ace_atragmx_fnc_update_zero_range"
      }
    ]
  },
  {
    "component": "attach",
    "files": [
      {
        "fileName": "XEH_clientInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n//If attach placing, stop when opening menu:\n[\"ace_interactMenuOpened\", {GVAR(placeAction) = 0;}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_attach.sqf",
        "content": "/*\n * Author: eRazeri, esteldunedain, PabstMirror\n * Attach an item to the unit\n *\n * Arguments:\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\n * 1: unit doing the attach (player) <OBJECT>\n * 2: Array containing a string of the attachable item <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, bob, [\"light\"]] call ace_attach_fnc_attach;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_attachToVehicle\",\"_unit\",\"_args\", [\"_silentScripted\", false]];\n_args params [[\"_itemClassname\",\"\", [\"\"]]];\nTRACE_4(\"params\",_attachToVehicle,_unit,_itemClassname,_silentScripted);\n\n//Sanity Check (_unit has item in inventory, not over attach limit)\nif ((_itemClassname == \"\") || {(!_silentScripted) && {!(_this call FUNC(canAttach))}}) exitWith {ERROR(\"Tried to attach, but check failed\");};\n\nprivate _itemVehClass = getText (configFile >> \"CfgWeapons\" >> _itemClassname >> \"ACE_Attachable\");\nprivate _onAttachText = getText (configFile >> \"CfgWeapons\" >> _itemClassname >> \"displayName\");\n\nif (_itemVehClass == \"\") then {\n    _itemVehClass = getText (configFile >> \"CfgMagazines\" >> _itemClassname >> \"ACE_Attachable\");\n    _onAttachText = getText (configFile >> \"CfgMagazines\" >> _itemClassname >> \"displayName\");\n};\n\nif (_itemVehClass == \"\") exitWith {ERROR(\"no ACE_Attachable for Item\");};\n\nprivate _onAttachText = format [localize LSTRING(Item_Attached), _onAttachText];\n\nif (_unit == _attachToVehicle) then {  //Self Attachment\n    private _attachedItem = _itemVehClass createVehicle [0,0,0];\n    _attachedItem attachTo [_unit, [0.05, -0.09, 0.1], \"leftshoulder\"];\n    if (!_silentScripted) then {\n        _unit removeItem _itemClassname;  // Remove item\n        [_onAttachText] call EFUNC(common,displayTextStructured);\n    };\n    _unit setVariable [QGVAR(attached), [[_attachedItem, _itemClassname]], true];\n} else {\n    GVAR(placeAction) = PLACE_WAITING;\n\n    [_unit, \"forceWalk\", \"ACE_Attach\", true] call EFUNC(common,statusEffect_set);\n\n    [{[localize LSTRING(PlaceAction), \"\"] call EFUNC(interaction,showMouseHint)}, []] call CBA_fnc_execNextFrame;\n    _unit setVariable [QGVAR(placeActionEH), [_unit, \"DefaultAction\", {true}, {GVAR(placeAction) = PLACE_APPROVE;}] call EFUNC(common,AddActionEventHandler)];\n\n    private _actionID = _unit addAction [format [\"<t color='#FF0000'>%1</t>\", localize LSTRING(CancelAction)], {GVAR(placeAction) = PLACE_CANCEL}];\n\n    //Display to show virtual object:\n    private _model = getText (configFile >> \"CfgAmmo\" >> _itemVehClass >> \"model\");\n    if (_model == \"\") then {\n        _model = getText (configFile >> \"CfgVehicles\" >> _itemVehClass >> \"model\");\n    };\n    //\"\\A3\\Weapons_F\\empty.p3d\" is fine, but ctrlSetModel \"\"; - will crash game!\n    if (_model == \"\") exitWith {ERROR(\"No Model\");};\n    (QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutRsc [QGVAR(virtualAmmo), \"PLAIN\", 0, false];\n    ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModel _model;\n\n    [{\n        params [\"_args\",\"_idPFH\"];\n        _args params [\"_unit\",\"_attachToVehicle\",\"_itemClassname\",\"_itemVehClass\",\"_onAttachText\",\"_actionID\"];\n\n        private _virtualPosASL = (eyePos _unit) vectorAdd (positionCameraToWorld [0,0,0.6]) vectorDiff (positionCameraToWorld [0,0,0]);\n        if (cameraView == \"EXTERNAL\") then {\n            _virtualPosASL = _virtualPosASL vectorAdd ((positionCameraToWorld [0.3,0,0]) vectorDiff (positionCameraToWorld [0,0,0]));\n        };\n        private _virtualPos = _virtualPosASL call EFUNC(common,ASLToPosition);\n        private _lineInterection = lineIntersects [eyePos ACE_player, _virtualPosASL, ACE_player];\n\n        //Don't allow placing in a bad position:\n        if (_lineInterection && {GVAR(placeAction) == PLACE_APPROVE}) then {GVAR(placeAction) = PLACE_WAITING;};\n\n        if ((GVAR(placeAction) != PLACE_WAITING) ||\n                {_unit != ACE_player} ||\n                {!([_unit, _attachToVehicle, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith))} ||\n                {!([_attachToVehicle, _unit, _itemClassname] call FUNC(canAttach))}) then {\n\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n            [_unit, \"forceWalk\", \"ACE_Attach\", false] call EFUNC(common,statusEffect_set);\n            [] call EFUNC(interaction,hideMouseHint);\n            [_unit, \"DefaultAction\", (_unit getVariable [QGVAR(placeActionEH), -1])] call EFUNC(common,removeActionEventHandler);\n            _unit removeAction _actionID;\n\n            (QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n\n            if (GVAR(placeAction) == PLACE_APPROVE) then {\n                [_unit, _attachToVehicle, _itemClassname, _itemVehClass, _onAttachText, _virtualPos] call FUNC(placeApprove);\n            };\n        } else {\n            //Show the virtual object:\n            if (_lineInterection) then {\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow false;\n            } else {\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow true;\n                private _screenPos = worldToScreen _virtualPos;\n                if (_screenPos isEqualTo []) exitWith {\n                    ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow false;\n                };\n                private _realDistance = (_virtualPos distance (positionCameraToWorld [0,0,0])) / ((call CBA_fnc_getFov) select 1);\n                _screenPos = [(_screenPos select 0), _realDistance, (_screenPos select 1)];\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetPosition _screenPos;\n                private _dir = (positionCameraToWorld [0,0,1]) vectorFromTo (positionCameraToWorld [0,0,0]);\n                private _angle = asin (_dir select 2);\n                private _up = [0, cos _angle, sin _angle];\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModelDirAndUp [[1,0,0], _up];\n            };\n        };\n    }, 0, [_unit, _attachToVehicle, _itemClassname, _itemVehClass, _onAttachText, _actionID]] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_attach_fnc_attach"
      },
      {
        "fileName": "fnc_canAttach.sqf",
        "content": "/*\n * Author: commy2\n * Check if a unit can attach a specific item.\n *\n * Arguments:\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\n * 1: unit doing the attach (player) <OBJECT>\n * 2: Array empty or containing a string of the attachable item <ARRAY>\n *\n * Return Value:\n * Can Attach <BOOL>\n *\n * Example:\n * [bob, bob, [\"light\"]] call ace_attach_fnc_canAttach;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_attachToVehicle\",\"_player\",\"_args\"];\n_args params [[\"_itemClassname\",\"\", [\"\"]]];\nTRACE_3(\"params\",_attachToVehicle,_player,_itemClassname);\n\nprivate _attachLimit = [6, 1] select (_player == _attachToVehicle);\nprivate _attachedObjects = _attachToVehicle getVariable [QGVAR(attached), []];\n\n((_player == _attachToVehicle) || {canStand _player}) &&\n{(_attachToVehicle distance _player) < 10} &&\n{alive _attachToVehicle} &&\n{(count _attachedObjects) < _attachLimit} &&\n{_itemClassname in ((itemsWithMagazines _player) + [\"\"])};\n",
        "functionName": "ace_attach_fnc_canAttach"
      },
      {
        "fileName": "fnc_canDetach.sqf",
        "content": "/*\n * Author: commy2\n * Check if a unit has an item attached and if it can remove that item.\n *\n * Arguments:\n * 0: vehicle that it will be detached from (player or vehicle) <OBJECT>\n * 1: unit doing the detaching (player) <OBJECT>\n *\n * Return Value:\n * Can Detach <BOOL>\n *\n * Example:\n * [bob, bob] call ace_attach_fnc_canDetach;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_attachToVehicle\", \"_unit\"];\nTRACE_2(\"params\",_attachToVehicle,_unit);\n\nif ((vehicle _unit) != _unit) exitWith {false};\n\nprivate _attachedList = _attachToVehicle getVariable [QGVAR(attached), []];\nif ((count _attachedList) == 0) exitWith {false};\n\nprivate _inRange = false;\n{\n    _x params [\"_xObject\"];\n    if (isNull _xObject) exitWith {\n        TRACE_1(\"Null attached\",_x);\n        _attachedList deleteAt _forEachIndex;\n        _attachToVehicle setVariable [QGVAR(attached), _attachedList, true];\n    };\n    if (((getPos _unit) distance2d (getPos _xObject)) < 4) exitWith {_inRange = true};\n} forEach _attachedList;\n\n_inRange &&\n{(_unit == _attachToVehicle) || {canStand _unit}} &&\n{alive _attachToVehicle}\n",
        "functionName": "ace_attach_fnc_canDetach"
      },
      {
        "fileName": "fnc_detach.sqf",
        "content": "/*\n * Author: eRazeri and esteldunedain\n * Detach an item from a unit\n *\n * Arguments:\n * 0: vehicle that it will be detached from (player or vehicle) <OBJECT>\n * 1: unit doing the detaching (player) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car, bob] call ace_attach_fnc_detach\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_attachToVehicle\",\"_unit\"],\nTRACE_2(\"params\",_attachToVehicle,_unit);\n\nprivate _attachedList = _attachToVehicle getVariable [QGVAR(attached), []];\n\nprivate _attachedObject = objNull;\nprivate _attachedIndex = -1;\nprivate _itemName = \"\";\n\n//Find closest attached object\nprivate _minDistance = 1000;\n\n{\n    _x params [\"_xObject\", \"_xItemName\"];\n\n    if (((getPos _unit) distance2d (getPos _xObject)) < _minDistance) then {\n        _minDistance = ((getPos _unit) distance2d (getPos _xObject));\n        _attachedObject = _xObject;\n        _itemName = _xItemName;\n        _attachedIndex = _forEachIndex;\n    };\n} forEach _attachedList;\n\n// Check if unit has an attached item\nif (isNull _attachedObject || {_itemName == \"\"}) exitWith {ERROR(\"Could not find attached object\")};\n\n// Check if item is a chemlight\nprivate _isChemlight = _attachedObject isKindOf \"Chemlight_base\";\n\n// Exit if can't add the item\nif (!(_unit canAdd _itemName) && {!_isChemlight}) exitWith {\n    [localize LSTRING(Inventory_Full)] call EFUNC(common,displayTextStructured);\n};\n\n// Add item to inventory (unless it's a chemlight)\nif (!_isChemlight) then {\n    _unit addItem _itemName;\n};\n\nif (toLower _itemName in [\"b_ir_grenade\", \"o_ir_grenade\", \"i_ir_grenade\"]) then {\n    // Hack for dealing with X_IR_Grenade effect not dissapearing on deleteVehicle\n    detach _attachedObject;\n    _attachedObject setPos ((getPos _unit) vectorAdd [0, 0, -1000]);\n    // Delete attached item after 0.5 seconds\n    [{deleteVehicle (_this select 0)}, [_attachedObject], 2] call CBA_fnc_waitAndExecute;\n} else {\n    //handle any objects that may be attached to the object\n    {\n        detach _x;\n        deleteVehicle _x;\n    } forEach (attachedObjects _attachedObject);\n\n    // Delete attached item\n    detach _attachedObject;\n    deleteVehicle _attachedObject;\n};\n\n// Reset unit variables\n_attachedList deleteAt _attachedIndex;\n_attachToVehicle setVariable [QGVAR(attached), _attachedList, true];\n\n// Display message\nprivate _itemDisplayName = getText (configFile >> \"CfgWeapons\" >> _itemName >> \"displayName\");\nif (_itemDisplayName == \"\") then {\n    _itemDisplayName = getText (configFile >> \"CfgMagazines\" >> _itemName >> \"displayName\");\n};\n\n[format [localize LSTRING(Item_Detached), _itemDisplayName]] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_attach_fnc_detach"
      },
      {
        "fileName": "fnc_getChildrenAttachActions.sqf",
        "content": "/*\n * Author: Garth de Wet (LH), PabstMirror\n * Show the ammo counts for a static weapon.\n * Called from \"insertChildren\" on interact_menu\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player <OBJECT>\n *\n * Return Value:\n * ChildActiosn<ARRAY>\n *\n * Example:\n * [player, player] call ace_attach_fnc_getChildrenAttachActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\",\"_player\"];\nTRACE_2(\"params\",_target,_player);\n\nprivate _listed = [];\nprivate _actions = [];\n\n{\n    if !(_x in _listed) then {\n        _listed pushBack _x;\n        private _item = ConfigFile >> \"CfgMagazines\" >> _x;\n        if (getText (_item >> \"ACE_Attachable\") != \"\") then {\n            private _displayName = getText(_item >> \"displayName\");\n            private _picture = getText(_item >> \"picture\");\n            private _action = [_x, _displayName, _picture, {[{_this call FUNC(attach)}, _this] call CBA_fnc_execNextFrame}, {true}, {}, [_x]] call EFUNC(interact_menu,createAction);\n            _actions pushBack [_action, [], _target];\n        };\n    };\n} forEach (magazines _player);\n\n{\n    if !(_x in _listed) then {\n        _listed pushBack _x;\n        private _item = ConfigFile >> \"CfgWeapons\" >> _x;\n        if (getText (_item >> \"ACE_Attachable\") != \"\") then {\n            private _displayName = getText(_item >> \"displayName\");\n            private _picture = getText(_item >> \"picture\");\n            private _action = [_x, _displayName, _picture, {[{_this call FUNC(attach)}, _this] call CBA_fnc_execNextFrame}, {true}, {}, [_x]] call EFUNC(interact_menu,createAction);\n            _actions pushBack [_action, [], _target];\n        };\n    };\n} forEach (items _player);\n\n_actions\n",
        "functionName": "ace_attach_fnc_getChildrenAttachActions"
      },
      {
        "fileName": "fnc_handleGetIn.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles when a unit gets in to a vehicle.\n *\n * Arguments:\n * 0: vehicle <OBJECT>\n * 1: dunno <OBJECT>\n * 2: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car2, x, player] call ACE_attach_fnc_handleGetIn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"\", \"_unit\"];\nTRACE_1(\"params\",_unit);\n\nif (!local _unit) exitWith {};\n\nprivate _attachedList = _unit getVariable [QGVAR(attached), []];\nif (_attachedList isEqualTo []) exitWith {};\n\n(_attachedList select 0) params [\"_xObject\"];\nif (!isNull _xObject) then {\n    TRACE_1(\"detaching and moving attached light\",_xObject);\n    detach _xObject;\n    _xObject setPos ((getPos _unit) vectorAdd [0, 0, -1000]);\n    [{\n        params [\"_detachedLight\"];\n        TRACE_1(\"delayed delete\",_detachedLight);\n        deleteVehicle _detachedLight;\n    }, [_xObject], 2] call CBA_fnc_waitAndExecute;\n    (_attachedList select 0) set [0, objNull];\n};\n\n_unit setVariable [QGVAR(attached), _attachedList, true];\n",
        "functionName": "ace_attach_fnc_handleGetIn"
      },
      {
        "fileName": "fnc_handleGetOut.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles when a unit gets in to a vehicle.\n *\n * Arguments:\n * 0: vehicle <OBJECT>\n * 1: dunno <OBJECT>\n * 2: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car2, x, player] call ACE_attach_fnc_handleGetOut\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"\", \"_unit\"];\nTRACE_1(\"params\",_unit);\n\nif (!local _unit) exitWith {};\n\nprivate _attachedList = _unit getVariable [QGVAR(attached), []];\nif (_attachedList isEqualTo []) exitWith {};\n\n(_attachedList select 0) params [\"_xObject\", \"_xItemName\"];\nif (isNull _xObject) then {\n    TRACE_1(\"null attached when exiting vehicle, scripted reattach\",_xItemName);\n    _unit setVariable [QGVAR(attached), [], true];\n    [_unit, _unit, _xItemName, true] call FUNC(attach);\n};\n",
        "functionName": "ace_attach_fnc_handleGetOut"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles when vehicle or man is killed. \n * Note: Runs where unit is local.\n *\n * Arguments:\n * 0: DeadVehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob1] call ACE_attach_fnc_handleKilled\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_deadUnit\"];\nTRACE_1(\"params\",_deadUnit);\n\nprivate _attachedList = _deadUnit getVariable [QGVAR(attached), []];\n\nif (_attachedList isEqualTo []) exitWith {};\n\n{\n    _x params [\"_xObject\"];\n    TRACE_2(\"detaching\",_xObject,_deadUnit);\n    detach _xObject;\n    //If it's a vehicle, also delete the attached\n    if (!(_deadUnit isKindOf \"CAManBase\")) then {\n        _xObject setPos ((getPos _deadUnit) vectorAdd [0, 0, -1000]);\n        [{deleteVehicle (_this select 0)}, [_xObject], 2] call CBA_fnc_waitAndExecute;\n    };\n} forEach _attachedList;\n\n_deadUnit setVariable [QGVAR(attached), nil, true];\n",
        "functionName": "ace_attach_fnc_handleKilled"
      },
      {
        "fileName": "fnc_placeApprove.sqf",
        "content": "/*\n * Author: Pabst Mirror (based on Explosive attach by Garth de Wet (LH))\n * Approves placement of the lightObject, scans for an appropriate location and attaches\n * A player can release the attachObject with it floating in mid-air.\n * This will use lineIntersectsWith to scan towards the center of the vehicle to find a collision\n * ArmA's collision detection is of couse terrible and often misses collisions (difference between what we see and collision LOD)\n * So it does multiple scans at slighly different angles\n * This is VERY computationaly intensive, but doesn't happen that often.\n *\n * Arguments:\n * 0: Unit (player) <OBJECT>\n * 1: attachToVehicle <OBJECT>\n * 2: Item Classname (CfgWeapon/CfgMagazine) <STRING>\n * 3: Light Vehicle Classname <STRING>\n * 4: On Attach Text <STRING>\n * 5: Starting Pos of dummy item <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * No\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_attachToVehicle\", \"_itemClassname\", \"_itemVehClass\", \"_onAttachText\", \"_startingPosition\"];\nTRACE_6(\"params\",_unit,_attachToVehicle,_itemClassname,_itemVehClass,_onAttachText,_startingPosition);\n\nprivate _startingOffset = _attachToVehicle worldToModel _startingPosition;\n\nprivate _startDistanceFromCenter = vectorMagnitude _startingOffset;\nprivate _closeInUnitVector = vectorNormalized (_startingOffset vectorFromTo [0,0,0]);\n\nprivate _closeInMax = _startDistanceFromCenter;\nprivate _closeInMin = 0;\n\nwhile {(_closeInMax - _closeInMin) > 0.01} do {\n    private _closeInDistance = (_closeInMax + _closeInMin) / 2;\n    // systemChat format [\"Trying %1 from %2 start %3\", _closeInDistance, [_closeInMax, _closeInMin], _startDistanceFromCenter];\n    private _endPosTestOffset = _startingOffset vectorAdd (_closeInUnitVector vectorMultiply _closeInDistance);\n    _endPosTestOffset set [2, (_startingOffset select 2)];\n    private _endPosTest = _attachToVehicle modelToWorldVisual _endPosTestOffset;\n\n    private _doesIntersect = false;\n    {\n        if (_doesIntersect) exitWith {};\n        private _startingPosShifted = _startingPosition vectorAdd _x;\n        private _startASL = if (surfaceIsWater _startingPosShifted) then {_startingPosShifted} else {ATLtoASL _startingPosShifted};\n        {\n            private _endPosShifted = _endPosTest vectorAdd _x;\n            private _endASL = if (surfaceIsWater _startingPosShifted) then {_endPosShifted} else {ATLtoASL _endPosShifted};\n\n            #ifdef DRAW_ATTACH_SCAN\n                [{\n                    params [\"_args\", \"_idPFH\"];\n                    _args params [\"_startingPosShifted\", \"_endPosShifted\", \"_timeAdded\"];\n                    drawLine3D [_startingPosShifted, _endPosShifted, [1,0,0,1]];\n                    if (_timeAdded + 5 < CBA_missionTime) then {\n                        [_idPFH] call CBA_fnc_removePerFrameHandler;\n                    };\n                }, 0, [_startingPosShifted, _endPosShifted, CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\n            #endif\n\n            // Default max results is 1, so take only first subarray and select parentObject (object itself or parent of proxy)\n            private _intersectObject = ((lineIntersectsSurfaces [_startASL, _endASL, _unit]) param [0, objNull]) param [3, objNull];\n            if (_attachToVehicle == _intersectObject) exitWith {_doesIntersect = true};\n        } forEach [[0,0,0.045], [0,0,-0.045], [0,0.045,0], [0,-0.045,0], [0.045,0,0], [-0.045,0,0]];\n    } forEach [[0,0,0], [0,0,0.05], [0,0,-0.05]];\n\n    if (_doesIntersect) then {\n        _closeInMax = _closeInDistance;\n    } else {\n        _closeInMin = _closeInDistance;\n    };\n};\n\nprivate _closeInDistance = (_closeInMax + _closeInMin) / 2;\n\n//Checks (too close to center or can't attach)\nif (((_startDistanceFromCenter - _closeInDistance) < 0.1) || {!([_attachToVehicle, _unit, _itemClassname] call FUNC(canAttach))}) exitWith {\n    TRACE_2(\"no valid spot found\",_closeInDistance,_startDistanceFromCenter);\n    [localize LSTRING(Failed)] call EFUNC(common,displayTextStructured);\n};\n\n//Move it out slightly, for visability sake (better to look a little funny than be embedded//sunk in the hull and be useless)\n_closeInDistance = (_closeInDistance - 0.0085);\n\n//Create New 'real' Object\nprivate _endPosTestOffset = _startingOffset vectorAdd (_closeInUnitVector vectorMultiply _closeInDistance);\n_endPosTestOffset set [2, (_startingOffset select 2)];\nprivate _attachedObject = _itemVehClass createVehicle (getPos _unit);\n_attachedObject attachTo [_attachToVehicle, _endPosTestOffset];\n\n//Remove Item from inventory\n_unit removeItem _itemClassname;\n\n//Add Object to attached array\nprivate _attachList = _attachToVehicle getVariable [QGVAR(attached), []];\n_attachList pushBack [_attachedObject, _itemClassname];\n_attachToVehicle setVariable [QGVAR(attached), _attachList, true];\n\n[_onAttachText] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_attach_fnc_placeApprove"
      }
    ]
  },
  {
    "component": "backpacks",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_backpackOpened\", {_this call FUNC(backpackOpened)}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_backpackOpened.sqf",
        "content": "/*\n * Author: commy2\n * Someone opened your backpack. Play sound and camshake. Execute locally.\n *\n * Arguments:\n * 0: Who accessed your inventory? <Object>\n * 1: Unit that wields the backpack <Object>\n * 2: The backpack object <Object>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, backpack] call ace_backpacks_fnc_backpackOpened\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_backpack\"];\n\n// do cam shake if the target is the player\nif (_target call EFUNC(common,isPlayer)) then {\n    addCamShake [4, 0.5, 5];\n};\n\n// play a zipper sound effect\nprivate _sounds = [\n    QUOTE(PATHTO_R(sounds\\zip_in.wav)),\n    QUOTE(PATHTO_R(sounds\\zip_out.wav))\n];\n\nprivate _position = AGLToASL (_target modelToWorldVisual (_target selectionPosition \"Spine3\"));\n\nplaySound3D [\n    selectRandom _sounds,\n    objNull,\n    false,\n    _position,\n    1,\n    1,\n    50\n];\n",
        "functionName": "ace_backpacks_fnc_backpackOpened"
      },
      {
        "fileName": "fnc_isBackpack.sqf",
        "content": "/*\n * Author: commy2\n * Check if the given backpack is an actual backpack that can store items. Parachute, static weapon packs, etc. will return false.\n *\n * Arguments:\n * 0: Backpack <OBJECT, STRING>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [bob] call ace_backpacks_fnc_isBackpack\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_backpack\", objNull, [objNull, \"\"]]];\n\nif (_backpack isEqualType objNull) then {\n    _backpack = typeOf _backpack;\n};\n\nprivate _config = configFile >> \"CfgVehicles\" >> _backpack;\n\ngetText (_config >> \"vehicleClass\") == \"backpacks\" && {getNumber (_config >> \"maximumLoad\") > 0} // return\n",
        "functionName": "ace_backpacks_fnc_isBackpack"
      },
      {
        "fileName": "fnc_onOpenInventory.sqf",
        "content": "/*\n * Author: commy2\n * Handle the open inventory event. Camshake and sound on target client.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Backpack <OBJECT>\n *\n * Return Value:\n * false. Always open the inventory dialog. <BOOL>\n *\n * Example:\n * [bob, backpack] call ace_backpacks_fnc_onOpenInventory\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_backpack\"];\n\n// exit if the target is not a real backpack, i.e. parachute, static weapon bag etc.\nif !(_backpack call FUNC(isBackpack)) exitWith {false};\n\n// get the unit that wears the backpack object\nprivate _target = objectParent _backpack;\n\nif (isNull _target) exitWith {false};\n\n// raise event on target unit\n[\"ace_backpackOpened\", [_target, _backpack], _target] call CBA_fnc_targetEvent;\n\n// return false to open inventory as usual\nfalse\n",
        "functionName": "ace_backpacks_fnc_onOpenInventory"
      }
    ]
  },
  {
    "component": "ballistics",
    "files": [],
    "functions": []
  },
  {
    "component": "captives",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n#include \"\\a3\\editor_f\\Data\\Scripts\\dikCodes.h\"\n\n[\"ace_settingsInitialized\", {\n    // Hold on a little bit longer to ensure anims will work\n    [{\n        GVAR(captivityEnabled) = true;\n    }, [], 0.05] call CBA_fnc_waitAndExecute;\n}] call CBA_fnc_addEventHandler;\n\n//Handles when someone starts escorting and then disconnects, leaving the captive attached\n//This is normaly handled by the PFEH in doEscortCaptive, but that won't be running if they DC\n\nif (isServer) then {\n    addMissionEventHandler [\"HandleDisconnect\", {\n        params [\"_disconnectedPlayer\"];\n        private _escortedUnit = _disconnectedPlayer getVariable [QGVAR(escortedUnit), objNull];\n        if ((!isNull _escortedUnit) && {(attachedTo _escortedUnit) == _disconnectedPlayer}) then {\n            detach _escortedUnit;\n        };\n        if (_disconnectedPlayer getVariable [QGVAR(isEscorting), false]) then {\n            _disconnectedPlayer setVariable [QGVAR(isEscorting), false, true];\n        };\n    }];\n};\n\n[\"unit\", FUNC(handlePlayerChanged)] call CBA_fnc_addPlayerEventHandler;\n[QGVAR(moveInCaptive), FUNC(vehicleCaptiveMoveIn)] call CBA_fnc_addEventHandler;\n[QGVAR(moveOutCaptive), FUNC(vehicleCaptiveMoveOut)] call CBA_fnc_addEventHandler;\n\n[QGVAR(setHandcuffed), FUNC(setHandcuffed)] call CBA_fnc_addEventHandler;\n[QGVAR(setSurrendered), FUNC(setSurrendered)] call CBA_fnc_addEventHandler;\n\n//Medical Integration Events\n[\"ace_unconscious\", FUNC(handleOnUnconscious)] call CBA_fnc_addEventHandler;\n\nif (!hasInterface) exitWith {};\n\n[\"ACE3 Common\", QGVAR(captives), [(localize LSTRING(SetCaptive)), (localize LSTRING(KeyComb_description))],\n{\n    private _target = cursorObject;\n    if !([ACE_player, _target, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    if !(_target isKindOf \"CAManBase\") exitWith {false};\n    if ((_target distance ACE_player) > getNumber (configFile >> \"CfgVehicles\" >> \"CAManBase\" >> \"ACE_Actions\" >> \"ACE_ApplyHandcuffs\" >> \"distance\")) exitWith {false};\n\n    if ([ACE_player, _target] call FUNC(canApplyHandcuffs)) exitWith {\n        [QGVAR(setHandcuffed), [_target, true], _target] call CBA_fnc_targetEvent;\n        true\n    };\n    false\n},\n{false},\n[DIK_F1, [true, false, false]], true] call CBA_fnc_addKeybind; // Shift + F1\n\n[\"isNotEscorting\", {!(GETVAR(_this select 0,GVAR(isEscorting),false))}] call EFUNC(common,addCanInteractWithCondition);\n[\"isNotHandcuffed\", {!(GETVAR(_this select 0,GVAR(isHandcuffed),false))}] call EFUNC(common,addCanInteractWithCondition);\n[\"isNotSurrendering\", {!(GETVAR(_this select 0,GVAR(isSurrendering),false))}] call EFUNC(common,addCanInteractWithCondition);\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(captivityEnabled) = false;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addLoadCaptiveActions.sqf",
        "content": "/*\n * Author: 654wak654\n * Adds child actions to the \"load captive\" action for near vehicles.\n *\n * Arguments:\n * 0: Captive <OBJECT>\n *\n * Return Value:\n * Child actions <ARRAY>\n *\n * Example:\n * [kevin] call ace_medical_fnc_addLoadCaptiveActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _statement = {\n    params [\"_target\", \"_player\", \"_vehicle\"];\n    [_player, _target, _vehicle] call FUNC(doLoadCaptive);\n};\n\n[_target call EFUNC(common,nearestVehiclesFreeSeat), _statement, _target] call EFUNC(interact_menu,createVehiclesActions)\n",
        "functionName": "ace_captives_fnc_addLoadCaptiveActions"
      },
      {
        "fileName": "fnc_canApplyHandcuffs.sqf",
        "content": "/*\n * Author: PabstMirror\n * Checks the conditions for being able to apply handcuffs\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: target <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_canApplyHandcuffs\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n//Check sides, Player has cableTie, target is alive and not already handcuffed\n\n(GVAR(allowHandcuffOwnSide) || {(side _unit) != (side _target)}) &&\n{\"ACE_CableTie\" in (items _unit)} &&\n{alive _target} &&\n{!(_target getVariable [QGVAR(isHandcuffed), false])} &&\n{\n    (_target getVariable [\"ACE_isUnconscious\", false]) || //isUnconscious\n    {!GVAR(requireSurrenderAi) && {!([_target] call EFUNC(common,isPlayer))}} || //is an AI (not a player) and doesn't require surrendering\n    {GVAR(requireSurrender) == 0} || //or don't require surrendering\n    {_target getVariable [QGVAR(isSurrendering), false]} ||  //or is surrendering\n    {(GVAR(requireSurrender) == 2) && {(currentWeapon _target) == \"\"}} //or \"SurrenderOrNoWeapon\" and no weapon\n}\n",
        "functionName": "ace_captives_fnc_canApplyHandcuffs"
      },
      {
        "fileName": "fnc_canEscortCaptive.sqf",
        "content": "/*\n * Author: PabstMirror\n * Tests if can escort target (attach)\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: target <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_canEscortCaptive\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n//Alive, handcuffed, not being escored, and not unconscious\n\n(_target getVariable [QGVAR(isHandcuffed), false]) &&\n{isNull (attachedTo _target)} &&\n{alive _target} &&\n{!(_target getVariable [\"ACE_isUnconscious\", false])} &&\n{(vehicle _unit) == _unit} &&\n{(vehicle _target) == _target}\n",
        "functionName": "ace_captives_fnc_canEscortCaptive"
      },
      {
        "fileName": "fnc_canFriskPerson.sqf",
        "content": "/*\n * Author: bux578\n * Checks the conditions for being able to frisk a unit\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: target <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_canFriskPerson\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\n_target getVariable [QGVAR(isHandcuffed), false]\n|| {_target getVariable [QGVAR(isSurrendering), false]}\n|| {_target getVariable [\"ACE_isSearchable\", false]}\n|| {_target getVariable [\"ACE_isUnconscious\", false]}\n",
        "functionName": "ace_captives_fnc_canFriskPerson"
      },
      {
        "fileName": "fnc_canLoadCaptive.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit can load the target object into a vehicle.\n *\n * Arguments:\n * 0: Unit that wants to load a captive <OBJECT>\n * 1: A captive. objNull for the first escorted captive <OBJECT>\n * 2: Vehicle to load the captive into. objNull for the nearest vehicle <OBJECT>\n *\n * Return Value:\n * Can load captive <BOOL>\n *\n * Example:\n * [bob, tom, car] call ace_captives_fnc_canLoadCaptive\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_vehicle\"];\n\n// Don't show \"Load Captive\" if unit is unconscious (already has \"Load Patient\")\nif (_target getVariable [\"ACE_isUnconscious\", false]) exitWith {false};\n\nif ((isNull _target) && {_unit getVariable [QGVAR(isEscorting), false]}) then {\n    //Looking at a vehicle while escorting, get target from attached objects:\n    {\n        if (_x getVariable [QGVAR(isHandcuffed), false]) exitWith {\n            _target = _x;\n        };\n    } forEach (attachedObjects _unit);\n};\nif (isNull _target || {(vehicle _target) != _target} || {!(_target getVariable [QGVAR(isHandcuffed), false])}) exitWith {false};\n\nif (isNull _vehicle) then {\n    // Looking at a captive unit, get nearest vehicle with valid seat:\n    _vehicle = (_target call EFUNC(common,nearestVehiclesFreeSeat)) param [0, objNull];\n} else {\n    // We have a vehicle picked, make sure it has empty seats:\n    if (_vehicle emptyPositions \"cargo\" == 0 && {_vehicle emptyPositions \"gunner\" == 0}) then {\n        _vehicle = objNull;\n    };\n};\n\n!isNull _vehicle\n",
        "functionName": "ace_captives_fnc_canLoadCaptive"
      },
      {
        "fileName": "fnc_canRemoveHandcuffs.sqf",
        "content": "/*\n * Author: PabstMirror\n * Checks the conditions for being able to remove handcuffs\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: target <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_canRemoveHandcuffs\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\n//Unit is handcuffed and not currently being escorted\n_target getVariable [QGVAR(isHandcuffed), false] &&\n{isNull (attachedTo _target)} &&\n{(vehicle _target) == _target}\n",
        "functionName": "ace_captives_fnc_canRemoveHandcuffs"
      },
      {
        "fileName": "fnc_canStopEscorting.sqf",
        "content": "/*\n * Author: PabstMirror\n * Tests if player can stop escorting.\n *\n * Arguments:\n * 0: Caller (player) <OBJECT>\n * 1: Target <OBJECT> (default: objNull)\n *\n * Return Value:\n * Can unit stop escorting another unit <BOOL>\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_canStopEscorting\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_target\", objNull]];\n\nif (isNull _target) then {\n    _target = _unit getVariable [QGVAR(escortedUnit), objNull];\n};\n\nif (isNull _target) exitWith {false};\n\n(_target in (attachedObjects _unit)) && {_target getVariable [QGVAR(isHandcuffed), false]}\n",
        "functionName": "ace_captives_fnc_canStopEscorting"
      },
      {
        "fileName": "fnc_canSurrender.sqf",
        "content": "/*\n * Author: PabstMirror\n * Checks the conditions for being able switch surrender states\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: New Surrender State to test <BOOL>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [Jean, true] call ACE_captives_fnc_canSurrender;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_newSurrenderState\"];\n\nprivate _returnValue = if (_newSurrenderState) then {\n    //no weapon equiped AND not currently surrendering and\n    GVAR(allowSurrender) && {(currentWeapon _unit) == \"\"} && {!(_unit getVariable [QGVAR(isSurrendering), false])}\n} else {\n    //is Surrendering\n    (_unit getVariable [QGVAR(isSurrendering), false])\n};\n\n_returnValue\n",
        "functionName": "ace_captives_fnc_canSurrender"
      },
      {
        "fileName": "fnc_canUnloadCaptive.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit can unload a captive from the vehicle.\n *\n * Arguments:\n * 0: Unit that wants to unload a captive (player) <OBJECT>\n * 1: A captive loaded in a vehicle <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_canUnloadCaptive;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_unit\"];\n\n// Don't show \"Unload Captive\" if unit is unconscious (already has \"Unload Patient\")\n(vehicle _unit != _unit) && {vehicle _player == _player} && {_unit getVariable [QGVAR(isHandcuffed), false]} && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\n",
        "functionName": "ace_captives_fnc_canUnloadCaptive"
      },
      {
        "fileName": "fnc_doApplyHandcuffs.sqf",
        "content": "/*\n * Author: PabstMirror\n * Checks the conditions for being able to apply handcuffs\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: target <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_doApplyHandcuffs;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n\nparams [\"_unit\", \"_target\"];\n\nplaySound3D [QUOTE(PATHTO_R(sounds\\cable_tie_zipping.ogg)), objNull, false, (getPosASL _target), 1, 1, 10];\n\n[QGVAR(setHandcuffed), [_target, true], [_target]] call CBA_fnc_targetEvent;\n\n_unit removeItem \"ACE_CableTie\";\n",
        "functionName": "ace_captives_fnc_doApplyHandcuffs"
      },
      {
        "fileName": "fnc_doEscortCaptive.sqf",
        "content": "/*\n * Author: Nic547\n * Attaches a Captive to the _unit\n *\n * Arguments:\n * 0: _unit-Player <OBJECT>\n * 1: target <OBJECT>\n * 2: _state <BOOL>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player, bob, true] call ACE_captives_fnc_doEscorteCaptive;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\",\"_state\"];\n\nif (_state) then {\n    if (_unit getVariable [QGVAR(isEscorting), false]) exitWith {};\n\n    [_unit, _target, false] call EFUNC(common,claim);\n    _unit setVariable [QGVAR(isEscorting), true, true];\n\n    _target attachTo [_unit, [0, 1, 0]];\n\n    _unit setVariable [QGVAR(escortedUnit), _target, true];\n\n    //Add Actionmenu to release captive\n    private _actionID = _unit addAction [format [\"<t color='#FF0000'>%1</t>\", localize LSTRING(StopEscorting)],\n    {[(_this select 0), ((_this select 0) getVariable [QGVAR(escortedUnit), objNull]), false] call FUNC(doEscortCaptive);},\n    nil, 20, false, true, \"\", QUOTE(!isNull (GETVAR(_target,QGVAR(escortedUnit),objNull)))];\n\n    [{\n        params [\"_args\", \"_pfID\"];\n        _args params [\"_unit\", \"_target\", \"_actionID\"];\n\n        if (_unit getVariable [QGVAR(isEscorting), false]) then {\n            if (!alive _target || {!alive _unit} || {!canStand _target} || {!canStand _unit} || {_target getVariable [\"ACE_isUnconscious\", false]} || {_unit getVariable [\"ACE_isUnconscious\", false]} || {!isNull (attachedTo _unit)}) then {\n                _unit setVariable [QGVAR(isEscorting), false, true];\n            };\n        };\n\n        if (!(_unit getVariable [QGVAR(isEscorting), false])) then {\n            [(_this select 1)] call CBA_fnc_removePerFrameHandler;\n            [objNull, _target, false] call EFUNC(common,claim);\n            detach _target;\n            _unit removeAction _actionID;\n            _unit setVariable [QGVAR(escortedUnit), objNull, true];\n        };\n    }, 0, [_unit, _target, _actionID]] call CBA_fnc_addPerFrameHandler;\n\n} else {\n    _unit setVariable [QGVAR(isEscorting), false, true];\n    _unit setVariable [QGVAR(escortedUnit), objNull, true];\n};\n",
        "functionName": "ace_captives_fnc_doEscortCaptive"
      },
      {
        "fileName": "fnc_doFriskPerson.sqf",
        "content": "/*\n * Author: bux578\n * Open the select menu with the \"personal\" items of a frisked unit.  It only shows \"handgunWeapon\", \"uniformItems\", \"vestItems\", \"backpackItems\" and \"assignedItems\" because every other item is visible on the character\n *\n * Arguments:\n * 0: player unit <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, bob] call ACE_captives_fnc_doFristPerson;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_unit\"];\n\nprivate _weapon = currentWeapon _player;\nif (_weapon == primaryWeapon _player && {_weapon != \"\"}) then {\n    [_player, \"AmovPercMstpSlowWrflDnon\", 0] call EFUNC(common,doAnimation);\n};\n\nprivate _listedItemClasses = [];\n\nprivate _actions = [localize LSTRING(FriskMenuHeader), \"\"] call ACE_Interaction_fnc_prepareSelectMenu;\n\nprivate _allGear = [];\n\nif ((handgunWeapon _unit) != \"\") then {\n    _allGear pushBack (handgunWeapon _unit);\n};\nif (count (uniformItems _unit) > 0) then {\n    _allGear = _allGear + (uniformItems _unit);\n};\nif (count (vestItems _unit) > 0) then {\n    _allGear = _allGear + (vestItems _unit);\n};\nif (count (backpackItems _unit) > 0) then {\n    _allGear = _allGear + (backpackItems _unit);\n};\nif (count (assignedItems _unit) > 0) then {\n    _allGear = _allGear + (assignedItems _unit);\n};\n\n// Handgun\n// Uniform Items\n// Vest Items\n// Backpack Items\n// Assigned Items\n{\n    if (!(_x in _listedItemClasses)) then {\n        private _item = configFile >> \"CfgMagazines\" >> _x;\n        if (isNil \"_item\" || str _item == \"\") then {  //str _item ?\n            _item = configFile >> \"CfgWeapons\" >> _x;\n        };\n        _actions = [_actions, getText(_item >> \"displayName\"), getText(_item >> \"picture\"), _x] call ACE_Interaction_fnc_addSelectableItem;\n        _listedItemClasses pushBack _x;\n    };\n} forEach (_allGear);\n\n[_actions, {call ACE_Interaction_fnc_hideMenu;}, {call ACE_Interaction_fnc_hideMenu;}] call ACE_Interaction_fnc_openSelectMenu;\n\n// don't need an \"Ok\" Button\nctrlShow [8860, false];\n",
        "functionName": "ace_captives_fnc_doFriskPerson"
      },
      {
        "fileName": "fnc_doLoadCaptive.sqf",
        "content": "/*\n * Author: commy2\n * Unit loads the target object into a vehicle. (logic same as canLoadCaptive)\n *\n * Arguments:\n * 0: Unit that wants to load a captive <OBJECT>\n * 1: A captive. objNull for the first escorted captive <OBJECT>\n * 2: Vehicle to load the captive into. objNull for the nearest vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, tom, car] call ace_captives_fnc_doLoadCaptive\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_vehicle\"];\n\nif (isNull _target && {_unit getVariable [QGVAR(isEscorting), false]}) then {\n    // Looking at a vehicle while escorting, get target from attached objects:\n    {\n        if (_x getVariable [QGVAR(isHandcuffed), false]) exitWith {\n            _target = _x;\n        };\n    } forEach (attachedObjects _unit);\n};\nif (isNull _target || {(vehicle _target) != _target} || {!(_target getVariable [QGVAR(isHandcuffed), false])}) exitWith {WARNING(\"\");};\n\nif (isNull _vehicle) then {\n    // Looking at a captive unit, get nearest vehicle with valid seat:\n    _vehicle = (_target call EFUNC(common,nearestVehiclesFreeSeat)) param [0, objNull];\n} else {\n    // We have a vehicle picked, make sure it has empty seats:\n    if (_vehicle emptyPositions \"cargo\" == 0 && {_vehicle emptyPositions \"gunner\" == 0}) then {\n        _vehicle = objNull;\n    };\n};\n\nif (isNull _vehicle) exitWith {WARNING(\"Could not find vehicle to load captive\");};\n\n_unit setVariable [QGVAR(isEscorting), false, true];\n[QGVAR(moveInCaptive), [_target, _vehicle], [_target]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_captives_fnc_doLoadCaptive"
      },
      {
        "fileName": "fnc_doRemoveHandcuffs.sqf",
        "content": "/*\n * Author: PabstMirror\n * Remove handcuffs from a target\n *\n * Arguments:\n * 0: target <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [bob, false] call ACE_captives_fnc_doRemoveHandcuffs\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\n[QGVAR(setHandcuffed), [_target, false], [_target]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_captives_fnc_doRemoveHandcuffs"
      },
      {
        "fileName": "fnc_doUnloadCaptive.sqf",
        "content": "/*\n * Author: commy2\n * Unit unloads a captive from a vehicle.\n *\n * Arguments:\n * 0: Unit that wants to unload a captive <OBJECT>\n * 1: A captive loaded in a vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, prisoner] call ACE_captives_fnc_doUnloadCaptive\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\n[QGVAR(moveOutCaptive), [_target], [_target]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_captives_fnc_doUnloadCaptive"
      },
      {
        "fileName": "fnc_findEmptyNonFFVCargoSeat.sqf",
        "content": "/*\n * Author: PabstMirror\n * Finds a free cargo seat, searching non FFV first\n *\n * Arguments:\n * 0: The Vehicle <OBJECT>\n *\n * Return Value:\n * ARRAY [seat index <NUMBER>, is FFV <BOOL>]\n *\n * Example:\n * [car1] call ACE_captives_fnc_findEmptyNonFFVCargoSeat\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_1(\"params\", _vehicle);\n\nscopeName \"main\";\n\n{\n    _x params [\"_unit\", \"_role\", \"_cargoIndex\", \"_turretPath\", \"_isPersonTurret\"];\n    if (isNull _unit && {_role == \"cargo\"} && {_cargoIndex > -1} && {!_isPersonTurret}) then {\n        [_cargoIndex, false] breakOut \"main\";\n    };\n} forEach (fullCrew [_vehicle, \"\", true]);\n\n{\n    _x params [\"_unit\", \"_role\", \"_cargoIndex\", \"_turretPath\", \"_isPersonTurret\"];\n    if (isNull _unit && {_cargoIndex > -1}) then {\n        [_cargoIndex, true] breakOut \"main\";\n    };\n} forEach (fullCrew [_vehicle, \"\", true]);\n\n[-1, false]\n",
        "functionName": "ace_captives_fnc_findEmptyNonFFVCargoSeat"
      },
      {
        "fileName": "fnc_handleAnimChangedHandcuffed.sqf",
        "content": "/*\n * Author: Nic547, commy2\n * Restart the handcuffing animation if it got interrupted. Called from a AnimChanged EH.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: New animation <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"movearm\"] call ACE_captives_fnc_handleAnimChangedHandcuffed\n *\n * Public: No\n */\n\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_newAnimation\"];\nTRACE_2(\"AnimChanged\",_unit,_newAnimation);\nif (_unit == (vehicle _unit)) then {\n    if ((_newAnimation != \"ACE_AmovPercMstpSsurWnonDnon\") && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\n        TRACE_1(\"Handcuff animation interrupted\",_newAnimation);\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\n    };\n} else {\n    private _turretPath = [];\n    {\n        _x params [\"_xUnit\", \"\", \"\", \"_xTurretPath\"];\n        if (_unit == _xUnit) exitWith {_turretPath = _xTurretPath};\n    } forEach (fullCrew (vehicle _unit));\n    TRACE_1(\"turret Path\",_turretPath);\n    if (_turretPath isEqualTo []) exitWith {};\n\n    TRACE_1(\"Handcuff (FFV) animation interrupted\",_newAnimation);\n    [_unit, \"ACE_HandcuffedFFV\", 2] call EFUNC(common,doAnimation);\n    [_unit, \"ACE_HandcuffedFFV\", 1] call EFUNC(common,doAnimation);\n};\n",
        "functionName": "ace_captives_fnc_handleAnimChangedHandcuffed"
      },
      {
        "fileName": "fnc_handleAnimChangedSurrendered.sqf",
        "content": "/*\n * Author: Nic547, commy2\n * Restart the surrendering animation if it got interrupted. Called from a AnimChanged EH.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: New animation <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"movearm\"] call ACE_captives_fnc_handleAnimChangedSurrendered\n *\n * Public: No\n */\n\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_newAnimation\"];\n\nTRACE_2(\"AnimChanged\",_unit,_newAnimation);\nif ((_newAnimation != \"ACE_AmovPercMstpSsurWnonDnon\") && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\n    TRACE_1(\"Surrender animation interrupted\",_newAnimation);\n    [_unit, \"ACE_AmovPercMstpSsurWnonDnon\", 1] call EFUNC(common,doAnimation);\n};\n",
        "functionName": "ace_captives_fnc_handleAnimChangedSurrendered"
      },
      {
        "fileName": "fnc_handleGetIn.sqf",
        "content": "/*\n * Author: commy2\n * Handles when a unit gets in to a vehicle.  Release escorted captive when entering a vehicle\n *\n * Arguments:\n * 0: _vehicle <OBJECT>\n * 1: dunno <OBJECT>\n * 2: _unit <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [car2, x, player] call ACE_captives_fnc_handleGetIn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"\",\"_unit\"];\nTRACE_2(\"params\",_vehicle,_unit);\n\nif (local _unit) then {\n    if (_unit getVariable [QGVAR(isEscorting), false]) then {\n        _unit setVariable [QGVAR(isEscorting), false, true];\n    };\n\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\n        [_unit, false] call FUNC(setSurrendered);\n    };\n\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\n        //Need to force animation for FFV turrets\n        private _turretPath = [];\n        {\n            _x params [\"_xUnit\", \"\", \"\", \"_xTurretPath\"];\n            if (_unit == _xUnit) exitWith {_turretPath = _xTurretPath};\n        } forEach (fullCrew (vehicle _unit));\n        if (!(_turretPath isEqualTo [])) then {\n            TRACE_1(\"Setting FFV Handcuffed Animation\",_turretPath);\n            [_unit, \"ACE_HandcuffedFFV\", 2] call EFUNC(common,doAnimation);\n            [_unit, \"ACE_HandcuffedFFV\", 1] call EFUNC(common,doAnimation);\n        };\n    };\n};\n",
        "functionName": "ace_captives_fnc_handleGetIn"
      },
      {
        "fileName": "fnc_handleGetOut.sqf",
        "content": "/*\n * Author: commy2\n * Handles when a captive unit gets out of a vehicle.\n *\n * Arguments:\n * 0: _vehicle <OBJECT>\n * 1: dunno <OBJECT>\n * 2: _unit <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [car2, x, player] call ACE_captives_fnc_handleGetOut\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"\", \"_unit\"];\nTRACE_2(\"params\",_vehicle,_unit);\n\nif ((local _unit) && {_unit getVariable [QGVAR(isHandcuffed), false]}) then {\n    private _cargoIndex = _unit getVariable [QGVAR(CargoIndex), -1];\n\n    if (_cargoIndex != -1) then {\n        //If captive was not \"unloaded\", then move them back into the vehicle.\n        TRACE_1(\"forcing back into vehicle\",_cargoIndex);\n        _unit moveInCargo [_vehicle, _cargoIndex];\n    } else {\n        //Getting out of vehicle:\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 2] call EFUNC(common,doAnimation);\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\n    };\n};\n",
        "functionName": "ace_captives_fnc_handleGetOut"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: Jonpas\n * Called when a unit dies.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_captives_fnc_handleKilled\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"handleKilled\",_unit);\n\n// Remove handcuffs on a dead unit, removing them after unit goes into ragdoll causes a stand-up twitch and restarts the ragdoll\nif (_unit getVariable [QGVAR(isHandcuffed), false]) then {\n    [_unit, false] call FUNC(setHandcuffed);\n};\n",
        "functionName": "ace_captives_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handleLocal.sqf",
        "content": "/*\n * Author: esteldunedain\n * Called when a unit switched locality\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Is local <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true] call ACE_captives_fnc_handleLocal\n *\n * Public: No\n */\n\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_local\"];\n\n// Make sure that if the unit is captive or surrendered it has a AnimChanged EH running ONLY on the machine that owns it\nif (_local) then {\n\n    // If the unit is handcuffed\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\n        // If the unit already has an AnimChanged EH here then there's nothing to do either\n        if (_unit getVariable [QGVAR(handcuffAnimEHID), -1] != -1) exitWith {};\n\n        // Otherwise, restart the AnimChanged EH in the new machine\n        private _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedHandcuffed)];\n        TRACE_2(\"Adding animChangedEH\",_unit,_animChangedEHID);\n        _unit setVariable [QGVAR(handcuffAnimEHID), _animChangedEHID];\n    };\n\n    // If the unit is surrendering\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\n        // If the unit already has an AnimChanged EH here then there's nothing to do either\n        if (_unit getVariable [QGVAR(surrenderAnimEHID), -1] != -1) exitWith {};\n\n        // Otherwise, restart the AnimChanged EH in the new machine\n        private _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedSurrendered)];\n        TRACE_2(\"Adding animChangedEH\",_unit,_animChangedEHID);\n        _unit setVariable [QGVAR(surrenderAnimEHID), _animChangedEHID];\n    };\n\n} else {\n\n    private _animChangedEHID = _unit getVariable [QGVAR(handcuffAnimEHID), -1];\n    if (_animChangedEHID != -1) then {\n        // If the unit had a AnimChanged EH for handcuffing in the old machine then remove it\n        TRACE_1(\"Removing animChanged EH\",_animChangedEHID);\n        _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\n        _unit setVariable [QGVAR(handcuffAnimEHID), -1];\n    };\n\n    _animChangedEHID = _unit getVariable [QGVAR(surrenderAnimEHID), -1];\n    if (_animChangedEHID != -1) then {\n        // If the unit had a AnimChanged EH for handcuffing in the old machine then remove it\n        TRACE_1(\"Removing animChanged EH\",_animChangedEHID);\n        _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\n        _unit setVariable [QGVAR(surrenderAnimEHID), -1];\n    };\n\n};\n",
        "functionName": "ace_captives_fnc_handleLocal"
      },
      {
        "fileName": "fnc_handleOnUnconscious.sqf",
        "content": "/*\n * Author: commy2, PabstMirror\n * Handles the \"ace_unconscious\" event\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 0: Is Unconsisisiouses <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true] call ACE_captives_fnc_handleOnUnconscious\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\",\"_isUnconc\"];\n\nif (!local _unit) exitWith {};\n\nif (_isUnconc) then {\n    //Knocked out: If surrendering, stop\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\n        [_unit, false] call FUNC(setSurrendered);\n    };\n} else {\n    //Woke up: if handcuffed, goto animation\n    if (_unit getVariable [QGVAR(isHandcuffed), false] && {vehicle _unit == _unit}) then {\n        [_unit] call EFUNC(common,fixLoweredRifleAnimation);\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\n    };\n};\n",
        "functionName": "ace_captives_fnc_handleOnUnconscious"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handles playerChanged.  Resets \"showHUD\" based on handcuff status\n *\n * Arguments:\n * 0: _newUnit <OBJECT>\n * 1: _oldUnit <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [bob1, bob2] call ACE_captives_fnc_handlePlayerChange\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_newUnit\",\"_oldUnit\"];\n\n//set showHUD based on new unit status:\nif ((_newUnit getVariable [QGVAR(isHandcuffed), false]) || {_newUnit getVariable [QGVAR(isSurrendering), false]}) then {\n    TRACE_1(\"Player Change (showHUD false)\",_newUnit);\n    [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\n} else {\n    TRACE_1(\"Player Change (showHUD true)\",_newUnit);\n    [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\n};\n\n//If old player was escorting, stop\nif (_oldUnit getVariable [QGVAR(isEscorting), false]) then {\n    _oldUnit setVariable [QGVAR(isEscorting), false, true];\n};\n",
        "functionName": "ace_captives_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handleRespawn.sqf",
        "content": "/*\n * Author: commy2 PabstMirror\n * Fix, because captiveNum doesn't reset properly on respawn\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Corpse <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [alive, body] call ACE_captives_fnc_handleRespawn;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\",\"_dead\"];\nTRACE_2(\"handleRespawn\",_unit,_dead);\n\nif (!local _unit) exitWith {};\n\n// Group and side respawn can potentially respawn you as a captive unit\n// Base and instant respawn cannot, so captive should be entirely reset\n// So we explicity account for the respawn type\nprivate _respawn = [0] call BIS_fnc_missionRespawnType;\n\nif (_respawn > 3) then {\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\n        _unit setVariable [QGVAR(isHandcuffed), false];\n        [_unit, true] call FUNC(setHandcuffed);\n    };\n\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\n        _unit setVariable [QGVAR(isSurrendering), false];\n        [_unit, true] call FUNC(setSurrendered);\n    };\n} else {\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\n        [_unit, false] call FUNC(setHandcuffed);\n    };\n    [_unit, \"setCaptive\", QGVAR(Handcuffed), false] call EFUNC(common,statusEffect_set);\n\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\n        [_unit, false] call FUNC(setSurrendered);\n    };\n    [_unit, \"setCaptive\", QGVAR(Surrendered), false] call EFUNC(common,statusEffect_set);\n\n    if (_unit getVariable [QGVAR(isEscorting), false]) then {\n        _unit setVariable [QGVAR(isEscorting), false, true];\n    };\n};\n",
        "functionName": "ace_captives_fnc_handleRespawn"
      },
      {
        "fileName": "fnc_handleUnitInitPost.sqf",
        "content": "/*\n * Author: commy2\n * handle captive and unconsciousness state and prevent grenades\n *\n * Arguments:\n * 0: _unit <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [bob] call ACE_captives_fnc_handleUnitInitPost\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// prevent players from throwing grenades (added to all units)\n// [_unit, \"Throw\", {systemChat \"a\"; ((_this select 1) getVariable [QGVAR(isHandcuffed), false]) || {(_this select 1) getVariable [QGVAR(isSurrendering), false]}; true}, {systemChat \"b\";}] call EFUNC(common,addActionEventhandler);\n\nif (local _unit) then {\n    // reset status on mission start\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\n        _unit setVariable [QGVAR(isHandcuffed), false];\n        [_unit, true] call FUNC(setHandcuffed);\n    };\n\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\n        _unit setVariable [QGVAR(isSurrendering), false];\n        [_unit, true] call FUNC(setSurrendered);\n    };\n};\n",
        "functionName": "ace_captives_fnc_handleUnitInitPost"
      },
      {
        "fileName": "fnc_handleZeusDisplayChanged.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles ZeusDisplayChanged event\n * Need to reset showHUD after closing zeus\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Display is now open <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob1, false] call ACE_captives_fnc_handleZeusDisplayChanged\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif ((ACE_player getVariable [QGVAR(isHandcuffed), false]) || {ACE_player getVariable [QGVAR(isSurrendering), false]}) then {\n    TRACE_1(\"Player Change (showHUD false)\",ACE_player);\n    [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\n} else {\n    TRACE_1(\"Player Change (showHUD true)\",ACE_player);\n    [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\n};\n",
        "functionName": "ace_captives_fnc_handleZeusDisplayChanged"
      },
      {
        "fileName": "fnc_moduleHandcuffed.sqf",
        "content": "/*\n * Author: PabstMirror\n * Module Function to make a unit handcuffed (can be called from editor)\n * Also used for threeden attribute expression with dummy Logic Object\n *\n * Arguments:\n * 0: The Module Logic <OBJECT>\n * 1: synced objects <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [objNull, [player], true] call ace_captives_fnc_moduleHandcuffed\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nTRACE_3(\"params\",_logic,_units,_activated);\n\nif (!_activated) exitWith {};\nif (!isServer) exitWith {};\n\n//Modules run before postInit can instal the event handler, so we need to wait a little bit\n[{\n    params [\"_units\"];\n    {\n        TRACE_2(\"event\",_x,local _x);\n        [QGVAR(setHandcuffed), [_x, true], [_x]] call CBA_fnc_targetEvent;\n    } forEach _units;\n}, [_units], 0.05] call CBA_fnc_waitAndExecute;\n\nif (!isNull _logic) then {\n    deleteVehicle _logic;\n};\n",
        "functionName": "ace_captives_fnc_moduleHandcuffed"
      },
      {
        "fileName": "fnc_moduleSettings.sqf",
        "content": "/*\n * Author: PabstMirror\n * Module for captivity settings\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [LOGIC] call ace_captives_fnc_moduleSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(allowHandcuffOwnSide), \"allowHandcuffOwnSide\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(allowSurrender), \"allowSurrender\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(requireSurrender), \"requireSurrender\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(requireSurrenderAi), \"requireSurrenderAi\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_captives_fnc_moduleSettings"
      },
      {
        "fileName": "fnc_moduleSurrender.sqf",
        "content": "/*\n * Author: PabstMirror\n * Module Function to make a unit surrender (can be called from editor)\n * Also used for threeden attribute expression with dummy Logic Object\n *\n * Arguments:\n * 0: The Module Logic <OBJECT>\n * 1: synced objects <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [objNull, [player], true] call ace_captives_fnc_moduleSurrender\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nTRACE_3(\"params\",_logic,_units,_activated);\n\nif (!_activated) exitWith {};\nif (!isServer) exitWith {};\n\n//Modules run before postInit can instal the event handler, so we need to wait a little bit\n[{\n    params [\"_units\"];\n    {\n        TRACE_2(\"event\",_x,local _x);\n        [QGVAR(setSurrendered), [_x, true], [_x]] call CBA_fnc_targetEvent;\n    } forEach _units;\n}, [_units], 0.05] call CBA_fnc_waitAndExecute;\n\nif (!isNull _logic) then {\n    deleteVehicle _logic;\n};\n",
        "functionName": "ace_captives_fnc_moduleSurrender"
      },
      {
        "fileName": "fnc_setHandcuffed.sqf",
        "content": "/*\n * Author: Nic547, commy2\n * Handcuffs a unit.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: True to take captive, false to release captive <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true] call ACE_captives_fnc_setHandcuffed;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\",\"_state\"];\nTRACE_2(\"params\",_unit,_state);\n\nif (!local _unit) exitWith {\n    WARNING(\"running setHandcuffed on remote unit\");\n};\n\nif !(missionNamespace getVariable [QGVAR(captivityEnabled), false]) exitWith {\n    // It's to soon to call this function, delay it\n    if (EGVAR(common,settingsInitFinished)) then {\n        // Settings are already initialized, but the small wait isn't over\n        [DFUNC(setHandCuffed), _this, 0.05] call CBA_fnc_waitAndExecute;\n    } else {\n        // Settings are not initialized yet\n        [DFUNC(setHandCuffed), _this] call EFUNC(common,runAfterSettingsInit);\n    };\n};\n\nif ((_unit getVariable [QGVAR(isHandcuffed), false]) isEqualTo _state) exitWith {\n    WARNING(\"setHandcuffed: current state same as new\");\n};\n\nif (_state) then {\n    _unit setVariable [QGVAR(isHandcuffed), true, true];\n    [_unit, \"setCaptive\", QGVAR(Handcuffed), true] call EFUNC(common,statusEffect_set);\n\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {  //If surrendering, stop\n        [_unit, false] call FUNC(setSurrendered);\n    };\n\n    //Set unit cargoIndex (will be -1 if dismounted)\n    _unit setVariable [QGVAR(CargoIndex), ((vehicle _unit) getCargoIndex _unit), true];\n\n    if (_unit == ACE_player) then {\n        [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\n    };\n\n    // fix anim on mission start (should work on dedicated servers)\n    [{\n        params [\"_unit\"];\n        if (!(_unit getVariable [QGVAR(isHandcuffed), false])) exitWith {};\n\n        if ((vehicle _unit) == _unit) then {\n            [_unit] call EFUNC(common,fixLoweredRifleAnimation);\n            [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\n        } else {\n            [_unit, \"ACE_HandcuffedFFV\", 2] call EFUNC(common,doAnimation);\n            [_unit, \"ACE_HandcuffedFFV\", 1] call EFUNC(common,doAnimation);\n        };\n\n        //Adds an animation changed eh\n        //If we get a change in animation then redo the animation (handles people vaulting to break the animation chain)\n        private _animChangedEHID = _unit getVariable [QGVAR(handcuffAnimEHID), -1];\n        if (_animChangedEHID != -1) then {\n            TRACE_1(\"removing animChanged EH\",_animChangedEHID);\n            _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\n        };\n        _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedHandcuffed)];\n        TRACE_2(\"Adding animChangedEH\",_unit,_animChangedEHID);\n        _unit setVariable [QGVAR(handcuffAnimEHID), _animChangedEHID];\n\n    }, [_unit], 0.01] call CBA_fnc_waitAndExecute;\n} else {\n    _unit setVariable [QGVAR(isHandcuffed), false, true];\n    [_unit, \"setCaptive\", QGVAR(Handcuffed), false] call EFUNC(common,statusEffect_set);\n\n    //remove AnimChanged EH\n    private _animChangedEHID = _unit getVariable [QGVAR(handcuffAnimEHID), -1];\n    TRACE_1(\"removing animChanged EH\",_animChangedEHID);\n    _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\n    _unit setVariable [QGVAR(handcuffAnimEHID), -1];\n\n    if (((vehicle _unit) == _unit) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\n        //Break out of hands up animation loop\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon_AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\n    };\n\n    if (_unit getVariable [QGVAR(CargoIndex), -1] != -1) then {\n        _unit setVariable [QGVAR(CargoIndex), -1, true];\n    };\n\n    if (_unit == ACE_player) then {\n        [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\n    };\n};\n\n//Global Event after changes:\n[\"ace_captiveStatusChanged\", [_unit, _state, \"SetHandcuffed\"]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_captives_fnc_setHandcuffed"
      },
      {
        "fileName": "fnc_setSurrendered.sqf",
        "content": "/*\n * Author: commy2 PabstMirror\n * Lets a unit surrender\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: True to surrender, false to un-surrender <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [Pierre, true] call ACE_captives_fnc_setSurrendered;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\",\"_state\"];\nTRACE_2(\"params\",_unit,_state);\n\nif (!local _unit) exitWith {\n    WARNING(\"running surrender on remote unit\");\n};\n\nif !(missionNamespace getVariable [QGVAR(captivityEnabled), false]) exitWith {\n    // It's to soon to call this function, delay it\n    if (EGVAR(common,settingsInitFinished)) then {\n        // Settings are already initialized, but the small wait isn't over\n        [DFUNC(setSurrendered), _this, 0.05] call CBA_fnc_waitAndExecute;\n    } else {\n        // Settings are not initialized yet\n        [DFUNC(setSurrendered), _this] call EFUNC(common,runAfterSettingsInit);\n    };\n};\n\nif ((_unit getVariable [QGVAR(isSurrendering), false]) isEqualTo _state) exitWith {\n    WARNING(\"Surrender: current state same as new\");\n};\n\nif (_state) then {\n    if ((vehicle _unit) != _unit) exitWith {WARNING(\"Cannot surrender while mounted\");};\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) exitWith {WARNING(\"Cannot surrender while handcuffed\");};\n\n    _unit setVariable [QGVAR(isSurrendering), true, true];\n\n    [_unit, \"setCaptive\", QGVAR(Surrendered), true] call EFUNC(common,statusEffect_set);\n\n    if (_unit == ACE_player) then {\n        [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\n    };\n\n    [_unit] call EFUNC(common,fixLoweredRifleAnimation);\n    [_unit, \"ACE_AmovPercMstpSsurWnonDnon\", 1] call EFUNC(common,doAnimation);\n\n    // fix anim on mission start (should work on dedicated servers)\n    [{\n        params [\"_unit\"];\n        if (_unit getVariable [QGVAR(isSurrendering), false] && {(vehicle _unit) == _unit}) then {\n            //Adds an animation changed eh\n            //If we get a change in animation then redo the animation (handles people vaulting to break the animation chain)\n            private _animChangedEHID = _unit getVariable [QGVAR(surrenderAnimEHID), -1];\n            if (_animChangedEHID != -1) then {\n                TRACE_1(\"removing animChanged EH\",_animChangedEHID);\n                _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\n            };\n            _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedSurrendered)];\n            _unit setVariable [QGVAR(surrenderAnimEHID), _animChangedEHID];\n        };\n    }, [_unit], 0.01] call CBA_fnc_waitAndExecute;\n} else {\n    _unit setVariable [QGVAR(isSurrendering), false, true];\n    [_unit, \"setCaptive\", QGVAR(Surrendered), false] call EFUNC(common,statusEffect_set);\n\n    //remove AnimChanged EH\n    private _animChangedEHID = _unit getVariable [QGVAR(surrenderAnimEHID), -1];\n    _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\n    _unit setVariable [QGVAR(surrenderAnimEHID), -1];\n\n    if (_unit == ACE_player) then {\n        //only re-enable HUD if not handcuffed\n        if (!(_unit getVariable [QGVAR(isHandcuffed), false])) then {\n            [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\n        };\n    };\n\n    if (!alive _unit) exitWith {};\n    if (_unit getVariable [\"ACE_isUnconscious\", false]) exitWith {};  //don't touch animations if unconscious\n\n    //if we are in \"hands up\" animationState, crack it now\n    if (((vehicle _unit) == _unit) && {(animationState _unit) == \"ACE_AmovPercMstpSsurWnonDnon\"}) then {\n        [_unit, \"ACE_AmovPercMstpSsurWnonDnon_AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\n    } else {\n        //spin up a PFEH, to watching animationState for the next 20 seconds to make sure we don't enter \"hands up\"\n        //Handles long animation chains\n        [{\n            params [\"_args\", \"_pfID\"];\n            _args params [\"_unit\", \"_maxTime\"];\n            //If waited long enough or they re-surrendered or they are unconscious, exit loop\n            if ((CBA_missionTime > _maxTime) || {_unit getVariable [QGVAR(isSurrendering), false]} || {_unit getVariable [\"ACE_isUnconscious\", false]}) exitWith {\n                [_pfID] call CBA_fnc_removePerFrameHandler;\n            };\n            //Only break animation if they are actualy the \"hands up\" animation (because we are using switchmove there won't be an transition)\n            if (((vehicle _unit) == _unit) && {(animationState _unit) == \"ACE_AmovPercMstpSsurWnonDnon\"}) exitWith {\n                [_pfID] call CBA_fnc_removePerFrameHandler;\n                //Break out of hands up animation loop\n                [_unit, \"ACE_AmovPercMstpSsurWnonDnon_AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\n            };\n        }, 0, [_unit, (CBA_missionTime + 20)]] call CBA_fnc_addPerFrameHandler;\n    };\n};\n\n//Global Event after changes:\n[\"ace_captiveStatusChanged\", [_unit, _state, \"SetSurrendered\"]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_captives_fnc_setSurrendered"
      },
      {
        "fileName": "fnc_vehicleCaptiveMoveIn.sqf",
        "content": "/*\n * Author: PabstMirror\n * Loads a captive into a vehicle\n *\n * Arguments:\n * 0: The Captive <OBJECT>\n * 1: The Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, car1] call ACE_captives_fnc_vehicleCaptiveMoveIn;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\",\"_vehicle\"];\nTRACE_2(\"params\",_target,_vehicle);\n\nprivate _getSeat = [_vehicle] call FUNC(findEmptyNonFFVCargoSeat);\nTRACE_1(\"free cargo seat\",_getSeat);\n_getSeat params [\"_cargoIndex\"];\nif (_cargoIndex == -1) exitWith {WARNING(\"cargo index -1\");};\n\n_target moveInCargo [_vehicle, _cargoIndex];\n_target assignAsCargoIndex [_vehicle, _cargoIndex];\n\n_target setVariable [QGVAR(CargoIndex), _cargoIndex, true];\n",
        "functionName": "ace_captives_fnc_vehicleCaptiveMoveIn"
      },
      {
        "fileName": "fnc_vehicleCaptiveMoveOut.sqf",
        "content": "/*\n * Author: PabstMirror\n * Unloads a captive from a vehicle.\n *\n * Arguments:\n * 0: Captive Unit being unloaded <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_captives_fnc_vehicleCaptiveMoveOut;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\n_unit setVariable [QGVAR(CargoIndex), -1, true];\n\nmoveOut _unit;\n[_unit, \"ACE_AmovPercMstpScapWnonDnon\", 2] call EFUNC(common,doAnimation);\n[_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\nunassignVehicle _unit;\n",
        "functionName": "ace_captives_fnc_vehicleCaptiveMoveOut"
      }
    ]
  },
  {
    "component": "cargo",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_addCargo\", {_this call FUNC(addCargoItem)}] call CBA_fnc_addEventHandler;\n[QGVAR(paradropItem), {_this call FUNC(paradropItem)}] call CBA_fnc_addEventHandler;\n\n[\"ace_loadCargo\", {\n    params [\"_item\", \"_vehicle\"];\n    TRACE_2(\"LoadCargo EH\",_item,_vehicle);\n\n    private _loaded = [_item, _vehicle] call FUNC(loadItem);\n\n    // Show hint as feedback\n    private _hint = [LSTRING(LoadingFailed), LSTRING(LoadedItem)] select _loaded;\n    private _itemName = getText (configFile >> \"CfgVehicles\" >> typeOf _item >> \"displayName\");\n    private _vehicleName = getText (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"displayName\");\n\n    [[_hint, _itemName, _vehicleName], 3.0] call EFUNC(common,displayTextStructured);\n\n    if (_loaded) then {\n        // Invoke listenable event\n        [\"ace_cargoLoaded\", [_item, _vehicle]] call CBA_fnc_globalEvent;\n    };\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_unloadCargo\", {\n    params [\"_item\", \"_vehicle\", [\"_unloader\", objNull]];\n    TRACE_3(\"UnloadCargo EH\",_item,_vehicle,_unloader);\n\n    private _unloaded = [_item, _vehicle, _unloader] call FUNC(unloadItem); //returns true if sucessful\n\n    private _itemClass = if (_item isEqualType \"\") then {_item} else {typeOf _item};\n\n    // Show hint as feedback\n    private _hint = [LSTRING(UnloadingFailed), LSTRING(UnloadedItem)] select _unloaded;\n    private _itemName = getText (configFile >> \"CfgVehicles\" >> _itemClass >> \"displayName\");\n    private _vehicleName = getText (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"displayName\");\n\n    [[_hint, _itemName, _vehicleName], 3.0] call EFUNC(common,displayTextStructured);\n\n    if (_unloaded) then {\n        // Invoke listenable event\n        [\"ace_cargoUnloaded\", [_item, _vehicle]] call CBA_fnc_globalEvent;\n    };\n\n    // TOOO maybe drag/carry the unloaded item?\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(serverUnload), {\n    params [\"_item\", \"_emptyPosAGL\"];\n\n    _item hideObjectGlobal false;\n    _item setPosASL (AGLtoASL _emptyPosAGL);\n\n    if ((getText (configFile >> \"CfgVehicles\" >> (typeOf _item) >> \"simulation\")) == \"carx\") then {\n        TRACE_1(\"re-enabling car damage\",_item);\n        [_item, \"blockDamage\", \"ACE_cargo\", false] call EFUNC(common,statusEffect_set);\n    };\n}] call CBA_fnc_addEventHandler;\n\n// Private events to handle adding actions globally via public functions\n[QGVAR(initObject), DFUNC(initObject)] call CBA_fnc_addEventHandler;\n[QGVAR(initVehicle), DFUNC(initVehicle)] call CBA_fnc_addEventHandler;\n\n// Add all the vehicle init EHs (require initPost for set/get variables)\n[\"LandVehicle\", \"initPost\", DFUNC(initVehicle), nil, nil, true] call CBA_fnc_addClassEventHandler;\n[\"Air\", \"initPost\", DFUNC(initVehicle), nil, nil, true] call CBA_fnc_addClassEventHandler;\n[\"Ship_F\", \"initPost\", DFUNC(initVehicle), nil, nil, true] call CBA_fnc_addClassEventHandler;\n\n// Add all the object init EHs\n[\"StaticWeapon\", \"initPost\", DFUNC(initObject), nil, nil, true] call CBA_fnc_addClassEventHandler;\n[\"Land_PortableLight_single_F\", \"initPost\", DFUNC(initObject), nil, nil, true] call CBA_fnc_addClassEventHandler;\n[\"ACE_ConcertinaWireCoil\", \"initPost\", DFUNC(initObject), nil, nil, true] call CBA_fnc_addClassEventHandler;\n\n// Add all the vehicle/object init EHs\n[\"ThingX\", \"initPost\", {\n    _this call DFUNC(initObject); _this call DFUNC(initVehicle);\n}, nil, nil, true] call CBA_fnc_addClassEventHandler;\n[\"Land_PaperBox_closed_F\", \"initPost\", {\n    _this call DFUNC(initObject); _this call DFUNC(initVehicle);\n}, nil, nil, true] call CBA_fnc_addClassEventHandler;\n[\"PlasticCase_01_base_F\", \"initPost\", {\n    _this call DFUNC(initObject); _this call DFUNC(initVehicle);\n}, nil, nil, true] call CBA_fnc_addClassEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(initializedItemClasses) = [];\nGVAR(initializedVehicleClasses) = [];\nGVAR(cargoHolderTypes) = [\"Car\", \"Air\", \"Tank\", \"Ship\", \"Cargo_base_F\", \"Land_PaperBox_closed_F\"];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addCargoItem.sqf",
        "content": "/*\n * Author: Glowbal, Jonpas\n * Adds a cargo item to the vehicle.\n *\n * Arguments:\n * 0: Item Classname <STRING>\n * 1: Vehicle <OBJECT>\n * 2: Amount <NUMBER> (default: 1)\n * 3: Show Hint <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"item\", vehicle] call ace_cargo_fnc_addCargoItem\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_itemClass\", \"_vehicle\", [\"_amount\", 1], [\"_showHint\", false, [false]]];\nTRACE_3(\"params\",_itemClass,_vehicle,_amount);\n\nfor \"_i\" from 1 to _amount do {\n    [_itemClass, _vehicle] call FUNC(loadItem);\n};\n\n// Invoke listenable event\n[\"ace_cargoAdded\", [_itemClass, _vehicle, _amount]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_cargo_fnc_addCargoItem"
      },
      {
        "fileName": "fnc_addCargoVehiclesActions.sqf",
        "content": "/*\n * Author: Dystopian\n * Create actions for nearest vehicles with cargo.\n *\n * Arguments:\n * 0: Target <OBJECT>\n *\n * Return Value:\n * Child actions <ARRAY>\n *\n * Example:\n * [cursorObject] call ace_cargo_fnc_addCargoVehiclesActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _statement = {\n    params [\"_target\", \"_player\", \"_vehicle\"];\n    [_player, _target, _vehicle] call FUNC(startLoadIn);\n};\n\nprivate _vehicles = (nearestObjects [_target, GVAR(cargoHolderTypes), (MAX_LOAD_DISTANCE + 10)]) select {\n    private _hasCargoConfig = 1 == getNumber (configFile >> \"CfgVehicles\" >> typeOf _x >> QGVAR(hasCargo));\n    private _hasCargoPublic = _x getVariable [QGVAR(hasCargo), false];\n    (_hasCargoConfig || {_hasCargoPublic}) && {_x != _target} &&\n    {([_target, _x] call EFUNC(interaction,getInteractionDistance)) < MAX_LOAD_DISTANCE}\n};\n\n[_vehicles, _statement, _target] call EFUNC(interact_menu,createVehiclesActions)\n",
        "functionName": "ace_cargo_fnc_addCargoVehiclesActions"
      },
      {
        "fileName": "fnc_canLoadItemIn.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if item can be loaded into other Object.\n *\n * Arguments:\n * 0: Item <OBJECT or STRING>\n * 1: Holder Object (Vehicle) <OBJECT>\n *\n * Return Value:\n * Can load in <BOOL>\n *\n * Example:\n * [item, holder] call ace_cargo_fnc_canLoadItemIn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_item\", \"\", [objNull,\"\"]], \"_vehicle\"];\n\nif (speed _vehicle > 1 || {((getPos _vehicle) select 2) > 3}) exitWith {TRACE_1(\"vehicle not stable\",_vehicle); false};\n\nif (_item isEqualType objNull && {{alive _x && {getText (configFile >> \"CfgVehicles\" >> typeOf _x >> \"simulation\") != \"UAVPilot\"}} count crew _item > 0}) exitWith {\n    TRACE_1(\"item is occupied\",_item);\n    false\n};\n\nprivate _itemSize = [_item] call FUNC(getSizeItem);\nprivate _validItem = false;\nif (_item  isEqualType \"\") then {\n    _validItem =\n        isClass (configFile >> \"CfgVehicles\" >> _item) &&\n        {getNumber (configFile >> \"CfgVehicles\" >> _item >> QGVAR(canLoad)) == 1};\n} else {\n    _validItem =\n        (alive _item) &&\n        {([_item, _vehicle] call EFUNC(interaction,getInteractionDistance)) < MAX_LOAD_DISTANCE};\n};\n\n_validItem &&\n{_itemSize > 0} &&\n{alive _vehicle} &&\n{_itemSize <= ([_vehicle] call FUNC(getCargoSpaceLeft))} &&\n{locked _vehicle < 2}\n",
        "functionName": "ace_cargo_fnc_canLoadItemIn"
      },
      {
        "fileName": "fnc_canUnloadItem.sqf",
        "content": "/*\n * Author: Glowbal, ViperMaul\n * Check if item can be unloaded.\n *\n * Arguments:\n * 0: loaded Object <OBJECT>\n * 1: Object <OBJECT>\n * 2: Unloader (player) <OBJECT> (default: objNull)\n *\n * Return Value:\n * Can be unloaded <BOOL>\n *\n * Example:\n * [item, holder] call ace_cargo_fnc_canUnloadItem\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\", \"_vehicle\", [\"_unloader\", objNull]];\nTRACE_2(\"params\",_item,_vehicle);\n\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\nif !(_item in _loaded) exitWith {false};\n\nprivate _itemClass = if (_item isEqualType \"\") then {_item} else {typeOf _item};\n\nprivate _emptyPos = [_vehicle, _itemClass, _unloader] call EFUNC(common,findUnloadPosition);\n\n(count _emptyPos) == 3\n",
        "functionName": "ace_cargo_fnc_canUnloadItem"
      },
      {
        "fileName": "fnc_getCargoSpaceLeft.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the cargo space left on object.\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * Cargo space left <NUMBER>\n *\n * Example:\n * [object] call ace_cargo_fnc_getCargoSpaceLeft\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\n// TRACE_1(\"params\",_object);\n\n(_object getVariable [QGVAR(space), getNumber (configFile >> \"CfgVehicles\" >> typeOf _object >> QGVAR(space))]) max 0\n",
        "functionName": "ace_cargo_fnc_getCargoSpaceLeft"
      },
      {
        "fileName": "fnc_getSizeItem.sqf",
        "content": "/*\n * Author: Glowbal, SilentSpike\n * Get the cargo size of an object.\n *\n * Arguments:\n * 0: Item <OBJECT or STRING>\n *\n * Return Value:\n * Cargo size <NUMBER> (default: -1)\n *\n * Example:\n * [object] call ace_cargo_fnc_getSizeItem\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\"];\n\n// Virtual items are much easier to deal with\nif (_item isEqualType \"\") then {\n    CARGO_SIZE(_item)\n} else {\n    if (isNil {_item getVariable QGVAR(size)}) then {\n        CARGO_SIZE(typeOf _item)\n    } else {\n        _item getVariable QGVAR(size)\n    };\n};\n",
        "functionName": "ace_cargo_fnc_getSizeItem"
      },
      {
        "fileName": "fnc_handleDestroyed.sqf",
        "content": "/*\n * Author: Glowbal\n * Handle object being destroyed. Only runs on server.\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [object] call ace_cargo_fnc_handleDestroyed\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_1(\"params\",_vehicle);\n\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\nif (_loaded isEqualTo []) exitWith {};\n\n{\n    // TODO Do we want to be able to recover destroyed equipment?\n    if (_x isEqualType objNull) then {\n        deleteVehicle _x;\n    };\n    nil\n} count _loaded;\n\n[_vehicle] call FUNC(validateCargoSpace);\n",
        "functionName": "ace_cargo_fnc_handleDestroyed"
      },
      {
        "fileName": "fnc_initObject.sqf",
        "content": "/*\n * Author: Glowbal, SilentSpike\n * Initializes variables for loadable objects. Called from init EH.\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [object] call ace_cargo_fnc_initObject\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\nprivate _type = typeOf _object;\nTRACE_2(\"params\",_object,_type);\n\n// If object had size given to it via eden/public then override config canLoad setting\nprivate _canLoadPublic = _object getVariable [QGVAR(canLoad), false];\nif (!(_canLoadPublic isEqualType false)) then {\n    WARNING_4(\"%1[%2] - Variable %3 is %4 - Should be bool\",_object,_type,QGVAR(canLoad),_canLoadPublic);\n};\nprivate _canLoadConfig = getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(canLoad)) == 1;\n\n// Nothing to do here if object can't be loaded\nif !(_canLoadConfig || {_canLoadPublic in [true, 1]}) exitWith {};\n\n// Servers and HCs do not require action menus (beyond this point)\nif !(hasInterface) exitWith {};\n\n// Unnecessary to add actions to an object class that's already got them\nif (_type in GVAR(initializedItemClasses)) exitWith {};\nif (_object getVariable [QGVAR(initObject),false]) exitWith {};\n\n// Objects given size via eden have their actions added to the object\n// So this function may run for multiple of the same class in that case\nif (_canLoadConfig) then {\n    GVAR(initializedItemClasses) pushBack _type;\n    TRACE_1(\"Adding load cargo action to class\", _type);\n} else {\n    _object setVariable [QGVAR(initObject),true];\n    TRACE_1(\"Adding load cargo action to object\", _object);\n};\n\n// Vehicles with passengers inside are prevented from being loaded in `fnc_canLoadItemIn`\nprivate _condition = {\n    //IGNORE_PRIVATE_WARNING [\"_target\", \"_player\"];\n    GVAR(enable) &&\n    {(_target getVariable [QGVAR(canLoad), getNumber (configFile >> \"CfgVehicles\" >> (typeOf _target) >> QGVAR(canLoad))]) in [true, 1]} &&\n    {locked _target < 2} &&\n    {alive _target} &&\n    {[_player, _target, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith)} &&\n    {0 < {\n            private _type = typeOf _x;\n            private _hasCargoPublic = _x getVariable [QGVAR(hasCargo), false];\n            private _hasCargoConfig = getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(hasCargo)) == 1;\n            (_hasCargoPublic || _hasCargoConfig) && {_x != _target} &&\n            {([_target, _x] call EFUNC(interaction,getInteractionDistance)) < MAX_LOAD_DISTANCE}\n        } count (nearestObjects [_player, GVAR(cargoHolderTypes), (MAX_LOAD_DISTANCE + 10)])}\n};\nprivate _statement = {\n    params [\"_target\", \"_player\"];\n    [_player, _target] call FUNC(startLoadIn);\n};\nprivate _text = localize LSTRING(loadObject);\nprivate _icon = \"a3\\ui_f\\data\\IGUI\\Cfg\\Actions\\loadVehicle_ca.paa\";\n\nprivate _action = [QGVAR(load), _text, _icon, _statement, _condition, {call FUNC(addCargoVehiclesActions)}] call EFUNC(interact_menu,createAction);\nif (_canLoadConfig) then {\n    [_type, 0, [\"ACE_MainActions\"], _action] call EFUNC(interact_menu,addActionToClass);\n} else {\n    [_object, 0, [\"ACE_MainActions\"], _action] call EFUNC(interact_menu,addActionToObject);\n};\n\n",
        "functionName": "ace_cargo_fnc_initObject"
      },
      {
        "fileName": "fnc_initVehicle.sqf",
        "content": "/*\n * Author: Glowbal\n * Initializes vehicle, adds open cargo menu action if available.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle] call ace_cargo_fnc_initVehicle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_1(\"params\", _vehicle);\n\nprivate _type = typeOf _vehicle;\n\n// If vehicle had space given to it via eden/public then override config hasCargo setting\nprivate _hasCargoPublic = _vehicle getVariable [QGVAR(hasCargo), false];\nprivate _hasCargoConfig = getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(hasCargo)) == 1;\n\n// Nothing to do here if vehicle has no cargo space\nif !(_hasCargoConfig || _hasCargoPublic) exitWith {};\n\n// Check if cargo is in cargo holder types (checked when trying to search for loadable objects)\nprivate _addCargoType = true;\n{\n    if (_type isKindOf _x) exitWith {_addCargoType = false};\n} forEach GVAR(cargoHolderTypes);\nTRACE_2(\"\",_addCargoType,_type);\nif (_addCargoType) then {\n    GVAR(cargoHolderTypes) pushBack _type;\n};\n\n// Vehicle can have default ace cargo in its config\nif (isServer) then {\n    {\n        if (isClass _x) then {\n            private _cargoClassname = getText (_x >> \"type\");\n            private _cargoCount = getNumber (_x >> \"amount\");\n            TRACE_3(\"adding ACE_Cargo\", (configName _x), _cargoClassname, _cargoCount);\n            [\"ace_addCargo\", [_cargoClassname, _vehicle, _cargoCount]] call CBA_fnc_localEvent;\n        };\n    } count (\"true\" configClasses (configFile >> \"CfgVehicles\" >> _type >> \"ACE_Cargo\" >> \"Cargo\"));\n};\n\n// Servers and HCs do not require action menus (beyond this point)\nif !(hasInterface) exitWith {};\n\n// Unnecessary to add actions to a vehicle class that's already got them\nif (_type in GVAR(initializedVehicleClasses)) exitWith {};\nif (_vehicle getVariable [QGVAR(initVehicle),false]) exitWith {};\n\n// Vehicles given cargo via eden have their actions added to the object\n// So this function may run for multiple of the same class in that case\nif (_hasCargoConfig) then {\n    GVAR(initializedVehicleClasses) pushBack _type;\n    TRACE_1(\"Adding unload cargo action to class\", _type);\n} else {\n    _vehicle setVariable [QGVAR(initVehicle),true];\n    TRACE_1(\"Adding unload cargo action to object\", _vehicle);\n};\n\nprivate _condition = {\n    //IGNORE_PRIVATE_WARNING [\"_target\", \"_player\"];\n    GVAR(enable) &&\n    {(_target getVariable [QGVAR(hasCargo), getNumber (configFile >> \"CfgVehicles\" >> (typeOf _target) >> QGVAR(hasCargo)) == 1])} &&\n    {locked _target < 2} &&\n    {([_player, _target] call EFUNC(interaction,getInteractionDistance)) < MAX_LOAD_DISTANCE} &&\n    {alive _target} &&\n    {[_player, _target, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith)}\n};\nprivate _statement = {\n    //IGNORE_PRIVATE_WARNING [\"_target\", \"_player\"];\n    GVAR(interactionVehicle) = _target;\n    GVAR(interactionParadrop) = false;\n    createDialog QGVAR(menu);\n};\nprivate _text = localize LSTRING(openMenu);\nprivate _icon = \"\";\n\nprivate _action = [QGVAR(openMenu), _text, _icon, _statement, _condition] call EFUNC(interact_menu,createAction);\nif (_hasCargoConfig) then {\n    [_type, 0, [\"ACE_MainActions\"], _action] call EFUNC(interact_menu,addActionToClass);\n} else {\n    [_vehicle, 0, [\"ACE_MainActions\"], _action] call EFUNC(interact_menu,addActionToObject);\n};\n\n// Add the paradrop self interaction for planes and helicopters\nif (_vehicle isKindOf \"Air\") then {\n    private _condition = {\n        //IGNORE_PRIVATE_WARNING [\"_target\", \"_player\"];\n        GVAR(enable) && {[_player, _target, []] call EFUNC(common,canInteractWith)} && {\n            private _turretPath = _player call CBA_fnc_turretPath;\n            (_player == (driver _target)) || // pilot\n            {(getNumber (([_target, _turretPath] call CBA_fnc_getTurret) >> \"isCopilot\")) == 1} || // coPilot\n            {_turretPath in (getArray (configFile >> \"CfgVehicles\" >> (typeOf _target) >> QGVAR(loadmasterTurrets)))}} // loadMaster turret from config\n    };\n    private _statement = {\n        //IGNORE_PRIVATE_WARNING [\"_target\", \"_player\"];\n        GVAR(interactionVehicle) = _target;\n        GVAR(interactionParadrop) = true;\n        createDialog QGVAR(menu);\n    };\n    private _text = localize LSTRING(openMenu);\n    private _icon = \"\";\n\n    private _action = [QGVAR(openMenu), _text, _icon, _statement, _condition] call EFUNC(interact_menu,createAction);\n    if (_hasCargoConfig) then {\n        [_type, 1, [\"ACE_SelfActions\"], _action] call EFUNC(interact_menu,addActionToClass); // self action on the vehicle\n    } else {\n        [_vehicle, 1, [\"ACE_SelfActions\"], _action] call EFUNC(interact_menu,addActionToObject);\n    };\n};\n",
        "functionName": "ace_cargo_fnc_initVehicle"
      },
      {
        "fileName": "fnc_loadItem.sqf",
        "content": "/*\n * Author: Glowbal\n * Load object into vehicle.\n * Objects loaded via classname remain virtual until unloaded.\n *\n * Arguments:\n * 0: Item <OBJECT or STRING>\n * 1: Vehicle <OBJECT>\n *\n * Return Value:\n * Object loaded <BOOL>\n *\n * Example:\n * [object, vehicle] call ace_cargo_fnc_loadItem\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_item\",\"\",[objNull,\"\"]], [\"_vehicle\",objNull,[objNull]]];\nTRACE_2(\"params\",_item,_vehicle);\n\nif !([_item, _vehicle] call FUNC(canLoadItemIn)) exitWith {TRACE_2(\"cannot load\",_item,_vehicle); false};\n\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\n_loaded pushBack _item;\n_vehicle setVariable [QGVAR(loaded), _loaded, true];\n\nTRACE_1(\"added to loaded array\",_loaded);\n\nprivate _space = [_vehicle] call FUNC(getCargoSpaceLeft);\nprivate _itemSize = [_item] call FUNC(getSizeItem);\n_vehicle setVariable [QGVAR(space), _space - _itemSize, true];\n\nif (_item isEqualType objNull) then {\n    detach _item;\n    _item attachTo [_vehicle,[0,0,-100]];\n    [QEGVAR(common,hideObjectGlobal), [_item, true]] call CBA_fnc_serverEvent;\n    \n    // Cars below water will take engine damage over time and eventualy become \"water logged\" and unfixable (because of negative z attach)\n    if ((getText (configFile >> \"CfgVehicles\" >> (typeOf _item) >> \"simulation\")) == \"carx\") then {\n        TRACE_1(\"disabling car damage\",_item);\n        [_item, \"blockDamage\", \"ACE_cargo\", true] call EFUNC(common,statusEffect_set);\n    };\n};\n\ntrue\n",
        "functionName": "ace_cargo_fnc_loadItem"
      },
      {
        "fileName": "fnc_makeLoadable.sqf",
        "content": "/*\n * Author: PabstMirror\n * Makes any object loadable.  Needs to be called on all machines.\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Set as loadable (default: true) <BOOL><SCALAR>\n * 2: Size. (default: 1) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorTarget, true, 1] call ace_cargo_fnc_makeLoadable\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n// Only run this after the settings are initialized\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(makeLoadable), _this];\n};\n\nACE_DEPRECATED(QFUNC(makeLoadable),\"3.12.0\",QFUNC(setSize));\n\nparams [[\"_object\", objNull, [objNull]], [\"_canLoad\", true, [false, 0]], [\"_setSize\", 1, [0]]];\nTRACE_3(\"params\",_object,_canLoad,_setSize);\n\nif (isNull _object) exitWith {TRACE_1(\"null\",_object);};\nprivate _type = typeOf _object;\nprivate _cfgCanLoad = getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(canLoad));\nprivate _curSize = [_object] call FUNC(getSizeItem);\n\n_canLoad = [0, 1] select _canLoad; // Convert true/false to scalar\n\nif ((_canLoad == 1) && {_setSize <= 0}) exitWith {\n    ERROR(\"ace_cargo_fnc_makeLoadable (size <= 0) when making loadable\");\n};\n\nTRACE_2(\"setVar if different from config\",_canLoad,_cfgCanLoad);\nif (_canLoad != _cfgCanLoad) then {\n    _object setVariable [QGVAR(canLoad), _canLoad == 1];\n};\n\nTRACE_2(\"setVar if different from config\",_setSize,_curSize);\nif (_setSize != _curSize) then {\n    _object setVariable [QGVAR(size), _setSize];\n};\n\n//Add the load actions to the object class if not already added\n[_object] call FUNC(initObject);\n\nnil\n",
        "functionName": "ace_cargo_fnc_makeLoadable"
      },
      {
        "fileName": "fnc_moduleMakeLoadable.sqf",
        "content": "/*\n * Author: PabstMirror\n * Module to make an object loadable.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic, [box], true] call ace_cargo_fnc_moduleMakeLoadable\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_objects\", \"_activated\"];\nTRACE_3(\"params\",_logic,_objects,_activated);\n\nACE_DEPRECATED(QFUNC(moduleMakeLoadable),\"3.12.0\",\"Eden editor object attributes\");\n\nif ((isNull _logic) || {!_activated}) exitWith {};\nif (_objects isEqualTo []) exitWith {\n    WARNING_1(\"ace_cargo_fnc_moduleMakeLoadable has no synced objects [%1]\", _logic);\n};\n\nprivate _canLoad = _logic getVariable [\"canLoad\", true];\nprivate _setSize = _logic getVariable [\"setSize\", 1];\nTRACE_2(\"settings\",_canLoad,_setSize);\n\n{\n    [_x, _canLoad, _setSize] call FUNC(makeLoadable);\n} forEach _objects;\n",
        "functionName": "ace_cargo_fnc_moduleMakeLoadable"
      },
      {
        "fileName": "fnc_moduleSettings.sqf",
        "content": "/*\n * Author: Glowbal\n * Module for adjusting the cargo settings\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * function = \"ace_cargo_fnc_loadItem\"\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(enable), \"enable\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(paradropTimeCoefficent), \"paradropTimeCoefficent\"] call EFUNC(common,readSettingFromModule);\n\nINFO(\"Cargo Module Initialized.\");\n",
        "functionName": "ace_cargo_fnc_moduleSettings"
      },
      {
        "fileName": "fnc_onMenuOpen.sqf",
        "content": "/*\n * Author: Glowbal\n * Handle the UI data display.\n *\n * Arguments:\n * 0: Display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [display] call ace_cargo_fnc_onMenuOpen\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_display\"];\n\nuiNamespace setVariable [QGVAR(menuDisplay), _display];\n\nif (GVAR(interactionParadrop)) then {\n    (_display displayCtrl 12) ctrlSetText (localize LSTRING(paradropButton));\n};\n\n[{\n    disableSerialization;\n    private _display = uiNamespace getVariable QGVAR(menuDisplay);\n    if (isnil \"_display\") exitWith {\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    if (isNull GVAR(interactionVehicle) || {(([ACE_player, GVAR(interactionVehicle)] call EFUNC(interaction,getInteractionDistance)) >= MAX_LOAD_DISTANCE) && {(vehicle ACE_player) != GVAR(interactionVehicle)}}) exitWith {\n        closeDialog 0;\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    private _loaded = GVAR(interactionVehicle) getVariable [QGVAR(loaded), []];\n    private _ctrl = _display displayCtrl 100;\n    private _label = _display displayCtrl 2;\n\n    lbClear _ctrl;\n    {\n        private _class = if (_x isEqualType \"\") then {_x} else {typeOf _x};\n        private _displayName = getText (configfile >> \"CfgVehicles\" >> _class >> \"displayName\");\n        if (GVAR(interactionParadrop)) then {\n            _ctrl lbAdd format [\"%1 (%2s)\", _displayName, GVAR(paradropTimeCoefficent) * ([_class] call FUNC(getSizeItem))];\n        } else {\n            _ctrl lbAdd _displayName;\n        };\n\n        true\n    } count _loaded;\n\n    _label ctrlSetText format[localize LSTRING(labelSpace), [GVAR(interactionVehicle)] call DFUNC(getCargoSpaceLeft)];\n}, 0, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_cargo_fnc_onMenuOpen"
      },
      {
        "fileName": "fnc_paradropItem.sqf",
        "content": "/*\n * Author: marc_book, commy2, CAA-Picard\n * Unload and paradrop object from plane or helicopter.\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Vehicle <OBJECT>\n *\n * Return Value:\n * Object unloaded <BOOL>\n *\n * Example:\n * [object, vehicle] call ace_cargo_fnc_paradropItem\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\", \"_vehicle\"];\nTRACE_2(\"params\",_item,_vehicle);\n\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\n\nif !(_item in _loaded) exitWith {false};\n\n// unload item from cargo\n_loaded deleteAt (_loaded find _item);\n_vehicle setVariable [QGVAR(loaded), _loaded, true];\n\nprivate _cargoSpace = [_vehicle] call FUNC(getCargoSpaceLeft);\nprivate _itemSize = [_item] call FUNC(getSizeItem);\n_vehicle setVariable [QGVAR(space), (_cargoSpace + _itemSize), true];\n\n(boundingBoxReal _vehicle) params [\"_bb1\", \"_bb2\"];\nprivate _distBehind = ((_bb1 select 1) min (_bb2 select 1)) - 4; // 4 meters behind max bounding box\nTRACE_1(\"\",_distBehind);\nprivate _posBehindVehicleAGL = _vehicle modelToWorld [0, _distBehind, -2];\n\n\nprivate _itemObject = if (_item isEqualType objNull) then {\n    detach _item;\n    // hideObjectGlobal must be executed before setPos to ensure light objects are rendered correctly\n    // do both on server to ensure they are executed in the correct order\n    [QGVAR(serverUnload), [_item, _posBehindVehicleAGL]] call CBA_fnc_serverEvent;\n    _item\n} else {\n    private _newItem = createVehicle [_item, _posBehindVehicleAGL, [], 0, \"\"];\n    _newItem setPosASL (AGLtoASL _posBehindVehicleAGL);\n    _newItem\n};\n\n_itemObject setVelocity ((velocity _vehicle) vectorAdd ((vectorNormalized (vectorDir _vehicle)) vectorMultiply -5));\n\n// open parachute and ir light effect\n[{\n    params [\"_item\"];\n\n    if (isNull _item || {getPos _item select 2 < 1}) exitWith {};\n\n    private _parachute = createVehicle [\"B_Parachute_02_F\", [0,0,0], [], 0, \"CAN_COLLIDE\"];\n\n    // cannot use setPos on parachutes without them closing down\n    _parachute attachTo [_item, [0,0,0]];\n    detach _parachute;\n\n    private _velocity = velocity _item;\n\n    _item attachTo [_parachute, [0,0,-1]];\n    _parachute setVelocity _velocity;\n\n    private _light = \"Chemlight_yellow\" createVehicle [0,0,0];\n    _light attachTo [_item, [0,0,0]];\n\n}, [_itemObject], 0.7] call CBA_fnc_waitAndExecute;\n\n// smoke effect when crate landed\n[{\n    (_this select 0) params [\"_item\"];\n\n    if (isNull _item) exitWith {\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    if (getPos _item select 2 < 1) then {\n        private _smoke = \"SmokeshellYellow\" createVehicle [0,0,0];\n        _smoke attachTo [_item, [0,0,0]];\n\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n}, 1, [_itemObject]] call CBA_fnc_addPerFrameHandler;\n\n[\n    [\n        LSTRING(UnloadedItem),\n        getText (configFile >> \"CfgVehicles\" >> typeOf _itemObject >> \"displayName\"),\n        getText (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"displayName\")\n    ],\n    3\n] call EFUNC(common,displayTextStructured);\n\n// Invoke listenable event\n[\"ace_cargoUnloaded\", [_item, _vehicle, \"paradrop\"]] call CBA_fnc_globalEvent;\n\ntrue\n",
        "functionName": "ace_cargo_fnc_paradropItem"
      },
      {
        "fileName": "fnc_removeCargoItem.sqf",
        "content": "/*\n * Author: 654wak654\n * Removes a cargo item from the vehicle.\n *\n * Arguments:\n * 0: Item <STRING> or <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: Amount <NUMBER> (default: 1)\n *\n * Return Value:\n * Number of items removed <NUMBER>\n *\n * Example:\n * [\"ACE_Wheel\", vehicle, 2] call ace_cargo_fnc_removeCargoItem\n * [crate_7, truck] call ace_cargo_fnc_removeCargoItem\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\", \"_vehicle\", [\"_amount\", 1]];\nTRACE_3(\"params\",_item,_vehicle,_amount);\n\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\n\nprivate _addedSpace = 0;\nprivate _itemClass = _item;\nprivate _itemsRemoved = 0;\n\nprivate _continue = if (_item isEqualType objNull) then {\n    if !(_item in _loaded) exitWith {false};\n    _addedSpace = [_item] call FUNC(getSizeItem);\n    _loaded deleteAt (_loaded find _item);\n    _itemClass = typeOf _item;\n    deleteVehicle _item;\n    _itemsRemoved = 1;\n    true\n} else {\n    {\n        if (_itemsRemoved == _amount) exitWith {};\n\n        if (\n            (_x isEqualType \"\" && {_x == _item}) || // Check for classname, case-insensitive\n            {_x isEqualType objNull && {typeOf _x isEqualTo _item}}\n        ) then {\n            INC(_itemsRemoved);\n            ADD(_addedSpace,[_x] call FUNC(getSizeItem));\n\n            if (_x isEqualType objNull) then {\n                deleteVehicle _x;\n            };\n            _loaded set [_forEachIndex, nil];\n        };\n    } forEach _loaded;\n\n    FILTER(_loaded,_x != nil);\n    true\n};\n\nif (!_continue) exitWith {0};\n\n_vehicle setVariable [QGVAR(loaded), _loaded, true];\n\nprivate _space = [_vehicle] call FUNC(getCargoSpaceLeft);\n_vehicle setVariable [QGVAR(space), _space + _addedSpace, true];\n\n// Invoke listenable event\n[\"ace_cargoRemoved\", [_itemClass, _vehicle, _amount, _itemsRemoved]] call CBA_fnc_globalEvent;\n\n_itemsRemoved\n",
        "functionName": "ace_cargo_fnc_removeCargoItem"
      },
      {
        "fileName": "fnc_setSize.sqf",
        "content": "/*\n * Author: SilentSpike\n * Set the cargo size of any object. Has global effect.\n * Adds the load action menu if necessary.\n * Negative size makes unloadable.\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Cargo size <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorTarget, 3] call ace_cargo_fnc_setSize\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n// Only run this after the settings are initialized\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(setSize), _this];\n};\n\nparams [\n    [\"_object\",objNull,[objNull]],\n    [\"_size\",nil,[0]] // Default can't be a number since all are valid\n];\nTRACE_2(\"setSize\",_object,_size);\n\n// Nothing to do here\nif (\n    (isNil \"_size\") ||\n    {isNull _object} ||\n    {_size == _object getVariable [QGVAR(size), CARGO_SIZE(typeOf _object)]}\n) exitWith {};\n\n// Apply new size globally\n// Necessary to update value, even if unloadable, as API could be used again\n_object setVariable [QGVAR(canLoad), _size >= 0, true];\n_object setVariable [QGVAR(size), _size, true];\n\n// If no size no need for load action\nif (_size < 0) exitWith {};\n\n// If an existing ID is present, load action has already been added globally\nprivate _jipID = _object getVariable QGVAR(setSize_jipID);\n\n// Actions should be added to all future JIP players too\nif (isNil \"_jipID\") then {\n    _jipID = [QGVAR(initObject), [_object]] call CBA_fnc_globalEventJIP;\n    [_jipID, _object] call CBA_fnc_removeGlobalEventJIP;\n\n    // Store the ID for any future calls to this function\n    _object setVariable [QGVAR(setSize_jipID), _jipID, true];\n};\n",
        "functionName": "ace_cargo_fnc_setSize"
      },
      {
        "fileName": "fnc_setSpace.sqf",
        "content": "/*\n * Author: SilentSpike\n * Set the cargo space of any object. Has global effect.\n * Adds the cargo action menu if necessary.\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Cargo space <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle player, 20] call ace_cargo_fnc_setSpace\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n// Only run this after the settings are initialized\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(setSpace), _this];\n};\n\nparams [\n    [\"_vehicle\",objNull,[objNull]],\n    [\"_space\",nil,[0]] // Default can't be a number since all are valid\n];\nTRACE_2(\"setSpace\",_vehicle,_size);\n\n// Nothing to do here\nif (\n    (isNil \"_space\") ||\n    {isNull _vehicle} ||\n    {_space == _vehicle getVariable [QGVAR(space), CARGO_SPACE(typeOf _vehicle)]}\n) exitWith {};\n\n// Apply new space globally\n// Necessary to update value, even if no space, as API could be used again\n_vehicle setVariable [QGVAR(hasCargo), _space > 0, true];\n_vehicle setVariable [QGVAR(space), _space, true];\n\n// If no cargo space no need for cargo menu\nif (_space <= 0) exitWith {};\n\n// If an existing ID is present, cargo menu has already been added globally\nprivate _jipID = _vehicle getVariable QGVAR(setSpace_jipID);\n\n// Cargo menu should be added to all future JIP players too\nif (isNil \"_jipID\") then {\n    _jipID = [QGVAR(initVehicle), [_vehicle]] call CBA_fnc_globalEventJIP;\n    [_jipID, _vehicle] call CBA_fnc_removeGlobalEventJIP;\n\n    // Store the ID for any future calls to this function\n    _vehicle setVariable [QGVAR(setSpace_jipID), _jipID, true];\n};\n",
        "functionName": "ace_cargo_fnc_setSpace"
      },
      {
        "fileName": "fnc_startLoadIn.sqf",
        "content": "/*\n * Author: Glowbal\n * Start load item.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Object <OBJECT>\n * 2: Vehicle <OBJECT> (Optional)\n *\n * Return Value:\n * Load ProgressBar Started <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_cargo_fnc_startLoadIn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_object\", [\"_cargoVehicle\", objNull]];\nTRACE_3(\"params\",_player,_object,_cargoVehicle);\n\nprivate _vehicle = _cargoVehicle;\nif (isNull _vehicle) then {\n    {\n        if ([_object, _x] call FUNC(canLoadItemIn)) exitWith {_vehicle = _x};\n    } forEach (nearestObjects [_player, GVAR(cargoHolderTypes), (MAX_LOAD_DISTANCE + 10)]);\n};\n\nif (isNull _vehicle) exitWith {\n    TRACE_3(\"Could not find vehicle\",_player,_object,_vehicle);\n    false\n};\n\nprivate _return = false;\n// Start progress bar\nif ([_object, _vehicle] call FUNC(canLoadItemIn)) then {\n    private _size = [_object] call FUNC(getSizeItem);\n\n    [\n        5 * _size,\n        [_object,_vehicle],\n        {[\"ace_loadCargo\", _this select 0] call CBA_fnc_localEvent},\n        {},\n        localize LSTRING(LoadingItem),\n        {true},\n        [\"isNotSwimming\"]\n    ] call EFUNC(common,progressBar);\n    _return = true;\n} else {\n    private _displayName = getText (configFile >> \"CfgVehicles\" >> typeOf _object >> \"displayName\");\n\n    [[LSTRING(LoadingFailed), _displayName], 3.0] call EFUNC(common,displayTextStructured);\n};\n\n_return\n",
        "functionName": "ace_cargo_fnc_startLoadIn"
      },
      {
        "fileName": "fnc_startUnload.sqf",
        "content": "/*\n * Author: Glowbal\n * Start unload action.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_cargo_fnc_startUnload\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nprivate _display = uiNamespace getVariable QGVAR(menuDisplay);\nif (isNil \"_display\") exitWith {};\n\nprivate _loaded = GVAR(interactionVehicle) getVariable [QGVAR(loaded), []];\nif (_loaded isEqualTo []) exitWith {};\n\nprivate _ctrl = _display displayCtrl 100;\n\nprivate _selected = (lbCurSel _ctrl) max 0;\n\nif (count _loaded <= _selected) exitWith {};\nprivate _item = _loaded select _selected; // This can be an object or a classname string\n\nif (GVAR(interactionParadrop)) exitWith {\n    // If drop time is 0 don't show a progress bar\n    if (GVAR(paradropTimeCoefficent) == 0) exitWith {\n        [QGVAR(paradropItem), [_item, GVAR(interactionVehicle)]] call CBA_fnc_localEvent;\n    };\n\n    // Start progress bar - paradrop\n    private _size = [_item] call FUNC(getSizeItem);\n    [\n        GVAR(paradropTimeCoefficent) * _size,\n        [_item, GVAR(interactionVehicle), ACE_player],\n        {\n            (_this select 0) params [\"_item\", \"_target\", \"_player\"];\n            [QGVAR(paradropItem), [_item, _target]] call CBA_fnc_localEvent;\n        },\n        {\n            params [\"_args\", \"\", \"\", \"_errorCode\"]; // show warning if we failed because of flight conditions\n            if (_errorCode == 3) then {\n                _args params [\"_item\", \"_target\", \"_player\"];\n                [localize LSTRING(unlevelFlightWarning)] call EFUNC(common,displayTextStructured);\n            };\n        },\n        localize LSTRING(UnloadingItem),\n        {\n            (_this select 0) params [\"_item\", \"_target\", \"_player\"];\n            if ((acos ((vectorUp _target) select 2)) > 30) exitWith {false}; // check flight level\n            if (((getPos _target) select 2) < 25) exitWith {false}; // check height\n            if ((speed _target) < -5) exitWith {false}; // check reverse\n            true\n        },\n        [\"isNotSwimming\", \"isNotInside\"]\n    ] call EFUNC(common,progressBar);\n};\n\n\n// Start progress bar - normal ground unload\nif ([_item, GVAR(interactionVehicle), ACE_player] call FUNC(canUnloadItem)) then {\n    private _size = [_item] call FUNC(getSizeItem);\n\n    [\n        5 * _size,\n        [_item, GVAR(interactionVehicle), ACE_player],\n        {[\"ace_unloadCargo\", _this select 0] call CBA_fnc_localEvent},\n        {},\n        localize LSTRING(UnloadingItem),\n        {true},\n        [\"isNotSwimming\"]\n    ] call EFUNC(common,progressBar);\n} else {\n    private _itemClass = if (_item isEqualType \"\") then {_item} else {typeOf _item};\n    private _displayName = getText (configFile >> \"CfgVehicles\" >> _itemClass >> \"displayName\");\n\n    [[LSTRING(UnloadingFailed), _displayName], 3.0] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_cargo_fnc_startUnload"
      },
      {
        "fileName": "fnc_unloadItem.sqf",
        "content": "/*\n * Author: Glowbal, ViperMaul\n * Unload object from vehicle.\n *\n * Arguments:\n * 0: Item <OBJECT or STRING>\n * 1: Vehicle <OBJECT>\n * 2: Unloader <OBJECT> (default: objNull)\n *\n * Return Value:\n * Object was unloaded <BOOL>\n *\n * Example:\n * [object, vehicle] call ace_cargo_fnc_unloadItem\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\", \"_vehicle\", [\"_unloader\", objNull]];\nTRACE_3(\"params\",_item,_vehicle,_unloader);\n\nprivate _itemClass = if (_item isEqualType \"\") then {_item} else {typeOf _item};\n\n//This covers testing vehicle stability and finding a safe position\nprivate _emptyPosAGL = [_vehicle, _itemClass, _unloader] call EFUNC(common,findUnloadPosition);\nTRACE_1(\"findUnloadPosition\",_emptyPosAGL);\n\nif ((count _emptyPosAGL) != 3) exitWith {\n    TRACE_4(\"Could not find unload pos\",_vehicle,getPosASL _vehicle,isTouchingGround _vehicle,speed _vehicle);\n    if ((!isNull _unloader) && {_unloader == ACE_player}) then {\n        //display text saying there are no safe places to exit the vehicle\n        [localize ELSTRING(common,NoRoomToUnload)] call EFUNC(common,displayTextStructured);\n    };\n    false\n};\n\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\n\nif !(_item in _loaded) exitWith {\n    ERROR_3(\"Tried to unload item [%1] not in vehicle[%2] cargo[%3]\", _item, _vehicle, _loaded);\n    false\n};\n\n_loaded deleteAt (_loaded find _item);\n_vehicle setVariable [QGVAR(loaded), _loaded, true];\n\nprivate _space = [_vehicle] call FUNC(getCargoSpaceLeft);\nprivate _itemSize = [_item] call FUNC(getSizeItem);\n_vehicle setVariable [QGVAR(space), (_space + _itemSize), true];\n\nif (_item isEqualType objNull) then {\n    detach _item;\n    // hideObjectGlobal must be executed before setPos to ensure light objects are rendered correctly\n    // do both on server to ensure they are executed in the correct order\n    [QGVAR(serverUnload), [_item, _emptyPosAGL]] call CBA_fnc_serverEvent;\n} else {\n    private _newItem = createVehicle [_item, _emptyPosAGL, [], 0, \"\"];\n    _newItem setPosASL (AGLtoASL _emptyPosAGL);\n};\n\ntrue\n",
        "functionName": "ace_cargo_fnc_unloadItem"
      },
      {
        "fileName": "fnc_validateCargoSpace.sqf",
        "content": "/*\n * Author: Glowbal\n * Validate the vehicle cargo space.\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [object] call ace_cargo_fnc_validateCargoSpace\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_1(\"params\",_vehicle);\n\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\n\nprivate _newLoaded = [];\nprivate _totalSpaceOccupied = 0;\n{\n    if ((_x isEqualType \"\") || {!isNull _x}) then {\n        _newLoaded pushback _x;\n        _totalSpaceOccupied = _totalSpaceOccupied + ([_x] call FUNC(getSizeItem));\n    };\n    true\n} count _loaded;\n\nif (count _loaded != count _newLoaded) then {\n    _vehicle setVariable [QGVAR(loaded), _newLoaded, true];\n};\n\n_vehicle setVariable [QGVAR(space), getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> QGVAR(space)) - _totalSpaceOccupied, true];\n",
        "functionName": "ace_cargo_fnc_validateCargoSpace"
      }
    ]
  },
  {
    "component": "chemlights",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ace_firedPlayer\", DFUNC(throwEH)] call CBA_fnc_addEventHandler;\n// [\"ace_firedPlayerNonLocal\", DFUNC(throwEH)] call CBA_fnc_addEventHandler;\n// [\"ace_firedNonPlayer\", DFUNC(throwEH)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\nLOG(MSG_INIT);\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_compileChemlightMenu.sqf",
        "content": "/*\n * Author: voiper\n * Compile list of chemlight classnames and add to the \"Chemlight shield\" parent menu.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player <OBJECT>\n * 2: Parameters <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player, _player, []] call ace_chemlights_fnc_compileChemlightMenu;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"\", \"_player\", \"_args\"];\n\nprivate _actions = [];\nprivate _chemlights = [_player] call FUNC(getShieldComponents);\n\n//add all carried chemlight menus\n{\n    private _config = (configFile >> \"CfgMagazines\" >> _x);\n    private _icon = getText (_config >> \"picture\");\n    private _shieldClass = getText (_config >> \"ACE_Chemlight_Shield\");\n    private _displayName = getText (configFile >> \"CfgWeapons\" >> _shieldClass >> \"displayName\");\n\n    _displayName = format [localize LSTRING(Action_Prepare), _displayName];\n    private _statement = {_this call FUNC(prepShield)};\n\n    private _action = [_x, _displayName, _icon, _statement, {true}, {}, [_x, _shieldClass]] call EFUNC(interact_menu,createAction);\n    _actions pushBack [_action, [], _player];\n} forEach _chemlights;\n\n_actions\n",
        "functionName": "ace_chemlights_fnc_compileChemlightMenu"
      },
      {
        "fileName": "fnc_getShieldComponents.sqf",
        "content": "/*\n * Author: voiper\n * Check a unit for whether they're carrying a chemlight shield and a chemlight.\n *\n * Arguments:\n * 0: Unit to check <OBJECT>\n *\n * Return Value:\n * List of carried chemlight classnames <ARRAY>\n *\n * Example:\n * [ACE_player] call ace_chemlights_fnc_getShieldComponents;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nprivate _components = [];\nprivate _items = itemsWithMagazines _unit;\n\nif !(\"ACE_Chemlight_Shield\" in _items) exitWith {_components};\n\n{\n    if ((_x isKindOf [\"Chemlight_green\", configFile >> \"CfgMagazines\"]) && {getText (configFile >> \"CfgMagazines\" >> _x >> \"ACE_Chemlight_Shield\") != \"\"}) then {\n        _components pushBackUnique _x;\n    };\n} forEach _items;\n\n_components\n",
        "functionName": "ace_chemlights_fnc_getShieldComponents"
      },
      {
        "fileName": "fnc_initIR.sqf",
        "content": "/*\n * Author: voiper\n * Spawn IR marker for dummy IR physX object.\n *\n * Arguments:\n * 1: Dummy IR physX <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_object] call ace_chemlights_fnc_initIR;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_dummy\"];\n\nprivate _chemlightClass = getText (configFile >> \"CfgVehicles\" >> typeOf _dummy >> \"ACE_Attachable\");\nprivate _config = configFile >> \"CfgAmmo\" >> _chemlightClass;\nprivate _delay = getNumber (_config >> \"explosionTime\");\nprivate _lifeTime = getNumber (_config >> \"timeToLive\");\n\n[{\n    params [\"_dummy\", \"_lifeTime\"];\n    private _IRMarker = \"ACE_Chemlight_IR_Marker\" createVehicle [0,0,0];\n    _IRMarker attachTo [_dummy, [0,0,0]];\n    [FUNC(removeIR), [_dummy, _IRMarker], _lifeTime] call CBA_fnc_waitAndExecute;\n}, [_dummy, _lifeTime], _delay] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_chemlights_fnc_initIR"
      },
      {
        "fileName": "fnc_isIRClass.sqf",
        "content": "/*\n * Author: voiper\n * Check if an ammo classname is an IR chemlight.\n *\n * Arguments:\n * 0: Projectile or ammo classname <OBJECT> or <STRING>\n *\n * Return Value:\n * Is IR chemlight? <BOOL>\n *\n * Example:\n * [\"Chemlight_blue\"] call ace_chemlights_fnc_isIRClass;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_input\", \"\", [\"\", objNull]]];\n\nprivate _class = if (typeName _input == \"OBJECT\") then {typeOf _input} else {_input};\n\nisText (configFile >> \"CfgAmmo\" >> _class >> \"ACE_Chemlight_IR\")\n",
        "functionName": "ace_chemlights_fnc_isIRClass"
      },
      {
        "fileName": "fnc_prepShield.sqf",
        "content": "/*\n * Author: voiper\n * Combine a chemlight shield item and a chemlight item into a light.\n *\n * Arguments:\n * 0: Target unit <OBJECT>\n * 1: Activator Unit (player) <OBJECT>\n * 2: Chemlight class, chemlight shield class <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player, _player, [\"Chemlight_Green\", \"ACE_Chemlight_Shield_Green\"]] call ace_chemlights_fnc_prepShield;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_unit\", \"_args\"];\n_args params [\"_chemlight\", \"_shieldClass\"];\n\nprivate _cfg = (configFile >> \"CfgWeapons\" >> _shieldClass);\nprivate _displayName = getText (_cfg >> \"displayName\");\nprivate _picture = getText (_cfg >> \"picture\");\nprivate _text = format [localize LSTRING(Action_Prepare_Done), _displayName];\n\n//we don't need to check for space, because it's always 2g -> 1g\n_unit removeItem _chemlight;\n_unit removeItem \"ACE_Chemlight_Shield\";\n_unit addItem _shieldClass;\n\n[_text, _picture] call EFUNC(common,displayTextPicture);\nplaySound3D [\"A3\\sounds_f\\weapons\\Other\\dry4.wss\", objNull, false, eyePos _unit, 2, 2, 10];\n",
        "functionName": "ace_chemlights_fnc_prepShield"
      },
      {
        "fileName": "fnc_removeIR.sqf",
        "content": "/*\n * Author: voiper\n * Kill chemlight and any dummy objects attached to it.\n *\n * Arguments:\n * 0: Chemlight object <OBJECT>\n * 1: Light marker vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_chemlight, _lightMarker] call ace_chemlights_fnc_removeIR;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_chemlight\", \"_lightMarker\"];\n\nif (!isNull _lightMarker) then {\n    detach _lightMarker;\n    deleteVehicle _lightMarker;\n};\nif (!isNull _chemlight) then {\n    deleteVehicle _chemlight;\n};\n",
        "functionName": "ace_chemlights_fnc_removeIR"
      },
      {
        "fileName": "fnc_throwEH.sqf",
        "content": "/*\n * Author: commy2, voiper\n * Fired EH, for handling chemlight ThrowMuzzles.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [clientFiredBIS-XEH] call ace_chemlights_fnc_throwEH;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\", \"\", \"\", \"_ammo\", \"\", \"_projectile\"];\n\nif ((_weapon != \"Throw\") || {!(_ammo isKindOf [\"Chemlight_base\", configFile >> \"CfgAmmo\"])}) exitWith {};\n\n// http://feedback.arma3.com/view.php?id=12340\nif (isNull _projectile) then {\n    _projectile = nearestObject [_unit, _ammo];\n};\n\nif (local _unit) then {\n    if ([_ammo] call FUNC(isIRClass)) then {\n        // Handle Advanced Throwing\n        if ((ACE_player getVariable [QEGVAR(advanced_throwing,activeThrowable), objNull]) == _projectile) then {\n            [_projectile, _ammo, true] call FUNC(throwIR); // direct call if we are priming with adv throw\n        } else {\n            [{_this call FUNC(throwIR)}, [_projectile, _ammo]] call CBA_fnc_execNextFrame;\n        };\n    };\n};\n",
        "functionName": "ace_chemlights_fnc_throwEH"
      },
      {
        "fileName": "fnc_throwIR.sqf",
        "content": "/*\n * Author: voiper\n * Create and throw IR chemlight.\n *\n * Arguments:\n * 0: Original throw projectile <OBJECT>\n * 1: Class of projectile <STRING>\n * 2: Adv throw <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [_projectile, _ammoType] call ace_chemlights_fnc_throwIR\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_projectile\", \"_ammo\", [\"_replaceAdvThrowable\", false]];\n\nprivate _config = configFile >> \"CfgAmmo\" >> _ammo;\nprivate _dummyClass = getText (_config >> \"ACE_Chemlight_IR\");\nprivate _pos = getPosATL _projectile;\nprivate _velocity = velocity _projectile;\n\ndeleteVehicle _projectile;\nprivate _dummy = _dummyClass createVehicle _pos;\n_dummy setPosATL _pos;\n[_dummy, 90, 0] call BIS_fnc_setPitchBank;\n_dummy setVelocity _velocity;\n\nif (_replaceAdvThrowable) then {\n    ACE_player setVariable [QEGVAR(advanced_throwing,activeThrowable), _dummy];\n};\n",
        "functionName": "ace_chemlights_fnc_throwIR"
      }
    ]
  },
  {
    "component": "common",
    "files": [
      {
        "fileName": "init_handleModifierKey.sqf",
        "content": "/*\n * Author: commy2\n * Initializes the modifier key handler.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Public : No\n */\n#include \"script_component.hpp\"\n\n_this spawn {//\n    waitUntil {!isNull findDisplay 46};//\n    sleep 2;//\n\n    disableSerialization;\n\n    params [\"_display\"];\n\n    _display displayAddEventHandler [\"KeyDown\", {_this call FUNC(handleModifierKey)}];\n    _display displayAddEventHandler [\"KeyUp\", {_this call FUNC(handleModifierKeyUp)}];\n};//\n\n//@todo, remove all lines with comments after CBA update, events rewrite branch\n// note 2, will break in save games after ~ 10 seconds thanks to CBA, fixed with above\n"
      },
      {
        "fileName": "init_versionTooltip.sqf",
        "content": "#include \"script_component.hpp\"\n\n#define MAX_COUNT 30\n#define ANIM_TIME 10\n\nprivate _display = findDisplay 0;\n\nif (!scriptDone (_display getVariable [QGVAR(versionTooltip), scriptNull])) exitWith {};\n\n_display setVariable [QGVAR(versionTooltip), [_display] spawn {\n    disableSerialization;\n\n    params [\"_display\"];\n\n    private _allControls = [];\n\n    private _fnc_create = {\n        private _ctrl = _display ctrlCreate [\"RscPicture\", -1];\n\n        // randomize size\n        private _size = selectRandom [safezoneW / 30, safezoneW / 20, safezoneW / 15];\n        private _position = [\n            random safezoneW + safezoneX - _size / 2,\n            - random (safezoneH / 5) + safezoneY - _size,\n            _size,\n            _size\n        ];\n\n        _ctrl ctrlSetPosition _position;\n        _ctrl ctrlCommit 0;\n\n        // pls ignore\n        _ctrl ctrlSetText QPATHTOF(data\\icon_banana_ca.paa);\n\n        // animate with random speed\n        _position set [1, 1 - safezoneY];\n        _ctrl ctrlSetPosition _position;\n        _ctrl ctrlCommit (ANIM_TIME * random [0.5, 1, 1.5]);\n\n        _allControls pushBack _ctrl;\n    };\n\n    while {!isNull _display} do {\n        _allControls = _allControls select {\n            if (ctrlCommitted _x) then {\n                ctrlDelete _x;\n                false\n            } else {\n                true\n            };\n        };\n\n        while {count _allControls < MAX_COUNT} do {\n            call _fnc_create;\n        };\n\n        uiSleep 3;\n    };\n}];\n"
      },
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\ncall COMPILE_FILE(init_handleModifierKey);\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// ACE - Common\n// #define ENABLE_PERFORMANCE_COUNTERS\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n//////////////////////////////////////////////////\n// Get Map Data\n//////////////////////////////////////////////////\n\n//Find MGRS zone and 100km grid for current map\n[] call FUNC(getMGRSdata);\n//Prepare variables for FUNC(getMapGridFromPos)/FUNC(getMapPosFromGrid)\n[] call FUNC(getMapGridData);\n\n\n//////////////////////////////////////////////////\n// Eventhandlers\n//////////////////////////////////////////////////\n\n//Status Effect EHs:\n[QGVAR(setStatusEffect), {_this call FUNC(statusEffect_set)}] call CBA_fnc_addEventHandler;\n[\"forceWalk\", false, [\"ACE_SwitchUnits\", \"ACE_Attach\", \"ACE_dragging\", \"ACE_Explosives\", \"ACE_Ladder\", \"ACE_Sandbag\", \"ACE_refuel\", \"ACE_rearm\", \"ACE_dragging\"]] call FUNC(statusEffect_addType);\n[\"blockSprint\", false, []] call FUNC(statusEffect_addType);\n[\"setCaptive\", true, [QEGVAR(captives,Handcuffed), QEGVAR(captives,Surrendered), \"ace_unconscious\"]] call FUNC(statusEffect_addType);\n[\"blockDamage\", false, [\"fixCollision\", \"ACE_cargo\"]] call FUNC(statusEffect_addType);\n[\"blockEngine\", false, [\"ACE_Refuel\"]] call FUNC(statusEffect_addType);\n\n[QGVAR(forceWalk), {\n    params [\"_object\", \"_set\"];\n    TRACE_2(\"forceWalk EH\",_object,_set);\n    _object forceWalk (_set > 0);\n}] call CBA_fnc_addEventHandler;\n[QGVAR(blockSprint), { //Name reversed from `allowSprint` because we want NOR logic\n    params [\"_object\", \"_set\"];\n    TRACE_2(\"blockSprint EH\",_object,_set);\n    _object allowSprint (_set == 0);\n}] call CBA_fnc_addEventHandler;\n[QGVAR(setCaptive), {\n    params [\"_object\", \"_set\"];\n    TRACE_2(\"setCaptive EH\",_object,_set);\n    _object setCaptive (_set > 0);\n}] call CBA_fnc_addEventHandler;\n[QGVAR(blockDamage), { //Name reversed from `allowDamage` because we want NOR logic\n    params [\"_object\", \"_set\"];\n    if ((_object isKindOf \"CAManBase\") && {([\"ace_medical\"] call FUNC(isModLoaded))}) then {\n        TRACE_2(\"blockDamage EH (using medical)\",_object,_set);\n       _object setvariable [QEGVAR(medical,allowDamage), (_set == 0), true];\n    } else {\n        TRACE_2(\"blockDamage EH (using allowDamage)\",_object,_set);\n       _object allowDamage (_set == 0);\n    };\n}] call CBA_fnc_addEventHandler;\n[QGVAR(blockEngine), {\n    params [\"_vehicle\", \"_set\"];\n    _vehicle setVariable [QGVAR(blockEngine), _set > 0, true];\n    _vehicle engineOn false;\n}] call CBA_fnc_addEventHandler;\n\n//Add a fix for BIS's zeus remoteControl module not reseting variables on DC when RC a unit\n//This variable is used for isPlayer checks\nif (isServer) then {\n    addMissionEventHandler [\"HandleDisconnect\", {\n        params [\"_dcPlayer\"];\n        private _zeusLogic = getAssignedCuratorLogic _dcPlayer;\n        if ((!isNil \"_zeusLogic\") && {!isNull _zeusLogic}) then {\n            {\n                if ((_x getvariable [\"bis_fnc_moduleRemoteControl_owner\", objnull]) isEqualTo _dcPlayer) exitWith {\n                    INFO_3(\"[%1] DC - Was Zeus [%2] while controlling unit [%3] - manually clearing `bis_fnc_moduleRemoteControl_owner`\", [_x] call FUNC(getName), _dcPlayer, _x);\n                    _x setVariable [\"bis_fnc_moduleRemoteControl_owner\", nil, true];\n                };\n                nil\n            } count (curatorEditableObjects  _zeusLogic);\n        };\n    }];\n};\n\n// Event to log Fix Headbug output\n[QGVAR(headbugFixUsed), {\n    params [\"_profileName\", \"_animation\"];\n    INFO_2(\"Headbug Used: Name: %1, Animation: %2\",_profileName,_animation);\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(fixCollision), FUNC(fixCollision)] call CBA_fnc_addEventHandler;\n[QGVAR(fixFloating), FUNC(fixFloating)] call CBA_fnc_addEventHandler;\n[QGVAR(fixPosition), FUNC(fixPosition)] call CBA_fnc_addEventHandler;\n\n[\"ace_loadPersonEvent\", FUNC(loadPersonLocal)] call CBA_fnc_addEventHandler;\n[\"ace_unloadPersonEvent\", FUNC(unloadPersonLocal)] call CBA_fnc_addEventHandler;\n\n[QGVAR(lockVehicle), {\n    _this setVariable [QGVAR(lockStatus), locked _this];\n    _this lock 2;\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(unlockVehicle), {\n    _this lock (_this getVariable [QGVAR(lockStatus), locked _this]);\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(setDir), {(_this select 0) setDir (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(setFuel), {(_this select 0) setFuel (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(engineOn), {(_this select 0) engineOn (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(setSpeaker), {(_this select 0) setSpeaker (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(selectLeader), {(_this select 0) selectLeader (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(setVelocity), {(_this select 0) setVelocity (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(playMove), {(_this select 0) playMove (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(playMoveNow), {(_this select 0) playMoveNow (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(playAction), {(_this select 0) playAction (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(playActionNow), {(_this select 0) playActionNow (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(switchMove), {(_this select 0) switchMove (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(setVectorDirAndUp), {(_this select 0) setVectorDirAndUp (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(setVanillaHitPointDamage), {(_this select 0) setHitPointDamage (_this select 1)}] call CBA_fnc_addEventHandler;\n[QGVAR(addWeaponItem), {(_this select 0) addWeaponItem [(_this select 1), (_this select 2)]}] call CBA_fnc_addEventHandler;\n\n// Request framework\n[QGVAR(requestCallback), FUNC(requestCallback)] call CBA_fnc_addEventHandler;\n[QGVAR(receiveRequest), FUNC(receiveRequest)] call CBA_fnc_addEventHandler;\n\n[QGVAR(systemChatGlobal), {systemChat _this}] call CBA_fnc_addEventHandler;\n\nif (isServer) then {\n    [QGVAR(hideObjectGlobal), {(_this select 0) hideObjectGlobal (_this select 1)}] call CBA_fnc_addEventHandler;\n    [QGVAR(enableSimulationGlobal), {(_this select 0) enableSimulationGlobal (_this select 1)}] call CBA_fnc_addEventHandler;\n    [QGVAR(setShotParents), {(_this select 0) setShotParents [_this select 1, _this select 2]}] call CBA_fnc_addEventHandler;\n    [\"ace_setOwner\", {(_this select 0) setOwner (_this select 1)}] call CBA_fnc_addEventHandler;\n    [QGVAR(serverLog), FUNC(serverLog)] call CBA_fnc_addEventHandler;\n};\n\n\n//////////////////////////////////////////////////\n// Set up remote execution\n//////////////////////////////////////////////////\n\n// Synced ACE events\n// Handle JIP scenario\nif (!isServer) then {\n    [\"ace_playerJIP\", {\n        INFO(\"JIP event synchronization initialized\");\n        [\"ACEa\", [player]] call CBA_fnc_serverEvent;\n    }] call CBA_fnc_addEventHandler;\n} else {\n    [\"ACEa\", FUNC(_handleRequestAllSyncedEvents)] call CBA_fnc_addEventHandler;\n};\n\n[\"ACEe\", FUNC(_handleSyncedEvent)] call CBA_fnc_addEventHandler;\n[\"ACEs\", FUNC(_handleRequestSyncedEvent)] call CBA_fnc_addEventHandler;\n\nif (isServer) then {\n    [FUNC(syncedEventPFH), 0.5, []] call CBA_fnc_addPerFrameHandler;\n};\n\n\n//////////////////////////////////////////////////\n// Check files, previous installed version etc.\n//////////////////////////////////////////////////\n\nprivate _currentVersion = getText (configFile >> \"CfgPatches\" >> QUOTE(ADDON) >> \"version\");\nprivate _previousVersion = profileNamespace getVariable [\"ACE_VersionNumberString\", \"\"];\n\n// check previous version number from profile\nif (_currentVersion != _previousVersion) then {\n    // do something\n\n    profileNamespace setVariable [\"ACE_VersionNumberString\", _currentVersion];\n};\n\ncall FUNC(checkFiles);\n\n\n//////////////////////////////////////////////////\n// Set up ace_settingsInitialized eventhandler\n//////////////////////////////////////////////////\n\n[\"ace_settingsInitialized\", {\n    [\n        GVAR(checkPBOsAction),\n        GVAR(checkPBOsCheckAll),\n        GVAR(checkPBOsWhitelist)\n    ] call FUNC(checkPBOs)\n}] call CBA_fnc_addEventHandler;\n\n\n\n/***************************************************************************/\n/***************************************************************************/\n/** everything that only player controlled machines need, goes below this **/\n/***************************************************************************/\n/***************************************************************************/\n\nif (!hasInterface) exitWith {};\n\n//////////////////////////////////////////////////\n// Set up mouse wheel eventhandler\n//////////////////////////////////////////////////\n\ncall FUNC(assignedItemFix);\n\n// @todo remove?\nenableCamShake true;\n\n\n//FUNC(showHud) needs to be refreshed if it was set during mission init\n[\"ace_infoDisplayChanged\", {\n    GVAR(showHudHash) params [\"\", \"\", \"_masks\"];\n    if !(_masks isEqualTo []) then {\n        [] call FUNC(showHud);\n    };\n}] call CBA_fnc_addEventHandler;\n\n\n//////////////////////////////////////////////////\n// Eventhandler to set player names\n//////////////////////////////////////////////////\n\n// Set the name for the current player\n[\"unit\", {\n    params [\"_newPlayer\",\"_oldPlayer\"];\n\n    if (alive _newPlayer) then {\n        [FUNC(setName), [_newPlayer]] call CBA_fnc_execNextFrame;\n    };\n\n    if (alive _oldPlayer) then {\n        [FUNC(setName), [_oldPlayer]] call CBA_fnc_execNextFrame;\n    };\n}] call CBA_fnc_addPlayerEventHandler;\n\n\n//////////////////////////////////////////////////\n// Set up numerous eventhanders for player controlled units\n//////////////////////////////////////////////////\n\nTRACE_1(\"adding unit playerEH to set ace_player\",isNull cba_events_oldUnit);\n[\"unit\", {\n    ACE_player = (_this select 0);\n}, true] call CBA_fnc_addPlayerEventHandler;\n\nGVAR(OldIsCamera) = false;\n\n[{\n    BEGIN_COUNTER(stateChecker);\n\n    // \"activeCameraChanged\" event\n    private _data = call FUNC(isfeatureCameraActive);\n    if !(_data isEqualTo GVAR(OldIsCamera)) then {\n        // Raise ACE event locally\n        GVAR(OldIsCamera) = _data;\n        [\"ace_activeCameraChanged\", [ACE_player, _data]] call CBA_fnc_localEvent;\n    };\n\n    END_COUNTER(stateChecker);\n}, 0.5, []] call CBA_fnc_addPerFrameHandler;\n\n// Add event handler for UAV control change\nACE_controlledUAV = [objNull, objNull, [], \"\"];\naddMissionEventHandler [\"PlayerViewChanged\", {\n    // On non-server client this command is semi-broken\n    // arg index 5 should be the controlled UAV, but it will often be objNull (delay from locality switching?)\n    // On PlayerViewChanged event, start polling for new uav state for a few seconds (should be done within a few frames)\n    \n    params [\"\", \"\", \"\", \"\", \"_newCameraOn\", \"_UAV\"];\n    TRACE_2(\"PlayerViewChanged\",_newCameraOn,_UAV);\n    \n    [{\n        if (isNull player) exitWith {true};\n        private _UAV = getConnectedUAV player;\n        if (!alive player) then {_UAV = objNull;};\n        private _position = (UAVControl _UAV) param [1, \"\"];\n        private _seatAI = objNull;\n        private _turret = [];\n        switch (toLower _position) do {\n            case (\"\"): {\n                _UAV = objNull; // set to objNull if not actively controlling\n            };\n            case (\"driver\"): {\n                _turret = [-1];\n                _seatAI = driver _UAV;\n            };\n            case (\"gunner\"): {\n                _turret = [0];\n                _seatAI = gunner _UAV;\n            };\n        };\n        \n        private _newArray = [_UAV, _seatAI, _turret, _position];\n        if (_newArray isEqualTo ACE_controlledUAV) exitWith {false}; // no change yet\n        \n        TRACE_2(\"Seat Change\",_newArray,ACE_controlledUAV);\n        ACE_controlledUAV = _newArray;\n        [\"ACE_controlledUAV\", _newArray] call CBA_fnc_localEvent;\n        \n        // stay in the loop as we might switch from gunner -> driver, and there may be a empty position event in-between\n        false\n    }, {}, [], 3, {TRACE_1(\"timeout\",_this);}] call CBA_fnc_waitUntilAndExecute;\n}];\n\n\n//////////////////////////////////////////////////\n// Eventhandlers for player controlled machines\n//////////////////////////////////////////////////\n\n[QGVAR(displayTextStructured), {_this call FUNC(displayTextStructured)}] call CBA_fnc_addEventHandler;\n[QGVAR(displayTextPicture), {_this call FUNC(displayTextPicture)}] call CBA_fnc_addEventHandler;\n\n[\"ace_unconscious\", {\n    params [\"_unit\", \"_isUnconscious\"];\n\n    if (local _unit && {!_isUnconscious}) then {\n        [_unit, false, QFUNC(loadPerson), west /* dummy side */] call FUNC(switchToGroupSide);\n    };\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_useItem\", DFUNC(useItem)] call CBA_fnc_addEventHandler;\n\n\n//////////////////////////////////////////////////\n// Add various canInteractWith conditions\n//////////////////////////////////////////////////\n\n[\"isNotDead\", {\n    params [\"_unit\"];\n    alive _unit\n}] call FUNC(addCanInteractWithCondition);\n\n[\"notOnMap\", {!visibleMap}] call FUNC(addCanInteractWithCondition);\n\n[\"isNotInside\", {\n    params [\"_unit\", \"_target\"];\n\n    // Players can always interact with himself if not boarded\n    vehicle _unit == _unit ||\n    // Players can always interact with his vehicle\n    {vehicle _unit == _target} ||\n    // Players can always interact with passengers of the same vehicle\n    {_unit != _target && {vehicle _unit == vehicle _target}} ||\n    // Players can always interact with connected UAV\n    {!(isNull (ACE_controlledUAV select 0))}\n}] call FUNC(addCanInteractWithCondition);\n\n[\"isNotInZeus\", {isNull curatorCamera}] call FUNC(addCanInteractWithCondition);\n\n//////////////////////////////////////////////////\n// Set up reload mutex\n//////////////////////////////////////////////////\n\nGVAR(isReloading) = false;\n\n[\"keyDown\", {\n    if ((_this select 1) in actionKeys \"ReloadMagazine\" && {alive ACE_player}) then {\n        //Ignore mounted (except ffv)\n        if (!(player call CBA_fnc_canUseWeapon)) exitWith {};\n        private _weapon = currentWeapon ACE_player;\n\n        if (_weapon != \"\") then {\n            private _muzzle = currentMuzzle ACE_player;\n            private _wpnConfig = configFile >> \"CfgWeapons\" >> _weapon;\n            private _gesture = getText ([_wpnConfig >> _muzzle, _wpnConfig] select (_weapon isEqualTo _muzzle) >> \"reloadAction\");\n            if (_gesture == \"\") exitWith {}; //Ignore weapons with no reload gesture (binoculars)\n            private _isLauncher = _weapon isKindOf [\"Launcher\", configFile >> \"CfgWeapons\"];\n            private _config = [\"CfgGesturesMale\", \"CfgMovesMaleSdr\"] select _isLauncher;\n            private _duration = getNumber (configfile >> _config >> \"States\" >> _gesture >> \"speed\");\n\n            if (_duration != 0) then {\n                _duration = if (_duration < 0) then { abs _duration } else { 1 / _duration };\n            } else {\n                _duration = 3;\n            };\n\n            TRACE_2(\"Reloading, blocking gestures\",_weapon,_duration);\n            GVAR(reloadingETA) = CBA_missionTime + _duration;\n\n            if (!GVAR(isReloading)) then {\n                GVAR(isReloading) = true;\n\n                [{\n                    CBA_missionTime > GVAR(reloadingETA)\n                },{\n                    GVAR(isReloading) = false;\n                }] call CBA_fnc_waitUntilAndExecute;\n            };\n        };\n    };\n\n    false\n}] call CBA_fnc_addDisplayHandler;\n\n//////////////////////////////////////////////////\n// Set up PlayerJIP eventhandler\n//////////////////////////////////////////////////\n\n// Lastly, do JIP events\n// JIP Detection and event trigger. Run this at the very end, just in case anything uses it\n// Note: usage of player is most likely on purpose\nif (didJip) then {\n    // We are jipping! Get ready and wait, and throw the event\n    [{\n        if(!isNull player && GVAR(settingsInitFinished)) then {\n            [\"ace_playerJIP\", [player]] call CBA_fnc_localEvent;\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n        };\n    }, 0, []] call CBA_fnc_addPerFrameHandler;\n};\n\n\n//////////////////////////////////////////////////\n// CBA key input handling\n//////////////////////////////////////////////////\n\n//Device Handler:\nGVAR(deviceKeyHandlingArray) = [];\nGVAR(deviceKeyCurrentIndex) = -1;\n\n// Register localizations for the Keybinding categories\n[\"ACE3 Equipment\", localize LSTRING(ACEKeybindCategoryEquipment)] call CBA_fnc_registerKeybindModPrettyName;\n[\"ACE3 Common\", localize LSTRING(ACEKeybindCategoryCommon)] call CBA_fnc_registerKeybindModPrettyName;\n[\"ACE3 Weapons\", localize LSTRING(ACEKeybindCategoryWeapons)] call CBA_fnc_registerKeybindModPrettyName;\n[\"ACE3 Movement\", localize LSTRING(ACEKeybindCategoryMovement)] call CBA_fnc_registerKeybindModPrettyName;\n[\"ACE3 Scope Adjustment\", localize LSTRING(ACEKeybindCategoryScopeAdjustment)] call CBA_fnc_registerKeybindModPrettyName;\n[\"ACE3 Vehicles\", localize LSTRING(ACEKeybindCategoryVehicles)] call CBA_fnc_registerKeybindModPrettyName;\n\n[\"ACE3 Equipment\", QGVAR(openDevice), (localize \"STR_ACE_Common_toggleHandheldDevice\"), {\n    [] call FUNC(deviceKeyFindValidIndex);\n    if (GVAR(deviceKeyCurrentIndex) == -1) exitWith {false};\n    [] call ((GVAR(deviceKeyHandlingArray) select GVAR(deviceKeyCurrentIndex)) select 3);\n    true\n},\n{false},\n[0xC7, [false, false, false]], false] call CBA_fnc_addKeybind;  //Home Key\n\n[\"ACE3 Equipment\", QGVAR(closeDevice), (localize \"STR_ACE_Common_closeHandheldDevice\"), {\n    [] call FUNC(deviceKeyFindValidIndex);\n    if (GVAR(deviceKeyCurrentIndex) == -1) exitWith {false};\n    [] call ((GVAR(deviceKeyHandlingArray) select GVAR(deviceKeyCurrentIndex)) select 4);\n    true\n},\n{false},\n[0xC7, [false, true, false]], false] call CBA_fnc_addKeybind;  //CTRL + Home Key\n\n[\"ACE3 Equipment\", QGVAR(cycleDevice), (localize \"STR_ACE_Common_cycleHandheldDevices\"), {\n    [1] call FUNC(deviceKeyFindValidIndex);\n    if (GVAR(deviceKeyCurrentIndex) == -1) exitWith {false};\n    private _displayName = ((GVAR(deviceKeyHandlingArray) select GVAR(deviceKeyCurrentIndex)) select 0);\n    private _iconImage = ((GVAR(deviceKeyHandlingArray) select GVAR(deviceKeyCurrentIndex)) select 1);\n    [_displayName, _iconImage] call FUNC(displayTextPicture);\n    true\n},\n{false},\n[0xC7, [true, false, false]], false] call CBA_fnc_addKeybind;  //SHIFT + Home Key\n\nGVAR(commonPostInited) = true;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(syncedEvents) = [] call CBA_fnc_hashCreate;\nGVAR(showHudHash) = [] call CBA_fnc_hashCreate;\n\nGVAR(settingsInitFinished) = false;\nGVAR(runAtSettingsInitialized) = [];\n\n// @todo: Generic local-managed global-synced objects (createVehicleLocal)\n\n//Debug\nACE_COUNTERS = [];\n\n// Load ace_settings into CBA Settings\n[] call FUNC(cbaSettings);\n\nGVAR(statusEffect_Names) = [];\nGVAR(statusEffect_isGlobal) = [];\n\nGVAR(setHearingCapabilityMap) = [];\n\n//////////////////////////////////////////////////\n// Set up PlayerChanged eventhandler for pre init (EH is installed in postInit)\n//////////////////////////////////////////////////\n\nACE_player = objNull;\nuiNamespace setVariable [\"ACE_player\", objNull];\n\n// Init toHex\n[0] call FUNC(toHex);\n\nisHC = !hasInterface && !isDedicated; // deprecated because no tag\nmissionNamespace setVariable [\"ACE_isHC\", ACE_isHC];\nuiNamespace setVariable [\"ACE_isHC\", ACE_isHC];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc__handleRequestAllSyncedEvents.sqf",
        "content": "/*\n * Author: jaynus\n * Handles a server-side request for synchronization ALL events on JIP to a client.\n *\n * Arguments:\n * 0: client <OBJECT>\n *\n * Return Value:\n * Event is successed <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc__handleRequestAllSyncedEvents\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_client\"];\n\n[GVAR(syncedEvents), {\n    //IGNORE_PRIVATE_WARNING [\"_key\", \"_value\"];\n    _value params [\"\", \"_eventLog\"];\n\n    [\"ACEs\", [_key, _eventLog], _client] call CBA_fnc_targetEvent;\n    false\n}] call CBA_fnc_hashEachPair;\n\ntrue\n",
        "functionName": "ace_common_fnc__handleRequestAllSyncedEvents"
      },
      {
        "fileName": "fnc__handleRequestSyncedEvent.sqf",
        "content": "/*\n * Author: jaynus\n * Receives either requests for synchronization from clients, or the synchronization data from the server.\n *\n * Arguments [Client]:\n * 0: eventName <STRING>\n * 1: eventLog <ARRAY>\n *\n * Arguments [Server]:\n * 0: eventName <STRING>\n * 1: client <OBJECT>\n *\n * Return Value:\n * Event is successed <BOOL>\n *\n * Example:\n * [\"name\", [LOG]] call ace_common_fnc__handleRequestSyncedEvent //Client\n * [\"name\", bob] call ace_common_fnc__handleRequestSyncedEvent//Server\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//SEH_s\nif (isServer) then {\n    // Find the event name, and shovel out the events to the client\n    params [\"_eventName\", \"_client\"];\n\n    if !([GVAR(syncedEvents), _eventName] call CBA_fnc_hashHasKey) exitWith {\n        ERROR_1(\"Request for synced event - key [%1] not found.\", _eventName);\n        false\n    };\n\n    private _eventEntry = [GVAR(syncedEvents), _eventName] call CBA_fnc_hashGet;\n    _eventEntry params [\"\", \"_eventLog\"];\n\n    [\"ACEs\", [_eventName, _eventLog], _client] call CBA_fnc_targetEvent;\n} else {\n    params [\"_eventName\", \"_eventLog\"];\n\n    // This is the client handling the response from the server\n    // Start running the events\n    {\n        _x params [\"\", \"_eventArgs\",\"_ttl\"];\n        [_eventName, _eventArgs, _ttl] call FUNC(_handleSyncedEvent);\n        false\n    } count _eventLog;\n\n    INFO_1(\"[%1] synchronized\",_eventName);\n};\n\ntrue\n",
        "functionName": "ace_common_fnc__handleRequestSyncedEvent"
      },
      {
        "fileName": "fnc__handleSyncedEvent.sqf",
        "content": "/*\n * Author: jaynus\n * Handles synced events being received. Server will log them, and server/client will execute them.\n *\n * Arguments: [Client]\n * 0: eventName <STRING>\n * 1: arguments <ARRAY>\n * 2: ttl <NUMBER>\n *\n * Return Value:\n * Boolean of success <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc__handleSyncedEvent\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_args\", \"_ttl\"];\n\nif !([GVAR(syncedEvents), _name] call CBA_fnc_hashHasKey) exitWith {\n    ERROR_1(\"Synced event key [%1] not found (_handleSyncedEvent).\", _name);\n    false\n};\n\nprivate _internalData = [GVAR(syncedEvents), _name] call CBA_fnc_hashGet;\n_internalData params [\"_eventCode\", \"_eventLog\"];\n\nif (isServer) then {\n    // Server needs to internally log it for synchronization\n    if (_ttl > -1) then {\n        _eventLog pushBack [diag_tickTime, _args, _ttl];\n    };\n};\n\n_args call _eventCode;\n",
        "functionName": "ace_common_fnc__handleSyncedEvent"
      },
      {
        "fileName": "fnc_actionKeysNamesConverted.sqf",
        "content": "/*\n * Author: commy2\n * Reports same as actionKeysNames(Array) but in a format processable by \"keyDown\".\n *\n * Arguments:\n * 0: Action name <STRING>\n *\n * Return Value:\n * Keybinds, format: [DIK, _shift, _ctrl, _alt] <ARRAY>\n *\n * Example:\n * \"ReloadMagazine\" call ace_common_fnc_actionKeysNamesConverted\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define LAST_DIK 250\n#define PLACEHOLDER_PLUS \"<PLUS>\"\n\n#define LKEYNAME_LSHIFT localize \"STR_DIK_LSHIFT\"\n#define LKEYNAME_RSHIFT localize \"STR_DIK_RSHIFT\"\n#define LKEYNAME_LCONTROL localize \"STR_DIK_LCONTROL\"\n#define LKEYNAME_RCONTROL localize \"STR_DIK_RCONTROL\"\n#define LKEYNAME_LALT localize \"STR_DIK_LMENU\"\n#define LKEYNAME_RALT localize \"STR_DIK_RMENU\"\n\n// stored in ui namespace to force it to be recreated every game start\n// this way we make it work in savegames after a language change\nprivate _keyTable = uiNamespace getVariable QGVAR(keyNameTable);\n\nif (isNil \"_keyTable\") then {\n    _keyTable = [];\n    uiNamespace setVariable [QGVAR(keyNameTable), _keyTable];\n\n    for \"_i\" from 0 to LAST_DIK do {\n        private _keyName = keyName _i;\n\n        // keys are reported as nested strings for god knows why\n        _keyName = _keyName select [1, count _keyName - 2];\n\n        _keyTable pushBack _keyName;\n    };\n};\n\nprivate _keyCache = uiNamespace getVariable [QGVAR(keyNameCache), locationNull];\n\nif (isNull _keyCache) then {\n    _keyCache = call CBA_fnc_createNamespace;\n    uiNamespace setVariable [QGVAR(keyNameCache), _keyCache];\n};\n\nparams [[\"_action\", \"\", [\"\"]]];\n\nprivate _keybinds = actionKeysNamesArray _action apply {\n    private _keyName = _x;\n    private _keybind = _keyCache getVariable _keyName;\n\n    if (isNil \"_keybind\") then {\n        private _key = -1;\n        private _shift = false;\n        private _ctrl = false;\n        private _alt = false;\n\n        // copy, keep original varname for cache\n        private _keyImage = _keyName;\n\n        // handle \"+\" being a key and the seperator - as first character\n        if ((_keyImage select [0,1]) isEqualTo \"+\") then {\n            _keyImage = PLACEHOLDER_PLUS + (_keyImage select [1]);\n        };\n\n        // - and as character seperated by \"+\"\n        _keyImage = [_keyImage, \"++\", \"+\" + PLACEHOLDER_PLUS] call CBA_fnc_replace;\n\n        // get single keys (also revert back non-seperator \"+\" keys)\n        _keyImage = _keyImage splitString \"+\" apply {\n            [_x, \"+\"] select (_x isEqualTo PLACEHOLDER_PLUS);\n        };\n\n        // parse single keys\n        {\n            switch (true) do {\n                case (_x in [LKEYNAME_LSHIFT, LKEYNAME_RSHIFT]): {\n                    _shift = true;\n                };\n                case (_x in [LKEYNAME_LCONTROL, LKEYNAME_RCONTROL]): {\n                    _ctrl = true;\n                };\n                case (_x in [LKEYNAME_LALT, LKEYNAME_RALT]): {\n                    _alt = true;\n                };\n                default {\n                    // @todo handle double keys? (\"C + R\")\n                    // currently only reports last key\n                    // not usable by keyDown by default\n                    _key = _keyTable find _x;\n                };\n            };\n        } forEach _keyImage;\n\n        // cache\n        _keybind = [_key, _shift, _ctrl, _alt];\n        _keyCache setVariable [_keyName, _keybind];\n    };\n\n    _keybind\n};\n\n_keybinds\n",
        "functionName": "ace_common_fnc_actionKeysNamesConverted"
      },
      {
        "fileName": "fnc_addActionEventHandler.sqf",
        "content": "/*\n * Author: commy2\n * Add an addAction event to a unit. Used to handle multiple addAction events. Global arguments, local effects. Does only work for player controlled units.\n *\n * Arguments:\n * 0: Unit the action should be assigned to <OBJECT>\n * 1: Name of the action, e.g. \"DefaultAction\" <STRING>\n * 2: Condition <CODE, STRING>\n * 3: Code to execute <CODE, STRING>\n *\n * Return Value:\n * ID of the action (used to remove it later) <NUMBER>\n *\n * Example:\n * [bob, \"DefaultAction\", \"condition\", \"execute\"] call ace_common_fnc_addActionEventHandler\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_action\", \"_condition\", \"_statement\"];\n\nif (_condition isEqualType \"\") then {\n    _condition = compile _condition;\n};\n\nif (_statement isEqualType \"\") then {\n    _statement = compile _statement;\n};\n\nprivate _name = format [\"ACE_Action_%1\", _action];\nprivate _actionsVar = _unit getVariable [_name, [-1, [-1, [], []], objNull]];\n\nif (_unit != _actionsVar select 2) then {  // check if the unit is still valid, fixes respawn issues\n    _actionsVar = [-1, [-1, [], []], objNull];\n};\n\n_actionsVar params [\"_actionID\", \"_actionsArray\"];\n_actionsArray params [\"_id\", \"_actionIDs\", \"_actions\"];\n\n_id = _id + 1;\n\n_actionIDs pushBack _id;\n_actions pushBack [_condition, _statement];\n\n// first action to add, unit needs addAction command\nif (_actionID == -1) then {\n    private _addAction = call compile format [\n        \"[\n            '',\n            {[{if (inputAction '%1' == 0) exitWith {}; {if (_this call (_x select 0)) then {_this call (_x select 1)}} forEach (((_this select 0) getVariable '%2') select 1 select 2)}, _this] call CBA_fnc_directCall},\n            nil,\n            -1,\n            false,\n            true,\n            '%1',\n            \"\"if (_this != ACE_player || {vehicle _this != _target}) exitWith {false}; _actions = (_this getVariable '%2') select 1 select 2; _count = count _actions; _index = 0; _return = false; while {_index < _count && {!_return}} do {_return = [_target, _this] call ((_actions select _index) select 0); _index = _index + 1}; _return\"\"\n        ]\",\n        _action,\n        _name\n    ];\n\n    _actionID = _unit addAction _addAction;\n};\n\n_unit setVariable [_name, [_actionID, [_id, _actionIDs, _actions], _unit], false];\n\n_id\n",
        "functionName": "ace_common_fnc_addActionEventHandler"
      },
      {
        "fileName": "fnc_addActionMenuEventHandler.sqf",
        "content": "/*\n * Author: commy2\n * Add an addAction event to a unit. Used to handle multiple addAction events and add a action to the mouse wheel menu. Global arguments, local effects. Does only work for player controlled units.\n *\n * Arguments:\n * 0: Unit the action should be assigned to <OBJECT>\n * 1: Menu title of the action <STRING>\n * 2: Name of the action, e.g. \"DefaultAction\" <STRING>\n * 3: Condition <CODE, STRING>\n * 4: Code to execute by the action <CODE, STRING>\n * 5: Condition for the menu action <CODE, STRING>\n * 6: Code to execute from the menu <CODE, STRING>\n * 7: Priority of the action (default: 0) <NUMBER>\n *\n * Return Value:\n * ID of the action (used to remove it later) <NUMBER>\n *\n * Example:\n * [bob, \"Title\", \"DefaultAction\", \"condition\", \"execute\", \"conditionmenu\", \"executemenu\", 5] call ace_common_fnc_addActionMenuEventHandler\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_displayName\", \"_action\", \"_condition\", \"_statement\", \"_condition2\", \"_statement2\", [\"_priority\", 0]];\n\nif (_condition isEqualType \"\") then {\n    _condition = compile _condition;\n};\n\nif (_statement isEqualType \"\") then {\n    _statement = compile _statement;\n};\n\nif (_condition2 isEqualType \"\") then {\n    _condition2 = compile _condition2;\n};\n\nif (_statement2 isEqualType \"\") then {\n    _statement2 = compile _statement2;\n};\n\nprivate _name = format [\"ACE_ActionMenu_%1\", _action];\nprivate _actionsVar = _unit getVariable [_name, [-1, [], []]];\n\n_actionsVar params [\"_id\", \"_actionIDs\", \"_actions\"];\n\n_id = _id + 1;\n\nprivate _nameVar = format [\"%1_ID%2\", _name, _id];\nmissionNamespace setVariable [_nameVar, [_condition, _statement, _condition2, _statement2]];\n\n_actionIDs pushBack _id;\n\nprivate _addAction = call compile format [\n    \"[\n        '%2',\n        {[{if (inputAction '%1' == 0) then {if (_this call (%3 select 2)) then {_this call (%3 select 3)}} else {_this call (%3 select 1)}}, _this] call CBA_fnc_directCall},\n        nil,\n        %4,\n        false,\n        true,\n        '%1',\n        \"\"if (_this != ACE_player || {vehicle _this != _target}) exitWith {false}; [_target, _this] call (%3 select 0)\"\"\n    ]\",\n    _action,\n    _displayName,\n    _nameVar,\n    _priority\n];\n\nprivate _actionID = _unit addAction _addAction;\n\n_actions pushBack [_actionID, _nameVar];\n\n_unit setVariable [_name, [_id, _actionIDs, _actions], false];\n\n_id\n",
        "functionName": "ace_common_fnc_addActionMenuEventHandler"
      },
      {
        "fileName": "fnc_addCanInteractWithCondition.sqf",
        "content": "/*\n * Author: commy2\n * Add a condition that gets checked by ace_common_fnc_canInteractWith.\n *\n * Arguments:\n * 0: The conditions id. Used to remove later or as exception name. An already existing name overwrites. <STRING>\n * 1: The condition to check. format of \"_this\" is \"[_player, _target]\". <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ID\", {Condition}] call ace_common_fnc_addCanInteractWithCondition\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_conditionName\", \"_conditionFunc\"];\n\n_conditionName = toLower _conditionName;\n\nprivate _conditions = missionNamespace getVariable [QGVAR(InteractionConditions), [[],[]]];\n_conditions params [\"_conditionNames\", \"_conditionFuncs\"];\n\nprivate _index = _conditionNames find _conditionName;\n\nif (_index == -1) then {\n    _index = count _conditionNames;\n};\n\n_conditionNames set [_index, _conditionName];\n_conditionFuncs set [_index, _conditionFunc];\n\nGVAR(InteractionConditions) = _conditions;\n",
        "functionName": "ace_common_fnc_addCanInteractWithCondition"
      },
      {
        "fileName": "fnc_addLineToDebugDraw.sqf",
        "content": "/*\n * Author: esteldunedain\n * Add line to draw on debug\n *\n * Arguments:\n * 0: Start point ASL <ARRAY>\n * 1: End point ASL <ARRAY>\n * 2: Color <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[0,0,0], [1,1,0], [1,0,0,1]] call ace_common_fnc_addLineToDebugDraw;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_startASL\", \"_endASL\", \"_color\"];\n\nif (isNil QGVAR(debugLines)) then {\n    GVAR(debugLines) = [];\n    GVAR(debugLinesIndex) = 0;\n};\n\nif (count GVAR(debugLines) < 100) then {\n    GVAR(debugLines) pushBack [ASLtoAGL _startASL, ASLtoAGL _endASL, _color];\n    GVAR(debugLinesIndex) = 0;\n} else {\n    GVAR(debugLines) set [GVAR(debugLinesIndex), [ASLtoAGL _startASL, ASLtoAGL _endASL, _color]];\n    GVAR(debugLinesIndex) = (GVAR(debugLinesIndex) + 1) mod 100;\n};\n\nif (isNil QGVAR(debugDrawHandler)) then {\n    GVAR(debugDrawHandler) = addMissionEventHandler [\"Draw3D\", {\n        if (GVAR(debugLines) isEqualTo []) exitWith {\n            removeMissionEventHandler [\"Draw3D\", GVAR(debugDrawHandler)];\n            GVAR(debugDrawHandler) = nil;\n        };\n\n        {\n            _x params [\"_start\", \"_end\", \"_color\"];\n            drawLine3D [_start, _end, _color];\n        } forEach GVAR(debugLines);\n    }];\n};\n",
        "functionName": "ace_common_fnc_addLineToDebugDraw"
      },
      {
        "fileName": "fnc_addMapMarkerCreatedEventHandler.sqf",
        "content": "/*\n * Author: commy2\n * Add a map marker creation event handler.\n *\n * Arguments:\n * 0: Code to execute <CODE, STRING>\n *\n * Return Value:\n * ID of the event script (used to remove it later). <NUMBER>\n *\n * Example:\n * [\"bob\"] call ace_common_fnc_addMapMarkerCreatedEventHandler\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_statement\"];\n\nif (_statement isEqualType \"\") then {\n    _statement = compile _statement;\n};\n\nprivate _actionsVar = missionNamespace getVariable [\"ACE_EventHandler_MapMarker\", [-1, [], []]];\n\n_actionsVar params [\"_id\", \"_actionIDs\", \"_actions\"];\n\n_id = _id + 1;\n\nif (_id == 0) then {\n    uiNamespace setVariable [\"ACE_EventHandler_MapMarker\", count allMapMarkers];\n    (\"ACE_EventHandlerHelper2\" call BIS_fnc_rscLayer) cutRsc [\"ACE_EventHandlerHelper2\", \"PLAIN\"];\n};\n\n_actionIDs pushBack _id;\n_actions pushBack _statement;\n\nmissionNamespace setVariable [\"ACE_EventHandler_MapMarker\", [_id, _actionIDs, _actions]];\n\n_id\n",
        "functionName": "ace_common_fnc_addMapMarkerCreatedEventHandler"
      },
      {
        "fileName": "fnc_addSyncedEventHandler.sqf",
        "content": "/*\n * Author: jaynus\n * Register an event handler for an ACE synced event\n *\n * Arguments:\n * 0: Name <STRING>\n * 1: Handler <CODE>\n * 2: TTL (optional: 0) <NUMBER, CODE>\n *\n * Return Value:\n * Boolean of success <BOOL>\n *\n * Example:\n * [\"myEvent\", {_this call x}, 0] call ace_common_fnc_addSyncedEventHandler\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_handler\", [\"_ttl\", 0]];\n\nif ([GVAR(syncedEvents), _name] call CBA_fnc_hashHasKey) exitWith {\n    ERROR_1(\"Duplicate synced event [%1] creation.\",_name);\n    false\n};\n\nprivate _eventId = [_name, FUNC(_handleSyncedEvent)] call CBA_fnc_addEventHandler;\nprivate _data = [_handler, [], _ttl, _eventId];\n\n[GVAR(syncedEvents), _name, _data] call CBA_fnc_hashSet;\n",
        "functionName": "ace_common_fnc_addSyncedEventHandler"
      },
      {
        "fileName": "fnc_addToInventory.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Adds an item, weapon, or magazine to the unit's inventory or places it in a weaponHolder if no space.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Classname <STRING>\n * 2: Container (uniform, vest, backpack) (default: \"\") <STRING>\n * 3: Magazine Ammo Count (default: -1) <NUMBER>\n *\n * Return Value:\n * 0: Added to player <BOOL>\n * 1: weaponholder <OBJECT>\n *\n * Example:\n * [bob, \"classname\", \"\", 5] call ace_common_fnc_addToInventory\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_classname\", [\"_container\", \"\"], [\"_ammoCount\", -1]];\n\nprivate _type = _classname call FUNC(getItemType);\n\nprivate _canAdd = false;\nprivate _addedToUnit = false;\n\nswitch (_container) do {\n    case \"vest\": {\n        _canAdd = _unit canAddItemToVest _classname;\n    };\n    case \"backpack\": {\n        _canAdd = _unit canAddItemToBackpack _classname;\n    };\n    case \"uniform\": {\n        _canAdd = _unit canAddItemToUniform _classname;\n    };\n    default {\n        _canAdd = _unit canAdd _classname;\n    };\n};\n\nswitch (_type select 0) do {\n    case \"weapon\": {\n        if (_canAdd) then {\n            _addedToUnit = true;\n\n            switch (_container) do {\n                case \"vest\": {\n                    (vestContainer _unit) addWeaponCargoGlobal [_classname, 1];\n                };\n                case \"backpack\": {\n                    (backpackContainer _unit) addWeaponCargoGlobal [_classname, 1];\n                };\n                case \"uniform\": {\n                    (uniformContainer _unit) addWeaponCargoGlobal [_classname, 1];\n                };\n                default {\n                    _unit addWeaponGlobal _classname;\n                };\n            };\n        } else {\n            _addedToUnit = false;\n\n            private _pos = _unit modelToWorldVisual [0,1,0.05];\n\n            _unit = createVehicle [\"WeaponHolder_Single_F\", _pos, [], 0, \"NONE\"];\n            _unit addWeaponCargoGlobal [_classname, 1];\n            _unit setPosATL _pos;\n        };\n    };\n\n    case \"magazine\": {\n        if (_ammoCount == -1) then {\n            _ammoCount = getNumber (configFile >> \"CfgMagazines\" >> _classname >> \"count\");\n        };\n\n        if (_canAdd) then {\n            _addedToUnit = true;\n\n            switch (_container) do {\n                case \"vest\": {\n                    (vestContainer _unit) addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\n                };\n                case \"backpack\": {\n                    (backpackContainer _unit) addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\n                };\n                case \"uniform\": {\n                    (uniformContainer _unit) addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\n                };\n                default {\n                    _unit addMagazine [_classname, _ammoCount];\n                };\n            };\n        } else {\n            _addedToUnit = false;\n\n            private _pos = _unit modelToWorldVisual [0,1,0.05];\n\n            _unit = createVehicle [\"WeaponHolder_Single_F\", _pos, [], 0, \"NONE\"];\n            _unit addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\n            _unit setPosATL _pos;\n        };\n    };\n\n    case \"item\": {\n        if (_canAdd) then {\n            _addedToUnit = true;\n\n            switch (_container) do {\n                case \"vest\": {\n                    _unit addItemToVest _classname;\n                };\n                case \"backpack\": {\n                    _unit addItemToBackpack _classname;\n                };\n                case \"uniform\": {\n                    _unit addItemToUniform _classname;\n                };\n                default {\n                    _unit addItem _classname;\n                };\n            };\n        } else {\n            _addedToUnit = false;\n\n            private _pos = _unit modelToWorldVisual [0,1,0.05];\n\n            _unit = createVehicle [\"WeaponHolder_Single_F\", _pos, [], 0, \"NONE\"];\n            _unit addItemCargoGlobal [_classname, 1];\n            _unit setPosATL _pos;\n        };\n    };\n\n    default {\n        _addedToUnit = false;\n        WARNING_2(\"Incorrect item type passed to %1, passed: %2\",QFUNC(AddToInventory),_type);\n    };\n};\n\n[_addedToUnit, _unit]\n",
        "functionName": "ace_common_fnc_addToInventory"
      },
      {
        "fileName": "fnc_ambientBrightness.sqf",
        "content": "/*\n * Author: commy2, idea by Falke\n * Returns a brightness value depending on the sun and moon state. Ranges from 0 to 1 (dark ... bright).\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Ambient brightness <NUMBER>\n *\n * Example:\n * [] call ace_common_fnc_ambientBrightness\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n(sunOrMoon * sunOrMoon * (1 - overcast * 0.25) + (moonIntensity / 5) * (1 - overcast)) min 1\n",
        "functionName": "ace_common_fnc_ambientBrightness"
      },
      {
        "fileName": "fnc_arithmeticGetResult.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets arithmetic result from a set.\n *\n * Arguments:\n * 0: Namespace <OBJECT><LOCATION><MISSIONNAMESPACE>\n * 1: Number Set ID <STRING>\n * 2: Operation (sum, product, min, max, avg) <STRING>\n *\n * Return Value:\n * Value <NUMBER>\n *\n * Example:\n * [ace_player, \"ace_aimCoefficents\", \"product\"] call ace_common_fnc_arithmeticGetResult\n * [missionNameSpace, \"ace_hearing\", \"min\"] call ace_common_fnc_arithmeticGetResult\n *\n * Public: Yes\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_namespace\", \"_setID\", \"_op\"];\nTRACE_3(\"params\",_namespace,_setID,_op);\n\nprivate _data = (_namespace getVariable _setID) param [2, []];\n\nswitch (_op) do {\n    case (\"sum\"): {\n        private _result = 0;\n        {\n            _result = _result + (call _x);\n            nil\n        } count _data;\n        _result // return\n    };\n    case (\"product\"): {\n        private _result = 1;\n        {\n            _result = _result * (call _x);\n            nil\n        } count _data;\n        _result // return\n    };\n    case (\"min\"): {\n        private _result = 1e99;\n        {\n            _result = _result min (call _x);\n            nil\n        } count _data;\n        _result // return\n    };\n    case (\"max\"): {\n        private _result = -1e99;\n        {\n            _result = _result max (call _x);\n            nil\n        } count _data;\n        _result // return\n    };\n    case (\"avg\"): {\n        private _result = 0;\n        {\n            _result = _result + (call _x);\n            nil\n        } count _data;\n        _result / (count _data); // return\n    };\n    default {3735928559};\n};\n",
        "functionName": "ace_common_fnc_arithmeticGetResult"
      },
      {
        "fileName": "fnc_arithmeticSetSource.sqf",
        "content": "/*\n * Author: PabstMirror\n * Adds or removes a source to an arithmetic set.\n *\n * Arguments:\n * 0: Namespace <OBJECT><LOCATION><MISSIONNAMESPACE>\n * 1: Number Set ID <STRING>\n * 2: Source <STRING>\n * 3: Code that returns a number (can access var _namespace) [use {} to remove] <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [missionNameSpace, \"ace_hearing\", \"myMission\", {0.5}] call ace_common_fnc_arithmeticSetSource\n * [ace_player, \"ace_aimCoefficents\", \"ace_medical\", {linearConversion [0,1,(_namespace getVariable \"ace_medical_pain\",1,0.2,true]}] call ace_common_fnc_arithmeticSetSource\n *\n * Public: Yes\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_namespace\", \"_setID\", \"_source\", \"_variable\"];\nTRACE_4(\"params\",_namespace,_setID,_source,_variable);\n\nprivate _hash = _namespace getVariable _setID;\nif (isNil \"_hash\") then {\n    _hash = [] call CBA_fnc_hashCreate;\n    _namespace setVariable [_setID, _hash];\n};\nif (_variable isEqualTo {}) then {\n    TRACE_1(\"removing\",_source);\n    [_hash, _source] call CBA_fnc_hashRem;\n} else {\n    TRACE_2(\"adding\",_source,_variable);\n    [_hash, _source, _variable] call CBA_fnc_hashSet;\n};\n\nnil\n",
        "functionName": "ace_common_fnc_arithmeticSetSource"
      },
      {
        "fileName": "fnc_ASLToPosition.sqf",
        "content": "/*\n * Author: esteldunedain\n * Converts ASL to Arma \"Position\"\n *\n * Arguments:\n * 0: position x <NUMBER>\n * 1: position y <NUMBER>\n * 2: position z <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1, 2, 3] call ace_common_fnc_ASLToPosition\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (surfaceIsWater _this) then {\n    _this\n} else {\n    ASLtoATL _this\n};\n",
        "functionName": "ace_common_fnc_ASLToPosition"
      },
      {
        "fileName": "fnc_assignedItemFix.sqf",
        "content": "/*\n * Author: commy2\n * Initialized the assigned item fix.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_assignedItemFix\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nACE_isMapEnabled     = call {private _config = missionConfigFile >> \"showMap\";     !isNumber _config || {getNumber _config == 1}};  // default value is 1, so do isNumber check first\nACE_isCompassEnabled = call {private _config = missionConfigFile >> \"showCompass\"; !isNumber _config || {getNumber _config == 1}};\nACE_isWatchEnabled   = call {private _config = missionConfigFile >> \"showWatch\";   !isNumber _config || {getNumber _config == 1}};\nACE_isRadioEnabled   = call {private _config = missionConfigFile >> \"showRadio\";   !isNumber _config || {getNumber _config == 1}};\nACE_isGPSEnabled     = call {private _config = missionConfigFile >> \"showGPS\";     !isNumber _config || {getNumber _config == 1}};\n\nGVAR(AssignedItems) = [];\nGVAR(AssignedItemsInfo) = [];\nGVAR(AssignedItemsShownItems) = [\n    ACE_isMapEnabled,\n    ACE_isCompassEnabled,\n    ACE_isWatchEnabled,\n    ACE_isRadioEnabled,\n    ACE_isGPSEnabled\n];\n\n[\"loadout\", {\n    params [\"_unit\"];\n\n    private _assignedItems = getUnitLoadout _unit param [9, [\"\",\"\",\"\",\"\",\"\",\"\"]]; // [\"ItemMap\",\"ItemGPS\",\"ItemRadio\",\"ItemCompass\",\"ItemWatch\",\"NVGoggles\"]\n\n    GVAR(AssignedItemsShownItems) = [\n        !((_assignedItems select 0) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 0 >> \"ACE_hideItemType\") != \"map\"},\n        !((_assignedItems select 3) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 3 >> \"ACE_hideItemType\") != \"compass\"},\n        !((_assignedItems select 4) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 4 >> \"ACE_hideItemType\") != \"watch\"},\n        !((_assignedItems select 2) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 2 >> \"ACE_hideItemType\") != \"radio\"},\n        !((_assignedItems select 1) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 1 >> \"ACE_hideItemType\") != \"gps\"}\n    ];\n\n    GVAR(AssignedItemsShownItems) params [\"_showMap\", \"_showCompass\", \"_showWatch\", \"_showRadio\", \"_showGPS\"];\n\n    showMap _showMap;\n    showCompass _showCompass;\n    showWatch _showWatch;\n    showRadio _showRadio;\n    showGPS (_showGPS || {cameraOn == getConnectedUAV _unit});  //If player is activly controling a UAV, showGPS controls showing the map (m key)\n}] call CBA_fnc_addPlayerEventHandler;\n",
        "functionName": "ace_common_fnc_assignedItemFix"
      },
      {
        "fileName": "fnc_assignObjectsInList.sqf",
        "content": "/*\n * Author: Glowbal\n * Loops through a string and filters out object names/variables to assign a value for given variable.\n * Used by moduleAssign* within various parts of the ACE3 project.\n *\n * Arguments:\n * 0: List <STRING>\n * 1: Variable Name <STRING>\n * 2: Value <ANY>\n * 3: Global <BOOL>\n * 4: Vehicle <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"text\", \"variable\", value, true] call ace_common_fnc_assignObjectsInList\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_list\", \"_variable\", \"_setting\", \"_global\", [\"_vehicle\", false]];\n\nif (_list isEqualType \"\") then {\n    _list = [_list, true, true] call FUNC(parseList);\n    TRACE_1(\"Parsed\",_list)\n};\n\n{\n    if (!isNil \"_x\") then {\n        if (_x isEqualType objNull) then {\n            if (local _x) then {\n                if (_vehicle) then {\n                    (vehicle _x) setVariable [_variable, _setting, _global];\n                    TRACE_6(\"Set variable vehicle\",_x,vehicle _x,typeOf (vehicle _x),_variable,_setting,_global);\n                } else {\n                    _x setVariable [_variable, _setting, _global];\n                    TRACE_5(\"Set variable\",_x,typeOf _x,_variable,_setting,_global);\n                };\n            };\n        };\n    };\n    false\n} count _list;\n",
        "functionName": "ace_common_fnc_assignObjectsInList"
      },
      {
        "fileName": "fnc_binarizeNumber.sqf",
        "content": "/*\n * Author: commy2\n * Get a binary equivalent of a decimal number.\n *\n * Arguments:\n * 0: Decimal Number <NUMBER>\n * 1: Minimum length of the returned Array, note: returned array can be larger (default: 8) <NUMBER>\n *\n * Return Value:\n * Booleans <ARRAY>\n *\n * Example:\n * [5, 5] call ace_common_fnc_binarizeNumber\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_number\", [\"_minLength\", 8]];\n\n_number = round _number;\n\nprivate _array = [];\n_array resize _minLength;\n\nfor \"_index\" from 0 to (_minLength - 1) do {\n    _array set [_index, false];\n};\n\nprivate _index = 0;\n\nwhile {_number > 0} do {\n    private _rest = _number mod 2;\n    _number = floor (_number / 2);\n\n    _array set [_index, _rest == 1];\n    _index = _index + 1;\n};\n\n_array\n",
        "functionName": "ace_common_fnc_binarizeNumber"
      },
      {
        "fileName": "fnc_blurScreen.sqf",
        "content": "/*\n * Author: Glowbal\n * Blurs screen.\n *\n * Arguments:\n * 0: ID <NUMBER>\n * 1: Show? <BOOL, NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [5, true] call ace_common_fnc_blurScreen\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nparams [\"_id\", [\"_show\", false]];\n\nif (_show isEqualType 0) then {\n    _show = _show == 1;\n};\n\nif (isNil QGVAR(SHOW_BLUR_SCREEN_COLLECTION)) then {\n    GVAR(SHOW_BLUR_SCREEN_COLLECTION) = [];\n};\n\nif (_show) then {\n    GVAR(SHOW_BLUR_SCREEN_COLLECTION) pushBack _id;\n\n    // show blur\n    if (isNil QGVAR(MENU_ppHandle_GUI_BLUR_SCREEN)) then {\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) = ppEffectCreate [\"DynamicBlur\", 102];\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) ppEffectAdjust [0.9];\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) ppEffectEnable true;\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) ppEffectCommit 0;\n    };\n} else {\n    GVAR(SHOW_BLUR_SCREEN_COLLECTION) = GVAR(SHOW_BLUR_SCREEN_COLLECTION) - [_id];\n\n    if (GVAR(SHOW_BLUR_SCREEN_COLLECTION) isEqualTo []) then {\n        // hide blur\n        if (!isNil QGVAR(MENU_ppHandle_GUI_BLUR_SCREEN)) then {\n            ppEffectDestroy GVAR(MENU_ppHandle_GUI_BLUR_SCREEN);\n            GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) = nil;\n        };\n    };\n};\n",
        "functionName": "ace_common_fnc_blurScreen"
      },
      {
        "fileName": "fnc_cachedCall.sqf",
        "content": "/*\n * Author: esteldunedain, Jaynus\n * Returns the result of the function and caches it up to a given time or event\n *\n * Arguments:\n * 0: Parameters <ARRAY>\n * 1: Function <CODE>\n * 2: Namespace to store the cache on <NAMESPACE>\n * 3: Cache uid <STRING>\n * 4: Max duration of the cache <NUMBER>\n * 5: Event that clears the cache (default: nil) <STRING>\n *\n * Return Value:\n * Result of the function <ANY>\n *\n * Example:\n * [[array]], {dothings}, NAMESPACE, \"UID\", 5, \"clear\"] call ace_common_fnc_cachedCall\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_params\", \"_function\", \"_namespace\", \"_uid\", \"_duration\", \"_event\"];\n\nif ((_namespace getVariable [_uid, [-99999]]) select 0 < diag_tickTime) then {\n    _namespace setVariable [_uid, [diag_tickTime + _duration, _params call _function]];\n\n    // Does the cache needs to be cleared on an event?\n    if (!isNil \"_event\") then {\n        private _varName = format [QGVAR(clearCache_%1), _event];\n        private _cacheList = missionNamespace getVariable _varName;\n\n        // If there was no EH to clear these caches, add one\n        if (isNil \"_cacheList\") then {\n            _cacheList = [];\n            missionNamespace setVariable [_varName, _cacheList];\n\n            [_event, {\n                #ifdef DEBUG_MODE_FULL\n                    INFO_1(\"Clear cached variables on event: %1\",_eventName);\n                #endif\n                // Get the list of caches to clear\n                //IGNORE_PRIVATE_WARNING [\"_eventName\"]; \n                // _eventName is defined on the function that calls the event\n                private _varName = format [QGVAR(clearCache_%1), _eventName];\n                private _cacheList = missionNamespace getVariable [_varName, []];\n                // Erase all the cached results\n                {\n                    _x call FUNC(eraseCache);\n                } forEach _cacheList;\n                // Empty the list\n                missionNamespace setVariable [_varName, []];\n            }] call CBA_fnc_addEventHandler;\n        };\n\n        // Add this cache to the list of the event\n        _cacheList pushBack [_namespace, _uid];\n    };\n\n#ifdef DEBUG_MODE_FULL\n    INFO_2(\"Calculated result: %1 %2\",_namespace,_uid);\n} else {\n    INFO_2(\"Cached result: %1 %2\",_namespace,_uid);\n#endif\n\n};\n\n(_namespace getVariable _uid) select 1\n",
        "functionName": "ace_common_fnc_cachedCall"
      },
      {
        "fileName": "fnc_canDig.sqf",
        "content": "/*\n * Author: Ruthberg, commy2\n * Checks if the player can dig on the surface below (enough dust).\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Can Dig <BOOL>\n *\n * Example:\n * [ACE_player] call ace_common_fnc_canDig\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _posASL = getPosASL _unit;\n\nif ((getPosATL _unit) select 2 > 0.05 || // Walking on objects, such as buildings, pavements, etc.\n    {surfaceIsWater _posASL} // posATL in low water (not as low to allow awalking) is negative\n) exitWith {false};\n\nprivate _surfaceClass = (surfaceType _posASL) select [1];\nprivate _surfaceType = getText (configFile >> \"CfgSurfaces\" >> _surfaceClass >> \"soundEnviron\");\nprivate _surfaceDust = getNumber (configFile >> \"CfgSurfaces\" >> _surfaceClass >> \"dust\");\nTRACE_2(\"Surface\",_surfaceType,_surfaceDust);\n\n!(_surfaceType in DIG_SURFACE_BLACKLIST) && {(_surfaceDust >= 0.1) || {_surfaceType in DIG_SURFACE_WHITELIST}}\n",
        "functionName": "ace_common_fnc_canDig"
      },
      {
        "fileName": "fnc_canGetInPosition.sqf",
        "content": "/*\n * Author: commy2\n * Is the unit able to enter the vehicle in the given position?\n *\n * Arguments:\n * 0: Unit to enter the vehicle <OBJECT>\n * 1: The vehicle to be entered <OBJECT>\n * 2: Position. Can be \"Driver\", \"Pilot\", \"Gunner\", \"Commander\", \"Copilot\", \"Turret\", \"FFV\", \"Codriver\" or \"Cargo\" <STRING>\n * 3: Check current distance to vehicles memory point? (default: false) <BOOL>\n * 4: Index. \"Turret\", \"FFV\", \"Codriver\" and \"Cargo\" support this optional parameter. Which position should be taken. Note: This index is different from Armas \"cargoIndex\". (default: next free index) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, car, \"Pilot\", true, \"Turret\"] call ace_common_fnc_canGetInPosition\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define CANGETINDRIVER      (isNull (driver _vehicle)             || {!alive driver _vehicle})               && {!lockedDriver _vehicle}           && {getNumber (_config >> \"isUav\") != 1}\n#define CANGETINTURRETINDEX (isNull (_vehicle turretUnit _turret) || {!alive (_vehicle turretUnit _turret)}) && {!(_vehicle lockedTurret _turret)} && {getNumber (_config >> \"isUav\") != 1}\n\nparams [\"_unit\", \"_vehicle\", \"_position\", [\"_checkDistance\", false], [\"_index\", -1]];\n\n_position = toLower _position;\n\n// general\nif (!alive _vehicle || {locked _vehicle > 1}) exitWith {false};\n\nprivate [\"_selectionPosition\", \"_selectionPosition2\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _turret = [];\n\nprivate _radius = 0;\n\nprivate _enemiesInVehicle = false;   //Possible Side Restriction\n{\n    if (side _unit getFriend side _x < 0.6) exitWith {_enemiesInVehicle = true};\n} forEach crew _vehicle;\n\nprivate _return = false;\nswitch (_position) do {\n    case \"driver\" : {\n        _radius = getNumber (_config >> \"getInRadius\");\n        _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\n\n        if (_vehicle isKindOf \"Tank\") then {\n            _selectionPosition2 = [-(_selectionPosition select 0), _selectionPosition select 1, _selectionPosition select 2];\n        };\n\n        _return = CANGETINDRIVER;\n    };\n\n    case \"pilot\" : {\n        _radius = getNumber (_config >> \"getInRadius\");\n        _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\n\n        _return = CANGETINDRIVER;\n    };\n\n    case \"gunner\" : {\n        _turret = [_vehicle] call FUNC(getTurretGunner);\n        if (_turret isEqualTo []) exitWith {false};\n\n        private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\n        _radius = getNumber (_config >> \"getInRadius\");\n        _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\n\n        _return = CANGETINTURRETINDEX\n    };\n\n    case \"commander\" : {\n        _turret = [_vehicle] call FUNC(getTurretCommander);\n        if (_turret isEqualTo []) exitWith {false};\n\n        private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\n        _radius = getNumber (_config >> \"getInRadius\");\n        _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\n\n        _return = CANGETINTURRETINDEX\n    };\n\n    case \"copilot\" : {\n        _turret = [_vehicle] call FUNC(getTurretCopilot);\n        if (_turret isEqualTo []) exitWith {false};\n\n        private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\n        _radius = getNumber (_config >> \"getInRadius\");\n        _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\n\n        _return = CANGETINTURRETINDEX\n    };\n\n    case \"turret\" : {\n        private _turrets = [_vehicle] call FUNC(getTurretsOther);\n\n        if (_index != -1 && {_turret = _turrets select _index;\n          CANGETINTURRETINDEX\n        }) then {\n            private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\n            _radius = getNumber (_config >> \"getInRadius\");\n            _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\n\n            _return = true\n        } else {\n            for \"_index\" from 0 to (count _turrets - 1) do {\n                _turret = _turrets select _index;\n                if (CANGETINTURRETINDEX) exitWith {\n                    private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\n                    _radius = getNumber (_config >> \"getInRadius\");\n                    _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\n\n                    _return = true\n                };\n            };\n        };\n    };\n\n    case \"ffv\" : {\n        private _turrets = [_vehicle] call FUNC(getTurretsFFV);\n\n        if (_index != -1 && {_turret = _turrets select _index;\n          CANGETINTURRETINDEX\n        }) then {\n            private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\n            _radius = getNumber (_config >> \"getInRadius\");\n            _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\n\n            _return = true\n        } else {\n            for \"_index\" from 0 to (count _turrets - 1) do {\n                _turret = _turrets select _index;\n                if (CANGETINTURRETINDEX) exitWith {\n                    private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\n                    _radius = getNumber (_config >> \"getInRadius\");\n                    _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\n\n                    _return = true\n                };\n            };\n        };\n    };\n\n    case \"codriver\" : {\n        private _positions = [typeOf _vehicle] call FUNC(getVehicleCodriver);\n\n        {\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\n        } forEach crew _vehicle;\n\n        if (_index != -1 && {_index in _positions}) then {\n            _radius = getNumber (_config >> \"getInRadius\");\n            _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\n\n            if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\n              _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\n              _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\n            };\n\n            _return = true\n        } else {\n            _index = _positions select 0;\n            if (!isNil \"_index\") then {\n                _radius = getNumber (_config >> \"getInRadius\");\n                _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\n\n                if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\n                    _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\n                    _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\n                };\n\n                _return = true\n            };\n        };\n    };\n\n    case \"cargo\" : {\n        private _positions = [typeOf _vehicle] call FUNC(getVehicleCargo);\n\n        {\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\n        } forEach crew _vehicle;\n\n        if (_index != -1 && {_index in _positions}) then {\n            _radius = getNumber (_config >> \"getInRadius\");\n            _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\n\n            if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\n              _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\n              _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\n            };\n\n            _return = true\n        } else {\n\n            _index = _positions select 0;\n            if (!isNil \"_index\") then {\n                _radius = getNumber (_config >> \"getInRadius\");\n                _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\n\n                if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\n                    _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\n                    _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\n                };\n\n                _return = true\n            };\n        };\n    };\n\n    default {};\n};\n\nprivate _fnc_isInRange = {\n    if (_radius == 0) exitWith {true};\n\n    private _unitPosition = getPos _unit;\n    private _distance = _unitPosition distance (_vehicle modelToWorldVisual _selectionPosition);\n\n    if (!isNil \"_selectionPosition2\") then {\n        _distance = _distance min (_unitPosition distance (_vehicle modelToWorldVisual _selectionPosition2));\n    };\n\n    _distance < _radius\n};\n\n// if you want into the cargo and you can't, then check ffv turrets aswell\nif (_position == \"cargo\") exitWith {\n    if (_return && {!_checkDistance || {_vehicle == vehicle _unit} || _fnc_isInRange}) then {true} else {\n        [_unit, _vehicle, \"ffv\", _checkDistance] call FUNC(canGetInPosition);\n    };\n};\n\n_return && {!_checkDistance || {_vehicle == vehicle _unit} || _fnc_isInRange}\n\n//_enemiesInVehicle\n",
        "functionName": "ace_common_fnc_canGetInPosition"
      },
      {
        "fileName": "fnc_canInteractWith.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit can interact.\n *\n * Arguments:\n * 0: The player. <OBJECT>\n * 1: The interaction target. objNull to ignore. <OBJECT>\n * 2: Exceptions. What general conditions are to skip? (default: []) <ARRAY>\n *\n * Return Value:\n * Unit can interact? <BOOL>\n *\n * Example:\n * [bob, target, []] call ace_common_fnc_canInteractWith\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", [\"_exceptions\", []]];\n\n_exceptions = _exceptions apply {toLower _x};\n\nprivate _owner = _target getVariable [QGVAR(owner), objNull];\n\n// exit if the target is not free to interact\nif (!isNull _owner && {_unit != _owner}) exitWith {false};\n\n// check general conditions\nprivate _conditions = missionNamespace getVariable [QGVAR(InteractionConditions), [[],[]]];\n_conditions params [\"_conditionNames\", \"_conditionFuncs\"];\n\nprivate _canInteract = true;\n\n{\n    if (!(_x in _exceptions) && {!([_unit, _target] call (_conditionFuncs select _forEachIndex))}) exitWith {\n        _canInteract = false;\n    };\n} forEach _conditionNames;\n\n_canInteract\n",
        "functionName": "ace_common_fnc_canInteractWith"
      },
      {
        "fileName": "fnc_cbaSettings_loadFromConfig.sqf",
        "content": "/*\n * Author: PabstMirror\n * Converts a ace_setting config into a cba setting\n *\n * Arguments:\n * 0: Setting config <CONFIG>\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_common_fnc_cbaSettings_loadFromConfig;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\nprivate _varName = configName _config;\nprivate _typeName = toUpper getText (_config >> \"typeName\");\nif (_typeName == \"\") then {\n    WARNING_1(\"Setting [%1] Has no typeName\",_varName);\n    _typeName = \"SCALAR\";\n};\nTRACE_3(\"loadFromConfig\",_var,_typeName,_config);\n\nprivate _isClientSettable = (getNumber (_config >> \"isClientSettable\")) > 0;\nprivate _localizedName = getText (_config >> \"displayName\");\nprivate _localizedDescription = getText (_config >> \"description\");\nprivate _isForced = (getNumber (_config >> \"force\")) > 0;\nprivate _category = getText (_config >> \"category\");\n\nprivate _cbaIsGlobal = (!_isClientSettable) || _isForced;\nif (_isForced) then {GVAR(cbaSettings_forcedSettings) pushBack (toLower _varName);};\n\n// Basic handling of setting types CBA doesn't support:\nif (_typeName == \"ARRAY\") exitWith {\n    WARNING_1(\"Setting [%1] is type ARRAY - limited support\",_varName);\n    private _value = getArray (_config >> \"value\");\n    if (isServer) then {missionNamespace setVariable [_varName, _value, true];};\n};\n\nprivate _cbaSettingType = \"\";\nprivate _cbaValueInfo = [];\nswitch (_typeName) do {\ncase (\"SCALAR\"): { // ACE's Scalar can be a float or an index for a list\n        if (!isNumber (_config >> \"value\")) then {WARNING_2(\"Setting [%1] - value type [%2] is missing number\",_varName,_typeName);};\n        if (isArray (_config >> \"values\")) then {\n            _cbaSettingType = \"LIST\"; // [_values, _valueTitles, _defaultIndex]\n            private _values = [];\n            private _valueTitles = [];\n            {\n                _values pushBack _forEachIndex;\n                _valueTitles pushBack (if ((_x select [0, 1]) == \"$\") then {localize (_x select [1]);} else {_x});\n            } forEach (getArray (_config >> \"values\"));\n            _cbaValueInfo = [_values, _valueTitles, getNumber (_config >> \"value\")];\n        } else {\n            _cbaSettingType = \"SLIDER\"; // [_min, _max, _default, _trailingDecimals]\n            _cbaValueInfo = if (isArray (_config >> \"sliderSettings\")) then {\n                getArray (_config >> \"sliderSettings\");\n            } else {\n                [-1, 5000, 0, 1]\n            };\n            _cbaValueInfo set [2, getNumber (_config >> \"value\")];\n        };\n    };\ncase (\"BOOL\"): {\n        if (!isNumber (_config >> \"value\")) then {WARNING_2(\"Setting [%1] - value type [%2] is missing number\",_varName,_typeName);};\n        _cbaSettingType = \"CHECKBOX\";\n        _cbaValueInfo = (getNumber (_config >> \"value\")) > 0;\n    };\ncase (\"COLOR\"): {\n        if (!isArray (_config >> \"value\")) then {WARNING_2(\"Setting [%1] - value type [%2] is missing array\",_varName,_typeName);};\n        _cbaSettingType = \"COLOR\";\n        _cbaValueInfo = getArray (_config >> \"value\");\n    };\ncase (\"STRING\"): {\n        if (!isText (_config >> \"value\")) then {WARNING_2(\"Setting [%1] - value type [%2] is missing text\",_varName,_typeName);};\n        _cbaSettingType = \"EDITBOX\";\n        _cbaValueInfo = getText (_config >> \"value\");\n    };\n};\n\nif (_cbaSettingType == \"\") exitWith {ERROR_3(\"Setting [%1] - value type [%2] is unknown - %3\",_varName,_typeName,_cbaValueInfo);};\n\nif (_localizedDescription == \"\") then {_localizedDescription = _varName};\nif (_category == \"\") then {\n    // WARNING_1(\"Setting [%1] - no category\",_varName);\n    _category = \"Uncategorized\";\n};\nif (((_varName select [0, 4]) == \"ACE_\") && {(_category select [0, 3]) != \"ACE\"}) then {_category = format [\"ACE %1\", _category];};\nif (((_varName select [0, 5]) == \"ACEX_\") && {(_category select [0, 4]) != \"ACEX\"}) then {_category = format [\"ACEX %1\", _category];};\n\nprivate _code = compile format ['[\"%1\", _this] call FUNC(cbaSettings_settingChanged)', _varName];\n\nTRACE_2(\"setting\",_cbaSettingType,_cbaValueInfo);\nTRACE_4(\"\",_isForced,_cbaIsGlobal,_category,_cbaValueInfo);\nprivate _return = [_varName, _cbaSettingType, [_localizedName, _localizedDescription], _category, _cbaValueInfo, _cbaIsGlobal, _code] call CBA_settings_fnc_init;\nTRACE_1(\"returned\",_return);\nif ((isNil \"_return\") || {_return != 0}) then {ERROR_1(\"Setting [%1] - CBA Error\",_varName);};\n_return\n\n",
        "functionName": "ace_common_fnc_cbaSettings_loadFromConfig"
      },
      {
        "fileName": "fnc_cbaSettings_settingChanged.sqf",
        "content": "/*\n * Author: PabstMirror\n * Function for handeling a cba setting being changed.\n * Adds warning if global setting is changed after ace_settingsInitialized\n *\n * Arguments:\n * 0: Setting Name <STRING>\n * 1: New Value <ANY>\n * 2: Can be changed mid-mission <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ace_medical_level\", 1, false] call ace_common_fnc_cbaSettings_settingChanged;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_settingName\", \"_newValue\", [\"_canBeChanged\", false]];\nTRACE_2(\"\",_settingName,_newValue);\n\n[\"ace_settingChanged\", [_settingName, _newValue]] call CBA_fnc_localEvent;\n\nif (_canBeChanged) exitWith {};\nif (!GVAR(settingsInitFinished)) exitWith {}; // Ignore changed event before CBA_settingsInitialized\nif (CBA_settings_default getVariable [_settingName, []] param [7, 0] == 0) exitWith {}; // Ignore if not a global setting\nif ((getNumber (configFile >> \"ACE_settings\" >> _settingName >> \"canBeChanged\")) == 1) exitWith {}; // Ignore if flagged as ok to change\n\nWARNING_1(\"Global setting [%1] changed mid-mission\",_settingName);\n[QGVAR(displayTextStructured), [format [\"Global setting %1 changed mid-mission. Mission restart may be required to prevent issues\", _settingName], 4]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_common_fnc_cbaSettings_settingChanged"
      },
      {
        "fileName": "fnc_cbaSettings.sqf",
        "content": "/*\n * Author: PabstMirror\n * Called at pre-init: Loads all ace_settings and converts them to CBA Settings.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_common_fnc_cbaSettings;\n *\n * Public: No\n */\n//#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nLOG(\"Adding ACE_Settings to CBA_settings\");\n\n// Init Vars:\nGVAR(cbaSettings_forcedSettings) = [];\nGVAR(cbaSettings_missionSettings) = [];\nGVAR(settings) = []; // will stay empty - for BWC?\n\n// Add Event Handlers:\n[QGVAR(setSetting), {\n    params [\"_settingName\", \"_value\"];\n    TRACE_2(\"setSettingMission from setSetting\",_settingName,_value);\n    [\"CBA_settings_setSettingMission\", [_settingName, _value, true]] call CBA_fnc_localEvent;\n    [\"CBA_settings_refreshSetting\", [_settingName]] call CBA_fnc_localEvent;\n}] call CBA_fnc_addEventHandler;\n\n[\"CBA_beforeSettingsInitialized\", {\n    TRACE_1(\"CBA_beforeSettingsInitialized EH\",_this);\n\n    // First: Process missionConfig settings:\n    {\n        _x params [\"_settingName\", \"_value\"];\n        TRACE_2(\"setSettingMission from missionConfig\",_settingName,_value);\n        [\"CBA_settings_setSettingMission\", [_settingName, _value, true]] call CBA_fnc_localEvent;\n    } forEach GVAR(cbaSettings_missionSettings);\n    GVAR(cbaSettings_missionSettings) = nil;\n\n    // Second: Read settings from mission params\n    [] call FUNC(readSettingsFromParamsArray);\n\n    // Third: Event so that ACE_Modules have their settings loaded:\n    [QGVAR(initSettingsFromModules), []] call CBA_fnc_localEvent;\n\n    TRACE_1(\"Finished mission settings\",_this);\n}] call CBA_fnc_addEventHandler;\n\n[\"CBA_settingsInitialized\", {\n    TRACE_1(\"CBA_settingsInitialized EH\",_this);\n    if !(SLX_XEH_MACHINE select 8) then {WARNING(\"PostInit not finished\");};\n    INFO(\"Settings initialized.\");\n\n    //Event that settings are safe to use:\n    [\"ace_settingsInitialized\", []] call CBA_fnc_localEvent;\n\n    //Set init finished and run all delayed functions:\n    GVAR(settingsInitFinished) = true;\n    INFO_1(\"%1 delayed functions running.\",count GVAR(runAtSettingsInitialized));\n    {\n        (_x select 1) call (_x select 0);\n        false\n    } count GVAR(runAtSettingsInitialized);\n    GVAR(runAtSettingsInitialized) = nil; //cleanup\n}] call CBA_fnc_addEventHandler;\n\nprivate _start = diag_tickTime;\n\nprivate _settingsConfig = configFile >> \"ACE_Settings\";\nprivate _countOptions = count _settingsConfig;\nTRACE_1(\"Reading settings from configFile\",_countOptions);\nfor \"_index\" from 0 to (_countOptions - 1) do {\n    private _optionEntry = _settingsConfig select _index;\n    if (isNil (configName _optionEntry)) then {\n        [_optionEntry] call FUNC(cbaSettings_loadFromConfig);\n    } else {\n        WARNING_1(\"Setting [%1] - Already defined from somewhere else??\",_varName);\n    };\n};\n\n_settingsConfig = missionConfigFile >> \"ACE_Settings\";\n_countOptions = count _settingsConfig;\nTRACE_1(\"Reading settings from missionConfigFile\",_countOptions);\nfor \"_index\" from 0 to (_countOptions - 1) do {\n    private _optionEntry = _settingsConfig select _index;\n    private _settingName = configName _optionEntry;\n    if ((toLower _settingName) in GVAR(cbaSettings_forcedSettings)) then {\n        WARNING_1(\"Setting [%1] - Already Forced - ignoring missionConfig\",_varName);\n    } else {\n        if (isNil _settingName) then {\n            // New setting, that was first defined in missionConfigFile\n            [_optionEntry] call FUNC(cbaSettings_loadFromConfig);\n        } else {\n            private _value = (_optionEntry >> \"value\") call BIS_fnc_getCfgData;\n            if (isNil \"_value\") exitWith {ERROR_1(\"Setting [%1] - Has bad value\",_settingName);};\n            TRACE_2(\"queuing missionConfig setting\",_settingName,_value);\n            GVAR(cbaSettings_missionSettings) pushBack [_settingName, _value];\n        };\n    };\n};\n\n// Warning if using a custom ACE_ServerSettings config\nif (isServer && {isClass (configFile >> \"ACE_ServerSettings\")}) then {\n    WARNING(\"ACE_ServerSettings is no longer supported and will be ignored\");\n};\n\nINFO_1(\"Parsed Settings Configs [%1 ms]\",(1000 * (diag_tickTime - _start)) toFixed 1);\n",
        "functionName": "ace_common_fnc_cbaSettings"
      },
      {
        "fileName": "fnc_changeProjectileDirection.sqf",
        "content": "/*\n * Author: commy2\n * Adjust a projectiles velocity and dir + up vector.\n *\n * Arguments:\n * 0: Projectile <OBJECT>\n * 1: Adjust azimuth this much. <NUMBER>\n * 2: Adjust inclination this much. <NUMBER>\n * 3: Adjust projectile speed this much. In m/s. (optional: 0) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bullet, 2, 5, 3] call ace_common_fnc_changeProjectileDirection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_projectile\", \"_adjustDir\", \"_adjustUp\", [\"_adjustSpeed\",0]];\n\n// get old direction vector\nprivate _vdir = vectorNormalized velocity _projectile;\n\n// get azimuth and inclination and apply corrections\nprivate _dir = (_vdir select 0) atan2 (_vdir select 1) + _adjustDir;\nprivate _up = asin (_vdir select 2) + _adjustUp;\n\n// get new direction vector (this is a unit vector)\n_vdir = [\n  sin _dir * cos _up,\n  cos _dir * cos _up,\n  sin _up\n];\n\n// get best up vector\nprivate _vlat = vectorNormalized (_vdir vectorCrossProduct [0,0,1]);\nprivate _vup = _vlat vectorCrossProduct _vdir;\n\n// get new speed vector. Keep total speed, but change to new direction. Yay for vector commands.\nprivate _vel = _vdir vectorMultiply (_adjustSpeed + vectorMagnitude velocity _projectile);\n\n// set projectile direction dir and up. Projectiles are long objects, especially with tracers, so it would look dumb otherwise.\n_projectile setVectorDirAndUp [_vdir, _vup];\n\n// set new speed vector\n_projectile setVelocity _vel;\n",
        "functionName": "ace_common_fnc_changeProjectileDirection"
      },
      {
        "fileName": "fnc_checkFiles.sqf",
        "content": "/*\n * Author: commy2\n * Compares version numbers of PBOs and DLLs.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_checkFiles\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n///////////////\n// check addons\n///////////////\nprivate _version = getText (configFile >> \"CfgPatches\" >> \"ace_main\" >> \"versionStr\");\n\nINFO_1(\"ACE is version %1.\",_version);\n\n//CBA Versioning check - close main display if using incompatible version\nprivate _cbaVersionAr = getArray (configFile >> \"CfgPatches\" >> \"cba_main\" >> \"versionAr\");\nprivate _cbaRequiredAr = getArray (configFile >> \"CfgSettings\" >> \"CBA\" >> \"Versioning\" >> \"ACE\" >> \"dependencies\" >> \"CBA\") select 1;\n\nprivate _cbaVersionStr = _cbaVersionAr joinString \".\";\nprivate _cbaRequiredStr = _cbaRequiredAr joinString \".\";\n\nINFO_2(\"CBA is version %1 (min required %2)\",_cbaVersionStr,_cbaRequiredStr);\n\nif ([_cbaRequiredAr, _cbaVersionAr] call cba_versioning_fnc_version_compare) then {\n    private _errorMsg = format [\"CBA version %1 is outdated (required %2)\", _cbaVersionStr, _cbaRequiredStr];\n    ERROR(_errorMsg);\n    if (hasInterface) then {\n        [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\n    };\n};\n\n//private _addons = activatedAddons; // broken with High-Command module, see #2134\nprivate _addons = \"true\" configClasses (configFile >> \"CfgPatches\");//\n_addons = _addons apply {toLower configName _x};//\n_addons = _addons select {_x find \"ace_\" == 0};\n\nprivate _oldCompats = [];\n{\n    if (getText (configFile >> \"CfgPatches\" >> _x >> \"versionStr\") != _version) then {\n        private _errorMsg = format [\"File %1.pbo is outdated.\", _x];\n\n        ERROR(_errorMsg);\n\n        if ((_x select [0, 10]) != \"ace_compat\") then {\n            if (hasInterface) then {\n                [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\n            };\n        } else {\n            _oldCompats pushBack _x;  // Don't block game if it's just an old compat pbo\n        };\n    };\n    false\n} count _addons;\nif (!(_oldCompats isEqualTo [])) then {\n    [{\n        // Lasts for ~10 seconds\n        ERROR_WITH_TITLE_1(\"The following ACE compatiblity PBOs are outdated\", \"%1\", _this);\n    }, _oldCompats, 1] call CBA_fnc_waitAndExecute;\n};\n\n///////////////\n// check dlls\n///////////////\nif (toLower (productVersion select 6) in [\"linux\", \"osx\"]) then {\n    INFO_2(\"Operating system does not support DLL file format\");\n} else {\n    {\n        private _versionEx = _x callExtension \"version\";\n\n        if (_versionEx == \"\") then {\n            private _errorMsg = format [\"Extension %1.dll not installed.\", _x];\n\n            ERROR(_errorMsg);\n\n            if (hasInterface) then {\n                [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\n            };\n        } else {\n            // Print the current extension version\n            INFO_2(\"Extension version: %1: %2\",_x,_versionEx);\n        };\n        false\n    } count getArray (configFile >> \"ACE_Extensions\" >> \"extensions\");\n};\n\n///////////////\n// check server version/addons\n///////////////\nif (isMultiplayer) then {\n    // don't check optional addons\n    _addons = _addons select {getNumber (configFile >> \"CfgPatches\" >> _x >> \"ACE_isOptional\") != 1};\n\n    if (isServer) then {\n        // send servers version of ACE to all clients\n        GVAR(ServerVersion) = _version;\n        GVAR(ServerAddons) = _addons;\n        publicVariable QGVAR(ServerVersion);\n        publicVariable QGVAR(ServerAddons);\n    } else {\n        // clients have to wait for the variables\n        [{\n            if (isNil QGVAR(ServerVersion) || isNil QGVAR(ServerAddons)) exitWith {};\n\n            (_this select 0) params [\"_version\", \"_addons\"];\n\n            if (_version != GVAR(ServerVersion)) then {\n                private _errorMsg = format [\"Client/Server Version Mismatch. Server: %1, Client: %2.\", GVAR(ServerVersion), _version];\n\n                ERROR(_errorMsg);\n\n                if (hasInterface) then {\n                    [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\n                };\n            };\n\n            _addons = _addons - GVAR(ServerAddons);\n            if !(_addons isEqualTo []) then {\n                private _errorMsg = format [\"Client/Server Addon Mismatch. Client has extra addons: %1.\",_addons];\n\n                ERROR(_errorMsg);\n\n                if (hasInterface) then {\n                    [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\n                };\n            };\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n        }, 1, [_version,_addons]] call CBA_fnc_addPerFrameHandler;\n    };\n};\n",
        "functionName": "ace_common_fnc_checkFiles"
      },
      {
        "fileName": "fnc_checkPBOs.sqf",
        "content": "/*\n * Author: commy2\n * Used to execute the checkPBOs module without placing the module. Don't use this together with the module.\n * Checks PBO versions and compares to the one running on server.\n *\n * Arguments:\n * 0: Mode <NUMBER>\n *   0 = Warn once\n *   1 = Warn permanently\n *   2 = Kick\n * 1: Check all PBOs? (default: false) <BOOL>\n * 2: Whitelist (default: \"\") <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [0, false, \"\"] call ace_common_fnc_checkPBOs\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_mode\", [\"_checkAll\", false], [\"_whitelist\", \"\", [\"\"]]];\nTRACE_3(\"params\",_mode,_checkAll,_whitelist);\n\n//lowercase and convert whiteList String into array of strings:\n_whitelist = toLower _whitelist;\n_whitelist = _whitelist splitString \"[,\"\"']\";\nTRACE_1(\"Array\",_whitelist);\n\nACE_Version_CheckAll = _checkAll;\nACE_Version_Whitelist = _whitelist;\n\nif (!_checkAll) exitWith {}; //ACE is checked by FUNC(checkFiles)\n\nif (!isServer) then {\n    [{\n        if (isNil \"ACE_Version_ClientErrors\") exitWith {};\n\n        ACE_Version_ClientErrors params [\"_missingAddon\", \"_missingAddonServer\", \"_oldVersionClient\", \"_oldVersionServer\"];\n\n        (_this select 0) params [\"_mode\", \"_checkAll\", \"_whitelist\"];\n\n        // Display error message.\n        if (_missingAddon || {_missingAddonServer} || {_oldVersionClient} || {_oldVersionServer}) then {\n            private _text = \"[ACE] Version mismatch:<br/><br/>\";\n            private _error = format [\"ACE version mismatch: %1: \", profileName];\n\n            if (_missingAddon) then {\n                _text = _text + \"Detected missing addon on client<br/>\";\n                _error = _error + \"Missing file(s); \";\n            };\n            if (_missingAddonServer) then {\n                _text = _text + \"Detected missing addon on server<br/>\";\n                _error = _error + \"Additional file(s); \";\n            };\n            if (_oldVersionClient) then {\n                _text = _text + \"Detected old client version<br/>\";\n                _error = _error + \"Older version; \";\n            };\n            if (_oldVersionServer) then {\n                _text = _text + \"Detected old server version<br/>\";\n                _error = _error + \"Newer version; \";\n            };\n\n            //[QGVAR(systemChatGlobal), _error] call CBA_fnc_globalEvent;\n\n            ERROR(_error);\n\n            if (_mode < 2) then {\n                _text = composeText [lineBreak, parseText format [\"<t align='center'>%1</t>\", _text]];\n\n                private _rscLayer = \"ACE_RscErrorHint\" call BIS_fnc_rscLayer;\n                _rscLayer cutRsc [\"ACE_RscErrorHint\", \"PLAIN\", 0, true];\n\n                disableSerialization;\n                private _ctrlHint = uiNamespace getVariable \"ACE_ctrlErrorHint\";\n                _ctrlHint ctrlSetStructuredText _text;\n\n                if (_mode == 0) then {\n                    [{\n                        params [\"_rscLayer\"];\n                        TRACE_2(\"Hiding Error message after 10 seconds\",time,_rscLayer);\n                        _rscLayer cutFadeOut 0.2;\n                    }, [_rscLayer], 10] call CBA_fnc_waitAndExecute;\n                };\n            };\n\n            if (_mode == 2) then {\n                [{alive player}, { // To be able to show list if using checkAll\n                    params [\"_text\"];\n                    TRACE_2(\"Player is alive, showing msg and exiting\",time,_text);\n                    _text = composeText [parseText format [\"<t align='center'>%1</t>\", _text]];\n                    [\"[ACE] ERROR\", _text, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\n                }, [_text]] call CBA_fnc_waitUntilAndExecute;\n            };\n        };\n\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    }, 1, [_mode, _checkAll, _whitelist]] call CBA_fnc_addPerFrameHandler;\n};\n\nif (_checkAll) then {\n    0 spawn COMPILE_FILE(scripts\\checkVersionNumber); // @todo\n};\n",
        "functionName": "ace_common_fnc_checkPBOs"
      },
      {
        "fileName": "fnc_claim.sqf",
        "content": "/*\n * Author: commy2\n * Unit claims the ownership over an object. This is used to prevent multiple players from draging the same ammo box or using up the same wheel when repairing etc.\n *\n * Arguments:\n * 0: Unit that claims another object. ObjNull to remove claim. <OBJECT>\n * 1: The object that gets claimed. <OBJECT>\n * 2: Lock the claimed object aswell? (optional: false) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, flag, true] call ace_common_fnc_claim\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", [\"_lockTarget\", false]];\n\nprivate _owner = _target getVariable [QGVAR(owner), objNull];\n\nif (!isNull _owner && {!isNull _unit} && {_unit != _owner}) then {\n    ERROR(\"Claiming already owned object.\");\n};\n\n// transfer this immediately\n_target setVariable [QGVAR(owner), _unit, true];\n\n// lock target object\nif (_lockTarget) then {\n    if (!isNull _unit) then {\n        [QGVAR(lockVehicle), _target, _target] call CBA_fnc_targetEvent;\n    } else {\n        [QGVAR(unlockVehicle), _target, _target] call CBA_fnc_targetEvent;\n    };\n};\n\n/*\nsystemChat str locked _target;\nsystemChat str (_target getVariable [QGVAR(lockStatus), locked _target]);\n*/\n",
        "functionName": "ace_common_fnc_claim"
      },
      {
        "fileName": "fnc_codeToString.sqf",
        "content": "/*\n * Author: commy2\n * Removes the brackets around a code and returns the code as a string. It does nothing if the code is already a string.\n *\n * Arguments:\n * 0: Code <CODE, STRING>\n *\n * Return Value:\n * Code <STRING>\n *\n * Example:\n * [\"bob\"] call ace_common_fnc_codeToString\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_code\"];\nif (_code isEqualType \"\") exitWith {_code};\n\n_code = str(_code);\n_code = _code select [1, count _code - 2];\n\n_code\n\n",
        "functionName": "ace_common_fnc_codeToString"
      },
      {
        "fileName": "fnc_createOrthonormalReference.sqf",
        "content": "/*\n * Author: esteldunedain\n * Returns a orthonormal system of reference aligned with the supplied vector\n *\n * Arguments:\n * Vector to align the coordinate system with <ARRAY>\n *\n * Return Value:\n * 0: Vector Normalized <ARRAY>\n * 1: Normalized Cross Product Vector <ARRAY>\n * 2: Vector Cross Product <ARRAY>\n *\n * Example:\n * [[0,0,0]] call ace_common_fnc_createOrthonormalReference\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n[_this] params [[\"_vector\", [0,0,1], [[]], 3]];\n\nprivate _v1 = vectorNormalized _this;\nprivate _v2 = vectorNormalized (_v1 vectorCrossProduct [0,0,1]);\nprivate _v3 = _v2 vectorCrossProduct _v1;\n\n[_v1, _v2, _v3]\n",
        "functionName": "ace_common_fnc_createOrthonormalReference"
      },
      {
        "fileName": "fnc_currentChannel.sqf",
        "content": "/*\n * Author: commy2\n * Returns the current radio / chat / marker channel.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * The current channel (\"group\", \"side\", \"global\", \"command\", \"vehicle\", \"direct\", \"custom_X\") <STRING>\n *\n * Example:\n * [] call ace_common_fnc_currentChannel\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n#define CHANNELS [\"global\", \"side\", \"command\", \"group\", \"vehicle\", \"direct\"]\n#define CHANNELS_LOCALIZED [localize \"str_channel_global\", localize \"str_channel_side\", localize \"str_channel_command\", localize \"str_channel_group\", localize \"str_channel_vehicle\", localize \"str_channel_direct\"]\n\nprivate _currentChannel = currentChannel;\n\nif (_currentChannel < count CHANNELS) then {\n    _currentChannel = CHANNELS select _currentChannel;\n} else {\n    _currentChannel = format [\"custom_%1\", _currentChannel - count CHANNELS - 1];\n};\n\n_currentChannel\n",
        "functionName": "ace_common_fnc_currentChannel"
      },
      {
        "fileName": "fnc_debug.sqf",
        "content": "/*\n * Author: Glowbal\n * Print logging messages through the ACE framework.\n *\n * Arguments:\n * 0: Message <ANY>\n * 1: Level (default: 2) <NUMBER>\n *\n * Return Value:\n * Message is Printed <BOOL>\n *\n * Example:\n * [bob, 2] call ace_common_fnc_debug\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n#define DEFAULT_LOGGING_LEVEL -1\n#define DEFAULT_TEXT_DISPLAY -1\n\nparams [\"_msg\", [\"_level\", 2, [0]]];\n\nprivate _defaultLoglevel = missionNamespace getVariable [QGVAR(LOGLEVEL), DEFAULT_LOGGING_LEVEL];\n\nif (_defaultLoglevel < 0) exitWith {false};\n\nprivate _defaultLogDisplayLevel = [GVAR(LOGDISPLAY_LEVEL), DEFAULT_TEXT_DISPLAY] select isNil QGVAR(LOGDISPLAY_LEVEL);\n\nif (_level <= _defaultLoglevel) then {\n    private _prefix = [\"Unknown\", \"Error\", \"Warn\", \"Debug\", \"Info\"] select ([0, 1, 2, 3] find _level + 1);\n    private _message = format [\"[ACE %1] %2\", _prefix, _msg];\n\n    if (_level <= _defaultLogDisplayLevel) then {\n        systemChat _message;\n    };\n    diag_log _message;\n\n\n};\n\ntrue\n",
        "functionName": "ace_common_fnc_debug"
      },
      {
        "fileName": "fnc_debugModule.sqf",
        "content": "/*\n * Author: Glowbal\n * ?\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_debugModule\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_entity\"];\n\nGVAR(LOGDISPLAY_LEVEL) = call compile (_entity getVariable [\"logDisplayLevel\",\"4\"]);\nGVAR(LOGLEVEL) = call compile (_entity getVariable [\"logLevel\",\"4\"]);\n",
        "functionName": "ace_common_fnc_debugModule"
      },
      {
        "fileName": "fnc_defineVariable.sqf",
        "content": "/*\n * Author: Glowbal\n * Define a variable for the ACE variable framework\n *\n * Arguments:\n * 0: Name <STRING>\n * 1: defaultValue <ANY>\n * 2: publicFlag <BOOL>\n * 3: category <STRING>\n * 4: type (default: 0) <NUMBER>\n * 5: persistentFlag (default: false) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"bob\", 1, true, \"category\", 1, true] call ace_common_fnc_defineVariable\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_value\", \"_defaultGlobal\", \"_category\", [\"_code\", 0], [\"_persistent\", false]];\n\nif (isNil \"_defaultGlobal\") exitWith {};\n\nif (!(_name isEqualType \"\")) exitwith {\n    [format [\"Tried to the deinfe a variable with an invalid name: %1 Arguments: %2\", _name, _this]] call FUNC(debug);\n};\n\nif (isNil QGVAR(OBJECT_VARIABLES_STORAGE)) then {\n    GVAR(OBJECT_VARIABLES_STORAGE) = [];\n};\n\nGVAR(OBJECT_VARIABLES_STORAGE) pushBack [_name, _value, _defaultGlobal, _category, _code, _persistent];\n\nmissionNamespace setVariable [QGVAR(OBJECT_VARIABLES_STORAGE_) + _name, [_name, _value, _defaultGlobal, _category, _code, _persistent]];\n",
        "functionName": "ace_common_fnc_defineVariable"
      },
      {
        "fileName": "fnc_deprecateComponent.sqf",
        "content": "/*\n * Author: Glowbal\n * Mark a component as deprecated and switches it to a new component if that is available\n *\n * Arguments:\n * 0: Component <Array>\n * 1: New component <Array>\n * 2: Version when the compent will be removed <String>\n *\n * Return Value:\n * Replaced by new component <Boolean>\n *\n * Public: No\n *\n * Example:\n * [[\"ace_sitting\", \"ace_sitting_enabled\"], [\"acex_sitting\", \"acex_sitting_enabled\"], \"3.7.0\"] call ace_common_fnc_deprecateComponent;\n */\n#include \"script_component.hpp\"\n\nparams [\"_oldComponent\", \"_newComponent\", \"_version\"];\n\n_oldComponent params [\"_oldComponentName\", \"_oldSettingName\"];\n_newComponent params [\"_newComponentName\", \"_newSettingName\"];\n\nprivate _isReplacementAvailable = isClass (configFile >> \"CfgPatches\" >> _newComponentName);\nprivate _isDeprecatedLoaded = missionNamespace getvariable [_oldSettingName, false];\nprivate _isReplacementLoaded = missionNamespace getvariable [_newSettingName, false];\n\nif (_isDeprecatedLoaded && {_isReplacementAvailable} && {!_isReplacementLoaded}) then {\n    [_newSettingName, true, true, true] call FUNC(setSetting);\n};\n\nif (_isDeprecatedLoaded && {!_isReplacementLoaded}) then {\n    private _componentVersion = getText (configFile >> \"CfgPatches\" >> _oldComponentName >> \"version\");\n    ((_componentVersion splitString \".\") apply {parseNumber _x}) params [\"_componentMajor\", \"_componentMinor\", \"_componentPatch\"];\n    ((_version splitString \".\") apply {parseNumber _x}) params [\"_major\", \"_minor\", \"_patch\"];\n\n    switch (true) do {\n        case (_componentMajor >= _major && {_componentMinor >= _minor} && {_componentPatch >= _patch}): { // Removed from this version\n            private _message = format[\n                \"Component %1 is deprecated. It has been replaced by %2. The component %1 is no longer usable on this version. \", _oldComponentName, _newComponentName, _version];\n            systemChat format[\"ACE [ERROR] - %1\", _message];\n            ERROR(_message);\n        };\n        case (_componentMajor >= _major && {_componentMinor >= _minor-1}): { // Removed the next this version\n            private _message = format[\n                \"Component %1 is deprecated. It is replaced by %2. Please disable %1 and make use of %2. \"\n                + \"The component (%1) will no longer be available from version %3 and later.\", _oldComponentName, _newComponentName, _version];\n            systemChat format[\"ACE [WARNING] - %1\", _message];\n            WARNING(_message);\n        };\n        case (_componentMajor == _major && {_componentMinor >= _minor - 2}): { // we are in a version leading up to removal\n            private _message = format[\n                \"Component %1 is deprecated. It is replaced by %2. Please disable %1 and make use of %2. \"\n                + \"The component (%1) will no longer be available from version %3 and later.\", _oldComponentName, _newComponentName, _version];\n            WARNING(_message);\n        };\n        default {\n        };\n    };\n};\n\n_isReplacementAvailable;\n",
        "functionName": "ace_common_fnc_deprecateComponent"
      },
      {
        "fileName": "fnc_deviceKeyFindValidIndex.sqf",
        "content": "/*\n * Author: PabstMirror\n * Finds next valid index for the device array.\n *\n * Arguments:\n * 0: Offset from currentIndex (use 1 to find next valid after current) or a displayName string (default: 0) <STRING, NUMBER>\n *\n * Return Value:\n * The new index (-1 if no valid) <NUMBER>\n *\n * Example:\n * [] call ace_common_fnc_deviceKeyFindValidIndex\n * [\"kestral4500\"] call ace_common_fnc_deviceKeyFindValidIndex\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_searchOffsetOrName\", 0]];\n\nprivate _validIndex = -1;\n\nif (_searchOffsetOrName isEqualType \"\") then {\n    {\n        if (_x select 0 == _searchOffsetOrName) exitWith {\n            _validIndex = _forEachIndex;\n        };\n    } forEach GVAR(deviceKeyHandlingArray);\n} else {\n    if (count GVAR(deviceKeyHandlingArray) > 0) then {\n        private _baseIndex = [GVAR(deviceKeyCurrentIndex) + _searchOffsetOrName, 0] select (GVAR(deviceKeyCurrentIndex) == -1);\n\n        for \"_offset\" from _baseIndex to (count GVAR(deviceKeyHandlingArray) - 1 + _baseIndex) do {\n            private _realIndex = _offset % (count GVAR(deviceKeyHandlingArray));\n\n            if ([] call ((GVAR(deviceKeyHandlingArray) select _realIndex) select 2)) exitWith {\n                _validIndex = _realIndex;\n            };\n        };\n    };\n};\n\nGVAR(deviceKeyCurrentIndex) = _validIndex;\n\nGVAR(deviceKeyCurrentIndex)\n",
        "functionName": "ace_common_fnc_deviceKeyFindValidIndex"
      },
      {
        "fileName": "fnc_deviceKeyRegisterNew.sqf",
        "content": "/*\n * Author: PabstMirror\n * Finds next valid index for the device array.\n *\n * Arguments:\n * 0: Localized Device Display Name <STRING>\n * 1: Image <STRING>\n * 2: Condtion Code (do they have the device) <CODE>\n * 3: Toggle Code (on home press) <CODE>\n * 4: Close Code (on ctrl-home press) <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [(localize \"STR_ACE_microdagr_itemName\"), QPATHTOF(images\\microDAGR_item.paa), _conditionCode, _toggleCode, _closeCode] call ace_common_fnc_deviceKeyRegisterNew\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_displayName\", \"_iconImage\", \"_conditionCode\", \"_toggleCode\", \"_closeCode\"];\n\nGVAR(deviceKeyHandlingArray) pushBack [_displayName, _iconImage, _conditionCode, _toggleCode, _closeCode];\n\n[] call FUNC(deviceKeyFindValidIndex);\n",
        "functionName": "ace_common_fnc_deviceKeyRegisterNew"
      },
      {
        "fileName": "fnc_disableAI.sqf",
        "content": "/*\n * Author: Glowbal, KoffeinFlummi\n * Disables/Enables AI\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Disable AI <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true] call ace_common_fnc_disableAI\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_disable\", true, [false]]];\n\nif (!local _unit) exitWith {};\n\nif !([_unit] call EFUNC(common,isPlayer)) then {\n    if (_disable) then {\n        _unit disableAI \"MOVE\";\n        _unit disableAI \"TARGET\";\n        _unit disableAI \"AUTOTARGET\";\n        _unit disableAI \"FSM\";\n        _unit disableConversation true;\n    } else {\n        //Sanity check to make sure we don't enable unconsious AI\n        if (_unit getVariable [\"ace_isunconscious\", false] && alive _unit) exitWith {\n            ERROR(\"Enabling AI for unconsious unit\");\n        };\n\n        _unit enableAI \"MOVE\";\n        _unit enableAI \"TARGET\";\n        _unit enableAI \"AUTOTARGET\";\n        _unit enableAI \"FSM\";\n        _unit disableConversation false;\n    };\n};\n",
        "functionName": "ace_common_fnc_disableAI"
      },
      {
        "fileName": "fnc_disableUserInput.sqf",
        "content": "/*\n * Author: commy2\n * Disables key input. ESC can still be pressed to open the menu.\n *\n * Arguments:\n * 0: True to disable key inputs, false to re-enable them <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_common_fnc_disableUserInput\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_state\"];\n\nif (_state) then {\n    disableSerialization;\n\n    if (!isNull (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull])) exitWith {};\n    if (!isNil QGVAR(disableInputPFH)) exitWith {};\n\n    // end TFAR and ACRE2 radio transmissions\n    call FUNC(endRadioTransmission);\n\n    // Close map\n    if (visibleMap && {!(player getVariable [\"ACE_canSwitchUnits\", false])}) then {\n        openMap false;\n    };\n\n    closeDialog 0;\n    createDialog QGVAR(DisableMouse_Dialog);\n\n    private _dlg = uiNamespace getVariable QGVAR(dlgDisableMouse);\n\n    _dlg displayAddEventHandler [\"KeyDown\", {\n        params [\"\", \"_key\"];\n\n        if (_key == 1 && {alive player}) then {\n            createDialog ([\"RscDisplayInterrupt\", \"RscDisplayMPInterrupt\"] select isMultiplayer);\n\n            disableSerialization;\n\n            private _dlg = findDisplay 49;\n\n            for \"_index\" from 100 to 2000 do {\n                (_dlg displayCtrl _index) ctrlEnable false;\n            };\n\n            private _ctrl = _dlg displayctrl 103;\n            _ctrl ctrlSetEventHandler [\"buttonClick\", QUOTE(while {!isNull (uiNamespace getVariable [ARR_2(QUOTE(QGVAR(dlgDisableMouse)),displayNull)])} do {closeDialog 0}; failMission 'LOSER'; [false] call DFUNC(disableUserInput);)];\n            _ctrl ctrlEnable true;\n            _ctrl ctrlSetText \"ABORT\";\n            _ctrl ctrlSetTooltip \"Abort.\";\n\n            _ctrl = _dlg displayctrl ([104, 1010] select isMultiplayer);\n            _ctrl ctrlSetEventHandler [\"buttonClick\", QUOTE(closeDialog 0; player setDamage 1; [false] call DFUNC(disableUserInput);)];\n            _ctrl ctrlEnable (call {private _config = missionConfigFile >> \"respawnButton\"; !isNumber _config || {getNumber _config == 1}});\n            _ctrl ctrlSetText \"RESPAWN\";\n            _ctrl ctrlSetTooltip \"Respawn.\";\n        };\n\n        if (_key in actionKeys \"TeamSwitch\" && {teamSwitchEnabled}) then {\n            (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\n\n            private _acc = accTime;\n            teamSwitch;\n            setAccTime _acc;\n        };\n\n        if (_key in actionKeys \"CuratorInterface\" && {getAssignedCuratorLogic player in allCurators}) then {\n            (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\n            openCuratorInterface;\n        };\n\n        if (_key in actionKeys \"ShowMap\" && {player getVariable [\"ACE_canSwitchUnits\", false]}) then {\n            (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\n            openMap true;\n        };\n\n        if (isServer || {serverCommandAvailable \"#kick\"} || {player getVariable [\"ACE_isUnconscious\", false] && {(call FUNC(player)) getVariable [QEGVAR(medical,AllowChatWhileUnconscious), missionNamespace getVariable [QEGVAR(medical,AllowChatWhileUnconscious), false]]}}) then {\n            if (!(_key in (actionKeys \"DefaultAction\" + actionKeys \"Throw\")) && {_key in (actionKeys \"Chat\" + actionKeys \"PrevChannel\" + actionKeys \"NextChannel\")}) then {\n                _key = 0;\n            };\n        };\n\n        _key > 0\n    }];\n\n    _dlg displayAddEventHandler [\"KeyUp\", {true}];\n\n    GVAR(disableInputPFH) = [{\n        if (isNull (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) && {!visibleMap && isNull findDisplay 49 && isNull findDisplay 312 && isNull findDisplay 632}) then {\n            [GVAR(disableInputPFH)] call CBA_fnc_removePerFrameHandler;\n            GVAR(disableInputPFH) = nil;\n            [true] call FUNC(disableUserInput);\n        };\n    }, 0, []] call CBA_fnc_addPerFrameHandler;\n} else {\n    if (!isNil QGVAR(disableInputPFH)) then {\n        [GVAR(disableInputPFH)] call CBA_fnc_removePerFrameHandler;\n        GVAR(disableInputPFH) = nil;\n    };\n\n    (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\n};\n",
        "functionName": "ace_common_fnc_disableUserInput"
      },
      {
        "fileName": "fnc_displayIcon.sqf",
        "content": "/*\n * Author: Glowbal\n * Draw progress bar and execute given function if succesful.\n * Finish/Failure/Conditional are all passed [args, elapsedTime, totalTime, errorCode]\n *\n * Arguments:\n * 0: icon ID <STRING>\n * 1: show <BOOL>\n * 2: Icon Path <STRING>\n * 3: Icon color <ARRAY>\n * 4: timeAlive. -1 = forever (default: 6) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"myID\", true, QPATHTOF(data\\icon_group.paa), [1,1,1,1], 0] call ace_gui_fnc_displayIcon;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n// positions for the icon UI\n#define RIGHT_SIDE    (safezoneW + safezoneX)\n#define LEFT_SIDE     safezoneX\n#define TOP_SIDE      safeZoneY\n#define BOTTOM_SIDE   (safeZoneH + safezoneY)\n#define ICON_WIDTH    (2 * (((safezoneW / safezoneH) min 1.2) / 40))\n#define X_POS_ICONS   (RIGHT_SIDE - (1.5 * ICON_WIDTH))\n#define Y_POS_ICONS   (TOP_SIDE + (2.5 * ICON_WIDTH))\n#define DIFFERENCE_ICONS (1.1 * ICON_WIDTH)\n#define X_POS_ICONS_SECOND (RIGHT_SIDE - (4.4 * ICON_WIDTH))\n#define Y_POS_ICONS_SECOND (TOP_SIDE + (1.1 * ICON_WIDTH))\n\n// setting values\n#define TOP_RIGHT_DOWN    1\n#define TOP_RIGHT_LEFT    2\n#define TOP_LEFT_DOWN    3\n#define TOP_LEFT_RIGHT    4\n\n// other constants\n#define DEFAULT_TIME    6\n\ndisableSerialization;\n\nparams [\"_iconId\", \"_show\", \"_icon\", \"_color\", [\"_timeAlive\", DEFAULT_TIME]];\n\nprivate _list = missionNamespace getVariable [QGVAR(displayIconList), []];\n\nprivate _refresh = {\n    // Refreshing of all icons..\n    private _allControls = missionNamespace getVariable [QGVAR(displayIconListControls), []];\n\n    {\n        ctrlDelete _x;\n        false\n    } count _allControls;\n\n    _allControls = [];\n\n    private _setting = missionNamespace getVariable [QGVAR(settingFeedbackIcons), 0];\n\n    if (_setting > 0) then {\n        {\n            _x params [\"\", \"_xicon\", \"_xcolor\"];\n\n            // +19000 because we want to make certain we are using free IDCs..\n            private _ctrl = (findDisplay 46) ctrlCreate [\"RscPicture\", _forEachIndex + 19000];\n\n            private _position = switch (_setting) do {\n                case TOP_RIGHT_DOWN: {[X_POS_ICONS, Y_POS_ICONS + (_forEachIndex * DIFFERENCE_ICONS), ICON_WIDTH, ICON_WIDTH]};\n                case TOP_RIGHT_LEFT: {[X_POS_ICONS_SECOND - ((_forEachIndex + 3) * DIFFERENCE_ICONS), Y_POS_ICONS_SECOND - (ICON_WIDTH / 2), ICON_WIDTH, ICON_WIDTH]};\n                case TOP_LEFT_DOWN: {[LEFT_SIDE + (0.5 * ICON_WIDTH), Y_POS_ICONS + (_forEachIndex * DIFFERENCE_ICONS), ICON_WIDTH, ICON_WIDTH]};\n                case TOP_LEFT_RIGHT: {[LEFT_SIDE + (0.5 * ICON_WIDTH) - ((_forEachIndex + 3) * DIFFERENCE_ICONS), Y_POS_ICONS_SECOND, ICON_WIDTH, ICON_WIDTH]};\n                default {[X_POS_ICONS, Y_POS_ICONS + (_forEachIndex * DIFFERENCE_ICONS), ICON_WIDTH, ICON_WIDTH]};\n            };\n\n            _ctrl ctrlSetPosition _position;\n            _ctrl ctrlSetText _xicon;\n            _ctrl ctrlSetTextColor _xcolor;\n            _ctrl ctrlCommit 0;\n            _allControls pushBack _ctrl;\n            false\n        } forEach (missionNamespace getVariable [QGVAR(displayIconList),[]]);\n    };\n\n    missionNamespace setVariable [QGVAR(displayIconListControls), _allControls];\n};\n\nif (_show) then {\n    if ({_x select 0 == _iconId} count _list == 0) then {\n        _list pushBack [_iconId, _icon, _color, CBA_missionTime];\n    } else {\n        {\n            if (_x select 0 == _iconId) exitWith {\n                _list set [_forEachIndex, [_iconId, _icon, _color, CBA_missionTime]];\n            };\n        } forEach _list;\n    };\n\n    missionNamespace setVariable [QGVAR(displayIconList), _list];\n    call _refresh;\n\n    if (_timeAlive >= 0) then {\n        [{\n            [_this select 0, false, \"\", [0,0,0], 0] call FUNC(displayIcon);\n        }, [_iconId], _timeAlive, _timeAlive] call CBA_fnc_waitAndExecute;\n    };\n\n} else {\n\n    if ({_x select 0 == _iconId} count _list == 1) then {\n        private _newList = [];\n\n        {\n            if (_x select 0 != _iconId) then {\n                _newList pushBack _x;\n            };\n            false\n        } count _list;\n\n        missionNamespace setVariable [QGVAR(displayIconList), _newList];\n        call _refresh;\n    };\n};\n",
        "functionName": "ace_common_fnc_displayIcon"
      },
      {
        "fileName": "fnc_displayText.sqf",
        "content": "/*\n * Author: commy2\n * Display a message.\n *\n * Arguments:\n * 0: Message <STRING>\n * 1: Play a clicking sound (default: false) <BOOL>\n * 2: How long before hiding the message in seconds (default: 2) <NUMBER>\n * 3: Priority, higher priority messages will override lesser important ones (default: 0) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"Message\", true, 5, 2] call ace_common_fnc_displayText\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_text\", [\"_sound\", false], [\"_delay\", 2], [\"_priority\", 0]];\n\nif (isNil QGVAR(lastHint)) then {\n    GVAR(lastHint) = [0, 0];\n};\n\nif !(typeName _text in [\"STRING\", \"TEXT\"]) then {_text = str _text};\n\nGVAR(lastHint) params [\"_lastHintTime\", \"_lastHintPriority\"];\n\nprivate _time = CBA_missionTime;\n\nif (_time > _lastHintTime + _delay || {_priority >= _lastHintPriority}) then {\n    hintSilent _text;\n    if (_sound) then {playSound \"ACE_Sound_Click\"};\n    GVAR(lastHint) set [0, _time];\n    GVAR(lastHint) set [1, _priority];\n\n    [{if ((_this select 0) == GVAR(lastHint) select 0) then {hintSilent \"\"};}, [_time], _delay, 0] call CBA_fnc_waitAndExecute;\n};\n",
        "functionName": "ace_common_fnc_displayText"
      },
      {
        "fileName": "fnc_displayTextPicture.sqf",
        "content": "/*\n * Author: commy2, Glowbal\n * Display a structured text with image.\n *\n * Arguments:\n * 0: Text <ANY>\n * 1: Image <STRING>\n * 2: Image color <ARRAY> (default: [1, 1, 1])\n * 3: Target Unit. Will only display if target is the player controlled object <OBJECT> (default: ACE_player)\n * 4: Size <NUMBER> (default: 2)\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"text\", \"image\", [1, 1, 1], ACE_player, 2] call ace_common_fnc_displayTextPicture\n * [\"text\", \"image\", nil, nil, 3] call ace_common_fnc_displayTextPicture\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_text\", \"\"], [\"_image\", \"\", [\"\"]], [\"_imageColor\", [1,1,1], [[]]], [\"_target\", ACE_player, [objNull]], [\"_size\", 2, [0]]];\n\nif (_target != ACE_player) exitWith {};\n\nif (typeName _text != \"TEXT\") then {\n    if (_text isEqualType []) then {\n        if (count _text > 0) then {\n            {\n                if (_x isEqualType \"\" && {isLocalized _x}) then {\n                    _text set [_forEachIndex, localize _x];\n                };\n            } forEach _text;\n\n            _text = format _text;\n        };\n    };\n\n    if (_text isEqualType \"\" && {isLocalized _text}) then {\n        _text = localize _text;\n    };\n\n    _text = parseText format [\"<t align='center'>%1</t>\", _text];\n};\n\n_text = composeText [parseText format [\"<img size='2' align='center' color='%2' image='%1'/>\", _image, _imageColor call BIS_fnc_colorRGBtoHTML], lineBreak, _text];\n\n[_text, _size] call FUNC(displayTextStructured);\n",
        "functionName": "ace_common_fnc_displayTextPicture"
      },
      {
        "fileName": "fnc_displayTextStructured.sqf",
        "content": "/*\n * Author: commy2, Glowbal, GitHawk\n * Display a structured text.\n *\n * Arguments:\n * 0: Text <ANY>\n * 1: Size of the textbox <NUMBER> (default: 1.5)\n * 2: Target Unit. Will only display if target is the player controlled object <OBJECT> (default: ACE_player)\n * 3: Custom Width <NUMBER> (default: 10)\n *\n * Return Value:\n * None\n *\n * Example:\n * [[\"Test: %1\", 123], 1.5] call ace_common_fnc_displayTextStructured\n * [\"wow\", 1, ace_player, 3] call ace_common_fnc_displayTextStructured\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_text\", \"\"], [\"_size\", 1.5, [0]], [\"_target\", ACE_player, [objNull]], [\"_width\", 10, [0]]];\n\nif (_target != ACE_player) exitWith {};\n\nif (typeName _text != \"TEXT\") then {\n    if (_text isEqualType []) then {\n        if (count _text > 0) then {\n            {\n                if (_x isEqualType \"\" && {isLocalized _x}) then {\n                    _text set [_foreachIndex, localize _x];\n                };\n            }foreach _text;\n            _text = format _text;\n        };\n    };\n    if (_text isEqualType \"\" && {isLocalized _text}) then {\n        _text = localize _text;\n    };\n    _text = composeText [lineBreak, parseText format [\"<t align='center'>%1</t>\", _text]];\n};\n\nprivate _isShown = ctrlShown (uiNamespace getVariable [\"ACE_ctrlHint\", controlNull]);\n\n(\"ACE_RscHint\" call BIS_fnc_rscLayer) cutRsc [\"ACE_RscHint\", \"PLAIN\", 0, true];\n\ndisableSerialization;\nprivate _ctrlHint = uiNamespace getVariable \"ACE_ctrlHint\";\n\n_ctrlHint ctrlSetBackgroundColor GVAR(displayTextColor);\n_ctrlHint ctrlSetTextColor GVAR(displayTextFontColor);\n/*\n// This does not function at the moment. Has been disabled until it fixed.\nprivate _xPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_X\", ((safezoneX + safezoneW) - (10 *(((safezoneW / safezoneH) min 1.2) / 40)) - 2.9 *(((safezoneW / safezoneH) min 1.2) / 40))];\nprivate _yPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_Y\", safeZoneY + 0.175 * safezoneH];\nprivate _wPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_W\", (10 *(((safezoneW / safezoneH) min 1.2) / 40))];\nprivate _hPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_H\", (2 *((((safezoneW / safezoneH) min 1.2) / 1.2) / 25))];\n*/\n\nprivate _xPos = ((safezoneX + safezoneW) - (_width *(((safezoneW / safezoneH) min 1.2) / 40)) - 2.9 *(((safezoneW / safezoneH) min 1.2) / 40));\nprivate _yPos = safeZoneY + 0.175 * safezoneH;\nprivate _wPos =  (_width *(((safezoneW / safezoneH) min 1.2) / 40));\nprivate _hPos = (2 *((((safezoneW / safezoneH) min 1.2) / 1.2) / 25));\n\n// Zeus Interface Open and Display would be under the \"CREATE\" list\nif (!isNull curatorCamera) then {\n    _xPos = _xPos min ((safezoneX + safezoneW - 12.5 * (((safezoneW / safezoneH) min 1.2) / 40)) - _wPos);\n};\n\nprivate _position = [_xPos, _yPos, _wPos, _size * _hPos];\n\n_ctrlHint ctrlSetPosition _position;\n_ctrlHint ctrlCommit 0;\n\n_ctrlHint ctrlSetStructuredText _text;\n_ctrlHint ctrlSetPosition _position;\n_ctrlHint ctrlCommit ([0.5, 0] select _isShown);\n",
        "functionName": "ace_common_fnc_displayTextStructured"
      },
      {
        "fileName": "fnc_doAnimation.sqf",
        "content": "/*\n * Author: commy2\n * Execute an animation. This is used to not break things like the unconsciousness animation.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Animation <STRING>\n * 2: Priority of the animation. (default: 0) <NUMBER>\n *     0 = PlayMove\n *     1 = PlayMoveNow\n *     2 = SwitchMove (no transitional animation, doesn't overwrite priority 1)\n * 3: Force overwritting unconscious (default: false) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"AmovPercMstpSnonWnonDnon_exerciseKata\", 1] call ace_common_fnc_doAnimation\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_animation\", [\"_priority\", 0], [\"_force\", false]];\nTRACE_4(\"params\",_unit,_animation,_priority,_force);\n\n// don't overwrite more important animations\nif (_unit getVariable [\"ACE_isUnconscious\", false] && {(_animation != \"Unconscious\")} && {!_force}) exitWith {};\n\n// don't go unconscious if the unit isn't unconscious\nif (_animation == \"Unconscious\" && {!((_unit getVariable [\"ACE_isUnconscious\", false]) || (_unit getVariable [\"ACE_isDead\", false]))}) exitWith {};\n\n// switchMove \"\" no longer works in dev 1.37\nif (_animation == \"\") then {\n    _animation = [_unit] call FUNC(getDefaultAnim);\n};\n\n//if (_animation == animationState _unit) exitWith {};\n\nTRACE_2(\"\",local _unit,vehicle _unit);\nswitch (_priority) do {\n    case 0: {\n        if (_unit == vehicle _unit) then {\n            [QGVAR(playMove), [_unit, _animation], _unit] call CBA_fnc_targetEvent;\n        } else {\n            // Execute on all machines. PlayMove and PlayMoveNow are bugged: They have no global effects when executed on remote machines inside vehicles.\n            [QGVAR(playMove), [_unit, _animation]] call CBA_fnc_globalEvent;\n        };\n    };\n    case 1: {\n        if (_unit == vehicle _unit) then {\n            [QGVAR(playMoveNow), [_unit, _animation], _unit] call CBA_fnc_targetEvent;\n        } else {\n            // Execute on all machines. PlayMove and PlayMoveNow are bugged: They have no global effects when executed on remote machines inside vehicles.\n            [QGVAR(playMoveNow), [_unit, _animation]] call CBA_fnc_globalEvent;\n        };\n    };\n    case 2: {\n        // try playMoveNow first\n        if (_unit == vehicle _unit) then {\n            [QGVAR(playMoveNow), [_unit, _animation], _unit] call CBA_fnc_targetEvent;\n        } else {\n            // Execute on all machines. PlayMove and PlayMoveNow are bugged: They have no global effects when executed on remote machines inside vehicles.\n            [QGVAR(playMoveNow), [_unit, _animation]] call CBA_fnc_globalEvent;\n        };\n\n        // if animation doesn't respond, do switchMove\n        if (animationState _unit != _animation) then {\n            TRACE_1(\"did not respond to playMoveNow\",animationState _unit);\n            // Execute on all machines. SwitchMove has local effects.\n            [QGVAR(switchMove), [_unit, _animation]] call CBA_fnc_globalEvent;\n        };\n    };\n    default {};\n};\n",
        "functionName": "ace_common_fnc_doAnimation"
      },
      {
        "fileName": "fnc_doGesture.sqf",
        "content": "/*\n * Author: commy2\n * Play a gesture.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Animation <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"gestureGo\"] call ace_common_fnc_doGesture\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_animation\", [\"_priority\", 0]];\nTRACE_3(\"params\",_unit,_animation,_priority);\n\nif (!GVAR(isReloading) || {_priority > 0}) then {\n    [QGVAR(playActionNow), [_unit, _animation], _unit] call CBA_fnc_targetEvent;\n};\n",
        "functionName": "ace_common_fnc_doGesture"
      },
      {
        "fileName": "fnc_dropBackpack.sqf",
        "content": "/*\n * Author: commy2\n * Drops a backback. Also returns the ground wepaon holder object of the dropped backpack.\n *\n * Arguments:\n * 0: Unit that has a backpack <OBJECT>\n *\n * Return Value:\n * Ground wepaon holder with backpack <OBJECT>\n *\n * Example:\n * [unit] call ace_common_fnc_dropBackpack\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]]];\n\nprivate _backpackObject = backpackContainer _unit;\n\n_unit addBackpack \"ACE_FakeBackpack\";\nremoveBackpack _unit;\n\nobjectParent _backpackObject // return\n",
        "functionName": "ace_common_fnc_dropBackpack"
      },
      {
        "fileName": "fnc_dummy.sqf",
        "content": "/*\n * Author: SilentSpike\n * A dummy function which does nothing. Can be useful.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Public: No\n */\n",
        "functionName": "ace_common_fnc_dummy"
      },
      {
        "fileName": "fnc_dumpArray.sqf",
        "content": "/*\n * Author: ?\n * Dumps an array to the RPT, showing the depth of each element.\n *\n * Arguments:\n * 0: Array to be dumped <ARRAY>\n * 1: Depth <NUMBER> (default: 0)\n *\n * Return Value:\n * None\n *\n * Example:\n * [[0, [1,2], [[3]]]] call ace_common_fnc_dumpArray\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_var\", [\"_depth\", 0, [0]]];\n\nprivate _pad = \"\";\n\nfor \"_i\" from 0 to _depth do {\n    _pad = _pad + toString [9];\n};\n\n_depth = _depth + 1;\n\nif (IS_ARRAY(_var)) then {\n    if (_var isEqualTo []) then {\n        diag_log text format [\"%1[],\", _pad];\n    } else {\n        diag_log text format [\"%1[\", _pad];\n\n        {\n            [_x, _depth] call FUNC(dumpArray);\n            false\n        } count _var;\n\n        diag_log text format [\"%1],\", _pad];\n    };\n} else {\n    diag_log text format [\"%1%2\", _pad, _var];\n};\n",
        "functionName": "ace_common_fnc_dumpArray"
      },
      {
        "fileName": "fnc_dumpPerformanceCounters.sqf",
        "content": "/*\n * Author: ?\n * Dumps performance counter statistics into Logs.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_dumpPerformanceCounters\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndiag_log text format [\"REGISTERED ACE PFH HANDLERS\"];\ndiag_log text format [\"-------------------------------------------\"];\n\nif (!isNil \"ACE_PFH_COUNTER\") then {\n    {\n        _x params [\"_pfh\", \"_parameters\"];\n\n        private _isActive = [\"ACTIVE\", \"REMOVED\"] select isNil {CBA_common_PFHhandles select (_pfh select 0)};\n\n        diag_log text format [\"Registered PFH: id=%1 [%2, delay %3], %4:%5\", _pfh select 0, _isActive, _parameters select 1, _pfh select 1, _pfh select 2];\n        false\n    } count ACE_PFH_COUNTER;\n};\n\ndiag_log text format [\"ACE COUNTER RESULTS\"];\ndiag_log text format [\"-------------------------------------------\"];\n\n{\n    private _counterEntry = _x;\n    private _iter = 0;\n    private _total = 0;\n    private _count = 0;\n    private _averageResult = 0;\n\n    if (count _counterEntry > 3) then {\n        // calc\n        {\n            if (_iter > 2) then {\n                _count = _count + 1;\n                private _delta = (_x select 1) - (_x select 0);\n\n                _total = _total + _delta;\n            };\n\n            _iter = _iter + 1;\n            false\n        } count _counterEntry;\n\n        // results\n        _averageResult = (_total / _count) * 1000;\n\n        // dump results\n        diag_log text format [\"%1: Average: %2s / %3 = %4ms\", _counterEntry select 0, _total, _count, _averageResult];\n    } else {\n        diag_log text format [\"%1: No results\", _counterEntry select 0];\n    };\n    false\n} count ACE_COUNTERS;\n\n/*\n// Dump PFH Trackers\ndiag_log text format[\"ACE_PERFORMANCE_EXCESSIVE_STEP_TRACKER\"];\ndiag_log text format[\"-------------------------------------------\"];\n{\n    private _delay = _x select 2;\n    //if(_delay > 0) then { _delay = _delay / 1000; };\n\n    diag_log text format[\"%1: %2s, delay=%3, handle=%4\",(_x select 0), _delay, (_x select 3), (_x select 4)];\n} forEach ACE_PERFORMANCE_EXCESSIVE_STEP_TRACKER;\n\n// Dump PFH Trackers\ndiag_log text format[\"ACE_PERFORMANCE_EXCESSIVE_FRAME_TRACKER\"];\ndiag_log text format[\"-------------------------------------------\"];\n{\n    private _delta = _x select 1;\n    //if(_delta > 0) then { _delta = _delta / 1000; };\n    diag_log text format[\"  DELTA: %1s\", _delta];\n} forEach ACE_PERFORMANCE_EXCESSIVE_FRAME_TRACKER;\n\n//{\n//\n//} forEach ACRE_EXCESSIVE_FRAME_TRACKER;\n\n*/\n",
        "functionName": "ace_common_fnc_dumpPerformanceCounters"
      },
      {
        "fileName": "fnc_endRadioTransmission.sqf",
        "content": "/*\n * Author: commy2\n *\n * End radio transmissions of addons TFAR and ACRE2. TFAR v0.9.7, ACRE Public Beta 2.0.3.571\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_endRadioTransmission\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// ACRE\nif (isClass (configFile >> \"CfgPatches\" >> \"acre_main\")) then {\n    [-1] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\n    [0] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\n    [1] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\n    [2] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\n};\n\n// TFAR\nif (isClass (configFile >> \"CfgPatches\" >> \"task_force_radio\")) then {\n    call TFAR_fnc_onSwTangentReleased;\n    call TFAR_fnc_onAdditionalSwTangentReleased;\n    call TFAR_fnc_onLRTangentReleased;\n    call TFAR_fnc_onAdditionalLRTangentReleased;\n    call TFAR_fnc_onDDTangentReleased;\n};\n",
        "functionName": "ace_common_fnc_endRadioTransmission"
      },
      {
        "fileName": "fnc_eraseCache.sqf",
        "content": "/*\n * Author: esteldunedain\n * Deletes a cached result\n *\n * Arguments:\n * 0: Namespace to store the cache on <NAMESPACE>\n * 1: Cache uid <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [NAMESPACE, \"UID\"] call ace_common_fnc_eraseCache\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_namespace\", \"_uid\"];\n\n_namespace setVariable [_uid, nil];\n",
        "functionName": "ace_common_fnc_eraseCache"
      },
      {
        "fileName": "fnc_errorMessage.sqf",
        "content": "/*\n * Author: commy2, based on BIS_fnc_errorMsg and BIS_fnc_guiMessage by Karel Moricky (BI)\n * Stops simulation and opens a textbox with error message.\n *\n * Arguments:\n * ?\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_errorMessage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nendLoadingScreen;\n\n// no message without player possible\nif (!hasInterface) exitWith {};\n\n// wait for display\nif (isNull (call BIS_fnc_displayMission)) exitWith {\n    [{\n        if (isNull (call BIS_fnc_displayMission)) exitWith {};\n\n        (_this select 0) call FUNC(errorMessage);\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n    }, 1, _this] call CBA_fnc_addPerFrameHandler;\n};\n\nparams [\"_textHeader\", \"_textMessage\", [\"_onOK\", {}], [\"_onCancel\", {}]];\n\nif (_textMessage isEqualType \"\") then {\n    _textMessage = parseText _textMessage;\n};\n\n(ARR_SELECT(_this,4,call BIS_fnc_displayMission)) createDisplay \"RscDisplayCommonMessagePause\";\n\nprivate _display = uiNamespace getVariable \"RscDisplayCommonMessage_display\";\nprivate _ctrlRscMessageBox =          _display displayCtrl 2351;\nprivate _ctrlBcgCommonTop =           _display displayCtrl 235100;\nprivate _ctrlBcgCommon =              _display displayCtrl 235101;\nprivate _ctrlText =                   _display displayCtrl 235102;\nprivate _ctrlBackgroundButtonOK =     _display displayCtrl 235103;\nprivate _ctrlBackgroundButtonMiddle = _display displayCtrl 235104;\nprivate _ctrlBackgroundButtonCancel = _display displayCtrl 235105;\nprivate _ctrlButtonOK =               _display displayCtrl 235106;\nprivate _ctrlButtonCancel =           _display displayCtrl 235107;\n\n_ctrlBcgCommonTop ctrlSetText _textHeader;\n\nprivate _ctrlButtonOKPos = ctrlPosition _ctrlButtonOK;\nprivate _ctrlBcgCommonPos = ctrlPosition _ctrlBcgCommon;\nprivate _bottomSpaceY = (_ctrlButtonOKPos select 1) - ((_ctrlBcgCommonPos select 1) + (_ctrlBcgCommonPos select 3));\n\nprivate _ctrlTextPos = ctrlPosition _ctrlText;\nprivate _marginX = (_ctrlTextPos select 0) - (_ctrlBcgCommonPos select 0);\nprivate _marginY = (_ctrlTextPos select 1) - (_ctrlBcgCommonPos select 1);\n\n_ctrlText ctrlSetStructuredText _textMessage;\nprivate _ctrlTextPosH = ctrlTextHeight _ctrlText;\n\n_ctrlBcgCommon ctrlSetPosition [\n    _ctrlBcgCommonPos select 0,\n    _ctrlBcgCommonPos select 1,\n    _ctrlBcgCommonPos select 2,\n    _ctrlTextPosH + _marginY * 2\n];\n_ctrlBcgCommon ctrlCommit 0;\n\n_ctrlText ctrlSetPosition [\n    (_ctrlBcgCommonPos select 0) + _marginX,\n    (_ctrlBcgCommonPos select 1) + _marginY,\n    (_ctrlBcgCommonPos select 2) - _marginX * 2,\n    _ctrlTextPosH\n];\n_ctrlText ctrlCommit 0;\n\nprivate _bottomPosY = (_ctrlBcgCommonPos select 1) + _ctrlTextPosH + (_marginY * 2) + _bottomSpaceY;\n\n{\n    private _xPos = ctrlPosition _x;\n\n    _xPos set [1, _bottomPosY];\n    _x ctrlSetPosition _xPos;\n    _x ctrlCommit 0;\n} forEach [\n    _ctrlBackgroundButtonOK,\n    _ctrlBackgroundButtonMiddle,\n    _ctrlBackgroundButtonCancel,\n    _ctrlButtonOK,\n    _ctrlButtonCancel\n];\n\nprivate _ctrlRscMessageBoxPos = ctrlPosition _ctrlRscMessageBox;\nprivate _ctrlRscMessageBoxPosH = _bottomPosY + (_ctrlButtonOKPos select 3);\n\n_ctrlRscMessageBox ctrlSetPosition [\n    0.5 - (_ctrlBcgCommonPos select 2) / 2,\n    0.5 - _ctrlRscMessageBoxPosH / 2,\n    (_ctrlBcgCommonPos select 2) + 0.5,\n    _ctrlRscMessageBoxPosH\n];\n\n_ctrlRscMessageBox ctrlEnable true;\n_ctrlRscMessageBox ctrlCommit 0;\n\nif (_onOK isEqualTo {}) then {\n    _ctrlButtonOK ctrlEnable false;\n    _ctrlButtonOK ctrlSetFade 0;\n    _ctrlButtonOK ctrlSetText \"\";\n    _ctrlButtonOK ctrlCommit 0;\n} else {\n    _ctrlButtonOK ctrlEnable true;\n    _ctrlButtonOK ctrlSetFade 0;\n    _ctrlButtonOK ctrlSetText localize \"STR_DISP_OK\";\n    _ctrlButtonOK ctrlCommit 0;\n\n    ctrlSetFocus _ctrlButtonOK;\n};\n\nif (_onCancel isEqualTo {}) then {\n    _ctrlButtonCancel ctrlEnable false;\n    _ctrlButtonCancel ctrlSetFade 0;\n    _ctrlButtonCancel ctrlSetText \"\";\n    _ctrlButtonCancel ctrlCommit 0;\n} else {\n    _ctrlButtonCancel ctrlEnable true;\n    _ctrlButtonCancel ctrlSetFade 0;\n    _ctrlButtonCancel ctrlSetText localize \"STR_DISP_CANCEL\";\n    _ctrlButtonCancel ctrlCommit 0;\n\n    ctrlSetFocus _ctrlButtonCancel;\n};\n\n_ctrlButtonOK ctrlAddEventHandler [\"buttonClick\", {(ctrlParent (_this select 0)) closeDisplay 1; true}];\n_ctrlButtonCancel ctrlAddEventHandler [\"buttonClick\", {(ctrlParent (_this select 0)) closeDisplay 2; true}];\n\nGVAR(errorOnOK) = _onOK;\nGVAR(errorOnCancel) = _onCancel;\n\n_display displayAddEventHandler [\"unload\", {call ([{}, GVAR(errorOnOK), GVAR(errorOnCancel)] select (_this select 1))}];\n_display displayAddEventHandler [\"keyDown\", {_this select 1 == 1}];\n",
        "functionName": "ace_common_fnc_errorMessage"
      },
      {
        "fileName": "fnc_findUnloadPosition.sqf",
        "content": "/*\n * Author: PabstMirror, ViperMaul\n * Find a safe place near a vehicle to unload something.\n * Handles Normal Terrain, In Water or On Buildings (Pier, StaticShip).\n *\n * Arguments:\n * 0: Source Vehicle <OBJECT>\n * 1: Cargo Classname <STRING>\n * 2: Unloader (player) <OBJECT> (default: objNull)\n * 3: Max Distance (meters) <NUMBER> (default: 10)\n * 4: Check Vehicle is Stable <BOOL> (default: true)\n *\n * Return Value:\n * Unload PositionAGL (can Be [] if no valid pos found) <ARRAY>\n *\n * Example:\n * [theCar, \"CAManBase\", player, 10, true] call ace_common_fnc_findUnloadPosition\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n//Number of tests run (effects performance in worst case scenarior where nothing is found VERSUES reliably finding a pos):\n#define MAX_TESTS 75\n\n//Manual collision tests (count and radius):\n#define COL_TEST_COUNT 12\n\nparams [\"_vehicle\", \"_typeOfCargo\", [\"_theUnloader\", objNull], [\"_maxDistance\", 10], [\"_checkVehicleIsStable\", true]];\nTRACE_5(\"params\",_vehicle,_typeOfCargo,_theUnloader,_maxDistance,_checkVehicleIsStable);\n\nscopeName \"main\";\n\nif (_checkVehicleIsStable) then {\n    if (((vectorMagnitude (velocity _vehicle)) > 1.5) || {(!(_vehicle isKindOf \"Ship\")) && {(!isTouchingGround _vehicle) && {((getPos _vehicle) select 2) > 1.5}}}) then {\n        TRACE_4(\"bad vehicle state\",_vehicle,velocity _vehicle,isTouchingGround _vehicle,getPos _vehicle);\n        [] breakOut \"main\";\n    };\n};\n\nprivate _radiusOfItem = 1;\nif (_typeOfCargo isKindOf \"CAManBase\") then {\n    _radiusOfItem = 1.1;\n} else {\n    //`sizeOf` is unreliable, and does not work with object types that don't exist on map, so estimate size based on cargo size\n    if (isNumber (configFile >> \"CfgVehicles\" >> _typeOfCargo >> QEGVAR(cargo,size))) then {\n        _radiusOfItem = (((getNumber (configFile >> \"CfgVehicles\" >> _typeOfCargo >> QEGVAR(cargo,size))) ^ 0.35) max 0.75);\n    };\n};\n\nif (isNull _theUnloader) then {_theUnloader = _vehicle;};\n\n//Ideal unload pos is halfway between unloader and vehicle (at the unloader's height)\nprivate _originASL = ((getPosASL _theUnloader) vectorAdd (getPosASL _vehicle)) vectorMultiply 0.5;\n_originASL set [2, (getPosASL _theUnloader) select 2];\nprivate _originAGL = ASLtoAGL _originASL;\n\n//Do a manual search for empty pos (handles underwater, buildings or piers)\nTRACE_2(\"Checking for unload\",_originAGL,_radiusOfItem);\nprivate _rangeToCheck = 0;\nwhile {_rangeToCheck < _maxDistance} do {\n    private _roundDistance = random _rangeToCheck;\n    private _roundAngle = random 360;\n    private _roundAGL = _originAGL vectorAdd [(cos _roundAngle) * _roundDistance, (sin _roundAngle) * _roundDistance, 0];\n\n    private _roundPointIsValid = false;\n    if (((AGLtoASL _roundAGL) select 2) > 0) then {\n        //Shoot a ray down, and make sure we hit something solid like a building or the ground:\n        private _belowRoundArray = lineIntersectsSurfaces [(AGLtoASL _roundAGL) vectorAdd [0,0,0.5], (AGLtoASL _roundAGL) vectorAdd [0,0,-1]];\n        TRACE_4(\"Testing for solid\",_roundDistance,_roundAngle,_roundAGL,_belowRoundArray);\n        if (!(_belowRoundArray isEqualTo [])) then {\n            private _aboveBuilding = (_belowRoundArray select 0) select 2;\n            //Point is above something: Terrain(null) or Building\n            if ((isNull _aboveBuilding) || {_aboveBuilding isKindOf \"Building\"}) then {\n                //Get the real intersection point:\n                _roundAGL = ASLtoAGL ((_belowRoundArray select 0) select 0);\n                _roundPointIsValid = true;\n            };\n        };\n    } else {\n        //Underwater, just unload anywhere\n        TRACE_3(\"Under the sea\",_roundDistance,_roundAngle,_roundAGL);\n        _roundPointIsValid = true;\n    };\n\n    //Make sure point is valid and do a fast check for people in the way (which sometimes aren't caught by line scaning)\n    if (_roundPointIsValid && {(_roundAGL nearEntities [\"Man\", _radiusOfItem]) isEqualTo []}) then {\n        for \"_index\" from 0 to (COL_TEST_COUNT -1) do {\n            //Scan for colisions with objects with lineIntersectsSurfaces\n            private _angle = _index * (360 / COL_TEST_COUNT);\n            private _point1ASL = (AGLtoASL _roundAGL) vectorAdd [_radiusOfItem * cos _angle, _radiusOfItem * sin _angle, 0.1];\n            private _point2ASL = (AGLtoASL _roundAGL) vectorAdd [-_radiusOfItem * cos _angle, -_radiusOfItem * sin _angle, (_radiusOfItem + 0.5)];\n            private _testIntersections = lineIntersectsSurfaces [_point1ASL, _point2ASL];\n            if (((count _testIntersections) == 1) && {isNull ((_testIntersections select 0) select 2)}) then {\n                private _hitGroundASL = (_testIntersections select 0) select 0;\n                private _hitHeightOffset = ((AGLtoASL _roundAGL) select 2) - (_hitGroundASL select 2);\n                private _hit2dOffset = _roundAGL distance2D _hitGroundASL;\n                private _slope = _hitHeightOffset atan2 _hit2dOffset;\n                if (_slope < 25) then { //Ignore ground hit if slope is reasonable\n                    _testIntersections = [];\n                };\n            };\n            if (!(_testIntersections isEqualTo [])) exitWith {\n                TRACE_2(\"collision low/high\",_roundAGL,_testIntersections);\n                _roundPointIsValid = false;\n            };\n            _point1ASL = (AGLtoASL _roundAGL) vectorAdd [_radiusOfItem * cos _angle, _radiusOfItem * sin _angle, 0.5];\n            _point2ASL = (AGLtoASL _roundAGL) vectorAdd [-_radiusOfItem * cos _angle, -_radiusOfItem * sin _angle, 1];\n            _testIntersections = lineIntersectsSurfaces [_point1ASL, _point2ASL];\n            if (!(_testIntersections isEqualTo [])) exitWith {\n                TRACE_2(\"collision mid\",_roundAGL,_testIntersections);\n                _roundPointIsValid = false;\n            };\n        };\n        if (_roundPointIsValid) then {\n            TRACE_3(\"Valid point found\", _rangeToCheck,_roundAGL, (_originAGL distance _roundAGL));\n            //Raise it slightly so we don't sink through the floor:\n            (_roundAGL vectorAdd [0,0,0.05]) breakOut \"main\";\n        };\n    };\n    _rangeToCheck = _rangeToCheck + (_maxDistance / MAX_TESTS);\n};\n\nTRACE_1(\"no valid spots found\",_rangeToCheck);\n[] //return empty array\n",
        "functionName": "ace_common_fnc_findUnloadPosition"
      },
      {
        "fileName": "fnc_firedEH.sqf",
        "content": "/*\n * Author: esteldunedain\n * Unfied handling of weapon fire\n *\n * Arguments:\n * 0: unit - Object the event handler is assigned to <OBJECT>\n * 1: weapon - Fired weapon <STRING>\n * 2: muzzle - Muzzle that was used <STRING>\n * 3: mode - Current mode of the fired weapon <STRING>\n * 4: ammo - Ammo used <STRING>\n * 5: magazine - magazine name which was used <STRING>\n * 6: projectile - Object of the projectile that was shot <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"gun\", \"muzzle\", \"single\", \"ammo\", \"magazine\", \"bullet\"] call ace_common_fnc_firedEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(firedEH);\n\nparams [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\"];\nTRACE_7(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile);\n\nif (_unit isKindOf \"CAManBase\") then {\n    // The unit it on foot\n    if (_unit == ACE_player) then {\n        [\"ace_firedPlayer\", _this] call CBA_fnc_localEvent;\n    } else {\n        if ([_unit] call EFUNC(common,isPlayer)) then {\n            [\"ace_firedPlayerNonLocal\", _this] call CBA_fnc_localEvent;\n        } else {\n            [\"ace_firedNonPlayer\", _this] call CBA_fnc_localEvent;\n        };\n    };\n} else {\n    // The unit is a vehicle\n    private _vehicle = _unit;\n\n    // Get the gunner and turret path.\n    // Code based on FUNC(getGunner), extracted for efficency.\n    private _gunner = objNull;\n    private _turret = [];\n    {\n        if (_weapon in (_unit weaponsTurret _x)) exitWith {\n            _gunner = _unit turretUnit _x;\n            _turret = _x;\n        };\n        false\n    } count allTurrets [_unit, true];\n    // Ensure that at least the pilot is returned if there is no gunner\n    if (isManualFire _unit && {isNull _gunner}) then {\n        _gunner = effectiveCommander _unit;\n    };\n\n    if (_gunner == ACE_player) then {\n        [\"ace_firedPlayerVehicle\", _this] call CBA_fnc_localEvent;\n    } else {\n        if ([_gunner] call EFUNC(common,isPlayer)) then {\n            [\"ace_firedPlayerVehicleNonLocal\", _this] call CBA_fnc_localEvent;\n        } else {\n            [\"ace_firedNonPlayerVehicle\", _this] call CBA_fnc_localEvent;\n        };\n    };\n};\n\nEND_COUNTER(firedEH);\n",
        "functionName": "ace_common_fnc_firedEH"
      },
      {
        "fileName": "fnc_fixCollision.sqf",
        "content": "/*\n * Author: commy2\n * Attempt to fix PhysX collisions causing unreasonable impact forces and damage.\n *\n * Arguments:\n * Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_fixCollision\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// allowDamage requires local object\nif (!local _this) exitWith {};\n\n// prevent collision damage\n[_this, \"blockDamage\", \"fixCollision\", true] call FUNC(statusEffect_set);\n\n// re-allow damage after 2 seconds\n[{[_this, \"blockDamage\", \"fixCollision\", false] call FUNC(statusEffect_set);}, _this, 2] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_common_fnc_fixCollision"
      },
      {
        "fileName": "fnc_fixFloating.sqf",
        "content": "/*\n * Author: commy2\n * Attempt to fix floating physx with disabled damage after setPosXXX commands.\n * Handles the \"fixFloating\" event\n *\n * Arguments:\n * PhysX object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [object] call ace_common_fnc_fixFloating\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\n\n// setHitPointDamage requires local object\nif (!local _object) exitWith {};\n//Ignore mans\nif (_object isKindOf \"CAManBase\") exitWith {};\n\n//We need to manually set allowDamage to true for setHitIndex to function\n[QGVAR(blockDamage), [_object, 0]] call CBA_fnc_localEvent;\n\n// save and restore hitpoints, see below why\nprivate _hitPointDamages = getAllHitPointsDamage _object;\n\n// get correct format for objects without hitpoints\nif (_hitPointDamages isEqualTo []) then {\n    _hitPointDamages = [[],[],[]];\n};\n\n// this prevents physx objects from floating when near other physx objects with allowDamage false\n_object setDamage damage _object;\n\n{\n    _object setHitIndex [_forEachIndex, _x];\n} forEach (_hitPointDamages select 2);\n\n//manually re-enable allowDamage to previous setting (ref statusEffect_funcs)\nprivate _effectVarName = format [QGVAR(effect_%1), \"blockDamage\"];\nprivate _effectNumber = _object getVariable [_effectVarName, 0];\n[QGVAR(blockDamage), [_object, _effectNumber]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_common_fnc_fixFloating"
      },
      {
        "fileName": "fnc_fixLoweredRifleAnimation.sqf",
        "content": "/*\n * Author: commy2\n * Fixes the lowered rifle animation\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player] call ace_common_fnc_fixLoweredRifleAnimation\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (currentWeapon _unit != \"\" && {currentWeapon _unit == primaryWeapon _unit} && {weaponLowered _unit} && {stance _unit == \"STAND\"} && {vehicle _unit == _unit}) then {\n    [_unit, \"amovpercmstpsraswrfldnon\", 0] call FUNC(doAnimation);\n};\n",
        "functionName": "ace_common_fnc_fixLoweredRifleAnimation"
      },
      {
        "fileName": "fnc_fixPosition.sqf",
        "content": "/*\n * Author: commy2, Jonpas\n * Fixes position of an object. E.g. moves object above ground and adjusts to terrain slope. Requires local object.\n *\n * Arguments:\n * Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * bob call ace_common_fnc_fixPosition\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// setVectorUp requires local object\nif (!local _this) exitWith {};\n\n// Objects with disabled simulation and objects with simulation type \"house\" don't have gravity/physics, so make sure they are not floating\nprivate _hasGravity = simulationEnabled _this && {getText (configFile >> \"CfgVehicles\" >> typeOf _this >> \"simulation\") != \"house\"};\n\nif (!_hasGravity) then {\n    private _posAbove = (getPosATL _this) select 2;\n    TRACE_2(\"house\",_this,_posAbove);\n    if (_posAbove > 0.1) then {\n        private _newPosATL = (getPosATL _this) vectorDiff [0, 0, _posAbove];\n        _this setPosATL _newPosATL;\n    };\n};\n\nprivate _position = getPosATL _this;\n\n// Don't place the object below the ground\nif (_position select 2 < -0.1) then {\n    _position set [2, -0.1];\n    _this setPosATL _position;\n};\n\n// Adjust position to sloped terrain, if placed on ground\n// Object without gravity/physics may have negative height when placed on slope, but those objects are definitely on the ground\nif (!_hasGravity || {getPosATL _this select 2 == _position select 2}) then {\n    _this setVectorUp surfaceNormal _position;\n};\n",
        "functionName": "ace_common_fnc_fixPosition"
      },
      {
        "fileName": "fnc_getAllDefinedSetVariables.sqf",
        "content": "/*\n * Author: Glowbal\n * Returns an 2d array of all variables that have been set on the object\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Limiting Category (default: \"\") <STRING>\n *\n * Return Value:\n * Variable Data <ARRAY>\n *   0: Name <STRING>\n *   1: typeName <STRING>\n *   2: value <ANY>\n *   3: publicFlag <BOOL>\n *   4: peristentFlag <BOOL>\n *\n * Example:\n * [bob, \"\"] call ace_common_fnc_getAllDefinedSetVariables\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", [\"_category\", \"\"]];\n\nif (isNil QGVAR(OBJECT_VARIABLES_STORAGE)) exitWith {[]};\n\nprivate _return = [];\n\n{\n    private _val = _object getVariable (_x select 0);\n\n    if (!isNil \"_val\") then {\n        if (_category == \"\" || _category == _x select 3) then {\n            _return pushBack [_x select 0, typeName _val, _val, _x select 2, _x select 5];\n        };\n    };\n    false\n} count GVAR(OBJECT_VARIABLES_STORAGE);\n\n_return\n",
        "functionName": "ace_common_fnc_getAllDefinedSetVariables"
      },
      {
        "fileName": "fnc_getChildren.sqf",
        "content": "/*\n * Author: commy2\n * Obtain children of a config entry\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Parent Entry Class Children <ARRAY>\n\n * Example:\n * [bob] call ace_common_fnc_getChildren\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_cfgClass\"];\n\nprivate _classes = format [\"configName inheritsFrom _x == '%1'\", _name] configClasses (configFile >> _cfgClass);\n\n_classes apply {configName _x} // return\n",
        "functionName": "ace_common_fnc_getChildren"
      },
      {
        "fileName": "fnc_getConfigCommander.sqf",
        "content": "/*\n * Author: commy2\n * Get the commander config of a vehicles turret.\n *\n * Arguments:\n * 0: vehicle <OBJECT>\n *\n * Return Value:\n * Commander config <CONFIG>\n\n * Example:\n * [car] call ace_common_fnc_getConfigCommander\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _turret = _vehicle call FUNC(getTurretCommander);\n\n[_config, _turret] call FUNC(getTurretConfigPath) // return\n",
        "functionName": "ace_common_fnc_getConfigCommander"
      },
      {
        "fileName": "fnc_getConfigGunner.sqf",
        "content": "/*\n * Author: commy2\n * Get the gunner config of a vehicles turret.\n *\n * Arguments:\n * 0: vehicle <OBJECT>\n *\n * Return Value:\n * Gunner config <CONFIG>\n *\n * Example:\n * [car] call ace_common_fnc_getConfigGunner\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _turret = _vehicle call FUNC(getTurretGunner);\n\n[_config, _turret] call FUNC(getTurretConfigPath) // return\n",
        "functionName": "ace_common_fnc_getConfigGunner"
      },
      {
        "fileName": "fnc_getDeathAnim.sqf",
        "content": "/*\n * Author: Glowbal, PabstMirror\n * Get the death animation for the unit at current time\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * animation <STRING>\n *\n * Example:\n * [bob] call ace_common_fnc_getDeathAnim\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _returnAnimation = \"\";\n\nprivate _animationState = animationState _unit;\nprivate _unitAnimationCfg = configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _animationState;\n\n//If we're already in a terminal animation just return current\nif (getNumber (_unitAnimationCfg >> \"terminal\") == 1) exitWith {_animationState};\n\nprivate _unitActionsCfg = configFile >> \"CfgMovesBasic\" >> \"Actions\" >> getText (_unitAnimationCfg >> \"actions\");\n\nTRACE_2(\"Animation/Action\", configName _unitAnimationCfg, configName _unitActionsCfg);\n\nif (vehicle _unit != _unit) then {\n    private _interpolateArray = getArray (_unitAnimationCfg >> \"interpolateTo\");\n\n    for \"_index\" from 0 to (count _interpolateArray - 1) step 2 do {\n        private _indexAnimation = _interpolateArray select _index;\n\n        //No guarentee that first animation will be right so scan for the first \"terminal\" animation\n        //E.G.: interpolateTo[] = {\"passenger_apc_generic04still\",1,\"KIA_passenger_apc_generic04\",1};\n\n        if (getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _indexAnimation >> \"terminal\") == 1) exitWith {\n            _returnAnimation = _indexAnimation;\n        };\n    };\n} else {\n    _returnAnimation = getText (_unitActionsCfg >> \"die\");\n};\n\n//Fallback if nothing valid found:\nif (_returnAnimation == \"\") then {_returnAnimation = \"Unconscious\"};\n\n_returnAnimation\n",
        "functionName": "ace_common_fnc_getDeathAnim"
      },
      {
        "fileName": "fnc_getDefaultAnim.sqf",
        "content": "/*\n * Author: commy2\n * Get the Defualt animation for the unit\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * animation <STRING>\n *\n * Example:\n * [bob] call ace_common_fnc_getDefaultAnim;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _anim = toLower animationState _unit;\n\n// stance is broken for some animations.\nprivate _stance = stance _unit;\n\nif (_anim find \"ppne\" == 4) then {\n    _stance = \"PRONE\";\n};\n\nif (_anim find \"pknl\" == 4) then {\n    _stance = \"CROUCH\";\n};\n\nif (_anim find \"perc\" == 4) then {\n    _stance = \"STAND\";\n};\n\n_anim = format [\"AmovP%1M%2S%3W%4D%5\",\n    [\"erc\", \"knl\", \"pne\"] select ([\"STAND\", \"CROUCH\", \"PRONE\"] find _stance) max 0,\n    [\"stp\", \"run\"] select (vectorMagnitude velocity _unit > 1),\n    [[\"ras\", \"low\"] select weaponLowered _unit, \"non\"] select (currentWeapon _unit == \"\"),\n    [\"non\", \"rfl\", \"lnr\", \"pst\", \"bin\"] select ([\"\", primaryWeapon _unit, secondaryWeapon _unit, handgunWeapon _unit, binocular _unit] find currentWeapon _unit) max 0,\n    [\"non\", _anim select [count _anim - 1, 1]] select (_anim select [count _anim - 2, 2] in [\"df\", \"db\", \"dl\", \"dr\"])\n];\n\n[\"\", _anim] select isClass (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _anim)\n",
        "functionName": "ace_common_fnc_getDefaultAnim"
      },
      {
        "fileName": "fnc_getDefinedVariable.sqf",
        "content": "/*\n * Author: Glowbal\n * Grabs a variable. If variable has not been set, attempts to use default defined value\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: Variable Name <STRING>\n *\n * Return Value:\n * Value of variable or default value, if the variable is undefined <ANY>\n *\n * Example:\n * [bob, \"var\"] call ace_common_fnc_getDefinedVariable\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_variable\", \"_defaultValue\"];\n\nprivate _value = _unit getVariable _variable;\n\nif (isNil \"_value\") then {\n    if (!isNil \"_defaultValue\") then {\n        _value = _defaultValue;\n    } else {\n        private _definedVariable = _variable call FUNC(getDefinedVariableInfo);\n\n        if (count _definedVariable > 1) then {\n            _value = _definedVariable select 1;\n        };\n    };\n\n    if (isNil \"_value\") then {\n        _value = 0;\n    };\n};\n\n_value\n",
        "functionName": "ace_common_fnc_getDefinedVariable"
      },
      {
        "fileName": "fnc_getDefinedVariableDefault.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the variable default value\n *\n * Arguments:\n * 0: Variable Name <STRING>\n *\n * Return Value:\n * Default value of variable <ANY>\n *\n * Example:\n * [\"name\"] call ace_common_fnc_getDefinedVariableDefault\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_varName\"];\n\nprivate _variableDefinition = _varName call FUNC(getDefinedVariableInfo);\n\nif !(_variableDefinition isEqualTo []) exitWith {\n    _variableDefinition select 1;\n};\n\nnil\n",
        "functionName": "ace_common_fnc_getDefinedVariableDefault"
      },
      {
        "fileName": "fnc_getDefinedVariableInfo.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the variable Informations\n *\n * Arguments:\n * 0: Variable Name <STRING>\n *\n * Return Value:\n * Variable Metadata <ARRAY>\n *\n * Example:\n * [\"var\"] call ace_common_fnc_getDefinedVariableInfo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_varName\"];\n\n+ (missionNamespace getVariable [format [QGVAR(OBJECT_VARIABLES_STORAGE_%1), _varName], []])\n",
        "functionName": "ace_common_fnc_getDefinedVariableInfo"
      },
      {
        "fileName": "fnc_getDisplayConfigName.sqf",
        "content": "/*\n * Author: commy2\n * Get display classnames from config with given idd.\n *\n * Arguments:\n * 0: Display ID (idd) <NUMBER>\n *\n * Return Value:\n * Display Classnames <ARRAY>\n *\n * Example:\n * [5] call ace_common_fnc_getDisplayConfigName\n *\n * Public: Yes\n *\n * Note: Really slow due to iteration through whole config. Meant for debugging.\n */\n#include \"script_component.hpp\"\n\nparams [\"_idd\"];\n\nprivate _configNames = [];\n\nfor \"_index\" from 0 to (count configFile - 1) do {\n    private _config = configFile select _index;\n\n    if (isClass _config && {isNumber (_config >> \"idd\")} && {getNumber (_config >> \"idd\") == _idd}) then {\n        _configNames pushBack configName _config;\n    };\n};\n\n_configNames\n",
        "functionName": "ace_common_fnc_getDisplayConfigName"
      },
      {
        "fileName": "fnc_getDoorTurrets.sqf",
        "content": "/*\n * Author: bux578\n * Returns all turret indecies of door gunners.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * All turret indecies of the Vehicle <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getDoorTurrets\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _turrets = allTurrets [_vehicle, true];\n\nprivate _doorTurrets = [];\n\n{\n    private _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\n    _config = [_config, _x] call FUNC(getTurretConfigPath);\n\n    if (((getNumber (_config >> \"isCopilot\")) == 0) && {count getArray (_config >> \"weapons\") > 0}) then {\n        _doorTurrets pushBack _x;\n    };\n    false\n} count _turrets;\n\n_doorTurrets\n",
        "functionName": "ace_common_fnc_getDoorTurrets"
      },
      {
        "fileName": "fnc_getFirstObjectIntersection.sqf",
        "content": "/*\n * Author: Ruthberg\n * Returns the the first intersection with terrain between two positions. @todo rewrite using lineIntersectsSurfaces?\n *\n * Arguments:\n * 0: PositionASL <ARRAY>\n * 1: PositionATL <ARRAY>\n * 2: Accuracy <NUMBER>\n *\n * Return Value:\n * 0: Intersects <BOOL>\n * 1: Intersection Position ASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [0,0,5], 5] call ace_common_fnc_getFirstObjectIntersection\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_source\", \"_destination\", \"_accuracy\"];\n\nprivate _result = [false, [0, 0, 0]];\n\nprivate _distance = _source vectorDistance _destination;\n\nif !(lineIntersectsWith [_source, _destination] isEqualTo []) then {\n    private _lower = 0;\n    private _upper = 1;\n    private _mid = 0.5;\n\n    private _dir = _source vectorFromTo _destination;\n\n    while {(_upper - _lower) * _distance > _accuracy} do {\n        _mid = _lower + (_upper - _lower) / 2;\n\n        if !(lineIntersectsWith [_source, _source vectorAdd (_dir vectorMultiply (_mid * _distance))] isEqualTo []) then {\n            _upper = _mid;\n        } else {\n            _lower = _mid;\n        };\n    };\n\n    _mid = _lower + (_upper - _lower) / 2;\n    _result = [true, _source vectorAdd (_dir vectorMultiply (_mid * _distance))];\n};\n\n_result\n",
        "functionName": "ace_common_fnc_getFirstObjectIntersection"
      },
      {
        "fileName": "fnc_getFirstTerrainIntersection.sqf",
        "content": "/*\n * Author: Ruthberg\n * Returns the the first intersection with an object between two positions. @todo rewrite using lineIntersectsSurfaces?\n *\n * Arguments:\n * 0: PositionASL <ARRAY>\n * 1: PositionATL <ARRAY>\n * 2: Accuracy <NUMBER>\n *\n * Return Value:\n * 0: Intersects <BOOL>\n * 1: Intersection Position ASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [0,0,5], 5] call ace_common_fnc_getFirstTerrainIntersection\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_source\", \"_destination\", \"_accuracy\"];\n\nprivate _result = [false, [0, 0, 0]];\n\nprivate _distance = _source vectorDistance _destination;\n\nif (terrainIntersectASL [_source, _destination]) then {\n    private _lower = 0;\n    private _upper = 1;\n    private _mid = 0.5;\n\n    private _dir = _source vectorFromTo _destination;\n\n    while {(_upper - _lower) * _distance > _accuracy} do {\n        _mid = _lower + (_upper - _lower) / 2;\n\n        if (terrainIntersectASL [_source, _source vectorAdd (_dir vectorMultiply (_mid * _distance))]) then {\n            _upper = _mid;\n        } else {\n            _lower = _mid;\n        };\n    };\n\n    _mid = _lower + (_upper - _lower) / 2;\n    _result = [true, _source vectorAdd (_dir vectorMultiply (_mid * _distance))];\n};\n\n_result\n",
        "functionName": "ace_common_fnc_getFirstTerrainIntersection"
      },
      {
        "fileName": "fnc_getGunner.sqf",
        "content": "/*\n * Author: commy2\n * Returns gunner using specified weapon type in vehicle. Only works if all turrets have different weapons.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * Gunner <OBJECT>\n *\n * Example:\n * [car, \"gun\"] call ace_common_fnc_getGunner\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]], [\"_weapon\", \"\", [\"\"]]];\n\n// on foot\nif (gunner _vehicle == _vehicle && {_weapon in weapons _vehicle || {toLower _weapon in [\"throw\", \"put\"]}}) exitWith {gunner _vehicle};\n\n// inside vehicle\nprivate _gunner = objNull;\n\n{\n    if (_weapon in (_vehicle weaponsTurret _x)) exitWith {\n        _gunner = _vehicle turretUnit _x;\n    };\n    false\n} count allTurrets [_vehicle, true];\n\n// ensure that at least the pilot is returned if there is no gunner\nif (isManualFire _vehicle && {isNull _gunner}) then {\n    _gunner = effectiveCommander _vehicle;\n};\n\n_gunner\n",
        "functionName": "ace_common_fnc_getGunner"
      },
      {
        "fileName": "fnc_getInPosition.sqf",
        "content": "/*\n * Author: commy2\n * Move unit into given vehicle position or switch to that position if the unit is already inside the vehicle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: Position (\"Driver\", \"Pilot\", \"Gunner\", \"Commander\", \"Copilot\", \"Turret\", \"FFV\", \"Codriver\", \"Cargo\") <STRING>\n * 3: Index (only applies to \"Turret\", \"FFV\", \"Codriver\", \"Cargo\") (default: next free index) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"Driver\", 5] call ace_common_fnc_getInPosition\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n#define CANGETINDRIVER      (isNull (driver _vehicle)             || {!alive driver _vehicle})               && {!lockedDriver _vehicle}           && {getNumber (_config >> \"isUav\") != 1}\n#define CANGETINTURRETINDEX (isNull (_vehicle turretUnit _turret) || {!alive (_vehicle turretUnit _turret)}) && {!(_vehicle lockedTurret _turret)} && {getNumber (_config >> \"isUav\") != 1}\n\nparams [\"_unit\", \"_vehicle\", \"_position\", [\"_index\", -1]];\n\n_position = toLower _position;\n\n// general\nif (!alive _vehicle || {locked _vehicle > 1}) exitWith {false};\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _turret = [];\n\nprivate _isInside = vehicle _unit == _vehicle;\n\nprivate _script = {};\nprivate _enemiesInVehicle = false;   //Possible Side Restriction\n\n{\n    if (side _unit getFriend side _x < 0.6) exitWith {_enemiesInVehicle = true};\n    false\n} count crew _vehicle;\n\nswitch (_position) do {\n    case \"driver\" : {\n        if (CANGETINDRIVER) then {\n            _script = [\n                {_unit action [[\"GetInDriver\", \"MoveToDriver\"] select _isInside, _vehicle];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInDriver _vehicle; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n        };\n    };\n\n    case \"pilot\" : {\n        if (CANGETINDRIVER) then {\n            _script = [\n                {_unit action [[\"GetInPilot\", \"MoveToPilot\"] select _isInside, _vehicle];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInDriver _vehicle; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n            _position = \"driver\";\n        };\n    };\n\n    case \"gunner\" : {\n        _turret = [_vehicle] call FUNC(getTurretGunner);\n\n        if (CANGETINTURRETINDEX) then {\n            _script = [\n                {_unit action [[\"GetInGunner\", \"MoveToGunner\"] select _isInside, _vehicle];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInGunner _vehicle; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n        };\n    };\n\n    case \"commander\" : {\n        _turret = [_vehicle] call FUNC(getTurretCommander);\n\n        if (CANGETINTURRETINDEX) then {\n            _script = [\n                {_unit action [[\"GetInCommander\", \"MoveToCommander\"] select _isInside, _vehicle];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInCommander _vehicle; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n        };\n    };\n\n    case \"copilot\" : {\n        _turret = [_vehicle] call FUNC(getTurretCopilot);\n\n        if (CANGETINTURRETINDEX) then {\n            _script = [\n                {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n\n            _position = \"gunner\";  // I think. It's a turret after all and turrets supposedly return \"gunner\"\n        };\n    };\n\n    case \"turret\" : {\n        private _turrets = [_vehicle] call FUNC(getTurretsOther);\n\n        if (_index != -1 && {_turret = _turrets select _index; CANGETINTURRETINDEX}) then {\n            _script = [\n                {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n\n            _position = \"gunner\";\n        } else {\n            for \"_index\" from 0 to (count _turrets - 1) do {\n                _turret = _turrets select _index;\n                if (CANGETINTURRETINDEX) exitWith {\n                    _script = [\n                        {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\n                        {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\n                    ] select _enemiesInVehicle;\n\n                    _position = \"gunner\";\n                };\n            };\n        };\n    };\n\n    case \"ffv\" : {\n        private _turrets = [_vehicle] call FUNC(getTurretsFFV);\n\n        if (_index != -1 && {_turret = _turrets select _index; CANGETINTURRETINDEX}) then {\n            _script = [\n                {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n\n            _position = \"gunner\";  // I think. It's a turret after all and turrets supposedly return \"gunner\"\n        } else {\n            for \"_index\" from 0 to (count _turrets - 1) do {\n                _turret = _turrets select _index;\n                if (CANGETINTURRETINDEX) exitWith {\n                    _script = [\n                        {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\n                        {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\n                    ] select _enemiesInVehicle;\n\n                    _position = \"gunner\";  // I think. It's a turret after all and turrets supposedly return \"gunner\"\n                };\n            };\n        };\n    };\n\n    case \"codriver\" : {\n        private _positions = [typeOf _vehicle] call FUNC(getVehicleCodriver);\n\n        {\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\n        } forEach crew _vehicle;\n\n        if (_index != -1 && {_index in _positions}) then {\n            _script = [\n                {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n\n            _position = \"cargo\";\n        } else {\n            _index = _positions select 0;\n            if (!isNil \"_index\") then {\n                _script = [\n                    {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\n                    {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\n                ] select _enemiesInVehicle;\n\n                _position = \"cargo\";\n            };\n        };\n    };\n\n    case \"cargo\" : {\n        private _positions = [typeOf _vehicle] call FUNC(getVehicleCargo);\n\n        {\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\n        } forEach crew _vehicle;\n\n        if (_index != -1 && {_index in _positions}) then {\n            _script = [\n                {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\n                {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\n            ] select _enemiesInVehicle;\n\n            _position = \"cargo\";\n        } else {\n            _index = _positions select 0;\n            if (!isNil \"_index\") then {\n                _script = [\n                    {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\n                    {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\n                ] select _enemiesInVehicle;\n\n                _position = \"cargo\";\n            };\n        };\n    };\n\n    default {};\n};\n\n// this will execute all config based event handlers. Not script based ones unfortunately, but atleast we don't use any.\nprivate _fnc_getInEH = {\n    // config based getIn EHs are assigned to the soldier, not the vehicle. Why Bis? Why?\n    private _config = configFile >> \"CfgVehicles\" >> typeOf _unit >> \"EventHandlers\";\n\n    if (isClass _config) then {\n        //getIn is local effects with global arguments. It doesn't trigger if the unit was already inside and only switched seats\n        if !(_isInside) then {\n            [_vehicle, _position, _unit, _turret] call compile getText (_config >> \"getIn\");\n        };\n    };\n};\n\n// if you want into the cargo and you can't, then check ffv turrets aswell\nif (_position == \"cargo\") exitWith {\n    if (_script isEqualTo {}) then {\n        [_unit, _vehicle, \"ffv\"] call FUNC(getInPosition);\n    } else {\n        call _script;\n    };\n};\n\ncall _script;\n\n/*\n  sleep 0.1;\n  if ((vehicle _unit) != _vehicle) then {\n    [\"fn_getInPosition.sqf - Side Restriction, failed to move _unit into vehicle\"] call bis_fnc_error;\n    _unit moveInAny _vehicle;  //attempt to fail gracefully\n  };\n*/\n",
        "functionName": "ace_common_fnc_getInPosition"
      },
      {
        "fileName": "fnc_getItemType.sqf",
        "content": "/*\n * Author: commy2\n * Returns item type of given classname.\n *\n * Arguments:\n * 0: Item <STRING>\n *\n * Return Value:\n * 0: Type (\"weapon\", \"item\", \"magazine\", \"\") <STRING>\n * 1: Item Description <STRING>\n *\n * Example:\n * [\"tire\"] call ace_common_fnc_getItemType\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\"];\n\nprivate _config = _item call CBA_fnc_getItemConfig;\n\nif (isNull _config) exitWith {[\"\", \"\"]};\n\nprivate _cfgType = configName ((configHierarchy _config) param [1, configNull]);\n\nif (_cfgType == \"CfgGlasses\") exitWith {[\"item\", \"glasses\"]};\n\nprivate _config = configFile >> _cfgType >> _item;\nprivate _type = getNumber (_config >> \"type\");\nprivate _simulation = getText (_config >> \"simulation\");\n\nif (isNumber (_config >> \"ItemInfo\" >> \"type\")) then {\n    _type = getNumber (_config >> \"ItemInfo\" >> \"type\");\n};\n\nprivate _default = [\"item\", \"magazine\"] select (_cfgType == \"CfgMagazines\");\n\nswitch (true) do {\n    case (_type == 0): {[_default, \"unknown\"]};\n    case (_type == 2^0): {[\"weapon\", \"primary\"]};\n    case (_type == 2^1): {[\"weapon\", \"handgun\"]};\n    case (_type == 2^2): {[\"weapon\", \"secondary\"]};\n    case (_type  < 2^4): {[\"weapon\", \"unknown\"]};\n    case (_type == 2^4): {[\"magazine\", \"handgun\"]}; // handgun\n    case (_type == 2^8): {[\"magazine\", \"primary\"]}; // rifle\n    case (_type == 2^9): {[\"magazine\", \"secondary\"]}; // rpg, mg, mines\n    //case (_type  < 2^11): {[\"magazine\", \"unknown\"]};\n\n    case (_type == 101): {[\"item\", \"muzzle\"]};\n    case (_type == 201): {[\"item\", \"optics\"]};\n    case (_type == 301): {[\"item\", \"flashlight\"]};\n    case (_type == 302): {[\"item\", \"under\"]}; // czech for bipod item\n    case (_type == 401): {[\"item\", \"first_aid_kit\"]};\n    case (_type == 501): {[\"item\", \"fins\"]}; // not implemented\n    case (_type == 601): {[\"item\", \"breathing_bomb\"]}; // not implemented\n    case (_type == 603): {[\"item\", \"goggles\"]};\n    case (_type == 604): {[\"item\", \"scuba\"]}; // not implemented\n    case (_type == 605): {[\"item\", \"headgear\"]};\n    case (_type == 611): {[\"item\", \"radio\"]};\n    case (_type == 616): {[\"item\", \"hmd\"]};\n    case (_type == 617): {[\"item\", \"binocular\"]};\n    case (_type == 619): {[\"item\", \"medikit\"]};\n    case (_type == 620): {[\"item\", \"toolkit\"]};\n    case (_type == 621): {[\"item\", \"uav_terminal\"]};\n    case (_type == 701): {[\"item\", \"vest\"]};\n    case (_type == 801): {[\"item\", \"uniform\"]};\n\n    case (_type == 2^12): {\n        switch (toLower _simulation) do {\n            case (\"weapon\"): {[\"weapon\", \"binocular\"]};\n            case (\"binocular\"): {[\"weapon\", \"binocular\"]};\n            case (\"nvgoggles\"): {[\"item\", \"nvgoggles\"]};\n            case (\"itemminedetector\"): {[\"item\", \"minedetector\"]};\n            default {[_default, \"unknown\"]};\n        };\n    };\n\n    case (_type == 2^16): {[\"weapon\", \"vehicle\"]};\n    case (_type == 2^17): {\n        switch (toLower _simulation) do {\n            case (\"itemmap\"): {[\"item\", \"map\"]};\n            case (\"itemgps\"): {[\"item\", \"gps\"]};\n            case (\"itemradio\"): {[\"item\", \"radio\"]};\n            case (\"itemcompass\"): {[\"item\", \"compass\"]};\n            case (\"itemwatch\"): {[\"item\", \"watch\"]};\n            default {[_default, \"unknown\"]};\n        };\n    };\n    default {[_default, \"unknown\"]};\n};\n",
        "functionName": "ace_common_fnc_getItemType"
      },
      {
        "fileName": "fnc_getLightProperties.sqf",
        "content": "/*\n * Author: commy2\n * Read properties of given vehicles light.\n *\n * Arguments:\n * 0: Object with lights <OBJECT>\n * 1: Light classname <STRING>\n *\n * Return Value:\n * 0: Light intensity <NUMBER>\n * 1: Light position <STRING>\n * 2: Light direction <STRING>\n * 3: Light inner angle <NUMBER>\n * 4: Light outer angle <NUMBER>\n *\n * Example:\n * [car, \"light\"] call ace_common_fnc_getLightProperties\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_light\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"Reflectors\" >> _light;\n\nprivate _intensity = getNumber (_config >> \"intensity\");\nprivate _position = getText (_config >> \"position\");\nprivate _direction = getText (_config >> \"direction\");\nprivate _innerAngle = getNumber (_config >> \"innerAngle\");\nprivate _outerAngle = getNumber (_config >> \"outerAngle\");\n\n[_intensity, _position, _direction, _innerAngle, _outerAngle]\n",
        "functionName": "ace_common_fnc_getLightProperties"
      },
      {
        "fileName": "fnc_getLightPropertiesWeapon.sqf",
        "content": "/*\n * Author: commy2\n * Read properties of given flashlight.\n *\n * Arguments:\n * 0: Flashlight <STRING>\n *\n * Return Value:\n * 0: Light intensity <NUMBER>\n * 1: Light position <STRING>\n * 2: Light direction <STRING>\n * 3: Light inner angle <NUMBER>\n * 4: Light outer angle <NUMBER>\n *\n * Example:\n * [\"flashlight\"] call ace_common_fnc_getLightPropertiesWeapon\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_weapon\"];\n\nprivate _config = configFile >> \"CfgWeapons\" >> _weapon >> \"ItemInfo\" >> \"FlashLight\";\n\nprivate _intensity = getNumber (_config >> \"intensity\");\nprivate _position = getText (_config >> \"position\");\nprivate _direction = getText (_config >> \"direction\");\nprivate _innerAngle = getNumber (_config >> \"innerAngle\");\nprivate _outerAngle = getNumber (_config >> \"outerAngle\");\n\n[_intensity, _position, _direction, _innerAngle, _outerAngle]\n",
        "functionName": "ace_common_fnc_getLightPropertiesWeapon"
      },
      {
        "fileName": "fnc_getMapData.sqf",
        "content": "/*\n * Author: VKing, bux\n * Gets the current latitude and altitude offset for the map.\n *\n * Arguments:\n * 0: Map name (default: worldName) <STRING>\n *\n * Return Value:\n * 0: Latitude <NUMBER>\n * 1: Altitude <NUMBER>\n *\n * Example:\n * [\"altis\"] call ace_common_fnc_getMapData\n *\n * Public: No\n */\n\nparams [\"_map\"];\n_map = toLower _map;\n\n// [latitude, altitude]\n\n// the more important ones\nif (_map in [\"tanoa\"]) exitWith { [-18, 0] };\nif (_map in [\"altis\"]) exitWith { [40, 0] };\nif (_map in [\"stratis\"]) exitWith { [40, 0] };\nif (_map in [\"malden\", \"abel\"]) exitWith { [38.8, 0] }; // 1.72 Malden and CWR2 Malden\n\nif (_map in [\"abbottabad\"]) exitWith { [34, 1256] }; // Abbottabad elevation 1256m (Wikipedia)\nif (_map in [\"abramia\"]) exitWith { [60, 0] };\nif (_map in [\"af_kandahar_province\"]) exitWith { [42, 0] };\nif (_map in [\"angel\"]) exitWith { [38, 0] };\nif (_map in [\"anim_helvantis_v2\"]) exitWith { [50, 0] };\nif (_map in [\"anim_starokovka\"]) exitWith { [50, 0] };\nif (_map in [\"australia\"]) exitWith { [-25, 0] };\nif (_map in [\"baranow\", \"ivachev\", \"panavo\", \"staszow\"]) exitWith { [50, 148.1] }; // IFA3LITE - default elevationOffset\nif (_map in [\"beketov\"]) exitWith { [55, 0] };\nif (_map in [\"blud_cordelia\"]) exitWith { [12, 5] }; // Trung Si\nif (_map in [\"bootcamp_acr\"]) exitWith { [50, 0] };\nif (_map in [\"bornholm\"]) exitWith { [55, 0] };\nif (_map in [\"bozcaada\"]) exitWith { [40, 0] };\nif (_map in [\"cain\"]) exitWith { [40, 0] }; // CWR2 Kolgujev\nif (_map in [\"caribou\"]) exitWith { [68, 0] };\nif (_map in [\"cartercity\"]) exitWith { [43, 130] }; // Pecher, based on Grozny (1995 - 1996) elevation 130m (Wikipedia)\nif (_map in [\"catalina\"]) exitWith { [33, 0] };\nif (_map in [\"chernarus\", \"chernarus_summer\", \"chernarus_winter\"]) exitWith { [50, 0] };\nif (_map in [\"chernobylzone\", \"chernobylzonea2\"]) exitWith { [51, 0] };\nif (_map in [\"clafghan\"]) exitWith { [34, 640] };\nif (_map in [\"colleville\"]) exitWith { [49, 0] }; // IFA3LITE, Omaha Beach 1944\nif (_map in [\"csj_lawlands\", \"uns_dong_ha\"]) exitWith { [12, 0] }; // Unsung Mod\nif (_map in [\"csj_sea\"]) exitWith { [15, 0] }; // Unsung Mod\nif (_map in [\"dakrong\"]) exitWith { [16, 0] }; // Unsung Mod\nif (_map in [\"desert_e\"]) exitWith { [40, 800] };\nif (_map in [\"desert_island\"]) exitWith { [40, 0] }; // CWR2 Desert Island\nif (_map in [\"dya\"]) exitWith { [34, 110] }; // Diyala Iraq - default elevationOffset\nif (_map in [\"eden\"]) exitWith { [45, 0] }; // CWR2 Everon\nif (_map in [\"esseker\"]) exitWith { [43, 2000] };\nif (_map in [\"evergreen\"]) exitWith { [41, 0] }; // Burgazada, Turkey - default elevationOffset\nif (_map in [\"fallujah\"]) exitWith { [33, 0] };\nif (_map in [\"fata\"]) exitWith { [33, 1347] };\nif (_map in [\"gorgona\"]) exitWith { [43, 0] };\nif (_map in [\"hellskitchen\", \"hellskitchens\"]) exitWith { [32, 900] }; // Sangin summer, Sangin winter - Sangin elevation 888m (Wikipedia)\nif (_map in [\"hindukush\"]) exitWith { [36, 0] };\nif (_map in [\"i44_omaha_v2\"]) exitWith { [49, 0] };\nif (_map in [\"imrali\", \"imralispring\"]) exitWith { [40, 0] };\nif (_map in [\"intro\"]) exitWith { [40, 0] };\nif (_map in [\"isladuala3\"]) exitWith { [-19, 0] };\nif (_map in [\"jacobi\"]) exitWith { [34, 2000] }; // default elevationOffset\nif (_map in [\"kapaulio\"]) exitWith { [0, 0] };\nif (_map in [\"kerama\"]) exitWith { [26, 0] }; // Kerama Islands, Japan - default elevationOffset\nif (_map in [\"khe_sanh\"]) exitWith { [17, 0] }; // Unsung Mod\nif (_map in [\"kholm\"]) exitWith { [36, 0] };\nif (_map in [\"kidal\"]) exitWith { [18, 0] }; // Kidal, Mali - default elevationOffset\nif (_map in [\"koplic\"]) exitWith { [42, 0] };\nif (_map in [\"kunduz\"]) exitWith { [37, 0] };\nif (_map in [\"lingor\", \"lingor3\", \"dingor\"]) exitWith { [-4, 0] };\nif (_map in [\"lost\", \"lostw\"]) exitWith { [60, 0] };\nif (_map in [\"lythium\"]) exitWith { [34, 0] };\nif (_map in [\"malvinas\"]) exitWith { [-52, 0] };\nif (_map in [\"marenice\"]) exitWith { [51, 0] }; // CSA38 Mod (Czechoslovak army 1938 - Munich crisis), Lisatian Mountains.\nif (_map in [\"mcn_aliabad\"]) exitWith { [36, 0] };\nif (_map in [\"mcn_neaville\", \"mcn_neaville_winter\"]) exitWith { [45, 0] }; // I44: Neaville, I44: Neaville (Winter)\nif (_map in [\"mef_alaska\"]) exitWith { [60, 5] };\nif (_map in [\"mog\"]) exitWith { [2, 0] }; // Mogadishu, Somalia\nif (_map in [\"mountains_acr\"]) exitWith { [35, 2000] };\nif (_map in [\"mske\"]) exitWith { [35, 0] }; // MSKE 2017\nif (_map in [\"nam2\"]) exitWith { [14, 0] };\nif (_map in [\"namalsk\"]) exitWith { [65, 0] };\nif (_map in [\"napf\", \"napfwinter\"]) exitWith { [47, 0] };\nif (_map in [\"newyork_lumnuon\"]) exitWith { [41, 5] }; // Governer´s Island, New York - default elevationOffset\nif (_map in [\"noe\"]) exitWith { [45, 0] }; // CWR2 Nogova\nif (_map in [\"panthera3\", \"winthera3\"]) exitWith { [46, 0] };\nif (_map in [\"phu_bai\", \"rockwall\", \"us101_cao_bang\"]) exitWith { [14, 0] }; // Unsung Mod\nif (_map in [\"pianosa_aut\"]) exitWith { [43, 0] }; // Pianosa, Italy - default elevationOffset\nif (_map in [\"pja305\"]) exitWith { [0, 0] }; // G.O.S N'Ziwasogo\nif (_map in [\"pja306\"]) exitWith { [35, 0] }; // G.O.S Kalu Khan\nif (_map in [\"pja307\"]) exitWith { [17, 0] }; // F.S.F Daryah\nif (_map in [\"pja308\"]) exitWith { [36, 0] }; // G.O.S Gunkizli\nif (_map in [\"pja310\"]) exitWith { [36, 0] }; // G.O.S Al Rayak\nif (_map in [\"pja312\"]) exitWith { [16, 0] }; // G.O.S Song Bin Tanh\nif (_map in [\"pja314\"]) exitWith { [46, 0] }; // G.O.S Leskovets\nif (_map in [\"pja319\"]) exitWith { [20, 0] }; // G.O.S N'Djenahoud, Ennedi Massif (Republic of Chad)\nif (_map in [\"plr_bulge\"]) exitWith { [49, 0] }; // I44: Battle of the Bulge\nif (_map in [\"porquerolles\"]) exitWith { [43, 0] };\nif (_map in [\"porto\"]) exitWith { [40, 0] };\nif (_map in [\"provinggrounds_pmc\"]) exitWith { [35, 100] };\nif (_map in [\"reshmaan\"]) exitWith { [35, 2000] };\nif (_map in [\"rungsat\"]) exitWith { [10, 0] }; // Unsung Mod\nif (_map in [\"sara\", \"sara_dbe1\"]) exitWith { [40, 0] };\nif (_map in [\"saralite\"]) exitWith { [40, 0] };\nif (_map in [\"sb3\"]) exitWith { [53, 25] }; // TrpUebPl Einfelde Nord (Munster North Training Area, Germany) - default elevationOffset\nif (_map in [\"sfp_sturko\"]) exitWith { [56, 0] };\nif (_map in [\"sfp_wamako\"]) exitWith { [14, 0] };\nif (_map in [\"shapur_baf\"]) exitWith { [35, 100] };\nif (_map in [\"sugarlake\"]) exitWith { [29, 0] };\nif (_map in [\"takistan\"]) exitWith { [35, 2000] };\nif (_map in [\"thirsk\"]) exitWith { [65, 0] };\nif (_map in [\"tilos\"]) exitWith { [36, 0] };\nif (_map in [\"uhao\"]) exitWith { [21, 0] };\nif (_map in [\"uns_idv\", \"uns_ptv\"]) exitWith { [13, 0] }; // Unsung Mod\nif (_map in [\"utes\"]) exitWith { [50, 0] };\nif (_map in [\"vt5\"]) exitWith { [61, 100] }; // Valtatie 5, Finland - default elevationOffset\nif (_map in [\"wake\"]) exitWith { [19, 0] };\nif (_map in [\"waziristan\"]) exitWith { [33, 0] };\nif (_map in [\"wintermap\"]) exitWith { [61, 0] }; // Nordkvingo - default elevationOffset\nif (_map in [\"wintertown\", \"wintertowna3\"]) exitWith { [39, 600] }; // U.S. state Kansas mean elevation 610m (Wikipedia)\nif (_map in [\"woodland_acr\"]) exitWith { [50, 0] };\nif (_map in [\"xcam_prototype\"]) exitWith { [35, 0] };\nif (_map in [\"xcam_taunus\"]) exitWith { [50, 0] };\nif (_map in [\"zargabad\"]) exitWith { [35, 2000] };\n\n[] //Return empty array if we have no specific data for the map\n",
        "functionName": "ace_common_fnc_getMapData"
      },
      {
        "fileName": "fnc_getMapGridData.sqf",
        "content": "/*\n * Author: PabstMirror\n * Finds real x/y offset and map step for a 10 digit grid\n * Save time by preparing data one time at startup\n * Ideas from Nou's mapGridToPos and BIS_fnc_gridToPos\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_map_fnc_getMapGridData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(mapGridData) = [];\n\n//--- Extract grid values from world config (Borrowed from BIS_fnc_gridToPos)\nprivate _cfgGrid = configFile >> \"CfgWorlds\" >> worldName >> \"Grid\";\nprivate _offsetX = getNumber (_cfgGrid >> \"offsetX\");\nprivate _offsetY = getNumber (_cfgGrid >> \"offsetY\");\nprivate _zoomMax = 1e99;\nprivate _formatX = \"\";\nprivate _formatY = \"\";\nprivate _stepX = 1e10;\nprivate _stepY = 1e10;\n\n{\n    private _zoom = getnumber (_x >> \"zoomMax\");\n    if (_zoom < _zoomMax) then {\n        _zoomMax = _zoom;\n        _formatX = getText (_x >> \"formatX\");\n        _formatY = getText (_x >> \"formatY\");\n        _stepX = getNumber (_x >> \"stepX\");\n        _stepY = getNumber (_x >> \"stepY\");\n    };\n    false\n} count configProperties [_cfgGrid, \"isClass _x\", false];\n\nprivate _letterGrid = false;\n\nif (toLower _formatX find \"a\" != -1) then {_letterGrid = true};\nif (toLower _formatY find \"a\" != -1) then {_letterGrid = true};\n\nif (_letterGrid) exitWith {\n    WARNING_3(\"Map Grid Warning (%1) - Map uses letter grids [%2, %3]\",worldName,_formatX,_formatY);\n};\n\n//Start at [0, 500] and move north until we get a change in grid\nprivate _heightOffset = 500;\nprivate _startGrid = mapGridPosition [0, _heightOffset];\nprivate _originGrid = _startGrid;\n\nwhile {_startGrid == _originGrid} do {\n    _heightOffset = _heightOffset + 1;\n    _originGrid = mapGridPosition [0, _heightOffset];\n};\n\n//Calculate the real y offset\nprivate _realOffsetY = (parseNumber (_originGrid select [count _formatX, count _formatY])) * _stepY + _heightOffset - 1;\n\n//Calculate MGRS 10digit step - they should both be 1 meter:\nprivate _stepXat5 = _stepX * 10 ^ ((count _formatX) - 5);\nprivate _stepYat5 = -1 * _stepY * 10 ^ ((count _formatY) - 5);\n\nif (_stepYat5 < 0) then {\n    TRACE_1(\"Northing is reversed\",worldName);\n};\nif (_stepXat5 != 1) then {\n    TRACE_2(\"MGRS 10 digit grid does not equal 1 meter\",_stepXat5,worldName);\n};\nif (_stepYat5 != 1 && {_stepYat5 != -1}) then {\n    TRACE_2(\"MGRS 10 digit grid does not equal 1 meter\",_stepYat5,worldName);\n};\n\nGVAR(mapGridData) = [_offsetX, _realOffsetY, _stepXat5, _stepYat5];\n",
        "functionName": "ace_common_fnc_getMapGridData"
      },
      {
        "fileName": "fnc_getMapGridFromPos.sqf",
        "content": "/*\n * Author: VKing, PabstMirror\n * Gets a 10-digit map grid for the given world position\n *\n * Arguments:\n * 0: Position (2D Position) <ARRAY>\n * 1: Return type; false for array of easting and northing, true for single string (default: false) <BOOL>\n *\n * Return Value:\n * 0: Easting <String>\n * 1: Northing <String>\n *\n * Example:\n * [getPos player] call ace_common_fnc_getMapGridFromPos\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_pos\", [\"_returnSingleString\", false]];\n\n//Fallback, when map data is weird (letters)\nif (GVAR(mapGridData) isEqualTo []) exitWith {\n    private _nativeGrid = mapGridPosition _pos;\n\n    if (_returnSingleString) then {\n        _nativeGrid\n    } else {\n        private _count = floor ((count _nativeGrid) / 2);\n        [_nativeGrid select [0, _count], _nativeGrid select [_count, _count]]\n    };\n};\n\nGVAR(mapGridData) params [\"_offsetX\", \"_realOffsetY\", \"_stepXat5\", \"_stepYat5\"];\n\nprivate _easting = floor (((_pos select 0) - _offsetX) / _stepXat5);\nprivate _northing = floor (((_pos select 1) - _realOffsetY) / _stepYat5);\n\n//Attempt to handle negative east/north (e.g.: moving west of map bounds)\nif (_easting > 0) then {\n    _easting = str _easting;\n    while {count _easting < 5} do {_easting = \"0\" + _easting};\n} else {\n    _easting = str abs _easting;\n    while {count _easting < 4} do {_easting = \"0\" + _easting};\n    _easting = \"-\" + _easting;\n};\n\nif (_northing > 0) then {\n    _northing = str _northing;\n    while {count _northing < 5} do {_northing = \"0\" + _northing};\n} else {\n    _northing = str abs _northing;\n    while {count _northing < 4} do {_northing = \"0\" + _northing};\n    _northing = \"-\" + _northing;\n};\n\nif (_returnSingleString) then {\n    _easting + _northing\n} else {\n    [_easting, _northing]\n}; // return\n",
        "functionName": "ace_common_fnc_getMapGridFromPos"
      },
      {
        "fileName": "fnc_getMapPosFromGrid.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets position from grid cords\n *\n * Arguments:\n * 0: Grid Cords <STRING>\n * 1: Grid center (true), Grid Bottom Right (false) (default: true) <BOOL>\n *\n * Return Value:\n * Position <ARRAY>\n *\n * Example:\n * [\"6900080085\"] call ace_common_fnc_getMapPosFromGrid\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_inputString\", [\"_getCenterOfGrid\", true]];\n\nif (count GVAR(mapGridData) == 0) exitWith {\n    ERROR(\"Map has bad data, falling back to BIS_fnc_gridToPos\");\n    (_this call BIS_fnc_gridToPos) select 0\n};\n\nGVAR(mapGridData) params [\"_offsetX\", \"_realOffsetY\", \"_stepXat5\", \"_stepYat5\"];\n\nprivate _countInput = count _inputString;\nprivate _countInputHalf = floor (_countInput / 2);\n\n//Split string, ignoring middle\nprivate _xPart = _inputString select [0, _countInputHalf];\nprivate _yPart = _inputString select [ceil (_countInput / 2), _countInputHalf];\n\nprivate _xPos = ((parseNumber _xPart) * _stepXat5 * 10 ^ (5 - _countInputHalf)) + _offsetX;\nprivate _yPos = ((parseNumber _yPart) * _stepYat5 * 10 ^ (5 - _countInputHalf)) + _realOffsetY;\n\nif (_getCenterOfGrid) then {\n    _xPos = _xPos + 0.5 * _stepXat5 * 10 ^ (5 - _countInputHalf);\n    _yPos = _yPos + 0.5 * _stepYat5 * 10 ^ (5 - _countInputHalf);\n};\n\n[_xPos, _yPos, 0]\n",
        "functionName": "ace_common_fnc_getMapPosFromGrid"
      },
      {
        "fileName": "fnc_getMarkerType.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Get the apropriate marker for a group.\n *\n * Arguments:\n * 0: Group <GROUP>\n *\n * Return Value:\n * Marker Type <STRING>\n *\n * Example:\n * [\"GROUP\"] call ace_common_fnc_getmarkerType\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_group\"];\n\nprivate _leader = leader _group;\nprivate _vehicle = vehicle _leader;\nprivate _side = side _leader;\n\nif (_vehicle == _leader) exitWith {\n    if (\n        getNumber (configFile >> \"CfgVehicles\" >> typeOf _leader >> \"detectSkill\") > 20 ||\n        getNumber (configFile >> \"CfgVehicles\" >> typeOf _leader >> \"camouflage\") < 1 ||\n        getText   (configFile >> \"CfgVehicles\" >> typeOf _leader >> \"textsingular\") == \"diver\"\n    ) then {\n        [\"n_recon\", \"b_recon\", \"o_recon\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n    } else {\n        [\"n_inf\", \"b_inf\", \"o_inf\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n    };\n};\n\nif (getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"attendant\") == 1) exitWith {\n    [\"n_med\", \"b_med\", \"o_med\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\nif (\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportRepair\") > 0 ||\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportFuel\") > 0 ||\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportAmmo\") > 0 ||\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"ACE_canRepair\") > 0 ||\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"ACE_fuelCapacityCargo\") > 0\n) exitWith {\n    [\"n_maint\", \"b_maint\", \"o_maint\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\nif (_vehicle isKindOf \"Plane\") exitWith {\n    [\"n_plane\", \"b_plane\", \"o_plane\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\nif (_vehicle isKindOf \"Air\") exitWith {\n    [\"n_air\", \"b_air\", \"o_air\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\nif (_vehicle isKindOf \"StaticMortar\") exitWith {\n    [\"n_mortar\", \"b_mortar\", \"o_mortar\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\nif (getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"artilleryScanner\") == 1) exitWith {\n    [\"n_art\", \"b_art\", \"o_art\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\nif (_vehicle isKindOf \"Car\") exitWith {\n    [\"n_motor_inf\", \"b_motor_inf\", \"o_motor_inf\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\nif (_vehicle isKindOf \"Tank\") exitWith {\n    if (getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportSoldier\") > 0) then {\n        [\"n_mech_inf\", \"b_mech_inf\", \"o_mech_inf\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n    } else {\n        [\"n_armor\", \"b_armor\", \"o_armor\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n    };\n};\n\nif (_vehicle isKindOf \"Ship\") exitWith {\n    [\"n_naval\", \"b_naval\", \"o_naval\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n};\n\n// generic marker\n[\"n_unknown\", \"b_unknown\", \"o_unknown\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\n",
        "functionName": "ace_common_fnc_getMarkerType"
      },
      {
        "fileName": "fnc_getMGRSdata.sqf",
        "content": "/*\n * Author: VKing\n * Gets the current map's MGRS grid zone designator and 100km square.\n * Also gets longitude, latitude and altitude offset for the map.\n * Writes return values to GVAR(MGRS_data) if run on the current map.\n *\n * Arguments:\n * 0: Map name (default: worldName) <STRING>\n *\n * Return Value:\n * 0: Grid zone designator <STRING>\n * 1: 100km square <STRING>\n * 2: GZD + 100km sq. as a single string <STRING>\n *\n * Example:\n * [\"worldName\"] call ace_common_fnc_getMGRSdata\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_map\", worldName]];\n\nprivate _long = getNumber (configFile >> \"CfgWorlds\" >> _map >> \"longitude\");\nprivate _lat = -1 * getNumber (configFile >> \"CfgWorlds\" >> _map >> \"latitude\"); // latitude is reversed in arma (negative config values in north)\nprivate _altitude =  getNumber (configFile >> \"CfgWorlds\" >> _map >> \"elevationOffset\");\n\nprivate _mapData = _map call FUNC(getMapData);\nif (!(_mapData isEqualTo [])) then {\n    _lat = _mapData select 0;\n    _altitude = _mapData select 1;\n};\nTRACE_2(\"Latitude and Altitude\",_lat,_altitude);\n\nprivate _UTM = [_long, _lat] call BIS_fnc_posDegToUTM;\nprivate _easting = _UTM select 0;\nprivate _northing = _UTM select 1;\n//private _zone = _UTM select 2;\nTRACE_4(\"\",_UTM,_easting,_northing,_zone);\n\n/*\nprivate _band = switch (true) do {\n    case (_lat<-72): {\"C\"};\n    case (_lat<-64): {\"D\"};\n    case (_lat<-56): {\"E\"};\n    case (_lat<-48): {\"F\"};\n    case (_lat<-40): {\"G\"};\n    case (_lat<-32): {\"H\"};\n    case (_lat<-24): {\"J\"};\n    case (_lat<-16): {\"K\"};\n    case (_lat<-8): {\"L\"};\n    case (_lat<0): {\"M\"};\n    case (_lat>72): {\"X\"};\n    case (_lat>64): {\"W\"};\n    case (_lat>56): {\"V\"};\n    case (_lat>48): {\"U\"};\n    case (_lat>40): {\"T\"};\n    case (_lat>32): {\"S\"};\n    case (_lat>24): {\"R\"};\n    case (_lat>16): {\"Q\"};\n    case (_lat>8): {\"P\"};\n    case (_lat>=0): {\"N\"};\n};\n*/\n\nprivate _zone = 1 + (floor ((_long + 180) / 6));\nprivate _band = \"Z\";\n\nif (_lat <= -80) then {\n    _band = \"A\";\n} else {\n    if (_lat < 84) then {\n        _band = \"CDEFGHJKLMNPQRSTUVWXX\" select [(floor ((_lat / 8) + 10)), 1];\n    };\n};\n\nif (_map == \"VR\") then {_zone = 0; _band = \"RV\";};\n\nprivate _GZD = format [\"%1%2\",_zone,_band];\nTRACE_3(\"\",_zone,_band,_GZD);\n\nprivate [\"_metaE\", \"_metaN\", \"_letterE\", \"_letterN\"];\n\nprivate _set1 = [1,7,13,19,25,31,37,43,49,55];\nprivate _set2 = [2,8,14,20,26,32,38,44,50,56];\nprivate _set3 = [3,9,15,21,27,33,39,45,51,57];\nprivate _set4 = [4,10,16,22,28,34,40,46,52,58];\nprivate _set5 = [5,11,17,23,29,35,41,47,53,59];\nprivate _set6 = [6,12,18,24,30,36,42,48,54,60];\n\nswitch (true) do {\n    case (_zone in _set1): {_metaE = 1; _metaN = 1;};\n    case (_zone in _set2): {_metaE = 2; _metaN = 2;};\n    case (_zone in _set3): {_metaE = 3; _metaN = 1;};\n    case (_zone in _set4): {_metaE = 1; _metaN = 2;};\n    case (_zone in _set5): {_metaE = 2; _metaN = 1;};\n    case (_zone in _set6): {_metaE = 3; _metaN = 2;};\n};\nTRACE_2(\"\",_metaE,_metaN);\n\nswitch (true) do {\n    case (_zone == 0): {_letterE = \"E\"};\n    case (_easting > 800000): {LOG(\"E8\"); switch (_metaE) do {case 1: {_letterE=\"H\"}; case 2: {_letterE=\"R\"}; case 3: {_letterE=\"Z\"}; }; };\n    case (_easting > 700000): {LOG(\"E7\"); switch (_metaE) do {case 1: {_letterE=\"G\"}; case 2: {_letterE=\"Q\"}; case 3: {_letterE=\"Y\"}; }; };\n    case (_easting > 600000): {LOG(\"E6\"); switch (_metaE) do {case 1: {_letterE=\"F\"}; case 2: {_letterE=\"P\"}; case 3: {_letterE=\"X\"}; }; };\n    case (_easting > 500000): {LOG(\"E5\"); switch (_metaE) do {case 1: {_letterE=\"E\"}; case 2: {_letterE=\"N\"}; case 3: {_letterE=\"W\"}; }; };\n    case (_easting > 400000): {LOG(\"E4\"); switch (_metaE) do {case 1: {_letterE=\"D\"}; case 2: {_letterE=\"M\"}; case 3: {_letterE=\"V\"}; }; };\n    case (_easting > 300000): {LOG(\"E3\"); switch (_metaE) do {case 1: {_letterE=\"C\"}; case 2: {_letterE=\"L\"}; case 3: {_letterE=\"U\"}; }; };\n    case (_easting > 200000): {LOG(\"E2\"); switch (_metaE) do {case 1: {_letterE=\"B\"}; case 2: {_letterE=\"K\"}; case 3: {_letterE=\"T\"}; }; };\n    case (_easting > 100000): {LOG(\"E1\"); switch (_metaE) do {case 1: {_letterE=\"A\"}; case 2: {_letterE=\"J\"}; case 3: {_letterE=\"S\"}; }; };\n    default {_letterE=\"@\"};\n};\nTRACE_1(\"\",_letterE);\n\n_northing = _northing mod 2000000;\nTRACE_1(\"\",_northing);\n\nswitch (true) do {\n    case (_zone == 0): {_letterN = \"N\"};\n    case (_northing > 1900000): {LOG(\"N19\"); switch (_metaN) do {case 1: {_letterN = \"V\"}; case 2: {_letterN = \"E\"}; }; };\n    case (_northing > 1800000): {LOG(\"N18\"); switch (_metaN) do {case 1: {_letterN = \"U\"}; case 2: {_letterN = \"D\"}; }; };\n    case (_northing > 1700000): {LOG(\"N17\"); switch (_metaN) do {case 1: {_letterN = \"T\"}; case 2: {_letterN = \"C\"}; }; };\n    case (_northing > 1600000): {LOG(\"N16\"); switch (_metaN) do {case 1: {_letterN = \"S\"}; case 2: {_letterN = \"B\"}; }; };\n    case (_northing > 1500000): {LOG(\"N15\"); switch (_metaN) do {case 1: {_letterN = \"R\"}; case 2: {_letterN = \"A\"}; }; };\n    case (_northing > 1400000): {LOG(\"N14\"); switch (_metaN) do {case 1: {_letterN = \"Q\"}; case 2: {_letterN = \"V\"}; }; };\n    case (_northing > 1300000): {LOG(\"N13\"); switch (_metaN) do {case 1: {_letterN = \"P\"}; case 2: {_letterN = \"U\"}; }; };\n    case (_northing > 1200000): {LOG(\"N12\"); switch (_metaN) do {case 1: {_letterN = \"N\"}; case 2: {_letterN = \"T\"}; }; };\n    case (_northing > 1100000): {LOG(\"N11\"); switch (_metaN) do {case 1: {_letterN = \"M\"}; case 2: {_letterN = \"S\"}; }; };\n    case (_northing > 1000000): {LOG(\"N10\"); switch (_metaN) do {case 1: {_letterN = \"L\"}; case 2: {_letterN = \"R\"}; }; };\n    case (_northing >  900000): {LOG(\"N09\"); switch (_metaN) do {case 1: {_letterN = \"K\"}; case 2: {_letterN = \"Q\"}; }; };\n    case (_northing >  800000): {LOG(\"N08\"); switch (_metaN) do {case 1: {_letterN = \"J\"}; case 2: {_letterN = \"P\"}; }; };\n    case (_northing >  700000): {LOG(\"N07\"); switch (_metaN) do {case 1: {_letterN = \"H\"}; case 2: {_letterN = \"N\"}; }; };\n    case (_northing >  600000): {LOG(\"N06\"); switch (_metaN) do {case 1: {_letterN = \"G\"}; case 2: {_letterN = \"M\"}; }; };\n    case (_northing >  500000): {LOG(\"N05\"); switch (_metaN) do {case 1: {_letterN = \"F\"}; case 2: {_letterN = \"L\"}; }; };\n    case (_northing >  400000): {LOG(\"N04\"); switch (_metaN) do {case 1: {_letterN = \"E\"}; case 2: {_letterN = \"K\"}; }; };\n    case (_northing >  300000): {LOG(\"N03\"); switch (_metaN) do {case 1: {_letterN = \"D\"}; case 2: {_letterN = \"J\"}; }; };\n    case (_northing >  200000): {LOG(\"N02\"); switch (_metaN) do {case 1: {_letterN = \"C\"}; case 2: {_letterN = \"H\"}; }; };\n    case (_northing >  100000): {LOG(\"N01\"); switch (_metaN) do {case 1: {_letterN = \"B\"}; case 2: {_letterN = \"G\"}; }; };\n    case (_northing >       0): {LOG(\"N00\"); switch (_metaN) do {case 1: {_letterN = \"A\"}; case 2: {_letterN = \"F\"}; }; };\n};\nTRACE_1(\"\",_letterN);\n\nprivate _grid100km = _letterE + _letterN;\nTRACE_1(\"\",_grid100km);\n\nif (_map == worldName) then {\n    GVAR(MGRS_data) = [_GZD, _grid100km, _GZD + _grid100km];\n    GVAR(mapAltitude) = _altitude;\n    GVAR(mapLatitude) = _lat;\n    GVAR(mapLongitude) = _long;\n};\n\n[_GZD, _grid100km, _GZD + _grid100km]\n",
        "functionName": "ace_common_fnc_getMGRSdata"
      },
      {
        "fileName": "fnc_getName.sqf",
        "content": "/*\n * Author: commy2\n * Returns the name of the object. Used to prevent issues with the name command.\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Use effective commander name when used on vehicles (default: false) <BOOL>\n * 2: Get Raw Name (Don't sanatize HTML tags `</>`) (default: false) <BOOL>\n *\n * Return Value:\n * Object Name <STRING>\n *\n * Example:\n * [player, false, true] call ace_common_fnc_getName;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_showEffective\", false], [\"_useRaw\", false]];\n\nprivate _name = \"\";\n\nif (_unit isKindOf \"CAManBase\") then {\n    _name = _unit getVariable [([\"ACE_Name\", \"ACE_NameRaw\"] select _useRaw), localize QUOTE(DOUBLES(STR,GVAR(Unknown)))];\n} else {\n    if (_showEffective) then {\n        _name = [effectiveCommander _unit, false, _useRaw] call FUNC(getName);\n    } else {\n        _name = getText (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"displayName\");\n    };\n};\n\n_name\n",
        "functionName": "ace_common_fnc_getName"
      },
      {
        "fileName": "fnc_getNumberMagazinesIn.sqf",
        "content": "/*\n * Author: Glowbal\n * Count magazines of unit.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Magazine <STRING>\n *\n * Return Value:\n * Magazine amount <NUMBER>\n *\n * Example:\n * [bob, \"magazine\"] call ace_common_fnc_getNumberMagazinesIn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_magazine\"];\n\nprivate _return = 0;\n\nif (_unit isKindOf \"CAManBase\") then {\n    _return = {_x == _magazine} count magazines _unit;\n} else {\n    {\n        _return = _return + ({_x == _magazine} count magazines _x);\n        false\n    } count crew _unit;\n\n    (getMagazineCargo _unit) params [[\"_magNames\", []], [\"_magCount\", []]];\n    {\n        if (_magazine == _x) exitWith {_return = _return + (_magCount select _forEachIndex)};\n    } forEach _magNames;\n};\n\n_return\n",
        "functionName": "ace_common_fnc_getNumberMagazinesIn"
      },
      {
        "fileName": "fnc_getPitchBankYaw.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Returns pitch, bank, yaw for given vehicle in degrees.\n *\n * Arguments:\n * 0: Unit/Vehicle <OBJECT>\n *\n * Return Value:\n * 0: pitch <NUMBER>\n * 1: bank <NUMBER>\n * 2: yaw <NUMBER>\n *\n * Example:\n * [plane] call ace_common_fnc_getPitchBankYaw\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\n(_vehicle call BIS_fnc_getPitchBank) + [getDir _vehicle]\n",
        "functionName": "ace_common_fnc_getPitchBankYaw"
      },
      {
        "fileName": "fnc_getPylonTurret.sqf",
        "content": "/*\n * Author: PabstMirror\n * Finds turret owner of a pylon.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Pylon Index (starting at 0) <NUMBER>\n *\n * Return Value:\n * * Turret index (either [-1] or [0]) <ARRAY>\n *\n * Example:\n * [cursorObject, 0] call ace_common_fnc_getPylonTurret\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_pylonIndex\"];\n\n// See if index is in ace_pylonTurrets setVar on vehicle\nprivate _pylonTurrets = _vehicle getVariable [\"ace_pylonTurrets\", []];\nprivate _returnValue = _pylonTurrets param [_pylonIndex, []];\n\nif (!(_returnValue isEqualTo [])) then {\n    TRACE_1(\"Using ace_pylonTurrets value\",_returnValue);\n} else {\n    // Attempt to determine turret owner based on magazines in the vehicle\n    private _pyMags = getPylonMagazines _vehicle;\n    private _pylonConfigs = configProperties [configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"Components\" >> \"TransportPylonsComponent\" >> \"Pylons\", \"isClass _x\"];\n    if (_pylonIndex >= (count _pyMags)) exitWith {ERROR(\"out of bounds\");};\n    if (_pylonIndex >= (count _pylonConfigs)) exitWith {ERROR(\"out of bounds\");};\n\n    private _targetMag = _pyMags select _pylonIndex;\n    private _inPilot = _targetMag in (_vehicle magazinesTurret [-1]);\n    private _inGunner = _targetMag in (_vehicle magazinesTurret [0]);\n\n    if (_inPilot) then {\n        if (_inGunner) then {\n            TRACE_3(\"ambiguous - in both\",_targetMag,_inPilot,_inGunner);\n        } else {\n            TRACE_3(\"Pilot Mag\",_targetMag,_inPilot,_inGunner);\n            _returnValue = [-1];\n        };\n    } else {\n        if (_inGunner) then {\n            TRACE_3(\"Gunner Mag\",_targetMag,_inPilot,_inGunner);\n            _returnValue = [0];\n        } else {\n            TRACE_3(\"ambiguous - in neither\",_targetMag,_inPilot,_inGunner);\n        };\n    };\n\n    if (_returnValue isEqualTo []) then { // If not sure, just use config value\n        _returnValue = getArray ((_pylonConfigs select _pylonIndex) >> \"turret\");\n        if (_returnValue isEqualTo []) then {\n            _returnValue = [-1];\n        };\n    };\n};\n\nTRACE_3(\"\",_vehicle,_pylonIndex,_returnValue);\n_returnValue\n",
        "functionName": "ace_common_fnc_getPylonTurret"
      },
      {
        "fileName": "fnc_getReflectorsWithSelections.sqf",
        "content": "/*\n * Author: commy2\n *\n * Returns all lighting hitpoints of any vehicle.\n * Note: These are actual selections that are affected by setHit and getHit, not getHitPointDamage or setHitpointDamage.\n * They behave like having an armor value of 0.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * 0: Light Hitpoints <ARRAY>\n * 1: Selections <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getReflectorsWithSelections\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\nprivate _hitpoints = [];\nprivate _selections = [];\n\n// iterate through all parents\nwhile {isClass _config} do {\n    private _class = _config >> \"Reflectors\";\n\n    for \"_i\" from 0 to (count _class - 1) do {\n        private _entry = _class select _i;\n        private _selection = getText (_entry >> \"hitpoint\");\n\n        if (!(_selection in _selections) && {!isNil {_vehicle getHit _selection}}) then {\n            _hitpoints pushBack configName _entry;\n            _selections pushBack _selection;\n        };\n    };\n\n    _config = inheritsFrom _config;\n};\n\n[_hitPoints, _selections]\n",
        "functionName": "ace_common_fnc_getReflectorsWithSelections"
      },
      {
        "fileName": "fnc_getSelectionsWithoutHitPoints.sqf",
        "content": "/*\n * Author: commy2\n *\n * Returns all damageable selections without hitpoints of any vehicle.\n *\n * Arguments:\n * 0: A vehicle, not the classname <OBJECT>\n *\n * Return Value:\n * The selections without hitpoints, i.e. reflectors. <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getSelectionsWithoutHitPoints\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _hitPointsFull = getAllHitPointsDamage _vehicle;\n\nprivate _allSelectionsWithoutHitpoints = [];\n\n{\n    if (_x == \"\") then {\n        _allSelectionsWithoutHitpoints pushBack (_hitPointsFull select 1 select _forEachIndex);\n    };\n} forEach (_hitPointsFull select 0);\n\n_allSelectionsWithoutHitpoints\n",
        "functionName": "ace_common_fnc_getSelectionsWithoutHitPoints"
      },
      {
        "fileName": "fnc_getSettingData.sqf",
        "content": "/*\n * Author: esteldunedain\n * Returns the metadata of a setting if it exists\n *\n * Arguments:\n * 0: Setting Name <STRING>\n *\n * Return Value:\n * Setting Data <ARRAY>\n * 0: Name <STRING>\n * 1: Type Name <STRING>\n * 2: Is Client Settable <BOOL>\n * 3: Localized Name <STRING>\n * 4: Localized Description <STRING>\n * 5: Possible Values <ARRAY>\n * 6: Is Forced <BOOL>\n * 7: Default Value <ANY>\n * 8: Localized Category <STRING>\n *\n * Example:\n * [\"setting\"] call ace_common_fnc_getSettingData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\"];\n\nscopeName \"main\";\n\n{\n    if (_x select 0 == _name) then {\n        _x breakOut \"main\";\n    };\n    false\n} count GVAR(settings);\n\n[]\n",
        "functionName": "ace_common_fnc_getSettingData"
      },
      {
        "fileName": "fnc_getStaminaBarControl.sqf",
        "content": "/*\n * Author: commy2\n * Returns the control of the Stamina Bar from Arma 1.54.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Stamina Bar control <CONTROL>\n *\n * Example:\n * call ace_common_fnc_getStaminaBarControl\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(uiNamespace getVariable [QGVAR(dlgStaminaBar), displayNull]) displayCtrl IDC_STAMINA_BAR\n",
        "functionName": "ace_common_fnc_getStaminaBarControl"
      },
      {
        "fileName": "fnc_getTargetAzimuthAndInclination.sqf",
        "content": "/*\n * Author: commy2\n * Get players viewing direction and slope.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * 0: Azimuth <NUMBER>\n * 1: Inclination <NUMBER>\n *\n * Example:\n * [] call ace_common_fnc_getTargetAzimuthAndInclination\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nprivate _position = ATLToASL positionCameraToWorld [0, 0, 0];\nprivate _direction = ATLToASL positionCameraToWorld [0, 0, 1];\n\nprivate _azimuth = ((_direction select 0) - (_position select 0)) atan2 ((_direction select 1) - (_position select 1));\nprivate _inclination = asin ((_direction select 2) - (_position select 2));\n\nif (_azimuth < 0) then {_azimuth = _azimuth + 360};\n\n[_azimuth, _inclination]\n",
        "functionName": "ace_common_fnc_getTargetAzimuthAndInclination"
      },
      {
        "fileName": "fnc_getTargetDistance.sqf",
        "content": "/*\n * Author: VKing\n * Get the distance to the next object the player is looking at. Used for laser distance measurements.\n *\n * Arguments:\n * 0: Measurement Accuracy (default: 1) <NUMBER>\n * 1: Maximum measure distance (default: 5000) <NUMBER>\n * 2: Minimum measure distance (default: 0) <NUMBER>\n *\n * Return Value:\n * Distance in meters <NUMBER>\n *\n * Example:\n * [5,20000,56] call ace_common_fnc_getTargetDistance\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_accuracy\",1], [\"_maxDistance\",5000], [\"_minDistance\",0]];\n\nprivate _camPosition = AGLToASL positionCameraToWorld [0, 0, 0];\nprivate _aimLinePos = AGLToASL positionCameraToWorld [0, 0, _maxDistance];\n\nprivate _LIS = lineIntersectsSurfaces [_camPosition, _aimLinePos];\n\nprivate _distance = 0;\nif (count _LIS > 0) then {\n    _distance = _camPosition vectorDistance ((_LIS select 0) select 0);\n} else {\n    _distance = _maxDistance;\n};\n\n_distance = _distance max _minDistance;\n\n_accuracy = _accuracy max 1;\n_distance = (round (_distance/_accuracy)) * _accuracy;\n\n_distance\n",
        "functionName": "ace_common_fnc_getTargetDistance"
      },
      {
        "fileName": "fnc_getTargetObject.sqf",
        "content": "/*\n * Author: commy2\n * Get the nearest object the player is looking at. Used for laser designator instead of cursorTarget.\n *\n * Arguments:\n * 0: Maximum search distance <NUMBER>\n *\n * Return Value:\n * Nearest object in line of sight, objNull if none are found <OBJECT>\n *\n * Example:\n * [56] call ace_common_fnc_getTargetObject\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_maxDistance\"];\n\nprivate _position = ATLToASL positionCameraToWorld [0, 0, 0];\n_position set [2, (_position select 2) - (getTerrainHeightASL _position min 0)];\n\nprivate _laser = ATLToASL positionCameraToWorld [0, 0, _maxDistance];\n_laser set [2, (_laser select 2) - (getTerrainHeightASL _laser min 0)];\n\nprivate _intersects = lineIntersectsObjs [_position, _laser, objNull, objNull, true, 2];\n\nif (_intersects isEqualTo []) exitWith {objNull};\n\n_intersects select 0 // return\n",
        "functionName": "ace_common_fnc_getTargetObject"
      },
      {
        "fileName": "fnc_getTurnedOnLights.sqf",
        "content": "/*\n * Author: commy2\n * Returns all turned on lights of any vehicle or streetlamp.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * All burning lights <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getTurnedOnLights\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nif (!isLightOn _vehicle) exitWith {[]};\n\nprivate _reflectorsWithSelections = [[_vehicle], FUNC(getReflectorsWithSelections), uiNamespace, format [QEGVAR(cache,%1_%2), QUOTE(DFUNC(getReflectorsWithSelections)), typeOf _vehicle], 1E11] call FUNC(cachedCall);\n//_reflectorsWithSelections = [_vehicle] call FUNC(getReflectorsWithSelections);\n\n_reflectorsWithSelections params [\"_lights\", \"_hitpoints\"];\n\nprivate _turnedOnLights = [];\n\n{\n    if (_vehicle getHit _x <= 0.9) then {\n        _turnedOnLights pushBack (_lights select _forEachIndex);\n    };\n} forEach _hitpoints;\n\n_turnedOnLights\n",
        "functionName": "ace_common_fnc_getTurnedOnLights"
      },
      {
        "fileName": "fnc_getTurretCommander.sqf",
        "content": "/*\n * Author: commy2\n * Get the turret index of a vehicles commander.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Vehicle commander turrent indecies <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getTurretCommander\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\nfullCrew [_vehicle, \"commander\", true] apply {_x select 3} param [0, []] // return\n",
        "functionName": "ace_common_fnc_getTurretCommander"
      },
      {
        "fileName": "fnc_getTurretConfigPath.sqf",
        "content": "/*\n * Author: commy2\n * Get the config path of a vehicles turret.\n *\n * Arguments:\n * 0: Vehicle Config <CONFIG>\n * 1: Turret indecies <ARRAY>\n *\n * Return Value:\n * Turret config <CONFIG>\n *\n * Example:\n * [CfgVehicle, [Array]] call ace_common_fnc_getTurretConfigPath\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\", \"_turretIndex\"];\n\nfor \"_index\" from 0 to (count _turretIndex - 1) do {\n    _config = _config >> \"Turrets\";\n\n    private _offset = 0;\n    private _config2 = _config select 0;\n    private _foundClasses = 0;\n\n    for \"_a\" from 0 to (count _config - 1) do {\n        if (isClass _config2) then {\n            _foundClasses = _foundClasses + 1;\n        } else {\n            _offset = _offset + 1;\n        };\n        _config2 = _config select (_turretIndex select _index) + _offset;\n\n        if (_foundClasses == _turretIndex select _index) exitWith {};\n    };\n\n    _config = _config2;\n};\n\n_config\n",
        "functionName": "ace_common_fnc_getTurretConfigPath"
      },
      {
        "fileName": "fnc_getTurretCopilot.sqf",
        "content": "/*\n * Author: commy2\n * Get the turret index of a vehicles copilot.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Vehicle Copilot Turret indecies <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getTurretCopilot\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\nfullCrew [_vehicle, \"turret\", true] apply {_x select 3} select {\n    getNumber ([_vehicle, _x] call CBA_fnc_getTurret >> \"isCopilot\") == 1\n} param [0, []] // return\n",
        "functionName": "ace_common_fnc_getTurretCopilot"
      },
      {
        "fileName": "fnc_getTurretDirection.sqf",
        "content": "/*\n * Author: jaynus\n * Get the absolute turret direction for FOV/PIP turret.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret Position <ARRAY>\n *\n * Return Value:\n * 0: Position ASL <ARRAY>\n * 1: Direction <ARRAY>\n *\n * Example:\n * [car, [5,6,5]] call ace_common_fnc_getTurretDirection\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_position\"];\n\nprivate _turret = [_vehicle, _position] call CBA_fnc_getTurret;\n\nprivate _pov = getText (_turret >> \"memoryPointGunnerOptics\");\nprivate _gunBeg = getText (_turret >> \"gunBeg\");\nprivate _gunEnd = getText (_turret >> \"gunEnd\");\n\nTRACE_3(\"\", _pov, _gunBeg, _gunEnd);\n\n// Pull the PIP pov or barrel direction, depending on how the model is set up\nprivate _povPos = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition _pov)); //@todo AGLToASL ?\nprivate _povDir = [0,0,0];\n\nif (_pov == \"pip0_pos\") then {\n    private _pipDir = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition \"pip0_dir\"));\n\n    _povDir = _pipDir vectorDiff _povPos;\n} else {\n    private _gunBeginPos = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition _gunBeg));\n    private _gunEndPos = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition _gunEnd));\n\n    _povDir = _gunBeginPos vectorDiff _gunEndPos;\n};\n_povDir = vectorNormalized _povDir;\n[_povPos, _povDir]\n",
        "functionName": "ace_common_fnc_getTurretDirection"
      },
      {
        "fileName": "fnc_getTurretGunner.sqf",
        "content": "/*\n * Author: commy2\n * Get the turret index of a vehicles gunner.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Vehicle Gunner Turret indecies <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getTurretGunner\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\nfullCrew [_vehicle, \"gunner\", true] apply {_x select 3} param [0, []] // return\n",
        "functionName": "ace_common_fnc_getTurretGunner"
      },
      {
        "fileName": "fnc_getTurretIndex.sqf",
        "content": "/*\n * Author: commy2\n * Get the turret index of a units current turret.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Turret Index <ARRAY>\n *\n * Example:\n * [ace_player] call ace_common_fnc_getTurretIndex\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]]];\n\nprivate _vehicle = vehicle _unit;\nif (_unit == _vehicle) exitWith {[]};\n\nscopeName \"main\"; \n\n{\n    if (_unit == (_vehicle turretUnit _x)) then {_x breakOut \"main\"};\n    nil\n} count allTurrets [_vehicle, true];\n\n[]\n",
        "functionName": "ace_common_fnc_getTurretIndex"
      },
      {
        "fileName": "fnc_getTurretsFFV.sqf",
        "content": "/*\n * Author: commy2\n * Get the turret indices of ffv turrets.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Vehicle FFV Turret indecies <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getTurretsFFV\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\nfullCrew [_vehicle, \"turret\", true] select {_x select 4} apply {_x select 3} // return\n",
        "functionName": "ace_common_fnc_getTurretsFFV"
      },
      {
        "fileName": "fnc_getTurretsOther.sqf",
        "content": "/*\n * Author: commy2\n * Get the turret indices of other turrets (not gunner, commander, copilot or ffv).\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Vehicle Other Turret indecies <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getTurretsOther\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\nfullCrew [_vehicle, \"turret\", true] select {!(_x select 4)} apply {_x select 3} select {\n    getNumber ([_vehicle, _x] call CBA_fnc_getTurret >> \"isCopilot\") != 1\n} // return\n",
        "functionName": "ace_common_fnc_getTurretsOther"
      },
      {
        "fileName": "fnc_getUavControlPosition.sqf",
        "content": "/*\n * Author: PabstMirror\n * Returns the seat position of a UAV that the unit is activly controling.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Position <STRING>\n *   \"\" = not connected to anything or activly controling\n *   \"DRIVER\"\n *   \"GUNNER\"\n *\n * Example:\n * [ACE_Player] call ace_common_fnc_getUavControlPosition\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]]];\n\nprivate _uav = getConnectedUAV _unit;\n\nif (isNull _uav) exitWith {\"\"};\n\nprivate _positionArray = UAVControl _uav;\nprivate _playerIndex = _positionArray find _unit;\n\nif (_playerIndex == -1) exitWith {\"\"};\n\n_positionArray select (_playerIndex + 1)\n",
        "functionName": "ace_common_fnc_getUavControlPosition"
      },
      {
        "fileName": "fnc_getVehicleCargo.sqf",
        "content": "/*\n * Author: commy2\n * Get the vehicle cargo positions. Codrivers and ffv positions are not listed.\n *\n * Arguments:\n * 0: Vehicle type <STRING>\n *\n * Return Value:\n * Vehicle cargo positions <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getVehicleCargo\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\nprivate _config = configFile >> \"CfgVehicles\" >> _vehicle;\n\nprivate _cargo = [];\nprivate _codrivers = getArray (_config >> \"cargoIsCoDriver\");\n\nfor \"_index\" from 0 to (getNumber (_config >> \"transportSoldier\") - 1) do {\n    if !(_index in _codrivers && {_vehicle isKindOf \"Car\"} && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\n        _cargo pushBack _index;\n    };\n};\n\n_cargo\n",
        "functionName": "ace_common_fnc_getVehicleCargo"
      },
      {
        "fileName": "fnc_getVehicleCodriver.sqf",
        "content": "/*\n * Author: commy2\n * Get the vehicle codriver positions.\n *\n * Arguments:\n * 0: Vehicle type <STRING>\n *\n * Return Value:\n * Vehicle codriver positions <ARRAY>\n *\n * Example:\n * [\"car\"] call ace_common_fnc_getVehicleCodriver\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\nprivate _config = configFile >> \"CfgVehicles\" >> _vehicle;\n\nprivate _cargo = [];\nprivate _codrivers = getArray (_config >> \"cargoIsCoDriver\");\n\nfor \"_index\" from 0 to (getNumber (_config >> \"transportSoldier\") - 1) do {\n    if (_index in _codrivers && {_vehicle isKindOf \"Car\"} && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\n        _cargo pushBack _index;\n    };\n};\n\n_cargo\n",
        "functionName": "ace_common_fnc_getVehicleCodriver"
      },
      {
        "fileName": "fnc_getVehicleCrew.sqf",
        "content": "/*\n * Author: commy2\n * Returns array of crew member objects.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Slot types filter (default: [\"driver\", \"commander\", \"gunner\", \"turret\", \"cargo\", \"ffv\"]) <ARRAY>\n *\n * Return Value:\n * Crew <ARRAY>\n *\n * Example:\n * [car, [\"driver\"]] call ace_common_fnc_getVehicleCrew\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", [\"_types\", [\"driver\", \"commander\", \"gunner\", \"turret\", \"cargo\", \"ffv\"]]];\n\nprivate _crew = [];\n\n// iterate through all crew members\n{\n    // this unit is in a ffv position. check if we search for ffv.\n    if (_x select 4) then {\n        if (\"ffv\" in _types) then {\n            _crew pushBack (_x select 0);\n        };\n    } else {\n        // otherwise check if we search for that type. toLower, because fullCrew returns \"driver\" vs. \"Turret\".\n        if (toLower (_x select 1) in _types) then {\n            _crew pushBack (_x select 0);\n        };\n    };\n    false\n} count fullCrew _vehicle;\n\n_crew\n",
        "functionName": "ace_common_fnc_getVehicleCrew"
      },
      {
        "fileName": "fnc_getVehicleIcon.sqf",
        "content": "/*\n * Author: AACO\n * Function used to get the vehicle icon for provided object (cached for repeat use)\n *\n * Arguments:\n * 0: Object to get icon of <OBJECT/STRING>\n *\n * Return Value:\n * Icon of vehicle <STRING>\n *\n * Examples:\n * [\"B_Soldier_F\"] call ace_common_fnc_getVehicleIcon;\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n#define DEFAULT_TEXTURE \"\\A3\\ui_f\\data\\Map\\VehicleIcons\\iconVehicle_ca.paa\"\n\nparams [[\"_object\", objNull, [objNull, \"\"]]];\n\nif ((_object isEqualType objNull && {isNull _object}) || {_object isEqualType \"\" && {_object == \"\"}}) exitWith { DEFAULT_TEXTURE };\n\nISNILS(GVAR(vehicleIconCache),call CBA_fnc_createNamespace);\n\nprivate _objectType = if (_object isEqualType objNull) then {\n    typeOf _object\n} else {\n    _object\n};\nprivate _cachedValue = GVAR(vehicleIconCache) getVariable _objectType;\n\nif (isNil \"_cachedValue\") then {\n    private _vehicleValue = getText (configfile >> \"CfgVehicles\" >> _objectType >> \"icon\");\n    private _vehicleIconValue = getText (configfile >> \"CfgVehicleIcons\" >> _vehicleValue);\n\n    if (_vehicleIconValue == \"\") then {\n        if (_vehicleValue != \"\" && {((toLower _vehicleValue) find \".paa\") > -1}) then {\n            _cachedValue = _vehicleValue;\n        } else {\n            _cachedValue = DEFAULT_TEXTURE;\n        };\n    } else {\n        _cachedValue = _vehicleIconValue;\n    };\n\n    GVAR(vehicleIconCache) setVariable [_objectType, _cachedValue];\n};\n\n_cachedValue\n",
        "functionName": "ace_common_fnc_getVehicleIcon"
      },
      {
        "fileName": "fnc_getVehicleUAVCrew.sqf",
        "content": "/*\n * Author: commy2\n * Returns array of uav dummy ais.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * UAV Dummy Crew <ARRAY>\n *\n * Example:\n * [car] call ace_common_fnc_getVehicleUAVCrew\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_vehicle\", objNull, [objNull]]];\n\ncrew _vehicle select {getText (configFile >> \"CfgVehicles\" >> typeOf _x >> \"simulation\") == \"UAVPilot\"} // return\n",
        "functionName": "ace_common_fnc_getVehicleUAVCrew"
      },
      {
        "fileName": "fnc_getVersion.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the version number of the current ACE build.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * ACE Version <STRING>\n *\n * Example:\n * [] call ace_common_fnc_getVersion\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\ngetText (configFile >> \"CfgPatches\" >> \"ACE_main\" >> \"version\") // return\n",
        "functionName": "ace_common_fnc_getVersion"
      },
      {
        "fileName": "fnc_getWeaponAzimuthAndInclination.sqf",
        "content": "/*\n * Author: commy2\n * Get local players weapon direction and slope.\n *\n * Arguments:\n * 0: Weapon name <STRING>\n *\n * Return Value:\n * 0: Azimuth <NUMBER>\n * 1: Inclination <NUMBER>\n *\n * Example:\n * [\"gun\"] call ace_common_fnc_getWeaponAzimuthAndInclination\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_weapon\"];\n\nprivate _direction = ACE_player weaponDirection _weapon;\n\nprivate _azimuth = (_direction select 0) atan2 (_direction select 1);\nprivate _inclination = asin (_direction select 2);\n\nif (_azimuth < 0) then {_azimuth = _azimuth + 360};\n\n[_azimuth, _inclination]\n",
        "functionName": "ace_common_fnc_getWeaponAzimuthAndInclination"
      },
      {
        "fileName": "fnc_getWeaponIndex.sqf",
        "content": "/*\n * Author: commy2\n * Get the index of the weapon.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * Weapon index <NUMBER>\n *   0 = primary\n *   1 = secondary\n *   2 = handgun\n *  -1 = other\n *\n * Example:\n * [bob, \"gun\"] call ace_common_fnc_getWeaponIndex\n *\n * Public: Yes\n */\n #include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\n\nif (_weapon == \"\") exitWith {-1};\n\n[\n    primaryWeapon _unit,\n    secondaryWeapon _unit,\n    handgunWeapon _unit\n] find _weapon // return\n",
        "functionName": "ace_common_fnc_getWeaponIndex"
      },
      {
        "fileName": "fnc_getWeaponModes.sqf",
        "content": "/*\n * Author: commy2\n * Get the available firing modes of a weapon. Will ignore the AI helper modes.\n *\n * Arguments:\n * 0: Weapon <STRING>\n *\n * Return Value:\n * Firing Modes <ARRAY>\n *\n * Example:\n * [\"gun\"] call ace_common_fnc_getWeaponModes\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_weapon\", \"\", [\"\"]]];\n\nprivate _config = configFile >> \"CfgWeapons\" >> _weapon;\n\nprivate _modes = [];\n\n{\n    if (getNumber (_config >> _x >> \"showToPlayer\") == 1) then {\n        _modes pushBack _x;\n    };\n\n    if (_x == \"this\") then {\n        _modes pushBack _weapon;\n    };\n    false\n} count getArray (_config >> \"modes\");\n\n_modes\n",
        "functionName": "ace_common_fnc_getWeaponModes"
      },
      {
        "fileName": "fnc_getWeaponMuzzles.sqf",
        "content": "/*\n * Author: commy2\n * Get the muzzles of a weapon.\n *\n * Arguments:\n * 0: Weapon <STRING>\n *\n * Return Value:\n * All weapon muzzles <ARRAY>\n *\n * Example:\n * [\"gun\"] call ace_common_fnc_getWeaponMuzzles\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_weapon\", \"\", [\"\"]]];\n\nprivate _muzzles = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"muzzles\");\n\n{\n    if (_x == \"this\") then {\n        _muzzles set [_forEachIndex, configName (configFile >> \"CfgWeapons\" >> _weapon)];\n    };\n} forEach _muzzles;\n\n_muzzles\n",
        "functionName": "ace_common_fnc_getWeaponMuzzles"
      },
      {
        "fileName": "fnc_getWeaponState.sqf",
        "content": "/*\n * Author: commy2\n * Return current state of the weapon. Attachments and magazines with ammo.\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: weapon (optional, default: units current weapon) <STRING>\n *\n * Return Value:\n * 0: Attachements <ARRAY>\n * 1: Muzzles <ARRAY>\n * 2: Magazines <ARRAY>\n * 3: Ammo <ARRAY>\n *\n * Example:\n * [bob, \"gun\"] call ace_common_fnc_getWeaponState\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_weapon\", nil, [\"\"]]];\n\nif (isNil \"_weapon\") then {\n    _weapon = currentWeapon _unit;\n};\n\nprivate _attachments = [_unit weaponAccessories _weapon] param [0, [\"\",\"\",\"\",\"\"]];\n\nprivate _muzzles = _weapon call FUNC(getWeaponMuzzles);\n\n// get loaded magazines and ammo\nprivate _magazines = _muzzles apply {\"\"};\nprivate _ammo = _muzzles apply {0};\n\n{\n    if (_x select 2) then {\n        private _index = _muzzles find (_x select 4);\n\n        if (_index != -1) then {\n            _magazines set [_index, _x select 0];\n            _ammo set [_index, _x select 1];\n        };\n    };\n    false\n} count magazinesAmmoFull _unit;\n\n[_attachments, _muzzles, _magazines, _ammo];\n",
        "functionName": "ace_common_fnc_getWeaponState"
      },
      {
        "fileName": "fnc_getWeaponType.sqf",
        "content": "/*\n * Author: commy2\n * Check what kind of weapon the given class name is.\n *\n * Arguments:\n * 0: Weapons <STRING>\n *\n * Return Value:\n * Slot index <NUMBER>\n *   1 = primary\n *   2 = secondary\n *   3 = handgun\n *  -1 = other\n *\n * Example:\n * [\"gun\"] call ace_common_fnc_getWeaponType\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_weapon\"];\n\nprivate _type = [getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"type\")] call FUNC(binarizeNumber);\n\nprivate _index = 0;\n\nwhile {!(_type select _index) && {_index < 16}} do {\n    _index = _index + 1;\n};\n\n[-1, 1, 3, 2] select (([0, 1, 2] find _index) + 1) // return\n",
        "functionName": "ace_common_fnc_getWeaponType"
      },
      {
        "fileName": "fnc_getWindDirection.sqf",
        "content": "/*\n * Author: commy2\n * Get the compass direction the wind is blowing from.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Wind cardinal direction <STRING>\n *\n * Example:\n * [] call ace_common_fnc_getWindDirection\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nlocalize ([\n    LSTRING(S),\n    LSTRING(SSW),\n    LSTRING(SW),\n    LSTRING(WSW),\n    LSTRING(W),\n    LSTRING(WNW),\n    LSTRING(NW),\n    LSTRING(NNW),\n    LSTRING(N),\n    LSTRING(NNE),\n    LSTRING(NE),\n    LSTRING(ENE),\n    LSTRING(E),\n    LSTRING(ESE),\n    LSTRING(SE),\n    LSTRING(SSE),\n    LSTRING(S)\n] select (round (windDir / 360 * 16))) // return\n",
        "functionName": "ace_common_fnc_getWindDirection"
      },
      {
        "fileName": "fnc_getZoom.sqf",
        "content": "/*\n * Author: commy2\n * Returns a value depending on current zoom level.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Zoom <NUMBER>\n *\n * Example:\n * [] call ace_common_fnc_getZoom\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {0};\n\n(0.5 - ((worldToScreen positionCameraToWorld [0, 1, 1]) select 1)) * (getResolution select 5)\n",
        "functionName": "ace_common_fnc_getZoom"
      },
      {
        "fileName": "fnc_goKneeling.sqf",
        "content": "/*\n * Author: commy2\n * Move unit to kneeling position (only if not yet prone and not underwater).\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_goKneeling\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// Animation changes even inside vehicle post-1.60\nif (stance _unit == \"PRONE\" || {vehicle _unit != _unit} || {_unit call EFUNC(common,isSwimming)}) exitWith {};\n\n[\n    _unit,\n    [\"AmovPknlMstpSnonWnonDnon\", \"AmovPknlMstpSlowWrflDnon\", \"AmovPknlMstpSrasWlnrDnon\", \"AmovPknlMstpSlowWpstDnon\", \"AmovPknlMstpSoptWbinDnon\"] select (([\"\", primaryWeapon _unit, secondaryWeapon _unit, handgunWeapon _unit, binocular _unit] find currentWeapon _unit) max 0)\n] call FUNC(doAnimation);\n",
        "functionName": "ace_common_fnc_goKneeling"
      },
      {
        "fileName": "fnc_hadamardProduct.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Returns the Hadamard Product of two vectors.\n * (x hadamard y) = [x1*y1, x2*y2, x3*y3]\n *\n * Arguments:\n * 0: Vector 1 <ARRAY>\n * 1: Vector 2 <ARRAY>\n *\n * Return Value:\n * Hadamard Product <ARRAY>\n *\n * Example:\n * [[0,0,0], [1,1,1]] call ace_common_fnc_hadamardProduct\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vector1\", \"_vector2\"];\n\nprivate _newVector = [];\n\nfor \"_i\" from 0 to ((count _vector1 min count _vector2) - 1) do {\n    _newVector pushBack ((_vector1 select _i) * (_vector2 select _i));\n};\n\n_newVector\n",
        "functionName": "ace_common_fnc_hadamardProduct"
      },
      {
        "fileName": "fnc_handleEngine.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Blocks turning on the vehicles engine if set by the status effect handler.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Engine state <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"running\"] call ace_common_fnc_handleEngine\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_vehicle\", \"_engineOn\"];\n\nif (local _vehicle && {_engineOn} && {_vehicle getVariable [QGVAR(blockEngine), false]}) then {\n    _vehicle engineOn false;\n};\n",
        "functionName": "ace_common_fnc_handleEngine"
      },
      {
        "fileName": "fnc_handleModifierKey.sqf",
        "content": "/*\n * Author: commy2\n * Handles key down event for modifier key.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_handleModifierKey\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (_this select 3) then {ACE_modifier = 1};\n\nfalse\n",
        "functionName": "ace_common_fnc_handleModifierKey"
      },
      {
        "fileName": "fnc_handleModifierKeyUp.sqf",
        "content": "/*\n * Author: commy2\n * Handles key up event for modifier key.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_common_fnc_handleModifierKeyUp\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nACE_modifier = 0;\n\nfalse\n",
        "functionName": "ace_common_fnc_handleModifierKeyUp"
      },
      {
        "fileName": "fnc_hasHatch.sqf",
        "content": "/*\n * Author: commy2\n * Check if unit is in a vehicle position where it can turn in or out.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Unit has a hatch? <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc_hasHatch\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]]];\n\nprivate _vehicle = vehicle _unit;\n\nif (_unit == _vehicle) exitWith {false};\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\nif (getNumber (_config >> \"hideProxyInCombat\") != 1) exitWith {false};\n\nif (_unit == driver _vehicle) exitWith {\n    getNumber (_config >> \"forceHideDriver\") == 0; // return\n};\n\nprivate _turret = [_unit] call FUNC(getTurretIndex);\n\nif (_turret isEqualTo []) exitWith {false};\n\nprivate _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\n\ngetNumber (_turretConfig >> \"forceHideGunner\") == 0; // return\n",
        "functionName": "ace_common_fnc_hasHatch"
      },
      {
        "fileName": "fnc_hasItem.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if unit has item. Note: case-sensitive.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Item Classname <STRING>\n *\n * Return Value:\n * Unit has Item <BOOL>\n *\n * Example:\n * [bob, \"item\"] call ace_common_fnc_hasItem\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_item\", \"\", [\"\"]]];\n\n_item in items _unit\n",
        "functionName": "ace_common_fnc_hasItem"
      },
      {
        "fileName": "fnc_hasMagazine.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if given unit has a magazine of given classname\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Magazine Classname <STRING>\n *\n * Return Value:\n * has Magazine <BOOL>\n *\n * Example:\n * [bob, \"magazine\"] call ace_common_fnc_hasMagazine\n *\n * Public: yes\n *\n * Note: Case sensitive\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_magazine\", \"\", [\"\"]]];\n\n_magazine in magazines _unit // return\n",
        "functionName": "ace_common_fnc_hasMagazine"
      },
      {
        "fileName": "fnc_headBugFix.sqf",
        "content": "/*\n * Author: rocko\n * Fixes animation issues that may get you stuck\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_common_fnc_headBugFix\n *\n * Public: Yes\n *\n * Note: Has to be spawned not called\n */\n#include \"script_component.hpp\"\n\nprivate _unit = ACE_player;\nprivate _anim = animationState _unit;\n\n[QGVAR(headbugFixUsed), [profileName, _anim]] call CBA_fnc_serverEvent;\n[QGVAR(headbugFixUsed), [profileName, _anim]] call CBA_fnc_localEvent;\n\nif (_unit != vehicle _unit  || {!([_unit, objNull, [\"isNotSitting\"]] call FUNC(canInteractWith))}) exitWith {false};\n\nprivate _pos = getPosATL _unit;\nprivate _dir = getDir _unit;\n\ntitleCut [\"\", \"BLACK\"];\n[_unit, \"headBugFix\"] call FUNC(hideUnit);\n\n// create invisible headbug fix vehicle\nprivate _dummy = createVehicle [\"ACE_Headbug_Fix\", _pos, [], 0, \"NONE\"];\n_dummy setDir _dir;\n_unit moveInAny _dummy;\nsleep 0.1; // @todo\n\nunassignVehicle _unit;\n_unit action [\"Eject\", vehicle _unit];\n_unit setDir _dir;\n_unit setPosATL _pos;\nsleep 1.0;\n\ndeleteVehicle _dummy;\n\n[_unit, \"headBugFix\"] call FUNC(unhideUnit);\ntitleCut [\"\", \"PLAIN\"];\ntrue\n",
        "functionName": "ace_common_fnc_headBugFix"
      },
      {
        "fileName": "fnc_hideUnit.sqf",
        "content": "/*\n * Author: SilentSpike (based on muteUnit)\n * Globally hides a unit. This allows the handling of more than one reason to hide an object globally.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Reason to hide the unit <STRING>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [ACE_Player, \"SpectatorMode\"] call ace_common_fnc_hideUnit\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_reason\"];\n\nif (isNull _unit) exitWith {};\n\nprivate _setHiddenReasons = _unit getVariable [QGVAR(setHiddenReasons), []];\n\nif !(_reason in _setHiddenReasons) then {\n    _setHiddenReasons pushBack _reason;\n    _unit setVariable [QGVAR(setHiddenReasons), _setHiddenReasons, true];\n};\n\nif !(isObjectHidden _unit) then {\n    [QGVAR(hideObjectGlobal), [_unit, true]] call CBA_fnc_serverEvent;\n};\n",
        "functionName": "ace_common_fnc_hideUnit"
      },
      {
        "fileName": "fnc_interpolateFromArray.sqf",
        "content": "/*\n * Author: commy2\n * Interpolates between two set points in a curve.\n *\n * Arguments:\n * 0: List of numbers to interpolate from <ARRAY>\n * 1: Value / index <NUMBER>\n *\n * Return Value:\n * Interpolation result <NUMBER>\n *\n * Example:\n * [[0,1], 5] call ace_common_fnc_interpolateFromArray\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_array\", \"_value\"];\n\nprivate _min = _array select floor _value;\nprivate _max = _array select ceil _value;\n\nlinearConversion [0, 1, _value % 1, _min, _max] // return\n",
        "functionName": "ace_common_fnc_interpolateFromArray"
      },
      {
        "fileName": "fnc_inTransitionAnim.sqf",
        "content": "/*\n * Author: commy2\n * Check if given unit is in a transitional animation\n *\n * Arguments:\n * 0: A soldier <OBJECT>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc_inTransitionAnim\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\ngetNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> animationState (_this select 0) >> \"looped\") == 0 // return\n",
        "functionName": "ace_common_fnc_inTransitionAnim"
      },
      {
        "fileName": "fnc_isAwake.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if unit is awake. Will be false when death or unit is unconscious.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * if unit is awake <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc_isAwake\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n!(_unit getVariable [\"ACE_isUnconscious\", false]) && alive _unit && !(_unit getVariable [\"ACE_isDead\", false]) // return\n",
        "functionName": "ace_common_fnc_isAwake"
      },
      {
        "fileName": "fnc_isEngineer.sqf",
        "content": "/*\n * Author: marc_book, edited by commy2\n * Checks if a unit is an engineer.\n *\n * Arguments:\n * 0: unit to be checked <OBJECT>\n *\n * Return Value:\n * is the unit an engineer <BOOL>\n *\n * Example:\n * [player] call ace_common_fnc_isEngineer\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _isEngineer = _unit getVariable [\"ACE_isEngineer\", _unit getUnitTrait \"engineer\"];\n//Handle ace_repair modules setting this to a number\nif (_isEngineer isEqualType 0) then {_isEngineer = _isEngineer > 0};\n\n_isEngineer\n",
        "functionName": "ace_common_fnc_isEngineer"
      },
      {
        "fileName": "fnc_isEOD.sqf",
        "content": "/*\n * Author: Garth de Wet (LH)\n * Checks whether the passed unit is an explosive specialist.\n * Either through config entry: \"canDeactivateMines\"\n * or\n * unit setVariable [\"ACE_isEOD\", true]\n *\n * Arguments:\n * 0: Unit to check if is a specialist <OBJECT>\n *\n * Return Value:\n * is the unit an EOD <BOOL>\n *\n * Example:\n * isSpecialist = [player] call FUNC(isEOD);\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n_unit getVariable [\"ACE_isEOD\", _unit getUnitTrait \"explosiveSpecialist\"] // return\n",
        "functionName": "ace_common_fnc_isEOD"
      },
      {
        "fileName": "fnc_isFeatureCameraActive.sqf",
        "content": "/*\n * Author: Sniperwolf572\n * Checks if one of the following common feature cameras is active:\n *\n * - Curator\n * - ACE Spectator\n * - Arsenal camera (BIS_fnc_arsenal)\n * - Establishing shot (BIS_fnc_establishingShot)\n * - Splendid camera (BIS_fnc_camera)\n * - Animation viewer (BIS_fnc_animViewer)\n * - Classic camera (BIS_fnc_cameraOld)\n *\n * Arguments:\n * 0: None <NIL>\n *\n * Return Value:\n * A feature camera is active <BOOL>\n *\n * Example:\n * [] call ace_common_fnc_isFeatureCameraActive\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n!(\n    isNull curatorCamera && // Curator\n    {!(GETMVAR(EGVAR(spectator,isSet),false))} && // ACE Spectator\n    {isNull (GETUVAR(BIS_fnc_arsenal_cam, objNull))} && // Arsenal camera\n    {isNull (GETMVAR(BIS_fnc_establishingShot_fakeUAV, objNull))} && // Establishing shot camera\n    {isNull (GETMVAR(BIS_fnc_camera_cam, objNull))} && // Splendid camera\n    {isNull (GETUVAR(BIS_fnc_animViewer_cam, objNull))} && // Animation viewer camera\n    {isNull (GETMVAR(BIS_DEBUG_CAM, objNull))} // Classic camera\n) // return\n",
        "functionName": "ace_common_fnc_isFeatureCameraActive"
      },
      {
        "fileName": "fnc_isInBuilding.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit is in a building. Will return true if the unit is sitting in a bush.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Is the unit in a building? <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc_isInBuilding\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n#define CHECK_DISTANCE 10\n\nparams [[\"_unit\", objNull, [objNull]]];\n\nprivate _position = eyePos _unit;\n\nprivate _intersections = 0;\n\nif (lineIntersects [_position, _position vectorAdd [0, 0, +CHECK_DISTANCE]]) then {\n  _intersections = _intersections + 1;\n};\n\nif (lineIntersects [_position, _position vectorAdd [+CHECK_DISTANCE, 0, 0]]) then {\n  _intersections = _intersections + 1;\n};\n\nif (lineIntersects [_position, _position vectorAdd [-CHECK_DISTANCE, 0, 0]]) then {\n  _intersections = _intersections + 1;\n};\n\nif (lineIntersects [_position, _position vectorAdd [0, +CHECK_DISTANCE, 0]]) then {\n  _intersections = _intersections + 1;\n};\n\nif (lineIntersects [_position, _position vectorAdd [0, -CHECK_DISTANCE, 0]]) then {\n  _intersections = _intersections + 1;\n};\n\n_intersections > 3\n",
        "functionName": "ace_common_fnc_isInBuilding"
      },
      {
        "fileName": "fnc_isMedic.sqf",
        "content": "/*\n * Author: SilentSpike\n * Check if a unit is a medic\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * ReturnValue:\n * Unit is medic <BOOL>\n *\n * Example:\n * [player] call ace_common_fnc_isMedic\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _isMedic = _unit getVariable [QEGVAR(medical,medicClass), getNumber (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"attendant\")];\n\n_isMedic > 0\n",
        "functionName": "ace_common_fnc_isMedic"
      },
      {
        "fileName": "fnc_isModLoaded.sqf",
        "content": "/*\n * Author: Glowbal\n * Check in cfgPatches if modification is loaded\n *\n * Arguments:\n * 0: Mod Name or Classname of the mod in cfgPatches <STRING>\n *\n * Return Value:\n * if modification is loaded <BOOL>\n *\n * Example:\n * [\"class\"] call ace_common_fnc_isModLoaded\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_modName\", \"\", [\"\"]]];\n\nisClass (configFile >> \"CfgPatches\" >> _modName) // return\n",
        "functionName": "ace_common_fnc_isModLoaded"
      },
      {
        "fileName": "fnc_isPlayer.sqf",
        "content": "/*\n * Author: bux578, commy2, akalegman\n * Checks if a unit is a player / curator controlled unit.\n * This now includes both local and non-local remote controlled zeus units. (Remotes from another zeus machine)\n *\n * Arguments:\n * 0: unit to be checked <OBJECT>\n * 1: exclude remote controlled units <BOOL>\n *\n * Return Value:\n * Is unit a player? <BOOL>\n *\n * Example:\n * [cursorTarget, false] call ace_common_fnc_isPlayer;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_excludeRemoteControlled\", false]];\n\n(isPlayer _unit) || {(!_excludeRemoteControlled) && {!isNull (_unit getVariable [\"bis_fnc_moduleRemoteControl_owner\", objNull])}}\n",
        "functionName": "ace_common_fnc_isPlayer"
      },
      {
        "fileName": "fnc_isSwimming.sqf",
        "content": "/*\n * Author: das attorney, Jonpas\n * Check if unit is swimming (surface swimming or diving).\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * If unit is swimming <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc_isSwimming\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]]];\n\n((animationState _unit) select [1, 3]) in [\"bdv\",\"bsw\",\"dve\",\"sdv\",\"ssw\",\"swm\"]\n",
        "functionName": "ace_common_fnc_isSwimming"
      },
      {
        "fileName": "fnc_isUnderwater.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if unit's head is underwater\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * If unit's head is underwater <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc_isUnderwater\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nACE_DEPRECATED(QFUNC(isUnderwater),\"3.13.0\",\"underwater OBJECT\");\n\nparams [[\"_unit\", objNull, [objNull]]];\n\nprivate _return = false;\n\nif (surfaceIsWater getPosASL _unit) then {\n    private _pos = _unit modelToWorldVisual (_unit selectionPosition \"head\");\n\n    if (_pos select 2 < 0) then {\n        _return = true;\n    };\n};\n\n_return\n",
        "functionName": "ace_common_fnc_isUnderwater"
      },
      {
        "fileName": "fnc_lightIntensityFromObject.sqf",
        "content": "/*\n * Author: commy2\n * Calculate light intensity object 1 recieves from object 2\n *\n * Arguments:\n * 0: Object that recieves light <OBJECT>\n * 1: Object that emits light <OBJECT>\n *\n * Return Value:\n * Brightest light level <NUMBER>\n *\n * Example:\n * [reciever, giver] call ace_common_fnc_lightIntensityFromObject\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_lightSource\"];\n\nprivate _unitPos = _unit modelToWorld (_unit selectionPosition \"spine3\");\nprivate _lightLevel = 0;\n\nif (_lightSource isKindOf \"CAManBase\") then {\n    // handle persons with flashlights\n\n    private _weapon = currentWeapon _lightSource;\n\n    if !(_lightSource isFlashlightOn _weapon) exitWith {};\n\n    private _flashlight = (_lightSource weaponAccessories _weapon) select 1;\n\n    if (getNumber (configFile >> \"CfgWeapons\" >> _flashlight >> \"ACE_laserpointer\") == 1) exitWith {_lightLevel = 0};\n\n    private _properties = [[_flashlight], FUNC(getLightPropertiesWeapon), uiNamespace, format [QEGVAR(cache,%1_%2), QUOTE(DFUNC(getLightPropertiesWeapon)), _flashlight], 1E11] call FUNC(cachedCall);\n    //_properties = [_flashlight] call FUNC(getLightPropertiesWeapon);\n\n    private _innerAngle = (_properties select 3) / 2;\n    private _outerAngle = (_properties select 4) / 2;\n\n    private _position = _lightSource modelToWorld (_lightSource selectionPosition \"rightHand\");\n    private _direction = _lightSource weaponDirection _weapon;\n\n    private _directionToUnit = _position vectorFromTo _unitPos;\n\n    private _distance = _unitPos distance _position;\n    private _angle = acos (_direction vectorDotProduct _directionToUnit);\n\n    _lightLevel = (linearConversion [0, 30, _distance, 1, 0, true]) * (linearConversion [_innerAngle, _outerAngle, _angle, 1, 0, true]);\n\n} else {\n    // handle any object, strcutures, cars, tanks, etc. @todo campfires, burning vehicles\n\n    private _lights = _lightSource call FUNC(getTurnedOnLights);\n\n    {\n        private _properties = [[_lightSource, _x], FUNC(getLightProperties), uiNamespace, format [QEGVAR(cache,%1_%2_%3), QUOTE(DFUNC(getLightProperties)), typeOf _lightSource, _x], 1E11] call FUNC(cachedCall);\n        //_properties = [_lightSource, _x] call FUNC(getLightProperties);\n\n        // @todo intensity affects range?\n        //_properties params [\"_intensity\"];\n\n        private _innerAngle = (_properties select 3) / 2;\n        private _outerAngle = (_properties select 4) / 2;\n\n        // get world position and direction\n        private _position = _lightSource modelToWorld (_lightSource selectionPosition (_properties select 1));\n        private _direction = _lightSource modelToWorld (_lightSource selectionPosition (_properties select 2));\n\n        _direction = _position vectorFromTo _direction;\n        private _directionToUnit = _position vectorFromTo _unitPos;\n\n        private _distance = _unitPos distance _position;\n        private _angle = acos (_direction vectorDotProduct _directionToUnit);\n\n        _lightLevel = _lightLevel max ((linearConversion [0, 30, _distance, 1, 0, true]) * (linearConversion [_innerAngle, _outerAngle, _angle, 1, 0, true]));\n\n        //systemChat  format [\"%1 %2\", (linearConversion [0, 30, _distance, 1, 0, true]), (linearConversion [_innerAngle, _outerAngle, _angle, 1, 0, true])];\n\n    } forEach _lights;\n\n    // handle campfires\n    if (inflamed _lightSource) then {\n        private _distance = _unitPos distance position _lightSource;\n\n        _lightLevel = _lightLevel max linearConversion [0, 30, _distance, 0.5, 0, true];\n    };\n\n};\n\n_lightLevel\n",
        "functionName": "ace_common_fnc_lightIntensityFromObject"
      },
      {
        "fileName": "fnc_loadPerson.sqf",
        "content": "/*\n * Author: Glowbal\n * Loads a specified unit into any nearby vehicle, or _vehicle parameter.\n *\n * Arguments:\n * 0: Unit that will load <OBJECT>\n * 1: Unit to be loaded <OBJECT>\n * 2: Vehicle that the unit will be loaded in <OBJECT> (default: objNull)\n *\n * Return Value:\n * Vehicle that the unitToBeloaded has been loaded in. Returns objNull if function failed <OBJECT>\n *\n * Example:\n * [bob, kevin] call ace_common_fnc_loadPerson\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n#define GROUP_SWITCH_ID QFUNC(loadPerson)\n\nparams [\"_caller\", \"_unit\", [\"_vehicle\", objNull]];\n\nif (!([_caller, _unit, [\"isNotDragging\", \"isNotCarrying\", \"isNotSwimming\"]] call FUNC(canInteractWith)) || {_caller == _unit}) exitWith {_vehicle};\n\n// Try to use nearest vehicle if a vehicle hasn't been supplied\nif (isNull _vehicle) then {\n    _vehicle = ([_unit] call FUNC(nearestVehiclesFreeSeat)) param [0, objNull];\n};\n\nif (!isNull _vehicle) then {\n    [_unit, true, GROUP_SWITCH_ID, side group _caller] call FUNC(switchToGroupSide);\n    [\"ace_loadPersonEvent\", [_unit, _vehicle, _caller], _unit] call CBA_fnc_targetEvent;\n};\n\n_vehicle\n",
        "functionName": "ace_common_fnc_loadPerson"
      },
      {
        "fileName": "fnc_loadPersonLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * Load a person, local\n *\n * Arguments:\n * 0: unit to be loaded <OBJECT>\n * 1: vehicle that will beloaded <OBJECT>\n * 2: caller that will load <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, car, kevin] call ace_common_fnc_loadPersonLocal\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_caller\"];\n\nif (!alive _unit) then {\n    // _unit = [_unit, _caller] call FUNC(makeCopyOfBody); //func does not exist\n};\n\nprivate _slotsOpen = false;\n\nif (_vehicle emptyPositions \"cargo\" > 0) then {\n    _unit moveInCargo _vehicle;\n    _slotsOpen = true;\n} else {\n    if (_vehicle emptyPositions \"gunner\" > 0) then {\n        _unit moveInGunner _vehicle;\n        _slotsOpen = true;\n    };\n};\n\nif (_slotsOpen) then {\n    private _loaded = _vehicle getVariable [QGVAR(loaded_persons),[]];\n    _loaded pushBack _unit;\n\n    _vehicle setVariable [QGVAR(loaded_persons), _loaded, true];\n\n    if !([_unit] call FUNC(isAwake)) then {\n        [{\n            (_this select 0) params [\"_unit\", \"_vehicle\"];\n\n            // wait until the unit is in the vehicle\n            if (vehicle _unit != _vehicle) exitWith {\n                // kill this pfh if either one is deleted\n                if (isNull _unit || isNull _vehicle) then {\n                    [_this select 1] call CBA_fnc_removePerFrameHandler;\n                };\n            };\n\n            _unit setVariable [QEGVAR(medical,vehicleAwakeAnim), [_vehicle, animationState _unit]];\n\n            [_unit, [_unit] call FUNC(getDeathAnim), 1, true] call FUNC(doAnimation);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n        }, 0.5, [_unit, _vehicle]] call CBA_fnc_addPerFrameHandler;\n    };\n};\n",
        "functionName": "ace_common_fnc_loadPersonLocal"
      },
      {
        "fileName": "fnc_moduleCheckPBOs.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Initializes the check-PBOs module.\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_common_fnc_moduleCheckPBOs\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(checkPBOsAction),     \"Action\"    ] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(checkPBOsCheckAll),   \"CheckAll\"  ] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(checkPBOsWhitelist),  \"Whitelist\" ] call EFUNC(common,readSettingFromModule);\n\nINFO_1(\"Check-PBOs Module Initialized. Mode: %1.\",GVAR(checkPBOsAction));\n",
        "functionName": "ace_common_fnc_moduleCheckPBOs"
      },
      {
        "fileName": "fnc_moduleLSDVehicles.sqf",
        "content": "/*\n * Author: KoffeinFlummi, joko // Jonas\n * Nothing to see here, move along.\n *\n * Arguments:\n * Whatever the module provides. (I dunno.)\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, target, []] call ace_common_fnc_moduleLSDVehicles\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\nif (isNil QGVAR(LSD_Vehicles)) then {\n    GVAR(LSD_Vehicles) = [];\n};\n\n{\n    _hSCount = count (getArray (configFile >> \"CfgVehicles\" >> typeOf _x >> \"hiddenSelections\"));\n    if (_hSCount > 0) then {\n        GVAR(LSD_Vehicles) pushBack [_x, _hSCount];\n    };\n    nil\n} count _units;\n\nif (isNil QGVAR(LSD_Colors)) then {\n    GVAR(LSD_Colors) = [\n        \"#(argb,8,8,3)color(1,0,0,1,co)\",\n        \"#(argb,8,8,3)color(1,0.5,0,1,co)\",\n        \"#(argb,8,8,3)color(1,1,0,1,co)\",\n        \"#(argb,8,8,3)color(0,1,0,1,co)\",\n        \"#(argb,8,8,3)color(0,0,1,1,co)\",\n        \"#(argb,8,8,3)color(0.2,0,0.5,1,co)\",\n        \"#(argb,8,8,3)color(0.5,0,1,1,co)\"\n    ];\n};\n\nif (isNil QGVAR(LSD_PFH)) then {\n    GVAR(LSD_PFH) = [{\n        (_this select 0) params [\"_index\"];\n        {\n            _x params [\"_vehicle\", \"_hSCount\"];\n            for \"_i\" from 0 to (_hSCount - 1) do {\n                _vehicle setObjectTexture [_i, GVAR(LSD_Colors) select _index];\n            };\n            nil\n        } count GVAR(LSD_Vehicles);\n\n        _index = ((_index + 1) % 7) mod count GVAR(LSD_Colors);\n        (_this select 0) set [0, _index];\n\n    }, 0.02, [0]] call CBA_fnc_addPerFrameHandler;\n};\nINFO(\"WEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED.\");\n",
        "functionName": "ace_common_fnc_moduleLSDVehicles"
      },
      {
        "fileName": "fnc_monitor.sqf",
        "content": "/*\n * Author: commy2\n * hint retun value of given function every frame\n *\n * Arguments:\n * <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [{code}] call ace_common_fnc_monitor\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!isNil QGVAR(MonitorFnc)) then {\n    [GVAR(MonitorFnc)] call CBA_fnc_removePerFrameHandler;\n};\n\nGVAR(MonitorFnc) = [{\n    hintSilent str (call (_this select 0));\n}, 0, _this] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_common_fnc_monitor"
      },
      {
        "fileName": "fnc_muteUnit.sqf",
        "content": "/*\n * Author: commy2\n * Mutes the unit. It won't trigger auto generated chat messages either.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Reason to mute the unit <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"because\"] call ace_common_fnc_muteUnit\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_reason\"];\n\nif (isNull _unit) exitWith {};\n\n// add reason to mute to the unit\nprivate _muteUnitReasons = _unit getVariable [QGVAR(muteUnitReasons), []];\n\nif !(_reason in _muteUnitReasons) then {\n    _muteUnitReasons pushBack _reason;\n    _unit setVariable [QGVAR(muteUnitReasons), _muteUnitReasons, true];\n};\n\nprivate _speaker = speaker _unit;\n\nif (_speaker == \"ACE_NoVoice\") exitWith {};\n\n[QGVAR(setSpeaker), [_unit, \"ACE_NoVoice\"]] call CBA_fnc_globalEvent;\n\n_unit setVariable [\"ACE_OriginalSpeaker\", _speaker, true];\n",
        "functionName": "ace_common_fnc_muteUnit"
      },
      {
        "fileName": "fnc_muteUnitHandleInitPost.sqf",
        "content": "/*\n * Author: commy2\n * Applies speaker changes on init post. Used because setSpeaker is broken on init.\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_muteUnitHandleInitPost\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// setSpeaker gets overwritten after init on remote units; if unit is muted, setSpeaker again\nif (count (_unit getVariable [QGVAR(muteUnitReasons), []]) > 0) then {\n    [QGVAR(setSpeaker), [_unit, \"ACE_NoVoice\"]] call CBA_fnc_localEvent;\n};\n",
        "functionName": "ace_common_fnc_muteUnitHandleInitPost"
      },
      {
        "fileName": "fnc_muteUnitHandleRespawn.sqf",
        "content": "/*\n * Author: commy2\n * Applies speaker changes on respawn. Used because speaker is respawning breaks the speaker on non-local clients. Also resets the public object variable (broken for JIP clients, that join after respawn)\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_muteUnitHandleRespawn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// setVariable is broken on JIP after respawn\n_unit setVariable [QGVAR(muteUnitReasons), _unit getVariable [QGVAR(muteUnitReasons), []], true];\n\n// fix mp issues with respawning and the speaker\n[QGVAR(setSpeaker), [_unit, speaker _unit]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_common_fnc_muteUnitHandleRespawn"
      },
      {
        "fileName": "fnc_nearestVehiclesFreeSeat.sqf",
        "content": "/*\n * Author: 654wak654\n * Returns a list of vehicles near given unit that the unit can be a passenger in.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Distance <NUMBER>\n *\n * Return Value:\n * Nearest vehicles with a free seat <ARRAY>\n *\n * Example:\n * [bob] call ace_common_fnc_nearestVehiclesFreeSeat\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_distance\", 10]];\n\nprivate _nearVehicles = nearestObjects [_unit, [\"Car\", \"Air\", \"Tank\", \"Ship_F\", \"Pod_Heli_Transport_04_crewed_base_F\"], _distance];\n_nearVehicles select {(_x emptyPositions \"cargo\" > 0) || {_x emptyPositions \"gunner\" > 0}}\n",
        "functionName": "ace_common_fnc_nearestVehiclesFreeSeat"
      },
      {
        "fileName": "fnc_numberToDigits.sqf",
        "content": "/*\n * Author: commy2\n * Transforms a number to an array of the correspondending digits.\n *\n * Arguments:\n * 0: Number to 'digitize' <NUMBER>\n * 1: Set the minimal length of the returned array. Useful for getting left hand zeroes. <NUMBER>, optional\n *\n * Return Value:\n * Digits. The maximum count is six digits. <ARRAY>\n *\n * Example:\n * [5, 5] call ace_common_fnc_numberToDigits\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_number\", \"_minLength\"];\n\n_number = _number min 999999;\n_number = str _number;\n\nprivate _length = count _number;\n\nif (isNil \"_minLength\") then {_minLength = _length};\n\n_minLength = _minLength min 6;\n\nwhile {_length < _minLength} do {\n    _number = \"0\" + _number;\n    _length = _length + 1;\n};\n\nprivate _digits = [];\n\nfor \"_x\" from 0 to (_length - 1) do {\n    _digits pushBack parseNumber (_number select [_x, 1]);\n};\n\n_digits\n",
        "functionName": "ace_common_fnc_numberToDigits"
      },
      {
        "fileName": "fnc_numberToDigitsString.sqf",
        "content": "/*\n * Author: commy2\n * Transforms a number to an string of the correspondending digits.\n *\n * Arguments:\n * 0: Number to 'digitize' <NUMBER>\n * 1: Set the minimal length of the returned string. Useful for getting left hand zeroes. (Optional) <NUMBER>\n *\n * Return Value:\n * Digits. The maximum length is six digits. <STRING>\n *\n * Example:\n * [5, 5] call ace_common_fnc_numberToDigitsString\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_number\", \"_minLength\"];\n\n_number = _number min 999999;\n_number = str _number;\n\nprivate _length = count _number;\n\nif (isNil \"_minLength\") then {_minLength = _length};\n\n_minLength = _minLength min 6;\n\nwhile {_length < _minLength} do {\n    _number = \"0\" + _number;\n    _length = _length + 1;\n};\n\n_number\n",
        "functionName": "ace_common_fnc_numberToDigitsString"
      },
      {
        "fileName": "fnc_numberToString.sqf",
        "content": "/*\n * Author: commy2\n * Converts a number to a string without losing as much precission as str or format.\n *\n * Arguments:\n * 0: A number <NUMBER>\n *\n * Return Value:\n * The number as string <STRING>\n *\n * Example:\n * [5] call ace_common_fnc_numberToString\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_number\"];\n\nprivate _decimals = str (abs _number mod 1);\n_decimals = toArray _decimals;\n_decimals deleteAt 0;\n\nif (_number < 0) exitWith {\n    format [\"-%1%2\", floor abs _number, toString _decimals];\n};\nformat [\"%1%2\", floor _number, toString _decimals];\n",
        "functionName": "ace_common_fnc_numberToString"
      },
      {
        "fileName": "fnc_onAnswerRequest.sqf",
        "content": "/*\n * Author: Glowbal\n * N/A\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: ID? <STRING>\n * 2: Accepted <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"ID\", true] call ace_common_fnc_onAnswerRequest\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_id\", \"_accepted\"];\n\nprivate _info = _unit getVariable _id;\n\nif (!isNil \"_info\") then {\n    _info params [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\n\n    private _replyParams = [_info, _accepted];\n    [QGVAR(requestCallback), _replyParams, _caller] call CBA_fnc_targetEvent;\n    _unit setVariable [_id, nil];\n};\n\nGVAR(RECIEVE_REQUEST_ID_KEY_BINDING) = nil;\n\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT)) then {\n    _unit removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT);\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = nil;\n};\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE)) then {\n    _unit removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE);\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = nil;\n};\n",
        "functionName": "ace_common_fnc_onAnswerRequest"
      },
      {
        "fileName": "fnc_owned.sqf",
        "content": "/*\n * Author: commy2\n * Counterpart of ace_common_fnc_claim. Check if the given object is claimed by another unit.\n *\n * Arguments:\n * 0: Any object. <OBJECT>\n *\n * Return Value:\n * Is this object claimed by someone? <BOOL>\n *\n * Example:\n * [bob] call ace_common_fnc_owned\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\n!isNull (_target getVariable [QGVAR(owner), objNull])\n",
        "functionName": "ace_common_fnc_owned"
      },
      {
        "fileName": "fnc_parseList.sqf",
        "content": "/*\n * Author: Glowbal, Jonpas\n * Makes a list from a string using comma as a delimiter, optionally trim or remove whitespace and check each for object existence.\n *\n * Arguments:\n * 0: List <STRING>\n * 1: Remove or Trim Whitespace <BOOL> (default: false (trim))\n * 2: Check Nil <BOOL> (default: false)\n *\n * Return Value:\n * Parsed List <ARRAY>\n *\n * Example:\n * [\"text\", true, false] call ace_common_fnc_parseList\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_list\", [\"_removeWhitespace\", false], [\"_checkNil\", false]];\n\n// Split using comma delimiter\n_list = _list splitString \",\";\nTRACE_1(\"Splitted List\",_list);\n\n// Remove or Trim Whitespace\nprivate _whitespaceList = [];\n\n{\n    if (_removeWhitespace) then {\n        _whitespaceList pushBack ([_x] call CBA_fnc_removeWhitespace);\n    } else {\n        _whitespaceList pushBack ([_x] call CBA_fnc_trim);\n    };\n    false\n} count _list;\n\n_list = _whitespaceList;\nTRACE_1(\"Whitespace List\",_list);\n\n// Check for object existence\nif (_checkNil) then {\n    private _nilCheckedList = [];\n\n    {\n        if !(isNil _x) then {\n            _nilCheckedList pushBack (missionNamespace getVariable _x);\n        };\n        false\n    } count _list;\n\n    _list = _nilCheckedList;\n};\n\nTRACE_1(\"Final List\",_list);\n\n_list\n",
        "functionName": "ace_common_fnc_parseList"
      },
      {
        "fileName": "fnc_playConfigSound3D.sqf",
        "content": "/*\n * Author: esteldunedain\n * Plays a sound defined in CfgSounds using playSound3D, with global effect\n *\n * Arguments:\n * 0: Sound class <STRING>\n * 1: Position ASL <ARRAY>\n * 2: Volume <NUMBER>\n * 3: Distance <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"sound\", [0,0,0], 5, 5] call ace_common_fnc_playConfigSound3D\n *\n * Public: Yes\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_soundClass\", \"_posASL\", \"_volume\", \"_distance\"];\n\nprivate _cfgSound = configFile >> \"CfgSounds\" >> _soundClass;\n\nif (!isClass _cfgSound) exitWith {\n    ERROR_1(\"CfgSounds class [%1] does not exist\", _soundClass);\n};\n\nprivate _args = getArray (_cfgSound >> \"sound\");\nTRACE_1(\"playConfigSound3D args\", _args);\nprivate _pitch = (_args select 2);\n// Strip the first \\ from the filename\nprivate _fileName = _args select 0;\n_fileName = _fileName select [1, count _fileName - 1];\nTRACE_1(\"playConfigSound3D filename\", _fileName);\n\nplaySound3D [_fileName, objNull, false, _posASL, _volume, _pitch, _distance];\n",
        "functionName": "ace_common_fnc_playConfigSound3D"
      },
      {
        "fileName": "fnc_player.sqf",
        "content": "/*\n * Author: bux578, commy2\n * Returns the player or curator controlled unit.\n * Use this in INIT and RESPAWN eh scripts, because ACE_player isn't reset yet.\n *\n * Arguments:\n * NONE.\n *\n * Return Value:\n * Player controlled unit <OBJECT>\n *\n * Example:\n * [] call ace_common_fnc_player\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nmissionNamespace getVariable [\"bis_fnc_moduleRemoteControl_unit\", player]\n",
        "functionName": "ace_common_fnc_player"
      },
      {
        "fileName": "fnc_playerSide.sqf",
        "content": "/*\n * Author: commy2\n * Return the current side of the player\n *\n * Arguments:\n * None\n *\n * Return Value:\n * current local side <SIDE>\n *\n * Example:\n * [] call ace_common_fnc_playerSide\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nside group ACE_player\n",
        "functionName": "ace_common_fnc_playerSide"
      },
      {
        "fileName": "fnc_positionToASL.sqf",
        "content": "/*\n * Author: esteldunedain\n * Converts Arma \"Position\" to ASL\n *\n * Arguments:\n * 0: position x <Number>\n * 1: position y <Number>\n * 2: position z <Number>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1, 1, 1] call ace_common_fnc_positionToASL\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (surfaceIsWater _this) then {\n    _this\n} else {\n    ATLtoASL _this\n};\n",
        "functionName": "ace_common_fnc_positionToASL"
      },
      {
        "fileName": "fnc_progressBar.sqf",
        "content": "/*\n * Author: commy2, Glowbal, PabstMirror\n * Draw progress bar and execute given function if succesful.\n * Finish/Failure/Conditional are all passed [_args, _elapsedTime, _totalTime, _errorCode]\n *\n * Arguments:\n * 0: Total Time (in game \"time\" seconds) <NUMBER>\n * 1: Arguments, passed to condition, fail and finish <ARRAY>\n * 2: On Finish: Code called or STRING raised as event. <CODE, STRING>\n * 3: On Failure: Code called or STRING raised as event. <CODE, STRING>\n * 4: (Optional) Localized Title <STRING>\n * 5: Code to check each frame (Optional) <CODE>\n * 6: Exceptions for checking EFUNC(common,canInteractWith) (Optional)<ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [5, [], {Hint \"Finished!\"}, {hint \"Failure!\"}, \"My Title\"] call ace_common_fnc_progressBar\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_totalTime\", \"_args\", \"_onFinish\", \"_onFail\", [\"_localizedTitle\", \"\"], [\"_condition\", {true}], [\"_exceptions\", []]];\n\nprivate _player = ACE_player;\n\n//Open Dialog and set the title\ncloseDialog 0;\ncreateDialog QGVAR(ProgressBar_Dialog);\n\n(uiNamespace getVariable QGVAR(ctrlProgressBarTitle)) ctrlSetText _localizedTitle;\n\n//Adjust position based on user setting:\nprivate _ctrlPos = ctrlPosition (uiNamespace getVariable QGVAR(ctrlProgressBarTitle));\n_ctrlPos set [1, ((0 + 29 * GVAR(settingProgressBarLocation)) * ((((safezoneW / safezoneH) min 1.2) / 1.2) / 25) + (safezoneY + (safezoneH - (((safezoneW / safezoneH) min 1.2) / 1.2))/2))];\n\n(uiNamespace getVariable QGVAR(ctrlProgressBG)) ctrlSetPosition _ctrlPos;\n(uiNamespace getVariable QGVAR(ctrlProgressBG)) ctrlCommit 0;\n(uiNamespace getVariable QGVAR(ctrlProgressBar)) ctrlSetPosition _ctrlPos;\n(uiNamespace getVariable QGVAR(ctrlProgressBar)) ctrlCommit 0;\n(uiNamespace getVariable QGVAR(ctrlProgressBarTitle)) ctrlSetPosition _ctrlPos;\n(uiNamespace getVariable QGVAR(ctrlProgressBarTitle)) ctrlCommit 0;\n\n[{\n    (_this select 0) params [\"_args\", \"_onFinish\", \"_onFail\", \"_condition\", \"_player\", \"_startTime\", \"_totalTime\", \"_exceptions\"];\n\n    private _elapsedTime = CBA_missionTime - _startTime;\n    private _errorCode = -1;\n\n    // this does not check: target fell unconscious, target died, target moved inside vehicle / left vehicle, target moved outside of players range, target moves at all.\n    if (isNull (uiNamespace getVariable [QGVAR(ctrlProgressBar), controlNull])) then {\n        _errorCode = 1;\n    } else {\n        if (ACE_player != _player || !alive _player) then {\n            _errorCode = 2;\n        } else {\n            if !([_args, _elapsedTime, _totalTime, _errorCode] call _condition) then {\n                _errorCode = 3;\n            } else {\n                if !([_player, objNull, _exceptions] call EFUNC(common,canInteractWith)) then {\n                    _errorCode = 4;\n                } else {\n                    if (_elapsedTime >= _totalTime) then {\n                        _errorCode = 0;\n                    };\n                };\n            };\n        };\n    };\n\n    if (_errorCode != -1) then {\n        //Error or Success, close dialog and remove PFEH\n\n        //Only close dialog if it's the progressBar:\n        if (!isNull (uiNamespace getVariable [QGVAR(ctrlProgressBar), controlNull])) then {\n            closeDialog 0;\n        };\n\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n        if (_errorCode == 0) then {\n            if (_onFinish isEqualType \"\") then {\n                [_onFinish, [_args, _elapsedTime, _totalTime, _errorCode]] call CBA_fnc_localEvent;\n            } else {\n                [_args, _elapsedTime, _totalTime, _errorCode] call _onFinish;\n            };\n        } else {\n            if (_onFail isEqualType \"\") then {\n                [_onFail, [_args, _elapsedTime, _totalTime, _errorCode]] call CBA_fnc_localEvent;\n            } else {\n                [_args, _elapsedTime, _totalTime, _errorCode] call _onFail;\n            };\n        };\n    } else {\n        //Update Progress Bar (ratio of elepased:total)\n        (uiNamespace getVariable QGVAR(ctrlProgressBar)) progressSetPosition (_elapsedTime / _totalTime);\n    };\n}, 0, [_args, _onFinish, _onFail, _condition, _player, CBA_missionTime, _totalTime, _exceptions]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_common_fnc_progressBar"
      },
      {
        "fileName": "fnc_readSettingFromModule.sqf",
        "content": "/*\n * Author: esteldunedain\n * Reads a setting value from a module, set it and force it. Logs if the setting is missing from the module.\n * Must be called on all machines!!!!!!!\n *\n * Arguments:\n * 0: Module <OBJECT>\n * 1: ACE_Parameter name <STRING>\n * 2: Module parameter name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [MODULE, \"Param\", \"paramname\"] call ace_common_fnc_readSettingFromModule\n *\n * Public: No\n */\n#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_settingName\", \"_moduleVariable\"];\n\n// Check if the variable is already defined\nif (isNil _settingName) exitWith {\n    ERROR_1(\"readSettingFromModule - param [%1] is not an ace_setting\", _settingName);\n};\n\n// Check if the parameter is defined in the module\nif (isNil {_logic getVariable _moduleVariable}) exitWith {\n    WARNING_2(\"Warning in %1 module: %2 setting is missing. Probably an obsolete version of the module is used in the mission.\",typeOf _logic,_moduleVariable);\n};\n\nprivate _value = _logic getVariable _moduleVariable;\nif (_value isEqualTo -1) then {\n    //3den missions will save modules with value = 0 as -1\n    //If the setting has a \"values\" array, we should be able to assume that -1 is not a valid number as it would not be a valid index for the array\n    if (isArray (configFile >> \"ACE_Settings\" >> _settingName >> \"values\")) then {\n        WARNING_2(\"Module For Setting [%1] is saved as (-1), switching to (0) - missionVersion [%2]\",_settingName,missionVersion);\n        _value = 0;\n    };\n};\n\nif ([_settingName, \"mission\"] call CBA_settings_fnc_isForced) then {\n    WARNING_1(\"Setting [%1] - Already Forced\",_settingName);\n};\n\n// Set the setting as a mission setting and force it\nTRACE_2(\"setSettingMission from module\",_settingName,_value);\n[\"CBA_settings_setSettingMission\", [_settingName, _value, true]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_common_fnc_readSettingFromModule"
      },
      {
        "fileName": "fnc_readSettingsFromParamsArray.sqf",
        "content": "/*\n * Author: PabstMirror\n * Read settins from paramsArray that have a ACE_setting = 1.\n * Happens before modules but after all other configs (for force priority)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_common_fnc_readSettingsFromParamsArray\n *\n * Public: No\n */\n#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n//paramsArray is a normal variable not a command\nprivate _paramsArray = missionnamespace getVariable [\"paramsArray\", []];\n\nTRACE_1(\"Reading missionConfigFile params\",_paramsArray);\n\n{\n    private _config = (missionConfigFile >> \"params\") select _forEachIndex;\n    if ((getNumber (_config >> \"ACE_setting\")) > 0) then {\n        private _settingName = configName _config;\n        private _settingValue = _x;\n        private _title = getText (_config >> \"title\");\n\n        TRACE_3(\"ace_setting\",_title,_settingName,_settingValue);\n\n        // Check if the variable is already defined\n        if (isNil _settingName) exitWith {\n            ERROR_1(\"readSettingsFromParamsArray - param [%1] is not an ace_setting\", _settingName);\n        };\n\n        // The setting is not forced, so update the value\n        // Read entry and cast it to the correct type from the existing variable\n        private _validValue = false;\n        switch (true) do {\n            case (_typeName == \"SCALAR\"): {_validValue = true;};\n            case (_typeName == \"BOOL\"): {\n                _settingValue = _settingValue > 0;\n                _validValue = true;\n            };\n            //TODO: Handle ARRAY,COLOR,STRING??? (bool/scalar covers most important settings)\n        };\n\n        if (!_validValue) exitWith {\n            WARNING_3(\"readSettingsFromParamsArray - param [%1] type not valid [%2] - expected type [%3]\", _settingName,_settingValue,_typeName);\n        };\n\n        if ([_settingName, \"mission\"] call CBA_settings_fnc_isForced) then {\n            WARNING_1(\"Setting [%1] - Already Forced\",_settingName);\n        };\n\n        // Set the setting as a mission setting and force it\n        TRACE_2(\"setSettingMission from module\",_settingName,_value);\n        [\"CBA_settings_setSettingMission\", [_settingName, _value, true]] call CBA_fnc_localEvent;\n    };\n} forEach _paramsArray;\n",
        "functionName": "ace_common_fnc_readSettingsFromParamsArray"
      },
      {
        "fileName": "fnc_receiveRequest.sqf",
        "content": "/*\n * Author: Glowbal\n * N/A\n *\n * Arguments:\n * 0: caller <OBJECT>\n * 1: target <OBJECT>\n * 2: requestID <STRING>\n * 3: Message <STRING>\n * 4: callback (NOT USED) <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"ID\", \"Message\", {Callback}] call ace_common_fnc_recieveRequest\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\n\n_requestID = (\"ace_recieveRequest_f_id_\"+_requestID);\n\n_target setVariable [_requestID, _this];\n\nif (isLocalized _requestMessage) then {\n    _requestMessage = format [localize _requestMessage, [_caller, false, true] call FUNC(getName)];\n} else {\n    _requestMessage = format [_requestMessage, [_caller, false, true] call FUNC(getName)];\n};\n\nhint format [\"%1\", _requestMessage]; // @todo ?\n\nif !(isNil QGVAR(RECIEVE_REQUEST_TIME_OUT_SCRIPT)) then {\n    terminate GVAR(RECIEVE_REQUEST_TIME_OUT_SCRIPT);\n};\n\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT)) then {\n    _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT);\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = nil;\n};\n\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE)) then {\n    _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE);\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = nil;\n};\n\nGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = _target addAction [\"Accept\", compile format[\"[player,'%1', true] call FUNC(onAnswerRequest);\", _requestID]];\nGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = _target addAction [\"Decline\", compile format[\"[player,'%1', false] call FUNC(onAnswerRequest);\", _requestID]];\n\nGVAR(RECIEVE_REQUEST_ID_KEY_BINDING) = _requestID;\n\nGVAR(RECIEVE_REQUEST_TIME_OUT_SCRIPT) = [CBA_missionTime, _target, _requestID] spawn { // @todo\n    params [\"_time\", \"_target\", \"_requestID\"];\n\n    _time = _time + 40;\n\n    private _id = _target getVariable _requestID;\n\n    waitUntil {\n        _id = _target getVariable _requestID;\n\n        (CBA_missionTime > _time || isNil \"_id\")\n    };\n\n    _target setVariable [_requestID, nil];\n\n    GVAR(RECIEVE_REQUEST_ID_KEY_BINDING) = nil;\n\n    if (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT)) then {\n        _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT);\n        GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = nil;\n    };\n\n    if (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE)) then {\n        _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE);\n        GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = nil;\n    };\n};\n",
        "functionName": "ace_common_fnc_receiveRequest"
      },
      {
        "fileName": "fnc_removeActionEventHandler.sqf",
        "content": "/*\n * Author: commy2\n * Remove an addAction event from a unit.\n *\n * Arguments:\n * 0: Unit the action is assigned to <OBJECT>\n * 1: Name of the action, e.g. \"DefaultAction\" <STRING>\n * 2: ID of the action <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"DefaultAction\", 5] call ace_common_fnc_removeActionEventHandler\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_action\", \"_id\"];\n\nif (_id == -1) exitWith {};\n\nprivate _name = format [\"ACE_Action_%1\", _action];\nprivate _actionsVar = _unit getVariable [_name, [-1, [-1, [], []], objNull]];\n\n_actionsVar params [\"_actionID\", \"_actionsArray\"];\n_actionsArray params [\"_currentID\", \"_actionIDs\", \"_actions\"];\n\nif (_unit != _actionsVar select 2) exitWith {};\n\n_id = _actionIDs find _id;\n\nif (_id == -1) exitWith {};\n\n_actionIDs set [_id, -1];\n_actionIDs = _actionIDs - [-1];\n\n_actions set [_id, []];\n_actions = _actions - [[]];\n\nif (count _actions == 0) then {\n    _unit removeAction _actionID;\n    _actionID = -1;\n};\n\n_unit setVariable [_name, [_actionID, [_currentID, _actionIDs, _actions], _unit], false];\n",
        "functionName": "ace_common_fnc_removeActionEventHandler"
      },
      {
        "fileName": "fnc_removeActionMenuEventHandler.sqf",
        "content": "/*\n * Author: commy2\n * Remove an addAction menu event from a unit.\n *\n * Arguments:\n * 0: Unit the action is assigned to <OBJECT>\n * 1: Name of the action, e.g. \"DefaultAction\" <STRING>\n * 2: ID of the action <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"DefaultAction\", 5] call ace_common_fnc_removeActionMenuEventHandler\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_action\", \"_id\"];\n\nif (_id == -1) exitWith {};\n\nprivate _name = format [\"ACE_ActionMenu_%1\", _action];\nprivate _actionsVar = _unit getVariable [_name, [-1, [-1, [], []]]];\n\n_actionsVar params [\"_currentID\", \"_actionIDs\", \"_actions\"];\n\n_id = _actionIDs find _id;\n\nif (_id == -1) exitWith {};\n\n_action = _actions select _id;\n\n_action params [\"_actionID\", \"_nameVar\"];\n\nmissionNamespace setVariable [_nameVar, nil];\n\n_actionIDs deleteAt _id;\n_actions deleteAt _id;\n\n_unit removeAction _actionID;\n\n_unit setVariable [_name, [_currentID, _actionIDs, _actions], false];\n",
        "functionName": "ace_common_fnc_removeActionMenuEventHandler"
      },
      {
        "fileName": "fnc_removeCanInteractWithCondition.sqf",
        "content": "/*\n * Author: commy2\n * Remove a condition that gets checked by ace_common_fnc_canInteractWith.\n *\n * Arguments:\n * 0: The conditions id. <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ID\"] call ace_common_fnc_removeCanInteractWithCondition\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_conditionName\"];\n\n_conditionName = toLower _conditionName;\n\nprivate _conditions = missionNamespace getVariable [QGVAR(InteractionConditions), [[],[]]];\n\n_conditions params [\"_conditionNames\", \"_conditionFuncs\"];\n\nprivate _index = _conditionNames find _conditionName;\n\nif (_index == -1) exitWith {};\n\n_conditionNames deleteAt _index;\n_conditionFuncs deleteAt _index;\n\nGVAR(InteractionConditions) = _conditions;\n",
        "functionName": "ace_common_fnc_removeCanInteractWithCondition"
      },
      {
        "fileName": "fnc_removeMapMarkerCreatedEventHandler.sqf",
        "content": "/*\n * Author: commy2\n * Remove a map marker creation event handler.\n *\n * Arguments:\n * 0: ID of the event handler <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [5] call ace_common_fnc_removeMapMarkerCreatedEventHandler\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_id\"];\n\nprivate _actionsVar = missionNamespace getVariable [\"ACE_EventHandler_MapMarker\", [-1, [], []]];\n\n_actionsVar params [\"_currentId\", \"_actionIDs\", \"_actions\"];\n\n_id = _actionIDs find _id;\n\nif (_id == -1) exitWith {};\n\n_actionIDs set [_id, -1];\n_actionIDs = _actionIDs - [-1];\n\n_actions set [_id, []];//{}\n_actions = _actions - [[]];//[{}]\n\nmissionNamespace setVariable [\"ACE_EventHandler_MapMarker\", [_currentId, _actionIDs, _actions]];\n",
        "functionName": "ace_common_fnc_removeMapMarkerCreatedEventHandler"
      },
      {
        "fileName": "fnc_removeSpecificMagazine.sqf",
        "content": "/*\n * Author: esteldunedain\n * Removes a magazine from the unit that has an specific ammo count\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Magazine <STRING>\n * 2: Ammo count <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"magazine\", 5] call ace_common_fnc_removeSpecificMagazine\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_magazineType\", \"\", [\"\"]], [\"_ammoCount\", 0, [0]]];\n\nprivate _isRemoved = false;\n\n// Check uniform\nprivate _magazines = magazinesAmmoCargo uniformContainer _unit select {_x select 0 == _magazineType};\nprivate _index = _magazines find [_magazineType, _ammoCount];\n\nif (_index > -1) exitWith {\n    {\n        _unit removeItemFromUniform (_x select 0);\n        false\n    } count _magazines;\n\n    {\n        if (!_isRemoved && (_x isEqualTo [_magazineType,_ammoCount])) then {\n            _isRemoved = true;\n        } else {\n            (uniformContainer _unit) addMagazineAmmoCargo [_x select 0, 1, _x select 1];\n        };\n        false\n    } count _magazines;\n};\n\n// Check vest\n_magazines = magazinesAmmoCargo vestContainer _unit select {_x select 0 == _magazineType};\n_index = _magazines find [_magazineType, _ammoCount];\n\nif (_index > -1) exitWith {\n    {\n        _unit removeItemFromVest (_x select 0);\n        false\n    } count _magazines;\n\n    {\n        if (!_isRemoved && (_x isEqualTo [_magazineType,_ammoCount])) then {\n            _isRemoved = true;\n        } else {\n            (vestContainer _unit) addMagazineAmmoCargo [_x select 0, 1, _x select 1];\n        };\n        false\n    } count _magazines;\n};\n\n// Check backpack\n_magazines = magazinesAmmoCargo backpackContainer _unit select {_x select 0 == _magazineType};\n_index = _magazines find [_magazineType, _ammoCount];\n\nif (_index > -1) exitWith {\n    {\n        _unit removeItemFromBackpack (_x select 0);\n        false\n    } count _magazines;\n\n    {\n        if (!_isRemoved && (_x isEqualTo [_magazineType,_ammoCount])) then {\n            _isRemoved = true;\n        } else {\n            (backpackContainer _unit) addMagazineAmmoCargo [_x select 0, 1, _x select 1];\n        };\n        false\n    } count _magazines;\n};\n",
        "functionName": "ace_common_fnc_removeSpecificMagazine"
      },
      {
        "fileName": "fnc_removeSyncedEventHandler.sqf",
        "content": "/*\n * Author: jaynus\n * Remove a synced event handler\n *\n * Arguments:\n * 0: Name <STRING>\n *\n * Return Value:\n * Boolean of success <BOOL>\n *\n * Example:\n * [\"bob\"] call ace_common_fnc_removeSyncedEventHandler\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\"];\n\nif !([GVAR(syncedEvents), _name] call CBA_fnc_hashHasKey) exitWith {\n    ERROR_1(\"Synced event key [%1] not found (removeSyncedEventHandler).\", _name);\n    false\n};\n\nprivate _data = [GVAR(syncedEvents), _name] call CBA_fnc_hashGet;\n_data params [\"\", \"\", \"\", \"_eventId\"];\n\n[_eventId] call CBA_fnc_removeEventHandler;\n[GVAR(syncedEvents), _name] call CBA_fnc_hashRem;\n",
        "functionName": "ace_common_fnc_removeSyncedEventHandler"
      },
      {
        "fileName": "fnc_requestCallback.sqf",
        "content": "/*\n * Author: Glowbal\n * N/A\n *\n * Arguments:\n * ? <UNKNOWN>\n *\n * Return Value:\n * ? <UNKNOWN>\n *\n * Example:\n * [bob] call ace_common_fnc_requestCallback\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_info\", \"_accepted\"];\n\n_info params [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\n\n[_caller, _target, _accepted] call compile _callBack;\n",
        "functionName": "ace_common_fnc_requestCallback"
      },
      {
        "fileName": "fnc_requestSyncedEvent.sqf",
        "content": "/*\n * Author: jaynus\n * Send a request to synchronize an event name from the client->server. Execute on client only.\n *\n * Arguments:\n * 0: eventName <STRING>\n *\n * Return Value:\n * Boolean of success <BOOL>\n *\n * Example:\n * [\"event\"] call ace_common_fnc_requestSyncedEvent\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_eventName\"];\n\n// Only JIP machines on initialization send this off, requesting sync on events with the serverCommand\nif (isServer) exitWith {false};\n\n[\"ACEs\", [_eventName, ACE_player]] call CBA_fnc_serverEvent;\n",
        "functionName": "ace_common_fnc_requestSyncedEvent"
      },
      {
        "fileName": "fnc_resetAllDefaults.sqf",
        "content": "/*\n * Author: Glowbal\n * reset all variables that have been defined\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * ? <UNKNOWN>\n *\n * Example:\n * [bob] call ace_common_fnc_resetAllDefaults\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n_unit setVariable [\"ACE_isDead\", nil, true];\n_unit setVariable [\"ACE_isUnconscious\", nil, true];\n\nif (isPlayer _unit) then {\n    [true] call FUNC(setVolume);\n\n    if !(isNil QGVAR(DISABLE_USER_INPUT_COLLECTION)) then {\n        // clear all disable user input\n        {\n            [_x, false] call FUNC(setDisableUserInputStatus);\n            false\n        } count GVAR(DISABLE_USER_INPUT_COLLECTION);\n    };\n};\n\n{\n    if !(_x select 4) then {\n        _unit setVariable [_x select 0, nil, _x select 3];\n    };\n    false\n} count ([_unit] call FUNC(getAllDefinedSetVariables));\n",
        "functionName": "ace_common_fnc_resetAllDefaults"
      },
      {
        "fileName": "fnc_restoreVariablesJIP.sqf",
        "content": "/*\n * Author: commy2\n * Called from respawn eventhandler. Resets all public object namespace variables that are added via FUNC(setVariableJIP).\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_restoreVariablesJIP\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _respawnVariables = _unit getVariable [\"ACE_respawnVariables\", []];\n\n// yes those\n_respawnVariables pushBack \"ACE_PersistentFunctions\";\n\n{\n    _unit setVariable [_x, _unit getVariable _x, true];\n    false\n} count _respawnVariables;\nnil\n",
        "functionName": "ace_common_fnc_restoreVariablesJIP"
      },
      {
        "fileName": "fnc_runAfterSettingsInit.sqf",
        "content": "/*\n * Author: PabstMirror\n * Executes code after setting are initilized.\n *\n * Arguments:\n * 0: Code to execute <CODE>\n * 1: Parameters to run the code with <ANY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [{if (GVAR(setting) then {x} else {y};}, []] call ace_common_fnc_runAfterSettingsInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_func\", \"_params\"];\n\nif (GVAR(settingsInitFinished)) then {\n    //Setting Already Finished, Direct Run the code\n    _params call _func;\n} else {\n    //Waiting on settings, throw it on the delayed run array\n    GVAR(runAtSettingsInitialized) pushBack [_func, _params];\n};\n",
        "functionName": "ace_common_fnc_runAfterSettingsInit"
      },
      {
        "fileName": "fnc_runTests.sqf",
        "content": "/*\n * Author: PabstMirror\n * Run test functions.\n *\n * Arguments:\n * 0: Specific test to run (default is to run all) <STRING> (default: #all)\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_common_fnc_runTests\n * [\"fcs\"] call ace_common_fnc_runTests\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_specificTest\", \"#all\", [\"\"]]];\n\nprivate _startTime = diag_tickTime;\nprivate _fails = [];\nprivate _total = 0;\n\nINFO_1(\"ace_common_fnc_runTests starting for [%1]\", _specificTest);\n\n{\n    private _testName = configName _x;\n    if ((_specificTest == \"#all\") || {_specificTest == _testName}) then {\n        _total = _total + 1;\n        private _testFile = getText _x;\n        diag_log text format [\"----- Starting Testing %1 [%2] -----\", _testName, _testFile];\n        private _return = ([nil] apply (compile preProcessFileLineNumbers _testFile)) select 0;\n        if ((isNil \"_return\") || {!(_return isEqualTo true)}) then {\n            systemChat format [\"Test [%1] Failed\", _testName];\n            diag_log text format [\"----- Finished Testing %1 [Failed] -----\", _testName];\n            _fails pushBack _testName;\n        } else {\n            diag_log text format [\"----- Finished Testing %1 [Passed] -----\", _testName];\n        };\n    };\n} forEach (configProperties [configFile >> \"ACE_Tests\"]);\n\nINFO_1(\"ace_common_fnc_runTests finished in %1 ms\", (1000 * (diag_tickTime - _startTime)) toFixed 1);\nINFO_2(\"[%1 / %2] Tests Passed\", (_total - (count _fails)), _total);\nif (!(_fails isEqualTo [])) then {\n    INFO_1(\"Failed: %1\", _fails);\n};\n",
        "functionName": "ace_common_fnc_runTests"
      },
      {
        "fileName": "fnc_sanitizeString.sqf",
        "content": "/*\n * Author: esteldunedain, based on Killzone-Kid code\n * Removes quotation marks to avoid exploits and optionally html tags from text to avoid conflicts with structured text.\n *\n * Arguments:\n * 0: Source string <STRING>\n * 1: Remove html tags (default: false) <BOOL>\n *\n * Return Value:\n * Sanitized string <STRING>\n *\n * Example:\n * [\"<CoolGroup>CoolGuy\", true] call ace_common_fnc_sanitizeString;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_string\", [\"_removeTags\", false]];\n\nprivate _array = [];\n\n{\n    switch _x do {\n        case 60 : { // less than symbol: `<`\n            if (_removeTags) then {\n                _array append toArray \"&lt;\";\n            } else {\n                _array pushBack _x;\n            };\n        };\n        case 62 : { // greater than symbol: `>`\n            if (_removeTags) then {\n                _array append toArray \"&gt;\";\n            } else {\n                _array pushBack _x;\n            };\n        };\n\n        case 34 : {\n        };\n\n        case 39 : {\n        };\n\n        default {\n            _array pushBack _x;\n        };\n    };\n    false\n} count toArray _string;\n\ntoString _array // return\n",
        "functionName": "ace_common_fnc_sanitizeString"
      },
      {
        "fileName": "fnc_sendRequest.sqf",
        "content": "/*\n * Author: Glowbal\n * Send a request to an unit and execute code based upon results.\n *\n * Arguments:\n * 0: caller <OBJECT>\n * 1: target <OBJECT>\n * 2: requestID <STRING>\n * 3: requestMessage Will be localized for other target object. <STRING>\n * 4: callback Code called upon accept or decline. <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"ID\", \"Message\", {callback}] call ace_common_fnc_sendRequest\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\n\nif (isPlayer _target) then {\n    // Pass request on to target locality for player accept/decline.\n    [QGVAR(receiveRequest), [_caller, _target, _requestID, _requestMessage, _callBack], _target] call CBA_fnc_targetEvent;\n} else {\n    // accept it, since it's an AI.\n    [_caller, _target, true] call compile _callBack;\n};\n",
        "functionName": "ace_common_fnc_sendRequest"
      },
      {
        "fileName": "fnc_serverLog.sqf",
        "content": "/*\n * Author: esteldunedain\n * Log a RPT messaged on just the server\n *\n * Arguments:\n * 0: Text to display <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"x happened\"] call ace_common_fnc_serverLog;\n *\n * Public: no\n */\n#include \"script_component.hpp\"\n\nparams [[\"_msg\", \"\", [\"\"]]];\n\nif (isServer) then {\n    diag_log text _msg;\n} else {\n    [QGVAR(serverLog), _this] call CBA_fnc_serverEvent;\n};\n",
        "functionName": "ace_common_fnc_serverLog"
      },
      {
        "fileName": "fnc_setApproximateVariablePublic.sqf",
        "content": "/*\n * Author: esteldunedain\n * Publish a variable if it's different enough from the previously published value.\n *\n * Arguments:\n * 0: Object the variable should be assigned to <OBJECT>\n * 1: Name of the variable <STRING>\n * 2: Value of the variable <ANY>\n * 3: Absolute tolerance <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"balls\", 2, 0.1] call ace_common_fnc_setApproximateVariablePublic;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_varName\", \"_value\", \"_tolerance\"];\nTRACE_4(\"params\",_object,_varName,_value,_tolerance);\n\n// Set exact new value locally\n_object setVariable [_varName, _value];\n\n// Exit if in SP - \"duh\"\nif (!isMultiplayer) exitWith {};\n\n// If new value is not different\nprivate _oldVarName = format [\"ACE_oldValue_%1\", _varName];\nprivate _oldValue = _object getVariable [_oldVarName, -100000];\n\n// Exit if new value is not different enough from the old onedifferent\nif (abs(_value - _oldValue) < _tolerance) exitWith {};\n\n// Publish the new value:\n_object setVariable [_varName, _value, true];\n_object setVariable [_oldVarName, _value];\n\nTRACE_2(\"Published variable:\", _varName, _value);\n",
        "functionName": "ace_common_fnc_setApproximateVariablePublic"
      },
      {
        "fileName": "fnc_setDefinedVariable.sqf",
        "content": "/*\n * Author: Glowbal\n * setVariable value\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: variableName <STRING>\n * 2: value <ANY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"var\", 5] call ace_common_fnc_setDefinedVariable\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_variable\", \"_value\", \"_global\"];\n\nif (isNil \"_global\") then {\n    private _definedVariable = [_variable] call FUNC(getDefinedVariableInfo);\n\n    _definedVariable params [\"\", \"\",  [\"_global\", false]];\n};\n\nif (!isNil \"_value\") exitWith {\n    _unit setVariable [_variable, _value, _global];\n};\n\n_unit setVariable [_variable, nil, _global];\n",
        "functionName": "ace_common_fnc_setDefinedVariable"
      },
      {
        "fileName": "fnc_setDisableUserInputStatus.sqf",
        "content": "/*\n * Author: Glowbal\n * Disables the user input. Works stacked.\n *\n * Arguments:\n * 0: id <STRING>\n * 1: disable <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"id\", true] call ace_common_fnc_setDisableUserInputStatus\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_id\", \"_disable\"];\n\nif (isNil QGVAR(DISABLE_USER_INPUT_COLLECTION)) then {\n    GVAR(DISABLE_USER_INPUT_COLLECTION) = [];\n};\n\nif (_disable) then {\n    GVAR(DISABLE_USER_INPUT_COLLECTION) pushBack _id;\n    [true] call FUNC(disableUserInput);\n} else {\n    GVAR(DISABLE_USER_INPUT_COLLECTION) = GVAR(DISABLE_USER_INPUT_COLLECTION) - [_id];\n    if (GVAR(DISABLE_USER_INPUT_COLLECTION) isEqualTo []) then {\n        [false] call FUNC(disableUserInput);\n    };\n};\n",
        "functionName": "ace_common_fnc_setDisableUserInputStatus"
      },
      {
        "fileName": "fnc_setHearingCapability.sqf",
        "content": "/*\n * Author: Glowbal\n * Handle set volume calls. Will use the lowest available volume setting.\n *\n * Arguments:\n * 0: id <STRING>\n * 1: settings <NUMBER>\n * 2: add [true] OR remove [false] (default: true) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"earwax\", 0.5, true] call ace_common_fnc_setHearingCapability\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_id\", \"_setting\", [\"_add\", true]];\n\nprivate _exists = false;\nprivate _lowestVolume = 1;\n\nGVAR(setHearingCapabilityMap) = GVAR(setHearingCapabilityMap) select {\n    _x params [\"_xID\", \"_xSetting\"];\n    if (_id == _xID) then {\n        _exists = true;\n        if (_add) then {\n            _x set [1, _setting];\n            _lowestVolume = _lowestVolume min _setting;\n            true\n        } else {\n            false\n        };\n    } else {\n        _lowestVolume = _lowestVolume min _xSetting;\n        true\n    };\n};\n\nif (!_exists && _add) then {\n    _lowestVolume = _lowestVolume min _setting;\n    GVAR(setHearingCapabilityMap) pushBack [_id, _setting];\n};\n\n// in game sounds\n0 fadeSound _lowestVolume;\n0 fadeRadio _lowestVolume;\n0 fadeMusic _lowestVolume;\n\n// Set Radio mod variables.\nACE_player setVariable [\"tf_globalVolume\", _lowestVolume];\nif (!isNil \"acre_api_fnc_setGlobalVolume\") then { [_lowestVolume^0.33] call acre_api_fnc_setGlobalVolume; };\n",
        "functionName": "ace_common_fnc_setHearingCapability"
      },
      {
        "fileName": "fnc_setName.sqf",
        "content": "/*\n * Author: commy2\n * Sets the name variable of the object. Used to prevent issues with the name command.\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_setName\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_3(\"setName\",_unit,alive _unit,name _unit);\n\nif (isNull _unit || {!alive _unit}) exitWith {};\n\nif (_unit isKindOf \"CAManBase\") then {\n    private _sanitizedName = [name _unit, true] call FUNC(sanitizeString);\n    private _rawName = [name _unit, false] call FUNC(sanitizeString);\n\n    _unit setVariable [\"ACE_Name\", _sanitizedName, true];\n    _unit setVariable [\"ACE_NameRaw\", _rawName, true];\n};\n",
        "functionName": "ace_common_fnc_setName"
      },
      {
        "fileName": "fnc_setParameter.sqf",
        "content": "/*\n * Author: esteldunedain\n * Sets the value of an ACE_Parameter and makes it public.\n *\n * Arguments:\n * 0: Parameter name <STRING>\n * 1: Value <BOOL, NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"Name\", 5] call ace_common_fnc_setParameter\n *\n * Public: Yes\n *\n * Deprecated\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_value\"];\n\n// Hack to keep backward compatibility for the moment\nif (typeName (missionNamespace getVariable _name) == \"BOOL\") then {\n    if (_value isEqualType 0) then {\n        _value = _value > 0;\n    };\n};\n\nmissionNamespace setVariable [_name, _value];\npublicVariable _name;\n",
        "functionName": "ace_common_fnc_setParameter"
      },
      {
        "fileName": "fnc_setPitchBankYaw.sqf",
        "content": "/*\n * Author: Bohemia Interactive edit by KoffeinFlummi\n * Sets the value of an ACE_Parameter and makes it public.\n *\n * Arguments:\n * 0: Unit/Vehicle <OBJECT>\n * 1: Pitch <NUMBER>\n * 2: Yaw <NUMBER>\n * 3: Bank <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 1, 2, 3] call ace_common_fnc_setPitchBankYaw\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_aroundX\", \"_aroundY\", \"_aroundZ\"];\n\n_aroundZ = - _aroundZ;\n\nprivate _dirX = 0;\nprivate _dirY = 1;\nprivate _dirZ = 0;\nprivate _upX = 0;\nprivate _upY = 0;\nprivate _upZ = 1;\n\nif (_aroundX != 0) then {\n    _dirY = cos _aroundX;\n    _dirZ = sin _aroundX;\n    _upY = -sin _aroundX;\n    _upZ = cos _aroundX;\n};\n\nif (_aroundY != 0) then {\n    _dirX = _dirZ * sin _aroundY;\n    _dirZ = _dirZ * cos _aroundY;\n    _upX = _upZ * sin _aroundY;\n    _upZ = _upZ * cos _aroundY;\n};\n\nif (_aroundZ != 0) then {\n    private _dirXTemp = _dirX;\n    _dirX = (_dirXTemp* cos _aroundZ) - (_dirY * sin _aroundZ);\n    _dirY = (_dirY * cos _aroundZ) + (_dirXTemp * sin _aroundZ);\n\n    private _upXTemp = _upX;\n    _upX = (_upXTemp * cos _aroundZ) - (_upY * sin _aroundZ);\n    _upY = (_upY * cos _aroundZ) + (_upXTemp * sin _aroundZ);\n};\n\nprivate _dir = [_dirX, _dirY, _dirZ];\nprivate _up = [_upX, _upY, _upZ];\n\n_object setVectorDirAndUp [_dir,_up];\n",
        "functionName": "ace_common_fnc_setPitchBankYaw"
      },
      {
        "fileName": "fnc_setPlayerOwner.sqf",
        "content": "/*\n * Author: PabstMirror\n * Sets the player's owner id as a variable on his player ojbect.\n * Should be called on all machines (including server)\n * Note: Needs to wait for CBA_clientID to be recieved from server.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_common_fnc_setPlayerOwner\n *\n * Public: No\n */\n\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nif (missionNameSpace getVariable [QGVAR(setPlayerOwnerRunning), false]) exitWith {};\nGVAR(setPlayerOwnerRunning) = true;\n\nif (isServer) then {\n    addMissionEventHandler [\"HandleDisconnect\", {\n        params [\"_dcPlayer\"];\n        TRACE_1(\"HandleDisconnect eh\",_dcPlayer);\n        if (!isNil {_dcPlayer getVariable QGVAR(playerOwner)}) then {\n            _dcPlayer setVariable [QGVAR(playerOwner), nil, true];\n        };\n    }];\n};\n\nif (hasInterface) then {\n    [{\n        (!isNil \"CBA_clientID\") && {CBA_clientID > -1}\n    }, {\n        TRACE_1(\"CBA_clientID ready\",CBA_clientID);\n\n        [\"unit\", {\n            params [\"_newUnit\", \"_oldUnit\"];\n            TRACE_2(\"unit changed\",_newUnit,_oldUnit);\n            if ((_oldUnit getVariable [QGVAR(playerOwner), -1]) == CBA_clientID) then {\n                _oldUnit setVariable [QGVAR(playerOwner), nil, true];\n            };\n            if (alive _newUnit) then {\n                _newUnit setVariable [QGVAR(playerOwner), CBA_clientID, true];\n            };\n        }, true] call CBA_fnc_addPlayerEventHandler;\n\n    }, []] call CBA_fnc_waitUntilAndExecute;\n};\n\n",
        "functionName": "ace_common_fnc_setPlayerOwner"
      },
      {
        "fileName": "fnc_setProne.sqf",
        "content": "/*\n * Author: Glowbal\n * Force a unit to go prone\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_setProne\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n[\n    _unit,\n    [\"amovppnemstpsnonwnondnon\", \"amovppnemstpsraswrfldnon\", \"amovppnemstpsraswlnrdnon\", \"amovppnemstpsraswpstdnon\"] select (([primaryWeapon _unit, secondaryWeapon _unit, handgunWeapon _unit] find currentWeapon _unit) + 1)\n] call FUNC(doAnimation);\n",
        "functionName": "ace_common_fnc_setProne"
      },
      {
        "fileName": "fnc_setSetting.sqf",
        "content": "/*\n * Author: esteldunedain\n * Change the value of an existing setting if it was not previously forced. Force if neccesary.\n * If executed on clients it has local effect.\n * If executed on server it can have global effect if the last parameter is set to true.\n *\n * Arguments:\n * 0: Setting name <STRING>\n * 1: Value <ANY>\n * 2: Force it? (default: false) <BOOL>\n * 3: Broadcast the change to all clients (default: false) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ace_map_gestures_enabled\", true, false, true] call ace_common_fnc_setSetting\n *\n * Public: No\n */\n#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_value\", [\"_force\", false], [\"_broadcastChanges\", false]];\nTRACE_4(\"setSetting\",_name,_value,_force,_broadcastChanges);\n\nif (!isServer) exitWith {};\nif (!_broadcastChanges) exitWith {\n    ERROR_1(\"Setting [%1] - SetSetting no longer supports non-global settings\",_name);\n};\n\nif ([_settingName, \"mission\"] call CBA_settings_fnc_isForced) then {\n    WARNING_1(\"Setting [%1] - Already mission forced - Ignoring\",_settingName);\n};\n\n[QGVAR(setSetting), [_name, _value], (format [QGVAR(setSetting_%1), _name])] call CBA_fnc_globalEventJIP;\n",
        "functionName": "ace_common_fnc_setSetting"
      },
      {
        "fileName": "fnc_setVariableJIP.sqf",
        "content": "/*\n * Author: commy2\n * Sets a public object namespace variable that gets reset with the same value after respawn, so JIP clients keep the value.\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Variable name <STRING>\n * 2: Any value <ANY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"varname\", 5] call ace_common_fnc_setVariableJIP\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_varName\", \"_value\"];\n\nprivate _respawnVariables = _unit getVariable [\"ACE_respawnVariables\", []];\n\nif !(_varName in _respawnVariables) then {\n    _respawnVariables pushBack _varName;\n    _unit setVariable [\"ACE_respawnVariables\", _respawnVariables, true];\n};\n\n_unit setVariable [_varName, _value, true];\n",
        "functionName": "ace_common_fnc_setVariableJIP"
      },
      {
        "fileName": "fnc_setVariablePublic.sqf",
        "content": "/*\n * Author: commy2 and CAA-Picard and joko and PabstMirror\n * Publish a variable, but wait a certain amount of time before allowing it to be published it again.\n *\n * Arguments:\n * 0: Object the variable should be assigned to <OBJECT>\n * 1: Name of the variable <STRING>\n * 2: Value of the variable <ANY>\n * 3: Embargo delay <NUMBER> (Optional. Default: 1)\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"balls\", 2, 1] call ace_common_fnc_setVariablePublic;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_varName\", \"_value\", [\"_delay\", 1]];\nTRACE_4(\"params\",_object,_varName,_value,_delay);\n\n// set value locally\n_object setVariable [_varName, _value];\n\n// Exit if in SP - \"duh\"\nif (!isMultiplayer) exitWith {};\n\n// If we are on embargo, exit\nif (_object isEqualTo (_object getVariable [format [\"ACE_onEmbargo_%1\", _varName], objNull])) exitWith {};\n\n// Publish Now and set last update time:\n_object setVariable [_varName, _value, true];\n_object setVariable [format [\"ACE_onEmbargo_%1\", _varName], _object];\n\nTRACE_2(\"Starting Embargo\", _varName, _delay);\n\n[{\n    params [\"_object\", \"_varName\", \"_value\"];\n    if (isNull _object) exitWith {TRACE_1(\"objNull\",_this);};\n\n    _object setVariable [format [\"ACE_onEmbargo_%1\", _varName], nil]; //Remove Embargo\n    private _curValue = _object getVariable _varName;\n\n    TRACE_4(\"End of embargo\", _object, _varName, _value, _curValue);\n\n    //If value at start of embargo doesn't equal current, then broadcast and start new embargo\n    if (!(_value isEqualTo _curValue)) then {\n        _this set [2, _curValue];\n        _this call FUNC(setVariablePublic);\n    };\n}, _this, _delay] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_common_fnc_setVariablePublic"
      },
      {
        "fileName": "fnc_setVolume.sqf",
        "content": "/*\n * Author: Glowbal\n * Sets the volume of the game, including third party radio modifications such as TFAR and ACRE.\n *\n * Arguments:\n * 0: setVolume (default: false) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_common_fnc_setVolume\n *\n * Public: Yes\n *\n * Note: Uses player\n */\n#include \"script_component.hpp\"\n\n#define MUTED_LEVEL 0.2\n#define NORMAL_LEVEL 1\n#define NO_SOUND    0\n\nparams [[\"_setVolume\", false]];\n\nif (_setVolume) then {\n    // Vanilla Game\n    2 fadeSound NORMAL_LEVEL;\n\n    // TFAR\n    player setVariable [\"tf_voiceVolume\", NORMAL_LEVEL, true];\n    player setVariable [\"tf_globalVolume\", NORMAL_LEVEL];\n    player setVariable [\"tf_unable_to_use_radio\", false];\n\n    // ACRE2\n    if (!isNil \"acre_api_fnc_setGlobalVolume\") then { [NORMAL_LEVEL^0.33] call acre_api_fnc_setGlobalVolume; };\n    player setVariable [\"acre_sys_core_isDisabled\", false, true];\n\n} else {\n    // Vanilla Game\n    2 fadeSound MUTED_LEVEL;\n\n    // TFAR\n    player setVariable [\"tf_voiceVolume\", NO_SOUND, true];\n    player setVariable [\"tf_globalVolume\", MUTED_LEVEL];\n    player setVariable [\"tf_unable_to_use_radio\", true];\n\n    // ACRE2\n    if (!isNil \"acre_api_fnc_setGlobalVolume\") then { [MUTED_LEVEL^0.33] call acre_api_fnc_setGlobalVolume; };\n    player setVariable [\"acre_sys_core_isDisabled\", true, true];\n\n};\n",
        "functionName": "ace_common_fnc_setVolume"
      },
      {
        "fileName": "fnc_showHud.sqf",
        "content": "/*\n * Author: PabstMirror\n * Allows multiple sources to not overwrite showHud command.\n * Bitwise AND Logic (a single false in a mask will make it false).\n *\n * Arguments:\n * 0: Source ID <STRING> (default: \"\")\n * 1: Show Hud Bool Array (8 to set, empty to remove) <ARRAY> (default: [])\n * - [hud, info, radar, compass, direction, menu, group, cursors]\n * - hud: Boolean - show scripted HUD (same as normal showHUD true/false)\n * - info: Boolean - show vehicle + soldier info (hides weapon info from the HUD as well)\n * - radar: Boolean - show vehicle radar\n * - compass: Boolean - show vehicle compass\n * - direction: Boolean - show tank direction indicator (not present in vanilla Arma 3)\n * - menu: Boolean - show commanding menu (hides HC related menus)\n * - group: Boolean - show group info bar (hides squad leader info bar)\n * - cursors: Boolean - show HUD weapon cursors (connected with scripted HUD)\n *\n * Return Value:\n * Resulting ShowHud Array <ARRAY>\n *\n * Example:\n * [\"hideHud\", [false, true, true, true, true, true, true, false]] call ace_common_fnc_showHud; //This is equivalent to the old showHud false\n * [] call ace_common_fnc_showHud; //sets `showHud` and returns the result array used\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {[-1]};\n\nparams [[\"_reason\", \"\", [\"\"]], [\"_mask\", [], [[]], [0,8]]];\n\nif (isArray (missionConfigFile >> \"showHUD\")) then {\n    //(showHud = 0;) is fine - the array is the problem\n    WARNING(\"showHUD[] in Description.ext breaks the showHud command\");\n};\n\nif (_reason != \"\") then {\n    _reason = toLower _reason;\n    if (_mask isEqualTo []) then {\n        TRACE_2(\"Setting\", _reason, _mask);\n        [GVAR(showHudHash), _reason] call CBA_fnc_hashRem;\n    } else {\n        TRACE_2(\"Removing\", _reason, _mask);\n        [GVAR(showHudHash), _reason, _mask] call CBA_fnc_hashSet;\n    };\n};\n\nGVAR(showHudHash) params [\"\", \"_reasons\", \"_masks\"];\nprivate _resultMask = [];\n\nfor \"_index\" from 0 to 7 do {\n    private _set = true; //Default to true\n    {\n        if (!(_x select _index)) exitWith {\n            _set = false; //Any false will make it false\n        };\n    } forEach _masks;\n    _resultMask pushBack _set;\n};\n\nTRACE_2(\"showHud\", _resultMask, _reasons);\nshowHud _resultMask;\n\n_resultMask\n",
        "functionName": "ace_common_fnc_showHud"
      },
      {
        "fileName": "fnc_showUser.sqf",
        "content": "/*\n * Author: commy2\n * hint the Variable ACE_isUsedBy from the input Object every frame\n *\n * Arguments:\n * <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_common_fnc_showUser\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!isNil QGVAR(showUserPFH)) then {\n    [GVAR(showUserPFH)] call CBA_fnc_removePerFrameHandler;\n};\n\nGVAR(showUserPFH) = [{\n    hintSilent str ((_this select 0) getVariable [\"ACE_isUsedBy\", objNull]);\n}, 0, _this] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_common_fnc_showUser"
      },
      {
        "fileName": "fnc_statusEffect_addType.sqf",
        "content": "/*\n * Author: PabstMirror\n * Adds a status effect that will be handled.\n *\n * Arguments:\n * 0: Status Effect Name, this should match a corresponding event name <STRING>\n * 1: Send event globaly <BOOL>\n * 2: Common Effect Reaons to pre-seed durring init <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"setCaptive\", true, []] call ace_common_fnc_statusEffect_addType\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [[\"_name\", \"\", [\"\"]], [\"_isGlobal\", false, [false]], [\"_commonReasonsArray\", [], [[]]]];\nTRACE_3(\"params\",_name,_isGlobal,_commonReasonsArray);\n\nif (_name == \"\") exitWith {ERROR_1(\"addStatusEffect - Bad Name %1\", _this)};\nif (_name in GVAR(statusEffect_Names)) exitWith {WARNING_1(\"addStatusEffect - Effect Already Added (note, will not update global bit) %1\", _this)};\n\nGVAR(statusEffect_Names) pushBack _name;\nGVAR(statusEffect_isGlobal) pushBack _isGlobal;\n\n//We add reasons at any time, but more efficenet to add all common ones at one time during init\nif (isServer && {!(_commonReasonsArray isEqualTo [])}) then {\n    //Switch case to lower:\n    _commonReasonsArray = _commonReasonsArray apply { toLower _x };\n    missionNamespace setVariable [(format [QGVAR(statusEffects_%1), _name]), _commonReasonsArray, true];\n};\n",
        "functionName": "ace_common_fnc_statusEffect_addType"
      },
      {
        "fileName": "fnc_statusEffect_get.sqf",
        "content": "/*\n * Author: PabstMirror\n * Retrives list of current status effects\n *\n * Arguments:\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\n * 1: Effect Name <STRING>\n *\n * Return Value:\n * Effect status <ARRAY>\n *  0: is activly set (if false, the effect is ignored and never modified) <BOOL>\n *  1: reasons why it is set true (list of strings, count of 0 = false, 1+ = true) <ARRAY>\n *\n * Example:\n * [player, \"forceWalk\"] call ace_common_fnc_statusEffect_get\n *\n * Public: Yes\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [[\"_object\", objNull, [objNull]], [\"_effectName\", \"\", [\"\"]]];\nTRACE_2(\"params\",_object,_effectName);\n\nif (isNull _object) exitWith {\n    TRACE_1(\"null\",_object);\n    [false, []]\n};\n\n[_object, false] call FUNC(statusEffect_resetVariables); //Check for mismatch\n\n//List of reasons\nprivate _statusReasons = missionNamespace getVariable [(format [QGVAR(statusEffects_%1), _effectName]), []];\nif (_statusReasons isEqualTo []) exitWith {\n    TRACE_1(\"no reasons - bad effect?\",_statusReasons);\n    [false, []]\n};\n\n//Get Effect Number\nprivate _effectVarName = format [QGVAR(effect_%1), _effectName];\nprivate _effectNumber = _object getVariable [_effectVarName, -1];\nTRACE_2(\"current\",_effectVarName,_effectNumber);\n\nif (_effectNumber == -1) exitWith { //Nil array - no effect\n    [false, []]\n};\nif (_effectNumber == 0) exitWith { //empty array - false effect\n    [true, []]\n};\n\n//if no change: skip sending publicVar and events\nprivate _effectBoolArray = [_effectNumber, count _statusReasons] call FUNC(binarizeNumber);\nTRACE_2(\"bitArray\",_statusIndex,_effectBoolArray);\n\nprivate _activeEffects = [];\n{\n    if (_x) then {\n        _activeEffects pushBack (_statusReasons select _forEachIndex);\n    };\n} forEach _effectBoolArray;\n\n//non-empty array - true effect\n[true, _activeEffects]\n",
        "functionName": "ace_common_fnc_statusEffect_get"
      },
      {
        "fileName": "fnc_statusEffect_localEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles locality switch, runs a respawn check and then reapplies all effect events.\n *\n * Arguments:\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\n * 1: isLocal <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, true] call ace_common_fnc_statusEffect_localEH\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_isLocal\"];\nTRACE_2(\"params\",_object,_isLocal);\n\n//Only run this after the settings are initialized\n//Need to wait for all EH to be installed (local event will happen between pre and post init)\nif !(GVAR(settingsInitFinished)) exitWith {\n    TRACE_1(\"pushing to runAtSettingsInitialized\", _this);\n    GVAR(runAtSettingsInitialized) pushBack [FUNC(statusEffect_localEH), _this];\n};\n\nif (!_isLocal) exitWith {TRACE_1(\"object no longer local\", _this)};\nif (isNull _object) exitWith {TRACE_1(\"object null\", _this)};\n\n //Reset any variables because of respawn\n[_object, false] call FUNC(statusEffect_resetVariables);\n\n//Send all Variables to client\n[_object, \"\"] call FUNC(statusEffect_sendEffects);\n",
        "functionName": "ace_common_fnc_statusEffect_localEH"
      },
      {
        "fileName": "fnc_statusEffect_resetVariables.sqf",
        "content": "/*\n * Author: PabstMirror\n * Resets all effect numbers to 0 when an object respawns (but does not apply the effect event).\n *\n * Arguments:\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, true] call ace_common_fnc_statusEffect_resetVariables\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [[\"_object\", objNull, [objNull]], [\"_setObjectRef\", false, [false]]];\nTRACE_2(\"params\",_object,_setObjectRef);\n\nif (isNull _object) exitWith {};\n\nprivate _objectRef = _object getVariable QGVAR(statusEffect_object);\nTRACE_2(\"testing\",_object,_objectRef);\n\n// If nothing was ever set, or objects match, exit (always true unless respawned)\nif (isNil \"_objectRef\") exitWith {\n    if (_setObjectRef) then {\n        _object setVariable [QGVAR(statusEffect_object), _object, true]; //explicitly set new object ref\n    };\n};\nif (_object == _objectRef) exitWith {};\n\n//Mismatch, so if effect has ever been defined, reset to 0\n{\n    private _effectVarName = format [QGVAR(effect_%1), _x];\n    private _effectNumber = _object getVariable [_effectVarName, -1];\n    if (_effectNumber != -1) then {\n        TRACE_2(\"forced reset defined array on object mismatch\",_x,_effectNumber);\n        _object setVariable [_effectVarName, 0, true]; //This always resets to 0 (not -1/nil)!\n    };\n} forEach GVAR(statusEffect_Names);\n\n_object setVariable [QGVAR(statusEffect_object), _object, true];\n",
        "functionName": "ace_common_fnc_statusEffect_resetVariables"
      },
      {
        "fileName": "fnc_statusEffect_respawnEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the Respawn Event Handler to reset effects.\n *\n * Arguments:\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, objNull] call ace_common_fnc_statusEffect_respawnEH\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\nTRACE_1(\"params\",_object);\n\n//Only run this after the settings are initialized\n//Need to wait for all EH to be installed (local event will happen between pre and post init)\nif !(GVAR(settingsInitFinished)) exitWith {\n    TRACE_1(\"pushing to runAtSettingsInitialized\", _this);\n    GVAR(runAtSettingsInitialized) pushBack [FUNC(statusEffect_respawnEH), _this];\n};\n\nif (!local _object) exitWith {TRACE_1(\"object no longer local\", _this)};\nif (isNull _object) exitWith {TRACE_1(\"object null\", _this)};\n\n //Reset any variables on \"real\" respawn\n[_object, false] call FUNC(statusEffect_resetVariables);\n\n//Send all Variables to client\n[_object, \"\"] call FUNC(statusEffect_sendEffects);\n",
        "functionName": "ace_common_fnc_statusEffect_respawnEH"
      },
      {
        "fileName": "fnc_statusEffect_sendEffects.sqf",
        "content": "/*\n * Author: PabstMirror\n * Sends all status effects for an object (can be run on non-local objects)\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Effect name (or \"\" to send all) <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"\"] call ace_common_fnc_statusEffect_sendEffects\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [[\"_object\", objNull, [objNull]], [\"_effectName\", \"\", [\"\"]]];\nTRACE_2(\"params\",_object,_effectName);\n\nif (isNull _object) exitWith {};\n\n{\n    if ((_effectName == \"\") || {_effectName == _x}) then {\n        private _effectVarName = format [QGVAR(effect_%1), _x];\n        private _effectNumber = _object getVariable [_effectVarName, -1];\n\n        //We only do anything if the effect has been defined at some point in the game for this unit\n        TRACE_2(\"checking if event is nil\",_x,_effectNumber);\n        if (_effectNumber != -1) then {\n            private _eventName = format [QGVAR(%1), _x];\n            if (GVAR(statusEffect_isGlobal) select _forEachIndex) then {\n                TRACE_2(\"Sending Global Event\", _object, _effectNumber);\n                [_eventName, [_object, _effectNumber]] call CBA_fnc_globalEvent;\n            } else {\n                TRACE_2(\"Sending Target Event\", _object, _effectNumber);\n                [_eventName, [_object, _effectNumber], _object] call CBA_fnc_targetEvent;\n            };\n        };\n    };\n} forEach GVAR(statusEffect_Names);\n",
        "functionName": "ace_common_fnc_statusEffect_sendEffects"
      },
      {
        "fileName": "fnc_statusEffect_set.sqf",
        "content": "/*\n * Author: PabstMirror\n * Adds or removes an id to a status effect and will send an event to apply.\n *\n * Arguments:\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\n * 1: Effect Name <STRING>\n * 2: Unique Reason ID <STRING>\n * 3: Is Set (true adds/false removes) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"setCaptive\", \"reason1\", true] call ace_common_fnc_statusEffect_set\n *\n * Public: Yes\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [[\"_object\", objNull, [objNull]], [\"_effectName\", \"\", [\"\"]], [\"_ID\", \"\", [\"\"]], [\"_set\", true, [false]]];\nTRACE_4(\"params\",_object,_effectName,_ID,_set);\n\n//Only run this after the settings are initialized\nif !(GVAR(settingsInitFinished)) exitWith {\n    TRACE_1(\"pushing to runAtSettingsInitialized\", _this);\n    GVAR(runAtSettingsInitialized) pushBack [FUNC(statusEffect_set), _this];\n};\n\nif (isNull _object) exitWith {TRACE_1(\"null\",_object);};\n\n[_object, true] call FUNC(statusEffect_resetVariables); //Check for mismatch, and set object ref\n\n//check ID case and set globaly if not already set:\n_ID = toLower _ID;\nprivate _statusReasons = missionNamespace getVariable [(format [QGVAR(statusEffects_%1), _effectName]), []];\nprivate _statusIndex = _statusReasons find _ID;\nif (_statusIndex == -1) then {\n    TRACE_2(\"ID not in global reasons, adding\",_statusReasons,_ID);\n    _statusIndex = _statusReasons pushBack _ID;\n    missionNamespace setVariable [(format [QGVAR(statusEffects_%1), _effectName]), _statusReasons, true];\n};\n\nprivate _effectVarName = format [QGVAR(effect_%1), _effectName];\nprivate _effectNumber = _object getVariable [_effectVarName, -1];\nTRACE_2(\"current\",_effectVarName,_effectNumber);\n\nif ((_effectNumber == -1) && {!_set}) exitWith {\n    //Optimization for modules that always set an ID to false even if never set true\n    TRACE_2(\"Set False on nil array, exiting\",_set,_effectNumber);\n};\n\nif (_effectNumber == -1) then {_effectNumber = 0}; //reset (-1/nil) to 0\n\n//if no change: skip sending publicVar and events\nprivate _effectBoolArray = [_effectNumber, count _statusReasons] call FUNC(binarizeNumber);\nTRACE_2(\"bitArray\",_statusIndex,_effectBoolArray);\nif (_set isEqualTo (_effectBoolArray select _statusIndex)) exitWith {\n    TRACE_2(\"No Change, exiting\",_set,_effectBoolArray select _statusIndex);\n};\n\nTRACE_2(\"Setting to new value\",_set,_effectBoolArray select _statusIndex);\n_effectBoolArray set [_statusIndex, _set];\n_effectNumber = _effectBoolArray call FUNC(toBitmask); //Convert array back to number\n\nTRACE_2(\"Saving globaly\",_effectVarName,_effectNumber);\n_object setVariable [_effectVarName, _effectNumber, true];\n\n[_object, _effectName] call FUNC(statusEffect_sendEffects);\n",
        "functionName": "ace_common_fnc_statusEffect_set"
      },
      {
        "fileName": "fnc_stringCompare.sqf",
        "content": "/*\n * Author: bovine3dom\n * Determines whether one string matches another and how many characters match. Case insensitive.\n *\n * Arguments:\n * 0: stringA <STRING>\n * 1: stringB <STRING>\n *\n * Return Value:\n * Number of matching characters <NUMBER>\n *\n * Example:\n * [\"a\", \"b\"] call ace_common_fnc_stringCompare\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_string\", \"_searchTerm\"];\n\n_string = toLower _string; // removes case sensitivity\n_searchTerm = toLower _searchTerm;\n\nprivate _arraySearchTerm = toArray _searchTerm; // splits string into array of unicode decimals\nprivate _arrayString = toArray _string;\nprivate _sizeSearchTerm = count _arraySearchTerm; // We only measure the array once\nprivate _sizeString = count _arrayString;\n\nprivate _matchingCharacters = 0;\nprivate _searchIterator = 0;\nprivate _targetIterator = 0;\n\nwhile {_searchIterator < _sizeSearchTerm && _targetIterator < _sizeString} do { // Prevents us from going out of bounds\n    if (_arraySearchTerm select _searchIterator == _arrayString select _targetIterator) then { // If we have a match, start looking for the next character in the search term\n        _matchingCharacters = _matchingCharacters + 1;\n        _searchIterator = _searchIterator + 1\n    };\n\n    _targetIterator = _targetIterator + 1; // Look at the next character in the string\n};\n\n_matchingCharacters\n",
        "functionName": "ace_common_fnc_stringCompare"
      },
      {
        "fileName": "fnc_stringToColoredText.sqf",
        "content": "/*\n * Author: commy2\n * Create a centered, colored text.\n *\n * Arguments:\n * 0: Text <ANY>\n * 1: Color <ARRAY>\n *\n * Return Value:\n * Text <STRING>\n *\n * Example:\n * [\"text\", [0, 1, 2]] call ace_common_fnc_stringToColoredText\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_string\", \"_color\"];\n\n_string = format [\"%1\", _string];\n\n_color = (\n    [255 * (_color select 0), 2] call FUNC(toHex)\n) + (\n    [255 * (_color select 1), 2] call FUNC(toHex)\n) + (\n    [255 * (_color select 2), 2] call FUNC(toHex)\n);\n\nparseText format [\"<t align='center' color='#%2' >%1</t>\", _string, _color]\n",
        "functionName": "ace_common_fnc_stringToColoredText"
      },
      {
        "fileName": "fnc_switchToGroupSide.sqf",
        "content": "/*\n * Author: Glowbal\n * Stack group switches. Will always trace back to original group.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: switch <BOOLEAN>\n * 2: id <STRING>\n * 3: side <SIDE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true, \"id\", SIDE] call ace_common_fnc_switchToGroupSide\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull], [\"_switch\", false], [\"_id\", \"\"], [\"_side\", sideUnknown]];\n\nprivate _previousGroupsList = _unit getVariable [QGVAR(previousGroupSwitchTo), []];\n\nif (_switch) then {\n    // go forward\n    private _previousGroup = group _unit;\n    private _originalSide = side group _unit;\n\n    if (count units _previousGroup == 1 && _originalSide == _side) exitWith {\n        [format [\"Current group has only 1 member and is of same side as switch. Not switching unit %1\", _id]] call FUNC(debug);\n    };\n\n    private _newGroup = createGroup _side;\n    [_unit] joinSilent _newGroup;\n\n    _previousGroupsList pushBack [_previousGroup, _originalSide, _id, true];\n    _unit setVariable [QGVAR(previousGroupSwitchTo), _previousGroupsList, true];\n} else {\n    // go one back\n    {\n        if (_id == (_x select 2)) exitWith {\n            _x set [ 3, false];\n            _previousGroupsList set [_forEachIndex, _x];\n            [format[\"found group with ID: %1\", _id]] call FUNC(debug);\n        };\n    } forEach _previousGroupsList;\n\n    reverse _previousGroupsList;\n\n    {\n        if (_x select 3) exitWith {}; // stop at first id set to true\n        if !(_x select 3) then {\n            private _currentGroup = group _unit;\n            if (!isNull (_x select 0)) then {\n                [_unit] joinSilent (_x select 0);\n            } else {\n                private _newGroup = createGroup (_x select 1);\n                [_unit] joinSilent _newGroup;\n            };\n            if (count units _currentGroup == 0) then {\n                deleteGroup _currentGroup;\n            };\n            _previousGroupsList set [_forEachIndex, objNull];\n        };\n    } forEach _previousGroupsList;\n\n    _previousGroupsList = _previousGroupsList - [objNull];\n    reverse _previousGroupsList;    // we have to reverse again, to ensure the list is in the right order.\n\n    _unit setVariable [QGVAR(previousGroupSwitchTo), _previousGroupsList, true];\n};\n",
        "functionName": "ace_common_fnc_switchToGroupSide"
      },
      {
        "fileName": "fnc_syncedEvent.sqf",
        "content": "/*\n * Author: jaynus\n * Call and propegate a synced event\n *\n * Arguments:\n * 0: Name <STRING>\n * 1: Arguments <ARRAY>\n * 2: TTL <NUMBER, CODE> [Optional] for this specific event call\n *\n * Return Value:\n * Boolean of success <BOOL>\n *\n * Example:\n * [\"bob\", [args], 5] call ace_common_fnc_syncedEvent\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_args\", [\"_ttl\", 0]];\n\nif !([GVAR(syncedEvents), _name] call CBA_fnc_hashHasKey) exitWith {\n    ERROR_1(\"Synced event key [%1] not found (syncedEvent).\", _name);\n    false\n};\n\nprivate _eventData = [_name, _args, _ttl];\n\n[\"ACEe\", _eventData] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_common_fnc_syncedEvent"
      },
      {
        "fileName": "fnc_syncedEventPFH.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n * ?\n *\n * Arguments:\n * ?\n *\n * Return Value:\n * None\n *\n * Example:\n * [?] call ace_common_fnc_syncedEventPFH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!isServer) exitWith {false};\n\n// Walk through the local synced events and clean up anything thats already EOL\n// @TODO: This should be iteration limited to prevent FPS lag\n\n[GVAR(syncedEvents), {\n    _value params [\"_eventTime\", \"_eventLog\", \"_globalEventTTL\"];\n\n    private _newEventLog = [];\n\n    // @TODO: This should be iteration limited to prevent FPS lag\n    {\n        private _eventEntry = _x;\n        private _ttlReturn = true;\n\n        if (_globalEventTTL isEqualType {}) then {\n            _ttlReturn = [_eventTime, _eventEntry] call _globalEventTTL;\n        } else {\n            _ttlReturn = call {_globalEventTTL < 1 || {diag_tickTime < (_eventEntry select 0) + _globalEventTTL}};\n        };\n\n        if (_ttlReturn) then {\n            // Do event based TTL check\n            _eventEntry params [\"_time\", \"\", \"_eventTTL\"];\n\n            if (_eventTTL isEqualType {}) then {\n                _ttlReturn = [_eventTime, _eventEntry] call _eventTTL;\n            } else {\n                _ttlReturn = call {_eventTTL < 1 || {diag_tickTime < _time + _eventTTL}};\n            };\n        };\n\n        // Finally drop it if the TTL check fails\n        if (_ttlReturn) then {\n            _newEventLog pushBack _x;\n        };\n        false\n    } count _eventLog;\n\n    _value set [1, _newEventLog];\n    false\n}] call CBA_fnc_hashEachPair;\n\n// @TODO: Next, detect if we had a new request from a JIP player, and we need to continue syncing events\n",
        "functionName": "ace_common_fnc_syncedEventPFH"
      },
      {
        "fileName": "fnc_throttledPublicVariable.sqf",
        "content": "/*\n * Author: esteldunedain\n * Schedules the publishment of an object variable to reduce network overhead\n *\n * Arguments:\n * 0: Unit <OBJECT>.\n * 1: Variable name <STRING>\n * 2: Maximum delay <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_varName\", \"_maxDelay\"];\n\n// Create the publish scheduler PFH the first time\nif (isNil QGVAR(publishSchedId)) then {\n    GVAR(publishVarNames) = [];\n    GVAR(publishNextTime) = 1e7;\n\n    GVAR(publishSchedId) = [{\n        if (diag_tickTime > GVAR(publishNextTime)) then {\n            {\n                _x params [\"_unit\", \"_varName\"];\n                _unit setVariable [_varName, _unit getVariable _varName, true];\n                false\n            } count GVAR(publishVarNames);\n\n            GVAR(publishVarNames) = [];\n            GVAR(publishNextTime) = 1e7;\n        };\n    }, 0, []] call CBA_fnc_addPerFrameHandler;\n};\n\n// If the variable is not on the list\nif (GVAR(publishVarNames) find [_unit, _varName] == -1) exitWith {\n    GVAR(publishVarNames) pushBack [_unit, _varName];\n    GVAR(publishNextTime) = GVAR(publishNextTime) min (diag_tickTime + _maxDelay);\n};\n\n// If the variable is on the list\nGVAR(publishNextTime) = GVAR(publishNextTime) min (diag_tickTime + _maxDelay);\n",
        "functionName": "ace_common_fnc_throttledPublicVariable"
      },
      {
        "fileName": "fnc_toBin.sqf",
        "content": "/*\n * Author: commy2\n * Converts number to binary number\n *\n * Arguments:\n * A number <NUMBER>\n *\n * Return Value:\n * A binary number as string <STRING>\n *\n * Example:\n * [5] call ace_common_fnc_toBin\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_number\", [\"_minLength\", 1]];\n\nprivate _sign = [\"\", \"-\"] select (_number < 0);\n\n_number = round abs _number;\nprivate _bin = [\"\", \"0\"] select (_number == 0);\n\nwhile {_number > 0} do {\n    private _rest = str (_number mod 2);\n    _number = floor (_number / 2);\n    _bin = _rest + _bin;\n};\n\nwhile {count toArray _bin < _minLength} do {\n    _bin = \"0\" + _bin;\n};\n\n_sign + _bin // return\n",
        "functionName": "ace_common_fnc_toBin"
      },
      {
        "fileName": "fnc_toBitmask.sqf",
        "content": "/*\n * Author: commy2\n * Convert an array of booleans into a number.\n *\n * Arguments:\n * N: Booleans <ARRAY>\n *\n * Return Value:\n * Bitmask <NUMBER>\n *\n * Example:\n * [[true, false]] call ace_common_fnc_toBitmask\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nprivate _result = 0;\n\n{\n    if (_x) then {_result = _result + 2 ^ _forEachIndex};\n} forEach _this;\n\n_result\n",
        "functionName": "ace_common_fnc_toBitmask"
      },
      {
        "fileName": "fnc_toHex.sqf",
        "content": "/*\n * Author: commy2, esteldunedain\n * Converts number to hexadecimal number\n *\n * Arguments:\n * A number between 0 and 255 <NUMBER>\n *\n * Return Value:\n * A hexadecimal number as string <STRING>\n *\n * Example:\n * [154] call ace_common_fnc_toHex\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_number\"];\n\n_number = ((round abs _number) max 0) min 255;\n\nif (isNil QGVAR(hexArray)) then {\n    GVAR(hexArray) = [];\n\n    private _minLength = 2;\n\n    for [{_i = 0;}, {_i < 256}, {_i = _i + 1}] do {\n        private _num = _i;\n        private _hex = [\"\", \"0\"] select (_i == 0);\n\n        while {_num > 0} do {\n            private _rest = _num mod 16;\n            _rest = switch _rest do {\n                case 10 : {\"A\"};\n                case 11 : {\"B\"};\n                case 12 : {\"C\"};\n                case 13 : {\"D\"};\n                case 14 : {\"E\"};\n                case 15 : {\"F\"};\n                default {str _rest};\n            };\n            _num = floor (_num / 16);\n            _hex = _rest + _hex;\n        };\n\n        while {count toArray _hex < _minLength} do {\n            _hex = \"0\" + _hex;\n        };\n\n        GVAR(hexArray) pushBack _hex;\n    };\n};\n\nGVAR(hexArray) select _number // return\n",
        "functionName": "ace_common_fnc_toHex"
      },
      {
        "fileName": "fnc_toNumber.sqf",
        "content": "/*\n * Author: Garth de Wet (LH)\n * Takes a string/number and returns the number.\n *\n * Arguments:\n * 0: Value to attempt to convert to number or if number simply return number. <STRING, NUMBER>\n *\n * Return Value:\n * Number <NUMBER>\n *\n * Example:\n * number = [\"102\"] call ace_common_fnc_toNumber;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_value\"];\n\nif (_value isEqualType 0) exitWith {_value};\n\nparseNumber _value // return\n",
        "functionName": "ace_common_fnc_toNumber"
      },
      {
        "fileName": "fnc_translateToModelSpace.sqf",
        "content": "/*\n * Author: ACE-Team\n * ?\n *\n * Arguments:\n * <UNKNOWN>\n *\n * Return Value:\n * Something <UNKNOWN>\n *\n * Example:\n * [UNKNOWN] call ace_common_fnc_translateToModelSpace\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_matrix\", \"_offset\"];\n\nprivate _origin = getPosASL _object;\n\n_matrix params [\"_xVec\", \"_yVec\", \"_zVec\"];\n\n_offset params [\"_x\", \"_y\", \"_z\"];\n\n(_xVec vectorMultiply _x) vectorAdd (_yVec vectorMultiply _y) vectorAdd (_zVec vectorMultiply _z) vectorAdd _origin // return\n",
        "functionName": "ace_common_fnc_translateToModelSpace"
      },
      {
        "fileName": "fnc_translateToWeaponSpace.sqf",
        "content": "/*\n * Author: ACE-Team\n * ?\n *\n * Arguments:\n * <UNKOWN>\n *\n * Return Value:\n * Unknown <UNKNOWN>\n *\n * Example:\n * [UNKOWN] call ace_common_fnc_translateToWeaponSpace\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_matrix\", \"_offset\"];\n\nprivate _origin = getPosASL _object;\n\n_matrix params [\"_xVec\", \"_yVec\", \"_zVec\"];\n\n_offset = _offset vectorDiff _origin;\n\n_offset params [\"_x\", \"_y\", \"_z\"];\n\n[\n    ((_xVec select 0) * _x) + ((_xVec select 1) * _y) + ((_xVec select 2) * _z),\n    ((_yVec select 0) * _x) + ((_yVec select 1) * _y) + ((_yVec select 2) * _z),\n    ((_zVec select 0) * _x) + ((_zVec select 1) * _y) + ((_zVec select 2) * _z)\n] // return\n",
        "functionName": "ace_common_fnc_translateToWeaponSpace"
      },
      {
        "fileName": "fnc_unhideUnit.sqf",
        "content": "/*\n * Author: SilentSpike (based on unmuteUnit)\n * Globally unhides a unit. Only unhides if the last reason was removed.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Reason to unhide the unit <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_Player, \"SpectatorMode\"] call ace_common_fnc_unhideUnit\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_reason\"];\n\nif (isNull _unit) exitWith {};\n\nprivate _setHiddenReasons = _unit getVariable [QGVAR(setHiddenReasons), []];\n\nif (_reason in _setHiddenReasons) then {\n    _setHiddenReasons deleteAt (_setHiddenReasons find _reason);\n    _unit setVariable [QGVAR(setHiddenReasons), _setHiddenReasons, true];\n};\n\nif (_setHiddenReasons isEqualTo []) then {\n    [QGVAR(hideObjectGlobal), [_unit,false]] call CBA_fnc_serverEvent;\n};\n",
        "functionName": "ace_common_fnc_unhideUnit"
      },
      {
        "fileName": "fnc_uniqueElements.sqf",
        "content": "/*\n * Author: Glowbal\n * Make a copy of an array with only the unique elements.\n *\n * Arguments:\n * 0: array <ARRAY>\n *\n * Return Value:\n * Copy of original array <ARRAY>\n *\n * Example:\n * [[array]] call ace_common_fnc_uniqueElements\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_array\", [], [[]]]];\n\n_array arrayIntersect _array // return\n",
        "functionName": "ace_common_fnc_uniqueElements"
      },
      {
        "fileName": "fnc_unloadPerson.sqf",
        "content": "/*\n * Author: Glowbal\n * Unload a person from a vehicle\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * Returns true if succesfully unloaded person <BOOL>\n *\n * Example:\n * [hurtGuy] call ace_common_fnc_unloadPerson\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define GROUP_SWITCH_ID QFUNC(loadPerson)\n\nparams [\"_unit\"];\n\nprivate _vehicle = vehicle _unit;\n\nif (_vehicle == _unit) exitWith {false};\n\nif (speed _vehicle > 1 || {((getPos _vehicle) select 2) > 2}) exitWith {false};\n\nif (!isNull _vehicle) then {\n    [\"ace_unloadPersonEvent\", [_unit, _vehicle], [_unit]] call CBA_fnc_targetEvent;\n};\n\ntrue\n",
        "functionName": "ace_common_fnc_unloadPerson"
      },
      {
        "fileName": "fnc_unloadPersonLocal.sqf",
        "content": "/*\n * Author: ViperMaul\n * Unload a person from a vehicle, local\n *\n * Arguments:\n * 0: Unit to unload <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: Unloader (player) <OBJECT> (default: objNull)\n *\n * Return Value:\n * Succesfully unloaded person <BOOL>\n *\n * Example:\n * [bob, car, bob] call ace_common_fnc_unloadpersonLocal\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define GROUP_SWITCH_ID QFUNC(loadPerson)\n\nparams [\"_unit\", \"_vehicle\", [\"_unloader\", objNull]];\nTRACE_3(\"params\",_unit,_vehicle,_unloader);\n\n//This covers testing vehicle stability and finding a safe position\nprivate _emptyPos = [_vehicle, (typeOf _unit), _unloader] call EFUNC(common,findUnloadPosition);\nTRACE_1(\"findUnloadPosition\",_emptyPos);\n\nif (count _emptyPos != 3) exitwith {\n    WARNING_4(\"Could not find unload pos %1-ASL: %2 isTouchingGround: %3 Speed: %4\",_vehicle, getPosASL _vehicle, isTouchingGround _vehicle, speed _vehicle);\n    if ((!isNull _unloader) && {[_unloader] call FUNC(isPlayer)}) then {\n        //display text saying there are no safe places to exit the vehicle\n        [QGVAR(displayTextStructured), [localize LSTRING(NoRoomToUnload)], [_unloader]] call CBA_fnc_targetEvent;\n    };\n    false\n};\n\nunassignVehicle _unit;\n[_unit] orderGetIn false;\n\nTRACE_1(\"Ejecting\", alive _unit);\n\n_unit action [\"Eject\", vehicle _unit];\n\n[{\n    params [\"_unit\", \"_emptyPos\"];\n\n    _unit setPosASL AGLToASL _emptyPos;\n\n    if !([_unit] call FUNC(isAwake)) then {\n        TRACE_1(\"Check if isAwake\", [_unit] call FUNC(isAwake));\n\n        if (driver _unit == _unit) then {\n            private _anim = [_unit] call FUNC(getDeathAnim);\n\n            [_unit, _anim, 1, true] call FUNC(doAnimation);\n\n            [{\n                params [\"_unit\", \"_anim\"];\n                if ((_unit getVariable \"ACE_isUnconscious\") and (animationState _unit != _anim)) then {\n                    [_unit, _anim, 2, true] call FUNC(doAnimation);\n                };\n            }, [_unit, _anim], 0.5] call CBA_fnc_waitAndExecute;\n        };\n    };\n}, [_unit, _emptyPos], 0.5] call CBA_fnc_waitAndExecute;\n\n[_unit, false, GROUP_SWITCH_ID, side group _unit] call FUNC(switchToGroupSide);\n\nprivate _loaded = _vehicle getvariable [QGVAR(loaded_persons),[]];\n_loaded deleteAt (_loaded find _unit);\n\n_vehicle setvariable [QGVAR(loaded_persons), _loaded, true];\n\ntrue\n",
        "functionName": "ace_common_fnc_unloadPersonLocal"
      },
      {
        "fileName": "fnc_unmuteUnit.sqf",
        "content": "/*\n * Author: commy2\n * Unmutes the unit. Only unmutes if the last reason was removed.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Reason to unmute the unit. <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"because\"] call ace_common_fnc_unmuteUnit\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_reason\"];\n\nif (isNull _unit) exitWith {};\n\n// remove reason to mute to the unit\nprivate _muteUnitReasons = _unit getVariable [QGVAR(muteUnitReasons), []];\n\nif (_reason in _muteUnitReasons) then {\n    _muteUnitReasons deleteAt (_muteUnitReasons find _reason);\n    _unit setVariable [QGVAR(muteUnitReasons), _muteUnitReasons, true];\n};\n\n// don't unmute if there is another mute reason!\nif (count _muteUnitReasons > 0) exitWith {};\n\nprivate _speaker = _unit getVariable [\"ACE_OriginalSpeaker\", \"\"];\n\nif (_speaker == \"\") exitWith {};\n\n[QGVAR(setSpeaker), [_unit, _speaker], _unit] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_common_fnc_unmuteUnit"
      },
      {
        "fileName": "fnc_useItem.sqf",
        "content": "/*\n * Author: Glowbal\n * Use item\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: item <STRING>\n *\n * Return Value:\n * if item has been used. <BOOL>\n *\n * Example:\n * [bob, \"gun\"] call ace_common_fnc_useItem\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_item\", [\"_vehicleUsage\", false]];\n\nprivate _return = false;\n\nif !(_vehicleUsage) then {\n    if (_item != \"\") then {\n        if (_item in items _unit) then {\n            _unit removeItem _item;\n            _return = true;\n        } else {\n            if (_item in assignedItems _unit) then {\n                _unit unlinkItem _item;\n                _return = true;\n            };\n        };\n    };\n//} else {\n    // @todo implement shared item functionality for with vehicles.\n};\n\n_return\n",
        "functionName": "ace_common_fnc_useItem"
      },
      {
        "fileName": "fnc_useMagazine.sqf",
        "content": "/*\n * Author: Glowbal\n * Use magazine\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: magazine <STRING>\n *\n * Return Value:\n * if magazine has been used. <BOOL>\n *\n * Example:\n * [bob, \"magazine\"] call ace_common_fnc_useMagazine\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_magazine\", [\"_vehicleUsage\", false]];\n\nprivate _return = false;\n\nif !(_vehicleUsage) then {\n    if (_magazine != \"\") then {\n        _unit removeMagazine _magazine;\n        _return = true;\n    };\n\n    [format [\"fnc_useMagazine: %1 | %2\", _this, _return]] call FUNC(debug);\n//} else {\n    // @todo implement shared magazine functionality\n};\n\n_return\n",
        "functionName": "ace_common_fnc_useMagazine"
      },
      {
        "fileName": "fnc_watchVariable.sqf",
        "content": "/*\n * Author: PabstMirror\n * Shows multiple watched variables on the main display (for easy debugging).\n *\n * Arguments:\n * 0: Title (var name) <STRING> (default: \"\")\n * 1: Code to generate result (passed nothing, can return any) <CODE> (default: {})\n * 2: Array containing modifiers <ARRAY> (default: [])\n * For Numbers:\n *      0: Show Delta change <BOOL> (default: true)\n *      1: Slider Min Value <NUMBER> (default: 0)\n *      1: Slider Max Value <NUMBER> (default: 0)\n * For Anything else:\n *      0: Number of structured text lines <NUMBER> (default: 1)\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"CBA_missionTime\"] call ace_common_fnc_watchVariable // Uses title as code\n * [\"diag_frameNo\", {diag_frameNo}, [false]] call ace_common_fnc_watchVariable // Won't show delta\n * [\"blood\", {player getVariable \"ace_medical_bloodVolume\"}, [true, 0, 100]] call ace_common_fnc_watchVariable // Shows slider\n * [\"multiLine text\", {\"Line 1 <br/>Line 2\"}, [2]] call ace_common_fnc_watchVariable\n * [\"player names\", {allPlayers apply {name _x}}, [5]] call ace_common_fnc_watchVariable // handles any data types\n *\n * Public: Yes\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n#define TEXT_HEIGHT 16\n\nparams [[\"_name\", \"\", [\"\"]],[\"_code\", {}, [{}]], [\"_mods\", [], [[]]]];\nTRACE_3(\"params\",_name,_code,_mods);\n\nif (!hasInterface) exitWith {};\n\nif (canSuspend) exitWith { // Ensure atomic - (fix `disableSerialization` error when called from init.sqf)\n    [FUNC(watchVariable), _this] call CBA_fnc_directCall;\n};\n\nif (isNull (findDisplay 46)) exitWith {\n    TRACE_1(\"waiting for main display to be ready\",isNull (findDisplay 46));\n    [{!isNull (findDisplay 46)}, {_this call FUNC(watchVariable);}, _this] call CBA_fnc_waitUntilAndExecute;\n};\n\nif (_code isEqualTo {}) then {TRACE_1(\"using title as code\",_title); _code = compile _name;};\n\nprivate _trackedDisplay = uiNamespace getVariable [QGVAR(watchVariableUI), displayNull];\nif (isNull _trackedDisplay) then {\n    TRACE_1(\"creating display and adding PFEH\",time);\n    QGVAR(watchVariableUI) cutRsc [QGVAR(watchVariableUI), \"PLAIN\", 1, true];\n\n    [{\n        private _trackedDisplay = uiNamespace getVariable [QGVAR(watchVariableUI), displayNull];\n        private _varArray = _trackedDisplay getVariable [QGVAR(vars), []];\n        TRACE_1(\"updating watched variables\",count _varArray);\n        {\n            _x params [\"_ctrlGroup\", \"_code\", \"_showDelta\", \"_lastNumber\", \"_barMin\", \"_barMax\"];\n            private _result = [] call _code;\n            if (isNil \"_result\") then {\n                (_ctrlGroup controlsGroupCtrl 1) ctrlSetStructuredText parseText format [\"<t color='#FFFF00'>NIL</t>\"];\n            } else {\n                if (_result isEqualType 0) then {\n                    (_ctrlGroup controlsGroupCtrl 2) progressSetPosition linearConversion [_barMin, _barMax, _result, 0, 1, true];\n                    if (_showDelta) then {\n                        private _delta = _result - _lastNumber;\n                        _x set [3, _result];\n                        if (_delta < 0) then {\n                            (_ctrlGroup controlsGroupCtrl 1) ctrlSetStructuredText parseText format [\"%1 (<t color='#FF0000'>%2</t>)\", _result, _delta];\n                        } else {\n                            (_ctrlGroup controlsGroupCtrl 1) ctrlSetStructuredText parseText format [\"%1 (<t color='#00FF00'>%2</t>)\", _result, _delta];\n                        };\n                    } else {\n                        (_ctrlGroup controlsGroupCtrl 1) ctrlSetStructuredText parseText format [\"%1\", _result];\n                    };\n                } else {\n                    (_ctrlGroup controlsGroupCtrl 1) ctrlSetStructuredText parseText format [\"%1\", _result];\n                };\n            };\n        } forEach _varArray;\n    }, 1, []] call CBA_fnc_addPerFrameHandler;\n};\n\n// Add curent call:\n\nprivate _trackedDisplay = uiNamespace getVariable [QGVAR(watchVariableUI), displayNull];\nprivate _varArray = _trackedDisplay getVariable [QGVAR(vars), []];\nprivate _freePositionY = _trackedDisplay getVariable [QGVAR(freePosition), safeZoneY + 100 * pixelH];\n\nprivate _height = 2 * TEXT_HEIGHT * pixelH;\n\nprivate _ctrlGroup = _trackedDisplay ctrlCreate [\"ctrlControlsGroupNoScrollbars\", -1];\n\nprivate _ctrlBackground = (_trackedDisplay ctrlCreate [\"ctrlStaticBackground\", -1, _ctrlGroup]);\n_ctrlBackground ctrlSetBackgroundColor [0.2, 0.2, 0.2, 0.5];\n\nprivate _ctrlTitle = (_trackedDisplay ctrlCreate [\"ctrlStatic\", -1, _ctrlGroup]);\n_ctrlTitle ctrlSetFontHeight (TEXT_HEIGHT * pixelH);\n_ctrlTitle ctrlSetFont \"EtelkaMonospacePro\";\n_ctrlTitle ctrlSetPosition [0, 0, 300 * pixelW, TEXT_HEIGHT * pixelW];\n_ctrlTitle ctrlCommit 0;\n_ctrlTitle ctrlSetText _name;\n\nif ((_mods param [0, true, [0, false]]) isEqualType false) then {\n    _mods params [[\"_showDelta\", true, [false]], [\"_barMin\", 0, [0]], [\"_barMax\", 0, [0]]];\n    TRACE_3(\"adding number\",_barMin,_barMax,_showDelta);\n\n    if (_barMin != _barMax) then {\n        TRACE_2(\"creating bar\",_barMin,_barMax);\n        private _ctrlSlider = _trackedDisplay ctrlCreate [\"RscProgress\", 2, _ctrlGroup];\n        _ctrlSlider ctrlSetPosition [0 * pixelW, TEXT_HEIGHT * pixelH, 300 * pixelW, TEXT_HEIGHT * pixelH];\n        _ctrlSlider ctrlSetFade 0.25;\n        _ctrlSlider ctrlSetTextColor [0, 0, 0.2, 1];\n        _ctrlSlider ctrlCommit 0;\n    };\n\n    private _ctrlResultText = _trackedDisplay ctrlCreate [QGVAR(debug_structuredText), 1, _ctrlGroup];\n    _ctrlResultText ctrlSetPosition [25 * pixelW, TEXT_HEIGHT * pixelH, 275 * pixelW, TEXT_HEIGHT * pixelH];\n    _ctrlResultText ctrlCommit 0;\n\n    _varArray pushBack [_ctrlGroup, _code, _showDelta, 0, _barMin, _barMax];\n\n} else {\n    _mods params [[\"_lines\", 1, [1]]];\n    _lines = _lines max 1;\n    TRACE_1(\"adding text\",_lines);\n\n    private _ctrlResultText = _trackedDisplay ctrlCreate [QGVAR(debug_structuredText), 1, _ctrlGroup];\n    _ctrlResultText ctrlSetPosition [25 * pixelW, TEXT_HEIGHT * pixelH, 275 * pixelW, _lines * TEXT_HEIGHT * pixelH];\n    _ctrlResultText ctrlCommit 0;\n\n    _height = (1 + _lines) * TEXT_HEIGHT * pixelH;\n\n    _varArray pushBack [_ctrlGroup, _code, false, -1, 0, 0];\n};\n\n_trackedDisplay setVariable [QGVAR(vars), _varArray];\n\n_ctrlGroup ctrlSetPosition [safeZoneX, _freePositionY, 300 * pixelW, _height];\n_ctrlGroup ctrlCommit 0;\n_ctrlBackground ctrlSetPosition [0, 0, 300 * pixelW, _height];\n_ctrlBackground ctrlCommit 0;\n\n\n_freePositionY = _freePositionY + _height + 5 * pixelH;\n_trackedDisplay setVariable [QGVAR(freePosition), _freePositionY];\n\nnil\n",
        "functionName": "ace_common_fnc_watchVariable"
      },
      {
        "fileName": "fnc_waveHeightAt.sqf",
        "content": "/*\n * Author: jaynus\n * Gets the wave height at a specific location. Uses a logic, so may be performance iffy\n *\n * Arguments:\n * 0: Position ASL to get height at <ARRAY>\n *\n * Return Value:\n * Wave height in meters <NUMBER>\n *\n * Example:\n * [[5, 2, 5]]] call ace_common_fnc_waveHeightAt\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_position\"];\n\nif (isNil QGVAR(waveHeightLogic)) then {\n    GVAR(waveHeightLogic) = \"Logic\" createVehicleLocal [0,0,0];\n};\n\nGVAR(waveHeightLogic) setPosASL _position;\n\n(getPosASLW GVAR(waveHeightLogic) select 2) - (getPosASL GVAR(waveHeightLogic) select 2)\n",
        "functionName": "ace_common_fnc_waveHeightAt"
      },
      {
        "fileName": "fnc_worldToScreenBounds.sqf",
        "content": "/*\n * Author: zGuba 2011\n * Function helper for framing objects on screen.\n *\n * Arguments:\n * 0: object <OBJECT>\n * 1: margins 3D <ARRAY>\n *   0: X <NUMBER>\n *   1: Y <NUMBER>\n *   2: Z <NUMBER>\n * 2: offset 3D <ARRAY>\n *   0: X <NUMBER>\n *   1: Y <NUMBER>\n *   2: Z <NUMBER>\n *\n * Return Value:\n * 0: Minimal X <NUMMBER>\n * 1: Minimal Y <NUMMBER>\n * 2: Maximal X <NUMMBER>\n * 3: Maximal Y <NUMMBER>\n *\n * Example:\n * [bob, [5, 5, 5], [6, 6, 6]] call ace_common_fnc_worldToScreenBounds\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_margins\", \"_offsets\"];\n\nprivate _minX = 10;\nprivate _minY = 10;\nprivate _maxX = -10;\nprivate _maxY = -10;\n\nprivate _bounds = boundingBox _object;\n_margins params [\"_marginsX\", \"_marginsY\", \"_marginsZ\"];\n_offsets params [\"_offsetsX\", \"_offsetsY\", \"_offsetsZ\"];\n\n_bounds params [\"_boundsMin\", \"_boundsMax\"];\n_boundsMin params [\"_boundsMinX\", \"_boundsMinY\", \"_boundsMinZ\"];\n_boundsMax params [\"_boundsMaxX\", \"_boundsMaxY\", \"_boundsMaxZ\"];\n\n_boundsMinX = ((_boundsMinX - _marginsX) min 0) + _offsetsX;\n_boundsMinY = ((_boundsMinY - _marginsY) min 0) + _offsetsY;\n_boundsMinZ = ((_boundsMinZ - _marginsZ) min 0) + _offsetsZ;\n\n_boundsMaxX = ((_boundsMaxX + _marginsX) max 0) + _offsetsX;\n_boundsMaxY = ((_boundsMaxY + _marginsY) max 0) + _offsetsY;\n_boundsMaxZ = ((_boundsMaxZ + _marginsZ) max 0) + _offsetsZ;\n\nprivate _boundsCorners = [\n    [_boundsMinX, _boundsMinY, _boundsMinZ],\n    [_boundsMinX, _boundsMinY, _boundsMaxZ],\n    [_boundsMinX, _boundsMaxY, _boundsMinZ],\n    [_boundsMinX, _boundsMaxY, _boundsMaxZ],\n    [_boundsMaxX, _boundsMinY, _boundsMinZ],\n    [_boundsMaxX, _boundsMinY, _boundsMaxZ],\n    [_boundsMaxX, _boundsMaxY, _boundsMinZ],\n    [_boundsMaxX, _boundsMaxY, _boundsMaxZ]\n];\n\n{\n    private _ppos = worldToScreen (_object modelToWorld _x);\n\n    if (count _ppos >= 2) then {\n        _ppos params [\"_pposX\", \"_pposY\"];\n\n        if (_pposX < _minX) then {_minX = _pposX};\n        if (_pposX > _maxX) then {_maxX = _pposX};\n        if (_pposY < _minY) then {_minY = _pposY};\n        if (_pposY > _maxY) then {_maxY = _pposY};\n    }; //else - what to do if it is offscreen?\n    false\n} count _boundsCorners;\n\n[_minX, _minY, _maxX, _maxY]\n",
        "functionName": "ace_common_fnc_worldToScreenBounds"
      }
    ]
  },
  {
    "component": "concertina_wire",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nGVAR(placer) = objNull;\nGVAR(deployPFH) = -1;\n\n// Deploy concertina wire if interact menu is opened\n[\"ace_interactMenuOpened\", {\n    if (GVAR(deployPFH) != -1) then {\n        GVAR(placer) setVariable [QGVAR(wireDeployed), true];\n    };\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(vehicleDamage), {_this call FUNC(vehicleDamage)}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_deploy.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n *\n * Deploys the concertina wire\n *\n * Arguments:\n * 0: wire coil <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [coil, bob] call ace_concertina_wire_fnc_deploy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_wirecoil\", \"_unit\"];\n\nprivate _wireNoGeo = \"ACE_ConcertinaWireNoGeo\" createVehicle [0,0,0];\n{\n    _wireNoGeo animate [_x, 1];\n} count WIRE_FAST;\n\nGVAR(placer) = _unit;\nprivate _dir = getDir _unit;\nprivate _pos = getPosASL _unit;\nprivate _wireNoGeoPos = _pos vectorAdd [1.1 * sin(_dir), 1.1 * cos(_dir), 0];\n\n_wireNoGeo setDir _dir;\n_wireNoGeo setPosASL _wireNoGeoPos;\n\ndeleteVehicle _wirecoil;\n\n_unit setVariable [QGVAR(wireDeployed), false];\n\nGVAR(deployPFH) = [{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_wireNoGeo\", \"_wireNoGeoPos\", \"_unit\"];\n\n    private _posStart = (_wireNoGeo modelToWorldVisual (_wireNoGeo selectionPosition \"start\")) call EFUNC(common,positionToASL);\n    private _posEnd = (getPosASL _unit) vectorAdd (vectorDir _unit);\n    private _dirVect = _posStart vectorDiff _posEnd;\n    private _dir = _dirVect call CBA_fnc_vectDir;\n    private _range = vectorMagnitude _dirVect;\n    private _anim = 0 max (1 - (_range / 12));\n\n    if (!(alive _unit) || _range >= 12 || (_unit getVariable [QGVAR(wireDeployed), false])) exitWith {\n        private _wire = \"ACE_ConcertinaWire\" createvehicle [0, 0, 0];\n        {\n            _wire animate [_x, _anim];\n        } count WIRE_FAST;\n\n        [{\n            params [\"_args\", \"_idPFH\"];\n            _args params [\"_wireNoGeo\", \"_wire\", \"_anim\", \"_dir\", \"_wireNoGeoPos\"];\n            if (_wire animationPhase \"wire_2\" == _anim) then {\n                deleteVehicle _wireNoGeo;\n                _wire setDir _dir;\n                _wire setPosASL _wireNoGeoPos;\n                [_idPFH] call CBA_fnc_removePerFrameHandler;\n            };\n        }, 0, [_wireNoGeo, _wire, _anim, _dir, _wireNoGeoPos]] call CBA_fnc_addPerFrameHandler;\n\n        [_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(Common,removeActionEventHandler);\n        call EFUNC(interaction,hideMouseHint);\n\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n\n    _wireNoGeo setDir _dir;\n    {\n        _wireNoGeo animate [_x, _anim];\n    } count WIRE_FAST;\n}, 0, [_wireNoGeo, _wireNoGeoPos, _unit]] call CBA_fnc_addPerFrameHandler;\n\n[localize \"STR_ACE_ROLLWIRE\", \"\", \"\"] call EFUNC(interaction,showMouseHint);\n\nGVAR(placer) setVariable [QGVAR(Deploy),\n    [GVAR(placer), \"DefaultAction\",\n    {GVAR(deployPFH) != -1},\n    {GVAR(placer) setVariable [QGVAR(wireDeployed), true]}\n] call EFUNC(common,AddActionEventHandler)];\n",
        "functionName": "ace_concertina_wire_fnc_deploy"
      },
      {
        "fileName": "fnc_dismount.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Start dismounting the concertina wire\n *\n * Arguments:\n * 0: wire <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [wire, bob] call ace_concertina_wire_fnc_dismount\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// If the cursorMenu is open, the loading bar will fail. If we execute the function one frame later, it will work fine\nif (uiNamespace getVariable [QEGVAR(interact_menu,cursorMenuOpened),false]) exitWith {\n    [{\n        _this call FUNC(dismount);\n    }, _this] call CBA_fnc_execNextFrame;\n};\nparams [\"_wire\", \"_unit\"];\n\nprivate _config = (configFile >> \"CfgVehicles\" >> typeOf _unit);\nprivate _delay = [45, 30] select ([_unit] call EFUNC(common,isEngineer) || {[_unit] call EFUNC(common,isEOD)});\n\n// TODO: Animation?\n[\n    _delay,\n    [_wire],\n    {(_this select 0) call FUNC(dismountSuccess)},\n    {},\n    localize \"STR_ACE_UNROLLWIRE\",\n    {true},\n    [\"isnotinside\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_concertina_wire_fnc_dismount"
      },
      {
        "fileName": "fnc_dismountSuccess.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n *\n * Dismounts the concertina wire\n *\n * Arguments:\n * 0: wire <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [wire] call ace_concertina_wire_fnc_dismountSuccess\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_wire\"];\n\n{\n    _wire animate [_x, 1];\n} count WIRE_FAST;\n\n[{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_wire\"];\n\n    if (_wire animationPhase \"wire_2\" == 1) then {\n\n        private _dir = getDir _wire;\n        private _pos = getPosASL _wire;\n\n        private _wirecoil = \"ACE_ConcertinaWireCoil\" createvehicle [0, 0, 0];\n\n        deleteVehicle _wire;\n\n        _wirecoil setDir _dir;\n        _wirecoil setPosASL _pos;\n        _wirecoil setVelocity [0, 0, 0];\n\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n}, 0, [_wire]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_concertina_wire_fnc_dismountSuccess"
      },
      {
        "fileName": "fnc_handleDamage.sqf",
        "content": "/*\n * Author: Ruthberg\n *\n * Handles wire damage\n *\n * Arguments:\n * 0: wire <OBJECT>\n * 1: selectionName <STRING>\n * 2: damage <NUMBER>\n * 3: source <OBJECT>\n * 4: projectile <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [wire, \"selection\", 5, source, \"scrap\"] call ace_concertina_wire_fnc_handleDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_wire\", \"\", \"_damage\", \"_source\", \"\"];\nif (_damage < 0.5) exitWith { 0 };\n\nif (!(isNull _source)) then {\n    _wire setVariable [QGVAR(lastDamager), _source];\n};\n\n_damage\n",
        "functionName": "ace_concertina_wire_fnc_handleDamage"
      },
      {
        "fileName": "fnc_handleInit.sqf",
        "content": "/*\n * Author: Rocko\n * Handles wire Init\n *\n * Arguments:\n * 0: wire <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [wire] call ace_concertina_wire_fnc_handleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_wire\"];\n_wire addEventHandler [\"HandleDamage\", {call FUNC(handleDamage)}];\n",
        "functionName": "ace_concertina_wire_fnc_handleInit"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: Rocko\n *\n * Handles wire and vehicle damage\n *\n * Arguments:\n * 0: wire <OBJECT>\n * 1: killer (vehicle) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [wire, car] call ace_concertina_wire_fnc_handleKilled\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_wire\", \"_killer\"];\nTRACE_2(\"params\",_wire,_killer);\n\nif (isNull _killer) then {\n    _killer = _wire getVariable [QGVAR(lastDamager), objNull];\n    if (isNull _killer) then {\n        private _midPoint = ((_wire selectionPosition \"start\") vectorAdd (_wire selectionPosition \"deploy\")) vectorMultiply 0.5;\n        {\n            if ((vectorMagnitude velocity _x) > 0) exitWith {_killer = _x};\n        } forEach (nearestObjects [(_wire modelToWorld _midPoint), [\"Car\"], 8]);\n    };\n};\nif (isNull _killer || {_killer == _wire} || {_killer == gunner (vehicle _killer)}) exitWith {};\n\nprivate _distance = _wire distance _killer;\nif (_distance > 14 || {_distance < 2}) exitWith {}; // Fix if shooting wire\n\nprivate _vehicle = vehicle _killer;\n\n[QGVAR(vehicleDamage), [_wire, _vehicle], [_vehicle]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_concertina_wire_fnc_handleKilled"
      },
      {
        "fileName": "fnc_vehicleDamage.sqf",
        "content": "/*\n * Author: Rocko\n * Handles vehicle damage from hitting wire\n *\n * Arguments:\n * 0: wire <OBJECT>\n * 1: vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [wire, car] call ace_concertina_wire_fnc_vehicleDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_wire\", \"_vehicle\"];\n\nprivate _type = typeOf _wire;\nprivate _mode = switch (_type) do {\ncase \"ACE_ConcertinaWire\": { 0 };\ncase \"Land_Razorwire_F\": { 1 };\n    default { -1 };\n};\n\nif (_mode == -1) exitWith {};\n\n// _mode = 0 = Single Coil\n// _mode = 1 = Triple Coil\n\n// --------------------------------\n// L              M               R\n//                                4.54929 (4)\n//              6.13564 (6)\n//9.78744 (10)\n\n_type = typeOf _wire;\nprivate _anim = _wire animationPhase \"wire_2\";\nprivate _pos_w = getPos _wire;\nprivate _dir_w = getDir _wire;\n\nif (_mode == 0) then {\n    private _found = false;\n    _pos_w params [\"_x\",\"_y\"];\n\n    // Check if two Single coils are placed next to each other (i.e playes have built a big wire obstacle)\n    private _wireCheckPosAr = [\n    [_x + (sin (_dir_w + 90) * 1.5),_y + (cos (_dir_w + 90) * 1.5)],\n    [(_x-(sin _dir_w)) + (sin (_dir_w + 90) * 1.5),(_y-(cos _dir_w)) + (cos (_dir_w + 90) * 1.5)],\n    [_x + (sin (_dir_w - 90) * 1.5),_y + (cos (_dir_w - 90) * 1.5)],\n    [(_x-(sin _dir_w)) + (sin (_dir_w - 90) * 1.5),(_y-(cos _dir_w)) + (cos (_dir_w - 90) * 1.5)]\n    ];\n    {\n        _found = false;\n        private _no = nearestObjects [_x, [typeOf _wire], 3];     //diag_log _no; diag_log \".....\";\n        _no = _no - [_wire];                            //diag_log _no;\n        if (count _no > 0) exitWith {\n            _found = true;                                //diag_log \"found\";\n        };\n    } forEach _wireCheckPosAr;\n    // Double coil found!\n    if (_found) then {\n        _mode = 1;\n    } else {\n        // Randomly make a single coil also catch tanks, if speed is high\n        if (_vehicle isKindOf \"Tank\" && {20 > random 100} && {speed _vehicle > 30}) then {\n            _mode = 1;\n        } else {\n            if !(_vehicle isKindOf \"Tank\") then {\n                _mode = 1;\n            };\n        };\n    };\n};\n\nprivate _parts = [];\n\nif (_mode == 1) then {\n    switch (true) do {\n    case (_vehicle isKindOf \"Tank\"): {\n            _parts = [\"ltrack\",\"rtrack\"];\n        };\n    case (_vehicle isKindOf \"Wheeled_APC\" || {_vehicle isKindOf \"Car\"}): {\n            _parts = [\"lfwheel\",\"lf2wheel\",\"lmwheel\",\"lbwheel\",\"rfwheel\",\"rf2wheel\",\"rmwheel\",\"rbwheel\"];\n        };\n    };\n} else {\n    switch (true) do {\n    case (_vehicle isKindOf \"Wheeled_APC\" || {_vehicle isKindOf \"Car\"}): {\n            _parts = [\"lfwheel\",\"lf2wheel\",\"lmwheel\",\"lbwheel\",\"rfwheel\",\"rf2wheel\",\"rmwheel\",\"rbwheel\"];\n        };\n    };\n};\n\nif (canMove _vehicle) then {\n    {\n        private _selectionPart = \"hit\" + _x;\n        if (isText(configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"hitpoints\" >> _selectionPart >> \"name\")) then {\n            private _selection = getText(configFile >> \"CfgVehicles\" >> typeOf _vehicle  >> \"hitpoints\" >> _selectionPart >> \"name\");\n            // TODO: Only the tires that have touched the wire should burst.\n            _vehicle setHit [_selection, 1];\n        };\n    } forEach _parts;\n};\n\nif (_mode == 1) then {\n    if (_vehicle isKindOf \"StaticWeapon\") exitWith {};\n    [{\n        params [\"_vehicle\", \"_wire\"];\n\n        _vehicle setVelocity ((velocity _vehicle) vectorMultiply 0.75);\n\n        // Set vehicle back in front of wire, since the wire will make the vehicle jump, and a wire with no geometry lod is undestructible and not recognizeable\n        private _vPos = getPosASL _vehicle;\n        private _vDir = getDir _vehicle;\n        _vehicle setPosASL (_vPos vectorAdd [-0.35 * sin(_vDir), -0.35 * cos(_vDir), 0]);\n        // TODO: Needs to be placed in safe distance to wire, so we do not constantly re - spawn new wires\n    }, [_vehicle, _wire], 0.1] call CBA_fnc_waitAndExecute;\n};\n\n//TODO: Create broken geoless wire (two version)\n//TODO: Make wire remains stop vehicles\n",
        "functionName": "ace_concertina_wire_fnc_vehicleDamage"
      }
    ]
  },
  {
    "component": "cookoff",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(engineFire), FUNC(engineFire)] call CBA_fnc_addEventHandler;\n[QGVAR(cookOff), FUNC(cookOff)] call CBA_fnc_addEventHandler;\n[QGVAR(cookOffBox), FUNC(cookOffBox)] call CBA_fnc_addEventHandler;\n\nGVAR(cacheTankDuplicates) = call CBA_fnc_createNamespace;\n\n// cookoff and burning engine\n[\"Tank\", \"init\", {\n    params [\"_vehicle\"];\n\n    private _typeOf = typeOf _vehicle;\n\n    if (isNil {GVAR(cacheTankDuplicates) getVariable _typeOf}) then {\n        private _hitpoints = (getAllHitPointsDamage _vehicle param [0, []]) apply {toLower _x};\n        private _duplicateHitpoints = [];\n\n        {\n            if ((_x != \"\") && {_x in (_hitpoints select [0,_forEachIndex])}) then {\n                _duplicateHitpoints pushBack _forEachIndex;\n            };\n        } forEach _hitpoints;\n\n        TRACE_2(\"dupes\",_typeOf,_duplicateHitpoints);\n        GVAR(cacheTankDuplicates) setVariable [_typeOf, _duplicateHitpoints];\n    };\n\n    _vehicle addEventHandler [\"HandleDamage\", {\n        if ((_this select 0) getVariable [QGVAR(enable), GVAR(enable)]) then {\n            [\"tank\", _this] call FUNC(handleDamage);\n        };\n    }];\n}, nil, nil, true] call CBA_fnc_addClassEventHandler;\n\n[\"Wheeled_APC_F\", \"init\", {\n    params [\"_vehicle\"];\n\n    private _typeOf = typeOf _vehicle;\n\n    if (isNil {GVAR(cacheTankDuplicates) getVariable _typeOf}) then {\n        private _hitpoints = (getAllHitPointsDamage _vehicle param [0, []]) apply {toLower _x};\n        private _duplicateHitpoints = [];\n\n        {\n            if ((_x != \"\") && {_x in (_hitpoints select [0,_forEachIndex])}) then {\n                _duplicateHitpoints pushBack _forEachIndex;\n            };\n        } forEach _hitpoints;\n\n        TRACE_2(\"dupes\",_typeOf,_duplicateHitpoints);\n        GVAR(cacheTankDuplicates) setVariable [_typeOf, _duplicateHitpoints];\n    };\n\n    _vehicle addEventHandler [\"HandleDamage\", {\n        if ((_this select 0) getVariable [QGVAR(enable), GVAR(enable)]) then {\n            [\"tank\", _this] call FUNC(handleDamage);\n        };\n    }];\n}, nil, nil, true] call CBA_fnc_addClassEventHandler;\n\n[\"Car\", \"init\", {\n    params [\"_vehicle\"];\n\n    _vehicle addEventHandler [\"HandleDamage\", {\n        if ((_this select 0) getVariable [QGVAR(enable), GVAR(enable)]) then {\n            [\"car\", _this] call FUNC(handleDamage);\n        };\n    }];\n}, nil, [\"Wheeled_APC_F\"], true] call CBA_fnc_addClassEventHandler;\n\n[\"ReammoBox_F\", \"init\", {\n    (_this select 0) addEventHandler [\"HandleDamage\", {\n        if ((_this select 0) getVariable [QGVAR(enable), GVAR(enableAmmobox)]) then {\n            [\"box\", _this] call FUNC(handleDamage);\n        };\n    }];\n}, nil, nil, true] call CBA_fnc_addClassEventHandler;\n\n// secondary explosions\n[\"AllVehicles\", \"killed\", {\n    params [\"_vehicle\"];\n    if (_vehicle getVariable [QGVAR(enableAmmoCookoff), GVAR(enableAmmoCookoff)]) then {\n        if (GVAR(ammoCookoffDuration) == 0) exitWith {};\n        ([_vehicle] call FUNC(getVehicleAmmo)) params [\"_mags\", \"_total\"];\n        [_vehicle, _mags, _total] call FUNC(detonateAmmunition);\n    };\n}, nil, [\"Man\",\"StaticWeapon\"]] call CBA_fnc_addClassEventHandler;\n\n// blow off turret effect\n[\"Tank\", \"killed\", {\n    if ((_this select 0) getVariable [QGVAR(enable),GVAR(enable)]) then {\n        if (random 1 < 0.15) then {\n            (_this select 0) call FUNC(blowOffTurret);\n        };\n    };\n}] call CBA_fnc_addClassEventHandler;\n\n// event to add a turret to a curator if the vehicle already belonged to that curator\nif (isServer) then {\n    [QGVAR(addTurretToEditable), {\n        params [\"_vehicle\", \"_turret\"];\n\n        {\n            if (_vehicle in curatorEditableObjects _x) then {\n                _x addCuratorEditableObjects [[_turret], false];\n            };\n        } forEach allCurators;\n    }] call CBA_fnc_addEventHandler;\n};\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_blowOffTurret.sqf",
        "content": "/*\n * Author: commy2\n * Blow off turret effect.\n *\n * Arguments:\n * 0: Vehicle <Object>\n *\n * Return Value:\n * None\n *\n * Example:\n * (vehicle player) call ace_cookoff_fnc_blowOffTurret\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// delayed so the object is spawned after the model changes to a wreck\n// the sudden change in the model would cause nearby physx objects to get stuck\n[{\n    params [\"_vehicle\"];\n\n    private _config = _vehicle call CBA_fnc_getObjectConfig;\n    getArray (_config >> QGVAR(turret)) params [[\"_model\", \"\", [\"\"]], [\"_offset\", [0,0,0], [[]], 3]];\n\n    if (_model isEqualTo \"\") exitWith {};\n\n    private _position = _vehicle modelToWorld _offset;\n    private _turret = createVehicle [_model, _position, [], 0, \"CAN_COLLIDE\"];\n\n    _turret setVectorUp [random 1, random 1, 1];\n    _turret setVelocity [random 7, random 7, 8 + random 5];\n\n    // add turret to all curators that already own the wreck\n    [QGVAR(addTurretToEditable), [_vehicle, _turret]] call CBA_fnc_serverEvent;\n}, _this, 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_cookoff_fnc_blowOffTurret"
      },
      {
        "fileName": "fnc_cookOff.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Start a cook-off in the given vehicle.\n *\n * Arguments:\n * 0: Vehicle <Object>\n *\n * Return Value:\n * None\n *\n * Example:\n * [(vehicle player)] call ace_cookoff_fnc_cookOff\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nif (_vehicle getVariable [QGVAR(isCookingOff), false]) exitWith {};\n_vehicle setVariable [QGVAR(isCookingOff), true];\n\nif (local _vehicle) then {\n    [QGVAR(cookOff), _vehicle] call CBA_fnc_remoteEvent;\n};\n\n[{\n    params [\"_vehicle\"];\n\n    private _config = _vehicle call CBA_fnc_getObjectConfig;\n    private _positions = getArray (_config >> QGVAR(cookoffSelections)) select {!((_vehicle selectionPosition _x) isEqualTo [0,0,0])};\n\n    if (_positions isEqualTo []) then {\n        WARNING_1(\"no valid selection for cookoff found. %1\", typeOf _vehicle);\n        _positions pushBack \"#noselection\";\n    };\n\n    private _turretConfig = [_vehicle, [0]] call CBA_fnc_getTurret;\n    private _positionBarrelEnd = getText (_turretConfig >> \"gunBeg\");\n\n    // smoke out of cannon and hatches\n    private _smokeBarrel = \"#particlesource\" createVehicleLocal [0,0,0];\n    _smokeBarrel setParticleClass \"MediumDestructionSmoke\";\n    _smokeBarrel attachTo [_vehicle, [0,0,0], _positionBarrelEnd];\n\n    private _effects = [_smokeBarrel];\n\n    {\n        private _position = [0,-2,0];\n\n        if !(_x isEqualTo \"#noselection\") then {\n            _position = _vehicle selectionPosition _x;\n        };\n\n        private _smoke = \"#particlesource\" createVehicleLocal [0,0,0];\n        _smoke setParticleClass \"ObjectDestructionSmoke1_2Smallx\";\n        _smoke attachTo [_vehicle, _position];\n\n        _effects pushBack _smoke;\n    } forEach _positions;\n\n    [{\n        params [\"_vehicle\", \"_effects\", \"_positions\"];\n\n        // this shit is busy being on fire, can't go driving around all over the place\n        if (local _vehicle) then {\n            _vehicle setFuel 0;\n        };\n\n        private _light = \"#lightpoint\" createVehicleLocal [0,0,0];\n        _light setLightBrightness 0.7;\n        _light setLightAmbient [1,0.4,0.15];\n        _light setLightColor [1,0.4,0.15];\n        _light lightAttachObject [_vehicle, [0,0,4]];\n\n        _effects pushBack _light;\n\n        // cookoffs\n        {\n            private _position = [0,-2,0];\n\n            if !(_x isEqualTo \"#noselection\") then {\n                _position = _vehicle selectionPosition _x;\n            };\n\n            private _fire = \"#particlesource\" createVehicleLocal [0,0,0];\n            _fire setParticleClass QGVAR(CookOff);\n            _fire attachTo [_vehicle, _position];\n\n            _effects pushBack _fire;\n        } forEach _positions;\n\n        if (isServer) then {\n            private _soundName = selectRandomWeighted [QGVAR(Sound_low), 0.1, QGVAR(Sound_mid), 0.25, QGVAR(Sound_high), 0.65];\n            // TODO - Players in the vehicle hear no sound (even after exiting the vehicle)\n            private _sound = createSoundSource [_soundName, position _vehicle, [], 0];\n\n            _effects pushBack _sound;\n        };\n\n        // indicator for the crew - yo, your shit's on fire\n        private _fnc_FlameEffect = {\n            params [\"_vehicle\", \"_fnc_FlameEffect\", \"_counter\"];\n\n            if (_vehicle == cameraOn) then {\n                [] call BIS_fnc_flamesEffect;\n            };\n\n            DEC(_counter);\n\n            if (_counter > 0) then {\n                [_fnc_FlameEffect, [_vehicle, _fnc_FlameEffect, _counter], FLAME_EFFECT_DELAY] call CBA_fnc_waitAndExecute\n            };\n        };\n\n        // Recursive function, occurs for duration of cookoff\n        [_vehicle, _fnc_FlameEffect, ceil(COOKOFF_TIME/FLAME_EFFECT_DELAY)] call _fnc_FlameEffect;\n\n        private _randomPosition = _vehicle getPos [100, random 360];\n\n        {\n            if (local _x && {!(_x call EFUNC(common,isPlayer))}) then {\n                _x leaveVehicle _vehicle;\n                _x doMove _randomPosition;\n            };\n        } forEach crew _vehicle;\n\n        [{\n            params [\"_vehicle\", \"_effects\"];\n\n            {\n                deleteVehicle _x;\n            } forEach _effects;\n\n            if (local _vehicle) then {\n                _vehicle setDamage 1;\n            };\n        }, [_vehicle, _effects], COOKOFF_TIME] call CBA_fnc_waitAndExecute; // TODO: Randomise cook off time with locality in mind\n    }, [_vehicle, _effects, _positions], SMOKE_TIME] call CBA_fnc_waitAndExecute;\n}, _vehicle, IGNITE_TIME] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_cookoff_fnc_cookOff"
      },
      {
        "fileName": "fnc_cookOffBox.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2, SilentSpike\n * Start a cook-off in the given ammo box.\n *\n * Arguments:\n * 0: Ammo box <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_box] call ace_cookoff_fnc_cookOffBox\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_box\"];\n\nif (_box getVariable [QGVAR(isCookingOff), false]) exitWith {};\n_box setVariable [QGVAR(isCookingOff), true];\n\nif (local _box) then {\n    [QGVAR(cookOffBox), _box] call CBA_fnc_remoteEvent;\n};\n\n[{\n    params [\"_box\"];\n\n    // Box will start smoking\n    private _smoke = \"#particlesource\" createVehicleLocal [0,0,0];\n    _smoke setParticleClass \"AmmoSmokeParticles2\";\n    _smoke attachTo [_box, [0,0,0]];\n\n    private _effects = [_smoke];\n\n    if (isServer) then {\n        private _sound = createSoundSource [\"Sound_Fire\", position _box, [], 0];\n        _effects pushBack _sound;\n    };\n\n    [{\n        params [\"_box\", \"_effects\"];\n\n        // These functions are smart and do all the cooking off work\n        if (local _box) then {\n            if (_box getVariable [QGVAR(enableAmmoCookoff), GVAR(enableAmmoCookoff)]) then {\n                if (GVAR(ammoCookoffDuration) == 0) exitWith {};\n                ([_box] call FUNC(getVehicleAmmo)) params [\"_mags\", \"_total\"];\n                [_box, _mags, _total] call FUNC(detonateAmmunition);\n            };\n\n            // This shit is busy being on fire, magazines aren't accessible/usable\n            clearMagazineCargoGlobal _box;\n        };\n\n        // Light the fire (also handles lighting)\n        private _fire = \"#particlesource\" createVehicleLocal [0,0,0];\n        _fire setParticleClass \"AmmoBulletCore\";\n        _fire attachTo [_box, [0,0,0]];\n\n        _effects pushBack _fire;\n\n        [{\n            params [\"_box\", \"_effects\"];\n\n            {\n                deleteVehicle _x;\n            } forEach _effects;\n\n            if (local _box) then {\n                _box setDamage 1;\n            };\n        }, [_box, _effects], COOKOFF_TIME_BOX] call CBA_fnc_waitAndExecute; // TODO: Change so that box is alive until no ammo left, with locality in mind\n    }, [_box, _effects], SMOKE_TIME] call CBA_fnc_waitAndExecute;\n}, _box, IGNITE_TIME] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_cookoff_fnc_cookOffBox"
      },
      {
        "fileName": "fnc_detonateAmmunition.sqf",
        "content": "/*\n * Author: Glowbal\n * Detonates ammunition from a vehicle until no ammo left\n *\n * Arguments:\n * 0: vehicle <OBJECT>\n * 1: Ammo Array <ARRAY>\n *      0: Magazine Classname <STRING>\n *      1: Ammo Count <NUMBER>\n * 2: Total Ammo Count <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle, magazinesAmmo _vehicle] call ace_cookoff_fnc_detonateAmmunition\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n#define MAX_TIME_BETWEEN_AMMO_DET 25\n\nparams [\"_vehicle\", \"_magazines\", \"_totalAmmo\"];\n\nif (isNull _vehicle) exitWith {}; // vehicle got deleted\nif (_magazines isEqualTo []) exitWith {}; // nothing to detonate anymore\nif (underwater _vehicle) exitWith {};\n\nprivate _magazineIndex = floor random(count _magazines);\nprivate _magazine = _magazines select _magazineIndex;\n_magazine params [\"_magazineClassname\", \"_amountOfMagazines\"];\n\nif (_amountOfMagazines > 0) exitWith {\n    private _removed = _amountOfMagazines min floor(1 + random(6 / GVAR(ammoCookoffDuration)));\n\n    _amountOfMagazines = _amountOfMagazines - _removed;\n    if (_amountOfMagazines <= 0) then {\n        _magazines deleteAt _magazineIndex;\n    } else {\n        _magazine set [1, _amountOfMagazines]; // clear out the magazine\n    };\n    private _timeBetweenAmmoDetonation = (((random 10) / (sqrt _totalAmmo)) min MAX_TIME_BETWEEN_AMMO_DET) max 0.1;\n    TRACE_2(\"\",_totalAmmo,_timeBetweenAmmoDetonation);\n    _totalAmmo = _totalAmmo - _removed;\n\n    private _ammo = getText (configFile >> \"CfgMagazines\" >> _magazineClassname >> \"ammo\");\n    private _ammoCfg = configFile >> \"CfgAmmo\" >> _ammo;\n\n    private _speedOfAmmo = getNumber (configFile >> \"CfgMagazines\" >> _magazineClassname >> \"initSpeed\");\n    private _simType = getText (_ammoCfg >> \"simulation\");\n\n    private _effect2pos = _vehicle selectionPosition \"destructionEffect2\";\n\n    private _spawnProjectile = {\n        params [\"_vehicle\", \"_ammo\", \"_speed\", \"_flyAway\"];\n\n        private _spawnPos = _vehicle modelToWorld [-0.2 + (random 0.4), -0.2 + (random 0.4), random 3];\n        if (_spawnPos select 2 < 0) then {\n            _spawnPos set [2, 0];\n        };\n\n        private _projectile = createVehicle [_ammo, _spawnPos, [], 0, \"CAN_COLLIDE\"];\n        if (_flyAway) then {\n            private _vectorAmmo = [(-1 + (random 2)), (-1 + (random 2)), -0.2 + (random 1)];\n            private _velVec = _vectorAmmo vectorMultiply _speed;\n            _projectile setVectorDir _velVec;\n            _projectile setVelocity _velVec;\n        } else {\n            _projectile setDamage 1;\n        };\n\n        _projectile;\n    };\n\n    private _speed = random (_speedOfAmmo / 10) max 1;\n\n    if (toLower _simType == \"shotbullet\") then {\n        private _sound = selectRandom [QUOTE(PATHTO_R(sounds\\light_crack_close.wss)), QUOTE(PATHTO_R(sounds\\light_crack_close_filtered.wss)), QUOTE(PATHTO_R(sounds\\heavy_crack_close.wss)), QUOTE(PATHTO_R(sounds\\heavy_crack_close_filtered.wss))];\n        playSound3D [_sound, objNull, false, (getPosASL _vehicle), 2, 1, 1250];\n\n        if (random 1 < 0.6) then {\n            [_vehicle, _ammo, _speed, true] call _spawnProjectile;\n        };\n    };\n    if (toLower _simType == \"shotshell\") then {\n        private _sound = selectRandom [QUOTE(PATHTO_R(sounds\\heavy_crack_close.wss)), QUOTE(PATHTO_R(sounds\\heavy_crack_close_filtered.wss))];\n        playSound3D [_sound, objNull, false, (getPosASL _vehicle), 2, 1, 1300];\n\n        if (random 1 < 0.15) then {\n            [_vehicle, _ammo, _speed, random 1 < 0.15] call _spawnProjectile;\n        };\n    };\n    if (toLower _simType == \"shotgrenade\") then {\n        if (random 1 < 0.9) then {\n            _speed = 0;\n        };\n        [_vehicle, _ammo, _speed, random 1 < 0.5] call _spawnProjectile;\n    };\n    if (toLower _simType in [\"shotrocket\", \"shotmissile\", \"shotsubmunitions\"]) then {\n        if (random 1 < 0.1) then {\n            private _sound = selectRandom [QUOTE(PATHTO_R(sounds\\cannon_crack_close.wss)), QUOTE(PATHTO_R(sounds\\cannon_crack_close_filtered.wss))];\n            playSound3D [_sound, objNull, false, (getPosASL _vehicle), 3, 1, 1600];\n\n            [_vehicle, _ammo, _speed, random 1 < 0.3] call _spawnProjectile;\n        } else {\n            createvehicle [\"ACE_ammoExplosionLarge\", (_vehicle modelToWorld _effect2pos), [], 0 , \"CAN_COLLIDE\"];\n        };\n    };\n    if (toLower _simType in [\"shotdirectionalbomb\", \"shotmine\"]) then {\n        if (random 1 < 0.5) then {\n            // Not all explosives detonate on destruction, some have scripted alternatives\n            private _scripted = getNumber (_ammoCfg >> \"triggerWhenDestroyed\") == 1;\n            if !(_scripted) then {\n                _ammo = getText (_ammoCfg >> \"ace_explosives_Explosive\");\n            };\n\n            // If a scripted alternative doesn't exist use generic explosion\n            if (_ammo != \"\") then {\n                [_vehicle, _ammo, 0, false] call _spawnProjectile;\n            } else {\n                createvehicle [\"SmallSecondary\", (_vehicle modelToWorld _effect2pos), [], 0 , \"CAN_COLLIDE\"];\n            };\n        };\n    };\n    if (toLower _simType == \"shotilluminating\") then {\n        if (random 1 < 0.15) then {\n            [_vehicle, _ammo, _speed, random 1 < 0.3] call _spawnProjectile;\n        };\n    };\n\n    [FUNC(detonateAmmunition), [_vehicle, _magazines, _totalAmmo], _timeBetweenAmmoDetonation] call CBA_fnc_waitAndExecute;\n};\nERROR_1(\"mag with no ammo - %1\", _magazine);\n",
        "functionName": "ace_cookoff_fnc_detonateAmmunition"
      },
      {
        "fileName": "fnc_engineFire.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Start fire in engine block of a car.\n *\n * Arguments:\n * 0: Vehicle <Object>\n *\n * Return Value:\n * None\n *\n * Example:\n * (vehicle player) call ace_cookoff_fnc_engineFire\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nif (_vehicle getVariable [QGVAR(isEngineSmoking), false]) exitWith {};\n_vehicle setVariable [QGVAR(isEngineSmoking), true];\n\nif (local _vehicle) then {\n    [QGVAR(engineFire), _vehicle] call CBA_fnc_remoteEvent;\n};\n\nprivate _offset = getArray (_vehicle call CBA_fnc_getObjectConfig >> QGVAR(engineSmokeOffset));\n\nif (_offset isEqualTo []) then {\n    _offset = [0,0,0];\n};\n\nprivate _position = [\n    0,\n    (boundingBoxReal _vehicle select 1 select 1) - 2,\n    (boundingBoxReal _vehicle select 0 select 2) + 2\n] vectorAdd _offset;\n\nprivate _smoke = \"#particlesource\" createVehicleLocal [0,0,0];\n_smoke setParticleClass \"ObjectDestructionSmoke1_2Smallx\";\n_smoke attachTo [_vehicle, _position];\n\n[{\n    (_this select 0) params [\"_vehicle\", \"_smoke\", \"_time\"];\n\n    if (!alive _vehicle || {_vehicle getHitPointDamage \"HitEngine\" < 0.9} || {CBA_missionTime > _time}) then {\n        deleteVehicle _smoke;\n        _vehicle setVariable [QGVAR(isEngineSmoking), false];\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n}, 5, [_vehicle, _smoke, CBA_missionTime + 240]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_cookoff_fnc_engineFire"
      },
      {
        "fileName": "fnc_getVehicleAmmo.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets all magazines inside of a vehicle.\n *\n * Arguments:\n * 0: Vehicle <Object>\n *\n * Return Value:\n * 0: Ammo Array <ARRAY>\n *      0: Magazine Classname <STRING>\n *      1: Ammo Count <NUMBER>\n * 1: Total Ammo Count <NUMBER>\n *\n * Example:\n * [vehicle player] call ace_cookoff_fnc_getVehicleAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_1(\"getVehicleAmmo\",_vehicle);\n\nprivate _ammoToDetonate = [];\nprivate _totalAmmo = 0;\n\n// Get ammo from turrets\n{\n    _x params [\"_mag\", \"\", \"_count\"];\n    if (_count > 0) then {\n        private _ammo = getText (configFile >> \"CfgMagazines\" >> _mag >> \"ammo\");\n        private _model = getText (configFile >> \"CfgAmmo\" >> _ammo >> \"model\");\n        if (_model == \"\\A3\\weapons_f\\empty\") exitWith {TRACE_3(\"skipping\",_mag,_ammo,_model);};\n        _ammoToDetonate pushBack [_mag, _count];\n        _totalAmmo = _totalAmmo + _count;\n    };\n} forEach (magazinesAllTurrets _vehicle);\n\n// Get ammo from cargo space\n{\n    _x params [\"_mag\", \"_count\"];\n    if (_count > 0) then {\n        _ammoToDetonate pushBack [_mag, _count];\n        _totalAmmo = _totalAmmo + _count;\n    };\n} forEach (magazinesAmmoCargo  _vehicle);\n\n// Get ammo from transportAmmo / ace_rearm\nprivate _vehCfg = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\nprivate _configSupply = (getNumber (_vehCfg >> \"transportAmmo\")) max (getNumber (_vehCfg >> QEGVAR(rearm,defaultSupply)));\nif (_vehicle getVariable [QEGVAR(rearm,isSupplyVehicle), (_configSupply > 0)]) then {\n    TRACE_1(\"transportAmmo vehicle - adding virtual ammo\",typeOf _vehicle);\n\n    _ammoToDetonate pushBack [\"2000Rnd_65x39_belt\", 2000];\n    _totalAmmo = _totalAmmo + 2000;\n    _ammoToDetonate pushBack [\"20Rnd_105mm_HEAT_MP\", 100];\n    _totalAmmo = _totalAmmo + 100;\n};\n\n[_ammoToDetonate, _totalAmmo]\n",
        "functionName": "ace_cookoff_fnc_getVehicleAmmo"
      },
      {
        "fileName": "fnc_handleDamage.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Handles all incoming damage for tanks (including wheeled APCs).\n *\n * Arguments:\n * HandleDamage EH <ARRAY>\n *\n * Return Value:\n * Damage to be inflicted. <NUMBER>\n *\n * Example:\n * _this call ace_cookoff_fnc_handleDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_simulationType\", \"_thisHandleDamage\"];\n_thisHandleDamage params [\"_vehicle\", \"\", \"_damage\", \"_source\", \"_ammo\", \"_hitIndex\", \"_shooter\"];\n\n// it's already dead, who cares?\nif (damage _vehicle >= 1) exitWith {};\n\n// get hitpoint name\nprivate _hitpoint = \"#structural\";\n\nif (_hitIndex != -1) then {\n    _hitpoint = toLower ((getAllHitPointsDamage _vehicle param [0, []]) select _hitIndex);\n};\n\n// get change in damage\nprivate _oldDamage = 0;\n\nif (_hitpoint isEqualTo \"#structural\") then {\n    _oldDamage = damage _vehicle;\n} else {\n    _oldDamage = _vehicle getHitIndex _hitIndex;\n};\n\nprivate _newDamage = _damage - _oldDamage;\n\n// handle different types of vehicles\n// note: exitWith only works here, because this is not the main scope of handleDamage\n// you cannot use the return value together with exitWith in the main scope, it's a bug\n// also, we add this event handler with the addEventHandler SQF command,\n// because the config version ignores the return value completely\nif (_simulationType == \"car\") exitWith {\n    // prevent destruction, let cook-off handle it if necessary\n    if (_hitpoint in [\"hithull\", \"hitfuel\", \"#structural\"] && {!IS_EXPLOSIVE_AMMO(_ammo)}) then {\n        _damage min 0.89\n    } else {\n        if (_hitpoint isEqualTo \"hitengine\" && {_damage > 0.9}) then {\n            _vehicle call FUNC(engineFire);\n        };\n        _damage\n    };\n};\n\nif (_simulationType == \"tank\") exitWith {\n    // determine ammo storage location\n    private _ammoLocationHitpoint = getText (_vehicle call CBA_fnc_getObjectConfig >> QGVAR(ammoLocation));\n\n    if (_hitIndex in (GVAR(cacheTankDuplicates) getVariable (typeOf _vehicle))) then {\n        _hitpoint = \"#subturret\";\n    };\n\n    // ammo was hit, high chance for cook-off\n    if (_hitpoint == _ammoLocationHitpoint) then {\n        if (_damage > 0.5 && {random 1 < 0.7}) then {\n            _vehicle call FUNC(cookOff);\n        };\n    } else {\n        if (_hitpoint in [\"hithull\", \"hitturret\", \"#structural\"] && {_newDamage > 0.6 + random 0.3}) then {\n            _vehicle call FUNC(cookOff);\n        };\n    };\n\n    // prevent destruction, let cook-off handle it if necessary\n    if (_hitpoint in [\"hithull\", \"hitfuel\", \"#structural\"]) then {\n        _damage min 0.89\n    } else {\n        _damage\n    };\n};\n\nif (_simulationType == \"box\") exitWith {\n    if (_hitpoint == \"#structural\" && _damage > 0.5) then {\n        // Almost always catch fire when hit by an explosive\n        if (IS_EXPLOSIVE_AMMO(_ammo)) then {\n            _vehicle call FUNC(cookOffBox);\n        } else {\n            // Need magazine to check for tracers\n            private _mag = \"\";\n            if (_source == _shooter) then {\n                _mag = currentMagazine _source;\n            } else {\n                _mag = _source currentMagazineTurret ([_shooter] call CBA_fnc_turretPath);\n            };\n            private _magCfg = configFile >> \"CfgMagazines\" >> _mag;\n\n            // Magazine could have changed during flight time (just ignore if so)\n            if (getText (_magCfg >> \"ammo\") == _ammo) then {\n                // If magazine's tracer density is high enough then low chance for cook off\n                private _tracers = getNumber (_magCfg >> \"tracersEvery\");\n                if (_tracers >= 1 && {_tracers <= 4}) then {\n                    if (random 1 < _oldDamage*0.05) then {\n                        _vehicle call FUNC(cookOffBox);\n                    };\n                };\n            };\n        };\n\n        // prevent destruction, let cook-off handle it if necessary\n        _damage min 0.89\n    } else {\n        _damage\n    };\n};\n",
        "functionName": "ace_cookoff_fnc_handleDamage"
      }
    ]
  },
  {
    "component": "dagr",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "\n[\"ACE3 Equipment\", QGVAR(MenuKey), localize LSTRING(ConfigureDAGR),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    if !([ACE_player, \"ACE_DAGR\"] call EFUNC(common,hasItem)) exitWith {false};\n\n    // Statement\n    if (!GVAR(menuRun)) then {\n        [] call FUNC(menuInit);\n    } else {\n        GVAR(PWR) = true; // Simulate pressing the power button\n    };\n    true\n},\n{false},\n[0, [false, true, false]], false] call CBA_fnc_addKeybind;  // (empty default key)\n\n[\"ACE3 Equipment\", QGVAR(ToggleKey), localize LSTRING(ToggleDAGR),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    if !([ACE_player, \"ACE_DAGR\"] call EFUNC(common,hasItem)) exitWith {false};\n\n    // Statement\n    [] call FUNC(toggleOverlay);\n    true\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind;  // (empty default key)\n\n//Add deviceKey entry:\nprivate _conditonCode = {\n    ([ACE_player, \"ACE_DAGR\"] call EFUNC(common,hasItem));\n};\nprivate _toggleCode = {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {};\n\n    // Statement\n    [] call FUNC(toggleOverlay);\n    if (!GVAR(run)) then {\n        [] call FUNC(menuInit);\n    };\n};\nprivate _closeCode = {\n    // Statement\n    if (GVAR(run)) then {\n        //If dispaly is open, close it:\n        [] call FUNC(toggleOverlay);\n    };\n    if (dialog && GVAR(menuRun)) then {\n        //If dialog is open, close it:\n        GVAR(menuRun) = false;\n        closeDialog 0;\n    };\n};\n[\"DAGR\", QPATHTOF(UI\\DAGR_Icon.paa), _conditonCode, _toggleCode, _closeCode] call EFUNC(common,deviceKeyRegisterNew);\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n#include \"initKeybinds.sqf\"\n\nGVAR(outputPFH) = -1;\n\nGVAR(run) = false;\nGVAR(hidden) = true;\nGVAR(menuRun) = false;\nGVAR(useDegrees) = true;\nGVAR(updateInterval) = 0.5;\n\nGVAR(numWaypoints) = 0;\nGVAR(wpString0) = \"\";\nGVAR(wpString1) = \"\";\nGVAR(wpString2) = \"\";\nGVAR(wpString3) = \"\";\nGVAR(wpString4) = \"\";\nGVAR(wp0) = 0;\nGVAR(wp1) = 0;\nGVAR(wp2) = 0;\nGVAR(wp3) = 0;\nGVAR(wp4) = 0;\n\nGVAR(displaySelection) = \"DATA\";\n\nGVAR(vectorConnected) = false;\nGVAR(noVectorData) = true;\nGVAR(vectorGrid) = \"00000000\";\n\n[QEGVAR(vector,rangefinderData), FUNC(handleRangeFinderData)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_handleRangeFinderData.sqf",
        "content": "/*\n * Author: Rosuto, Ruthberg\n * Handles incoming data packets from the Vectronix Vector LRF\n *\n * Arguments:\n * 0: Slope distance (Meters) <NUMBER>\n * 1: Azimuth (Degrees) <NUMBER>\n * 2: Inclination (Degrees) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1000, 45, 1] call ace_dagr_fnc_handleRangeFinderData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define EMP_RF_ACC 5 // Rangefinder Accuracy\n\nparams [\"_slopeDistance\", \"_azimuth\", \"_inclination\"];\n\nif (GVAR(vectorConnected)) then {\n    GVAR(LAZPOS) = (eyePos player) vectorAdd ([_slopeDistance, _azimuth, _inclination] call CBA_fnc_polar2vect);\n    GVAR(LAZDIST) = _slopeDistance * cos(_inclination);\n    GVAR(LAZDIST) = floor (GVAR(LAZDIST) / EMP_RF_ACC) *  EMP_RF_ACC;\n    GVAR(LAZHEADING) = _azimuth;\n    GVAR(noVectorData) = false;\n};\n",
        "functionName": "ace_dagr_fnc_handleRangeFinderData"
      },
      {
        "fileName": "fnc_menuInit.sqf",
        "content": "/*\n * Author: Rosuto, Ruthberg\n * Creates the DAGR menu dialog\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"DAGR_MENU\")\n#define __F1 266874\n#define __F2 266875\n#define __F3 266876\n#define __Option0 2668777\n#define __Option1 2668778\n#define __Option2 2668779\n#define __Option3 2668780\n#define __Option4 2668781\n#define __Selection0 2668783\n#define __Selection1 2668784\n#define __Selection2 2668785\n#define __Selection3 2668786\n#define __Selection4 2668787\n#define __mainText 2668782\n#define __PSelection1 2668788\n#define __PSelection2 2668789\n#define __PSelection3 2668790\n#define __PSelection4 2668791\n#define __PSelection5 2668792\n#define __PSelection6 2668793\n#define __PSelection7 2668794\n#define __PSelection8 2668795\n\n135471 cutText [\"\", \"PLAIN\"];\ncloseDialog 0;\ncreateDialog \"DAGR_MENU\";\n\nGVAR(menu) = \"main\";\nGVAR(selection) = 0;\nGVAR(numSelections) = 5;\nGVAR(tmpUpdateRate) = GVAR(updateInterval);\nGVAR(edit) = false;\nGVAR(add) = false;\nGVAR(pointer) = 0;\nGVAR(digit1) = 0;\nGVAR(digit2) = 0;\nGVAR(digit3) = 0;\nGVAR(digit4) = 0;\nGVAR(digit5) = 0;\nGVAR(digit6) = 0;\nGVAR(digit7) = 0;\nGVAR(digit8) = 0;\n\nGVAR(busy) = false;\nGVAR(busyTimer) = 0;\n\nGVAR(showNoWaypointsFound) = false;\nGVAR(showInfoUpdatin) = false;\nGVAR(showDeleting) = false;\nGVAR(showOutOfSpace) = false;\n\nGVAR(PWR) = false;\nGVAR(menuRun) = true;\n[{\n    if (!dialog || GVAR(PWR) || !GVAR(menuRun)) exitWith {\n        closeDialog 266860;\n        GVAR(menuRun) = false;\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    if (GVAR(MENU_B)) then {\n        GVAR(menu) = \"main\";\n        GVAR(selection) = 0;\n        GVAR(numSelections) = 5;\n    };\n\n    if (!GVAR(add) && !GVAR(edit)) then {\n        if (GVAR(DOWN)) then {\n            GVAR(selection) = (GVAR(numSelections) + GVAR(selection) + 1);\n        };\n        if (GVAR(UP)) then {\n            GVAR(selection) = (GVAR(numSelections) + GVAR(selection) - 1);\n        };\n        GVAR(selection) = if (GVAR(numSelections) > 0) then { GVAR(selection) % GVAR(numSelections) } else { 0 };\n    };\n\n    if (GVAR(LEFT)) then {\n        GVAR(pointer) = (8 + GVAR(pointer) - 1);\n    };\n    if (GVAR(RIGHT)) then {\n        GVAR(pointer) = (8 + GVAR(pointer) + 1);\n    };\n    GVAR(pointer) = GVAR(pointer) % 8;\n\n    (__dsp displayCtrl __PSelection1) ctrlSetText \"\";\n    (__dsp displayCtrl __PSelection2) ctrlSetText \"\";\n    (__dsp displayCtrl __PSelection3) ctrlSetText \"\";\n    (__dsp displayCtrl __PSelection4) ctrlSetText \"\";\n    (__dsp displayCtrl __PSelection5) ctrlSetText \"\";\n    (__dsp displayCtrl __PSelection6) ctrlSetText \"\";\n    (__dsp displayCtrl __PSelection7) ctrlSetText \"\";\n    (__dsp displayCtrl __PSelection8) ctrlSetText \"\";\n\n    (__dsp displayCtrl __Selection0) ctrlSetText \"\";\n    (__dsp displayCtrl __Selection1) ctrlSetText \"\";\n    (__dsp displayCtrl __Selection2) ctrlSetText \"\";\n    (__dsp displayCtrl __Selection3) ctrlSetText \"\";\n    (__dsp displayCtrl __Selection4) ctrlSetText \"\";\n\n    (__dsp displayCtrl __F1) ctrlSetText \"\";\n    (__dsp displayCtrl __F2) ctrlSetText \"\";\n    (__dsp displayCtrl __F3) ctrlSetText \"\";\n\n    (__dsp displayCtrl __mainText) ctrlSetText \"\";\n    (__dsp displayCtrl __Option0) ctrlSetText \"\";\n    (__dsp displayCtrl __Option1) ctrlSetText \"\";\n    (__dsp displayCtrl __Option2) ctrlSetText \"\";\n    (__dsp displayCtrl __Option3) ctrlSetText \"\";\n    (__dsp displayCtrl __Option4) ctrlSetText \"\";\n\n    switch (GVAR(menu)) do {\n        case \"main\": {\n            if (GVAR(SEL)) then {\n                 switch (GVAR(selection)) do {\n                    case 0: {\n                        GVAR(displaySelection) = \"DATA\";\n                        GVAR(vectorConnected) = false;\n                        if (!GVAR(busy)) then {\n                            GVAR(busy) = true;\n                            GVAR(busyTimer) = CBA_missionTime;\n                        };\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Acquiring Data.\";\n                        if (CBA_missionTime - GVAR(busyTimer) > 0.5) then {\n                            (__dsp displayCtrl __mainText) ctrlSetText \"Acquiring Data..\";\n                        };\n                        if (CBA_missionTime - GVAR(busyTimer) > 1.0) then {\n                            (__dsp displayCtrl __mainText) ctrlSetText \"Acquiring Data...\";\n                        };\n                        if (CBA_missionTime - GVAR(busyTimer) > 1.5) then {\n                            (__dsp displayCtrl __mainText) ctrlSetText \"Position Acquired\";\n                        };\n                        if (CBA_missionTime - GVAR(busyTimer) > 3.0) then {\n                            GVAR(busy) = false;\n                        };\n                    };\n                    case 1: {\n                        if (GVAR(numWaypoints) < 1) then {\n                            (__dsp displayCtrl __mainText) ctrlSetText \"No Waypoints Found\";\n                            if (!GVAR(busy)) then {\n                                GVAR(showNoWaypointsFound) = true;\n                                GVAR(busy) = true;\n                                GVAR(busyTimer) = CBA_missionTime;\n                            };\n                        } else {\n                            GVAR(menu) = \"goto_wp\"; GVAR(numSelections) = GVAR(numWaypoints); GVAR(selection) = 0;\n                        };\n                    };\n                    case 2: { GVAR(menu) = \"wp_list\"; GVAR(numSelections) = GVAR(numWaypoints); GVAR(selection) = 0 };\n                    case 3: { GVAR(menu) = \"connect\"; GVAR(numSelections) = 1; };\n                    case 4: { GVAR(menu) = \"options\"; GVAR(numSelections) = 2; };\n                 };\n            };\n            if (GVAR(busy) && GVAR(showNoWaypointsFound)) then {\n                if (CBA_missionTime - GVAR(busyTimer) > 2) then {\n                    GVAR(showNoWaypointsFound) = false;\n                    GVAR(busy) = false;\n                };\n            };\n            if (!GVAR(busy)) then {\n                (__dsp displayCtrl __Option0) ctrlSetText \"DATA VIEW\";\n                (__dsp displayCtrl __Option1) ctrlSetText \"GOTO WP\";\n                (__dsp displayCtrl __Option2) ctrlSetText \"WP LIST\";\n                (__dsp displayCtrl __Option3) ctrlSetText \"CONNECT TO\";\n                (__dsp displayCtrl __Option4) ctrlSetText \"OPTIONS\";\n                (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\n            };\n        };\n        case \"goto_wp\": {\n            if (!GVAR(busy)) then {\n                (__dsp displayCtrl __Option0) ctrlSetText GVAR(wpString0);\n                (__dsp displayCtrl __Option1) ctrlSetText GVAR(wpString1);\n                (__dsp displayCtrl __Option2) ctrlSetText GVAR(wpString2);\n                (__dsp displayCtrl __Option3) ctrlSetText GVAR(wpString3);\n                (__dsp displayCtrl __Option4) ctrlSetText GVAR(wpString4);\n                if (GVAR(numSelections) > 0) then {\n                    (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\n                };\n            };\n            if (GVAR(SEL)) then {\n                GVAR(vectorConnected) = false;\n                GVAR(displaySelection) = \"WP\";\n                switch (GVAR(selection)) do {\n                    case 0: { DAGR_WP_INFO = GVAR(wp0); };\n                    case 1: { DAGR_WP_INFO = GVAR(wp1); };\n                    case 2: { DAGR_WP_INFO = GVAR(wp2); };\n                    case 3: { DAGR_WP_INFO = GVAR(wp3); };\n                    case 4: { DAGR_WP_INFO = GVAR(wp4); };\n                };\n                if (!GVAR(busy)) then {\n                    GVAR(showInfoUpdating) = true;\n                    GVAR(busy) = true;\n                    GVAR(busyTimer) = CBA_missionTime;\n                };\n            };\n            if (GVAR(busy) && GVAR(showInfoUpdating)) then {\n                (__dsp displayCtrl __mainText) ctrlSetText \"Info Update.\";\n                if (CBA_missionTime - GVAR(busyTimer) > 1) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Info Update..\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 1.2) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Info Update...\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 1.4) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Info Updated\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 2.9) then {\n                    GVAR(showInfoUpdating) = false;\n                    GVAR(busy) = false;\n                };\n            };\n        };\n        case \"wp_list\": {\n            if (!GVAR(add) && !GVAR(edit)) then {\n                if (!GVAR(busy)) then {\n                    (__dsp displayCtrl __Option0) ctrlSetText GVAR(wpString0);\n                    (__dsp displayCtrl __Option1) ctrlSetText GVAR(wpString1);\n                    (__dsp displayCtrl __Option2) ctrlSetText GVAR(wpString2);\n                    (__dsp displayCtrl __Option3) ctrlSetText GVAR(wpString3);\n                    (__dsp displayCtrl __Option4) ctrlSetText GVAR(wpString4);\n                    (__dsp displayCtrl __F1) ctrlSetText \"Add\";\n                    (__dsp displayCtrl __F2) ctrlSetText \"Edit\";\n                    (__dsp displayCtrl __F3) ctrlSetText \"Delete\";\n                    if (GVAR(numSelections) > 0) then {\n                        (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\n                    };\n                };\n                if (GVAR(F3) && GVAR(numWaypoints) > 0) then {\n                    if (!GVAR(busy)) then {\n                        switch (GVAR(selection)) do {\n                            case 0: {\n                                GVAR(wpString0) = GVAR(wpString1);\n                                GVAR(wp0) = GVAR(wp1);\n                                GVAR(wpString1) = GVAR(wpString2);\n                                GVAR(wp1) = GVAR(wp2);\n                                GVAR(wpString2) = GVAR(wpString3);\n                                GVAR(wp2) = GVAR(wp3);\n                                GVAR(wpString3) = GVAR(wpString4);\n                                GVAR(wp3) = GVAR(wp4);\n                                GVAR(wpString4) = \"\";\n                                GVAR(wp4) = \"\";\n                            };\n                            case 1: {\n                                GVAR(wpString1) = GVAR(wpString2);\n                                GVAR(wp1) = GVAR(wp2);\n                                GVAR(wpString2) = GVAR(wpString3);\n                                GVAR(wp2) = GVAR(wp3);\n                                GVAR(wpString3) = GVAR(wpString4);\n                                GVAR(wp3) = GVAR(wp4);\n                                GVAR(wpString4) = \"\";\n                                GVAR(wp4) = \"\";\n                            };\n                            case 2: {\n                                GVAR(wpString2) = GVAR(wpString3);\n                                GVAR(wp2) = GVAR(wp3);\n                                GVAR(wpString3) = GVAR(wpString4);\n                                GVAR(wp3) = GVAR(wp4);\n                                GVAR(wpString4) = \"\";\n                                GVAR(wp4) = \"\";\n                            };\n                            case 3: {\n                                GVAR(wpString3) = GVAR(wpString4);\n                                GVAR(wp3) = GVAR(wp4);\n                                GVAR(wpString4) = \"\";\n                                GVAR(wp4) = \"\";\n                            };\n                            case 4: {\n                                GVAR(wpString4) = \"\";\n                                GVAR(wp4) = \"\";\n                            };\n                        };\n                        GVAR(numWaypoints) = GVAR(numWaypoints) - 1;\n                        GVAR(numSelections) = GVAR(numWaypoints);\n                        GVAR(showDeleting) = true;\n                        GVAR(busy) = true;\n                        GVAR(busyTimer) = CBA_missionTime;\n                    };\n                };\n                if (GVAR(busy) && GVAR(showDeleting)) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Deleting.\";\n                    if (CBA_missionTime - GVAR(busyTimer) > 1) then {\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Deleting..\";\n                    };\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.2) then {\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Deleting...\";\n                    };\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.4) then {\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Waypoint Deleted\";\n                    };\n                    if (CBA_missionTime - GVAR(busyTimer) > 2.9) then {\n                        GVAR(showDeleting) = false;\n                        GVAR(busy) = false;\n                    };\n                };\n                if (GVAR(F1)) then {\n                    if (GVAR(numWaypoints) == 5) then {\n                        if (!GVAR(busy)) then {\n                            GVAR(showOutOfSpace) = true;\n                            GVAR(busy) = true;\n                            GVAR(busyTimer) = CBA_missionTime;\n                        };\n                    } else {\n                        GVAR(digit1) = 0;\n                        GVAR(digit2) = 0;\n                        GVAR(digit3) = 0;\n                        GVAR(digit4) = 0;\n                        GVAR(digit5) = 0;\n                        GVAR(digit6) = 0;\n                        GVAR(digit7) = 0;\n                        GVAR(digit8) = 0;\n                        GVAR(pointer) = 0;\n                        GVAR(add) = true;\n                    };\n                };\n                if (GVAR(busy) && GVAR(showOutOfSpace)) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Out of Space\";\n                    if (CBA_missionTime - GVAR(busyTimer) > 2.5) then {\n                        GVAR(showOutOfSpace) = false;\n                        GVAR(busy) = false;\n                    };\n                };\n                if (GVAR(F2) && GVAR(numWaypoints) > 0) then {\n                    GVAR(pointer) = 0;\n                    GVAR(edit) = true;\n                    GVAR(add) = false;\n                    switch (GVAR(selection)) do {\n                        case 0: {\n                            GVAR(digit1) = floor (GVAR(wp0) / 10000000);\n                            GVAR(digit2) = floor (GVAR(wp0) / 1000000 - GVAR(digit1) *10);\n                            GVAR(digit3) = floor (GVAR(wp0) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\n                            GVAR(digit4) = floor (GVAR(wp0) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\n                            GVAR(digit5) = floor (GVAR(wp0) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\n                            GVAR(digit6) = floor (GVAR(wp0) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\n                            GVAR(digit7) = floor (GVAR(wp0) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\n                            GVAR(digit8) = floor (GVAR(wp0) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\n                        };\n                        case 1: {\n                            GVAR(digit1) = floor (GVAR(wp1) / 10000000);\n                            GVAR(digit2) = floor (GVAR(wp1) / 1000000 - GVAR(digit1) *10);\n                            GVAR(digit3) = floor (GVAR(wp1) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\n                            GVAR(digit4) = floor (GVAR(wp1) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\n                            GVAR(digit5) = floor (GVAR(wp1) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\n                            GVAR(digit6) = floor (GVAR(wp1) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\n                            GVAR(digit7) = floor (GVAR(wp1) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\n                            GVAR(digit8) = floor (GVAR(wp1) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\n                        };\n                        case 2: {\n                            GVAR(digit1) = floor (GVAR(wp2) / 10000000);\n                            GVAR(digit2) = floor (GVAR(wp2) / 1000000 - GVAR(digit1) *10);\n                            GVAR(digit3) = floor (GVAR(wp2) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\n                            GVAR(digit4) = floor (GVAR(wp2) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\n                            GVAR(digit5) = floor (GVAR(wp2) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\n                            GVAR(digit6) = floor (GVAR(wp2) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\n                            GVAR(digit7) = floor (GVAR(wp2) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\n                            GVAR(digit8) = floor (GVAR(wp2) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\n                        };\n                        case 3: {\n                            GVAR(digit1) = floor (GVAR(wp3) / 10000000);\n                            GVAR(digit2) = floor (GVAR(wp3) / 1000000 - GVAR(digit1) *10);\n                            GVAR(digit3) = floor (GVAR(wp3) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\n                            GVAR(digit4) = floor (GVAR(wp3) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\n                            GVAR(digit5) = floor (GVAR(wp3) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\n                            GVAR(digit6) = floor (GVAR(wp3) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\n                            GVAR(digit7) = floor (GVAR(wp3) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\n                            GVAR(digit8) = floor (GVAR(wp3) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\n                        };\n                        case 4: {\n                            GVAR(digit1) = floor (GVAR(wp4) / 10000000);\n                            GVAR(digit2) = floor (GVAR(wp4) / 1000000 - GVAR(digit1) *10);\n                            GVAR(digit3) = floor (GVAR(wp4) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\n                            GVAR(digit4) = floor (GVAR(wp4) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\n                            GVAR(digit5) = floor (GVAR(wp4) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\n                            GVAR(digit6) = floor (GVAR(wp4) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\n                            GVAR(digit7) = floor (GVAR(wp4) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\n                            GVAR(digit8) = floor (GVAR(wp4) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\n                        };\n                    };\n                };\n            } else {\n                if (!GVAR(busy)) then {\n                    (__dsp displayCtrl __F1) ctrlSetText \"Save\";\n                    (__dsp displayCtrl __F2) ctrlSetText \"Vector\";\n                    (__dsp displayCtrl __F3) ctrlSetText \"Cancel\";\n                    GVAR(output) = str GVAR(digit1) + str GVAR(digit2) + str GVAR(digit3) + str GVAR(digit4) + str GVAR(digit5) + str GVAR(digit6) + str GVAR(digit7) + str GVAR(digit8);\n                    (__dsp displayCtrl __mainText) ctrlSetText GVAR(output);\n                    (__dsp displayCtrl __PSelection1 + GVAR(pointer)) ctrlSetText QPATHTOF(UI\\DAGR_PSelection.paa);\n                };\n                if (GVAR(F1)) then {\n                    if (!GVAR(busy)) then {\n                        if (GVAR(add)) then {\n                            switch (GVAR(numWaypoints)) do {\n                                case 0: { GVAR(wpString0) = GVAR(output); GVAR(wp0) = parseNumber GVAR(output); };\n                                case 1: { GVAR(wpString1) = GVAR(output); GVAR(wp1) = parseNumber GVAR(output); };\n                                case 2: { GVAR(wpString2) = GVAR(output); GVAR(wp2) = parseNumber GVAR(output); };\n                                case 3: { GVAR(wpString3) = GVAR(output); GVAR(wp3) = parseNumber GVAR(output); };\n                                case 4: { GVAR(wpString4) = GVAR(output); GVAR(wp4) = parseNumber GVAR(output); };\n                            };\n                            GVAR(numWaypoints) = GVAR(numWaypoints) + 1;\n                            GVAR(numSelections) = GVAR(numWaypoints);\n                            GVAR(selection) = 0;\n                        };\n                        if (GVAR(edit)) then {\n                            switch (GVAR(selection)) do {\n                                case 0: { GVAR(wpString0) = GVAR(output); GVAR(wp0) = parseNumber GVAR(output); };\n                                case 1: { GVAR(wpString1) = GVAR(output); GVAR(wp1) = parseNumber GVAR(output); };\n                                case 2: { GVAR(wpString2) = GVAR(output); GVAR(wp2) = parseNumber GVAR(output); };\n                                case 3: { GVAR(wpString3) = GVAR(output); GVAR(wp3) = parseNumber GVAR(output); };\n                                case 4: { GVAR(wpString4) = GVAR(output); GVAR(wp4) = parseNumber GVAR(output); };\n                            };\n                        };\n                        GVAR(busy) = true;\n                        GVAR(busyTimer) = CBA_missionTime;\n                    };\n                    (__dsp displayCtrl __F1) ctrlSetText \"\";\n                    (__dsp displayCtrl __F2) ctrlSetText \"\";\n                    (__dsp displayCtrl __F3) ctrlSetText \"\";\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Saving.\";\n                    if (CBA_missionTime - GVAR(busyTimer) > 1) then {\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Saving..\";\n                    };\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.2) then {\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Saving...\";\n                    };\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.4) then {\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Waypoint Saved\";\n                    };\n                    if (CBA_missionTime - GVAR(busyTimer) > 2.9) then {\n                        GVAR(edit) = false;\n                        GVAR(add) = false;\n                        GVAR(busy) = false;\n                    };\n                };\n                if (GVAR(F2)) then {\n                    private _grid = toArray GVAR(vectorGrid);\n                    _grid deleteAt 4;\n                    _grid = toString _grid;\n                    private _gridVector = parseNumber _grid;\n                    GVAR(digit1) = floor(_gridVector / 10000000);\n                    GVAR(digit2) = floor(_gridVector / 1000000 - GVAR(digit1) *10);\n                    GVAR(digit3) = floor(_gridVector / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\n                    GVAR(digit4) = floor(_gridVector / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\n                    GVAR(digit5) = floor(_gridVector / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\n                    GVAR(digit6) = floor(_gridVector / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\n                    GVAR(digit7) = floor(_gridVector / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\n                    GVAR(digit8) = floor(_gridVector - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\n                };\n                if (GVAR(F3)) then {\n                    if (!GVAR(busy)) then {\n                        GVAR(busy) = true;\n                        GVAR(busyTimer) = CBA_missionTime;\n                    } else {\n                        (__dsp displayCtrl __F1) ctrlSetText \"Save\";\n                        (__dsp displayCtrl __F2) ctrlSetText \"Vector\";\n                        (__dsp displayCtrl __F3) ctrlSetText \"Cancel\";\n                        GVAR(output) = str GVAR(digit1) + str GVAR(digit2) + str GVAR(digit3) + str GVAR(digit4) + str GVAR(digit5) + str GVAR(digit6) + str GVAR(digit7) + str GVAR(digit8);\n                        (__dsp displayCtrl __mainText) ctrlSetText GVAR(output);\n                    };\n                    if (CBA_missionTime - GVAR(busyTimer) > 0.1) then {\n                        GVAR(add) = false;\n                        GVAR(edit) = false;\n                        GVAR(busy) = false;\n                    };\n                };\n                if (GVAR(UP)) then {\n                    switch (GVAR(pointer) + 1) do {\n                        case 1: { GVAR(digit1) = (10 + GVAR(digit1) + 1) % 10 };\n                        case 2: { GVAR(digit2) = (10 + GVAR(digit2) + 1) % 10 };\n                        case 3: { GVAR(digit3) = (10 + GVAR(digit3) + 1) % 10 };\n                        case 4: { GVAR(digit4) = (10 + GVAR(digit4) + 1) % 10 };\n                        case 5: { GVAR(digit5) = (10 + GVAR(digit5) + 1) % 10 };\n                        case 6: { GVAR(digit6) = (10 + GVAR(digit6) + 1) % 10 };\n                        case 7: { GVAR(digit7) = (10 + GVAR(digit7) + 1) % 10 };\n                        case 8: { GVAR(digit8) = (10 + GVAR(digit8) + 1) % 10 };\n                    };\n                };\n                if (GVAR(DOWN)) then {\n                    switch (GVAR(pointer) + 1) do {\n                        case 1: { GVAR(digit1) = (10 + GVAR(digit1) - 1) % 10 };\n                        case 2: { GVAR(digit2) = (10 + GVAR(digit2) - 1) % 10 };\n                        case 3: { GVAR(digit3) = (10 + GVAR(digit3) - 1) % 10 };\n                        case 4: { GVAR(digit4) = (10 + GVAR(digit4) - 1) % 10 };\n                        case 5: { GVAR(digit5) = (10 + GVAR(digit5) - 1) % 10 };\n                        case 6: { GVAR(digit6) = (10 + GVAR(digit6) - 1) % 10 };\n                        case 7: { GVAR(digit7) = (10 + GVAR(digit7) - 1) % 10 };\n                        case 8: { GVAR(digit8) = (10 + GVAR(digit8) - 1) % 10 };\n                    };\n                };\n            };\n        };\n        case \"connect\": {\n            if (!GVAR(busy)) then {\n                (__dsp displayCtrl __Option0) ctrlSetText \"Vector 21\";\n                (__dsp displayCtrl __Selection0) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\n            };\n            if (GVAR(SEL)) then {\n                if (!GVAR(busy)) then {\n                    GVAR(busy) = true;\n                    GVAR(busyTimer) = CBA_missionTime;\n                };\n                (__dsp displayCtrl __mainText) ctrlSetText \"Connecting.\";\n                if (CBA_missionTime - GVAR(busyTimer) > 0.2) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Connecting..\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 0.4) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Connecting...\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 0.6) then {\n                    if (({_x isKindOf  [\"ACE_Vector\", configFile >> \"CfgWeapons\"]} count (weapons ACE_player)) > 0) then {\n                        GVAR(displaySelection) = \"VECTOR\";\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Vector Connected\";\n                        GVAR(vectorConnected) = true;\n                    } else {\n                        (__dsp displayCtrl __mainText) ctrlSetText \"No Device Found\";\n                        GVAR(vectorConnected) = false;\n                    };\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 3.1) then {\n                    GVAR(busy) = false;\n                    if (GVAR(vectorConnected)) then {\n                        GVAR(menu) = \"main\"; GVAR(numSelections) = 5;\n                    };\n                };\n            };\n        };\n        case \"options\": {\n            (__dsp displayCtrl __Option0) ctrlSetText \"Signal Delay\";\n            (__dsp displayCtrl __Option1) ctrlSetText (if (GVAR(useDegrees)) then { \"Direction: Deg\" } else { \"Direction: MIL\" });\n            (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\n            if (GVAR(SEL)) then {\n                GVAR(vectorConnected) = false;\n                switch (GVAR(selection)) do {\n                    case 0: { GVAR(menu) = \"update_rate\"; GVAR(numSelections) = 1; GVAR(tmpUpdateRate) = GVAR(updateInterval); };\n                    case 1: { GVAR(useDegrees) = !GVAR(useDegrees); };\n                };\n            }\n        };\n        case \"update_rate\": {\n            if (GVAR(F1)) then {\n                GVAR(updateInterval) = GVAR(tmpUpdateRate);\n                if (!GVAR(busy)) then {\n                    GVAR(busy) = true;\n                    GVAR(busyTimer) = CBA_missionTime;\n                };\n                (__dsp displayCtrl __mainText) ctrlSetText \"Updating.\";\n                if (CBA_missionTime - GVAR(busyTimer) > 0.2) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Updating..\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 0.4) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Updating...\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 0.6) then {\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Update Success\";\n                };\n                if (CBA_missionTime - GVAR(busyTimer) > 2.1) then {\n                    GVAR(busy) = false;\n                    GVAR(menu) = \"options\"; GVAR(numSelections) = 2;\n                };\n            };\n            if (GVAR(F3)) then {\n                GVAR(menu) = \"options\"; GVAR(numSelections) = 2;\n            };\n            if (GVAR(DOWN)) then {\n                GVAR(tmpUpdateRate) = GVAR(tmpUpdateRate) - 0.1;\n            };\n            if (GVAR(UP)) then {\n                GVAR(tmpUpdateRate) = GVAR(tmpUpdateRate) + 0.1;\n            };\n            GVAR(tmpUpdateRate) = 0.1 max GVAR(tmpUpdateRate) min 2.0;\n            if (!GVAR(busy)) then {\n                (__dsp displayCtrl __mainText) ctrlSetText (Str(GVAR(tmpUpdateRate) * 1000) + \"ms\");\n                (__dsp displayCtrl __F1) ctrlSetText \"Save\";\n                (__dsp displayCtrl __F3) ctrlSetText \"Cancel\";\n            };\n        };\n    };\n\n    if (!GVAR(busy)) then {\n        GVAR(F3) = false;\n        GVAR(F2) = false;\n        GVAR(F1) = false;\n        GVAR(MENU_B) = false;\n        GVAR(SEL) = false;\n        DAGR_NEXT = false;\n        GVAR(RIGHT) = false;\n        GVAR(LEFT) = false;\n        GVAR(UP) = false;\n        GVAR(DOWN) = false;\n        GVAR(PWR) = false;\n    };\n}, 0, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_dagr_fnc_menuInit"
      },
      {
        "fileName": "fnc_outputData.sqf",
        "content": "/*\n * Author: Rosuto\n * DAGR data output loop\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_dagr_fnc_outputData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n135471 cutRsc [\"DAGR_DISPLAY\", \"plain down\"];\n\n#define __display (uiNameSpace getVariable \"DAGR_DISPLAY\")\n\n#define __gridControl (__display displayCtrl 266851)\n#define __speedControl (__display displayCtrl 266852)\n#define __elevationControl (__display displayCtrl 266853)\n#define __headingControl (__display displayCtrl 266854)\n#define __timeControl (__display displayCtrl 266855)\n#define __background (__display displayCtrl 266856)\n\n__background ctrlSetText QPATHTOF(UI\\dagr_gps.paa);\n\nif (GVAR(outputPFH) != -1) exitWith {};\n\nGVAR(outputPFH) = [{\n    // Abort Condition\n    if !(GVAR(run) && [ACE_player, \"ACE_DAGR\"] call EFUNC(common,hasItem)) exitWith {\n        GVAR(outputPFH) = -1;\n        135471 cutText [\"\", \"PLAIN\"];\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    // GRID\n    private _gridArray = [(getPos ACE_player), false] call EFUNC(common,getMapGridFromPos);\n    _gridArray params [\"_gridArrayX\",\"_gridArrayY\"];\n    private _dagrGrid = format [\"%1 %2\", ((_gridArrayX) select [0,4]), ((_gridArrayY) select [0,4])];\n\n    // SPEED\n    private _speed = speed (vehicle ACE_player);\n    _speed = floor (_speed * 10) / 10;\n    _speed = abs(_speed);\n    _dagrspeed = str _speed + \"kph\";\n\n    // Elevation\n    private _elevation = getPosASL ACE_player;\n    _elevation = floor ((_elevation select 2) + EGVAR(common,mapAltitude));\n    private _dagrElevation = str _elevation + \"m\";\n\n    // Heading\n    private _dagrHeading = if (!GVAR(useDegrees)) then {\n        floor (DEG_TO_MIL(direction (vehicle ACE_player)))\n    } else {\n        floor (direction (vehicle ACE_player))\n    };\n\n    // Time\n    private _dagrTime = [daytime, \"HH:MM\"] call bis_fnc_timeToString;\n\n    // Output\n    __gridControl ctrlSetText format [\"%1\", _dagrGrid];\n    __speedControl ctrlSetText format [\"%1\", _dagrSpeed];\n    __elevationControl ctrlSetText format [\"%1\", _dagrElevation];\n    __headingControl ctrlSetText (if (!GVAR(useDegrees)) then { format [\"%1\", _dagrHeading] } else { format [\"%1 �\", _dagrHeading] });\n    __timeControl ctrlSetText format [\"%1\", _dagrTime];\n\n}, GVAR(updateInterval), []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_dagr_fnc_outputData"
      },
      {
        "fileName": "fnc_outputVector.sqf",
        "content": "/*\n * Author: Rosuto\n * DAGR vector output loop\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_dagr_fnc_outputVector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n135471 cutRsc [\"DAGR_DISPLAY\", \"plain down\"];\n\n#define __display (uiNameSpace getVariable \"DAGR_DISPLAY\")\n\n#define __gridControl (__display displayCtrl 266851)\n#define __speedControl (__display displayCtrl 266858)\n#define __elevationControl (__display displayCtrl 266853)\n#define __headingControl (__display displayCtrl 266854)\n#define __timeControl (__display displayCtrl 266855)\n#define __background (__display displayCtrl 266856)\n\n__background ctrlSetText QPATHTOF(UI\\dagr_vector.paa);\n\nif (GVAR(noVectorData)) exitWith {};\nGVAR(LAZPOS) params [\"_lazPosX\", \"_lazPosY\", \"_lazPosZ\"];\n\n// Incase grids go neg due to 99-00 boundry\nif (_lazPosX < 0) then { _lazPosX = _lazPosX + 99999;};\nif (_lazPosY < 0) then {_lazPosY = _lazPosY + 99999;};\n\n// Find laser position\nprivate _xGrid = toArray Str(round _lazPosX);\n\nwhile {count _xGrid < 5} do {\n    _xGrid = [48] + _xGrid;\n};\n_xGrid resize 4;\n_xGrid = toString _xGrid;\n_xGrid = parseNumber _xGrid;\n\nprivate _yGrid = toArray Str(round _lazPosY);\nwhile {count _yGrid < 5} do {\n    _yGrid = [48] + _yGrid;\n};\n_yGrid resize 4;\n_yGrid = toString _yGrid;\n_yGrid = parseNumber _yGrid;\n\nprivate _xCoord = switch true do {\n    case (_xGrid >= 1000): { \"\" + Str(_xGrid) };\n    case (_xGrid >= 100): { \"0\" + Str(_xGrid) };\n    case (_xGrid >= 10): { \"00\" + Str(_xGrid) };\n    default             { \"000\" + Str(_xGrid) };\n};\n\nprivate _yCoord = switch true do {\n    case (_yGrid >= 1000): { \"\" + Str(_yGrid) };\n    case (_yGrid >= 100): { \"0\" + Str(_yGrid) };\n    case (_yGrid >= 10): { \"00\" + Str(_yGrid) };\n    default             { \"000\" + Str(_yGrid) };\n};\n\nprivate _dagrGrid = _xCoord + \" \" + _yCoord;\n\n// Find target elevation\nprivate _elevation = floor ((_lazPosZ) + EGVAR(common,mapAltitude));\nprivate _dagrElevation = str _elevation + \"m\";\n\n// Time\nprivate _dagrTime = [daytime, \"HH:MM\"] call bis_fnc_timeToString;\n\n// Bearing\nprivate _bearing = GVAR(LAZHEADING);\nif (_bearing >= 360) then {_bearing = _bearing - 360;};\nif (!GVAR(useDegrees)) then {_bearing = DEG_TO_MIL(_bearing)};\n_bearing = floor (_bearing);\n\n// Distance\nprivate _dagrDist = str GVAR(LAZDIST) + \"m\";\n\n// Put grid into variable so DAGR menu can access it\nGVAR(vectorGrid) = _dagrGrid;\n\n// OUTPUT\n__gridControl ctrlSetText format [\"%1\", _dagrGrid];\n__speedControl ctrlSetText format [\"%1\", _dagrDist];\n__elevationControl ctrlSetText format [\"%1\", _dagrElevation];\n__headingControl ctrlSetText (if (!GVAR(useDegrees)) then { format [\"%1\", _bearing] } else { format [\"%1°\", _bearing] });\n__timeControl ctrlSetText format [\"%1\", _dagrTime];\n",
        "functionName": "ace_dagr_fnc_outputVector"
      },
      {
        "fileName": "fnc_outputWP.sqf",
        "content": "/*\n * Author: Rosuto\n * DAGR waypoint output loop\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_dagr_fnc_outputWP\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n135471 cutRsc [\"DAGR_DISPLAY\", \"plain down\"];\n\n#define __display (uiNameSpace getVariable \"DAGR_DISPLAY\")\n\n#define __gridControl (__display displayCtrl 266851)\n#define __speedControl (__display displayCtrl 266858)\n#define __elevationControl (__display displayCtrl 266857)\n#define __headingControl (__display displayCtrl 266854)\n#define __timeControl (__display displayCtrl 266859)\n#define __background (__display displayCtrl 266856)\n\n__background ctrlSetText QPATHTOF(UI\\dagr_wp.paa);\n\nif (GVAR(outputPFH) != -1) exitWith {};\n\nGVAR(outputPFH) = [{\n    // Abort Condition\n    if !(GVAR(run) && [ACE_player, \"ACE_DAGR\"] call EFUNC(common,hasItem)) exitWith {\n        GVAR(outputPFH) = -1;\n        135471 cutText [\"\", \"PLAIN\"];\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    // GRID\n    private _gridArray = [(getPos ACE_player), false] call EFUNC(common,getMapGridFromPos);\n    _gridArray params [\"_gridArrayX\",\"_gridArrayY\"];\n    private _dagrGrid = format [\"%1 %2\", (_gridArrayX select [0,4]), (_gridArrayY select [0,4])];\n\n    // WP Grid\n    private _xGrid2 = floor (DAGR_WP_INFO / 10000);\n    private _yGrid2 = DAGR_WP_INFO - _xGrid2 * 10000;\n\n    _xCoord2 = switch true do {\n        case (_xGrid2 >= 1000): { \"\" + Str(_xGrid2) };\n        case (_xGrid2 >= 100): { \"0\" + Str(_xGrid2) };\n        case (_xGrid2 >= 10): { \"00\" + Str(_xGrid2) };\n        default             { \"000\" + Str(_xGrid2) };\n    };\n\n    _yCoord2 = switch true do {\n        case (_yGrid2 >= 1000): { \"\" + Str(_yGrid2) };\n        case (_yGrid2 >= 100): { \"0\" + Str(_yGrid2) };\n        case (_yGrid2 >= 10): { \"00\" + Str(_yGrid2) };\n        default             { \"000\" + Str(_yGrid2) };\n    };\n\n    _dagrGrid2 = _xCoord2 + \" \" + _yCoord2;\n\n    // Distance\n    private _WPpos = [_dagrGrid2, true] call EFUNC(common,getMapPosFromGrid);\n    private _MYpos = [_dagrGrid, true] call EFUNC(common,getMapPosFromGrid);\n    private _distance = _MYpos distance _WPpos;\n    _distance = floor (_distance * 10) / 10;\n    private _dagrDistance = str _distance + \"m\";\n\n    // Heading\n    private _dagrHeading = floor (if (GVAR(useDegrees)) then {\n        direction (vehicle ACE_player)\n    } else {\n        DEG_TO_MIL(direction (vehicle ACE_player))\n    });\n\n    // WP Heading\n    private _bearing = floor (if (GVAR(useDegrees)) then {\n        ((_WPpos vectorDiff _MYpos) call CBA_fnc_vectDir)\n    } else {\n        DEG_TO_MIL(((_WPpos vectorDiff _MYpos) call CBA_fnc_vectDir))\n    });\n\n    // Output\n    __gridControl ctrlSetText format [\"%1\", _dagrGrid];\n    __speedControl ctrlSetText format [\"%1\", _bearing];\n    __elevationControl ctrlSetText format [\"%1\", _dagrGrid2];\n    __headingControl ctrlSetText (if (!GVAR(useDegrees)) then { format [\"%1\", _dagrHeading] } else { format [\"%1°\", _dagrHeading] });\n    __timeControl ctrlSetText format [\"%1\", _dagrDistance];\n\n}, GVAR(updateInterval), []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_dagr_fnc_outputWP"
      },
      {
        "fileName": "fnc_toggleOverlay.sqf",
        "content": "/*\n * Author: Rosuto, Ruthberg\n * Toggles the DAGR overlay\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_dagr_fnc_toggleOverlay\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(run) = !GVAR(run);\n\nif (GVAR(run)) then {\n    if (GVAR(menuRun) && dialog) then {\n        GVAR(menuRun) = false;\n        closeDialog 0;\n    };\n    GVAR(hidden) = true;\n    [{\n        params [\"_args\", \"_idPFH\"];\n        _args params [\"_vehicle\"];\n        if (!GVAR(run) || (!alive ACE_player) || (vehicle ACE_player != _vehicle)) exitWith {\n            GVAR(run) = false;\n            135471 cutText [\"\", \"PLAIN\"];\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        };\n        if (cameraView == \"GUNNER\") then {\n            if (!GVAR(hidden)) then {\n                GVAR(hidden) = true;\n                135471 cutText [\"\", \"PLAIN\"];\n            };\n        } else {\n            if (GVAR(hidden)) then {\n                GVAR(hidden) = false;\n                switch (toUpper GVAR(displaySelection)) do {\n                    case \"WP\" : {\n                        call FUNC(outputWP);\n                    };\n                    case \"VECTOR\" : {\n                        call FUNC(outputVector);\n                    };\n                    case \"DATA\" : {\n                        call FUNC(outputData);\n                    };\n                };\n            };\n        };\n    }, 0.1, [vehicle ACE_player]] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_dagr_fnc_toggleOverlay"
      }
    ]
  },
  {
    "component": "disarming",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(dropItems), FUNC(eventTargetStart)] call CBA_fnc_addEventHandler;\n[QGVAR(debugCallback), FUNC(eventCallerFinish)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canBeDisarmed.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Checks the conditions for being able to disarm a unit\n *\n * Arguments:\n * 0: Target <OBJECT>\n *\n * Return Value:\n * Can Be Disarmed <BOOL>\n *\n * Example:\n * [cursorTarget] call ace_disarming_fnc_canBeDisarmed\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\n//Check animationState for putDown anim\n//This ensures the unit doesn't have to actualy do any animation to drop something\n//This should always be true for the 3 possible status effects that allow disarming\nprivate _animationStateCfgMoves = getText (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> (animationState _target) >> \"actions\");\nif (_animationStateCfgMoves == \"\") exitWith { false };\nprivate _putDownAnim = getText (configFile >> \"CfgMovesBasic\" >> \"Actions\" >> _animationStateCfgMoves >> \"PutDown\");\nif (_putDownAnim != \"\") exitWith { false };\n\n\n(alive _target) &&\n{(abs (speed _target)) < 1} &&\n{(vehicle _target) == _target} &&\n{(_target getVariable [\"ACE_isUnconscious\", false]) ||\n    {_target getVariable [QEGVAR(captives,isHandcuffed), false]} ||\n    {_target getVariable [QEGVAR(captives,isSurrendering), false]}}\n",
        "functionName": "ace_disarming_fnc_canBeDisarmed"
      },
      {
        "fileName": "fnc_canPlayerDisarmUnit.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Checks the conditions for being able to disarm a unit\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Can Be Disarm Target <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_disarming_fnc_canPlayerDisarmUnit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\"];\n\n([_target] call FUNC(canBeDisarmed)) &&\n{([_player, _target, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith))}\n",
        "functionName": "ace_disarming_fnc_canPlayerDisarmUnit"
      },
      {
        "fileName": "fnc_disarmDropItems.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Makes a unit drop items\n *\n * Arguments:\n * 0: Caller (player) <OBJECT>\n * 1: Target <OBJECT>\n * 2: Classnames <ARRAY>\n * 3: Do Not Drop Ammo <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget, [\"ace_bandage\"]] call ace_disarming_fnc_disarmDropItems\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define TIME_MAX_WAIT 5\n\nparams [\"_caller\", \"_target\", \"_listOfItemsToRemove\", [\"_doNotDropAmmo\", false, [false]]]; //By default units drop all weapon mags when dropping a weapon\n\nprivate _fncSumArray = {\n    private _return = 0;\n    {_return = _return + _x;} count (_this select 0);\n    _return\n};\n\n//Sanity Checks\nif (!([_target] call FUNC(canBeDisarmed))) exitWith {\n    [_caller, _target, \"Debug: Cannot disarm target\"] call FUNC(eventTargetFinish);\n};\nif (_doNotDropAmmo && {({_x in _listOfItemsToRemove} count (magazines _target)) > 0}) exitWith {\n    [_caller, _target, \"Debug: Trying to drop magazine with _doNotDropAmmo flag\"] call FUNC(eventTargetFinish);\n};\n\nprivate _holder = objNull;\n\n//If not dropping ammo, don't use an existing container\nif (!_doNotDropAmmo) then {\n    {\n        if ((_x getVariable [QGVAR(disarmUnit), objNull]) == _target) exitWith {\n            _holder = _x;\n        };\n    } count ((getpos _target) nearObjects [DISARM_CONTAINER, 3]);\n};\n\n//Create a new weapon holder\nif (isNull _holder) then {\n    private _dropPos = _target modelToWorld [0.4, 0.75, 0]; //offset someone unconscious isn't lying over it\n    _dropPos set [2, ((getPosASL _target) select 2)];\n    _holder = createVehicle [DISARM_CONTAINER, _dropPos, [], 0, \"CAN_COLLIDE\"];\n    _holder setPosASL _dropPos;\n    _holder setVariable [QGVAR(disarmUnit), _target, true];\n};\n\n//Verify holder created\nif (isNull _holder) exitWith {\n    [_caller, _target, \"Debug: Null Holder\"] call FUNC(eventTargetFinish);\n};\n//Make sure only one drop operation at a time (using PFEH system as a queue)\nif (_holder getVariable [QGVAR(holderInUse), false]) exitWith {\n    [{\n        _this call FUNC(disarmDropItems);\n    }, _this] call CBA_fnc_execNextFrame;\n};\n_holder setVariable [QGVAR(holderInUse), true];\n\n\n//Remove Magazines\nprivate _targetMagazinesStart = magazinesAmmo _target;\nprivate _holderMagazinesStart = magazinesAmmoCargo _holder;\n\n{\n    _x params [\"_xClassname\", \"_xAmmo\"];\n    if ((_xClassname in _listOfItemsToRemove) && {(getNumber (configFile >> \"CfgMagazines\" >> _xClassname >> \"ACE_isUnique\")) == 0}) then {\n        _holder addMagazineAmmoCargo [_xClassname, 1, _xAmmo];\n        _target removeMagazine _xClassname;\n    };\n} forEach _targetMagazinesStart;\n\nprivate _targetMagazinesEnd = magazinesAmmo _target;\nprivate _holderMagazinesEnd = magazinesAmmoCargo _holder;\n\n//Verify Mags dropped from unit:\nif (({((_x select 0) in _listOfItemsToRemove) && {(getNumber (configFile >> \"CfgMagazines\" >> (_x select 0) >> \"ACE_isUnique\")) == 0}} count _targetMagazinesEnd) != 0) exitWith {\n    _holder setVariable [QGVAR(holderInUse), false];\n    [_caller, _target, \"Debug: Didn't Remove Magazines\"] call FUNC(eventTargetFinish);\n};\n//Verify holder has mags unit had\nif (!([_targetMagazinesStart, _targetMagazinesEnd, _holderMagazinesStart, _holderMagazinesEnd] call FUNC(verifyMagazinesMoved))) then {\n    ERR = [_targetMagazinesStart, _targetMagazinesEnd, _holderMagazinesStart, _holderMagazinesEnd];\n    _holder setVariable [QGVAR(holderInUse), false];\n    [_caller, _target, \"Debug: Crate Magazines not in holder\"] call FUNC(eventTargetFinish);\n};\n\n//Remove Items, Assigned Items and NVG\nprivate _holderItemsStart = getitemCargo _holder;\nprivate _targetItemsStart = (assignedItems _target) + (items _target) - (weapons _target);\nif ((headgear _target) != \"\") then {_targetItemsStart pushBack (headgear _target);};\nif ((goggles _target) != \"\") then {_targetItemsStart pushBack (goggles _target);};\n\n\nprivate _addToCrateClassnames = [];\nprivate _addToCrateCount = [];\n{\n    if (_x in _listOfItemsToRemove) then {\n        if (_x in (items _target)) then {\n            _target removeItem _x;\n        } else {\n            _target unlinkItem _x;\n        };\n        private _index = _addToCrateClassnames find _x;\n        if (_index != -1) then {\n            _addToCrateCount set [_index, ((_addToCrateCount select _index) + 1)];\n        } else {\n            _addToCrateClassnames pushBack _x;\n            _addToCrateCount pushBack 1;\n        };\n    };\n} forEach _targetItemsStart;\n\n//Add the items to the holder (combined to reduce addItemCargoGlobal calls)\n{\n    _holder addItemCargoGlobal [(_addToCrateClassnames select _forEachIndex), (_addToCrateCount select _forEachIndex)];\n} forEach _addToCrateClassnames;\n\nprivate _holderItemsEnd = getitemCargo _holder;\nprivate _targetItemsEnd = (assignedItems _target) + (items _target) - (weapons _target);\nif ((headgear _target) != \"\") then {_targetItemsEnd pushBack (headgear _target);};\nif ((goggles _target) != \"\") then {_targetItemsEnd pushBack (goggles _target);};\n\n//Verify Items Added\nif (((count _targetItemsStart) - (count _targetItemsEnd)) != ([_addToCrateCount] call _fncSumArray)) exitWith {\n    _holder setVariable [QGVAR(holderInUse), false];\n    [_caller, _target, \"Debug: Items Not Removed From Player\"] call FUNC(eventTargetFinish);\n};\nif ((([_holderItemsEnd select 1] call _fncSumArray) - ([_holderItemsStart select 1] call _fncSumArray)) != ([_addToCrateCount] call _fncSumArray)) exitWith {\n    _holder setVariable [QGVAR(holderInUse), false];\n    [_caller, _target, \"Debug: Items Not Added to Holder\"] call FUNC(eventTargetFinish);\n};\n\n//Script drop uniforms/vest if empty\nif (((uniform _target) != \"\") && {(uniform _target) in _listOfItemsToRemove} && {(uniformItems _target) isEqualTo []}) then {\n    _holder addItemCargoGlobal [(uniform _target), 1];\n    removeUniform _target;\n};\nif (((vest _target) != \"\") && {(vest _target) in _listOfItemsToRemove} && {(vestItems _target) isEqualTo []}) then {\n    _holder addItemCargoGlobal [(vest _target), 1];\n    removeVest _target;\n};\n\n\n//If holder is still empty, it will be 'garbage collected' while we wait for the drop 'action' to take place\n//So add a dummy item and just remove at the end\nprivate _holderIsEmpty = ([_holder] call FUNC(getAllGearContainer)) isEqualTo [[],[]];\nif (_holderIsEmpty) then {\n    TRACE_1(\"Debug: adding dummy item to holder\",_holder);\n    _holder addItemCargoGlobal [DUMMY_ITEM, 1];\n};\n\n//Start the PFEH to do the actions (which could take >1 frame)\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_caller\", \"_target\", \"_listOfItemsToRemove\", \"_holder\", \"_holderIsEmpty\", \"_maxWaitTime\", \"_doNotDropAmmo\", \"_startingMagazines\"];\n\n    private _needToRemoveWeapon = ({_x in _listOfItemsToRemove} count (weapons _target)) > 0;\n    private _needToRemoveMagazines = ({_x in _listOfItemsToRemove} count (magazines _target)) > 0;\n    private _needToRemoveBackpack = ((backPack _target) != \"\") && {(backPack _target) in _listOfItemsToRemove};\n    private _needToRemoveVest = ((vest _target) != \"\") && {(vest _target) in _listOfItemsToRemove};\n    private _needToRemoveUniform = ((uniform _target) != \"\") && {(uniform _target) in _listOfItemsToRemove};\n\n    if ((CBA_missionTime < _maxWaitTime) && {[_target] call FUNC(canBeDisarmed)} && {_needToRemoveWeapon || _needToRemoveMagazines || _needToRemoveBackpack}) then {\n        //action drop weapons (keeps loaded magazine and attachements)\n        {\n            if (_x in _listOfItemsToRemove) then {\n                _target action [\"DropWeapon\", _holder, _x];\n            };\n        } forEach (weapons _target);\n\n        //Drop magazine (keeps unique ID)\n        {\n            if (_x in _listOfItemsToRemove) then {\n                _target action [\"DropMagazine\", _holder, _x];\n            };\n        } forEach (magazines _target);\n\n        //Drop backpack (Keeps variables for ACRE/TFR)\n        if (_needToRemoveBackpack) then {_target action [\"DropBag\", _holder, (backPack _target)];};\n    } else {\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n\n        if (_doNotDropAmmo) then {\n            private _error = false;\n\n            private _magsToPickup = +_startingMagazines;\n            {\n                private _index = _magsToPickup find _x;\n                if (_index == -1) exitWith {_error = true; ERROR(\"More mags than when we started?\")};\n                _magsToPickup deleteAt _index;\n            } forEach (magazinesAmmo _target);\n\n            private _magazinesInHolder = magazinesAmmoCargo _holder;\n            {\n                private _index = _magazinesInHolder find _x;\n                if (_index == -1) exitWith {_error = true; ERROR(\"Missing mag not in holder\")};\n                _magazinesInHolder deleteAt _index;\n            } forEach _magsToPickup;\n\n            //No Error (all the ammo in the container is ammo we should have);\n            if ((!_error) && {_magazinesInHolder isEqualTo []}) then {\n                {\n                    _target addMagazine _x;\n                } forEach (magazinesAmmoCargo _holder);\n                clearMagazineCargoGlobal _holder;\n            };\n        };\n\n        //If we added a dummy item, remove it now\n        if (_holderIsEmpty && {!((getItemCargo _holder) isEqualTo [[DUMMY_ITEM],[1]])}) exitWith {\n            _holder setVariable [QGVAR(holderInUse), false];\n            [_caller, _target, \"Debug: Holder should only have dummy item\"] call FUNC(eventTargetFinish);\n        };\n        if (_holderIsEmpty) then {\n            TRACE_1(\"Debug: removing dummy item from holder\",_holder);\n            clearItemCargoGlobal _holder;\n        };\n        //Verify we didn't timeout waiting on drop action\n        if (CBA_missionTime >= _maxWaitTime)  exitWith {\n            _holder setVariable [QGVAR(holderInUse), false];\n            [_caller, _target, \"Debug: Drop Actions Timeout\"] call FUNC(eventTargetFinish);\n        };\n        //If target lost disarm status:\n        if (!([_target] call FUNC(canBeDisarmed))) exitWith {\n            _holder setVariable [QGVAR(holderInUse), false];\n            [_caller, _target, \"Debug: Target cannot be disarmed\"] call FUNC(eventTargetFinish);\n        };\n        if (_needToRemoveVest && {!((vestItems _target) isEqualTo [])}) exitWith {\n            _holder setVariable [QGVAR(holderInUse), false];\n            [_caller, _target, \"Debug: Vest Not Empty\"] call FUNC(eventTargetFinish);\n        };\n        if (_needToRemoveVest) then {\n            _holder addItemCargoGlobal [(vest _target), 1];\n            removeVest _target;\n        };\n        if (_needToRemoveUniform && {!((uniformItems _target) isEqualTo [])}) exitWith {\n            _holder setVariable [QGVAR(holderInUse), false];\n            [_caller, _target, \"Debug: Uniform Not Empty\"] call FUNC(eventTargetFinish);\n        };\n        if (_needToRemoveUniform) then {\n            _holder addItemCargoGlobal [(uniform _target), 1];\n            removeUniform _target;\n        };\n\n        _holder setVariable [QGVAR(holderInUse), false];\n        [_caller, _target, \"\"] call FUNC(eventTargetFinish);\n    };\n\n}, 0.0, [_caller,_target, _listOfItemsToRemove, _holder, _holderIsEmpty, (CBA_missionTime + TIME_MAX_WAIT), _doNotDropAmmo, _targetMagazinesEnd]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_disarming_fnc_disarmDropItems"
      },
      {
        "fileName": "fnc_eventCallerFinish.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Recieves a possible error code from FUNC(eventTargetFinish)\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: target <OBJECT>\n * 2: error message <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player1, player2, \"Someting fucked up\"] call ace_disarming_fnc_eventCallerFinish\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_errorMsg\"];\n\nif (_caller != ACE_player) exitWith {};\n\nsystemChat format [\"Debug-Caller: Disarm finished from [%1] with code [%2]\", _target, _errorMsg];\nINFO_2(\"%1 - eventCallerFinish: %2\",CBA_missionTime,_this);\n",
        "functionName": "ace_disarming_fnc_eventCallerFinish"
      },
      {
        "fileName": "fnc_eventTargetFinish.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * After FUNC(disarmDropItems) has completed, passing a possible error code.\n * Passes that error back to orginal caller.\n *\n * Arguments:\n * 0: caller <OBJECT>\n * 1: target <OBJECT>\n * 2: errorMsg <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player1, player2, \"Someting fucked up\"] call ace_disarming_fnc_eventTargetFinish\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_errorMsg\"];\n\nif (_errorMsg != \"\") then {\n    INFO_2(\"%1 - eventTargetFinish: %2\",CBA_missionTime,_this);\n    [QGVAR(debugCallback), [_caller, _target, _errorMsg], [_caller]] call CBA_fnc_targetEvent;\n};\n",
        "functionName": "ace_disarming_fnc_eventTargetFinish"
      },
      {
        "fileName": "fnc_eventTargetStart.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Disarm Event Handler, Starting func, called on the target.\n * If target has to remove uniform/vest, this will add all uniform/vest items to the drop list.\n *\n * Arguments:\n * 0: caller (player) <OBJECT>\n * 1: target <OBJECT>\n * 2: type of disarm <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"disarm\"] call ace_disarming_fnc_eventTargetStart\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_listOfObjectsToRemove\"];\n\nprivate _itemsToAdd = [];\n{\n    if (_x == (uniform _target)) then {\n        _itemsToAdd = _itemsToAdd + (uniformItems _target);\n    };\n    if (_x == (vest _target)) then {\n        _itemsToAdd = _itemsToAdd + (vestItems _target);\n    };\n} forEach _listOfObjectsToRemove;\n\n{\n    if (!(_x in _listOfObjectsToRemove)) then {\n        _listOfObjectsToRemove pushBack _x;\n    };\n} forEach _itemsToAdd;\n\n[_caller, _target, _listOfObjectsToRemove] call FUNC(disarmDropItems);\n",
        "functionName": "ace_disarming_fnc_eventTargetStart"
      },
      {
        "fileName": "fnc_getAllGearContainer.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Helper function to get all gear of a container\n *\n * Arguments:\n * 0: Container <OBJECT>\n *\n * Return Value:\n * Array of 2 arrays, classnames and count<ARRAY>\n *\n * Example:\n * [[\"ace_bandage\"],[2]] = [box] call ace_disarming_fnc_getAllGearContainer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _items = [];\nprivate _counts = [];\n{\n    _x params [\"_item\", \"_count\"];\n    _items append _item;\n    _counts append _count;\n} forEach [(getWeaponCargo _target), (getItemCargo _target), (getMagazineCargo _target), (getBackpackCargo _target)];\n\n[_items,_counts] // Return\n",
        "functionName": "ace_disarming_fnc_getAllGearContainer"
      },
      {
        "fileName": "fnc_getAllGearUnit.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Helper function to get all gear of a unit.\n *\n * Arguments:\n * 0: Target <OBJECT>\n *\n * Return Value:\n * Array of 2 arrays, classnames and count<ARRAY>\n *\n * Example:\n * [[\"ace_bandage\"],[2]] = [bob] call ace_disarming_fnc_getAllGearUnit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _allItems = (((items _target) + (assignedItems _target)) - (weapons _target)) + (weapons _target) + (magazines _target);\n\nif ((backpack _target) != \"\") then {\n    _allItems pushBack (backpack _target);\n};\nif ((vest _target) != \"\") then {\n    _allItems pushBack (vest _target);\n};\nif ((uniform _target) != \"\") then {\n    _allItems pushBack (uniform _target);\n};\nif ((headgear _target) != \"\") then {\n    _allItems pushBack (headgear _target);\n};\n//What kind of asshole takes a man's glasses?\nif ((goggles _target) != \"\") then {\n    _allItems pushBack (goggles _target);\n};\n\nprivate _uniqueClassnames = [];\nprivate _classnamesCount = [];\n//Filter unique and count\n{\n    private _index = _uniqueClassnames find _x;\n    if (_index != -1) then {\n        _classnamesCount set [_index, ((_classnamesCount select _index) + 1)];\n    } else {\n        _uniqueClassnames pushBack _x;\n        _classnamesCount pushBack 1;\n    };\n} forEach _allItems;\n\n[_uniqueClassnames, _classnamesCount]\n",
        "functionName": "ace_disarming_fnc_getAllGearUnit"
      },
      {
        "fileName": "fnc_openDisarmDialog.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Opens the disarm dialog (allowing a person to remove items)\n *\n * Arguments:\n * 0: Caller (player) <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, bob] call ace_disarming_fnc_openDisarmDialog\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_caller\", \"_target\"];\n#define DEFUALTPATH \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\%1_gs.paa\"\n//Sanity Checks\nif (_caller != ACE_player) exitWith {ERROR(\"Player isn't caller?\");};\nif (!([_player, _target] call FUNC(canPlayerDisarmUnit))) exitWith {ERROR(\"Can't Disarm Unit\");};\nif (dialog) then {ERROR(\"Dialog open when trying to open disarm dialog\"); closeDialog 0;};\n\ndisableSerialization;\n\ncreateDialog QGVAR(remoteInventory);\n\nprivate _display = uiNamespace getVariable [\"ACE_remoteInventory\", displayNull];\nif (isNull _display) exitWith {ERROR(\"Display is Null\");};\n\nGVAR(disarmTarget) = _target;\n\n//Setup Drop Event (on right pannel)\n(_display displayCtrl 632) ctrlAddEventHandler [\"LBDrop\", {\n    if (isNull GVAR(disarmTarget)) exitWith {};\n    params [\"_ctrl\", \"_xPos\", \"_yPos\", \"_idc\", \"_itemInfo\"];\n    (_itemInfo select 0) params [\"_displayText\", \"_value\", \"_data\"];\n\n    if (isNull GVAR(disarmTarget)) exitWith {ERROR(\"disarmTarget is null\");};\n\n    TRACE_2(\"Debug: Droping %1 from %2\",_data,GVAR(disarmTarget));\n    [QGVAR(dropItems), [ACE_player, GVAR(disarmTarget), [_data]], [GVAR(disarmTarget)]] call CBA_fnc_targetEvent;\n\n    false //not sure what this does\n}];\n\n//Setup PFEH\n[{\n    disableSerialization;\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_player\", \"_target\", \"_display\"];\n\n    if ((!([_player, _target] call FUNC(canPlayerDisarmUnit))) ||\n            {isNull _display} ||\n            {_player != ACE_player}) then {\n\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n        GVAR(disarmTarget) = objNull;\n        if (!isNull _display) then { closeDialog 0; }; //close dialog if still open\n    } else {\n\n        private _groundContainer = _display displayCtrl 632;\n        private _targetContainer = _display displayCtrl 633;\n        private _playerName = _display displayCtrl 111;\n        private _rankPicture = _display displayCtrl 1203;\n\n        //Show rank and name (just like BIS's inventory)\n        private _icon = format [DEFUALTPATH, toLower (rank _target)];\n        if (_icon isEqualTo DEFUALTPATH) then {_icon = \"\"};\n        _rankPicture ctrlSetText _icon;\n        _playerName ctrlSetText ([GVAR(disarmTarget), false, true] call EFUNC(common,getName));\n\n        //Clear both inventory lists:\n        lbClear _groundContainer;\n        lbClear _targetContainer;\n\n        //Show the items in the ground disarmTarget's inventory\n        private _targetUniqueItems = [GVAR(disarmTarget)] call FUNC(getAllGearUnit);\n        [_targetContainer, _targetUniqueItems] call FUNC(showItemsInListbox);\n\n        //Try to find a holder that the target is using to drop items into:\n        private _holder = objNull;\n        {\n            if ((_x getVariable [QGVAR(disarmUnit), objNull]) == _target) exitWith {\n                _holder = _x;\n            };\n        } count ((getpos _target) nearObjects [DISARM_CONTAINER, 3]);\n\n        //If a holder exists, show it's inventory\n        if (!isNull _holder) then {\n            private _holderUniqueItems = [_holder] call FUNC(getAllGearContainer);\n            [_groundContainer, _holderUniqueItems] call FUNC(showItemsInListbox);\n        };\n    };\n}, 0, [_caller, _target, _display]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_disarming_fnc_openDisarmDialog"
      },
      {
        "fileName": "fnc_showItemsInListbox.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Shows a list of inventory items in a listBox control.\n *\n * Arguments:\n * 0: RscListBox <CONTROL>\n * 1: ItemArray [[\"itemClassnames\"],[counts]] <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [theListBox, [[\"ace_bandage\"],[2]]] call ace_disarming_fnc_showItemsInListbox\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_listBoxCtrl\", \"_itemsCountArray\"];\n\n{\n    private _classname = _x;\n    private _count = (_itemsCountArray select 1) select _forEachIndex;\n\n    if ((_classname != DUMMY_ITEM) && {_classname != \"ACE_FakePrimaryWeapon\"}) then { //Don't show the dummy potato or fake weapon\n        private _configPath = configNull;\n        private _displayName = \"\";\n        private _picture = \"\";\n        switch (true) do {\n            case (isClass (configFile >> \"CfgWeapons\" >> _classname)): {\n                _configPath = (configFile >> \"CfgWeapons\");\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\n                _picture = getText (_configPath >> _classname >> \"picture\");\n            };\n            case (isClass (configFile >> \"CfgMagazines\" >> _classname)): {\n                _configPath = (configFile >> \"CfgMagazines\");\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\n                _picture = getText (_configPath >> _classname >> \"picture\");\n            };\n            case (isClass (configFile >> \"CfgVehicles\" >> _classname)): {\n                _configPath = (configFile >> \"CfgVehicles\");\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\n                _picture = getText (_configPath >> _classname >> \"picture\");\n            };\n            case (isClass (configFile >> \"CfgGlasses\" >> _classname)): {\n                _configPath = (configFile >> \"CfgGlasses\");\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\n                _picture = getText (_configPath >> _classname >> \"picture\");\n            };\n            default {\n                ERROR(format [\"[%1] - bad classname\", _classname]);\n            };\n        };\n\n        _listBoxCtrl lbAdd format [\"%1\", _displayName];\n        _listBoxCtrl lbSetData [((lbSize _listBoxCtrl) - 1), _classname];\n        _listBoxCtrl lbSetPicture [((lbSize _listBoxCtrl) - 1), _picture];\n        _listBoxCtrl lbSetTextRight [((lbSize _listBoxCtrl) - 1), str _count];\n    };\n} forEach (_itemsCountArray select 0);\n",
        "functionName": "ace_disarming_fnc_showItemsInListbox"
      },
      {
        "fileName": "fnc_verifyMagazinesMoved.sqf",
        "content": "/*\n * Author: PabstMirror\n *\n * Verifies magazines moved with exact ammo counts preserved.\n * Arrays will be in format from magazinesAmmo/magazinesAmmoCargo\n * e.g.: [[\"30Rnd_65x39_caseless_mag\",15], [\"30Rnd_65x39_caseless_mag\",30]]\n *\n * Arguments:\n * 0: Start on container A <ARRAY>\n * 1: End on container A <ARRAY>\n * 2: Start on container B <ARRAY>\n * 3: End on container B <ARRAY>\n *\n * Return Value:\n * Verified Good <BOOL>\n *\n * Example:\n * [stuff] call ace_disarming_fnc_verifyMagazinesMoved\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_startA\", \"_endA\", \"_startB\", \"_endB\"];\n\n//Quick Lazy Count Check\nif (((count _startA) + (count _startB)) != ((count _endA) + (count _endB))) exitWith {\n    false\n};\n\nprivate _beginingArray = (_startA + _startB);\n\nprivate _problem = false;\n{\n    private _index = _beginingArray find _x;\n    if (_index == -1) exitWith {_problem = true;};\n    _beginingArray deleteAt _index;\n} forEach (_endA + _endB);\n\n(!_problem) && {_beginingArray isEqualTo []}\n",
        "functionName": "ace_disarming_fnc_verifyMagazinesMoved"
      }
    ]
  },
  {
    "component": "disposable",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"loadout\", {\n    params [\"_unit\"];\n    [_unit] call FUNC(takeLoadedATWeapon);\n    [_unit] call FUNC(updateInventoryDisplay);\n}] call CBA_fnc_addPlayerEventHandler;\n\n// Register fire event handler\n// Only for the local player and for AI. Non-local players will handle it themselves\n[\"ace_firedPlayer\", DFUNC(replaceATWeapon)] call CBA_fnc_addEventHandler;\n[\"ace_firedNonPlayer\", DFUNC(replaceATWeapon)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_replaceATWeapon.sqf",
        "content": "/*\n * Author: bux, commy2\n * Replace the disposable launcher with the used dummy. Called from the unified fired EH.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [fromBisFiredEH] call ace_disposable_fnc_replaceATWeapon;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nif (!local _unit || {_weapon != secondaryWeapon _unit})  exitWith {};\n\nprivate _replacementTube = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"ACE_UsedTube\");\nif (_replacementTube == \"\") exitWith {}; //If no replacement defined just exit\n\n//Save array of items attached to launcher\nprivate _items = secondaryWeaponItems _unit;\n//Replace the orginal weapon with the 'usedTube' weapon\n_unit addWeapon _replacementTube;\n//Makes sure the used tube is still equiped\n_unit selectWeapon _replacementTube;\n//Re-add all attachments to the used tube\n{\n    if (_x != \"\") then {_unit addSecondaryWeaponItem _x};\n} count _items;\n\n\n// AI - Remove the ai's missle launcher tube after the missle has exploded\nif !([_unit] call EFUNC(common,isPlayer)) then {\n    [{\n        params [\"_args\",\"_idPFH\"];\n        _args params [\"_unit\", \"_tube\", \"_projectile\"];\n\n        //don't do anything until projectile is null (exploded/max range)\n        if (isNull _projectile) then {\n            //Remove PFEH:\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n\n            //If (tube is dropped) OR (is dead) OR (is player) just exit\n            if (secondaryWeapon _unit != _tube || {!alive _unit} || {[_unit] call EFUNC(common,isPlayer)}) exitWith {};\n\n            //private  _items = secondaryWeaponItems _unit;\n            private _container = createVehicle [\"GroundWeaponHolder\", position _unit, [], 0, \"CAN_COLLIDE\"];\n            _container setPosAsl (getPosAsl _unit);\n            _container addWeaponCargoGlobal [_tube, 1];\n\n            //This will duplicate attachements, because we will be adding a weapon that may already have attachments on it\n            //We either need a way to add a clean weapon, or a way to add a fully configured weapon to a container:\n            // {\n                // if (_x != \"\") then {_container addItemCargoGlobal [_x, 1];};\n            // } forEach _items;\n\n            _unit removeWeaponGlobal _tube;\n        };\n    }, 1, [_unit, _replacementTube, _projectile]] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_disposable_fnc_replaceATWeapon"
      },
      {
        "fileName": "fnc_takeLoadedATWeapon.sqf",
        "content": "/*\n * Author: commy2\n * Handle the take event. Add a dummy magazine if a disposable rocket launcher is taken.\n *\n * Arguments:\n * 0: unit - Object the event handler is assigned to <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [fromTakeEH] call ace_disposable_fnc_takeLoadedATWeapon;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nif (!local _unit) exitWith {};\n\nprivate _launcher = secondaryWeapon _unit;\nprivate _config = configFile >> \"CfgWeapons\" >> _launcher;\n\nif (isClass _config && {getText (_config >> \"ACE_UsedTube\") != \"\"} && {getNumber (_config >> \"ACE_isUsedLauncher\") != 1} && {count secondaryWeaponMagazine _unit == 0}) then {\n    private _magazine = getArray (_config >> \"magazines\") select 0;\n    private _isLauncherSelected = currentWeapon _unit == _launcher;\n\n    _unit removeMagazines _magazine;\n\n    if (backpack _unit == \"\") then {\n        _unit addBackpack \"ACE_FakeBackpack\";\n        _unit removeWeapon _launcher;\n        _unit addMagazine _magazine;\n        private _didAdd = _magazine in magazines _unit;\n        _unit addWeapon _launcher;\n\n        if (!_didAdd) then {\n            TRACE_1(\"Failed To Add Disposable Magazine Normally, doing backup method (no backpack)\",_unit);\n            _unit addSecondaryWeaponItem _magazine;\n        };\n        removeBackpack _unit;\n    } else {\n        _unit removeWeapon _launcher;\n        _unit addMagazine _magazine;\n        private _didAdd = _magazine in magazines _unit;\n        _unit addWeapon _launcher;\n\n        if (!_didAdd) then {\n            TRACE_2(\"Failed To Add Disposable Magazine Normally, doing backup method\",_unit,(backpack _unit));\n            _unit addSecondaryWeaponItem _magazine;\n        };\n    };\n\n    if (_isLauncherSelected) then {\n        _unit selectWeapon _launcher;\n    };\n};\n",
        "functionName": "ace_disposable_fnc_takeLoadedATWeapon"
      },
      {
        "fileName": "fnc_updateInventoryDisplay.sqf",
        "content": "/*\n * Author: bux, commy2\n * Hide or show the secondary weapon magazine inventory slot to prevent unloading of dummy magazines.\n *\n * Arguments:\n * 0: unit - Object the event handler is assigned to <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_disposable_fnc_updateInventoryDisplay;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nparams [\"_player\", [\"_display\",(findDisplay 602),[displayNull]]];\nTRACE_2(\"params\",_player,_display);\n\n_player removeMagazines \"ACE_PreloadedMissileDummy\";\n_player removeMagazines \"ACE_FiredMissileDummy\";\n\nif (isNull _display) exitWith {};\n\nprivate _launcher = secondaryWeapon _player;\n\nif (_launcher == \"\" || {getText (configFile >> \"CfgWeapons\" >> _launcher >> \"ACE_UsedTube\") == \"\"}) then {\n    private _control = _display displayCtrl 627;\n    private _config = configFile >> \"RscDisplayInventory\" >> \"controls\" >> \"SlotSecondaryMagazine\";\n    _control ctrlSetPosition [getNumber (_config >> \"x\"), getNumber (_config >> \"y\"), getNumber (_config >> \"w\"), getNumber (_config >> \"h\")];\n    _control ctrlCommit 0;\n\n    _control = _display displayCtrl 1251;\n    _config = configFile >> \"RscDisplayInventory\" >> \"controls\" >> \"BackgroundSlotSecondaryMagazine\";\n    _control ctrlSetPosition [getNumber (_config >> \"x\"), getNumber (_config >> \"y\"), getNumber (_config >> \"w\"), getNumber (_config >> \"h\")];\n    _control ctrlCommit 0;\n} else {\n    private _control = _display displayCtrl 627;\n    _control ctrlSetPosition [0, 0, 0, 0];\n    _control ctrlCommit 0;\n\n    _control = _display displayCtrl 1251;\n    _control ctrlSetPosition [0, 0, 0, 0];\n    _control ctrlCommit 0;\n};\n",
        "functionName": "ace_disposable_fnc_updateInventoryDisplay"
      }
    ]
  },
  {
    "component": "dogtags",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(showDogtag), DFUNC(showDogtag)] call CBA_fnc_addEventHandler;\n[QGVAR(sendDogtagData), DFUNC(sendDogtagData)] call CBA_fnc_addEventHandler;\n[QGVAR(getDogtagItem), DFUNC(getDogtagItem)] call CBA_fnc_addEventHandler;\n[QGVAR(addDogtagItem), DFUNC(addDogtagItem)] call CBA_fnc_addEventHandler;\n\n\n//Add actions and event handlers only if ace_medical is loaded\n// - Adding actions via config would create a dependency\nif ([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\n    if (hasInterface) then {\n        private _checkTagAction = [\n            \"ACE_CheckDogtag\",\n            format [\"%1: %2\", localize LSTRING(itemName), localize LSTRING(checkDogtag)],\n            QPATHTOF(data\\dogtag_icon_ca.paa),\n            {[_player,_target] call FUNC(checkDogtag)},\n            {!isNil {_target getVariable QGVAR(dogtagData)}}\n        ] call EFUNC(interact_menu,createAction);\n\n        [\"ACE_bodyBagObject\", 0, [\"ACE_MainActions\"], _checkTagAction] call EFUNC(interact_menu,addActionToClass);\n\n        private _takeTagAction = [\n            \"ACE_TakeDogtag\",\n            format [\"%1: %2\", localize LSTRING(itemName), localize LSTRING(takeDogtag)],\n            QPATHTOF(data\\dogtag_icon_ca.paa),\n            {[_player,_target] call FUNC(takeDogtag)},\n            {(!isNil {_target getVariable QGVAR(dogtagData)}) && {((_target getVariable [QGVAR(dogtagTaken), objNull]) != _target)}}\n        ] call EFUNC(interact_menu,createAction);\n\n        [\"ACE_bodyBagObject\", 0, [\"ACE_MainActions\"], _takeTagAction] call EFUNC(interact_menu,addActionToClass);\n    };\n\n    if (isServer) then {\n        [\"ace_placedInBodyBag\", {\n            params [\"_target\", \"_bodyBag\"];\n            TRACE_2(\"ace_placedInBodyBag eh\",_target,_bodyBag);\n\n            private _dogTagData = [_target] call FUNC(getDogtagData);\n            _bodyBag setVariable [QGVAR(dogtagData), _dogTagData, true];\n\n            if ((_target getVariable [QGVAR(dogtagTaken), objNull]) == _target) then {\n                _bodyBag setVariable [QGVAR(dogtagTaken), _bodyBag, true];\n            };\n        }] call CBA_fnc_addEventHandler;\n    };\n};\n\n// disable dogtags for civilians\n\"CIV_F\" call FUNC(disableFactionDogtags);\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(disabledFactions) = [] call CBA_fnc_createNamespace;\n    \nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addDogtagActions.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Creates one action per dogtag.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player <OBJECT>\n *\n * Return Value:\n * Children actions <ARRAY>\n *\n * Example:\n * _childrenActions = [unit, player] call ace_dogtags_fnc_addDogtagActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_player\"];\n\n//Get all dogtags and their ids\nprivate _unitDogtags = [];\nprivate _unitDogtagIDs = [];\n{\n    private _id = getNumber (configFile >> \"CfgWeapons\" >> _x >> QGVAR(tagID));\n    if (_id > 0) then {\n        _unitDogtags pushBack _x;\n        _unitDogtagIDs pushBack _id;\n    };\n} forEach items _player;\n\n//Create action children for all dogtags\nprivate _actions = [];\n{\n    private _displayName = getText (configFile >> \"CfgWeapons\" >> _x >> \"displayName\");\n    private _picture = getText (configFile >> \"CfgWeapons\" >> _x >> \"picture\");\n\n    private _action = [_x, _displayName, _picture, {_this call FUNC(checkDogtagItem)}, {true}, {}, _x] call EFUNC(interact_menu,createAction);\n    _actions pushBack [_action, [], _player];\n} forEach _unitDogtags;\n\n_actions\n",
        "functionName": "ace_dogtags_fnc_addDogtagActions"
      },
      {
        "fileName": "fnc_addDogtagItem.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Adds dogtag item to unit (triggered by server).\n *\n * Arguments:\n * 0: Item class <STRING>\n * 1: Dogtag data <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"itemClass\", [\"name\", \"610-27-5955\", \"A POS\"]] call ace_dogtags_fnc_addDogtagItem\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\", \"_dogtagData\"];\n\nif (_item == \"\") exitWith {};\n\n[ace_player, _item] call CBA_fnc_addItem;\n\n_dogtagData params [\"_nickName\"];\nprivate _displayText = format [localize LSTRING(takeDogtagSuccess), _nickName];\n\n// display message\n[{\n    [_this, 2.5] call EFUNC(common,displayTextStructured);\n}, _displayText, DOGTAG_SHOW_DELAY] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_dogtags_fnc_addDogtagItem"
      },
      {
        "fileName": "fnc_bloodType.sqf",
        "content": "/*\n * Author: commy2\n * Reports a blood type depending on the units name.\n *\n * Arguments:\n * 0: Name of a unit <STRING>\n *\n * Return Value:\n * A random blood type <STRING>\n *\n * Example:\n * _bloodType = [\"name\"] call ace_dogtags_fnc_bloodType\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define BLOOD_TYPES [\"O POS\", \"O NEG\", \"A POS\", \"A NEG\", \"B POS\", \"B NEG\", \"AB POS\", \"AB NEG\"]\n\nparams [\"_name\"];\n\nprivate _num = 0;\nprivate _count = {_num = _num + _x} count toArray _name;\n\n_num = _num + _count;\n\nBLOOD_TYPES select (_num % count BLOOD_TYPES)\n",
        "functionName": "ace_dogtags_fnc_bloodType"
      },
      {
        "fileName": "fnc_canCheckDogtag.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Checks if dogtag can be checked.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * True if dogtag can be checked <BOOL>\n *\n * Example:\n * _canCheck = [player, unit] call ace_dogtags_fnc_canCheckDogtag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\"];\n\nif (isNull _target) exitWith {false};\n\n// check if disabled for faction\nif ([GVAR(disabledFactions) getVariable faction _target] param [0, false]) exitWith {false};\n\n(!alive _target) || {_target getVariable [\"ACE_isUnconscious\", false]}\n",
        "functionName": "ace_dogtags_fnc_canCheckDogtag"
      },
      {
        "fileName": "fnc_canTakeDogtag.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Checks if dogtag can be taken.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * True if dogtag can be taken <BOOL>\n *\n * Example:\n * _canTake = [player, unit] call ace_dogtags_fnc_canTakeDogtag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\"];\n\nif (isNull _target) exitWith {false};\n\n// check if disabled for faction\nif ([GVAR(disabledFactions) getVariable faction _target] param [0, false]) exitWith {false};\n\n(!alive _target) || {_target getVariable [\"ACE_isUnconscious\", false]}\n",
        "functionName": "ace_dogtags_fnc_canTakeDogtag"
      },
      {
        "fileName": "fnc_checkDogtag.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Checks unit dogtag.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, unit] call ace_dogtags_fnc_checkDogtag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\"];\n\n// animation\n_player call EFUNC(common,goKneeling);\n\n// sound\nprivate _position = AGLToASL (_target modelToWorld (_target selectionPosition \"neck\"));\n\nplaySound3D [\n    selectRandom RUSTLING_SOUNDS,\n    objNull,\n    false,\n    _position,\n    1,\n    1,\n    50\n];\n\n// display dogtag\nprivate _doubleTags = (_target getVariable [QGVAR(dogtagTaken), objNull]) != _target;\nprivate _dogTagData = [_target] call FUNC(getDogTagData);\n\n[{\n    [QGVAR(showDogtag), _this] call CBA_fnc_localEvent;\n}, [_dogTagData, _doubleTags], DOGTAG_SHOW_DELAY] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_dogtags_fnc_checkDogtag"
      },
      {
        "fileName": "fnc_checkDogtagItem.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Check dogtag self menu action.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n * 2: Item class <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, unit, \"itemClass\"] call ace_dogtags_fnc_checkDogtagItem\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\", \"_item\"];\n\n[QGVAR(sendDogtagData), [_player, _item]] call CBA_fnc_serverEvent;\n",
        "functionName": "ace_dogtags_fnc_checkDogtagItem"
      },
      {
        "fileName": "fnc_disableFactionDogtags.sqf",
        "content": "/*\n * Author: commy2\n * Disable this faction from using dogtags.\n *\n * Arguments:\n * 0: Faction <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * \"CIV_F\" call ace_dogtags_fnc_disableFactionDogtags\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_faction\", \"\", [\"\"]]];\n\nGVAR(disabledFactions) setVariable [_faction, true];\n",
        "functionName": "ace_dogtags_fnc_disableFactionDogtags"
      },
      {
        "fileName": "fnc_getDogtagData.sqf",
        "content": "/*\n * Author: esteldunedain\n * Get unit dogtag data.\n *\n * Arguments:\n * 0: Target <OBJECT>\n *\n * Return Value:\n * Dogtag Data <ARRAY>\n * 0: Name <STRING>\n * 1: SSN <STRING>\n * 2: Blood Type <STRING>\n *\n * Example:\n * _dogtagData = [unit, player] call ace_dogtags_fnc_getDogtagData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\n// Check if the data was already created\nprivate _dogTagData = _target getVariable QGVAR(dogtagData);\nif (!isNil \"_dogTagData\") exitWith {_dogTagData};\n\n// Create dog tag data once for the unit: nickname, code (eg. 135-13-900) and blood type\nprivate _targetName = [_target, false, true] call EFUNC(common,getName);\n\nprivate _dogTagData = [\n    _targetName,\n    _targetName call FUNC(ssn),\n    _targetName call FUNC(bloodType)\n];\n// Store it\n_target setVariable [QGVAR(dogtagData), _dogTagData, true];\n_dogTagData\n",
        "functionName": "ace_dogtags_fnc_getDogtagData"
      },
      {
        "fileName": "fnc_getDogtagItem.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Server: creates new dogtag item and send it to client.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, unit] call ace_dogtags_fnc_getDogtagItem\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif(!isServer) exitWith {};\n\nparams [\"_player\", \"_target\"];\nTRACE_2(\"getDogtagItem\",_player,_target);\n\nprivate _allDogtags = missionNamespace getVariable [QGVAR(allDogtags), []];\nprivate _allDogtagDatas = missionNamespace getVariable [QGVAR(allDogtagDatas), []];\n\nprivate _nextID = count _allDogtags + 1;\n\nif (_nextID > 999) exitWith {ERROR(\"Ran out of IDs\");};\n\nprivate _dogTagData = [_target] call FUNC(getDogTagData);\nprivate _item = format [\"ACE_dogtag_%1\", _nextID];\n_allDogtags pushBack _item;\n_allDogtagDatas pushBack _dogTagData;\n\nmissionNamespace setVariable [QGVAR(allDogtags), _allDogtags];\nmissionNamespace setVariable [QGVAR(allDogtagDatas), _allDogtagDatas];\n\n[QGVAR(addDogtagItem), [_item, _dogTagData], [_player]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_dogtags_fnc_getDogtagItem"
      },
      {
        "fileName": "fnc_sendDogtagData.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Server: returns to client data on given dogtag.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, unit] call ace_dogtags_fnc_sendDogtagData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!isServer) exitWith {};\n\nparams [\"_target\", \"_item\"];\nTRACE_2(\"sendDogtagData\",_target,_item);\n\nprivate _allDogtags = missionNameSpace getVariable [QGVAR(allDogtags), []];\nprivate _allDogtagDatas = missionNameSpace getVariable [QGVAR(allDogtagDatas), []];\n\nprivate _dogtagData = [];\nprivate _index = _allDogtags find _item;\nif (_index >= 0) then {\n    _dogtagData = _allDogtagDatas select _index;\n};\n\n[QGVAR(showDogtag), [_dogtagData], [_target]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_dogtags_fnc_sendDogtagData"
      },
      {
        "fileName": "fnc_showDogtag.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Shows dogtag.\n *\n * Arguments:\n * 0: Dogtag data <ARRAY>\n * 1: Display as double tag <BOOLEAN>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[\"name\", \"610-27-5955\", \"A POS\"], true] call ace_dogtags_fnc_showDogtag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_dogtagData\", [\"_doubleTags\", false, [false]]];\n\nif (!hasInterface || {_dogtagData isEqualTo []}) exitWith {};\n\nif (_doubleTags) then {\n    (QGVAR(tag) call BIS_fnc_rscLayer) cutRsc [QGVAR(doubleTag), \"PLAIN\", 1, true];\n} else {\n    (QGVAR(tag) call BIS_fnc_rscLayer) cutRsc [QGVAR(singleTag), \"PLAIN\", 1, true];\n};\nprivate _display = uiNamespace getvariable [QGVAR(tag), displayNull];\nif(isNull _display) exitWith {};\n\nprivate _control = _display displayCtrl 1001;\n_dogtagData params [\"_nickName\", \"_code\", \"_bloodType\"];\n_control ctrlSetStructuredText parseText format [\"%1<br/>%2<br/>%3\", toUpper _nickName, _code, _bloodType];\n",
        "functionName": "ace_dogtags_fnc_showDogtag"
      },
      {
        "fileName": "fnc_ssn.sqf",
        "content": "/*\n * Author: SilentSpike\n * Reports a social security number generated from the units name.\n *\n * Arguments:\n * 0: Name of a unit <STRING>\n *\n * Return Value:\n * A random three/two/four format social security number <STRING>\n *\n * Example:\n * _ssn = [\"AAA\"] call ace_dogtags_fnc_ssn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\"];\n\nprivate _chars = toArray _name;\nprivate _length = count _chars;\n// Warning, for strings containing non-latin characters, `_count _name` != `_count _chars`\n\n_chars pushBack _length;\n_length = _length + 1;\n\nprivate _remainder = 0;\nprivate _nums = [0,0,0,0,0,0,0,0,0];\n\nfor \"_index\" from 0 to (8 max _length) do {\n    private _inputChar = _chars select (_index % _length);\n    _nums set [(_index % 9), ((_nums select (_index % 9)) + _inputChar + _remainder) % 10];\n    _remainder = (_inputChar + _remainder) % 256;\n};\n\n([_nums select [0,3],_nums select [3,2], _nums select [5,4]] apply { _x joinString \"\" }) joinString \"-\"\n",
        "functionName": "ace_dogtags_fnc_ssn"
      },
      {
        "fileName": "fnc_takeDogtag.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * If dogtag is not already taken triggers event on server.\n * If dogtag already taken displays info about it.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, unit] call ace_dogtags_fnc_takeDogtag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\"];\n\n// animation\n_player call EFUNC(common,goKneeling);\n\n// sound\nprivate _position = AGLToASL (_target modelToWorld (_target selectionPosition \"neck\"));\n\nplaySound3D [\n    selectRandom RUSTLING_SOUNDS,\n    objNull,\n    false,\n    _position,\n    1,\n    1,\n    50\n];\n\n// display message\nif ((_target getVariable [QGVAR(dogtagTaken), objNull]) == _target) then {\n    [{\n        [_this, 2.5] call EFUNC(common,displayTextStructured);\n    }, localize LSTRING(dogtagAlreadyTaken), DOGTAG_SHOW_DELAY] call CBA_fnc_waitAndExecute;\n} else {\n    _target setVariable [QGVAR(dogtagTaken), _target, true];\n    [QGVAR(getDogtagItem), [_player, _target]] call CBA_fnc_serverEvent;\n};\n",
        "functionName": "ace_dogtags_fnc_takeDogtag"
      }
    ]
  },
  {
    "component": "dragging",
    "files": [
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"MouseZChanged\", {(_this select 1) call FUNC(handleScrollWheel)}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by PabstMirror, commy2\n#include \"script_component.hpp\"\n\nif (isServer) then {\n    // release object on hard disconnection. Function is identical to killed\n    addMissionEventHandler [\"HandleDisconnect\", {_this call FUNC(handleKilled)}];\n};\n\nif (!hasInterface) exitWith {};\n\nif (isNil \"ACE_maxWeightDrag\") then {\n    ACE_maxWeightDrag = 800;\n};\n\nif (isNil \"ACE_maxWeightCarry\") then {\n    ACE_maxWeightCarry = 600;\n};\n\n[\"isNotDragging\", {!((_this select 0) getVariable [QGVAR(isDragging), false])}] call EFUNC(common,addCanInteractWithCondition);\n[\"isNotCarrying\", {!((_this select 0) getVariable [QGVAR(isCarrying), false])}] call EFUNC(common,addCanInteractWithCondition);\n\n// release object on player change. This does work when returning to lobby, but not when hard disconnecting.\n[\"unit\", FUNC(handlePlayerChanged)] call CBA_fnc_addPlayerEventHandler;\n[\"vehicle\", {[ACE_player, objNull] call FUNC(handlePlayerChanged)}] call CBA_fnc_addPlayerEventHandler;\n[\"weapon\", FUNC(handlePlayerWeaponChanged)] call CBA_fnc_addPlayerEventHandler;\n\n// handle waking up dragged unit and falling unconscious while dragging\n[\"ace_unconscious\", {_this call FUNC(handleUnconscious)}] call CBA_fnc_addEventHandler;\n\n//@todo Captivity?\n\n//Add Keybind:\n[\"ACE3 Common\", QGVAR(drag), (localize LSTRING(DragKeybind)),\n{\n    if (!alive ACE_player) exitWith {false};\n    if !([ACE_player, objNull, [\"isNotDragging\", \"isNotCarrying\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    \n    // If we are drag/carrying something right now then just drop it:\n    if (ACE_player getVariable [QGVAR(isDragging), false]) exitWith {\n        [ACE_player, ACE_player getVariable [QGVAR(draggedObject), objNull]] call FUNC(dropObject);\n        false\n    };\n    if (ACE_player getVariable [QGVAR(isCarrying), false]) exitWith {\n        [ACE_player, ACE_player getVariable [QGVAR(carriedObject), objNull]] call FUNC(dropObject_carry);\n        false\n    };\n\n    private _cursor = cursorObject;\n    if ((isNull _cursor) || {(_cursor distance ACE_player) > 2.6}) exitWith {false};\n    if (!([ACE_player, _cursor] call FUNC(canDrag))) exitWith {false};\n\n    [ACE_player, _cursor] call FUNC(startDrag);\n    false\n},\n{false},\n[-1, [false, false, false]]] call CBA_fnc_addKeybind; // UNBOUND\n\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canCarry.sqf",
        "content": "/*\n * Author: commy2\n * Check if unit can carry the object. Doesn't check weight.\n *\n * Arguments:\n * 0: Unit that should do the carrying <OBJECT>\n * 1: Object to carry <OBJECT>\n *\n * Return Value:\n * Can the unit carry the object? <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_canCarry;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nif !([_unit, _target, []] call EFUNC(common,canInteractWith)) exitWith {false};\n\n//#2644 - Units with injured legs cannot bear the extra weight of carrying an object\n//The fireman carry animation does not slow down for injured legs, so you could carry and run\nif ((_unit getHitPointDamage \"HitLegs\") >= 0.5) exitWith {false};\n\n// a static weapon has to be empty for dragging (ignore UAV AI)\nif (((typeOf _target) isKindOf \"StaticWeapon\") && {{(getText (configFile >> \"CfgVehicles\" >> (typeOf _x) >> \"simulation\")) != \"UAVPilot\"} count crew _target > 0}) exitWith {false};\n\nalive _target && {vehicle _target == _target} && {_target getVariable [QGVAR(canCarry), false]} && {animationState _target in [\"\", \"unconscious\"] || (_target getVariable [\"ACE_isUnconscious\", false]) || (_target isKindOf \"CAManBase\" && {(_target getHitPointDamage \"HitLegs\") > 0.4})}\n",
        "functionName": "ace_dragging_fnc_canCarry"
      },
      {
        "fileName": "fnc_canDrag.sqf",
        "content": "/*\n * Author: commy2\n * Check if unit can drag the object. Doesn't check weight.\n *\n * Arguments:\n * 0: Unit that should do the dragging <OBJECT>\n * 1: Object to drag <OBJECT>\n *\n * Return Value:\n * Can the unit drag the object? <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_canDrag;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nif !([_unit, _target, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n// a static weapon has to be empty for dragging (ignore UAV AI)\nif ((typeOf _target) isKindOf \"StaticWeapon\" && {{(getText (configFile >> \"CfgVehicles\" >> (typeOf _x) >> \"simulation\")) != \"UAVPilot\"} count crew _target > 0}) exitWith {false};\n\nalive _target && {vehicle _target == _target} && {_target getVariable [QGVAR(canDrag), false]} && {animationState _target in [\"\", \"unconscious\"] || (_target getVariable [\"ACE_isUnconscious\", false]) || (_target isKindOf \"CAManBase\" && {(_target getHitPointDamage \"HitLegs\") > 0.4})};\n",
        "functionName": "ace_dragging_fnc_canDrag"
      },
      {
        "fileName": "fnc_canDrop_carry.sqf",
        "content": "/*\n * Author: commy2\n * Check if unit can drop the carried object.\n *\n * Arguments:\n * 0: Unit that currently carries a object <OBJECT>\n * 1: Object that is carried <OBJECT>\n *\n * Return Value:\n * Can the unit drop the object? <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_canDrop_carry;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nif !([_unit, _target, [\"isNotCarrying\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n_unit getVariable [QGVAR(carriedObject), objNull] == _target\n",
        "functionName": "ace_dragging_fnc_canDrop_carry"
      },
      {
        "fileName": "fnc_canDrop.sqf",
        "content": "/*\n * Author: commy2\n * Check if unit can drop the object.\n *\n * Arguments:\n * 0: Unit that currently drags a object <OBJECT>\n * 1: Object that is dragged <OBJECT>\n *\n * Return Value:\n * Can the unit drop the object? <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_canDrop;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nif !([_unit, _target, [\"isNotDragging\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n_unit getVariable [QGVAR(draggedObject), objNull] == _target\n",
        "functionName": "ace_dragging_fnc_canDrop"
      },
      {
        "fileName": "fnc_carryObject.sqf",
        "content": "/*\n * Author: commy2\n * Carry an object.\n *\n * Arguments:\n * 0: Unit that should do the carrying <OBJECT>\n * 1: Object to carry <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_carryObject;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\n// get attachTo offset and direction.\n\nprivate _position = _target getVariable [QGVAR(carryPosition), [0, 0, 0]];\nprivate _direction = _target getVariable [QGVAR(carryDirection), 0];\n\n// handle objects vs persons\nif (_target isKindOf \"CAManBase\") then {\n\n    [_unit, \"AcinPercMstpSnonWnonDnon\", 2, true] call EFUNC(common,doAnimation);\n    [_target, \"AinjPfalMstpSnonWnonDf_carried_dead\", 2, true] call EFUNC(common,doAnimation);\n\n    // attach person\n    _target attachTo [_unit, _position, \"LeftShoulder\"];\n\n} else {\n\n    // add height offset of model\n    private _offset = (_target modelToWorldVisual [0, 0, 0] select 2) - (_unit modelToWorldVisual [0, 0, 0] select 2);\n\n    _position = _position vectorAdd [0, 0, _offset];\n\n    // attach object\n    _target attachTo [_unit, _position];\n\n};\n[QEGVAR(common,setDir), [_target, _direction], _target] call CBA_fnc_targetEvent;\n\n_unit setVariable [QGVAR(isCarrying), true, true];\n_unit setVariable [QGVAR(carriedObject), _target, true];\n\n// add drop action\n_unit setVariable [QGVAR(ReleaseActionID), [\n    _unit, \"DefaultAction\",\n    {!isNull ((_this select 0) getVariable [QGVAR(carriedObject), objNull])},\n    {[_this select 0, (_this select 0) getVariable [QGVAR(carriedObject), objNull]] call FUNC(dropObject_carry)}\n] call EFUNC(common,addActionEventHandler)];\n\n// add anim changed EH\n[_unit, \"AnimChanged\", FUNC(handleAnimChanged), [_unit]] call CBA_fnc_addBISEventHandler;\n\n// show mouse hint\nif (_target isKindOf \"CAManBase\") then {\n    [localize LSTRING(Drop), \"\", \"\"] call EFUNC(interaction,showMouseHint);\n} else {\n    [localize LSTRING(Drop), \"\", localize LSTRING(LowerRaise)] call EFUNC(interaction,showMouseHint);\n};\n\n// check everything\n[FUNC(carryObjectPFH), 0.5, [_unit, _target, CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\n\n// reset current dragging height.\nGVAR(currentHeightChange) = 0;\n\n// prevent UAVs from firing\nprivate _UAVCrew = _target call EFUNC(common,getVehicleUAVCrew);\n\nif !(_UAVCrew isEqualTo []) then {\n    {_target deleteVehicleCrew _x} count _UAVCrew;\n    _target setVariable [QGVAR(isUAV), true, true];\n};\n",
        "functionName": "ace_dragging_fnc_carryObject"
      },
      {
        "fileName": "fnc_carryObjectPFH.sqf",
        "content": "/*\n * Author: commy2\n * PFH for Carry Object\n *\n * Arguments:\n * 0: ARGS <ARRAY>\n *  0: Unit <OBJECT>\n *  1: Target <OBJECT>\n *  2: Start time <NUMBER>\n * 1: PFEH Id <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[player, target], 20] call ace_dragging_fnc_carryObjectPFH;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#ifdef DEBUG_ENABLED_DRAGGING\n    systemChat format [\"%1 carryObjectPFH running\", CBA_missionTime];\n#endif\n\nparams [\"_args\", \"_idPFH\"];\n_args params [\"_unit\",\"_target\", \"_startTime\"];\n\nif !(_unit getVariable [QGVAR(isCarrying), false]) exitWith {\n    TRACE_2(\"carry false\",_unit,_target);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// drop if the crate is destroyed OR (target moved away from carrier (weapon disasembled))\nif (!alive _target || {_unit distance _target > 10}) then {\n    TRACE_2(\"dead/distance\",_unit,_target);\n    if ((_unit distance _target > 10) && {(CBA_missionTime - _startTime) < 1}) exitWith {\n        //attachTo seems to have some kind of network delay and target can return an odd position durring the first few frames, \n        //so wait a full second to exit if out of range (this is critical as we would otherwise detach and set it's pos to weird pos)\n        TRACE_3(\"ignoring bad distance at start\",_unit distance _target,_startTime,CBA_missionTime);\n    };\n    [_unit, _target] call FUNC(dropObject_carry);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n",
        "functionName": "ace_dragging_fnc_carryObjectPFH"
      },
      {
        "fileName": "fnc_dragObject.sqf",
        "content": "/*\n * Author: commy2\n * Drag an object. Called from ace_dragging_fnc_startDrag\n *\n * Arguments:\n * 0: Unit that should do the dragging <OBJECT>\n * 1: Object to drag <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_dragObject;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\n// get attachTo offset and direction.\nprivate _position = _target getVariable [QGVAR(dragPosition), [0, 0, 0]];\nprivate _direction = _target getVariable [QGVAR(dragDirection), 0];\n\n// add height offset of model\nprivate _offset = (_target modelToWorldVisual [0, 0, 0] select 2) - (_unit modelToWorldVisual [0, 0, 0] select 2);\nif (_target isKindOf \"CAManBase\") then {\n    _offset = 0;\n};\n_position = _position vectorAdd [0, 0, _offset];\n\n// attach object\nTRACE_3(\"attaching\",_position,_offset,_direction);\n_target attachTo [_unit, _position];\n[QEGVAR(common,setDir), [_target, _direction], _target] call CBA_fnc_targetEvent;\n\nif (_target isKindOf \"CAManBase\") then {\n    [_target, \"AinjPpneMrunSnonWnonDb_still\", 0, true] call EFUNC(common,doAnimation);\n};\n\n_unit setVariable [QGVAR(isDragging), true, true];\n_unit setVariable [QGVAR(draggedObject), _target, true];\n\n// add drop action\n_unit setVariable [QGVAR(ReleaseActionID), [\n    _unit, \"DefaultAction\",\n    {!isNull ((_this select 0) getVariable [QGVAR(draggedObject), objNull])},\n    {[_this select 0, (_this select 0) getVariable [QGVAR(draggedObject), objNull]] call FUNC(dropObject)}\n] call EFUNC(common,addActionEventHandler)];\n\n// add anim changed EH\n[_unit, \"AnimChanged\", FUNC(handleAnimChanged), [_unit]] call CBA_fnc_addBISEventHandler;\n\n// show mouse hint\n[localize LSTRING(Drop), \"\"] call EFUNC(interaction,showMouseHint);\n\n// check everything\n[FUNC(dragObjectPFH), 0.5, [_unit, _target, CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\n\n// reset current dragging height.\nGVAR(currentHeightChange) = 0;\n\n// prevent UAVs from firing\nprivate _UAVCrew = _target call EFUNC(common,getVehicleUAVCrew);\n\nif !(_UAVCrew isEqualTo []) then {\n    {_target deleteVehicleCrew _x} count _UAVCrew;\n    _target setVariable [QGVAR(isUAV), true, true];\n};\n",
        "functionName": "ace_dragging_fnc_dragObject"
      },
      {
        "fileName": "fnc_dragObjectPFH.sqf",
        "content": "/*\n * Author: commy2\n * PFH for Drag Object\n *\n * Arguments:\n * 0: ARGS <ARRAY>\n *  0: Unit <OBJECT>\n *  1: Target <OBJECT>\n *  2: Start time <NUMBER>\n * 1: PFEH Id <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[player, target], 20] call ace_dragging_fnc_dragObjectPFH;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#ifdef DEBUG_ENABLED_DRAGGING\n    systemChat format [\"%1 dragObjectPFH running\", CBA_missionTime];\n#endif\n\nparams [\"_args\", \"_idPFH\"];\n_args params [\"_unit\",\"_target\", \"_startTime\"];\n\nif !(_unit getVariable [QGVAR(isDragging), false]) exitWith {\n    TRACE_2(\"drag false\",_unit,_target);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// drop if the crate is destroyed OR (target moved away from carrier (weapon disasembled))\nif (!alive _target || {_unit distance _target > 10}) then {\n    TRACE_2(\"dead/distance\",_unit,_target);\n    if ((_unit distance _target > 10) && {(CBA_missionTime - _startTime) < 1}) exitWith {\n        //attachTo seems to have some kind of network delay and target can return an odd position durring the first few frames, \n        //so wait a full second to exit if out of range (this is critical as we would otherwise detach and set it's pos to weird pos)\n        TRACE_3(\"ignoring bad distance at start\",_unit distance _target,_startTime,CBA_missionTime);\n    };\n    [_unit, _target] call FUNC(dropObject);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n",
        "functionName": "ace_dragging_fnc_dragObjectPFH"
      },
      {
        "fileName": "fnc_dropObject_carry.sqf",
        "content": "/*\n * Author: commy2\n * Drop a carried object.\n *\n * Arguments:\n * 0: Unit that carries the other object <OBJECT>\n * 1: Carried object to drop <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_dropObject_carry;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\n// remove drop action\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(ReleaseActionID), -1]] call EFUNC(common,removeActionEventHandler);\n\nprivate _inBuilding = [_unit] call FUNC(isObjectOnObject);\n\n// prevent collision damage\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\n[QEGVAR(common,fixCollision), _target, _target] call CBA_fnc_targetEvent;\n\n// release object\ndetach _target;\n\n// fix anim when aborting carrying persons\nif (_target isKindOf \"CAManBase\" || {animationState _unit in CARRY_ANIMATIONS}) then {\n    if (vehicle _unit == _unit && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\n        [_unit, \"\", 2, true] call EFUNC(common,doAnimation);\n    };\n\n    if (_target getVariable [\"ACE_isUnconscious\", false]) then {\n        [_target, \"unconscious\", 2, true] call EFUNC(common,doAnimation);\n    } else {\n        [_target, \"\", 2, true] call EFUNC(common,doAnimation);  //@todo\n    };\n};\n\n// properly remove fake weapon\n_unit removeWeapon \"ACE_FakePrimaryWeapon\";\n\n// reselect weapon and re-enable sprint\n_unit selectWeapon primaryWeapon _unit;\n\n[_unit, \"forceWalk\", \"ACE_dragging\", false] call EFUNC(common,statusEffect_set);\n\n// prevent object from flipping inside buildings\nif (_inBuilding) then {\n    _target setPosASL (getPosASL _target vectorAdd [0, 0, 0.05]);\n};\n\n// hide mouse hint\n[] call EFUNC(interaction,hideMouseHint);\n\n_unit setVariable [QGVAR(isCarrying), false, true];\n_unit setVariable [QGVAR(carriedObject), objNull, true];\n\n// make object accesable for other units\n[objNull, _target, true] call EFUNC(common,claim);\n\nif !(_target isKindOf \"CAManBase\") then {\n    [QEGVAR(common,fixPosition), _target, _target] call CBA_fnc_targetEvent;\n    [QEGVAR(common,fixFloating), _target, _target] call CBA_fnc_targetEvent;\n};\n\n// recreate UAV crew\nif (_target getVariable [QGVAR(isUAV), false]) then {\n    createVehicleCrew _target;\n};\n",
        "functionName": "ace_dragging_fnc_dropObject_carry"
      },
      {
        "fileName": "fnc_dropObject.sqf",
        "content": "/*\n * Author: commy2\n * Drop a dragged object.\n *\n * Arguments:\n * 0: Unit that drags the other object <OBJECT>\n * 1: Dragged object to drop <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_dropObject;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\n// remove drop action\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(ReleaseActionID), -1]] call EFUNC(common,removeActionEventHandler);\n\nprivate _inBuilding = [_unit] call FUNC(isObjectOnObject);\n\nif !(_unit getVariable [\"ACE_isUnconscious\", false]) then {\n    // play release animation\n    [_unit, \"released\"] call EFUNC(common,doGesture);\n};\n\n// prevent collision damage\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\n[QEGVAR(common,fixCollision), _target, _target] call CBA_fnc_targetEvent;\n\n// release object\ndetach _target;\n\nif (_target isKindOf \"CAManBase\") then {\n    if (_target getVariable [\"ACE_isUnconscious\", false]) then {\n        [_target, \"unconscious\", 2, true] call EFUNC(common,doAnimation);\n    } else {\n        [_target, \"\", 2, true] call EFUNC(common,doAnimation);  //@todo \"AinjPpneMrunSnonWnonDb_release\" seems to fall back to unconsciousness anim.\n    };\n};\n\n_unit removeWeapon \"ACE_FakePrimaryWeapon\";\n\n// prevent object from flipping inside buildings\nif (_inBuilding) then {\n    _target setPosASL (getPosASL _target vectorAdd [0, 0, 0.05]);\n    TRACE_2(\"setPos\",getPosASL _unit,getPosASL _target);\n};\n\n// hide mouse hint\n[] call EFUNC(interaction,hideMouseHint);\n\n_unit setVariable [QGVAR(isDragging), false, true];\n_unit setVariable [QGVAR(draggedObject), objNull, true];\n\n// make object accessible for other units\n[objNull, _target, true] call EFUNC(common,claim);\n\nif !(_target isKindOf \"CAManBase\") then {\n    [QEGVAR(common,fixPosition), _target, _target] call CBA_fnc_targetEvent;\n    [QEGVAR(common,fixFloating), _target, _target] call CBA_fnc_targetEvent;\n};\n\nif (_unit getVariable [\"ACE_isUnconscious\", false]) then {\n    [_unit, \"unconscious\", 2, true] call EFUNC(common,doAnimation);\n};\n\n// recreate UAV crew\nif (_target getVariable [QGVAR(isUAV), false]) then {\n    createVehicleCrew _target;\n};\n",
        "functionName": "ace_dragging_fnc_dropObject"
      },
      {
        "fileName": "fnc_getWeight.sqf",
        "content": "/*\n * Author: L-H, edited by commy2, rewritten by joko // Jonas\n * Returns the weight of a crate.\n *\n * Arguments:\n * 0: Crate to get weight of <OBJECT>\n *\n * Return Value:\n * Total Weight <NUMBER>\n *\n * Example:\n * [Crate1] call ace_dragging_fnc_getweight;\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\n\n// Initialize the total weight.\nprivate _totalWeight = 0;\n\n// Cycle through all item types with their assigned config paths.\n{\n    _x params [\"_items\", \"_getConfigCode\"];\n    _items params [\"_item\", \"_count\"];\n    // Cycle through all items and read their mass out of the config.\n    {\n        // Multiply mass with amount of items and add the mass to the total weight.\n        _totalWeight = _totalWeight + (getNumber ((call _getConfigCode) >> \"mass\") * (_count select _forEachIndex));\n    } forEach _item;\n    true\n} count [\n    //IGNORE_PRIVATE_WARNING [\"_x\"];\n    [getMagazineCargo _object, {configFile >> \"CfgMagazines\" >> _x}],\n    [getBackpackCargo _object, {configFile >> \"CfgVehicles\" >> _x}],\n    [getItemCargo _object, {configFile >> \"CfgWeapons\" >> _x >> \"ItemInfo\"}],\n    [getWeaponCargo _object, {configFile >> \"CfgWeapons\" >> _x >> \"WeaponSlotsInfo\"}]\n];\n\n// add Weight of create to totalWeight\n_totalWeight = _totalWeight + (getNumber (configFile >> \"CfgVehicles\" >> typeOf _object >> \"mass\"));\n\n// Mass in Arma isn't an exact amount but rather a volume/weight value. This attempts to work around that by making it a usable value. (sort of).\n_totalWeight * 0.5\n",
        "functionName": "ace_dragging_fnc_getWeight"
      },
      {
        "fileName": "fnc_handleAnimChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle the animaion for a Unit for Dragging Module\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: animaion <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit, \"amovpercmstpsnonwnondnon\"] call ace_dragging_fnc_handleAnimChanged;\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_thisArgs\", \"_thisID\"]; // From CBA_fnc_addBISEventHandler;\n\nparams [\"_unit\", \"_anim\"];\n_thisArgs params [\"_realUnit\"];\nTRACE_4(\"params\",_unit,_anim,_realUnit,_thisID);\n\nif (_unit != _realUnit) exitWith {\n    TRACE_2(\"respawn (unit changed) - remove EH\",_unit,_realUnit);\n    _unit removeEventHandler [\"AnimChanged\", _thisID];\n};\n\nif (_unit getVariable [QGVAR(isDragging), false]) then {\n\n    // drop dragged object when not in valid animation\n    if (!(_anim in DRAG_ANIMATIONS) && {!(_unit call EFUNC(common,isSwimming))}) then {\n        private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\n\n        if (!isNull _draggedObject) then {\n            TRACE_2(\"stop drag\",_unit,_draggedObject);\n            [_unit, _draggedObject] call FUNC(dropObject);\n        };\n    };\n} else {\n\n    if (_unit getVariable [QGVAR(isCarrying), false]) then {\n\n        // drop carried object when not standing; also some exceptions when picking up crate\n        if (stance _unit != \"STAND\" && {_anim != \"amovpercmstpsnonwnondnon\"}) then {\n            private _carriedObject = _unit getVariable [QGVAR(carriedObject), objNull];\n\n            if (!isNull _carriedObject) then {\n                TRACE_2(\"stop carry\",_unit,_carriedObject);\n                [_unit, _carriedObject] call FUNC(dropObject_carry);\n            };\n        };\n    } else {\n        TRACE_1(\"not drag/carry - remove EH\",_unit);\n        _unit removeEventHandler [\"AnimChanged\", _thisID];\n    };\n};\n",
        "functionName": "ace_dragging_fnc_handleAnimChanged"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: commy2\n * Handle death of the dragger\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit] call ace_dragging_fnc_handleKilled;\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nif (_unit getVariable [QGVAR(isDragging), false]) then {\n    private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\n\n    [_unit, _draggedObject] call FUNC(dropObject);\n};\n\nif (_unit getVariable [QGVAR(isCarrying), false]) then {\n    private _carriedObject = _unit getVariable [QGVAR(carriedObject), objNull];\n\n    [_unit, _carriedObject] call FUNC(dropObject_carry);\n};\n",
        "functionName": "ace_dragging_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle player changes.\n *\n * Arguments:\n * 0: New Player Unit <OBJECT>\n * 1: Old Player Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_newPlayer, _oldPlayer] call ace_dragging_fnc_handlePlayerChanged;\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_newPlayer\", \"_oldPlayer\"];\nTRACE_2(\"params\",_newPlayer,_oldPlayer);\n\n{\n    if (_x getVariable [QGVAR(isDragging), false]) then {\n        [_x, _x getVariable [QGVAR(draggedObject), objNull]] call FUNC(dropObject);\n    };\n\n    if (_x getVariable [QGVAR(isCarrying), false]) then {\n        [_x, _x getVariable [QGVAR(carriedObject), objNull]] call FUNC(dropObject_carry);\n    };\n} forEach [_newPlayer, _oldPlayer];\n",
        "functionName": "ace_dragging_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handlePlayerWeaponChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle the Weapon Changed Event\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit, \"gun\"] call ace_dragging_fnc_handlePlayerWeaponChanged;\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\nTRACE_2(\"params\",_unit,_weapon);\n\nif (_unit getVariable [QGVAR(isDragging), false]) then {\n\n    // drop dragged object when selecting a non-primary weapon\n    if (_weapon != primaryWeapon _unit) then {\n        private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\n\n        [_unit, _draggedObject] call FUNC(dropObject);\n    };\n\n};\n\nif (_unit getVariable [QGVAR(isCarrying), false]) then {\n\n    private _carriedObject = _unit getVariable [QGVAR(carriedObject), objNull];\n\n    if (_carriedObject isKindOf \"CAManBase\") then {\n\n        if (_weapon != primaryWeapon _unit) then {\n            [_unit, _carriedObject] call FUNC(dropObject_carry);\n        };\n\n    } else {\n\n        // drop carried object when selecting any weapon\n        if (_weapon != \"\") then {\n            [_unit, _carriedObject] call FUNC(dropObject_carry);\n        };\n\n    };\n};\n",
        "functionName": "ace_dragging_fnc_handlePlayerWeaponChanged"
      },
      {
        "fileName": "fnc_handleScrollWheel.sqf",
        "content": "/*\n * Author: L-H, commy2\n * Handles raising and lowering the dragged weapon to be able to place it on top of objects.\n *\n * Arguments:\n * 0: Scroll amount <NUMBER>\n *\n * Return Value:\n * Handled or not. <BOOL>\n *\n * Example:\n * [0.1] call ace_dragging_fnc_handleScrollWheel;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_scrollAmount\"];\n\nprivate _unit = ACE_player;\n\n// EH is always assigned. Exit and don't overwrite input if not carrying\nif !(_unit getVariable [QGVAR(isCarrying), false]) exitWith {false};\n\n// move carried item 15 cm per scroll interval\n_scrollAmount = _scrollAmount * 0.15;\n\nprivate _carriedItem = _unit getVariable [QGVAR(carriedObject), objNull];\n\n//disabled for persons\nif (_carriedItem isKindOf \"CAManBase\") exitWith {false};\n\nprivate _position = getPosASL _carriedItem;\nprivate _maxHeight = (_unit modelToWorldVisualWorld [0, 0, 0]) select 2;\n\n_position set [2, ((_position select 2) + _scrollAmount min (_maxHeight + 1.5)) max _maxHeight];\n\n// move up/down object and reattach at current position\ndetach _carriedItem;\n\n// Uses this method of selecting position because setPosATL did not have immediate effect\nprivate _positionChange = _position vectorDiff (getPosASL _carriedItem);\nprivate _selectionPosition = _unit worldToModel (ASLtoAGL getPosWorld _carriedItem);\n_selectionPosition = _selectionPosition vectorAdd _positionChange;\n_carriedItem attachTo [_unit, _selectionPosition];\n\n//reset the carry direction\nprivate _direction = _carriedItem getVariable [QGVAR(carryDirection), 0];\n[QEGVAR(common,setDir), [_carriedItem, _direction], _carriedItem] call CBA_fnc_targetEvent;\n\ntrue\n",
        "functionName": "ace_dragging_fnc_handleScrollWheel"
      },
      {
        "fileName": "fnc_handleUnconscious.sqf",
        "content": "/*\n * Author: commy2\n * Handle the Unconscious of a Unit while Dragging\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit] call ace_dragging_fnc_handleUnconscious;\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _player = ACE_player;\n\nif (_player getVariable [QGVAR(isDragging), false]) then {\n\n    private _draggedObject = _player getVariable [QGVAR(draggedObject), objNull];\n\n    // handle falling unconscious\n    if (_unit == _player) then {\n        [_unit, _draggedObject] call FUNC(dropObject);\n    };\n\n    // handle waking up dragged unit\n    //if (_unit == _draggedObject) then {\n        // [_player, _draggedObject] call FUNC(dropObject);\n    //};\n\n};\n\nif (_player getVariable [QGVAR(isCarrying), false]) then {\n\n    private _carriedObject = _player getVariable [QGVAR(carriedObject), objNull];\n\n    // handle falling unconscious\n    if (_unit == _player) then {\n        [_unit, _carriedObject] call FUNC(dropObject_carry);\n    };\n\n    // handle waking up dragged unit\n    //if (_unit == _carriedObject) then {\n        // [_player, _carriedObject] call FUNC(dropObject_carry);\n    //};\n\n};\n",
        "functionName": "ace_dragging_fnc_handleUnconscious"
      },
      {
        "fileName": "fnc_initObject.sqf",
        "content": "/*\n * Author: commy2\n * Initialize variables for drag or carryable objects. Called from init EH.\n *\n * Arguments:\n * 0: Any object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [box] call ace_dragging_fnc_initObject;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _object;\n\nif (getNumber (_config >> QGVAR(canDrag)) == 1) then {\n    private _position = getArray (_config >> QGVAR(dragPosition));\n    private _direction = getNumber (_config >> QGVAR(dragDirection));\n\n    [_object, true, _position, _direction] call FUNC(setDraggable);\n};\n\nif (getNumber (_config >> QGVAR(canCarry)) == 1) then {\n    private _position = getArray (_config >> QGVAR(carryPosition));\n    private _direction = getNumber (_config >> QGVAR(carryDirection));\n\n    [_object, true, _position, _direction] call FUNC(setCarryable);\n};\n",
        "functionName": "ace_dragging_fnc_initObject"
      },
      {
        "fileName": "fnc_initPerson.sqf",
        "content": "/*\n * Author: commy2\n * Initialize variables for drag or carryable persons. Called from init EH.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_dragging_fnc_initPerson;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n[_unit, true, [0,1.1,0.092], 180] call FUNC(setDraggable);\n[_unit, true, [0.4,-0.1,-1.25], 195] call FUNC(setCarryable); // hard-coded selection: \"LeftShoulder\"\n",
        "functionName": "ace_dragging_fnc_initPerson"
      },
      {
        "fileName": "fnc_isObjectOnObject.sqf",
        "content": "/*\n * Author: commy2\n * Check if Object is Overlapping\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [player] call ace_dragging_fnc_isObjectOnObject\n *\n * Public: No\n */\nparams [\"_object\"];\n\n(getPosATL _object select 2) - (getPos _object select 2) > 1E-5\n",
        "functionName": "ace_dragging_fnc_isObjectOnObject"
      },
      {
        "fileName": "fnc_setCarryable.sqf",
        "content": "/*\n * Author: commy2\n * Enable the object to be carried.\n *\n * Arguments:\n * 0: Any object <OBJECT>\n * 1: true to enable carrying, false to disable <BOOL>\n * 2: Position offset for attachTo command <ARRAY> (default: [0,1,1])\n * 3: Direction in degree to rotate the object after attachTo <NUMBER> (default: 0)\n *\n * Return Value:\n * None\n *\n * Example:\n * [object, true, [0,1,1], 0] call ace_dragging_fnc_setCarryable;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_enableCarry\", \"_position\", \"_direction\"];\n\nif (isNil \"_position\") then {\n    _position = _object getVariable [QGVAR(carryPosition), [0,1,1]];\n};\n\nif (isNil \"_direction\") then {\n    _direction = _object getVariable [QGVAR(carryDirection), 0];\n};\n\n// update variables\n_object setVariable [QGVAR(canCarry), _enableCarry];\n_object setVariable [QGVAR(carryPosition), _position];\n_object setVariable [QGVAR(carryDirection), _direction];\n\n// add action to class if it is not already present\nprivate _type = typeOf _object;\nprivate _initializedClasses = GETGVAR(initializedClasses_carry,[]);\n\n// do nothing if the class is already initialized\nif (_type in _initializedClasses) exitWith {};\n\n_initializedClasses pushBack _type;\nGVAR(initializedClasses_carry) = _initializedClasses;\n\nprivate _icon = [QUOTE(PATHTOF(UI\\icons\\box_carry.paa)), QUOTE(PATHTOF(UI\\icons\\person_carry.paa))] select (_object isKindOf \"Man\");\n\nprivate _carryAction = [QGVAR(carry), localize LSTRING(Carry), _icon, {[_player, _target] call FUNC(startCarry)}, {[_player, _target] call FUNC(canCarry)}] call EFUNC(interact_menu,createAction);\nprivate _dropAction = [QGVAR(drop_carry), localize LSTRING(Drop), \"\", {[_player, _target] call FUNC(dropObject_carry)}, {[_player, _target] call FUNC(canDrop_carry)}] call EFUNC(interact_menu,createAction);\n\n[_type, 0, [\"ACE_MainActions\"], _carryAction] call EFUNC(interact_menu,addActionToClass);\n[_type, 0, [], _dropAction] call EFUNC(interact_menu,addActionToClass);\n",
        "functionName": "ace_dragging_fnc_setCarryable"
      },
      {
        "fileName": "fnc_setDraggable.sqf",
        "content": "/*\n * Author: commy2\n * Enable the object to be dragged.\n *\n * Arguments:\n * 0: Any object <OBJECT>\n * 1: true to enable dragging, false to disable <BOOL>\n * 2: Position offset for attachTo command (optinal; default: [0,0,0])<ARRAY>\n * 3: Direction in degree to rotate the object after attachTo (optional; default: 0) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [object, true, [0,0,0], 0] call ace_dragging_fnc_setDraggable;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_player\", \"_target\"];\nparams [\"_object\", \"_enableDrag\", \"_position\", \"_direction\"];\n\nif (isNil \"_position\") then {\n    _position = _object getVariable [QGVAR(dragPosition), [0,0,0]];\n};\n\nif (isNil \"_direction\") then {\n    _direction = _object getVariable [QGVAR(dragDirection), 0];\n};\n\n// update variables\n_object setVariable [QGVAR(canDrag), _enableDrag];\n_object setVariable [QGVAR(dragPosition), _position];\n_object setVariable [QGVAR(dragDirection), _direction];\n\n// add action to class if it is not already present\nprivate _type = typeOf _object;\nprivate _initializedClasses = GETGVAR(initializedClasses,[]);\n\n// do nothing if the class is already initialized\nif (_type in _initializedClasses) exitWith {};\n\n_initializedClasses pushBack _type;\nGVAR(initializedClasses) = _initializedClasses;\n\nprivate _icon = [QUOTE(PATHTOF(UI\\icons\\box_drag.paa)), QUOTE(PATHTOF(UI\\icons\\person_drag.paa))] select (_object isKindOf \"Man\");\n\nprivate _dragAction = [QGVAR(drag), localize LSTRING(Drag), _icon, {[_player, _target] call FUNC(startDrag)}, {[_player, _target] call FUNC(canDrag)}] call EFUNC(interact_menu,createAction);\nprivate _dropAction = [QGVAR(drop), localize LSTRING(Drop), \"\", {[_player, _target] call FUNC(dropObject)}, {[_player, _target] call FUNC(canDrop)}] call EFUNC(interact_menu,createAction);\n\n[_type, 0, [\"ACE_MainActions\"], _dragAction] call EFUNC(interact_menu,addActionToClass);\n[_type, 0, [], _dropAction] call EFUNC(interact_menu,addActionToClass);\n",
        "functionName": "ace_dragging_fnc_setDraggable"
      },
      {
        "fileName": "fnc_startCarry.sqf",
        "content": "/*\n * Author: commy2\n * Start the carrying process.\n *\n * Arguments:\n * 0: Unit that should do the carrying <OBJECT>\n * 1: Object to carry <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_startCarry;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\n// check weight\nprivate _weight = [_target] call FUNC(getWeight);\n\nif (_weight > missionNamespace getVariable [\"ACE_maxWeightCarry\", 1E11]) exitWith {\n    [localize LSTRING(UnableToDrag)] call EFUNC(common,displayTextStructured);\n};\n\nprivate _timer = CBA_missionTime + 5;\n\n// handle objects vs persons\nif (_target isKindOf \"CAManBase\") then {\n\n    // add a primary weapon if the unit has none.\n    if (primaryWeapon _unit == \"\") then {\n        _unit addWeapon \"ACE_FakePrimaryWeapon\";\n    };\n\n    // select primary, otherwise the drag animation actions don't work.\n    _unit selectWeapon primaryWeapon _unit;\n\n    // move a bit closer and adjust direction when trying to pick up a person\n    _target setDir (getDir _unit + 180);\n    _target setPosASL (getPosASL _unit vectorAdd (vectorDir _unit));\n\n    [_unit, \"AcinPknlMstpSnonWnonDnon_AcinPercMrunSnonWnonDnon\", 2, true] call EFUNC(common,doAnimation);\n    [_target, \"AinjPfalMstpSnonWrflDnon_carried_Up\", 2, true] call EFUNC(common,doAnimation);\n\n    _timer = CBA_missionTime + 15;\n\n} else {\n\n    // select no weapon and stop sprinting\n    _unit action [\"SwitchWeapon\", _unit, _unit, 299];\n    [_unit, \"AmovPercMstpSnonWnonDnon\", 0] call EFUNC(common,doAnimation);\n\n    [_unit, \"forceWalk\", \"ACE_dragging\", true] call EFUNC(common,statusEffect_set);\n\n};\n\n// prevent multiple players from accessing the same object\n[_unit, _target, true] call EFUNC(common,claim);\n\n\n// prevents draging and carrying at the same time\n_unit setVariable [QGVAR(isCarrying), true, true];\n\n// required for aborting animation\n_unit setVariable [QGVAR(carriedObject), _target, true];\n\n[FUNC(startCarryPFH), 0.2, [_unit, _target, _timer]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_dragging_fnc_startCarry"
      },
      {
        "fileName": "fnc_startCarryPFH.sqf",
        "content": "/*\n * Author: commy2\n * Carry PFH\n *\n * Arguments:\n * 0: ARGS <ARRAY>\n *  0: Unit <OBJECT>\n *  1: Target <OBJECT>\n *  2: Timeout <NUMBER>\n * 1: PFEH Id <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[player, target, 100], 20] call ace_dragging_fnc_startCarryPFH;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#ifdef DEBUG_ENABLED_DRAGGING\n    systemChat format [\"%1 startCarryPFH running\", CBA_missionTime];\n#endif\n\nparams [\"_args\", \"_idPFH\"];\n_args params [\"_unit\", \"_target\", \"_timeOut\"];\n\n// handle aborting carry\nif !(_unit getVariable [QGVAR(isCarrying), false]) exitWith {\n    TRACE_4(\"carry false\",_unit,_target,_timeOut,CBA_missionTime);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// same as dragObjectPFH, checks if object is deleted or dead OR (target moved away from carrier (weapon disasembled))\nif (!alive _target || {_unit distance _target > 10}) then {\n    TRACE_4(\"dead/distance\",_unit,_target,_timeOut,CBA_missionTime);\n    [_unit, _target] call FUNC(dropObject);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// handle persons vs objects\nif (_target isKindOf \"CAManBase\") then {\n    if (CBA_missionTime > _timeOut) exitWith {\n        TRACE_4(\"Start carry person\",_unit,_target,_timeOut,CBA_missionTime);\n        [_unit, _target] call FUNC(carryObject);\n\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n} else {\n    if (CBA_missionTime > _timeOut) exitWith {\n        TRACE_4(\"timeout\",_unit,_target,_timeOut,CBA_missionTime);\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n\n        // drop if in timeout\n        private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\n        [_unit, _draggedObject] call FUNC(dropObject);\n    };\n\n    // wait for the unit to stand up\n    if (stance _unit == \"STAND\") exitWith {\n        TRACE_4(\"Start carry object\",_unit,_target,_timeOut,CBA_missionTime);\n        [_unit, _target] call FUNC(carryObject);\n\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n};\n",
        "functionName": "ace_dragging_fnc_startCarryPFH"
      },
      {
        "fileName": "fnc_startDrag.sqf",
        "content": "/*\n * Author: commy2\n * Start the dragging process.\n *\n * Arguments:\n * 0: Unit that should do the dragging <OBJECT>\n * 1: Object to drag <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget] call ace_dragging_fnc_startDrag;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\n// check weight\nprivate _weight = [_target] call FUNC(getWeight);\n\nif (_weight > missionNamespace getVariable [\"ACE_maxWeightDrag\", 1E11]) exitWith {\n    [localize LSTRING(UnableToDrag)] call EFUNC(common,displayTextStructured);\n};\n\n// add a primary weapon if the unit has none.\n// @todo prevent opening inventory when equipped with a fake weapon\nif (primaryWeapon _unit == \"\") then {\n    _unit addWeapon \"ACE_FakePrimaryWeapon\";\n};\n\n// select primary, otherwise the drag animation actions don't work.\n_unit selectWeapon primaryWeapon _unit;\n\n// prevent multiple players from accessing the same object\n[_unit, _target, true] call EFUNC(common,claim);\n\n// can't play action that depends on weapon if it was added the same frame\nif !(_unit call EFUNC(common,isSwimming)) then {\n    [{\n        [_this, \"grabDrag\"] call EFUNC(common,doGesture);\n    }, _unit] call CBA_fnc_execNextFrame;\n};\n\n// move a bit closer and adjust direction when trying to pick up a person\nif (_target isKindOf \"CAManBase\") then {\n    _target setDir (getDir _unit + 180);\n    _target setPosASL (getPosASL _unit vectorAdd (vectorDir _unit vectorMultiply 1.5));\n\n    [_target, \"AinjPpneMrunSnonWnonDb_grab\", 2, true] call EFUNC(common,doAnimation);\n};\n\n// prevents draging and carrying at the same time\n_unit setVariable [QGVAR(isDragging), true, true];\n\n[FUNC(startDragPFH), 0.2, [_unit, _target, CBA_missionTime + 5]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_dragging_fnc_startDrag"
      },
      {
        "fileName": "fnc_startDragPFH.sqf",
        "content": "/*\n * Author: commy2\n * Drag PFH\n *\n * Arguments:\n * 0: ARGS <ARRAY>\n *  0: Unit <OBJECT>\n *  1: Target <OBJECT>\n *  2: Timeout <NUMBER>\n * 1: PFEH Id <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[player, target, 100], 20] call ace_dragging_fnc_startDragPFH;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#ifdef DEBUG_ENABLED_DRAGGING\n    systemChat format [\"%1 startDragPFH running\", CBA_missionTime];\n#endif\n\nparams [\"_args\", \"_idPFH\"];\n_args params [\"_unit\", \"_target\", \"_timeOut\"];\n\n// handle aborting drag\nif !(_unit getVariable [QGVAR(isDragging), false]) exitWith {\n    TRACE_4(\"drag false\",_unit,_target,_timeOut,CBA_missionTime);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// same as dragObjectPFH, checks if object is deleted or dead OR (target moved away from carrier (weapon disasembled))\nif (!alive _target || {_unit distance _target > 10}) then {\n    TRACE_4(\"dead/distance\",_unit,_target,_timeOut,CBA_missionTime);\n    [_unit, _target] call FUNC(dropObject);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// timeout. Do nothing. Quit. CBA_missionTime, because anim length is linked to ingame time.\nif (CBA_missionTime > _timeOut) exitWith {\n    TRACE_4(\"timeout\",_unit,_target,_timeOut,CBA_missionTime);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n\n    // drop if in timeout\n    private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\n    [_unit, _draggedObject] call FUNC(dropObject);\n};\n\n// unit is ready to start dragging\nif (animationState _unit in DRAG_ANIMATIONS || {_unit call EFUNC(common,isSwimming)}) exitWith {\n    TRACE_4(\"Start Dragging\",_unit,_target,_timeOut,CBA_missionTime);\n    [_unit, _target] call FUNC(dragObject);\n\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n",
        "functionName": "ace_dragging_fnc_startDragPFH"
      }
    ]
  },
  {
    "component": "explosives",
    "files": [
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"MouseZChanged\", {(_this select 1) call FUNC(handleScrollWheel)}];\n_display displayAddEventHandler [\"MouseButtonDown\", {[ACE_player, _this select 1] call FUNC(cancelPlacement)}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Initialises the player object for the explosive system.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//Event for setting explosive placement angle/pitch:\n[QGVAR(place), {_this call FUNC(setPosition)}] call CBA_fnc_addEventHandler;\n[QGVAR(startDefuse), FUNC(startDefuse)] call CBA_fnc_addEventHandler;\n\n//When getting knocked out in medical, trigger deadman explosives:\n//Event is global, only run on server (ref: ace_medical_fnc_setUnconscious)\nif (isServer) then {\n    [QGVAR(detonate), {\n        params [\"_unit\", \"_explosive\", \"_delay\"];\n        TRACE_3(\"server detonate EH\",_unit,_explosive,_delay);\n        _explosive setShotParents [_unit, _unit];\n        [{\n            params [\"_explosive\"];\n            TRACE_1(\"exploding\",_explosive);\n            if (!isNull _explosive) then {\n                _explosive setDamage 1;\n            };\n        }, _explosive, _delay] call CBA_fnc_waitAndExecute;\n    }] call CBA_fnc_addEventHandler;\n\n    [\"ace_unconscious\", {\n        params [\"_unit\", \"_isUnconscious\"];\n        if (!_isUnconscious) exitWith {};\n        TRACE_1(\"Knocked Out, Doing Deadman\", _unit);\n        [_unit] call FUNC(onIncapacitated);\n    }] call CBA_fnc_addEventHandler;\n\n    [QGVAR(sendOrientations), {\n        params [\"_logic\"];\n        TRACE_1(\"sendOrientations received:\",_logic);\n        // Filter the array before sending it\n        GVAR(explosivesOrientations) = GVAR(explosivesOrientations) select {\n            _x params [\"_explosive\"];\n            (!isNull _explosive && {alive _explosive})\n        };\n        TRACE_1(\"orientationsSent sent:\",GVAR(explosivesOrientations));\n        [QGVAR(orientationsSent), [GVAR(explosivesOrientations)], _logic] call CBA_fnc_targetEvent;\n    }] call CBA_fnc_addEventHandler;\n};\n\nif (!hasInterface) exitWith {};\n\nGVAR(PlacedCount) = 0;\nGVAR(Setup) = objNull;\nGVAR(pfeh_running) = false;\nGVAR(CurrentSpeedDial) = 0;\n\n// In case we are a JIP client, ask the server for orientation of any previously\n// placed mine.\nif (didJIP) then {\n    [QGVAR(orientationsSent), {\n        params [\"_explosivesOrientations\"];\n        TRACE_1(\"orientationsSent received:\",_explosivesOrientations);\n        {\n            _x params [\"_explosive\",\"_direction\",\"_pitch\"];\n            TRACE_3(\"orientation set:\",_explosive,_direction,_pitch);\n            [_explosive, _direction, _pitch] call FUNC(setPosition);\n        } forEach _explosivesOrientations;\n        deleteVehicle GVAR(localLogic);\n        GVAR(localLogic) = nil;\n    }] call CBA_fnc_addEventHandler;\n\n    //  Create a logic to get the client ID\n    GVAR(localLogic) = ([sideLogic] call CBA_fnc_getSharedGroup) createUnit [\"Logic\", [0,0,0], [], 0, \"NONE\"];\n    TRACE_1(\"sendOrientations sent:\",GVAR(localLogic));\n    [QGVAR(sendOrientations), [GVAR(localLogic)]] call CBA_fnc_serverEvent;\n};\n\n[\"ace_interactMenuOpened\", {\n    //Cancel placement if interact menu opened\n    if (GVAR(pfeh_running)) then {\n        GVAR(placeAction) = PLACE_CANCEL;\n    };\n\n    //Show defuse actions on CfgAmmos (allMines):\n    _this call FUNC(interactEH);\n\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Initialises the explosives system\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nif (isServer) then {\n    GVAR(explosivesOrientations) = []\n};\n\nGVAR(detonationHandlers) = [];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addCellphoneIED.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Adds an IED to the cellphone list\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Explosive <OBJECT>\n * 2: Magazine classname <STRING>\n * 3: Extra variables <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * Handled by PlaceExplosive.\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_explosive\", \"_magazineClass\", \"_extra\"];\nTRACE_4(\"params\",_unit,_explosive,_magazineClass,_extra);\n\n// Config is the last item in the list of passed in items.\nprivate _config = (_this select 3) select (count (_this select 3) - 1);\n\nprivate _requiredItems = getArray(_config >> \"requires\");\nprivate _hasRequired = true;\nprivate _detonators = [_unit] call FUNC(getDetonators);\n{\n    if !(_x in _detonators) exitWith{\n        _hasRequired = false;\n    };\n} count _requiredItems;\n\nprivate _codeSet = false;\nwhile {!_codeSet} do {\n    private _code = str(round (random 9999));\n    _count = 4 - count (toArray _code);\n    while {_count > 0} do {\n        _code = \"0\" + _code;\n        _count = _count - 1;\n    };\n    _codeSet = (count ([_code] call FUNC(getSpeedDialExplosive))) == 0;\n};\nif (isNil QGVAR(CellphoneIEDs)) then {\n    GVAR(CellphoneIEDs) = [];\n};\nprivate _count = GVAR(CellphoneIEDs) pushBack [_explosive,_code,GetNumber(ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ACE_Triggers\" >> \"Cellphone\" >> \"FuseTime\")];\n_count = _count + 1;\npublicVariable QGVAR(CellphoneIEDs);\n\n//display IED number message:\n[format [\"IED %1 code: %2\", _count,_code]] call EFUNC(common,displayTextStructured);\n\nif !(_hasRequired) exitWith {};\n[format [\"IED %1\", _count],_code] call FUNC(addToSpeedDial);\n",
        "functionName": "ace_explosives_fnc_addCellphoneIED"
      },
      {
        "fileName": "fnc_addClacker.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Adds an explosive as a clacker item to the passed unit if the unit has the required item.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Explosive <OBJECT>\n * 2: Magazine classname <STRING>\n * 3: Extra variables <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, _explosive, \"SatchelCharge_Remote_Mag\", [ConfigFile >> \"ACE_Triggers\" >> \"Command\"]] call ACE_Explosives_fnc_addClacker;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_explosive\", \"_magazineClass\"];\nTRACE_3(\"params\",_unit,_explosive,_magazineClass);\n\n// Config is the last item in the list of passed in items.\nprivate _config = (_this select 3) select (count (_this select 3) - 1);\n\nprivate _requiredItems = getArray(_config >> \"requires\");\nprivate _hasRequired = true;\nprivate _detonators = [_unit] call FUNC(getDetonators);\n{\n    if !(_x in _detonators) exitWith{\n        _hasRequired = false;\n    };\n} count _requiredItems;\n\nif !(_hasRequired) exitWith {};\nprivate _config = ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ACE_Triggers\" >> configName _config;\n\nprivate _clacker = _unit getVariable [QGVAR(Clackers), []];\nGVAR(PlacedCount) = GVAR(PlacedCount) + 1;\n\n_clacker pushBack [_explosive, getNumber(_config >> \"FuseTime\"), format [localize LSTRING(DetonateCode),\n    GVAR(PlacedCount)], _magazineClass, configName ((_this select 3) select (count (_this select 3) - 1))];\n\n_unit setVariable [QGVAR(Clackers), _clacker, true];\n\n//display clacker code message:\n[format [localize LSTRING(DetonateCode), GVAR(PlacedCount)]] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_explosives_fnc_addClacker"
      },
      {
        "fileName": "fnc_addDetonateActions.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Opens the UI for explosive detonation selection\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Trigger classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"ACE_M26_Clacker\"] call ACE_Explosives_fnc_addDetonateActions;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_detonator\"];\nTRACE_2(\"params\",_unit,_detonator);\n\nprivate _range = getNumber (ConfigFile >> \"CfgWeapons\" >> _detonator >> QGVAR(Range));\n\nprivate _result = [_unit] call FUNC(getPlacedExplosives);\nprivate _children = [];\nprivate _explosivesList = [];\n{\n    if (!isNull(_x select 0)) then {\n        private _required = getArray (ConfigFile >> \"ACE_Triggers\" >> (_x select 4) >> \"requires\");\n        if (_detonator in _required) then {\n            private _item = ConfigFile >> \"CfgMagazines\" >> (_x select 3);\n\n            _explosivesList pushBack _x;\n\n            _children pushBack\n                [\n                    [\n                        format [\"Explosive_%1\", _forEachIndex],\n                        _x select 2,\n                        getText(_item >> \"picture\"),\n                        {(_this select 2) call FUNC(detonateExplosive);},\n                        {true},\n                        {},\n                        [_unit,_range,_x,_detonator]\n                    ] call EFUNC(interact_menu,createAction),\n                    [],\n                    _unit\n                ];\n        };\n    };\n} forEach _result;\nif (_detonator != \"ACE_DeadManSwitch\") then {\n    // Add action to detonate all explosives tied to the detonator\n    if (count _explosivesList > 0) then {\n        _children pushBack [\n        [\n            \"Explosive_All\",\n            localize LSTRING(DetonateAll),\n            getText(ConfigFile >> \"CfgWeapons\" >> _detonator >> \"picture\"),\n            {(_this select 2) call FUNC(detonateExplosiveAll);},\n            {true},\n            {},\n            [_unit,_range,_explosivesList, _detonator]\n            ] call EFUNC(interact_menu,createAction),\n            [],\n            _unit\n        ];\n    };\n} else {\n    //Add action to detonate all explosives (including the inventory explosive):\n    _children pushBack [\n    [\n    \"Explosive_All_Deadman\",\n    localize LSTRING(DetonateAll),\n    getText(ConfigFile >> \"CfgWeapons\" >> _detonator >> \"picture\"),\n    {[_player] call FUNC(onIncapacitated)},\n    {true}\n    ] call EFUNC(interact_menu,createAction),\n    [],\n    _unit\n    ];\n\n    //Adds actions for the explosives you can connect to the deadman switch.\n    private _connectedInventoryExplosive = _unit getVariable [QGVAR(deadmanInvExplosive), \"\"];\n    if ((_connectedInventoryExplosive != \"\") && {!(_connectedInventoryExplosive in (magazines _unit))}) then {\n        TRACE_1(\"set, but missing in inventory\",_connectedInventoryExplosive);\n        _unit setVariable [QGVAR(deadmanInvExplosive), \"\", true];\n    };\n\n    _connectedInventoryExplosive = _unit getVariable [QGVAR(deadmanInvExplosive), \"\"];\n    if (_connectedInventoryExplosive != \"\") then {\n        //Add the disconect action\n        private _magConfig = configFile >> \"CfgMagazines\" >> _connectedInventoryExplosive;\n        private _name = if ((getText (_magConfig >> \"displayNameShort\")) != \"\") then {\n            getText (_magConfig >> \"displayNameShort\")\n        } else {\n            getText(_magConfig >> \"displayName\")\n        };\n        private _picture = getText (_magConfig >> \"picture\");\n\n        _children pushBack [\n        ([\n        \"Deadman_disconnect\",\n        format [\"%1 %2\", localize \"str_disp_disconnect\", _name],\n        _picture,\n        {\n            params [\"_player\"];\n            TRACE_1(\"clear\",_player);\n            _player setVariable [QGVAR(deadmanInvExplosive), \"\", true];\n        },\n        {true}\n        ] call EFUNC(interact_menu,createAction)), [], _unit];\n\n    } else {\n        //Add all magazines that would work with the deadman switch\n        private _procressedMags = [];\n        {\n            private _mag = _x;\n            if (!(_mag in _procressedMags)) then {\n                _procressedMags pushBack _x;\n                private _magConfig = configFile >> \"CfgMagazines\" >> _mag;\n                private _supportedTriggers = getArray (_magConfig >> \"ACE_Triggers\" >> \"SupportedTriggers\");\n                if (({_x == \"DeadmanSwitch\"} count _supportedTriggers) == 1) then { //case insensitive search\n                    private _name = if ((getText (_magConfig >> \"displayNameShort\")) != \"\") then {\n                        getText (_magConfig >> \"displayNameShort\")\n                    } else {\n                        getText(_magConfig >> \"displayName\")\n                    };\n                    private _picture = getText (_magConfig >> \"picture\");\n\n                    _children pushBack [\n                    ([\n                    format [\"Deadman_exp_%1\", _mag],\n                    format [localize LSTRING(connectInventoryExplosiveToDeadman), _name],\n                    _picture,\n                    {\n                        params [\"_player\", \"\", \"_mag\"];\n                        TRACE_2(\"set new\",_player,_mag);\n                        _player setVariable [QGVAR(deadmanInvExplosive), _mag, true];\n                    },\n                    {(_this select 2) in (magazines _player)},\n                    {},\n                    (_mag)\n                    ] call EFUNC(interact_menu,createAction)), [], _unit];\n                };\n            };\n        } forEach (magazines _unit);\n    };\n};\n\n_children\n",
        "functionName": "ace_explosives_fnc_addDetonateActions"
      },
      {
        "fileName": "fnc_addDetonateHandler.sqf",
        "content": "/*\n * Author: PabstMirror\n * Add a explosive detonation handler.\n * Should be called on all machines.\n * Code needs to return BOOL: true(allowed) / false(blocked)\n * See https://ace3mod.com/wiki/framework/explosives-framework.html for an example.\n *\n * Arguments:\n * 0: Code <CODE>\n *  - Passed [Unit<OBJECT>, MaxRange <NUMBER>, Explosive <OBJECT>, FuzeTime <NUMBER>, TriggerItem <STRING>]\n *\n * Return Value:\n * None\n *\n * Example:\n * [{false}] call ace_explosives_fnc_addDetonateHandler;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_code\", {true}, [{}]]];\n\nGVAR(detonationHandlers) pushBack _code;\n",
        "functionName": "ace_explosives_fnc_addDetonateHandler"
      },
      {
        "fileName": "fnc_addExplosiveActions.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet and CAA-Picard\n * Adds sub actions for all explosive magazines (from insertChildren)\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Actions <ARRAY>\n *\n * Example:\n * [bob] call ace_explosives_fnc_addExplosiveActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nprivate _mags = magazines _unit;\nprivate _list = [];\nprivate _itemCount = [];\n{\n    private _item = ConfigFile >> \"CfgMagazines\" >> _x;\n    if (getNumber(_item >> QGVAR(Placeable)) == 1) then {\n        private _index = _list find _item;\n        if (_index != -1) then {\n            _itemCount set [_index, (_itemCount select _index) + 1];\n        } else {\n            _list pushBack _item;\n            _itemCount pushBack 1;\n        };\n    };\n} forEach _mags;\n\nprivate _children = [];\n\n{\n    private _name = getText (_x >> \"displayNameShort\");\n    if (_name isEqualTo \"\") then {\n        _name = getText (_x >> \"displayName\");\n    };\n\n    _children pushBack\n        [\n            [\n                format [\"Explosive_%1\", _forEachIndex],\n                format [_name + \" (%1)\", _itemCount select _forEachIndex],\n                getText(_x >> \"picture\"),\n                {[{_this call FUNC(setupExplosive)}, _this] call CBA_fnc_execNextFrame},\n                {true},\n                {},\n                (configName _x)\n            ] call EFUNC(interact_menu,createAction),\n            [],\n            _unit\n        ];\n} forEach _list;\n\n_children\n",
        "functionName": "ace_explosives_fnc_addExplosiveActions"
      },
      {
        "fileName": "fnc_addToSpeedDial.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Sets the speed dial for the UI.\n *\n * Arguments:\n * 0: Name of speed dial <STRING>\n * 1: Code to add to speed dial <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"My Speed Dial\",\"2131\"] call ACE_explosives_fnc_addToSpeedDial;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_name\", \"_code\"];\nTRACE_2(\"params\",_name,_code);\n\nprivate _speedDial = ace_player getVariable [QGVAR(SpeedDial), []];\nprivate _found = false;\n\nif ((_code) == \"\") exitWith {\n    [_name] call FUNC(removeFromSpeedDial);\n};\n{\n    if ((_x select 0) == _name) exitWith {\n        _speedDial set [_forEachIndex, _this];\n        _found = true;\n    };\n} forEach _speedDial;\nif (!_found) then {\n    _speedDial pushBack _this;\n};\n\nace_player setVariable [QGVAR(SpeedDial), _speedDial];\n",
        "functionName": "ace_explosives_fnc_addToSpeedDial"
      },
      {
        "fileName": "fnc_addTransmitterActions.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Opens the UI for selecting the transmitter\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ACE_Explosives_fnc_addTransmitterActions;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nprivate _detonators = [_unit] call FUNC(getDetonators);\nprivate _children = [];\n{\n    private _config = ConfigFile >> \"CfgWeapons\" >> _x;\n    _children pushBack\n        [\n            [\n                format [\"Trigger_%1\", _forEachIndex],\n                getText(_config >> \"displayName\"),\n                getText(_config >> \"picture\"),\n                {},\n                {true},\n                {(_this select 2) call FUNC(addDetonateActions);},\n                [_unit,_x]\n            ] call EFUNC(interact_menu,createAction),\n            [],\n            _unit\n        ];\n} forEach _detonators;\n\n_children\n",
        "functionName": "ace_explosives_fnc_addTransmitterActions"
      },
      {
        "fileName": "fnc_addTriggerActions.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Opens the UI for explosive trigger selection\n *\n * Arguments:\n * 0: Explosive Magazine <STRING>\n * 1: Explosive <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [lbData [8866, lbCurSel 8866], _explosive] call ACE_Explosives_fnc_addTriggerActions;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_magazine\", \"_explosive\"];\nTRACE_2(\"params\",_magazine,_explosive);\n\nprivate _isAttached = !isNull (attachedTo _explosive);\nprivate _detonators = [ACE_player] call FUNC(getDetonators);\nprivate _triggerTypes = [_magazine] call FUNC(triggerType);\nprivate _magTriggers = ConfigFile >> \"CfgMagazines\" >> _magazine >> \"ACE_Triggers\";\nprivate _children = [];\n{\n    private _required = getArray (_x >> \"requires\");\n    private _hasRequiredItems = true;\n    {\n        if !(_x in _detonators) exitWith {\n            _hasRequiredItems = false;\n        };\n    } count _required;\n    if (_hasRequiredItems && {(!_isAttached) || {(getNumber (_x >> \"isAttachable\")) == 1}}) then {\n        _children pushBack\n            [\n                [\n                    format [\"Trigger_%1\", _forEachIndex],\n                    if(isText(_magTriggers >> configName _x >> \"displayName\"))then\n                        {getText(_magTriggers >> configName _x >> \"displayName\")}\n                        else{getText(_x >> \"displayName\")},\n                    if(isText(_magTriggers >> configName _x >> \"picture\"))then\n                        {getText(_magTriggers >> configName _x >> \"picture\")}\n                        else{getText(_x >> \"picture\")},\n                    {(_this select 2) call FUNC(selectTrigger);},\n                    {true},\n                    {},\n                    [_explosive, _magazine, configName _x]\n                ] call EFUNC(interact_menu,createAction),\n                [],\n                ACE_Player\n            ];\n    };\n} forEach _triggerTypes;\n\n_children\n",
        "functionName": "ace_explosives_fnc_addTriggerActions"
      },
      {
        "fileName": "fnc_cancelPlacement.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Cancels explosives placement.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Key <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, 1] call ace_explosives_fnc_cancelPlacement\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_key\"];\n\nif (_key != 1 || {!GVAR(pfeh_running)}) exitWith {};\n\nGVAR(placeAction) = PLACE_CANCEL;\n",
        "functionName": "ace_explosives_fnc_cancelPlacement"
      },
      {
        "fileName": "fnc_canDefuse.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Whether a unit can perform the defuse action\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 0: Target (ACE_DefuseObject) <OBJECT>\n *\n * Return Value:\n * Able to defuse <BOOL>\n *\n * Example:\n * if ([player] call ACE_Explosives_fnc_canDefuse) then {hint \"Can Defuse\";};\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\nprivate _explosive = _target getVariable [QGVAR(Explosive), objNull];\nif (isNull _explosive) exitWith {\n    deleteVehicle _target;\n    false\n};\nif (vehicle _unit != _unit || {!(\"ACE_DefusalKit\" in (items _unit))}) exitWith {false};\n\nif (GVAR(RequireSpecialist) && {!([_unit] call EFUNC(Common,isEOD))}) exitWith {false};\n\n//Handle the naval mines (which doens't get turned into items when defused):\nif ((_explosive isKindOf \"UnderwaterMine_Range_Ammo\") && {!mineActive _explosive}) exitWith {false};\n\ntrue\n",
        "functionName": "ace_explosives_fnc_canDefuse"
      },
      {
        "fileName": "fnc_canDetonate.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Whether the unit is able to detonate explosives\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Able to detonate <BOOL>\n *\n * Example:\n * if ([player] call ACE_Explosives_fnc_canDetonate) then { hint \"Can Detonate\"; };\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n([_unit] call FUNC(hasPlacedExplosives)) && {(count ([_unit] call FUNC(getDetonators))) > 0}\n",
        "functionName": "ace_explosives_fnc_canDetonate"
      },
      {
        "fileName": "fnc_connectExplosive.sqf",
        "content": "/*\n * Author: VKing\n * Add preplaced explosives to a unit's detonator.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Explosive object <OBJECT>\n * 2: Detonator type <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, claymore1, \"ACE_Clacker\"] call ace_explosives_fnc_connectExplosive\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_object\", \"_detonator\"];\nTRACE_3(\"Params\",_unit,_object,_detonator);\n\nprivate _detonatorConfig = getText (configFile >> \"CfgWeapons\" >> _detonator >> QGVAR(triggerType));\n\nprivate _magazineClass = getText (configFile >> \"CfgAmmo\" >> typeOf _object >> QGVAR(magazine));\n\n[_unit, _object, _magazineClass, [configFile >> \"ACE_Triggers\" >> _detonatorConfig]] call FUNC(addClacker);\n",
        "functionName": "ace_explosives_fnc_connectExplosive"
      },
      {
        "fileName": "fnc_defuseExplosive.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Causes the unit to defuse the passed explosive.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Explosive <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, ACE_Interaction_Target] call ACE_Explosives_fnc_defuseExplosive;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_explosive\"];\nTRACE_2(\"params\",_unit,_explosive);\n\nif (GVAR(ExplodeOnDefuse) && {(random 1.0) < (getNumber (ConfigFile >> \"CfgAmmo\" >> typeOf _explosive >> QGVAR(explodeOnDefuseChance)))}) exitWith {\n    TRACE_1(\"exploding on defuse\",_explosive);\n    [_unit, -1, [_explosive, 1], \"#ExplodeOnDefuse\"] call FUNC(detonateExplosive);\n    [QGVAR(explodeOnDefuse), [_explosive, _unit]] call CBA_fnc_globalEvent;\n};\n\n_unit action [\"Deactivate\", _unit, _explosive];\n[QGVAR(defuse), [_explosive, _unit]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_explosives_fnc_defuseExplosive"
      },
      {
        "fileName": "fnc_detonateExplosive.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Causes the unit to detonate the passed explosive.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Max range (-1 to ignore) <NUMBER>\n * 2: Explosive <ARRAY>\n *     0: Explosive <OBJECT>\n *     1: Fuse time <NUMBER>\n * 3: Trigger Item Classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, 100, [Explosive, 1], \"ACE_Clacker\"] call ACE_Explosives_fnc_detonateExplosive; // has to be within range\n * [player, -1, [Explosive, 1], \"ACE_Cellphone\"] call ACE_Explosives_fnc_detonateExplosive; // range ignored.\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_range\", \"_item\", [\"_triggerClassname\", \"#unknown\", [\"\"]]];\nTRACE_4(\"detonateExplosive\",_unit,_range,_item,_triggerClassname);\n\nprivate _ignoreRange = (_range == -1);\nif (!_ignoreRange && {(_unit distance (_item select 0)) > _range}) exitWith {TRACE_1(\"out of range\",_range); false};\n\nprivate _result = true;\n{\n    // Pass [Unit<OBJECT>, MaxRange <NUMBER>, Explosive <OBJECT>, FuzeTime <NUMBER>, TriggerItem <STRING>]\n    private _handlerResult = [_unit, _range, _item select 0, _item select 1, _triggerClassname] call _x;\n    if (_handlerResult isEqualTo false) then {TRACE_1(\"Handler Failed\",_forEachIndex); _result = false};\n} forEach GVAR(detonationHandlers);\nif (!_result) exitWith {false};\n\nif (getNumber (ConfigFile >> \"CfgAmmo\" >> typeOf (_item select 0) >> \"TriggerWhenDestroyed\") == 0) then {\n    private _previousExp = _item select 0;\n    private _exp = getText (ConfigFile >> \"CfgAmmo\" >> typeOf (_previousExp) >> QGVAR(Explosive));\n    if (_exp != \"\") then {\n        _exp = createVehicle [_exp, [0,0,15001], [], 0, \"NONE\"];\n        _exp setDir (getDir _previousExp);\n        _item set [0, _exp];\n        private _pos = getPosASL _previousExp;\n        deleteVehicle _previousExp;\n        _exp setPosASL _pos;\n    };\n};\n\nif (isNull (_item select 0)) then {\n    WARNING_1(\"Explosive is null [%1]\",_this);\n};\nif ((getNumber (configFile >> \"CfgAmmo\" >> (typeOf (_item select 0)) >> \"triggerWhenDestroyed\")) != 1) then {\n    WARNING_1(\"Explosive is not triggerWhenDestroyed [%1]\",typeOf (_item select 0));\n};\n\n[QGVAR(detonate), [_unit, _item select 0, _item select 1]] call CBA_fnc_serverEvent;\n\n_result\n",
        "functionName": "ace_explosives_fnc_detonateExplosive"
      },
      {
        "fileName": "fnc_detonateExplosiveAll.sqf",
        "content": "/*\n * Author: VKing\n * Causes the unit to detonate all passed explosives.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Range (-1 to ignore) <NUMBER>\n * 2: Explosives to detonate <ARRAY>\n *     0: Explosive <OBJECT>\n *     1: Fuse time <NUMBER>\n * 3: Trigger Item Classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, -1, [[c4,0.5]], \"ACE_Clacker\"] call ACE_Explosives_fnc_detonateExplosiveAll;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_range\", \"_explosivesList\", \"_triggerClassname\"];\nTRACE_4(\"Params\",_unit,_range,_explosivesList,_triggerClassname);\n\n{\n    [_unit,_range,_x,_triggerClassname] call FUNC(detonateExplosive);\n} forEach _explosivesList;\n",
        "functionName": "ace_explosives_fnc_detonateExplosiveAll"
      },
      {
        "fileName": "fnc_dialingPhone.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Performs the dial tones and detonation of explosive.\n *\n * Arguments:\n * 0: Unit to do dialing <OBJECT>\n * 1: Index <NUMBER>\n * 2: Dialing points <ARRAY>\n * 3: IED code <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [FUNC(dialingPhone), 0.25, [_unit,4,_arr,_code]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_pfID\"];\n_args params [\"_unit\", \"_i\", \"_arr\", \"_code\"];\n\nif ((_i mod 4) == 0) then {\n    playSound3D [QUOTE(PATHTO_R(Data\\Audio\\DialTone.wss)), objNull, false, (_unit modelToWorldVisual [0,0.2,2]), 15,1,2.5];\n};\nctrlSetText [1400,format[\"Calling%1\",_arr select (_i - 4)]];\n\nprivate _explosive = [_code] call FUNC(getSpeedDialExplosive);\n\nif (_i >= (count _arr + 2)) then {\n    [_pfID] call CALLSTACK(CBA_fnc_removePerFrameHandler);\n    if ((count _explosive) > 0) then {\n        [_unit, -1, [_explosive select 0, _explosive select 2], \"ACE_Cellphone\"] call FUNC(detonateExplosive);\n    };\n    _unit setVariable [QGVAR(Dialing), false, true];\n    if (_unit == ace_player) then {\n        ctrlSetText [1400,\"Call Ended!\"];\n    };\n};\nif (_i == (count _arr)) then {\n    if ((count _explosive) > 0) then {\n        playSound3D [QUOTE(PATHTO_R(Data\\Audio\\Cellphone_Ring.wss)),objNull, false, getPosASL (_explosive select 0),3.16228,1,75];\n    };\n};\n_args set [1, _i + 1];\n",
        "functionName": "ace_explosives_fnc_dialingPhone"
      },
      {
        "fileName": "fnc_dialPhone.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Dials the number passed and detonates the explosive.\n *\n * Arguments:\n * 0: Unit to do dialing <OBJECT>\n * 1: Code to dial <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ace_player,\"2131\"] call ACE_explosives_fnc_dialPhone;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_code\"];\nTRACE_2(\"params\",_unit,_code);\n\nif (_unit getVariable [QGVAR(Dialing),false]) exitWith {};\nif !(alive _unit) exitWith {};\n_unit setVariable [QGVAR(Dialing), true, true];\n\nprivate _ran = (ceil(random 8)) + 1;\nprivate _arr = [];\nfor \"_i\" from 1 to _ran do {\n    _arr = _arr + ['.','..','...',''];\n};\nif (_unit == ace_player) then {\n    ctrlSetText [1400,\"Calling\"];\n    [FUNC(dialingPhone), 0.25, [_unit,4,_arr,_code]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\n} else {\n    private _explosive = [_code] call FUNC(getSpeedDialExplosive);\n    if ((count _explosive) > 0) then {\n        [{\n            playSound3D [QUOTE(PATHTO_R(Data\\Audio\\Cellphone_Ring.wss)),objNull, false, getPosASL (_this select 1),3.16228,1,75];\n            (_this select 0) setVariable [QGVAR(Dialing), false, true];\n        }, [_unit,_explosive select 0], 0.25 * (count _arr - 4)] call CBA_fnc_waitAndExecute;\n        [_explosive select 0,(0.25 * (count _arr - 1)) + (_explosive select 2), \"ACE_Cellphone\"] call FUNC(startTimer);\n    };\n};\n",
        "functionName": "ace_explosives_fnc_dialPhone"
      },
      {
        "fileName": "fnc_getDetonators.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Returns all the detonators of the unit\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Configs of all detonators <ARRAY>\n *\n * Example:\n * _detonators = [player] call ACE_Explosives_fnc_getDetonators;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n// IGNORE_PRIVATE_WARNING(_detonators);\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nprivate _result = (items _unit) select {getNumber (ConfigFile >> \"CfgWeapons\" >> _x >> QGVAR(Detonator)) == 1};\n_result = _result arrayIntersect _result;\n\n_result\n",
        "functionName": "ace_explosives_fnc_getDetonators"
      },
      {
        "fileName": "fnc_getPlacedExplosives.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Gets all placed explosives by unit, optionally filtered by specific trigger type.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Trigger classname - filter (optional) <STRING>\n *\n * Return Value:\n * Explosives <ARRAY>\n *\n * Example:\n * _allExplosives = [player] call ACE_Explosives_fnc_getPlacedExplosives;\n * _deadmanExplosives = [player, \"DeadManSwitch\"] call ACE_Explosives_fnc_getPlacedExplosives;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n// IGNORE_PRIVATE_WARNING(_allExplosives,_deadmanExplosives);\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nprivate _filter = nil;\nif (count _this > 1) then {\n    _filter = ConfigFile >> \"ACE_Triggers\" >> (_this select 1);\n};\nprivate _clackerList = [];\nprivate _adjustedList = false;\n_clackerList = _unit getVariable [QGVAR(Clackers), []];\nprivate _list = [];\n{\n    if (isNull (_x select 0)) then {\n        _clackerList set [_forEachIndex, \"X\"];\n        _adjustedList = true;\n    } else {\n        if (isNil \"_filter\" || {(ConfigFile >> \"ACE_Triggers\" >> (_x select 4)) == _filter}) then {\n            _list pushBack _x;\n        };\n    };\n} forEach _clackerList;\nif (_adjustedList) then {\n    _clackerList = _clackerList - [\"X\"];\n    if (count _clackerList == 0) then {\n        _unit setVariable [QGVAR(Clackers), nil, true];\n    } else {\n        _unit setVariable [QGVAR(Clackers), _clackerList, true];\n    };\n};\n\n_list\n",
        "functionName": "ace_explosives_fnc_getPlacedExplosives"
      },
      {
        "fileName": "fnc_getSpeedDialExplosive.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Gets the explosive from the speed dial entry.\n *\n * Arguments:\n * 0: Speed dial entry <STRING>\n *\n * Return Value:\n * Associated explosive (or ObjNull) <OBJECT>\n *\n * Example:\n * [\"2113\"] call ace_explosives_fnc_getSpeedDialExplosive;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_code\"];\nTRACE_1(\"params\",_code);\n\nif (isNil QGVAR(CellphoneIEDs)) exitWith {[]};\nprivate _explosive = [];\n{\n    if ((_x select 1) == _code) exitWith {\n        _explosive = _x;\n    };\n    false\n} count GVAR(CellphoneIEDs);\n\n_explosive\n",
        "functionName": "ace_explosives_fnc_getSpeedDialExplosive"
      },
      {
        "fileName": "fnc_handleScrollWheel.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Handles rotating of Explosives\n *\n * Arguments:\n * Amount scrolled <NUMBER>\n *\n * Return Value:\n * Handled <BOOL>\n *\n * Example:\n * 1.2 call ACE_Explosives_fnc_HandleScrollWheel;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!GVAR(pfeh_running)) exitWith {false};\n\nGVAR(TweakedAngle) = ((GVAR(TweakedAngle) + 7.2 * _this) + 360) % 360;\n\ntrue\n",
        "functionName": "ace_explosives_fnc_handleScrollWheel"
      },
      {
        "fileName": "fnc_hasExplosives.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Whether the passed unit has any explosives on them.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * The unit has explosives <BOOL>\n *\n * Example:\n * hasExplosives = [player] call ACE_Explosives_fnc_hasExplosives;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nprivate _result = false;\nprivate _magazines = magazines _unit;\n{\n    if (getNumber (ConfigFile >> \"CfgMagazines\" >> _x >> QGVAR(Placeable)) == 1) exitWith {\n        _result = true;\n    };\n} count _magazines;\n\n_result\n",
        "functionName": "ace_explosives_fnc_hasExplosives"
      },
      {
        "fileName": "fnc_hasPlacedExplosives.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Whether the passed unit has placed any explosives or has a clacker that was used when explosives were placed.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Configs of all detonators <ARRAY>\n *\n * Example:\n * _hasPlacedExplosives = [player] call ACE_Explosives_fnc_hasPlacedExplosives;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n// IGNORE_PRIVATE_WARNING(_hasPlacedExplosives);\n\n(count (_this call FUNC(getPlacedExplosives)) > 0)\n",
        "functionName": "ace_explosives_fnc_hasPlacedExplosives"
      },
      {
        "fileName": "fnc_interactEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * When interact_menu starts rendering (from \"interact_keyDown\" event)\n * Add defuse helpers to all nearby mines\n *\n * Arguments:\n * Interact Menu Type (0 - world, 1 - self) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [0] call ace_explosives_fnc_interactEH\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_interactionType\"];\nTRACE_1(\"params\",_interactionType);\n\n//Ignore self-interaction menu\nif (_interactionType != 0) exitWith {};\n//Ignore while mounted:\nif ((vehicle ACE_player) != ACE_player) exitWith {};\n//Ignore if we don't have defuse kit\nif (!(\"ACE_DefusalKit\" in (items ACE_player))) exitWith {};\n\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_setPosition\", \"_addedDefuseHelpers\", \"_minesHelped\"];\n\n    if (!EGVAR(interact_menu,keyDown)) then {\n        TRACE_1(\"Cleaning Defuse Helpers\",(count _addedDefuseHelpers));\n        {deleteVehicle _x;} forEach _addedDefuseHelpers;\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    } else {\n        // Prevent Rare Error when ending mission with interact key down:\n        if (isNull ace_player) exitWith {};\n\n        //If player moved >5 meters from last pos, then rescan\n        if (((getPosASL ace_player) distance _setPosition) > 5) then {\n            {\n                if (((_x distance ACE_player) < 15) && {!(_x in _minesHelped)} && {(getModelInfo _x) select 0 != \"empty.p3d\"}) then {\n\n                    private _config = configFile >> \"CfgAmmo\" >> typeOf _x;\n                    private _size = getNumber (_config >> QGVAR(size));\n                    TRACE_3(\"Making Defuse Helper\",(_x),(typeOf _x),(_size == 1));\n                    private _defuseHelper = objNull;\n                    if (_size == 1) then {\n                        _defuseHelper = \"ACE_DefuseObject_Large\" createVehicleLocal (getPos _x);\n                    } else {\n                        _defuseHelper = \"ACE_DefuseObject\" createVehicleLocal (getPos _x);\n                    };\n\n                    private _defuseObjectPosition = getArray (_config >> QGVAR(defuseObjectPosition));\n                    if (_defuseObjectPosition isEqualTo []) then {\n                        _defuseObjectPosition = [0,0,0];\n                    };\n\n                    TRACE_1(\"DefuseObjectPosition\",(_defuseObjectPosition));\n\n                    _defuseHelper attachTo [_x, _defuseObjectPosition];\n                    _defuseHelper setVariable [QGVAR(Explosive),_x];\n                    _addedDefuseHelpers pushBack _defuseHelper;\n                    _minesHelped pushBack _x;\n                };\n            } forEach allMines;\n            _args set [0, (getPosASL ace_player)];\n        };\n    };\n}, 0.5, [((getPosASL ace_player) vectorAdd [-100,0,0]), [], []]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_explosives_fnc_interactEH"
      },
      {
        "fileName": "fnc_module.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Initialises the explosives module\n *\n * Arguments:\n * Module things.\n *\n * Return Value:\n * None\n *\n * Example:\n * Called By BIS.\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(RequireSpecialist), \"RequireSpecialist\"] call EFUNC(Common,readSettingFromModule);\n[_logic, QGVAR(PunishNonSpecialists),\"PunishNonSpecialists\"] call EFUNC(Common,readSettingFromModule);\n[_logic, QGVAR(ExplodeOnDefuse),\"ExplodeOnDefuse\"] call EFUNC(Common,readSettingFromModule);\n\nINFO(\"Explosive Module Initialized.\");\n",
        "functionName": "ace_explosives_fnc_module"
      },
      {
        "fileName": "fnc_onIncapacitated.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Detonates all attached deadman's switched triggered explosives.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * Handled by CBA\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//NOTE: Extended_Killed_EventHandlers runs only where _unit is local\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\n// Exit if no item:\nif (({_x == \"ACE_DeadManSwitch\"} count (items _unit)) == 0) exitWith {};\n\nprivate _range = getNumber (configFile >> \"CfgWeapons\" >> \"ACE_DeadManSwitch\" >> QGVAR(range));\nprivate _deadman = [_unit, \"DeadManSwitch\"] call FUNC(getPlacedExplosives);\nTRACE_2(\"placed\",_deadman,_range);\n{\n    [_unit, _range, _x, \"ACE_DeadManSwitch\"] call FUNC(detonateExplosive);\n} forEach _deadman;\n\n//Handle deadman connected to explosive in inventory\nprivate _connectedInventoryExplosive = _unit getVariable [QGVAR(deadmanInvExplosive), \"\"];\nif (_connectedInventoryExplosive != \"\") then {\n    if (!(_connectedInventoryExplosive in (magazines _unit))) exitWith {};\n\n    //Remove mag and reset variable\n    _unit removeMagazine _connectedInventoryExplosive;\n    _unit setVariable [QGVAR(deadmanInvExplosive), \"\", true];\n\n    private _ammo = getText (configFile >> \"CfgMagazines\" >> _connectedInventoryExplosive >> \"ammo\");\n    TRACE_2(\"deadman inventory\",_connectedInventoryExplosive,_ammo);\n    private _magazineTrigger = configFile >> \"CfgMagazines\" >> _connectedInventoryExplosive >> \"ACE_Triggers\" >> \"DeadmanSwitch\";\n    if (isText (_magazineTrigger >> \"ammo\")) then {\n        _ammo = getText (_magazineTrigger >> \"ammo\");\n    };\n\n    private _explosive = createVehicle [_ammo, (getPos _unit), [], 0, \"NONE\"];\n    _explosive setPosASL (getPosASL _unit);\n    [_unit, -1, [_explosive, 0.5], \"ACE_DeadManSwitch\"] call FUNC(detonateExplosive); //Explode, ignoring range, with a 0.5 second delay\n};\n",
        "functionName": "ace_explosives_fnc_onIncapacitated"
      },
      {
        "fileName": "fnc_onInventoryChanged.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * When a take/put event handler fires and a detonator is changed hands.\n * Then take \"attached\" explosives.\n *\n * Arguments:\n * 0: Receiver <OBJECT>\n * 1: Giver <OBJECT>\n * 2: Item <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * Handled by CBA\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_receiver\", \"_giver\", \"_item\"];\nTRACE_3(\"params\",_receiver,_giver,_item);\n\nif ((_receiver != ace_player) && {_giver != ace_player}) exitWith {};\n\nprivate _config = ConfigFile >> \"CfgWeapons\" >> _item;\nif (isClass _config && {getNumber(_config >> QGVAR(Detonator)) == 1}) then {\n    private _clackerItems = _giver getVariable [QGVAR(Clackers), []];\n    _receiver setVariable [QGVAR(Clackers), (_receiver getVariable [QGVAR(Clackers), []]) + _clackerItems, true];\n\n    private _detonators = [_giver] call FUNC(getDetonators);\n    if (count _detonators == 0) then {\n        _giver setVariable [QGVAR(Clackers), nil, true];\n    };\n};\n",
        "functionName": "ace_explosives_fnc_onInventoryChanged"
      },
      {
        "fileName": "fnc_openTimerSetUI.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Opens the UI for timer setting of an explosive\n *\n * Arguments:\n * 0: Explosive <OBJECT>\n * 1: Magazine <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_explosive, \"SatchelCharge_Remote_Mag\"] call ACE_Explosives_fnc_openTimerSetUI;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_explosive\", \"_mag\"];\nTRACE_2(\"params\",_explosive,_mag);\n\ncreateDialog \"RscACE_SelectTimeUI\";\nsliderSetRange [8845, 5, 900]; // 5seconds - 15minutes\nsliderSetPosition [8845, 30];\n\nGVAR(explosive) = _explosive;\n\nDFUNC(SetTimer) = {\n    [\n        ACE_player,\n        getPosATL GVAR(explosive),\n        GVAR(explosive) getVariable QGVAR(Direction),\n        GVAR(explosive) getVariable QGVAR(class),\n        \"Timer\",\n        [floor sliderPosition 8845],\n        GVAR(explosive)\n    ] call FUNC(placeExplosive);\n    closeDialog 0;\n};\n\nbuttonSetAction [8860, QUOTE(call DFUNC(SetTimer);)];\nbuttonSetAction [8855, QUOTE(closeDialog 0;)];\n\nctrlSetText [8870, format[localize LSTRING(TimerMenu),0, 30]];\n",
        "functionName": "ace_explosives_fnc_openTimerSetUI"
      },
      {
        "fileName": "fnc_placeExplosive.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Places an explosive at the requested position.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Position to place explosive <POSITION>\n * 2: Rotation <NUMBER>\n * 3: Magazine class <STRING>\n * 4: Config of trigger <STRING>\n * 5: Variables required for the trigger type <ARRAY>\n * 6: Explosive placeholder <OBJECT> (default: objNull)\n *\n * Return Value:\n * Placed explosive <OBJECT>\n *\n * Example:\n * _explosive = [player, player modelToWorldVisual [0,0.5, 0.1], 134, \"SatchelCharge_Remote_Mag\", \"Command\", []] call ace_explosives_fnc_placeExplosive\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_pos\", \"_dir\", \"_magazineClass\", \"_triggerConfig\", \"_triggerSpecificVars\", [\"_setupPlaceholderObject\", objNull]];\nTRACE_7(\"params\",_unit,_pos,_dir,_magazineClass,_triggerConfig,_triggerSpecificVars,_setupPlaceholderObject);\n\n[_unit, \"PutDown\"] call EFUNC(common,doGesture);\n\nprivate _attachedTo = objNull;\nif (!isNull _setupPlaceholderObject) then {\n    _attachedTo = attachedTo _setupPlaceholderObject;\n    deleteVehicle _setupPlaceholderObject;\n};\n\nif (isNil \"_triggerConfig\") exitWith {\n    ERROR_1(\"Config not passed to PlaceExplosive: %1\",_this);\n    objNull\n};\n\nprivate _magazineTrigger = ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ACE_Triggers\" >> _triggerConfig;\n_triggerConfig = ConfigFile >> \"ACE_Triggers\" >> _triggerConfig;\n\nif (isNil \"_triggerConfig\") exitWith {\n    ERROR_1(\"Config not found in PlaceExplosive: %1\",_this);\n    objNull\n};\n\nprivate _ammo = getText(ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ammo\");\nif (isText(_magazineTrigger >> \"ammo\")) then {\n    _ammo = getText (_magazineTrigger >> \"ammo\");\n};\n_triggerSpecificVars pushBack _triggerConfig;\n\n//Dig the explosive down into the ground (usually on \"pressurePlate\")\nif (isNumber (_magazineTrigger >> \"digDistance\")) then {\n    private _digDistance = getNumber (_magazineTrigger >> \"digDistance\");\n\n    //Get Surface Type:\n    private _canDigDown = true;\n    private _surfaceType = surfaceType _pos;\n    if ((_surfaceType select [0,1]) == \"#\") then {_surfaceType = _surfaceType select [1, 99];};\n    if ((_surfaceType != \"\") || {isClass (configFile >> \"CfgSurfaces\" >> _surfaceType >> \"soundEnviron\")}) then {\n        private _soundEnviron = getText (configFile >> \"CfgSurfaces\" >> _surfaceType >> \"soundEnviron\");\n        TRACE_2(\"Dig Down Surface\",_surfaceType,_soundEnviron);\n        _canDigDown = !(_soundEnviron in [\"road\", \"tarmac\", \"concrete\", \"concrete_int\", \"int_concrete\", \"concrete_ext\"]);\n    };\n    //Don't dig down if pos ATL is high (in a building or A2 road)\n    if (_canDigDown && {(_pos select 2) < 0.1}) then {\n        TRACE_2(\"Can Dig Down\",_digDistance,_pos);\n        _pos = _pos vectorAdd [0,0, (-1 * _digDistance)];\n    } else {\n        TRACE_2(\"Can NOT Dig Down\",_digDistance,_pos);\n    };\n};\n\nprivate _explosive = createVehicle [_ammo, _pos, [], 0, \"NONE\"];\n_explosive setPosATL _pos;\n\nif (!isNull _attachedTo) then {\n    TRACE_1(\"Attaching Live Explosive\",_attachedTo);\n    _explosive attachTo [_attachedTo];\n};\n\n//If trigger has \"onPlace\" and it returns true, just exitWith the explosive\nif (isText(_triggerConfig >> \"onPlace\") && {[_unit,_explosive,_magazineClass,_triggerSpecificVars] call compile (getText (_triggerConfig >> \"onPlace\"))}) exitWith {\n    TRACE_1(\"onPlace returns true\",_explosive);\n    _explosive\n};\n\n//TODO: placing explosives on hills looks funny\n\nprivate _pitch = getNumber (_magazineTrigger >> \"pitch\");\n\n//Globaly set the position and angle:\n[QGVAR(place), [_explosive, _dir, _pitch, _unit]] call CBA_fnc_globalEvent;\n\n_explosive\n",
        "functionName": "ace_explosives_fnc_placeExplosive"
      },
      {
        "fileName": "fnc_removeFromSpeedDial.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Removes the specified speed dial from unit's speed dial.\n *\n * Arguments:\n * 0: Speed dial name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"IED 1\"] call ACE_explosives_fnc_removeFromSpeedDial;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nprivate _speedDial = ace_player getVariable [QGVAR(SpeedDial), []];\nif (count _speedDial == 0) exitWith {};\n{\n    if ((_x select 0) == (_this select 0)) exitWith {\n        _speedDial set [_forEachIndex, \"x\"];\n        _speedDial = _speedDial - [\"x\"];\n        ace_player setVariable [QGVAR(SpeedDial),_speedDial];\n    };\n} forEach _speedDial;\n",
        "functionName": "ace_explosives_fnc_removeFromSpeedDial"
      },
      {
        "fileName": "fnc_scriptedExplosive.sqf",
        "content": "/*\n * Author: VKing\n * Detonate explosives via script, for use in triggers or mission scripts to detonate editor-placed explosives.\n *\n * Arguments:\n * 0: Explosives objects to detonate <OBJECT or ARRAY>\n * 1: Fuze delay (for each explosive; use negative number for random time up to value) <NUMBER> (default: 0)\n * 2: Trigger Item Classname <STRING> (default: \"#scripted\")\n *\n * Return Value:\n * None\n *\n * Example:\n * [[charge1, charge2, charge3], -1] call ace_explosives_fnc_scriptedExplosive\n * [[claymore1, claymore2]] call ace_explosives_fnc_scriptedExplosive\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_explosiveArr\", [], [[], objNull]], [\"_fuzeTime\", 0, [0]], [\"_triggerClassname\", \"#scripted\", [\"\"]]];\n\nif (_explosiveArr isEqualType objNull) then {\n    _explosiveArr = [_explosiveArr];\n};\n\n{\n    private _detTime = if (_fuzeTime < 0) then {random abs _fuzeTime} else {_fuzeTime};\n    [objNull, -1, [_x, _detTime], _triggerClassname] call FUNC(detonateExplosive);\n} forEach _explosiveArr;\n",
        "functionName": "ace_explosives_fnc_scriptedExplosive"
      },
      {
        "fileName": "fnc_selectTrigger.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Selects a trigger for an explosive.\n *\n * Arguments:\n * 0: Explosive <OBJECT>\n * 1: Magazine <STRING>\n * 2: Trigger mode <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_explosive, \"SatchelCharge_Remote_Mag\",\"Timer\"] call ACE_Explosives_fnc_selectTrigger;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_explosive\", \"_magazine\", \"_trigger\"];\nTRACE_3(\"params\",_explosive,_magazine,_trigger);\n\nprivate _config = ConfigFile >> \"ACE_Triggers\" >> _trigger;\n\n// If the onSetup function returns true, it is handled elsewhere\nif (isText(_config >> \"onSetup\") && {[_explosive,_magazine] call compile getText (_config >> \"onSetup\")}) exitWith {\n    TRACE_2(\"onSetup returned true\",_explosive,_trigger);\n};\n\n[ACE_player, getPosATL _explosive, _explosive getVariable [QGVAR(Direction), 0],_magazine, _trigger, [], _explosive] call FUNC(placeExplosive);\n",
        "functionName": "ace_explosives_fnc_selectTrigger"
      },
      {
        "fileName": "fnc_setPosition.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Sets the Dir and pitch of passed object\n *\n * Arguments:\n * 0: Explosive <OBJECT>\n * 1: Direction <NUMBER>\n * 2: Pitch <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_explosive, 150, 90] call ACE_Explosives_fnc_setPosition;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_explosive\", \"_direction\", \"_pitch\"];\nTRACE_3(\"params\",_explosive,_direction,_pitch);\n\nif (isNull (attachedTo _explosive)) then {\n    _explosive setDir _direction;\n    if (_pitch != 0) then {\n        [_explosive, _pitch, 0] call CALLSTACK(BIS_fnc_setPitchBank);\n    };\n} else {\n    //Attaching to a vehicle (dirAndUp based on vehicle)\n    _explosive setVectorDirAndUp [[0,0,1],[(sin _direction),(cos _direction),0]];\n};\n\nif (isServer) then {\n    // Store the orientation to broadcast it later to JIP players\n    GVAR(explosivesOrientations) pushBack [_explosive, _direction, _pitch];\n\n    // This is a good time to filter the array and remove explosives that no longer exist\n    GVAR(explosivesOrientations) = GVAR(explosivesOrientations) select {\n        _x params [\"_explosive\"];\n        (!isNull _explosive && {alive _explosive})\n    };\n    TRACE_1(\"setPosition\",GVAR(explosivesOrientations));\n};\n",
        "functionName": "ace_explosives_fnc_setPosition"
      },
      {
        "fileName": "fnc_setSpeedDial.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Sets the speed dial for the UI.\n *\n * Arguments:\n * 0: Whether to increase or decrease speed dial index <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ACE_explosives_fnc_setSpeedDial; // increase\n * [false] call ACE_explosives_fnc_setSpeedDial; // decrease\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _speedDial = ace_player getVariable [QGVAR(SpeedDial), []];\nif (_speedDial isEqualTo []) exitWith {};\nprivate _amount = [-1, 1] select (_this select 0);\n\nGVAR(CurrentSpeedDial) = (GVAR(CurrentSpeedDial) + _amount + count _speedDial) mod (count _speedDial);\n\nctrlSetText [1400, (_speedDial select GVAR(CurrentSpeedDial)) select 1];\nctrlSetText [1401, (_speedDial select GVAR(CurrentSpeedDial)) select 0];\n",
        "functionName": "ace_explosives_fnc_setSpeedDial"
      },
      {
        "fileName": "fnc_setupExplosive.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Starts the setup process for the passed explosive. Player only.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player Unit <OBJECT>\n * 2: Classname of explosive to place. (CfgMagazine class) <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"SatchelCharge_Remote_Mag\"] call ACE_Explosives_fnc_SetupExplosive;\n *\n * Public: Yes\n */\n// #define ENABLE_PERFORMANCE_COUNTERS\n#include \"script_component.hpp\"\n\n#define PLACE_RANGE_MAX 1\n#define PLACE_RANGE_MIN 0.025\n\nparams [\"_vehicle\", \"_unit\", \"_magClassname\"];\nTRACE_3(\"params\",_vehicle,_unit,_magClassname);\n\n//Get setup object vehicle and model:\nprivate _setupObjectClass = getText(ConfigFile >> \"CfgMagazines\" >> _magClassname >> QGVAR(SetupObject));\nif (!isClass (configFile >> \"CfgVehicles\" >> _setupObjectClass)) exitWith {ERROR(\"Bad Vehicle\");};\nprivate _p3dModel = getText (configFile >> \"CfgVehicles\" >> _setupObjectClass >> \"model\");\nif (_p3dModel == \"\") exitWith {ERROR(\"No Model\");}; //\"\" - will crash game!\n\n[_unit, \"forceWalk\", \"ACE_Explosives\", true] call EFUNC(common,statusEffect_set);\n\n//Show mouse buttons:\n[localize LSTRING(PlaceAction), localize LSTRING(CancelAction), localize LSTRING(ScrollAction)] call EFUNC(interaction,showMouseHint);\n_unit setVariable [QGVAR(placeActionEH), [_unit, \"DefaultAction\", {true}, {GVAR(placeAction) = PLACE_APPROVE;}] call EFUNC(common,AddActionEventHandler)];\n_unit setVariable [QGVAR(cancelActionEH), [_unit, \"zoomtemp\", {true}, {GVAR(placeAction) = PLACE_CANCEL;}] call EFUNC(common,AddActionEventHandler)];\n\n//Display to show virtual object:\n(QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutRsc [QGVAR(virtualAmmo), \"PLAIN\", 0, false];\n((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModel _p3dModel;\n\n//Make sure it has a trigger that works when attached (eg, no tripwires that only do pressurePlate)\nprivate _isAttachable = false;\nprivate _supportedTriggers = getArray (configFile >> \"CfgMagazines\" >> _magClassname >> \"ACE_Triggers\" >> \"SupportedTriggers\");\n{\n    if ((getNumber (configFile >> \"ACE_Triggers\" >> _x >> \"isAttachable\")) == 1) exitWith {_isAttachable = true;};\n} forEach _supportedTriggers;\n\n\nGVAR(pfeh_running) = true;\nGVAR(placeAction) = PLACE_WAITING;\nGVAR(TweakedAngle) = 0;\n\n\n[{\n    BEGIN_COUNTER(pfeh);\n\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_unit\", \"_magClassname\", \"_setupObjectClass\", \"_isAttachable\"];\n\n    private _lookDirVector = ((positionCameraToWorld [0,0,0]) call EFUNC(common,positionToASL)) vectorFromTo ((positionCameraToWorld [0,0,10]) call EFUNC(common,positionToASL));\n    private _basePosASL = (eyePos _unit);\n    if (cameraView == \"EXTERNAL\") then {  //If external, show explosive over the right shoulder\n        _basePosASL = _basePosASL vectorAdd ((positionCameraToWorld [0.3,0,0]) vectorDiff (positionCameraToWorld [0,0,0]));\n    };\n    if ((stance _unit) == \"PRONE\") then {\n        //If prone, lower base and increase up angle of look - Makes it much easier to attach to underside of vehicles\n        _basePosASL set [2, ((_basePosASL select 2) - 0.3)];\n        _lookDirVector = ((positionCameraToWorld [0,0,0]) call EFUNC(common,positionToASL)) vectorFromTo ((positionCameraToWorld [0,3,10]) call EFUNC(common,positionToASL));\n    };\n    private _cameraAngle = (_lookDirVector select 0) atan2 (_lookDirVector select 1);\n\n    private _testPositionIsValid = {\n        private _testBase = _basePosASL vectorAdd (_lookDirVector vectorMultiply (_this select 0));\n        private _return = true;\n        {\n            private _testPos = _testBase vectorAdd [0.1 * (_x select 0) * (cos _cameraAngle), 0.1 * (_x select 0) * (sin _cameraAngle), 0.1 * (_x select 1)];\n            #ifdef DEBUG_MODE_FULL\n            drawLine3d [(eyePos _unit) call EFUNC(common,ASLToPosition), (_testPos) call EFUNC(common,ASLToPosition), [1,0,0,1]];\n            #endif\n            if (lineIntersects [eyePos _unit, _testPos, _unit]) exitWith {_return = false;};\n        } forEach [[0,0], [-1,-1], [1,-1], [-1,1], [1,1]];\n        _return\n    };\n\n    private _distanceFromBase = PLACE_RANGE_MAX;\n    private _badPosition = !([_distanceFromBase] call _testPositionIsValid);\n    private _attachVehicle = objNull;\n\n    if (_isAttachable && _badPosition) then {\n        _attachVehicle = objNull;\n        private _testBase = _basePosASL vectorAdd _lookDirVector;\n        {\n            private _testPos = _testBase vectorAdd [0.1 * (_x select 0) * (cos _cameraAngle), 0.1 * (_x select 0) * (sin _cameraAngle), 0.1 * (_x select 1)];\n            private _intersectsWith = lineIntersectsWith [eyePos _unit, _testPos, _unit];\n            if (count _intersectsWith == 1) exitWith {_attachVehicle = (_intersectsWith select 0);};\n        } forEach [[0,0], [-1,-1], [1,-1], [-1,1], [1,1]];\n        if ((!isNull _attachVehicle) && {[PLACE_RANGE_MIN] call _testPositionIsValid} &&\n                {(_attachVehicle isKindOf \"Car\") || {_attachVehicle isKindOf \"Tank\"} || {_attachVehicle isKindOf \"Air\"} || {_attachVehicle isKindOf \"Ship\"}}) then {\n            private _min = PLACE_RANGE_MIN;\n            private _max = PLACE_RANGE_MAX;\n            for \"_index\" from 0 to 6 do {\n                _distanceFromBase = (_min + _max) / 2;\n                if ([_distanceFromBase] call _testPositionIsValid) then {\n                    _min = _distanceFromBase;\n                } else {\n                    _max = _distanceFromBase;\n                };\n            };\n            _badPosition = false;\n            _distanceFromBase = ((_min + _max) / 2 + 0.075) min 1;\n        } else {\n            _attachVehicle = objNull;\n        };\n    };\n\n    private _virtualPosASL = _basePosASL vectorAdd (_lookDirVector vectorMultiply _distanceFromBase);\n\n    //Update mouse hint:\n    if (_badPosition) then {\n        ((uiNamespace getVariable [\"ACE_Helper_Display\", objNull]) displayCtrl 1000) ctrlSetText localize LSTRING(BlockedAction);\n    } else {\n        if (isNull _attachVehicle) then {\n            ((uiNamespace getVariable [\"ACE_Helper_Display\", objNull]) displayCtrl 1000) ctrlSetText localize LSTRING(PlaceAction);\n        } else {\n            ((uiNamespace getVariable [\"ACE_Helper_Display\", objNull]) displayCtrl 1000) ctrlSetText localize LSTRING(AttachAction);\n        };\n    };\n\n    //Don't allow Placing bellow terrain\n    if ((getTerrainHeightASL _virtualPosASL) > (_virtualPosASL select 2)) then {\n        _virtualPosASL set [2, (getTerrainHeightASL _virtualPosASL)];\n    };\n\n    //Don't allow placing in a bad position:\n    if (_badPosition && {GVAR(placeAction) == PLACE_APPROVE}) then {GVAR(placeAction) = PLACE_WAITING;};\n\n    if (_unit != ACE_player ||\n        {!([_unit, objNull, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith))} ||\n        {!(_magClassname in (magazines _unit))}\n    ) then {\n        GVAR(placeAction) = PLACE_CANCEL;\n    };\n\n    if (GVAR(placeAction) != PLACE_WAITING) then {\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n        GVAR(pfeh_running) = false;\n\n        [_unit, \"forceWalk\", \"ACE_Explosives\", false] call EFUNC(common,statusEffect_set);\n        [] call EFUNC(interaction,hideMouseHint);\n        [_unit, \"DefaultAction\", (_unit getVariable [QGVAR(placeActionEH), -1])] call EFUNC(common,removeActionEventHandler);\n        [_unit, \"zoomtemp\", (_unit getVariable [QGVAR(cancelActionEH), -1])] call EFUNC(common,removeActionEventHandler);\n\n        (QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n\n        if (GVAR(placeAction) == PLACE_APPROVE) then {\n            private _placeAngle = 0;\n            private _expSetupVehicle = _setupObjectClass createVehicle (_virtualPosASL call EFUNC(common,ASLToPosition));\n\n            TRACE_1(\"Planting Mass\", (getMass _expSetupVehicle));\n            //If the object is too heavy, it can kill a player if it colides\n            if ((getMass _expSetupVehicle) > 5) then {_expSetupVehicle setMass 5;};\n\n            if (isNull _attachVehicle) then {\n                _placeAngle = _cameraAngle - GVAR(TweakedAngle) + 180;\n                _expSetupVehicle setPosAsl _virtualPosASL;\n                _expSetupVehicle setDir _placeAngle;\n                _placeAngle = _placeAngle + 180; //CfgAmmos seem to be 180 for some reason\n            } else {\n                private _modelOffset = _attachVehicle worldToModel (_virtualPosASL call EFUNC(common,ASLToPosition));\n                _placeAngle = _cameraAngle - (getDir _attachVehicle) + 180;\n                _expSetupVehicle attachTo [_attachVehicle, _modelOffset];\n                _expSetupVehicle setVectorDirAndUp [[0,0,-1],[(sin _placeAngle),(cos _placeAngle),0]];\n            };\n\n            TRACE_1(\"Place angel\",_placeAngle);\n\n            _expSetupVehicle setVariable [QGVAR(class), _magClassname, true];\n            _expSetupVehicle setVariable [QGVAR(Direction), _placeAngle, true];\n\n            _unit removeMagazine _magClassname;\n            [_unit, \"PutDown\"] call EFUNC(common,doGesture);\n            _unit setVariable [QGVAR(PlantingExplosive), true];\n            [{_this setVariable [QGVAR(PlantingExplosive), false]}, _unit, 1.5] call CBA_fnc_waitAndExecute;\n\n        };\n    } else {\n        private _screenPos = worldToScreen (_virtualPosASL call EFUNC(common,ASLToPosition));\n        if (_badPosition || {_screenPos isEqualTo []}) then {\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow false;\n        } else {\n            //Show the model on the hud in aprox the same size/location as it will be placed:\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow true;\n\n            private _realDistance = ((_virtualPosASL call EFUNC(common,ASLToPosition)) distance (positionCameraToWorld [0,0,0])) / ((call CBA_fnc_getFov) select 1);\n            _screenPos = [(_screenPos select 0), _realDistance, (_screenPos select 1)];\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetPosition _screenPos;\n\n            private _modelDir = [0,0,-1];\n            private _modelUp = [0,-1,0];\n            if (isNull _attachVehicle) then {\n                private _angle = acos (_lookDirVector select 2);\n                _modelUp = [0, (cos _angle), (sin _angle)];\n                _modelDir = [cos GVAR(TweakedAngle), sin GVAR(TweakedAngle), 0] vectorCrossProduct _modelUp;\n            };\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModelDirAndUp [_modelDir, _modelUp];\n        };\n    };\n\n    END_COUNTER(pfeh);\n}, 0, [_unit, _magClassname, _setupObjectClass, _isAttachable]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_explosives_fnc_setupExplosive"
      },
      {
        "fileName": "fnc_spawnFlare.sqf",
        "content": "/*\n * Author: VKing\n * Spawns a flare on the ground for tripflare trigger\n *\n * Arguments:\n * 0: Position <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [getPos groundFlare] call ace_explosives_fnc_spawnFlare\n *\n * Public: no\n */\n#include \"script_component.hpp\"\n\nparams [\"_posX\",\"_posY\",\"_posZ\"];\nTRACE_3(\"Params\",_posX,_posY,_posZ);\n\nprivate _flare = \"ACE_TripFlare_FlareEffect\" createVehicle [_posX,_posY,_posZ];\n\nTRACE_1(\"\",_flare);\n\nnil\n",
        "functionName": "ace_explosives_fnc_spawnFlare"
      },
      {
        "fileName": "fnc_startDefuse.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Starts defusing an explosive\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target explosive <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, ACE_Interaction_Target] call ACE_Explosives_fnc_StartDefuse;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_2(\"params\",_unit,_target);\n\n_target = attachedTo (_target);\n\nprivate _fnc_DefuseTime = {\n    params [\"_specialist\", \"_target\"];\n    TRACE_2(\"defuseTime\",_specialist,_target);\n    private _defuseTime = 5;\n    if (isNumber(ConfigFile >> \"CfgAmmo\" >> typeOf (_target) >> QGVAR(DefuseTime))) then {\n        _defuseTime = getNumber(ConfigFile >> \"CfgAmmo\" >> typeOf (_target) >> QGVAR(DefuseTime));\n    };\n    if (!_specialist && {GVAR(PunishNonSpecialists)}) then {\n        _defuseTime = _defuseTime * 1.5;\n    };\n    _defuseTime\n};\nprivate _actionToPlay = \"MedicOther\";\nif (STANCE _unit == \"Prone\") then {\n    _actionToPlay = \"PutDown\";\n};\n\nif (ACE_player != _unit) then {\n    // If the unit is a player, call the function on the player.\n    if (isPlayer _unit) then {\n        [QGVAR(startDefuse), [_unit, _target], _unit] call CBA_fnc_targetEvent;\n    } else {\n        [_unit, _actionToPlay] call EFUNC(common,doGesture);\n        _unit disableAI \"MOVE\";\n        _unit disableAI \"TARGET\";\n        private _defuseTime = [[_unit] call EFUNC(Common,isEOD), _target] call _fnc_DefuseTime;\n        [{\n            params [\"_unit\", \"_target\"];\n            TRACE_2(\"defuse finished\",_unit,_target);\n            [_unit, _target] call FUNC(defuseExplosive);\n            _unit enableAI \"MOVE\";\n            _unit enableAI \"TARGET\";\n        }, [_unit, _target], _defuseTime] call CBA_fnc_waitAndExecute;\n    };\n} else {\n    [_unit, _actionToPlay] call EFUNC(common,doGesture);\n    private _isEOD = [_unit] call EFUNC(Common,isEOD);\n    private _defuseTime = [_isEOD, _target] call _fnc_DefuseTime;\n    if (_isEOD || {!GVAR(RequireSpecialist)}) then {\n        [_defuseTime, [_unit,_target], {(_this select 0) call FUNC(defuseExplosive)}, {}, (localize LSTRING(DefusingExplosive)), {true}, [\"isNotSwimming\"]] call EFUNC(common,progressBar);\n    };\n};\n",
        "functionName": "ace_explosives_fnc_startDefuse"
      },
      {
        "fileName": "fnc_startTimer.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Starts a timer for an explosive.\n *\n * Arguments:\n * 0: Explosive <OBJECT>\n * 1: Time till detonate <NUMBER>\n * 2: Trigger Item Classname <STRING> (default: \"#timer\")\n *\n * Return Value:\n * None\n *\n * Example:\n * [_explosive, 10] call ace_explosives_fnc_startTimer\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_explosive\", \"_delay\", [\"_triggerClassname\", \"#timer\", [\"\"]]];\nTRACE_3(\"startTimer\",_explosive,_delay,_triggerClassname);\n\n[{\n    params [\"_explosive\", \"_triggerClassname\"];\n    TRACE_1(\"Explosive Going Boom\",_explosive);\n    if (!isNull _explosive) then {\n        [_explosive, -1, [_explosive, 0], _triggerClassname] call FUNC(detonateExplosive);\n    };\n}, [_explosive, _triggerClassname], _delay] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_explosives_fnc_startTimer"
      },
      {
        "fileName": "fnc_triggerType.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Gets the types of triggers associated with the explosive\n *\n * Arguments:\n * 0: Explosive magazine <STRING>\n *\n * Return Value:\n * Supported triggers as ACE_Triggers config entries <ARRAY>\n *\n * Example:\n * [\"SatchelCharge_Remote_Mag\"] call ACE_Explosives_fnc_TriggerType\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_magazineClassname\"];\nTRACE_1(\"params\",_magazineClassname);\n\nprivate _result = [];\nprivate _config = getArray (ConfigFile >> \"CfgMagazines\" >> _magazineClassname >> \"ACE_Triggers\" >> \"SupportedTriggers\");\nprivate _count = count _config;\n\nfor \"_index\" from 0 to (_count - 1) do {\n    _result set [_index, ConfigFile >> \"ACE_Triggers\" >> (_config select _index)];\n};\n_result\n",
        "functionName": "ace_explosives_fnc_triggerType"
      }
    ]
  },
  {
    "component": "fastroping",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(deployRopes), {\n    _this call FUNC(deployRopes);\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(startFastRope), {\n    [FUNC(fastRopeServerPFH), 0, _this] call CBA_fnc_addPerFrameHandler;\n}] call CBA_fnc_addEventHandler;\n\n// Keybinds\n[\"ACE3 Vehicles\", QGVAR(fastRope), localize LSTRING(Interaction_fastRope), {\n    if ((vehicle ACE_player) == ACE_player) exitWith {false};\n    if (!([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith))) exitWith {false};\n    if ([ACE_player, vehicle ACE_player] call FUNC(canFastRope)) then {\n        [ACE_player, vehicle ACE_player] call FUNC(fastRope);\n        true\n    } else {\n        false\n    };\n}, \"\"] call CBA_fnc_addKeybind;\n\n[\"ACE3 Vehicles\", QGVAR(cutRopes), localize LSTRING(Interaction_cutRopes), {\n    if ((vehicle ACE_player) == ACE_player) exitWith {false};\n    if (!([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith))) exitWith {false};\n    if ([vehicle ACE_player] call FUNC(canCutRopes)) then {\n        [vehicle ACE_player] call FUNC(cutRopes);\n        true\n    } else {\n        false\n    };\n}, {false}] call CBA_fnc_addKeybind;\n\n\n#ifdef DRAW_FASTROPE_INFO\naddMissionEventHandler [\"Draw3D\", {\n    if (!(cursorObject isKindOf \"Helicopter\")) exitWith {};\n    private _config = configFile >> \"CfgVehicles\" >> (typeOf cursorObject);\n    private _enabled = getNumber (_config >> QGVAR(enabled));\n    drawIcon3D [\"\", [.5,.5,1,1], (ASLtoAGL getPosASL cursorObject), 0.5, 0.5, 0, format [\"%1 = %2\", typeOf cursorObject, _enabled], 0.5, 0.025, \"TahomaB\"];\n    if (_enabled > 0) then {\n        {\n            private _hookAttachment = cursorObject getVariable [QGVAR(FRIES), cursorObject];\n            private _ropeOrigin = if (_x isEqualType []) then {_x} else {_hookAttachment selectionPosition _x};\n            drawIcon3D [\"\", [1,.5,.5,1], (_hookAttachment modelToWorld _ropeOrigin), 0.5, 0.5, 0, format [\"Rope: %1\", _forEachIndex], 0.5, 0.025, \"TahomaB\"];\n        } forEach (getArray (_config >> QGVAR(ropeOrigins)));\n    };\n    if (_enabled == 2) then {\n        drawIcon3D [\"\", [.5,1,.5,1], (cursorObject modelToWorld getArray (_config >> QGVAR(friesAttachmentPoint))), 0.5, 0.5, 0, format [\"Fries: %1\", getText (_config >> QGVAR(friesType))], 0.5, 0.025, \"TahomaB\"];\n    };\n}];\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canCloseRamp.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the player can close the ramp of the given helo.\n *\n * Arguments:\n * 0: The helicopter <OBJECT>\n * 1: The ramp animation name <STRING>\n * 2: Turret paths that can close the ramp <ARRAY>\n *\n * Return Value:\n * Able to close ramp <BOOL>\n *\n * Example:\n * [_vehicle, _door, _turretPaths] call ace_fastroping_fnc_canCloseRamp\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\", \"_door\", \"_turretPaths\"];\n\n(_vehicle doorPhase _door > 0.5) &&\n{alive _vehicle} &&\n{(_vehicle getVariable [\"bis_disabled_Ramp\", 0]) != 1} &&\n{!(_vehicle getVariable [QGVAR(doorsLocked), false])} &&\n{\n    (ACE_player == driver _vehicle) ||\n    {((assignedVehicleRole ACE_player) param [1, []]) in _turretPaths}\n}\n",
        "functionName": "ace_fastroping_fnc_canCloseRamp"
      },
      {
        "fileName": "fnc_canCutRopes.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the unit can cut deployed ropes.\n *\n * Arguments:\n * 0: The helicopter itself <OBJECT>\n *\n * Return Value:\n * Able to cut ropes <BOOL>\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_canCutRopes\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\n\n!(_deployedRopes isEqualTo []) &&\n{{(_x select 5)} count (_deployedRopes) == 0}\n",
        "functionName": "ace_fastroping_fnc_canCutRopes"
      },
      {
        "fileName": "fnc_canDeployRopes.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the unit can deploy ropes from the helicopter.\n *\n * Arguments:\n * 0: Unit occupying the helicopter <OBJECT>\n * 1: The helicopter itself <OBJECT>\n *\n * Return Value:\n * Able to deploy ropes <BOOL>\n *\n * Example:\n * [_player, _vehicle] call ace_fastroping_fnc_canDeployRopes\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_unit\", \"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _enabled = getNumber (_config >> QGVAR(enabled));\nprivate _deploymentStage = _vehicle getVariable [QGVAR(deploymentStage), 0];\n\n(driver _vehicle != _unit) &&\n{getPos _vehicle select 2 > 2} &&\n{_enabled == 1 || {_enabled == 2 && {!(isNull (_vehicle getVariable [QGVAR(FRIES), objNull]))}}} &&\n{\n    (_deploymentStage == 0 && {getText (_config >> QGVAR(onPrepare)) == \"\"}) ||\n    {_deploymentStage == 2 && {getText (_config >> QGVAR(onPrepare)) != \"\"}}\n}\n",
        "functionName": "ace_fastroping_fnc_canDeployRopes"
      },
      {
        "fileName": "fnc_canFastRope.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the unit can fast rope from the helicopter.\n *\n * Arguments:\n * 0: Unit occupying the helicopter <OBJECT>\n * 1: The helicopter itself <OBJECT>\n *\n * Return Value:\n * Able to fast ropes <BOOL>\n *\n * Example:\n * [_player, _vehicle] call ace_fastroping_fnc_canFastRope\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_unit\", \"_vehicle\"];\n\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\n\n((driver _vehicle != _unit) &&\n{!(_deployedRopes isEqualTo [])} &&\n{{!(_x select 5)} count (_deployedRopes) > 0} &&\n{getPos _vehicle select 2 > 2})\n",
        "functionName": "ace_fastroping_fnc_canFastRope"
      },
      {
        "fileName": "fnc_canPrepareFRIES.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the unit can prepare the helicopters FRIES.\n *\n * Arguments:\n * 0: The helicopter itself <OBJECT>\n *\n * Return Value:\n * Able to prepare FRIES <BOOL>\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_canPrepareFRIES\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\n((getNumber (_config >> QGVAR(enabled)) == 1) || {!(isNull (_vehicle getVariable [QGVAR(FRIES), objNull]))}) &&\n{(_vehicle getVariable [QGVAR(deploymentStage), 0]) == 0} &&\n{getText (_config >> QGVAR(onPrepare)) != \"\"}\n",
        "functionName": "ace_fastroping_fnc_canPrepareFRIES"
      },
      {
        "fileName": "fnc_canStowFRIES.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the unit can stow the helicopters FRIES.\n *\n * Arguments:\n * 0: The helicopter itself <OBJECT>\n *\n * Return Value:\n * Able to stow FRIES <BOOL>\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_canStowFRIES\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\n(_vehicle getVariable [QGVAR(deploymentStage), 0]) == 2 &&\n{getText (_config >> QGVAR(onCut)) != \"\"}\n",
        "functionName": "ace_fastroping_fnc_canStowFRIES"
      },
      {
        "fileName": "fnc_checkVehicleThread.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the given helicopter still exits, and if not, destroys the FRIES.\n *\n * Arguments:\n * 0: The helicopter <OBJECT>\n * 1: The helicopter's FRIES <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle, _fries] call ace_fastroping_fnc_checkVehicleThread\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\", \"_fries\"];\n\nif (isNull _vehicle) then {\n    deleteVehicle _fries;\n} else {\n    [FUNC(checkVehicleThread), _this, 5] call CBA_fnc_waitAndExecute;\n};\n",
        "functionName": "ace_fastroping_fnc_checkVehicleThread"
      },
      {
        "fileName": "fnc_cutRopes.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Cut deployed ropes.\n *\n * Arguments:\n * 0: A helicopter with deployed ropes <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_cutRopes\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\n{\n    _x params [\"\", \"_ropeTop\", \"_ropeBottom\", \"_dummy\", \"_hook\", \"_occupied\"];\n\n    //Make player fall if rope is occupied\n    if (_occupied) then {\n        private _attachedObjects = attachedObjects _dummy;\n        //Rope is considered occupied when it's broken as well, so check if array is empty\n        //Note: ropes are not considered attached objects by Arma\n        if !(_attachedObjects isEqualTo []) then {\n            detach ((attachedObjects _dummy) select 0);\n        };\n    };\n\n    //Destroy rope\n    //Only delete the hook first so the rope falls down.\n    //Note: ropeDetach was used here before, but the command seems a bit broken.\n    deleteVehicle _hook;\n    [{{deleteVehicle _x} count _this}, [_ropeTop, _ropeBottom, _dummy], 60] call CBA_fnc_waitAndExecute;\n} count _deployedRopes;\n\n_vehicle setVariable [QGVAR(deployedRopes), [], true];\n_vehicle setVariable [QGVAR(deploymentStage), 2, true];\n",
        "functionName": "ace_fastroping_fnc_cutRopes"
      },
      {
        "fileName": "fnc_deployAI.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Auomatically deploy a helicopter filled with AI units.\n *\n * Arguments:\n * 0: The helicopter <OBJECT>\n * 1: Deploy special roles (gunners, copilot) (default: false) <BOOL>\n * 2: Create deployment group (default: true) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_deployAI\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\nparams [[\"_vehicle\", objNull, [objNull]], [\"_deploySpecial\", false, [true]], [\"_createDeploymentGroup\", true, [true]]];\n\nif (isNull _vehicle || {!(_vehicle isKindOf \"Helicopter\")}) exitWith {\n    if (hasInterface) then {\n        // Note: BIS_fnc_guiMessage causes a CTD with call, so spawn is used instead.\n        [\"deployAI was called with an invalid or non-existant vehicle.\", QFUNC(deployAI)] spawn BIS_fnc_guiMessage;\n    };\n    ERROR('FUNC(deployAI): deployAI was called with an invalid or non-existant vehicle.');\n};\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _configEnabled = getNumber (_config >> QGVAR(enabled));\nif (_configEnabled == 0) exitWith {\n    if (hasInterface) then {\n        [format [\"You cannot fast rope from a \"\"%1\"\" helicopter.\", getText (_config >> \"DisplayName\")], QFUNC(deployAI)] spawn BIS_fnc_guiMessage;\n    };\n    ERROR_1('FUNC(deployAI): You cannot fast rope from a \"%1\" helicopter.',getText (_config >> \"DisplayName\"));\n};\n\nif (_configEnabled == 2 && {isNull (_vehicle getVariable [QGVAR(FRIES), objNull])}) exitWith {\n    if (hasInterface) then {\n        [format [\"\"\"%1\"\" requires a FRIES for fastroping, but has not been equipped with one.\", getText (_config >> \"DisplayName\")], QFUNC(deployAI)] spawn BIS_fnc_guiMessage;\n    };\n    ERROR_1('FUNC(deployAI): \"%1\" requires a FRIES for fastroping but has not been equipped with one.',getText (_config >> \"DisplayName\"));\n};\n\nprivate _unitsToDeploy = crew _vehicle;\nif (_deploySpecial) then {\n    _unitsToDeploy deleteAt (_unitsToDeploy find driver _vehicle);\n} else {\n    _unitsToDeploy = _unitsToDeploy select {(assignedVehicleRole _x) select 0 == \"cargo\"};\n};\n\nif (_unitsToDeploy isEqualTo []) exitWith {\n    WARNING_1('FUNC(deployAI): Found no units to deploy in \"%1\".',getText (_config >> \"DisplayName\"));\n};\n\nif (_createDeploymentGroup) then {\n    private _deployGroup = createGroup side (_unitsToDeploy select 0);\n    _unitsToDeploy joinSilent _deployGroup;\n};\n\nprivate  _deployTime = 0;\nif (getText (_config >> QGVAR(onPrepare)) != \"\") then {\n    _deployTime = [_vehicle] call (missionNamespace getVariable (getText (_config >> QGVAR(onPrepare))));\n};\n[{[_this] call FUNC(deployRopes)}, _vehicle, _deployTime] call CBA_fnc_waitAndExecute;\ndriver _vehicle disableAI \"MOVE\";\n\nDFUNC(deployAIRecursive) = {\n    params [\"_vehicle\", \"_unitsToDeploy\"];\n\n    private _unit = _unitsToDeploy deleteAt 0;\n    unassignVehicle _unit;\n    [_unit, _vehicle] call FUNC(fastRope);\n\n    if !(_unitsToDeploy isEqualTo []) then {\n        [{\n            [{\n                params [\"_vehicle\"];\n                private _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\n                ({!(_x select 5)} count (_deployedRopes)) > 0\n            }, FUNC(deployAIRecursive), _this] call CBA_fnc_waitUntilAndExecute;\n        }, [_vehicle, _unitsToDeploy], 1] call CBA_fnc_waitAndExecute;\n    } else {\n        [{\n            private _deployedRopes = _this getVariable [QGVAR(deployedRopes), []];\n            ({_x select 5} count (_deployedRopes)) == 0\n        }, {\n            [_this] call FUNC(cutRopes);\n            driver _this enableAI \"MOVE\";\n        }, _vehicle] call CBA_fnc_waitUntilAndExecute;\n    };\n};\n\n[FUNC(deployAIRecursive), [_vehicle, _unitsToDeploy], _deployTime + 4] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_fastroping_fnc_deployAI"
      },
      {
        "fileName": "fnc_deployAIWaypoint.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Waypoint function for the fast rope waypoint.\n *\n * Arguments:\n * 0: Group <GROUP>\n * 1: Waypoint position <ARRAY>\n *\n * Return Value:\n * true <BOOL>\n *\n * Example:\n * [_group, [6560, 12390, 0]] call ace_fastroping_fnc_deployAIWayoint\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [[\"_group\", grpNull, [grpNull]], [\"_position\", [0, 0, 0], [[]], 3]];\n\nprivate _vehicle = vehicle leader _group;\nprivate _commander = effectiveCommander _vehicle;\nprivate _speedMode = speedMode _group;\n\n// - Approach -----------------------------------------------------------------\nif (_vehicle distance2D _position > 50) then {\n    _group setSpeedMode \"LIMITED\";\n    _vehicle flyInHeight 20;\n    _commander doMove _position;\n    waitUntil {_vehicle distance2D _position < 50};\n    waitUntil {vectorMagnitude (velocity _vehicle) < 3};\n    //doStop _commander;\n};\n\n// - Deployment ---------------------------------------------------------------\n[_vehicle] call FUNC(deployAI);\nwaitUntil {!((_vehicle getVariable [QGVAR(deployedRopes), []]) isEqualTo [])};\nwaitUntil {(_vehicle getVariable [QGVAR(deployedRopes), []]) isEqualTo []};\n_group setSpeedMode _speedMode;\n\ntrue\n",
        "functionName": "ace_fastroping_fnc_deployAIWaypoint"
      },
      {
        "fileName": "fnc_deployRopes.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Deploy ropes from the helicopter.\n *\n * Arguments:\n * 0: The helicopter itself <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_deployRopes\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\n\nprivate _ropeOrigins = getArray (_config >> QGVAR(ropeOrigins));\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\nprivate _hookAttachment = _vehicle getVariable [QGVAR(FRIES), _vehicle];\n{\n    private _ropeOrigin = _x;\n    private _hook = QGVAR(helper) createVehicle [0, 0, 0];\n    _hook allowDamage false;\n    if (_ropeOrigin isEqualType []) then {\n        _hook attachTo [_hookAttachment, _ropeOrigin];\n    } else {\n        _hook attachTo [_hookAttachment, [0, 0, 0], _ropeOrigin];\n    };\n\n    private _origin = getPosATL _hook;\n\n    private _dummy = createVehicle [QGVAR(helper), _origin vectorAdd [0, 0, -1], [], 0, \"CAN_COLLIDE\"];\n    _dummy allowDamage false;\n    _dummy disableCollisionWith _vehicle;\n\n    private _ropeTop = ropeCreate [_dummy, [0, 0, 0], _hook, [0, 0, 0], 0.5];\n    private _ropeBottom = ropeCreate [_dummy, [0, 0, 0], 1];\n    ropeUnwind [_ropeBottom, 30, 34.5, false];\n\n    _ropeTop addEventHandler [\"RopeBreak\", {[_this, \"top\"] call FUNC(onRopeBreak)}];\n    _ropeBottom addEventHandler [\"RopeBreak\", {[_this, \"bottom\"] call FUNC(onRopeBreak)}];\n\n    //deployedRopes format: attachment point, top part of the rope, bottom part of the rope, attachTo helper object, occupied\n    _deployedRopes pushBack [_ropeOrigin, _ropeTop, _ropeBottom, _dummy, _hook, false];\n\n    false\n} count _ropeOrigins;\n\n_vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\n_vehicle setVariable [QGVAR(deploymentStage), 3, true];\n",
        "functionName": "ace_fastroping_fnc_deployRopes"
      },
      {
        "fileName": "fnc_equipFRIES.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Equips the given helicopter with a FRIES.\n *\n * Arguments:\n * 0: The helicopter <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_equipFRIES\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nif !(isNumber (_config >> QGVAR(enabled))) then {\n    [\"%1 has not been configured for ACE_Fastroping.\", getText (_config >> \"DisplayName\")] call BIS_fnc_error;\n} else {\n    if (getNumber (_config >> QGVAR(enabled)) == 2) then {\n        private _fries = (getText (_config >> QGVAR(friesType))) createVehicle [0, 0, 0];\n        _fries attachTo [_vehicle, (getArray (_config >> QGVAR(friesAttachmentPoint)))];\n        _vehicle setVariable [QGVAR(FRIES), _fries, true];\n        _vehicle addEventHandler [\"Killed\", {\n            params [\"_vehicle\"];\n            deleteVehicle (_vehicle getVariable [QGVAR(FRIES), objNull]);\n            _vehicle setVariable [QGVAR(FRIES), nil, true];\n\n            if !((_vehicle getVariable [QGVAR(deployedRopes), []] isEqualTo [])) then {\n                [_vehicle] call FUNC(cutRopes);\n            };\n        }];\n        [FUNC(checkVehicleThread), [_vehicle, _fries], 5] call CBA_fnc_waitAndExecute;\n    };\n};\n",
        "functionName": "ace_fastroping_fnc_equipFRIES"
      },
      {
        "fileName": "fnc_fastRope.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Lets the unit fast rope.\n *\n * Arguments:\n * 0: Unit occupying the helicopter <OBJECT>\n * 1: The helicopter itself <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player, _vehicle] call ace_fastroping_fnc_fastRope\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_unit\", \"_vehicle\"];\n\n//Select unoccupied rope\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\nprivate _usableRope = _deployedRopes select 0;\nprivate _usableRopeIndex = 0;\n{\n    if !(_x select 5) exitWith {\n        _usableRope = _x;\n        _usableRopeIndex = _forEachIndex;\n    };\n} forEach _deployedRopes;\n\n_usableRope set [5, true];\n_deployedRopes set [_usableRopeIndex, _usableRope];\n_vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\n\n//Start server PFH asap\n[QGVAR(startFastRope), [_unit, _vehicle, _usableRope, _usableRopeIndex, false]] call CBA_fnc_serverEvent;\nmoveOut _unit;\n[FUNC(fastRopeLocalPFH), 0, [_unit, _vehicle, _usableRope, _usableRopeIndex, diag_tickTime]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_fastroping_fnc_fastRope"
      },
      {
        "fileName": "fnc_fastRopeLocalPFH.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Local PerFrameHandler during fast roping.\n *\n * Arguments:\n * 0: PFH arguments <ARRAY>\n * 1: PFH handle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[_unit, _vehicle, _rope, _ropeIndex], 0] call ace_fastroping_fnc_fastRopeLocalPFH\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_arguments\", \"_pfhHandle\"];\n_arguments params [\"_unit\", \"\", \"_rope\", \"\", \"_timeToPlayRopeSound\"];\n_rope params [\"\", \"\", \"\", \"_dummy\", \"_hook\"];\n\n//Wait until the unit is actually outside of the helicopter\nif (vehicle _unit != _unit) exitWith {};\n\n// dummy lost hook\nif (isNull _hook) exitWith {\n    TRACE_1(\"Hook lost, dropping and exiting pfeh\",_unit);\n\n    [_unit, \"\", 2] call EFUNC(common,doAnimation);\n    _unit setVectorUp [0, 0, 1];\n\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\n};\n\n//Start fast roping\nif (animationState _unit != \"ACE_FastRoping\") exitWith {\n    _unit disableCollisionWith _dummy;\n    _unit attachTo [_dummy, [0, 0, -1.45]];\n    [_unit, \"ACE_FastRoping\", 2] call EFUNC(common,doAnimation);\n};\n\n\n//End of fast rope\nif (isNull attachedTo _unit) exitWith {\n    TRACE_1(\"exit pfeh\",_unit);\n    [_unit, \"\", 2] call EFUNC(common,doAnimation);\n    _unit setVectorUp [0, 0, 1];\n\n    if (_unit == ACE_player) then {\n        playSound QGVAR(Thud);\n    };\n\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\n};\n\nif (_unit == ACE_player && {diag_tickTime > _timeToPlayRopeSound}) then {\n    _arguments set [4, (_timeToPlayRopeSound + 1)];\n    playSound QGVAR(Rope);\n};\n",
        "functionName": "ace_fastroping_fnc_fastRopeLocalPFH"
      },
      {
        "fileName": "fnc_fastRopeServerPFH.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Server PerFrameHandler during fast roping.\n *\n * Arguments:\n * 0: PFH arguments <ARRAY>\n * 1: PFH handle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[_unit, _vehicle, _rope, _ropeIndex], 0] call ace_fastroping_fnc_fastRopeServerPFH\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_arguments\", \"_pfhHandle\"];\n_arguments params [\"_unit\", \"_vehicle\", \"_rope\", \"_ropeIndex\", \"_hasBeenAttached\"];\n_rope params [\"_attachmentPoint\", \"_ropeTop\", \"_ropeBottom\", \"_dummy\", \"_hook\"];\n\n//Wait until the unit is actually outside of the helicopter\nif (vehicle _unit != _unit) exitWith {};\n\n//Prevent teleport if hook has been deleted due to rope cut\nif (isNull _hook) exitWith {\n    detach _unit; //Does not matter if unit was not attached yet\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\n};\n\n//Start fast roping\nif (getMass _dummy != 80) exitWith {\n    //Fix for twitchyness\n    _dummy setMass 80;\n    _dummy setCenterOfMass [0, 0, -2];\n    private _origin = getPosASL _hook;\n    _dummy setPosASL (_origin vectorAdd [0, 0, -2]);\n    _dummy setVectorUp [0, 0, 1];\n\n    ropeUnwind [_ropeTop, 6, 34.5];\n    ropeUnwind [_ropeBottom, 6, 0.5];\n};\n\n//Check if the player has been attached to the rope yet\nif (!_hasBeenAttached && {!(isNull attachedTo _unit)}) then {\n    _hasBeenAttached = true;\n    _arguments set [4, true];\n};\n\n//Exit when the unit has been detached and is falling (rope broke, heli flew too fast, etc.)\n//Make sure this isn't executed before the unit is actually fastroping\nif (_hasBeenAttached && {isNull attachedTo _unit}) exitWith {\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\n};\n\n//Setting the velocity manually to reduce twitching\n_dummy setVelocity [0,0,-6];\n\n//Check if fast rope is finished\nif (\n    ((getPos _unit select 2) < 0.2)\n    || {ropeLength _ropeTop == 34.5}\n    || {vectorMagnitude (velocity _vehicle) > 5}\n    || {!([_unit] call EFUNC(common,isAwake))}\n) exitWith {\n    detach _unit;\n\n    //Reset rope\n    deleteVehicle _ropeTop;\n    deleteVehicle _ropeBottom;\n\n    private _origin = getPosASL _hook;\n    _dummy setPosASL (_origin vectorAdd [0, 0, -1]);\n\n    //Restore original mass and center of mass\n    _dummy setMass 40;\n    _dummy setCenterOfMass [0.000143227,0.00105986,-0.246147];\n\n    _ropeTop = ropeCreate [_dummy, [0, 0, 0], _hook, [0, 0, 0], 0.5];\n    _ropeBottom = ropeCreate [_dummy, [0, 0, 0], 34.5];\n\n    _ropeTop addEventHandler [\"RopeBreak\", {[_this, \"top\"] call FUNC(onRopeBreak)}];\n    _ropeBottom addEventHandler [\"RopeBreak\", {[_this, \"bottom\"] call FUNC(onRopeBreak)}];\n\n    //Update deployedRopes array\n    private _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\n    _deployedRopes set [_ropeIndex, [_attachmentPoint, _ropeTop, _ropeBottom, _dummy, _hook, false]];\n    _vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\n\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\n};\n",
        "functionName": "ace_fastroping_fnc_fastRopeServerPFH"
      },
      {
        "fileName": "fnc_moduleEquipFRIES.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Equips synched helicopters with a FRIES.\n *\n * Arguments:\n * 0: Module <LOGIC>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_module] call ace_fastroping_fnc_moduleEquipFRIES\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_module\"];\n\nprivate _synchedUnits = synchronizedObjects _module;\n{\n    if (_x isKindOf \"CAManBase\") then {\n        _x = vehicle _x;\n    };\n    [_x] call FUNC(equipFRIES);\n    false\n} count _synchedUnits;\n",
        "functionName": "ace_fastroping_fnc_moduleEquipFRIES"
      },
      {
        "fileName": "fnc_onCutCommon.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Function for closing doors and retracting the hook for most vanilla and older Arma helos.\n *\n * Arguments:\n * 0: Helicopter <OBJECT>\n *\n * Return Value:\n * Amount of time to wait before cutting ropes <NUMBER>\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_onCutRopesCommon\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _fries = _vehicle getVariable [QGVAR(FRIES), objNull];\nif !(isNull _fries) then {\n    {_fries animate [_x, 0]} forEach ANIMS_HOOK;\n    [{\n        {_this animateDoor [_x, 0]} forEach ANIMS_ANIMATEDOOR;\n        {_this animate [_x, 0]} forEach ANIMS_ANIMATE;\n        _this setVariable [QGVAR(doorsLocked), false, true];\n    }, _vehicle, 2] call CBA_fnc_waitAndExecute;\n\n    4\n} else {\n    {_vehicle animateDoor [_x, 0]} forEach ANIMS_ANIMATEDOOR;\n    {_vehicle animate [_x, 0]} forEach ANIMS_ANIMATE;\n    _vehicle setVariable [QGVAR(doorsLocked), false, true];\n\n    2\n};\n",
        "functionName": "ace_fastroping_fnc_onCutCommon"
      },
      {
        "fileName": "fnc_onPrepareCommon.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Function for opening doors and extending the hook for most vanilla and older Arma helos.\n *\n * Arguments:\n * 0: Helicopter <OBJECT>\n *\n * Return Value:\n * Amount of time to wait before deploying ropes <NUMBER>\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_onDeployRopesCommon\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\nprivate _waitTime = 2;\n\n{_vehicle animateDoor [_x, 1]} forEach ANIMS_ANIMATEDOOR;\n{_vehicle animate [_x, 1]} forEach ANIMS_ANIMATE;\n\n_vehicle setVariable [QGVAR(doorsLocked), true, true];\n\nprivate _fries = _vehicle getVariable [QGVAR(FRIES), objNull];\nif !(isNull _fries) then {\n    [{\n        {_this animate [_x, 1]} forEach ANIMS_HOOK;\n    }, _fries, 2] call CBA_fnc_waitAndExecute;\n    _waitTime = 4;\n};\n\n_waitTime\n",
        "functionName": "ace_fastroping_fnc_onPrepareCommon"
      },
      {
        "fileName": "fnc_onRopeBreak.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Handles ropes breaking when deployed.\n *\n * Arguments:\n * 0: RopeBreak EH arguments <ARRAY>\n * 1: Part of rope (\"top\" or \"bottom\") <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[array]], \"top\"] call ace_fastroping_fnc_onRopeBreak\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_ehArgs\", \"_part\"];\n_ehArgs params [\"_rope\", \"_helper1\", \"_helper2\"];\n\nif (_part == \"bottom\") then {\n    _helper2 = (ropeAttachedObjects _helper1) select 0;\n};\n\nprivate _vehicle = attachedTo _helper2;\nif (isNil \"_vehicle\") exitWith {}; //Exit when vehicle got destroyed\nif (_vehicle isKindOf \"ACE_friesBase\") then {\n    _vehicle = attachedTo _vehicle;\n};\n\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\nprivate _brokenRope = [];\n{\n    if ((_x select 1 == _rope) || {(_x select 2 == _rope)}) exitWith {\n        _brokenRope = _x;\n    };\n} forEach _deployedRopes;\n_brokenRope set [5, true];\n_vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\n\nprivate _unit = {\n    if (_x isKindOf \"CAManBase\") exitWith {_x};\n} forEach (attachedObjects (_brokenRope select 3));\n\nif !(isNil \"_unit\") then {\n    if (_part == \"top\") then {\n        detach _unit;\n    } else {\n        //TODO: ???\n        //Rope might break at the very bottom\n        //-> letting the unit fall is not always ideal\n    };\n};\n",
        "functionName": "ace_fastroping_fnc_onRopeBreak"
      },
      {
        "fileName": "fnc_prepareFRIES.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Prepares the helicopters FRIES.\n *\n * Arguments:\n * 0: A helicopter with deployed ropes <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_prepareFRIES\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\n//Stage indicator: 0 - travel mode; 1 - preparing/stowing FRIES; 2 - FRIES ready; 3 - ropes deployed\n_vehicle setVariable [QGVAR(deploymentStage), 1, true];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _waitTime = 0;\nif (isText (_config >> QGVAR(onPrepare))) then {\n    _waitTime = [_vehicle] call (missionNamespace getVariable (getText (_config >> QGVAR(onPrepare))));\n};\n\n[{\n    _this setVariable [QGVAR(deploymentStage), 2, true];\n}, _vehicle, _waitTime] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_fastroping_fnc_prepareFRIES"
      },
      {
        "fileName": "fnc_stowFRIES.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Stows the helicopters FRIES.\n *\n * Arguments:\n * 0: A helicopter with prepared FRIES <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_vehicle] call ace_fastroping_fnc_stowFRIES\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_vehicle\"];\n\n//Stage indicator: 0 - travel mode; 1 - preparing/stowing FRIES; 2 - FRIES ready; 3 - ropes deployed\n_vehicle setVariable [QGVAR(deploymentStage), 1, true];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\nprivate _waitTime = 0;\nif (isText (_config >> QGVAR(onCut))) then {\n    _waitTime = [_vehicle] call (missionNamespace getVariable (getText (_config >> QGVAR(onCut))));\n};\n\n[{\n    _this setVariable [QGVAR(deploymentStage), 0, true];\n}, _vehicle, _waitTime] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_fastroping_fnc_stowFRIES"
      }
    ]
  },
  {
    "component": "fcs",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "// by commy2\n\n[\"ACE3 Vehicles\", QGVAR(lazeTarget), localize LSTRING(LaseTarget),\n{\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !((!GVAR(enabled) && FUNC(canUseFCS)) || FUNC(canUseRangefinder)) exitWith {false};\n\n    if (GETGVAR(isDownStateKey1,false)) exitWith {false};\n    GVAR(isDownStateKey1) = true;\n\n    // Statement\n    [vehicle ACE_player, [ACE_player] call EFUNC(common,getTurretIndex)] call FUNC(keyDown);\n    // Return false so it doesn't block the rest weapon action\n    false\n},\n{\n    // prevent holding down\n    GVAR(isDownStateKey1) = false;\n\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(GVAR(enabled) && FUNC(canUseFCS)) exitWith {false};\n\n    // Statement\n    [vehicle ACE_player, [ACE_player] call EFUNC(common,getTurretIndex)] call FUNC(keyUp);\n    false\n},\n[15, [false, false, false]], false] call CBA_fnc_addKeybind;  //Tab Key\n\n[\"ACE3 Vehicles\", QGVAR(adjustRangeUp), localize LSTRING(AdjustRangeUp),\n{\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(call FUNC(canUseFCS)) exitWith {false};\n\n    // Statement\n    [vehicle ACE_player, [ACE_player] call EFUNC(common,getTurretIndex), 50] call FUNC(adjustRange);\n    true\n},\n{false},\n[201, [false, false, false]], false] call CBA_fnc_addKeybind;  //PageUp Key\n\n[\"ACE3 Vehicles\", QGVAR(adjustRangDown), localize LSTRING(AdjustRangeDown),\n{\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(call FUNC(canUseFCS)) exitWith {false};\n\n    // Statement\n    [vehicle ACE_player, [ACE_player] call EFUNC(common,getTurretIndex), -50] call FUNC(adjustRange);\n    true\n},\n{false},\n[209, [false, false, false]], false] call CBA_fnc_addKeybind; //PageDown Key\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nGVAR(enabled) = false;\nGVAR(time) = 0;\nGVAR(position) = [0,0,0];\n\nif (!hasInterface) exitWith {};\n\n#include \"initKeybinds.sqf\"\n\n[\"ace_infoDisplayChanged\", {\n    if (!isNull ((_this select 0) displayCtrl 1713151)) then {\n        uiNamespace setVariable [\"ACE_dlgRangefinder\", _this select 0];\n        ((_this select 0) displayCtrl 151) ctrlSetTextColor [0,0,0,0];\n    };\n}] call CBA_fnc_addEventHandler;\n\n// Register fire event handler\n[\"ace_firedPlayerVehicle\", DFUNC(firedEH)] call CBA_fnc_addEventHandler;\n[\"ace_firedPlayerVehicleNonLocal\", DFUNC(firedEH)] call CBA_fnc_addEventHandler;\n\n// Register event for global updates\n[QGVAR(forceUpdate), {[ACE_player] call FUNC(onForceUpdate)}] call CBA_fnc_addEventHandler;\n\n#ifdef DEBUG_MODE_FULL\ncall compile preprocessFileLineNumbers QPATHTOF(functions\\dev_debugConfigs.sqf);\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_adjustRange.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Adjusts the currently zeroed distance.\n *\n * Arguments:\n * 0: The vehicle in question <OBJECT>\n * 1: The Turrets that the Vehicle has <ARRAY>\n * 2: The amount to add to the distance (can be negative) <NUMMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, [], 5] call ace_fcs_fnc_adjustRange\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_turret\", \"_delta\"];\n\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\n\nprivate _min = getNumber (_turretConfig >> QGVAR(MinDistance));\nprivate _max = getNumber (_turretConfig >> QGVAR(MaxDistance));\n\nprivate _distance = _vehicle getVariable [format [\"%1_%2\", QGVAR(Distance), _turret], _min];\nTRACE_4(\"\",_distance,_delta,_min,_max);\n\n_distance = _distance + _delta;\n_distance = _distance min _max;\n_distance = _distance max _min;\n\n[_vehicle, _turret, _distance] call FUNC(keyUp);\n",
        "functionName": "ace_fcs_fnc_adjustRange"
      },
      {
        "fileName": "fnc_calculateSolution.sqf",
        "content": "/*\n * Author: VKing\n * Calculate FCS solution\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret <ARRAY>\n * 2: Target distance <NUMBER>\n * 3: Azimuth offset <UNKNOWN>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car, [turret], 5, ?] call ace_fcs_fnc_calculateSolution\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_vehicle\",\"_turret\",\"_distance\",\"_angleTarget\"];\nTRACE_4(\"params\",_vehicle,_turret,_distance,_angleTarget);\n\nprivate _FCSInitSpeed = [];\nprivate _FCSMagazines = [];\nprivate _FCSElevation = [];\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\n\n{\n    private _magazine = _x;\n    private _ammo = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\n\n    private _bulletSimulation = getText (configFile >> \"CfgAmmo\" >> _ammo >> \"simulation\");\n    if !(_bulletSimulation == \"shotMissile\") then {\n        private _maxElev     = getNumber (_turretConfig >> \"maxElev\");\n        private _initSpeed   = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\n        private _airFriction = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\");\n\n        {\n            private _weapon = _x;\n            private _muzzles = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"muzzles\");\n            private _weaponMagazines = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\n\n            {\n                if (_x != \"this\") then {\n                    _weaponMagazines append getArray (configFile >> \"CfgWeapons\" >> _weapon >> _x >> \"magazines\");\n                };\n                false\n            } count _muzzles;\n\n            // Fix the `in` operator being case sensitive and BI fucking up the spelling of their own classnames\n            private _weaponMagazinesCheck = _weaponMagazines apply {toLower _x};\n\n            // Another BIS fix: ShotBullet simulation uses weapon initSpeed, others ignore it\n            if (toLower _magazine in _weaponMagazinesCheck && {_bulletSimulation == \"shotBullet\"}) exitWith {\n                private _initSpeedCoef = getNumber(configFile >> \"CfgWeapons\" >> _weapon >> \"initSpeed\");\n\n                if (_initSpeedCoef < 0) then {\n                    _initSpeed = _initSpeed * -_initSpeedCoef;\n                };\n\n                if (_initSpeedCoef > 0) then {\n                    _initSpeed = _initSpeedCoef;\n                };\n            };\n            false\n        } count (_vehicle weaponsTurret _turret);\n\n        private _offset = \"ace_fcs\" callExtension format [\"%1,%2,%3,%4\", _initSpeed, _airFriction, _angleTarget, _distance];\n        _offset = parseNumber _offset;\n\n        _FCSInitSpeed pushBack _initSpeed;\n        _FCSMagazines pushBack _magazine;\n        _FCSElevation pushBack _offset;\n    };\n    false\n} count (_vehicle magazinesTurret _turret);\n\n[_vehicle, format [\"%1_%2\", QGVAR(Distance),  _turret],     _distance] call EFUNC(common,setVariablePublic);\n[_vehicle, format [\"%1_%2\", QGVAR(InitSpeed), _turret], _FCSInitSpeed] call EFUNC(common,setVariablePublic);\n[_vehicle, format [\"%1_%2\", QGVAR(Magazines), _turret], _FCSMagazines] call EFUNC(common,setVariablePublic);\n[_vehicle, format [\"%1_%2\", QGVAR(Elevation), _turret], _FCSElevation] call EFUNC(common,setVariablePublic);\n",
        "functionName": "ace_fcs_fnc_calculateSolution"
      },
      {
        "fileName": "fnc_canResetFCS.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Called from config. Can player reset FCS?\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * call ace_fcs_fnc_canResetFCS\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\ncount ((vehicle _unit) getVariable [format [\"%1_%2\", QGVAR(Magazines), [_unit] call EFUNC(common,getTurretIndex)], []]) > 1 // return\n",
        "functionName": "ace_fcs_fnc_canResetFCS"
      },
      {
        "fileName": "fnc_canUseFCS.sqf",
        "content": "/*\n * Author: commy2\n * Called from config. Returns true if the player is a gunner and the players current vehicle has a FCS.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [] call ace_fcs_fnc_canUseFCS\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ngetNumber ([configFile >> \"CfgVehicles\" >> typeOf vehicle ACE_player, [ACE_player] call EFUNC(common,getTurretIndex)] call EFUNC(common,getTurretConfigPath) >> QGVAR(Enabled)) == 1\n&& {cameraView == \"GUNNER\"}\n&& {!([ACE_player] call CBA_fnc_canUseWeapon)} //Not Turned Out\n&& {cameraOn != (getConnectedUAV ACE_player)} //Not Controlling a UAV\n",
        "functionName": "ace_fcs_fnc_canUseFCS"
      },
      {
        "fileName": "fnc_canUseRangefinder.sqf",
        "content": "/*\n * Author: commy2\n * Returns true if the laser distance measurement can be read from the engine.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * call ace_fcs_fnc_canUseRangeFinder\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n!isNull ((uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull]) displayCtrl 1713151)\n&& {cameraView == \"GUNNER\"} // return\n",
        "functionName": "ace_fcs_fnc_canUseRangefinder"
      },
      {
        "fileName": "fnc_firedEH.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Adjusts the direction of a shell. Called from the unified fired EH only if the gunner is a player.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_fcs_fnc_firedEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nprivate _FCSMagazines = _vehicle getVariable [format [\"%1_%2\", QGVAR(Magazines), _turret], []];\n\nif !(_magazine in _FCSMagazines) exitWith {};\n\nprivate _FCSInitSpeed = _vehicle getVariable format [\"%1_%2\", QGVAR(InitSpeed), _turret];\nprivate _FCSElevation = _vehicle getVariable format [\"%1_%2\", QGVAR(Elevation), _turret];\n\n// GET ELEVATION OFFSET AND INITSPEED OF CURRENT MAGAZINE\nprivate _offset = 0;\nprivate _initSpeed = 0;\n{\n    if (_x == _magazine) exitWith {\n        _offset = _FCSElevation select _forEachIndex;\n        _initSpeed = _FCSInitSpeed select _forEachIndex;\n    };\n} forEach _FCSMagazines;\n\n// Calculate the correction due to vanilla zeroing\nprivate _zeroDistance = currentZeroing _gunner;\nif (_zeroDistance > 0) then {\n    private _weaponCombo = [_weapon, _magazine, _ammo, _zeroDistance];\n    if !(_weaponCombo isEqualTo (_gunner getVariable [QGVAR(lastWeaponCombo), []])) then {\n        private _airFriction = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\");\n        private _antiOffset = \"ace_fcs\" callExtension format [\"%1,%2,%3,%4\", _initSpeed, _airFriction, 0, _zeroDistance];\n        _antiOffset = parseNumber _antiOffset;\n\n        _gunner setVariable [QGVAR(lastWeaponCombo), _weaponCombo];\n        _gunner setVariable [QGVAR(lastAntiOffset), _antiOffset];\n    };\n    private _antiOffset = _gunner getVariable QGVAR(lastAntiOffset);\n\n    _offset = _offset - _antiOffset;\n    TRACE_4(\"fired\",_gunner, currentZeroing _gunner, _antiOffset, _offset);\n};\n\n[_projectile, (_vehicle getVariable format [\"%1_%2\", QGVAR(Azimuth), _turret]), _offset, 0] call EFUNC(common,changeProjectileDirection);\n\n// Remove the platform velocity\nif (vectorMagnitude velocity _vehicle > 2) then {\n    private _sumVelocity = (velocity _projectile) vectorDiff (velocity _vehicle);\n\n    _projectile setVelocity _sumVelocity;\n};\n\n// Air burst missile\n// handle locally only\nif (!local _gunner) exitWith {};\n\nif (getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(Airburst)) == 1) then {\n    private _zeroing = _vehicle getVariable [format [\"%1_%2\", QGVAR(Distance), _turret], currentZeroing _gunner];\n\n    if (_zeroing < 50) exitWith {};\n    if (_zeroing > 1500) exitWith {};\n\n    [FUNC(handleAirBurstAmmunitionPFH), 0, [_vehicle, _projectile, _zeroing]] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_fcs_fnc_firedEH"
      },
      {
        "fileName": "fnc_getAngle.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Calculates the angle offset necessary to hit the current target.\n *\n * Arguments:\n * 0: distance to target in meters <NUMBER>\n * 1: current angle of the turret <NUMBER>\n * 2: maximum elevation of the turret <NUMBER>\n * 3: initSpeed of the projectile <NUMBER>\n * 4: airFriction of the projectile <NUMBER>\n * 5: maximum timeToLive of the projectile <NUMBER>\n * 6: simulationStep of the projectile <NUMBER>\n *\n * Return Value:\n * offset from the current angle necessary to hit the target <NUMBER>\n *\n * Example:\n * [1, 2, 3, 4, 5, 6, 7] call ace_fcs_fnc_getAngle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define PRECISION 0.1\n\nparams [\"_distance\", \"_angleTarget\", \"_maxElev\", \"_initSpeed\", \"_airFriction\", \"_timeToLive\", \"_simulationStep\"];\n\nif (_simulationStep == 0) exitWith {_angleTarget};\n\nprivate _fnc_traceBullet = {\n    params [\"_distance\", \"_angleTarget\", \"_maxElev\", \"_initSpeed\", \"_airFriction\", \"_timeToLive\", \"_simulationStep\", \"_angle\"];\n\n    _angle = _angle - _angleTarget;\n    _angleTarget = 0;\n\n    private _posTargetX = (cos _angleTarget) * _distance;\n    private _posTargetY = (sin _angleTarget) * _distance;\n\n    private _posX = 0;\n    private _posY = 0;\n\n    private _velocityX = (cos _angle) * _initSpeed;\n    private _velocityY = (sin _angle) * _initSpeed;\n\n    // trace the path of the bullet\n    for \"_i\" from 1 to ((floor (_timeToLive / _simulationStep)) + 1) do {\n        private _velocityMagnitude = sqrt (_velocityX^2 + _velocityY^2);\n\n        _velocityX = _velocityX + _simulationStep * (_velocityX * _velocityMagnitude * _airFriction);\n        _velocityY = _velocityY + _simulationStep * (_velocityY * _velocityMagnitude * _airFriction - 9.81);\n\n        _posX = _posX + _velocityX * _simulationStep;\n        _posY = _posY + _velocityY * _simulationStep;\n\n        if (_posX >= _posTargetX) exitWith {}; // bullet passed the target\n    };\n    _posY - _posTargetY\n};\n\nprivate _data = [_distance, _angleTarget, _maxElev, _initSpeed, _airFriction, _timeToLive, _simulationStep, _maxElev];\n\nif (_data call _fnc_traceBullet < 0) exitWith {_maxElev - _angleTarget};\n\n// Newton Method / Secand Method\nprivate _angle1 = _angleTarget;\nprivate _angle2 = _maxElev;\nprivate _it2 = 0;\n\n_data set [7, _maxElev];\nprivate _f1 = _data call _fnc_traceBullet;\n\nif (abs _f1 <= PRECISION) exitWith {0};\n\nwhile {abs _f1 > PRECISION} do {\n    _data set [7, _angle2];\n    private _f2 = _data call _fnc_traceBullet;\n\n    _angle1 = _angle2;\n    _angle2 = _angle2 - _f2 * (_angle2 - _angle1) / (_f2 - _f1);\n\n    _f1 = _f2;\n    _it2 = _it2 + 1;\n};\n\n_angle2 - _angleTarget\n",
        "functionName": "ace_fcs_fnc_getAngle"
      },
      {
        "fileName": "fnc_getRange.sqf",
        "content": "/*\n * Author: commy2\n * Read laser distance measurement from engine.\n *\n * Arguments:\n * 0: Measurement Accuracy (default: 1) <NUMBER>\n * 1: Maximum measure distance (default: 5000) <NUMBER>\n * 2: Minimum measure distance (default: 0) <NUMBER>\n * 3: Blank display on range error (default: false) <BOOL>\n *\n * Return Value:\n * Measured distance <NUMBER>\n *\n * Example:\n * [5, 6, 7, true] call ace_fcs_fnc_getRange\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_accuracy\",1], [\"_maxDistance\",5000], [\"_minDistance\",0], [\"_blank\",false]];\n\ndisableSerialization;\nprivate _dlgRangefinder = uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull];\n\nprivate _distance = parseNumber ctrlText (_dlgRangefinder displayCtrl 151);\n\nif (_distance == 0) then {\n    _distance = _this call EFUNC(common,getTargetDistance);\n} else {\n    // Is distance out of bound?\n    _distance = _distance min _maxDistance;\n    _distance = _distance max _minDistance;\n\n    // If don't let accuracy be less than 1\n    _accuracy = _accuracy max 1;\n    _distance = (round (_distance/_accuracy)) * _accuracy;\n};\n\n// Change the display if the range is out of bounds\nif (_distance >= _maxDistance || _distance <= _minDistance) then {\n    if (_blank) then {\n        (_dlgRangefinder displayCtrl 1713151) ctrlSetText \"----\";\n    } else {\n        (_dlgRangefinder displayCtrl 1713151) ctrlSetText ([_distance, 4, 0] call CBA_fnc_formatNumber) + \"*\";\n    };\n} else {\n    (_dlgRangefinder displayCtrl 1713151) ctrlSetText ([_distance, 4, 0] call CBA_fnc_formatNumber);\n};\n\n_distance\n",
        "functionName": "ace_fcs_fnc_getRange"
      },
      {
        "fileName": "fnc_handleAirBurstAmmunitionPFH.sqf",
        "content": "/*\n * Author: commy2\n * Handle Air burst ammunition. Called from per frame handler.\n *\n * Arguments:\n * -\n *\n * Return Value:\n * None\n *\n * Example:\n * [[array]] call ace_fcs_fnc_handleAirBurstAummunitionPFH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(_this select 0) params [\"_vehicle\", \"_projectile\", \"_zeroing\"];\n\n// remove pfh if the projectile died before arriving\nif (isNull _projectile || {!alive _projectile}) exitWith {\n    [_this select 1] call CBA_fnc_removePerFrameHandler;\n};\n\n// wait if not there\nif (_projectile distance _vehicle < _zeroing) exitWith {};\n\n// explode\nprivate _position = getPosATL _projectile;\n\nprivate _subMunition = createVehicle [\"ACE_B_35mm_ABM_Helper\", _position, [], 0, \"FLY\"];\n\n_subMunition setPosATL _position;\n_subMunition setVelocity [0, 0, -10];\n\ndeleteVehicle _projectile;\n\n[_this select 1] call CBA_fnc_removePerFrameHandler;\n",
        "functionName": "ace_fcs_fnc_handleAirBurstAmmunitionPFH"
      },
      {
        "fileName": "fnc_keyDown.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Starts watching the target for sideways correction.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car, [turret]] call ace_fcs_fnc_keyDown\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_turret\"];\n\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\n\n// Update display for infantry rangefinders\nif (_vehicle == ACE_player) exitWith {[5,5500,25,true] call FUNC(getRange)};\n\nprivate _distance = [\n    getNumber (_turretConfig >> QGVAR(DistanceInterval)),\n    getNumber (_turretConfig >> QGVAR(MaxDistance)),\n    getNumber (_turretConfig >> QGVAR(MinDistance))\n] call FUNC(getRange);\n\nif !(!GVAR(enabled) && FUNC(canUseFCS)) exitWith {};\n\nGVAR(Enabled) = true;\nGVAR(time) = CBA_missionTime;\n\n\nprivate _weaponDirection = _vehicle weaponDirection (_vehicle currentWeaponTurret _turret);  // @todo doesn't work for sub turrets\n\nif (_turret isEqualTo ([_vehicle] call EFUNC(common,getTurretCommander))) then {\n    _weaponDirection = eyeDirection _vehicle;\n};\n\nif (_weaponDirection isEqualTo [0,0,0]) then {  // dummy value for non main turrets\n    _weaponDirection = [1,0,0];\n};\n\nGVAR(Position) = (getPosASL _vehicle) vectorAdd (_weaponDirection vectorMultiply _distance);\n\n[_vehicle,_turret,_distance,0] call FUNC(calculateSolution);\n",
        "functionName": "ace_fcs_fnc_keyDown"
      },
      {
        "fileName": "fnc_keyUp.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Calculates the offsets for all weapons needed to hit the current target.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car, [turret]] call ace_fcs_fnc_keyUp\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_turret\", \"_distance\", [\"_showHint\", false], [\"_playSound\", true]];\nTRACE_5(\"params\",_vehicle,_turret,_distance,_showHint,_playSound);\n\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\n\nif (isNil \"_distance\") then {\n    _distance = [\n        getNumber (_turretConfig >> QGVAR(DistanceInterval)),\n        getNumber (_turretConfig >> QGVAR(MaxDistance)),\n        getNumber (_turretConfig >> QGVAR(MinDistance))\n    ] call FUNC(getRange);\n} else {\n    ((uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull]) displayCtrl 1713151) ctrlSetText ([_distance, 4, 0] call CBA_fnc_formatNumber);\n};\n\n// MOVING TARGETS\nprivate _weapon = _vehicle currentWeaponTurret _turret;\nprivate _weaponDirection = _vehicle weaponDirection _weapon; // @todo doesn't work for sub turrets\n\nif (_turret isEqualTo ([_vehicle] call EFUNC(common,getTurretCommander))) then {\n    _weaponDirection = eyeDirection _vehicle;\n};\n\nif (_weaponDirection isEqualTo [0,0,0]) then {  // dummy value for non main turrets\n    _weaponDirection = [1,0,0];\n};\n\nprivate _angleTarget = asin (_weaponDirection select 2);\n\nprivate _movingAzimuth = 0;\n\nif (CBA_missionTime - GVAR(time) > 1 && GVAR(time) != -1 && isNil {_this select 2}) then {\n    // calculate speed of target\n    private _posTarget = (getPosASL _vehicle) vectorAdd (_weaponDirection vectorMultiply _distance);\n    private _velocityTarget = (_posTarget vectorDiff GVAR(position)) vectorMultiply (1 / (CBA_missionTime - GVAR(time)));\n\n    // estimate time to target\n    private _magazine       = _vehicle currentMagazineTurret _turret;\n    private _ammo           = getText   (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\n    private _initSpeed      = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\n    private _airFriction    = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\");\n    private _timeToLive     = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"timeToLive\");\n    private _simulationStep = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"simulationStep\");\n    private _initSpeedCoef  = getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"initSpeed\");\n    private _simulationType = getText (configFile >> \"CfgAmmo\" >> _ammo >> \"simulation\");\n\n    // More BIS fix\n    if (_simulationType == \"shotBullet\") then {\n        if (_initSpeedCoef < 0) then {\n            _initSpeed = _initSpeed * - _initSpeedCoef;\n        };\n\n        if (_initSpeedCoef > 0) then {\n            _initSpeed = _initSpeedCoef;\n        };\n    };\n\n    if (_simulationStep != 0) then {\n        private _posX = 0;\n        private _velocityX = _initSpeed;\n        private _velocityY = 0;\n        private _timeToTarget = 0;\n\n        for \"_i\" from 1 to (floor (_timeToLive / _simulationStep) + 1) do {\n            _posX = _posX + _velocityX * _simulationStep;\n\n            if (_posX >= _distance) exitWith { // bullet passed the target\n                _timeToTarget = _i * _simulationStep;\n            };\n\n            private _velocityMagnitude = sqrt (_velocityX ^ 2 + _velocityY ^ 2);\n\n            _velocityX = _velocityX + _velocityX * _velocityMagnitude * _airFriction * _simulationStep;\n            _velocityY = _velocityY + _velocityY * _velocityMagnitude * _airFriction * _simulationStep - 9.81 * _simulationStep;\n        };\n\n        // calculate offsets\n        private _posArrival = _posTarget vectorAdd (_velocityTarget vectorMultiply _timeToTarget);\n        private _dirArrival = (_posArrival vectorDiff getPosASL _vehicle) vectorMultiply (1 / (_posArrival vectorDistance getPosASL _vehicle));\n\n        _movingAzimuth = ((_dirArrival select 0) atan2 (_dirArrival select 1)) - ((_weaponDirection select 0) atan2 (_weaponDirection select 1));\n        _angleTarget = asin (_dirArrival select 2);\n        _distance = floor (_posArrival distance (getPosASL _vehicle));\n    };\n};\n\nGVAR(enabled) = false;\nGVAR(time) = -1;\n\n// CALCULATE AZIMUTH CORRECTION\nprivate _viewDiff = _vehicle getVariable format [\"%1_%2\", QGVAR(ViewDiff), _turret];\nprivate _FCSAzimuth = _movingAzimuth;\n\nif (_viewDiff != 0) then {\n    _FCSAzimuth = (atan (_distance / _viewDiff) - (abs _viewDiff / _viewDiff) * 90) + _movingAzimuth;\n};\n\n[_vehicle, format [\"%1_%2\", QGVAR(Azimuth),   _turret],   _FCSAzimuth] call EFUNC(common,setVariablePublic);\n\n// CALCULATE SOLUTION\n[_vehicle,_turret,_distance,_angleTarget] call FUNC(calculateSolution);\n\nif (_playSound) then {\n    playSound \"ACE_Sound_Click\";\n};\n\nif (_showHint) then {\n    [format [\"%1: %2\", localize LSTRING(ZeroedTo), _distance]] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_fcs_fnc_keyUp"
      },
      {
        "fileName": "fnc_onForceUpdate.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * Nothing\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_fcs_fnc_onForceUpdate\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _vehicle = vehicle _unit;\n\nif !([_unit, _vehicle, []] call EFUNC(common,canInteractWith)) exitWith {false};\nif !((!GVAR(enabled) && FUNC(canUseFCS)) || FUNC(canUseRangefinder)) exitWith {false};\n\nprivate _turret = [_unit] call EFUNC(common,getTurretIndex);\n\n[_vehicle, _turret] call FUNC(keyDown);\n[_vehicle, _turret] call FUNC(keyUp);\n",
        "functionName": "ace_fcs_fnc_onForceUpdate"
      },
      {
        "fileName": "fnc_reset.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Resets the FCS to default.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car, [turret]] call ace_fcs_fnc_reset\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_turret\"];\n\n[_vehicle, format [\"%1_%2\", QGVAR(Distance),  _turret],  0] call EFUNC(common,setVariablePublic);\n[_vehicle, format [\"%1_%2\", QGVAR(Magazines), _turret], []] call EFUNC(common,setVariablePublic);\n[_vehicle, format [\"%1_%2\", QGVAR(Elevation), _turret],  0] call EFUNC(common,setVariablePublic);\n[_vehicle, format [\"%1_%2\", QGVAR(Azimuth),   _turret],  0] call EFUNC(common,setVariablePublic);\n\n[localize LSTRING(HasBeenReset)] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_fcs_fnc_reset"
      },
      {
        "fileName": "fnc_updateRangeHUD.sqf",
        "content": "/*\n * Author: commy2\n * Update compatible info elements.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_fcs_fnc_updateRangeHUD\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgRangefinder = uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull];\n\n(_dlgRangefinder displayCtrl 1713151) ctrlSetText ctrlText (_dlgRangefinder displayCtrl 151);\n",
        "functionName": "ace_fcs_fnc_updateRangeHUD"
      },
      {
        "fileName": "fnc_vehicleInit.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Checks if a vehicle is equipped with an FCS and if so, adds the fired event handler. Execute on server.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car] call ace_fcs_fnc_vehicleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\n{\n    private _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _x] call EFUNC(common,getTurretConfigPath);\n\n    if (getNumber (_turretConfig >> QGVAR(Enabled)) == 1) then {\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Distance),  _x],  0, true];\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Magazines), _x], [], true];\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Elevation), _x], [], true];\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Azimuth),   _x],  0, true];\n\n        // calculate offset between gunner camera and muzzle position\n        if !(_vehicle isKindOf \"Air\") then {\n\n            private _gunBeg = getText (_turretConfig >> \"gunBeg\");\n            private _gunnerView = getText (_turretConfig >> \"memoryPointGunnerOptics\");\n\n            private _gunBegPos = (_vehicle selectionPosition _gunBeg) select 0;\n            private _gunnerViewPos = (_vehicle selectionPosition _gunnerView) select 0;\n            private _viewDiff = _gunBegPos - _gunnerViewPos;\n\n            _vehicle setVariable [format [\"%1_%2\", QGVAR(ViewDiff), _x], _viewDiff, true];\n        } else {\n            _vehicle setVariable [format [\"%1_%2\", QGVAR(ViewDiff), _x],         0, true];\n        };\n    };\n    false\n} count allTurrets _vehicle;\n",
        "functionName": "ace_fcs_fnc_vehicleInit"
      }
    ]
  },
  {
    "component": "finger",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ace_settingsInitialized\", {\n    //If not enabled, dont't bother adding eventhandler\n    TRACE_1(\"ace_settingsInitialized eh\", GVAR(enabled));\n    if (!GVAR(enabled)) exitWith {};\n    \n    GVAR(lastFPTime) = -1;\n    GVAR(fingersHash) = [] call CBA_fnc_hashCreate;\n    GVAR(pfeh_id) = -1;\n    \n    [QGVAR(fingered), {_this call FUNC(incomingFinger)}] call CBA_fnc_addEventHandler;\n}] call CBA_fnc_addEventHandler;\n\n//Add Keybind:\n[\"ACE3 Common\", QGVAR(finger), [(localize LSTRING(keyComb)), (localize LSTRING(keyComb_description))],\n{\n    if (!GVAR(enabled)) exitWith {false};\n    _this call FUNC(keyPress);\n},\n{false},\n[41, [true, false, false]], true] call CBA_fnc_addKeybind; // Shift + Tilda (hold)\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_incomingFinger.sqf",
        "content": "/*\n * Author: TheDrill, PabstMirror\n * Recieve an finger event, adds to the array (or updates if already present) and starts PFEH if not already running\n *\n * Arguments:\n * 0: Source Unit (can be self) <OBJECT>\n * 1: Position being pointed at (ASL) <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, [1,2,3]] call ace_finger_fnc_incomingFinger;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_sourceUnit\", \"_fingerPosPrecise\", \"_distance\"];\n\n// Add some random float to location if it's not our own finger:\nprivate _fingerPos = if (_sourceUnit == ACE_player) then {\n    _fingerPosPrecise\n} else {\n    _fingerPosPrecise vectorAdd ([random (2 * FP_RANDOMIZATION_X) - FP_RANDOMIZATION_X, random (2 * FP_RANDOMIZATION_X) - FP_RANDOMIZATION_X, random (2 * FP_RANDOMIZATION_Y) - FP_RANDOMIZATION_Y] vectorMultiply _distance)\n};\n\nTRACE_3(\"incoming finger:\", _sourceUnit, _fingerPosPrecise, _fingerPos);\n\nprivate _data = [diag_tickTime, _fingerPos, ([_sourceUnit, false, true] call EFUNC(common,getName))];\n[GVAR(fingersHash), _sourceUnit, _data] call CBA_fnc_hashSet;\n\nif (GVAR(pfeh_id) == -1) then {\n    GVAR(pfeh_id) = [DFUNC(perFrameEH), 0, []] call CBA_fnc_addPerFrameHandler;\n    TRACE_1(\"Started PFEH\", GVAR(pfeh_id));\n};\n",
        "functionName": "ace_finger_fnc_incomingFinger"
      },
      {
        "fileName": "fnc_keyPress.sqf",
        "content": "/*\n * Author: TheDrill, PabstMirror\n * On keypress, point and send position to nearby players\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Key Handeled <BOOL>\n *\n * Example:\n * [] call ace_finger_fnc_keyPress;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n\nif (!alive ACE_player) exitWith {false};\n// Conditions: canInteract\nif !([ACE_player, ACE_player, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n//make sure player is dismounted or in a static weapon:\nif ((ACE_player != vehicle ACE_player) && {!((vehicle ACE_player) isKindOf \"StaticWeapon\")}) exitWith {false};\n//Check camera view (not in GUNNER)\nif !(cameraView in [\"INTERNAL\", \"EXTERNAL\"]) exitWith {false};\n//Exit if run recently (run every 1 seconds)\nif (diag_tickTime < (GVAR(lastFPTime) + FP_ACTION_TIMEOUT)) exitWith {true};\n\nGVAR(lastFPTime) = diag_tickTime;\n\n// Find where is the finger pointing\nprivate _originASL = AGLtoASL positionCameraToWorld [0, 0, 0];\nprivate _fingerPosASL = AGLtoASL positionCameraToWorld [0, 0, FP_DISTANCE];\nprivate _intersections = lineIntersectsSurfaces [_originASL, _fingerPosASL, ACE_player, vehicle ACE_player, true, 1];\nif !(_intersections isEqualTo []) then {\n    _fingerPosASL = _intersections select 0 select 0;\n};\n\n// Find who should the finger be sent to\nprivate _playerEyePosASL = eyePos ACE_player;\nprivate _sendFingerToPlayers = [];\nprivate _nearbyMen = (ACE_player nearObjects [\"CAManBase\", (GVAR(maxRange) + 2)]);\n{\n    _nearbyMen append (crew _x);\n} count (ACE_player nearObjects [\"StaticWeapon\", (GVAR(maxRange) + 2)]);\n{\n    if ((((eyePos _x) vectorDistance _playerEyePosASL) < GVAR(maxRange)) &&\n            {alive _x} &&\n            {(_x == (vehicle _x)) || {(vehicle _x) isKindOf \"StaticWeapon\"}} &&\n            {GVAR(indicatorForSelf) || {_x != ACE_player}} &&\n            {!(lineIntersects [(eyePos _x), _playerEyePosASL, ACE_player, _x])} &&\n            {[_x] call EFUNC(common,isPlayer)}) then {\n\n        _sendFingerToPlayers pushBack _x;\n    };\n    true\n} count _nearbyMen;\n\nTRACE_1(\"sending finger to\",_sendFingerToPlayers);\n\n[QGVAR(fingered), [ACE_player, _fingerPosASL, _originASL vectorDistance _fingerPosASL], _sendFingerToPlayers] call CBA_fnc_targetEvent;\n\n// BI gestures do not work underwater, play custom \"point\" gesture if loaded\nif ([\"ace_gestures\"] call EFUNC(common,isModLoaded)) then {\n    QEGVAR(gestures,point) call EFUNC(gestures,playSignal); // Works underwater\n} else {\n    [ACE_player, \"GestureGo\"] call EFUNC(common,doGesture); // Does not work underwater\n};\n\ntrue\n",
        "functionName": "ace_finger_fnc_keyPress"
      },
      {
        "fileName": "fnc_moduleSettings.sqf",
        "content": "/*\n * Author: PabstMirror\n * Module for fingering settings\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic] call ace_finger_fnc_moduleSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(maxRange), \"maxRange\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_finger_fnc_moduleSettings"
      },
      {
        "fileName": "fnc_perFrameEH.sqf",
        "content": "/*\n * Author: TheDrill, PabstMirror\n * The perFrameEventHandler to draw the icons\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [fromCBA] call ace_finger_fnc_perFrameEH;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!alive ACE_player) then {GVAR(fingersHash) = [] call CBA_fnc_hashCreate;};\n// Conditions: canInteract\nif !([ACE_player, ACE_player, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) then {GVAR(fingersHash) = [] call CBA_fnc_hashCreate;};\n// Make sure player is dismounted or in a static weapon:\nif ((ACE_player != vehicle ACE_player) && {!((vehicle ACE_player) isKindOf \"StaticWeapon\")}) then {GVAR(fingersHash) = [] call CBA_fnc_hashCreate;};\n\nprivate _iconSize = BASE_SIZE * 0.10713 * (call EFUNC(common,getZoom));\n\n[+GVAR(fingersHash), {\n    //IGNORE_PRIVATE_WARNING [\"_key\", \"_value\"];\n    _value params [\"_lastTime\", \"_pos\", \"_name\"];\n    private _timeLeftToShow = _lastTime + FP_TIMEOUT - diag_tickTime;\n    if (_timeLeftToShow <= 0) then {\n        [GVAR(fingersHash), _key] call CBA_fnc_hashRem;\n    } else {\n        private _drawColor = + GVAR(indicatorColor);\n        // Fade out:\n        _drawColor set [3, ((_drawColor select 3) * ((_timeLeftToShow min 0.5) / 0.5))];\n\n        drawIcon3D [QPATHTOF(UI\\fp_icon2.paa), _drawColor, ASLtoAGL _pos, _iconSize, _iconSize, 0, _name, 1, 0.03, \"RobotoCondensed\"];\n    };\n}] call CBA_fnc_hashEachPair;\n\nif ((GVAR(fingersHash) select 1) isEqualTo []) then {\n    TRACE_1(\"Ending PFEH\", GVAR(pfeh_id));\n    [GVAR(pfeh_id)] call CBA_fnc_removePerFrameHandler;\n    GVAR(pfeh_id) = -1;\n};\n",
        "functionName": "ace_finger_fnc_perFrameEH"
      }
    ]
  },
  {
    "component": "flashlights",
    "files": [
      {
        "fileName": "XEH_postInitClient.sqf",
        "content": "#include \"script_component.hpp\"\n\n// Exit on Headless as well\nif (!hasInterface) exitWith {};\n\nLOG(MSG_INIT);\n\n//todo: make flashlights attachable to players"
      }
    ],
    "functions": []
  },
  {
    "component": "flashsuppressors",
    "files": [],
    "functions": []
  },
  {
    "component": "fonts",
    "files": [],
    "functions": []
  },
  {
    "component": "frag",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (isServer) then {\n    GVAR(lastFragTime) = -1;\n    [QGVAR(frag_eh), {_this call FUNC(frago);}] call CBA_fnc_addEventHandler;\n};\n\n[\"ace_settingsInitialized\", {\n    if (!GVAR(enabled)) exitWith {};\n\n    // Register fire event handler\n    [\"ace_firedPlayer\", LINKFUNC(fired)] call CBA_fnc_addEventHandler;\n    [\"ace_firedNonPlayer\", LINKFUNC(fired)] call CBA_fnc_addEventHandler;\n    [\"ace_firedPlayerVehicle\", LINKFUNC(fired)] call CBA_fnc_addEventHandler;\n    [\"ace_firedNonPlayerVehicle\", LINKFUNC(fired)] call CBA_fnc_addEventHandler;\n\n    addMissionEventHandler [\"EachFrame\", {call FUNC(masterPFH)}];\n}] call CBA_fnc_addEventHandler;\n\n// Cache for ammo type configs\nGVAR(cacheRoundsTypesToTrack) = [false] call CBA_fnc_createNamespace;\n\n\n// Debug stuff:\n\n#ifdef DRAW_FRAG_INFO\n[] call FUNC(dev_startTracing);\n#endif\n\n#ifdef DEBUG_MODE_FULL\n[true, true, 30] call FUNC(dev_debugAmmo);\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(blackList) = [];\nGVAR(traceFrags) = false;\n\nGVAR(spallHPData) = [];\nGVAR(spallIsTrackingCount) = 0;\n\nGVAR(traceID) = -1;\nGVAR(traces) = [];\nGVAR(tracesStarted) = false;\n\nGVAR(lastIterationIndex) = 0;\nGVAR(objects) = [];\nGVAR(arguments) = [];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addBlackList.sqf",
        "content": "/*\n * Author: Jaynus, NouberNou\n * Adds a round to the blacklist (will be ignored).\n *\n * Arguments:\n * 0: Projectile <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bullet] call ace_frag_fnc_addBlackList\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_round\"];\nTRACE_1(\"addBlackList\",_round);\n\nGVAR(blackList) pushBack _round;\n",
        "functionName": "ace_frag_fnc_addBlackList"
      },
      {
        "fileName": "fnc_addPfhRound.sqf",
        "content": "/*\n * Author: Jaynus, NouberNou\n * Starts tracking a round that will frag.\n * Should only be called once per round.\n *\n * Arguments:\n * 0: Shooter <OBJECT>\n * 1: Ammo classname <STRING>\n * 2: Projectile <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"handGrenade\", bullet] call ace_frag_fnc_addPfhRound\n *\n * Public: No\n */\n//#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_gun\", \"_type\", \"_round\"];\nTRACE_3(\"addPfhRound\",_gun,_type,_round);\n\nif (!GVAR(enabled)) exitWith {TRACE_1(\"setting disabled\",_this);};\n\nif (!alive _round) exitWith {TRACE_1(\"round dead?\",_this);};\n\nif (_round in GVAR(blackList)) exitWith {\n    TRACE_1(\"round in blackList\",_this);\n    REM(GVAR(blackList),_round);\n};\n\n// Exit on max track\nif ((count GVAR(objects)) >= GVAR(maxTrack)) exitWith {TRACE_1(\"maxTrack limit\",count GVAR(objects));};\n\nprivate _doSpall = false;\nif (GVAR(SpallEnabled)) then {\n    if (GVAR(spallIsTrackingCount) <= 0) then {\n        GVAR(spallHPData) = [];\n    };\n    if (GVAR(spallIsTrackingCount) > 5) then {\n        TRACE_1(\"At Spall Limit\",GVAR(spallIsTrackingCount));\n    } else {\n        _doSpall = true;\n        INC(GVAR(spallIsTrackingCount));\n    };\n    TRACE_2(\"\",_doSpall,GVAR(spallIsTrackingCount));\n};\n\n#ifdef DRAW_FRAG_INFO\n[ACE_player, _round, [0, 1, 0, 1]] call FUNC(dev_addTrack);\n#endif\n\n// We only do the single track object check here.\n// We should do an {!(_round in GVAR(objects))}\n// But we leave that out here for optimization. So this cannot be a framework function\n// Otherwise, it should only be added once and from the FiredEH\nif (alive _round) then {\n    private _spallTrack = [];\n    private _spallTrackID = [];\n\n    private _args = [\n        _round, getPosASL _round, velocity _round, _type, diag_frameno, _gun, _doSpall, _spallTrack, _spallTrackID,\n        getNumber (configFile >> \"CfgAmmo\" >> _type >> QGVAR(skip)),\n        getNumber (configFile >> \"CfgAmmo\" >> _type >> \"explosive\"),\n        getNumber (configFile >> \"CfgAmmo\" >> _type >> \"indirectHitRange\"),\n        getNumber (configFile >> \"CfgAmmo\" >> _type >> QGVAR(force)),\n        getNumber (configFile >> \"CfgAmmo\" >> _type >> \"indirecthit\") * (sqrt (getNumber (configFile >> \"CfgAmmo\" >> _type >> \"indirectHitRange\")))\n    ];\n    TRACE_1(\"Initializing track\", _round);\n    GVAR(objects) pushBack _round;\n    GVAR(arguments) pushBack _args;\n\n    if (_doSpall) then {\n        [_round, 1, _spallTrack, _spallTrackID] call FUNC(spallTrack);\n    };\n};\n",
        "functionName": "ace_frag_fnc_addPfhRound"
      },
      {
        "fileName": "fnc_dev_addTrack.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_addTack\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_origin\", \"_obj\", [\"_color\", [1, 0, 0, 1]]];\n\nprivate _positions = [];\nprivate _objSpd = vectorMagnitude (velocity _obj);\n_positions pushBack [getPos _obj, _objSpd];\nprivate _data = [_origin, typeOf _origin, typeOf _obj, _objSpd, _positions, _color];\n\nprivate _index = GVAR(traces) pushBack _data;\n[DFUNC(dev_trackTrace), 0, [_obj, _index, CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_frag_fnc_dev_addTrack"
      },
      {
        "fileName": "fnc_dev_debugAmmo.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_debugAmmo\n *\n * Public: No\n */\n\n#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\n    [\"_debugMissing\", true, [false]],\n    [\"_debugForce\", false, [false]],\n    [\"_debugSkippedFragPower\", 30, [0]]\n];\n\ndiag_log text format [\"~~~~~~~~~~~~~Start [%1]~~~~~~~~~~~~~\", _this];\n\nprivate _allMagsConfigs = configProperties [configFile >> \"CfgMagazines\", \"isClass _x\", true];\nprivate _processedCfgAmmos = [];\n\n{\n    private _ammo = toLower getText (_x >> \"ammo\");\n    if (_ammo != \"\" && {!(_ammo in _processedCfgAmmos)}) then {\n        _processedCfgAmmos pushBack _ammo;\n\n        //Ignore mines/bombs\n        if (_ammo isKindOf \"TimeBombCore\") exitWith {};\n\n        _ammoConfig = configFile >> \"CfgAmmo\" >> _ammo;\n\n        //Read configs and test if it would actually cause a frag, using same logic as FUNC(pfhRound)\n        private _skip = getNumber (_ammoConfig >> QGVAR(skip));\n        private _explosive = getNumber (_ammoConfig >> \"explosive\");\n        private _indirectRange = getNumber (_ammoConfig >> \"indirectHitRange\");\n        private _force = getNumber (_ammoConfig >> QGVAR(force));\n        private _fragPower = getNumber (_ammoConfig >> \"indirecthit\") * (sqrt ((getNumber (_ammoConfig >> \"indirectHitRange\"))));\n\n        private _shouldAdd = (_skip == 0) && {(_force == 1) || {_explosive > 0.5 && {_indirectRange >= 4.5} && {_fragPower >= 35}}};\n\n        if (_shouldAdd) then {\n            if (_debugForce && {((getNumber(_ammoConfig >> \"hit\")) < 5) || {_fragPower < 10}}) then {\n                diag_log text format [\"Ammo [%1] from Mag [%2] - Weak but will still frag!\", _ammo, configName _x];\n                diag_log text format [\" - _force=%1,_fragPower=%2\", _force, _fragPower];\n            };\n\n            private _warn = false;\n\n            _fragTypes = getArray (_ammoConfig >> QGVAR(CLASSES));\n            if (_fragTypes isEqualTo []) then {_warn = true;};\n            _c = getNumber(_ammoConfig >> QGVAR(CHARGE));\n            if (_c == 0) then {_warn = true;};\n            _m = getNumber(_ammoConfig >> QGVAR(METAL));\n            if (_m == 0) then {_warn = true;};\n            _k = getNumber(_ammoConfig >> QGVAR(GURNEY_K));\n            if (_k == 0) then {_warn = true;};\n            _gC = getNumber(_ammoConfig >> QGVAR(GURNEY_C));\n            if (_gC == 0) then {_warn = true;};\n\n            if (_debugMissing && {_warn}) then {\n                diag_log text format [\"Ammo [%1] from Mag [%2] MISSING frag configs:\", _ammo, configName _x];\n                diag_log text format [\" - _c=%1,_m=%2,_k=%3,_gC=%4,_fragTypes=%5\", _c, _m, _k, _gC, _fragTypes];\n            };\n        } else {\n            if ((_fragPower > _debugSkippedFragPower) && {isArray (_ammoConfig >> QGVAR(CLASSES))}) then {\n                diag_log text format [\"Ammo [%1] from Mag [%2] has frag configs but will NOT frag:\", _ammo, configName _x];\n                diag_log text format [\"- skip=%1,explosive=%2,indirectHitRange=%3,force=%4,fragPower=%5\", _skip, _explosive, _indirectRange, _force, _fragPower];\n            };\n        };\n    };\n} forEach _allMagsConfigs;\n\ndiag_log text format [\"~~~~~~~~~~~~~End [%1-%2]~~~~~~~~~~~~~\", count _allMagsConfigs, count _processedCfgAmmos];\n",
        "functionName": "ace_frag_fnc_dev_debugAmmo"
      },
      {
        "fileName": "fnc_dev_drawTraces.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_drawTraces\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n{\n    _x params [\"\", \"\", \"\", \"\", \"_positions\", \"_color\"];\n    private _index = 0;\n    private _max = count _positions;\n    // private _lastSpd = [];\n    private _lastPos = [];\n    while {_index < _max} do {\n        _data1 = _positions select _index;\n        _data2 = _positions select ([_index + ACE_TRACE_DRAW_INC, _max - 1] select (_index + ACE_TRACE_DRAW_INC >= _max));\n\n        _pos1 = _data1 select 0;\n        _pos2 = _data2 select 0;\n        ADD(_index,ACE_TRACE_DRAW_INC);\n\n        drawLine3D [_pos1, _pos2, _color];\n        _lastPos = _pos2;\n        // _lastSpd = _data1 select 1;\n    };\n    // drawIcon3D [\"\", [1,0,0,1], _lastPos, 0, 0, 0, format [\"%1m/s\", _lastSpd], 1, 0.05, \"RobotoCondensed\"];\n} forEach GVAR(traces);\n",
        "functionName": "ace_frag_fnc_dev_drawTraces"
      },
      {
        "fileName": "fnc_dev_startTracing.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_dev_startTracing\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (GVAR(tracesStarted)) exitWith {};\n\nINFO(\"Starting Trace Drawing\");\n\nGVAR(tracesStarted) = true;\nGVAR(traceID) = [LINKFUNC(dev_drawTraces), 0, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_frag_fnc_dev_startTracing"
      },
      {
        "fileName": "fnc_dev_stopTracing.sqf",
        "content": "/*\n * Author: ACE-Team\n * Dev things\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (!GVAR(tracesStarted)) exitWith {};\n\nINFO(\"Ending Trace Drawing\");\n\nGVAR(tracesStarted) = false;\n[GVAR(traceID)] call CBA_fnc_removePerFrameHandler;\n",
        "functionName": "ace_frag_fnc_dev_stopTracing"
      },
      {
        "fileName": "fnc_dev_trackTrace.sqf",
        "content": "/*\n * Author: ACE-Team\n * Dev things\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_dev_trackTrace\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_pfhID\"];\n_args params [\"_tracerObj\", \"_index\"];\n\nif (alive _tracerObj && {!(GVAR(traces) isEqualTo [])}) then {\n    private _data = GVAR(traces) select _index;\n    private _positions = _data select 4;\n    _positions pushBack [getPos _tracerObj, vectorMagnitude (velocity _tracerObj)];\n} else {\n    [_pfhID] call CBA_fnc_removePerFrameHandler;\n};\n",
        "functionName": "ace_frag_fnc_dev_trackTrace"
      },
      {
        "fileName": "fnc_doExplosions.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_doExplosions\n *\n * Public: No\n */\n\n//fnc_doExplosions.sqf\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_pfhID\"];\n_args params [\"_explosions\", \"_index\"];\n\nfor \"_i\" from _index to ((_index + 2) min (count _explosions)) do {\n    private _exp = _explosions select _i;\n    _exp params [\"_refExp\", \"_bpos\", \"_hit\", \"_distance\", \"_indirectHitRange\", \"_depth\"];\n    _refExp createVehicle (ASLtoATL _bpos);\n    // if (_hit >= 150 && _distance > _indirectHitRange) then {\n        // [_bpos, _refExp, _depth] call FUNC(doReflections);\n    // };\n};\n\nADD(_index,2);\n\nif (_index >= count _explosions) then {\n    [_pfhID] call CBA_fnc_removePerFrameHandler;\n} else {\n    _args set [1, _index];\n};\n",
        "functionName": "ace_frag_fnc_doExplosions"
      },
      {
        "fileName": "fnc_doReflections.sqf",
        "content": "/*\n * Author: ACE-Team\n * Dev things\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_doReflections\n *\n * Public: No\n */\n\n//fnc_doReflections.sqf\n#include \"script_component.hpp\"\n\nparams [\"_pos\", \"_ammo\", [\"_depth\", 1]];\n\n// TEST_ICONS pushBack [_pos, format [\"EXP!\", _hit, _range, _hitFactor]];\nif (_depth <= 2) then {\n    private _indirectHitRange = getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHitRange\");\n    private _indirectHit = getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHit\");\n    private _testParams = [_pos, [_indirectHitRange, _indirectHit], [], [], -4, _depth, 0];\n    [DFUNC(findReflections), 0, _testParams] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_frag_fnc_doReflections"
      },
      {
        "fileName": "fnc_doSpall.sqf",
        "content": "/*\n * Author: ACE-Team\n * Dev things\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_doSpall\n *\n * Public: No\n */\n\n//fnc_doSpall.sqf\n#include \"script_component.hpp\"\n// ACE_player sideChat \"WAAAAAAAAAAAAAAAAAAAAA\";\n\nparams [\"_hitData\", \"_hitPartDataIndex\"];\nprivate _initialData = GVAR(spallHPData) select (_hitData select 0);\n_initialData params [\"_hpId\", \"_object\", \"_roundType\", \"_round\", \"_curPos\", \"_velocity\"];\n\nprivate _hpData = (_hitData select 1) select _hitPartDataIndex;\n(_hpData select 0) removeEventHandler [\"hitPart\", _hpId];\n\nprivate _caliber = getNumber (configFile >> \"CfgAmmo\" >> _roundType >> \"caliber\");\nprivate _explosive = getNumber (configFile >> \"CfgAmmo\" >> _roundType >> \"explosive\");\nprivate _idh = getNumber (configFile >> \"CfgAmmo\" >> _roundType >> \"indirectHitRange\");\n\nif !(_caliber >= 2.5 || {(_explosive > 0 && {_idh >= 1})}) exitWith {};\n// ACE_player sideChat format [\"BBBB\"];\nprivate _exit = false;\nprivate _vm = 1;\n\nprivate _oldVelocity = vectorMagnitude _velocity;\nprivate _curVelocity = vectorMagnitude (velocity _round);\n\nif (alive _round) then {\n    private _diff = _velocity vectorDiff (velocity _round);\n    private _polar = _diff call CBA_fnc_vect2polar;\n    // ACE_player sideChat format [\"polar: %1\", _polar];\n    if (abs (_polar select 1) > 45 || {abs (_polar select 2) > 45}) then {\n        if (_caliber < 2.5) then {\n            // ACE_player sideChat format [\"exit!\"];\n            _exit = true;\n        } else {\n            SUB(_vm,_curVelocity / _oldVelocity);\n        };\n    };\n};\nif (_exit) exitWith {};\nprivate _unitDir = vectorNormalized _velocity;\nprivate _pos = _hpData select 3;\nprivate _spallPos = [];\nfor \"_i\" from 0 to 100 do {\n    private _pos1 = _pos vectorAdd (_unitDir vectorMultiply (0.01 * _i));\n    private _pos2 = _pos vectorAdd (_unitDir vectorMultiply (0.01 * (_i + 1)));\n    // _data = [nil, nil, nil, 1, [[ASLtoATL _pos1, 1], [ASLtoATL _pos2, 1]]];\n    // NOU_TRACES pushBack _data;\n\n    if (!lineIntersects [_pos1, _pos2]) exitWith {\n        // ACE_player sideChat format [\"FOUND!\"];\n        _spallPos = _pos2;\n    };\n};\nif (_spallPos isEqualTo []) exitWith {};\nprivate _spallPolar = _velocity call CBA_fnc_vect2polar;\n\nif (_explosive > 0) then {\n    // ACE_player sideChat format [\"EXPLOSIVE!\"];\n    private _warn = false;\n    private _c = getNumber (configFile >> \"CfgAmmo\" >> _roundType >> QGVAR(CHARGE));\n    if (_c == 0) then {_c = 1; _warn = true;};\n    private _m = getNumber (configFile >> \"CfgAmmo\" >> _roundType >> QGVAR(METAL));\n    if (_m == 0) then {_m = 2; _warn = true;};\n    private _k = getNumber (configFile >> \"CfgAmmo\" >> _roundType >> QGVAR(GURNEY_K));\n    if (_k == 0) then {_k = 1 / 2; _warn = true;};\n    private _gC = getNumber (configFile >> \"CfgAmmo\" >> _roundType >> QGVAR(GURNEY_C));\n    if (_gC == 0) then {_gC = 2440; _warn = true;};\n\n    if (_warn) then {\n        WARNING_1(\"Ammo class %1 lacks proper explosive properties definitions for frag!\",_roundType); //TODO: turn this off when we get closer to release\n    };\n\n    private _fragPower = (((_m / _c) + _k) ^ - (1 / 2)) * _gC;\n    _spallPolar set [0, _fragPower * 0.66];\n};\n\nprivate _fragTypes = [\n    QGVAR(spall_small), QGVAR(spall_small), QGVAR(spall_small),\n    QGVAR(spall_small),QGVAR(spall_medium),QGVAR(spall_medium),QGVAR(spall_medium),\n    QGVAR(spall_medium), QGVAR(spall_large), QGVAR(spall_large), QGVAR(spall_huge),\n    QGVAR(spall_huge)\n\n];\n\n// diag_log text format [\"SPALL POWER: %1\", _spallPolar select 0];\nprivate _spread = 15 + (random 25);\nprivate _spallCount = 5 + (random 10);\nfor \"_i\" from 1 to _spallCount do {\n    private _elev = ((_spallPolar select 2) - _spread) + (random (_spread * 2));\n    private _dir = ((_spallPolar select 1) - _spread) + (random (_spread * 2));\n    if (abs _elev > 90) then {\n        ADD(_dir,180);\n    };\n    _dir = _dir % 360;\n    private _vel = (_spallPolar select 0) * 0.33 * _vm;\n    _vel = (_vel - (_vel * 0.25)) + (random (_vel * 0.5));\n\n    private _spallFragVect = [_vel, _dir, _elev] call CBA_fnc_polar2vect;\n    private _fragType = round (random ((count _fragTypes) - 1));\n    private _fragment = (_fragTypes select _fragType) createVehicleLocal [0,0,10000];\n    _fragment setPosASL _spallPos;\n    _fragment setVelocity _spallFragVect;\n\n    #ifdef DRAW_FRAG_INFO\n        [ACE_player, _fragment, [1, 0.5, 0, 1]] call FUNC(dev_addTrack);\n    #endif\n};\n\n_spread = 5 + (random 5);\n_spallCount = 3 + (random 5);\nfor \"_i\" from 1 to _spallCount do {\n    private _elev = ((_spallPolar select 2) - _spread) + (random (_spread * 2));\n    private _dir = ((_spallPolar select 1) - _spread) + (random (_spread * 2));\n    if (abs _elev > 90) then {\n        ADD(_dir,180);\n    };\n    _dir = _dir % 360;\n    private _vel = (_spallPolar select 0) * 0.55 * _vm;\n    _vel = (_vel - (_vel * 0.25)) + (random (_vel * 0.5));\n\n    private _spallFragVect = [_vel, _dir, _elev] call CBA_fnc_polar2vect;\n    private _fragType = round (random ((count _fragTypes) - 1));\n    private _fragment = (_fragTypes select _fragType) createVehicleLocal [0, 0, 10000];\n    _fragment setPosASL _spallPos;\n    _fragment setVelocity _spallFragVect;\n\n    #ifdef DRAW_FRAG_INFO\n        [ACE_player, _fragment, [1, 0, 0, 1]] call FUNC(dev_addTrack);\n    #endif\n};\n",
        "functionName": "ace_frag_fnc_doSpall"
      },
      {
        "fileName": "fnc_findReflections.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_findReflections\n *\n * Public: No\n */\n\n//fnc_findReflections.sqf\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(fnc_findReflections);\nparams [\"_args\", \"_pfhID\"];\n_args params [\"_pos\", \"_explosiveInfo\", \"_los\", \"_nlos\", \"_zIndex\", \"_depth\", \"_rand\"];\n\nprivate _split = 15;\nprivate _radi = 360 / _split * _depth;\n\n// player sideChat format [\"p: %1\", _explosiveInfo];\n_explosiveInfo params [\"_indirectHitRange\", \"_indirectHit\"];\nprivate _distanceCount = (floor _indirectHitRange * 4) min 100;\n\nif (_zIndex < 5) then {\n    private _lastPos = _pos;\n    private _zAng = _zIndex * 20 + 2;\n    if (_zAng > 80) then {\n        _radi = 1;\n        _zAng = 90;\n    };\n    for \"_i\" from 0 to _radi do {\n        private _test = true;\n        private _vec = [1, ((_i * _split) + _rand) % 360, _zAng] call CBA_fnc_polar2vect;\n        for \"_x\" from 1 to _distanceCount do {\n            private _testPos = _pos vectorAdd (_vec vectorMultiply _x);\n            // drop [\"\\a3\\data_f\\Cl_basic\",\"\",\"Billboard\",1,15,ASLtoATL _testPos,[0,0,0],1,1.275,1.0,0.0,[1],[[1,0,0,1]],[0],0.0,2.0,\"\",\"\",\"\"];\n            private _res = lineIntersectsWith [_pos, _testPos];\n            if (count _res > 0) exitWith {\n                _test = false;\n                _nlos pushBack _lastPos;\n                // {\n                    // _x addEventHandler [\"HandleDamage\", { diag_log text format [\"this: %1\", _this]; }];\n                // } forEach _res;\n                // drop [\"\\a3\\data_f\\Cl_basic\",\"\",\"Billboard\",1,15,ASLtoATL _testPos,[0,0,0],1,1.275,1.0,0.0,[1],[[1,0,0,1]],[0],0.0,2.0,\"\",\"\",\"\"];\n                // TEST_PAIRS pushBack [_pos, _lastPos, [1,0,0,1]];\n\n            };\n            // if (terrainIntersectASL [_pos, _testPos]) exitWith {};\n            _lastPos = _testPos;\n        };\n    };\n    _args set [4, _zIndex + 1];\n} else {\n    INC(_depth);\n    private _buckets = [];\n    private _excludes = [];\n    private _bucketPos = nil;\n    private _bucketList = nil;\n    private _c = 0;\n    while {count _nlos != count _excludes && {_c < (count _nlos)}} do {\n        scopeName \"mainSearch\";\n        {\n            if (!(_forEachIndex in _excludes)) then {\n                private _index = _buckets pushBack [_x, [_x]];\n                _excludes pushBack _forEachIndex;\n                _bucketPos = _x;\n                _bucketList = (_buckets select _index) select 1;\n                breakTo \"mainSearch\";\n            };\n        } forEach _nlos;\n        {\n            if (!(_forEachIndex in _excludes)) then {\n                _testPos = _x;\n                if (_testPos vectorDistanceSqr _bucketPos <= 30) then {\n                    _bucketList pushBack _x;\n                    _excludes pushBack _forEachIndex;\n                };\n            };\n        } forEach _nlos;\n        INC(_c);\n    };\n\n    // player sideChat format [\"c: %1\", count _buckets];\n    private _explosions = [];\n    {\n        private _blist = _x select 1;\n        private _avg = [0, 0, 0];\n\n        {\n            _avg = _avg vectorAdd _x;\n        } forEach _blist;\n        _c = count _blist;\n        private _bpos = _avg vectorMultiply (1 / _c);\n\n        private _distance = _pos vectorDistance _bpos;\n        private _hitFactor = 1 - (((_distance / (_indirectHitRange * 4)) min 1) max 0);\n        // _hitFactor = 1 / (_distance ^ 2);\n        private _hit = (floor (_indirectHit * _hitFactor / 4)) min 500;\n        SUB(_hit,_hit % 10);\n        private _range = (floor (_indirectHitRange - (_distance / 4))) min 100;\n        SUB(_range,_range % 2);\n\n        if (_hit >= 10 && {_range > 0}) then {\n            // TEST_ICONS pushBack [_bpos, format [\"h: %1, r: %2, hf: %3 d: %4 ihr: %5\", _hit, _range, _hitFactor, _distance, _indirectHitRange*4]];\n            // TEST_PAIRS pushBack [_pos, _bpos, [1,0,0,1]];\n            private _refExp = format [\"ace_explosion_reflection_%1_%2\", _range, _hit];\n            // _refExp createVehicle (ASLtoATL _bpos);\n            // drop [\"\\a3\\data_f\\Cl_basic\",\"\",\"Billboard\",1,15,ASLtoATL _bpos,[0,0,0],1,1.275,1.0,0.0,[1],[[1,0,0,1]],[0],0.0,2.0,\"\",\"\",\"\"];\n\n            _explosions pushBack [_refExp, _bpos, _hit, _distance, _indirectHitRange / 4, _depth];\n        };\n        if (count _explosions > (_radi * 2) / _depth) exitWith {};\n    } forEach _buckets;\n    // _can = \"Land_Bricks_V4_F\" createVehicle (ASLtoATL _pos);\n    // _dirvec = _pos vectorFromTo ((ATLtoASL (player modelToWorldVisual (player selectionPosition \"Spine3\"))));\n    // _dirvec = _dirvec vectorMultiply 100;\n    // _can setVelocity _dirvec;\n    [DFUNC(doExplosions), 0, [_explosions, 0]] call CBA_fnc_addPerFrameHandler;\n    [_pfhID] call CBA_fnc_removePerFrameHandler;\n};\nEND_COUNTER(fnc_findReflections);\n",
        "functionName": "ace_frag_fnc_findReflections"
      },
      {
        "fileName": "fnc_fired.sqf",
        "content": "/*\n * Author: nou, jaynus, PabstMirror\n * Called from the unified fired EH for all.\n * If spall is not enabled (default), then cache and only track those that will actually trigger fragmentation.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [clientFiredBIS-XEH] call ace_frag_fnc_fired\n *\n * Public: No\n */\n// #define DEBUG_ENABLED_FRAG\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nprivate _shouldAdd = GVAR(cacheRoundsTypesToTrack) getVariable _ammo;\nif (isNil \"_shouldAdd\") then {\n    TRACE_1(\"no cache for round\",_ammo);\n\n    if (!EGVAR(common,settingsInitFinished)) exitWith {\n        //Just incase fired event happens before settings init, don't want to set cache wrong if spall setting changes\n        TRACE_1(\"Settings not init yet - exit without setting cache\",_ammo);\n        _shouldAdd = false;\n    };\n\n    if (GVAR(spallEnabled)) exitWith {\n        //Always want to run whenever spall is enabled?\n        _shouldAdd = true;\n        TRACE_2(\"SettingCache[spallEnabled]\",_ammo,_shouldAdd);\n        GVAR(cacheRoundsTypesToTrack) setVariable [_ammo, _shouldAdd];\n    };\n\n    //Read configs and test if it would actually cause a frag, using same logic as FUNC(pfhRound)\n    private _skip = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(skip));\n    private _explosive = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"explosive\");\n    private _indirectRange = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHitRange\");\n    private _force = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(force));\n    private _fragPower = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"indirecthit\") * (sqrt (getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHitRange\")));\n\n    _shouldAdd = (_skip == 0) && {(_force == 1) || {_explosive > 0.5 && {_indirectRange >= 4.5} && {_fragPower >= 35}}};\n    TRACE_6(\"SettingCache[willFrag?]\",_skip,_explosive,_indirectRange,_force,_fragPower,_shouldAdd);\n    GVAR(cacheRoundsTypesToTrack) setVariable [_ammo, _shouldAdd];\n};\n\nif (_shouldAdd) then {\n    // firedMan will have nil \"_gunner\", so just check _unit; for firedVehicle we want to check _gunner\n    private _localShooter = if (isNil \"_gunner\") then {local _unit} else {local _gunner};\n    TRACE_4(\"\",_localShooter,_unit,_ammo,_projectile);\n    if (!_localShooter) exitWith {};\n\n    // Skip if less than 0.5 second from last shot\n    if ((CBA_missionTime - (_unit getVariable [QGVAR(lastTrack), -1])) < 0.5) exitWith {};\n    _unit setVariable [QGVAR(lastTrack), CBA_missionTime];\n\n    [_unit, _ammo, _projectile] call FUNC(addPfhRound);\n};\n",
        "functionName": "ace_frag_fnc_fired"
      },
      {
        "fileName": "fnc_frago.sqf",
        "content": "/*\n * Author: Jaynus, NouberNou\n * Server func to create the fragmentation for a round.\n *\n * Arguments:\n * 0: Last Position (ASL) <ARRAY>\n * 1: Velocity <ARRAY>\n * 2: Ammo Classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[], [], \"handGrenade\"] call ace_frag_fnc_frago\n *\n * Public: No\n */\n//#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n#define FRAG_VEC_VAR 0.004\n#define MAX_FRAG_COUNT 50\n\nBEGIN_COUNTER(frago);\n\nparams [\"_lastPos\", \"_lastVel\", \"_shellType\"];\nTRACE_3(\"frago\",_lastPos,_lastVel,_shellType);\n\n// Limit max frag count if there was a recent frag\nprivate _maxFrags = round (MAX_FRAG_COUNT * linearConversion [0.1, 1.5, (CBA_missionTime - GVAR(lastFragTime)), 0.1, 1, true]);\nTRACE_2(\"\",_maxFrags,CBA_missionTime - GVAR(lastFragTime));\nGVAR(lastFragTime) = CBA_missionTime;\n\nprivate _fragTypes = [\n    QGVAR(tiny), QGVAR(tiny), QGVAR(tiny),\n    QGVAR(tiny_HD), QGVAR(tiny_HD), QGVAR(tiny_HD),\n    QGVAR(small), QGVAR(small), QGVAR(small), QGVAR(small),\n    QGVAR(small_HD), QGVAR(small_HD), QGVAR(small_HD), QGVAR(small_HD),\n    QGVAR(medium_HD), QGVAR(medium_HD), QGVAR(medium_HD), QGVAR(medium_HD), QGVAR(medium_HD)\n];\n\nprivate _warn = false;\nif (isArray (configFile >> \"CfgAmmo\" >> _shellType >> QGVAR(CLASSES))) then {\n    _fragTypes = getArray (configFile >> \"CfgAmmo\" >> _shellType >> QGVAR(CLASSES));\n} else {\n    _warn = true;\n};\n\nprivate _indirectHitRange = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"indirecthitrange\");\nprivate _fragRange = 20 * _indirectHitRange * 4;\n// _c = 185; // grams of comp-b\n// _m = 210; // grams of fragmentating metal\n// _k = 3/5; // spherical K factor\n// _gC = 2843; // Gurney constant of comp-b in /ms\n\n// _c = 429; // grams of tritonal\n// _m = 496; // grams of fragmentating metal\n// _k = 1/2; // spherical K factor\n// _gC = 2320; // Gurney constant of tritonal in /ms\n\nprivate _c = getNumber (configFile >> \"CfgAmmo\" >> _shellType >> QGVAR(CHARGE));\nif (_c == 0) then {_c = 1; _warn = true;};\nprivate _m = getNumber (configFile >> \"CfgAmmo\" >> _shellType >> QGVAR(METAL));\nif (_m == 0) then {_m = 2; _warn = true;};\nprivate _k = getNumber (configFile >> \"CfgAmmo\" >> _shellType >> QGVAR(GURNEY_K));\nif (_k == 0) then {_k = 0.5; _warn = true;};\nprivate _gC = getNumber (configFile >> \"CfgAmmo\" >> _shellType >> QGVAR(GURNEY_C));\nif (_gC == 0) then {_gC = 2440; _warn = true;};\n\nif (_warn) then {\n    INFO_1(\"Ammo class %1 lacks proper explosive properties definitions for frag!\",_shellType);\n};\n\n// Gunery equation is for a non-fragmenting metal, imperical value of 80% represents fragmentation\nprivate _fragPower = 0.8 * (((_m / _c) + _k) ^ - (1 / 2)) * _gC;\n\nprivate _atlPos = ASLtoATL _lastPos;\n\nprivate _fragPowerRandom = _fragPower * 0.5;\nif ((_atlPos select 2) < 0.5) then {\n    _lastPos vectorAdd [0, 0, 0.5];\n};\n\nprivate _objects = _atlPos nearEntities [[\"Car\", \"Motorcycle\", \"Tank\", \"StaticWeapon\", \"CAManBase\", \"Air\", \"Ship\"], _fragRange];\n// Add unique crews in faster way\n{\n    {\n        _objects pushBackUnique _x;\n    } forEach (crew _x);\n} forEach _objects;\nTRACE_2(\"\",_fragRange,count _objects);\n\nprivate _fragCount = 0;\n\nprivate _fragArcs = [];\n_fragArcs set [360, 0];\n\nprivate _doRandom = true;\nif (!(_objects isEqualTo [])) then {\n    if (GVAR(reflectionsEnabled)) then {\n        [_lastPos, _shellType] call FUNC(doReflections);\n    };\n    {\n        private _target = _x;\n        if (alive _target) then {\n            (boundingBox _target) params [\"_boundingBoxA\", \"_boundingBoxB\"];\n\n            private _cubic = ((abs (_boundingBoxA select 0)) + (_boundingBoxB select 0)) * ((abs (_boundingBoxA select 1)) + (_boundingBoxB select 1)) * ((abs (_boundingBoxA select 2)) + (_boundingBoxB select 2));\n\n            if (_cubic <= 1) exitWith {};\n            // _doRandom = true;\n\n            private _targetVel = velocity _target;\n            private _targetPos = getPosASL _target;\n            private _distance = _targetPos vectorDistance _lastPos;\n            private _add = ((_boundingBoxB select 2) / 2) + ((((_distance - (_fragpower / 8)) max 0) / _fragPower) * 10);\n\n            _targetPos = _targetPos vectorAdd [\n            (_targetVel select 0) * (_distance / _fragPower),\n            (_targetVel select 1) * (_distance / _fragPower),\n            _add\n            ];\n\n            private _baseVec = _lastPos vectorFromTo _targetPos;\n\n            private _dir = floor (_baseVec call CBA_fnc_vectDir);\n            private _currentCount = RETDEF(_fragArcs select _dir,0);\n            if (_currentCount < 10) then {\n                private _count = ceil (random (sqrt (_m / 1000)));\n                private _vecVar = FRAG_VEC_VAR;\n                if (!(_target isKindOf \"Man\")) then {\n                    ADD(_vecVar,(sqrt _cubic) / 2000);\n                    if ((crew _target) isEqualTo [] && {_count > 0}) then {\n                        _count = 0 max (_count / 2);\n                    };\n                };\n                for \"_i\" from 1 to _count do {\n                    private _vec = _baseVec vectorDiff [\n                    (_vecVar / 2) + (random _vecVar),\n                    (_vecVar / 2) + (random _vecVar),\n                    (_vecVar / 2) + (random _vecVar)\n                    ];\n\n                    private _fp = _fragPower - (random (_fragPowerRandom));\n                    private _vel = _vec vectorMultiply _fp;\n\n                    private _fragObj = (selectRandom _fragTypes) createVehicleLocal [0,0,10000];\n                    // TRACE_4(\"targeted\",_fp, typeOf _fragObj,_lastPos vectorDistance _targetPos,typeOf _x);\n                    _fragObj setPosASL _lastPos;\n                    _fragObj setVectorDir _vec;\n                    _fragObj setVelocity _vel;\n                    #ifdef DRAW_FRAG_INFO\n                    [ACE_player, _fragObj, [1,0,0,1]] call FUNC(dev_addTrack);\n                    #endif\n                    INC(_fragCount);\n                    INC(_currentCount);\n                };\n                _fragArcs set [_dir, _currentCount];\n            };\n        };\n        if (_fragCount > _maxFrags) exitWith {};\n    } forEach _objects;\n    TRACE_1(\"targeted\",_fragCount);\n    if (_fragCount > _maxFrags) exitWith {};\n    private _randomCount = ceil ((_maxFrags - _fragCount) * 0.35);\n    TRACE_1(\"\",_randomCount);\n    private _sectorSize = 360 / (_randomCount max 1);\n\n    if (_doRandom) then {\n        for \"_i\" from 1 to _randomCount do {\n            // Distribute evenly\n            private _sectorOffset = 360 * (_i - 1) / (_randomCount max 1);\n            private _randomDir = random (_sectorSize);\n            _vec = [cos (_sectorOffset + _randomDir), sin (_sectorOffset + _randomDir), sin (30 - (random 45))];\n\n            _fp = (_fragPower - (random (_fragPowerRandom)));\n\n            _vel = _vec vectorMultiply _fp;\n\n            _fragObj = (selectRandom _fragTypes) createVehicleLocal [0, 0, 10000];\n            _fragObj setPosASL _lastPos;\n            _fragObj setVectorDir _vec;\n            _fragObj setVelocity _vel;\n\n            #ifdef DRAW_FRAG_INFO\n            [ACE_player, _fragObj, [1,0.5,0,1]] call FUNC(dev_addTrack);\n            #endif\n            INC(_fragCount);\n        };\n    };\n};\n\nTRACE_1(\"total created\",_fragCount);\n\nEND_COUNTER(frago);\n",
        "functionName": "ace_frag_fnc_frago"
      },
      {
        "fileName": "fnc_masterPFH.sqf",
        "content": "/*\n * Author: jaynus\n * Master single PFH abstraction for all rounds being tracked by frag/spall.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_masterPFH\n *\n * Public: No\n */\n\n//#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(PFH);\n\n// Fast exit if nothing to do\nif (GVAR(objects) isEqualTo []) exitWith {END_COUNTER(PFH);};\n\nprivate _gcIndex = [];\n\nprivate _iter = 0;\nprivate _objectCount = count GVAR(objects);\nwhile {_objectCount > 0 && {_iter < (GVAR(maxTrackPerFrame) min _objectCount)}} do {\n\n    if (GVAR(lastIterationIndex) >= _objectCount) then {\n        GVAR(lastIterationIndex) = 0;\n    };\n    private _object = GVAR(objects) select GVAR(lastIterationIndex);\n\n    if (!isNil \"_object\") then {\n        private _args = GVAR(arguments) select GVAR(lastIterationIndex);\n\n        if (!(_args call FUNC(pfhRound))) then {\n            _gcIndex pushBack GVAR(lastIterationIndex); // Add it to the GC if it returns false\n        };\n    };\n    INC(_iter);\n    INC(GVAR(lastIterationIndex));\n};\n\n// Clean up dead object references\nprivate _deletionCount = 0;\n{\n    TRACE_1(\"GC Projectile\", _x);\n    private _deleteIndex = _x - _deletionCount;\n    GVAR(objects) deleteAt _deleteIndex;\n    GVAR(arguments) deleteAt _deleteIndex;\n\n    INC(_deletionCount);\n} forEach _gcIndex;\n\nEND_COUNTER(PFH);\n",
        "functionName": "ace_frag_fnc_masterPFH"
      },
      {
        "fileName": "fnc_pfhRound.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_pfhRound\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_round\", \"_lastPos\", \"_lastVel\", \"_shellType\", \"_firedFrame\", \"_gun\", \"_doSpall\", \"_spallTrack\", \"_foundObjectHPIds\", \"_skip\", \"_explosive\", \"_indirectRange\", \"_force\", \"_fragPower\"];\n\nif (_round in GVAR(blackList)) exitWith {\n    false\n};\n\nif (!alive _round) exitWith {\n    if ((diag_frameno - _firedFrame) > 1) then { //skip if deleted within a single frame\n        if (_skip == 0) then {\n            if ((_explosive > 0.5 && {_indirectRange >= 4.5} && {_fragPower >= 35}) || {_force == 1}) then {\n                // shotbullet, shotShell don't seem to explode when touching water, so don't create frags\n                if (((_lastPos select 2) < 0) && {(toLower getText (configFile >> \"CfgAmmo\" >> _shellType >> \"simulation\")) in [\"shotbullet\", \"shotshell\"]}) exitWith {};\n                private _isArmed = true;\n                if (!isNil \"_gun\") then {\n                    private _fuseDist = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"fuseDistance\");\n                    _isArmed = ((getPosASL _gun) distance _lastPos > _fuseDist);\n                    TRACE_2(\"\",_fuseDist,_isArmed);\n                };\n                if (!_isArmed) exitWith {TRACE_1(\"round not armed\",_this);};\n                TRACE_3(\"Sending frag event to server\",_lastPos,_lastVel,_shellType);\n                [QGVAR(frag_eh), [_lastPos,_lastVel,_shellType]] call CBA_fnc_serverEvent;\n            };\n        };\n    };\n    if (_doSpall) then {\n        DEC(GVAR(spallIsTrackingCount));\n        TRACE_1(\"doSpall\",_foundObjectHPIds);\n        {\n            if (!isNil \"_x\") then {\n                _x removeEventHandler [\"hitPart\", _foundObjectHPIds select _forEachIndex];\n            };\n        } forEach _spallTrack;\n    };\n    false\n};\n\n_this set [1, getPosASL _round];\n_this set [2, velocity _round];\n\nif (_doSpall) then {\n    private _scale = ((count GVAR(objects)) / GVAR(maxTrackPerFrame)) max 0.1;\n    [_round, _scale, _spallTrack, _foundObjectHPIds] call FUNC(spallTrack);\n};\n\ntrue\n",
        "functionName": "ace_frag_fnc_pfhRound"
      },
      {
        "fileName": "fnc_spallHP.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_spallHP\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n//player sideChat format [\"f: %1 c: %2\", (_this select 0), (count GVAR(spallHPData))];\n\nparams [\"_index\", \"_hitPartData\"];\n\nprivate _initialData = GVAR(spallHPData) param [_index, []];\nif (_initialData isEqualTo []) exitWith {};\n\nprivate _hpRound = (_hitPartData select 0) select 2;\nprivate _round = _initialData select 3;\nprivate _hpDirect = (_hitPartData select 0) select 10;\n\nif (_hpDirect && {_round == _hpRound}) then {\n    {\n        // diag_log text format [\"HPDUMP-------------------------------------\"];\n        // {\n            // _hp = _x;\n            // diag_log text format [\"%1 --\", _forEachIndex];\n            // {\n                // diag_log text format [\"%1: %2\", _forEachIndex, _x];\n            // } forEach _hp;\n        // } forEach (_this select 1);\n        [DFUNC(doSpall), [_this, _forEachIndex]] call CBA_fnc_execNextFrame;\n        // player sideChat \"WEEE\";\n    } forEach _hitPartData;\n};\n",
        "functionName": "ace_frag_fnc_spallHP"
      },
      {
        "fileName": "fnc_spallTrack.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_frag_fnc_spallTrack\n *\n * Public: No\n */\n\n//fnc_spallTrack.sqf\n#include \"script_component.hpp\"\n\nparams [\"_round\", \"_multiplier\", \"_foundObjects\", \"_foundObjectHPIds\"];\n\nprivate _delta = (1 / diag_fps) * _multiplier;\nprivate _curPos = getPosASL _round;\nprivate _velocity = velocity _round;\n\nprivate _velocityStep = _velocity vectorMultiply _delta;\nprivate _forwardPos = _curPos vectorAdd _velocityStep;\n\nprivate _intersectsWith = lineIntersectsWith [_curPos, _forwardPos];\n\nif (_intersectsWith isEqualTo []) exitWith {};\n\n// player sideChat format [\"inter: %1\", _intersectsWith];\n{\n    // diag_log text format [\"Adding HP: %1\", _x];\n    private _index = count GVAR(spallHPData);\n    private _hpId = _x addEventHandler [\"hitPart\", compile format [\"[%1, _this] call \" + QFUNC(spallHP), _index]];\n    _foundObjects pushBack _x;\n    _foundObjectHPIds pushBack _hpId;\n    private _data = [_hpId, _x, typeOf _round, _round, _curPos, _velocity, 0, _foundObjects, _foundObjectHPIds];\n    GVAR(spallHPData) pushBack _data;\n} forEach (_intersectsWith select {!(_x in _foundObjects)});\n",
        "functionName": "ace_frag_fnc_spallTrack"
      }
    ]
  },
  {
    "component": "gestures",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n// Add keybinds\n{\n    _x params [\"_currentName\", \"_key\", [\"_vanillaKey\", false] ];\n\n    // Don't add \"ace_gestures_\" prefix to BI gestures\n    private _signalName = if (_vanillaKey) then {\n        format [\"BIgesture%1\", _currentName];\n    } else {\n        format [QGVAR(%1), _currentName];\n    };\n\n    private _code = compile format [QUOTE('%1' call FUNC(playSignal)), _signalName];\n    if (_currentName == \"Stop\") then {\n        _code = compile format [QUOTE('%1' call FUNC(playSignal)), \"BIgestureFreeze\"];\n    };\n\n    TRACE_4(\"Adding KeyBind\",_currentName,_signalName,_code,_key);\n\n    [\"ACE3 Gestures\", localize LSTRING(ACEKeybindCategoryGestures)] call CBA_fnc_registerKeybindModPrettyName;\n\n    [\n        \"ACE3 Gestures\",\n        _currentName,\n        localize format [LSTRING(%1), _currentName],\n        _code,\n        {false},\n        [_key,  [false, (_key != -1), false]],\n        false\n    ] call CBA_fnc_addKeybind;\n\n    false\n} count [\n    [\"Freeze\", 80], // Numpad 2\n    [\"Cover\", 81], // Numpad 3\n    [\"Forward\", 75], // Numpad 4\n    [\"Regroup\", 76], // Numpad 5\n    [\"Engage\", 77], // Numpad 6\n    [\"Point\", 71], // Numpad 7\n    [\"Hold\", 72], // Numpad 8\n    [\"Warning\", 73], // Numpad 9\n    [\"Go\", -1, true],\n    [\"Advance\", -1, true],\n    [\"Follow\", -1, true],\n    [\"Up\", -1, true],\n    [\"Stop\", -1, true],\n    [\"CeaseFire\", -1, true]\n];\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_playSignal.sqf",
        "content": "/*\n * Author: joko // Jonas, Emperias, Zigomarvin\n * Detect if the player and play the Gesture Animation\n *\n * Arguments:\n * Animation <STRING>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * \"GeniusAnimation\" call ace_gestures_fnc_playSignal\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nTRACE_1(\"params\",_this);\n\nif (GVAR(showOnInteractionMenu) == 0) exitWith {false};\nif !([ACE_player, objNull, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\nprivate _gesture = if ((_this select [0,2]) == \"BI\") then {\n    //If it starts with BI, just strip off the leading BI and use it directly\n    _this select [2]\n} else {\n    //Adjust gesture based on stance:\n    if (((animationState ACE_player) select [0, 12]) in [\"amovpercmstp\", \"amovpercmwlk\", \"amovpercmtac\"] && weaponLowered ACE_player) then {\n        format [\"%1StandLowered\", _this]\n    } else {\n        _this\n    };\n};\n\nTRACE_1(\"playing gesture\",_gesture);\n[ACE_player, _gesture] call EFUNC(common,doGesture);\ntrue\n",
        "functionName": "ace_gestures_fnc_playSignal"
      }
    ]
  },
  {
    "component": "gforces",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(pfID) = -1;\nGVAR(playerIsVirtual) = false;\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"SettingsInitialized eh\",GVAR(enabledFor));\n\n    if (GVAR(enabledFor) == 0) exitWith {}; //Module has no effect if enabledFor is \"None\"\n\n    [\"unit\", { // Add unit changed EH to check if player is either virtual (logic) or a UAV AI\n        params [\"_unit\"];\n        GVAR(playerIsVirtual) = ((getNumber (configFile >> \"CfgVehicles\" >> (typeOf _unit) >> \"isPlayableLogic\")) == 1) ||\n        {(getText (configFile >> \"CfgVehicles\" >> (typeOf _unit) >> \"simulation\")) == \"UAVPilot\"};\n        TRACE_3(\"unit changed\",_unit,typeOf _unit,GVAR(playerIsVirtual));\n    }, true] call CBA_fnc_addPlayerEventHandler;\n\n    if (GVAR(enabledFor) == 2) exitWith { //PFEH is always on when enabledFor is \"All\"\n        [] call FUNC(addPFEH);\n        TRACE_1(\"adding perm PFEH\",GVAR(pfID));\n    };\n\n    //PFEH only runs when player is in a type \"Air\" vehicle when enabledFor is \"Aircraft\"\n    [\"vehicle\", {\n        params [\"\", \"_vehicle\"];\n        TRACE_2(\"playerVehicleChanged\",_vehicle,typeOf _vehicle);\n        if (_vehicle isKindOf \"Air\") then {\n            if (GVAR(pfID) == -1) then {\n                [] call FUNC(addPFEH);\n                TRACE_1(\"adding temp PFEH\",GVAR(pfID));\n            };\n        } else {\n            if (GVAR(pfID) != -1) then {\n                TRACE_1(\"removing temp PFEH\",GVAR(pfID));\n                ppEffectDestroy GVAR(GForces_CC);\n                [GVAR(pfID)] call CBA_fnc_removePerFrameHandler;\n                GVAR(pfID) = -1;\n            };\n        };\n    }, true] call CBA_fnc_addPlayerEventHandler;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(GForces) = [];\nGVAR(GForces_Index) = 0;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addPFEH.sqf",
        "content": "/*\n * Author: KoffeinFlummi and esteldunedain\n * Adds the PFEH\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_gforces_fnc_addPFEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//Reset forces array\nGVAR(GForces) = [];\n// init array to full array of neutral g-forces\nGVAR(GForces) resize 30;\nGVAR(GForces) = GVAR(GForces) apply {1};\n\nGVAR(GForces_Index) = 0;\n\n// Setup ppEffect\nGVAR(GForces_CC) = ppEffectCreate [\"ColorCorrections\", 4215];\nGVAR(GForces_CC) ppEffectEnable true;\nGVAR(GForces_CC) ppEffectForceInNVG true;\nGVAR(GForces_CC) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];\nGVAR(GForces_CC) ppEffectCommit 0.4;\n\nGVAR(lastUpdateTime) = 0;\nGVAR(oldVel) = [0,0,0];\n\nGVAR(pfID) = [LINKFUNC(pfhUpdateGForces), 0, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_gforces_fnc_addPFEH"
      },
      {
        "fileName": "fnc_pfhUpdateGForces.sqf",
        "content": "/*\n * Author: KoffeinFlummi and esteldunedain\n * Calculates average g-forces and triggers g-effects\n *\n * Arguments:\n * 0: Arguments <ARRAY>\n * 1: pfh_id <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[args], 5] call ace_gforces_fnc_pfhUpdateGForces\n *\n * Public: No\n */\n #include \"script_component.hpp\"\n\n// Update the g-forces at constant mission time intervals (taking accTime into account)\nif ((CBA_missionTime - GVAR(lastUpdateTime)) < INTERVAL) exitWith {};\nGVAR(lastUpdateTime) = CBA_missionTime;\n\nif (GVAR(playerIsVirtual) || {!alive ACE_player}) exitWith {};\n\nBEGIN_COUNTER(everyInterval);\n\nprivate _newVel = velocity (vehicle ACE_player);\nprivate _accel = ((_newVel vectorDiff GVAR(oldVel)) vectorMultiply (1 / INTERVAL)) vectorAdd [0, 0, 9.8];\n// Cap maximum G's to +- 10 to avoid g-effects when the update is low fps.\nprivate _currentGForce = (((_accel vectorDotProduct vectorUp (vehicle ACE_player)) / 9.8) max -10) min 10;\n\nGVAR(GForces) set [GVAR(GForces_Index), _currentGForce];\nGVAR(GForces_Index) = (GVAR(GForces_Index) + 1) % 30; // 30 = round (AVERAGEDURATION / INTERVAL);\nGVAR(oldVel) = _newVel;\n\n/* Source: https://github.com/KoffeinFlummi/AGM/issues/1774#issuecomment-70341573\n*\n* For untrained people without g-suits:\n* GLOC: 5G for 6 s\n* RedOut: 2.5G for 6 s\n*\n* For trained jet pilots without g-suits:\n* GLOC: 9G for 6 s\n* RedOut: 4.5G\n*\n* For trained jet pilots with g-suits:\n* GLOC: 10.5G for 6 s\n* RedOut: 4.5G\n*\n* Effects and camera shake start 30% the limit value, and build gradually\n*/\n\nprivate _average = 0;\nprivate _count = {\n    _average = _average + _x;\n    true\n} count GVAR(GForces);\n\nif (_count > 0) then {\n    _average = _average / _count;\n};\n\nprivate _classCoef = (ACE_player getVariable [\"ACE_GForceCoef\",\n    getNumber (configFile >> \"CfgVehicles\" >> (typeOf ACE_player) >> \"ACE_GForceCoef\")]) max 0.001;\nprivate _suitCoef = if ((uniform ACE_player) != \"\") then {\n    (getNumber (configFile >> \"CfgWeapons\" >> (uniform ACE_player) >> \"ACE_GForceCoef\")) max 0.001\n} else {\n    1\n};\n\nprivate _gBlackOut = MAXVIRTUALG / _classCoef + MAXVIRTUALG / _suitCoef - MAXVIRTUALG;\n\n// Unconsciousness\nif ((_average > _gBlackOut) and {isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") and {!(ACE_player getVariable [\"ACE_isUnconscious\", false])}}) then {\n    [ACE_player, true, (10 + floor(random 5))] call EFUNC(medical,setUnconscious);\n};\n\nGVAR(GForces_CC) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];\n\nif !(ACE_player getVariable [\"ACE_isUnconscious\", false]) then {\n    if (_average > 0.30 * _gBlackOut) then {\n        private _strength = ((_average - 0.30 * _gBlackOut) / (0.70 * _gBlackOut)) max 0;\n        GVAR(GForces_CC) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[2*(1-_strength),2*(1-_strength),0,0,0,0.1,0.5]];\n        addCamShake [_strength, 1, 15];\n    } else {\n        private _gRedOut = MINVIRTUALG / _classCoef;\n\n        if (_average < -0.30 * _gRedOut) then {\n            private _strength = ((abs _average - 0.30 * _gRedOut) / (0.70 * _gRedOut)) max 0;\n            GVAR(GForces_CC) ppEffectAdjust [1,1,0,[1,0.2,0.2,1],[0,0,0,0],[1,1,1,1],[2*(1-_strength),2*(1-_strength),0,0,0,0.1,0.5]];\n            addCamShake [_strength / 1.5, 1, 15];\n        };\n    };\n};\n\nGVAR(GForces_CC) ppEffectCommit INTERVAL;\n\nEND_COUNTER(everyInterval);\n",
        "functionName": "ace_gforces_fnc_pfhUpdateGForces"
      }
    ]
  },
  {
    "component": "goggles",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ACE3 Common\", QGVAR(wipeGlasses), localize LSTRING(WipeGlasses), {\n    if (GVAR(effects) != 2) exitWith {false}; //Can only wipe if full effects setting is set\n    if (!(GETVAR(ace_player,ACE_isUnconscious,false))) exitWith {\n        call FUNC(clearGlasses);\n        true\n    };\n    false\n},\n{false},\n[20, [true, true, false]], false] call CBA_fnc_addKeybind;\n\n\n[\"ace_settingsInitialized\", {\n    TRACE_2(\"ace_settingsInitialized eh\",GVAR(effects),GVAR(showInThirdPerson));\n\n    if (GVAR(effects) == 0) exitWith {};\n\n    // ---Add the TINT Effect---\n\n    // make sure to stack effect layers in correct order\n    GVAR(GogglesEffectsLayer) = QGVAR(GogglesEffectsLayer) call BIS_fnc_RSCLayer;\n    GVAR(GogglesLayer) = QGVAR(GogglesLayer) call BIS_fnc_RSCLayer;\n\n    if (isNil QGVAR(UsePP)) then {\n        GVAR(UsePP) = true;\n    };\n\n    // init pp effects\n    GVAR(PostProcess) = ppEffectCreate [\"ColorCorrections\", 1995];\n    GVAR(EffectsActive) = false;\n\n    // add glasses eventhandlers\n    [\"ace_glassesChanged\", {\n        params [\"_unit\", \"_glasses\"];\n        TRACE_2(\"ace_glassesChanged eh\",_unit,_glasses);\n\n        SETGLASSES(_unit,GLASSESDEFAULT);\n\n        if (call FUNC(ExternalCamera)) exitWith {call FUNC(RemoveGlassesEffect)};\n\n        if ([_unit] call FUNC(isGogglesVisible)) then {\n            [_unit, _glasses] call FUNC(applyGlassesEffect);\n        } else {\n            call FUNC(removeGlassesEffect);\n        };\n    }] call CBA_fnc_addEventHandler;\n\n    // init GlassesChanged eventhandler\n    GVAR(OldGlasses) = \"<null>\";\n    [\"loadout\", {\n        params [\"_unit\"];\n\n        private _currentGlasses = goggles _unit;\n\n        if (GVAR(OldGlasses) != _currentGlasses) then {\n            [\"ace_glassesChanged\", [_unit, _currentGlasses]] call CBA_fnc_localEvent;\n            GVAR(OldGlasses) = _currentGlasses;\n        };\n    }, true] call CBA_fnc_addPlayerEventHandler;\n\n\n\n    // check goggles\n    private _fnc_checkGoggles = {\n        params [\"_unit\"];\n\n        if (GVAR(EffectsActive)) then {\n            if (call FUNC(externalCamera) || {!([_unit] call FUNC(isGogglesVisible))}) then {\n                call FUNC(removeGlassesEffect);\n            };\n        } else {\n            if (!(call FUNC(externalCamera)) && {[_unit] call FUNC(isGogglesVisible)}) then {\n                [_unit, goggles _unit] call FUNC(applyGlassesEffect);\n            };\n        };\n    };\n\n    [\"cameraView\", _fnc_checkGoggles] call CBA_fnc_addPlayerEventHandler;\n    [\"ace_activeCameraChanged\", _fnc_checkGoggles] call CBA_fnc_addEventHandler;\n\n\n\n    // // ---Add the Dust/Dirt/Rain Effects---\n    if (GVAR(effects) == 2) then {\n\n        // Register fire event handler\n        [\"ace_firedPlayer\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n\n        //Add Explosion XEH\n        [\"CAManBase\", \"explosion\", FUNC(handleExplosion)] call CBA_fnc_addClassEventHandler;\n\n        GVAR(PostProcessEyes) = ppEffectCreate [\"ColorCorrections\", 1992];\n        GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 0]];\n        GVAR(PostProcessEyes) ppEffectCommit 0;\n        GVAR(PostProcessEyes) ppEffectEnable false;\n        GVAR(PostProcessEyes_Enabled) = false;\n\n        GVAR(FrameEvent) = [false, [false, 20]];\n        GVAR(DustHandler) = -1;\n        GVAR(RainDrops) = objNull;\n        GVAR(RainActive) = false;\n        GVAR(RainLastLevel) = 0;\n        GVAR(surfaceCache) = \"\";\n        GVAR(surfaceCacheIsDust) = false;\n\n        [\"ace_glassesCracked\", {\n            params [\"_unit\"];\n\n            _unit setVariable [\"ACE_EyesDamaged\", true];\n\n            GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0.5, 0.5, 0.5, 0.5], [1, 1, 1, 0]];\n            GVAR(PostProcessEyes) ppEffectCommit 0;\n            GVAR(PostProcessEyes) ppEffectEnable true;\n\n            [{\n                GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [1, 1, 1, 1], [1, 1, 1, 0]];\n                GVAR(PostProcessEyes) ppEffectCommit 5;\n\n                [{\n                    params [\"_unit\"];\n\n                    GVAR(PostProcessEyes) ppEffectEnable false;\n\n                    _unit setVariable [\"ACE_EyesDamaged\", false];\n\n                }, _this, 5] call CBA_fnc_waitAndExecute;\n\n            }, _unit, 25] call CBA_fnc_waitAndExecute;\n\n        }] call CBA_fnc_addEventHandler;\n\n        // goggles effects main PFH\n        [{\n            BEGIN_COUNTER(goggles);\n\n            // rain\n            call FUNC(applyRainEffect);\n\n            // auto remove effects under water\n            if (GVAR(EffectsActive) && {underwater ACE_player} && {[goggles ACE_player] call FUNC(isDivingGoggles)}) then {\n                call FUNC(removeRainEffect);\n                call FUNC(removeDirtEffect);\n                call FUNC(removeDustEffect);\n            };\n\n            // rotor wash effect\n            call FUNC(applyRotorWashEffect);\n\n            END_COUNTER(goggles);\n        }, 0.5, []] call CBA_fnc_addPerFrameHandler;\n    };\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_applyDirtEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Adds dirt effect to the glasses.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Succeeded <BOOL>\n *\n * Example:\n * _applied = call ace_goggles_fnc_applyDirtEffect\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (call FUNC(externalCamera)) exitWith {false};\n\nprivate _unit = ACE_player;\n\nprivate _effects = GETGLASSES(_unit);\n_effects set [DIRT, true];\n\nSETGLASSES(_unit,_effects);\n\nif ([_unit] call FUNC(isGogglesVisible)) then {\n    private _dirtImage = getText (configFile >> \"CfgGlasses\" >> goggles _unit >> \"ACE_OverlayDirt\");\n\n    if (_dirtImage != \"\") then {\n        GVAR(GogglesEffectsLayer) cutRsc [\"RscACE_GogglesEffects\", \"PLAIN\", 0.1, false];\n        (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10660) ctrlSetText _dirtImage;\n\n        private _effectBrightness = linearConversion [0,1,([] call EFUNC(common,ambientBrightness)),0.25,1];\n        (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10660) ctrlSetTextColor [_effectBrightness, _effectBrightness, _effectBrightness, 1];\n        TRACE_1(\"dirt\",_effectBrightness);\n    };\n};\n\ntrue\n",
        "functionName": "ace_goggles_fnc_applyDirtEffect"
      },
      {
        "fileName": "fnc_applyDustEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Applies dust to screen.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_applyDustEffect\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (call FUNC(ExternalCamera)) exitWith {};\n\nprivate _unit = ACE_player;\n\nif ([_unit] call FUNC(isGogglesVisible)) exitWith {\n    GVAR(GogglesEffectsLayer) cutRsc [\"RscACE_GogglesEffects\", \"PLAIN\", 2, false];\n\n    ((GETUVAR(GVAR(DisplayEffects),displayNull)) displayCtrl 10662) ctrlSetText format [getText (configFile >> \"CfgGlasses\" >> goggles _unit >> \"ACE_DustPath\"), GETDUSTT(DAMOUNT) + 1];\n\n    private _effectBrightness = linearConversion [0,1,([] call EFUNC(common,ambientBrightness)),0.25,1];\n    ((GETUVAR(GVAR(DisplayEffects),displayNull)) displayCtrl 10662) ctrlSetTextColor [_effectBrightness, _effectBrightness, _effectBrightness, 1];\n    TRACE_1(\"dust\",_effectBrightness);\n\n    SETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT) + 1,0,1));\n    SETDUST(DBULLETS,0);\n};\n\nif (GETVAR(_unit,ACE_EyesDamaged,false)) exitWith {\n    SETDUST(DACTIVE,false);\n    SETDUST(DBULLETS,0);\n    SETDUST(DAMOUNT,0);\n};\n\nSETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT) + 1,0,2));\n\nprivate _amount = 1 - (GETDUSTT(DAMOUNT) * 0.125);\n\nGVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [_amount, _amount, _amount, _amount], [1, 1, 1, 0]];\nGVAR(PostProcessEyes) ppEffectCommit 1;\nGVAR(PostProcessEyes) ppEffectEnable true;\n\nSETDUST(DBULLETS,0);\n\n[GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\nGVAR(DustHandler) = -1;\n\nGVAR(DustHandler) = [{\n    if (diag_tickTime >= GETDUSTT(DTIME) + 3) then {\n        SETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT)-1,0,2));\n\n        private _amount = 1 - (GETDUSTT(DAMOUNT) * 0.125);\n\n        if !(_unit getVariable [\"ACE_EyesDamaged\", false]) then {\n            GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [_amount, _amount, _amount, _amount], [1, 1, 1, 0]];\n            GVAR(PostProcessEyes) ppEffectCommit 0.5;\n        };\n\n        if (GETDUSTT(DAMOUNT) <= 0) then {\n            SETDUST(DACTIVE,false);\n            SETDUST(DBULLETS,0);\n\n            GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [1, 1, 1, 1], [1, 1, 1, 0]];\n            GVAR(PostProcessEyes) ppEffectCommit 2;\n\n            [{\n                if (GVAR(DustHandler) == -1) then {\n                    GVAR(PostProcessEyes) ppEffectEnable false\n                };\n            }, [], 2] call CBA_fnc_waitAndExecute;\n\n            [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\n            GVAR(DustHandler) = -1;\n        };\n    };\n}, 0, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_goggles_fnc_applyDustEffect"
      },
      {
        "fileName": "fnc_applyGlassesEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Sets screen tint for glasses.\n * Sets screen overlay for glasses. (broken/fixed)\n * Sets dirt/rain overlay for glasses.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Glasses classname to be applied <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ace_player, goggles ace_player] call ace_goggles_fnc_applyGlassesEffect\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_glasses\"];\nTRACE_2(\"applyGlassesEffect\",_player,_glasses);\n\n// remove old effect\ncall FUNC(removeGlassesEffect);\n\nif ((getNumber (configFile >> \"CfgVehicles\" >> (typeOf _player) >> \"isPlayableLogic\")) == 1) exitWith {\n    TRACE_1(\"skipping playable logic\",typeOf _player); // VirtualMan_F (placeable logic zeus / spectator)\n};\n\nprivate _config = configFile >> \"CfgGlasses\" >> _glasses;\n\nprivate _postProcessColour = getArray (_config >> \"ACE_Color\");\nprivate _postProcessTintAmount = getNumber (_config >> \"ACE_TintAmount\");\n\nif (_postProcessTintAmount != 0 && {GVAR(UsePP)}) then {\n    _postProcessColour set [3, _postProcessTintAmount/100];\n    GVAR(PostProcess) ppEffectAdjust[0.9, 1.1, 0.004, _postProcessColour, [0,0,0,1],[0,0,0,0]];\n    GVAR(PostProcess) ppEffectCommit 0;\n    GVAR(PostProcess) ppEffectEnable true;\n    _postProcessColour set [3, _postProcessTintAmount/250];\n    GVAR(PostProcess) ppEffectAdjust[0.9, 1.1, 0.004, _postProcessColour, [0,0,0,1],[0,0,0,0]];\n    GVAR(PostProcess) ppEffectCommit 30;\n};\n\nprivate _imagePath = getText (_config >> [\"ACE_Overlay\", \"ACE_OverlayCracked\"] select GETBROKEN);\n\nif (_imagePath != \"\") then {\n    GVAR(GogglesLayer) cutRsc [\"RscACE_Goggles\", \"PLAIN\", 1, false];\n    (GLASSDISPLAY displayCtrl 10650) ctrlSetText _imagePath;\n};\n\nif (GVAR(effects) == 2) then {\n    if (GETDIRT) then {\n        call FUNC(applyDirtEffect);\n    };\n\n    if (GETDUSTT(DACTIVE)) then {\n        SETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT)-1,0,2));\n        call FUNC(applyDustEffect);\n    };\n};\n\nGVAR(EffectsActive) = true;\n",
        "functionName": "ace_goggles_fnc_applyGlassesEffect"
      },
      {
        "fileName": "fnc_applyRainEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Handles rain effects being created on glasses.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_applyRainEffect;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _unit = ACE_player;\n\nif (!alive _unit) exitWith {};\n\nprivate _fnc_underCover = {\n    params [\"_unit\"];\n\n    if (vehicle _unit != _unit && {!isTurnedOut _unit}) exitWith {true};\n\n    // looking up and no roof over head\n    private _position = eyePos _unit;\n    positionCameraToWorld [0, 0, 1] select 2 < (positionCameraToWorld [0, 0, 0] select 2) - 0.4 || {(lineIntersects [_position, _position vectorAdd [0, 0, 15], _unit])} // return\n};\n\nif (!isNull findDisplay 312) exitWith {\n    if (GVAR(RainActive)) then {\n        call FUNC(removeRainEffect);\n    };\n};\n\n// Ignore if unit is under water\nif !(GVAR(EffectsActive) || {underwater _unit}) exitWith {\n    call FUNC(RemoveRainEffect);\n};\n\nif (GVAR(RainLastLevel) != rain) then {\n    call FUNC(RemoveRainEffect);\n\n    GVAR(RainLastLevel) = rain;\n\n    // Rain is happening\n    if (GVAR(RainLastLevel) > 0.05 && {!([_unit] call _fnc_underCover)}) then {\n        GVAR(RainActive) = true;\n        GVAR(RainDrops) = \"#particlesource\" createVehicleLocal position _unit;\n        GVAR(RainDrops) setParticleClass \"ACERainEffect\";\n        GVAR(RainDrops) setDropInterval (0.07 * (1.1 - GVAR(RainLastLevel)));\n        GVAR(RainDrops) attachTo [vehicle _unit, [0,0,0]];\n    };\n} else {\n    if (GVAR(RainLastLevel) > 0.05) then {\n        if (GVAR(RainActive) && {[_unit] call _fnc_underCover}) exitWith {\n            call FUNC(RemoveRainEffect);\n        };\n\n        if !(GVAR(RainActive)) then {\n            GVAR(RainLastLevel) = -1;\n        };\n    };\n};\n",
        "functionName": "ace_goggles_fnc_applyRainEffect"
      },
      {
        "fileName": "fnc_applyRotorWashEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, commy2\n * Handles the rotor wash effects.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_applyRotorWashEffect;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _unit = ACE_player;\n\nif (!alive _unit) exitWith {};\n\n// idk. chaching magic? ends with isInRotorWash check.\nGVAR(FrameEvent) set [0, !(GVAR(FrameEvent) select 0)];\n\nif (GVAR(FrameEvent) select 0) exitWith {\n    if (vehicle _unit != _unit && {!isTurnedOut _unit}) exitWith {\n        (GVAR(FrameEvent) select 1) set [0, false];\n    };\n\n    GVAR(FrameEvent) set [1, ([_unit] call FUNC(isInRotorWash))];\n};\n\n// check if the unit is affected by rotor wash\n\nprivate _rotorWash = GVAR(FrameEvent) select 1;\nprivate _safe = false;\n\n// no rotor wash? remove effects.\nif !(_rotorWash select 0) exitWith {\n    if (GVAR(PostProcessEyes_Enabled)) then {\n        GVAR(PostProcessEyes_Enabled) = false;\n\n        GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 0]];\n        GVAR(PostProcessEyes) ppEffectCommit 2;\n\n        [{\n            if (GVAR(DustHandler) == -1) then {\n                GVAR(PostProcessEyes) ppEffectEnable false;\n            }\n        }, [], 2] call CBA_fnc_waitAndExecute;\n\n        [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\n        GVAR(DustHandler) = -1;\n    };\n};\n\n// check protection of helmet\nif (headgear _unit != \"\") then {\n    _safe = getNumber (configFile >> \"CfgWeapons\" >> headgear _unit >> \"ACE_Protection\") == 1;\n};\n\n// check protection of goggles\nif !(_safe) then {\n    if !([_unit] call FUNC(isGogglesVisible)) exitWith {};\n\n    if (GETDUSTT(DAMOUNT) < 2) then {\n        if !(GETDUSTT(DACTIVE)) then {\n            SETDUST(DACTIVE,true);\n\n            call FUNC(applyDustEffect);\n        } else {\n            if (_rotorWash select 1 > 0.5) then {\n                call FUNC(applyDustEffect);\n            };\n        };\n    };\n\n    _safe = getNumber (ConfigFile >> \"CfgGlasses\" >> goggles _unit >> \"ACE_Protection\") == 1;\n};\n\n// quit if protected by goggles or helmet\nif (_safe) exitWith {};\n\n// apply rotor wash effect\nif (_rotorWash select 1 > 0) then {\n    private _scale = 0.7;\n\n    if (_rotorWash select 1 > 0) then {\n        _scale = CLAMP(0.3 * (_rotorWash select 1),0.1,0.3);\n    } else {\n        _scale = 0.1;\n    };\n\n    _scale = 1 - _scale;\n\n    [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\n    GVAR(DustHandler) = -1;\n\n    if !(_unit getVariable [\"ACE_EyesDamaged\", false]) then {\n        GVAR(PostProcessEyes_Enabled) = true;\n        GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [_scale, _scale, _scale, _scale], [1, 1, 1, 0]];\n        GVAR(PostProcessEyes) ppEffectCommit 0.5;\n        GVAR(PostProcessEyes) ppEffectEnable true;\n    };\n};\n",
        "functionName": "ace_goggles_fnc_applyRotorWashEffect"
      },
      {
        "fileName": "fnc_clearGlasses.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Clears all dirt, rain, dust from glasses.\n * Removes glasses effect (PP, overlay) and then puts it back.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_clearGlasses\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nprivate _unit = ACE_player;\n\nprivate _broken = GETBROKEN;\nprivate _effects = GLASSESDEFAULT;\n_effects set [BROKEN, _broken];\n\nSETGLASSES(_unit,_effects);\n\nif ((stance _unit != \"PRONE\") && {primaryWeapon _unit != \"\"} && {currentWeapon _unit == primaryWeapon _unit}) then {\n    [_unit, \"gestureWipeFace\"] call EFUNC(common,doGesture);\n};\n\n[{\n    if (cameraView == \"INTERNAL\") then {\n        addCamShake [5, 1.75, 2];\n    };\n}, [], 0.3] call CBA_fnc_waitAndExecute;\n\ncall FUNC(removeDirtEffect);\ncall FUNC(removeRainEffect);\ncall FUNC(removeDustEffect);\n",
        "functionName": "ace_goggles_fnc_clearGlasses"
      },
      {
        "fileName": "fnc_externalCamera.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Returns if the camera is external or not.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Whether the camera is in external view or not. <BOOL>\n *\n * Example:\n * call ace_goggles_fnc_externalCamera;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n// Handle the ThreeDen Editor Camera\nif (is3DEN) exitWith {true};\n\nif (GVAR(showInThirdPerson)) then {\n    cameraView in [\"GROUP\"] || EFUNC(common,isFeatureCameraActive) \n} else {\n    cameraView in [\"EXTERNAL\", \"GROUP\"] || EFUNC(common,isFeatureCameraActive) \n};\n",
        "functionName": "ace_goggles_fnc_externalCamera"
      },
      {
        "fileName": "fnc_getExplosionIndex.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, commy2\n * Turns 0-1 damage of explosion Event into a rating system of 0-3\n *\n * Arguments:\n * 0: The amount of damage <NUMBER>\n *\n * Return Value:\n * The rating [0-3] <NUMBER>\n *\n * Example:\n * 0.05 call ace_goggles_fnc_getExplosionIndex;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_damage\"];\n\nif (_damage <= 0.04) exitWith {0};\nif (_damage <= 0.06) exitWith {1};\nif (_damage <= 0.09) exitWith {2};\n\n3\n",
        "functionName": "ace_goggles_fnc_getExplosionIndex"
      },
      {
        "fileName": "fnc_handleExplosion.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, commy2\n * Handles explosions.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Function is handled? <BOOL>\n *\n * Example:\n * [bob] call ace_goggles_fnc_handleExplosion\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit != ACE_player) exitWith {true};\n\ncall FUNC(applyDirtEffect);\n\nif (GETBROKEN) exitWith {true};\n\nprivate _config = configFile >> \"CfgGlasses\" >> goggles _unit;\n\nif ((_this select 1) call FUNC(GetExplosionIndex) < getNumber (_config >> \"ACE_Resistance\")) exitWith {true};\n\nif !([_unit] call FUNC(isGogglesVisible)) exitWith {\n    [\"ace_glassesCracked\", [_unit]] call CBA_fnc_localEvent;\n    true\n};\n\nprivate _effects = GETGLASSES(_unit);\n_effects set [BROKEN, true];\n\nSETGLASSES(_unit,_effects);\n\nif (getText (_config >> \"ACE_OverlayCracked\") != \"\") then {\n    if (call FUNC(ExternalCamera)) exitWith {};\n\n    if (isNull (GLASSDISPLAY)) then {\n        GVAR(GogglesLayer) cutRsc [\"RscACE_Goggles\", \"PLAIN\", 1, false];\n    };\n\n    (GLASSDISPLAY displayCtrl 10650) ctrlSetText getText (_config >> \"ACE_OverlayCracked\");\n};\n\n[\"ace_glassesCracked\", [_unit]] call CBA_fnc_localEvent;\ntrue\n",
        "functionName": "ace_goggles_fnc_handleExplosion"
      },
      {
        "fileName": "fnc_handleFired.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, commy2\n * Determines whether to place dust on the goggles, based on calibre of weapon fired and other requirements. Called from the unified fired EH only for the local player.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * Function is handled? <BOOL>\n *\n * Example:\n * call ace_goggles_fnc_handleFired\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\n// no dust in rain\nif (rain > 0.1) exitWith {true};\n\n// effect only aplies when lying on the ground\nif (stance _unit != \"PRONE\") exitWith {true};\n\n// check if the unit really is on the ground and not in a building\nprivate _position = getPosATL _unit;\n\nif (_position select 2 > 0.2) exitWith {true};\n\n// get weapon dust effect\nprivate _particleConfig = configFile >> \"CfgWeapons\" >> _weapon >> \"GunParticles\";\n\nprivate _cloudType = \"\";\n\nif (isClass (_particleConfig >> \"FirstEffect\")) then { // @todo read this with custom / non-standard config classnames\n    _cloudType = getText (_particleConfig >> \"FirstEffect\" >> \"effectName\");\n} else {\n    if (isClass (_particleConfig >> \"effect1\")) then {\n        _cloudType = getText (_particleConfig >> \"effect1\" >> \"effectName\");\n    };\n};\n\n// quit if the weapon causes no dust effect\nif (_cloudType == \"\") exitWith {true};\n\n// get if the surface is dusty\nif (surfaceIsWater _position) exitWith {true};\n\nprivate _surface = surfaceType _position select [1]; // cuts of the leading #\n\nif (_surface != GVAR(surfaceCache)) then {\n    GVAR(surfaceCache) = _surface;\n    GVAR(surfaceCacheIsDust) = getNumber (configFile >> \"CfgSurfaces\" >> _surface >> \"dust\") >= 0.1;\n};\n\n// quit if surface isn't dusty\nif (!GVAR(surfaceCacheIsDust)) exitWith {true};\n\n// increment dust value with type bullet\nprivate _bullets = GETDUSTT(DBULLETS);\n\nif (diag_tickTime - GETDUSTT(DTIME) > 1) then {\n    _bullets = 0;\n};\n\n_bullets = _bullets + 1;\n\nSETDUST(DBULLETS,_bullets);\nSETDUST(DTIME,diag_tickTime);\n\n// apply dust effect if the amount of fired bullets is over the threshold\nif (GETDUSTT(DAMOUNT) < 2) then {\n    private _bulletsRequired = 100;\n\n    if (isNumber (configFile >> _cloudType >> QGVAR(BulletCount))) then {\n        _bulletsRequired = getNumber (configFile >> _cloudType >> QGVAR(BulletCount));\n    };\n\n    if (_bullets > _bulletsRequired) then {\n        SETDUST(DACTIVE,true);\n        call FUNC(applyDustEffect);\n    };\n};\n\ntrue\n",
        "functionName": "ace_goggles_fnc_handleFired"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, commy2\n * Handles the player dying.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Function is handled? <BOOL>\n *\n * Example:\n * [bob] call ace_goggles_fnc_handleKilled\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit != ACE_player) exitWith {true};\nif (GVAR(effects) == 0) exitWith {true};\n\ncall FUNC(removeGlassesEffect);\n\nif (GVAR(effects) == 2) then {\n    GVAR(PostProcessEyes) ppEffectEnable false;\n\n    SETGLASSES(_unit,GLASSESDEFAULT);\n\n    _unit setVariable [\"ACE_EyesDamaged\", false];\n\n    if (GVAR(DustHandler) != -1) then {\n        [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\n    };\n    GVAR(DustHandler) = -1;\n};\n\ntrue\n",
        "functionName": "ace_goggles_fnc_handleKilled"
      },
      {
        "fileName": "fnc_isDivingGoggles.sqf",
        "content": "/*\n * Author: commy2\n * Determines whether passed goggles is diving goggles or a variant of them.\n *\n * Arguments:\n * 0: Glasses classname <STRING>\n *\n * Return Value:\n * Check if these goggles are diving goggles <BOOL>\n *\n * Example:\n * [goggles ace_player] call ace_goggles_fnc_isDivingGoggles;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_glasses\"];\n\nprivate _config = configFile >> \"CfgGlasses\" >> _glasses;\n\nif (!isClass _config) exitWith {false};\n\ngetNumber (_config >> \"mode\") == 1 // return\n",
        "functionName": "ace_goggles_fnc_isDivingGoggles"
      },
      {
        "fileName": "fnc_isGogglesVisible.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Determines if goggles are visible on passed unit.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Whether goggles are visible <BOOL>\n *\n * Example:\n * _visible = [ace_player] call ace_goggles_fnc_isGogglesVisible;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _currentGlasses = goggles _unit;\n\nif (_currentGlasses == \"\") exitWith {false};\n\n// requires ACE_Resistance config entry. Returns false for balaclavas and bandanas.\nif (getNumber (configFile >> \"CfgGlasses\" >> _currentGlasses >> \"ACE_Resistance\") == 0) exitWith {false};\n\n// check if in water and has diving goggles or on land and not diving goggles\nprivate _position = getPosASLW _unit;\n\n(surfaceIsWater _position && {_position select 2 < 0.25}) isEqualTo (_currentGlasses call FUNC(isDivingGoggles)) // return\n",
        "functionName": "ace_goggles_fnc_isGogglesVisible"
      },
      {
        "fileName": "fnc_isInRotorWash.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, commy2\n * Checks for nearby running helicopters (within 15m)\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Radius to check for helicopter (default: 15) <NUMBER>\n *\n * Return Value:\n * Array <ARRAY>:\n *     0: In rotorwash <BOOL>\n *     1: Amount of rotor wash. <NUMBER>\n *\n * Example:\n * if ([ace_player, 10] call ace_goggles_fnc_isInRotorWash select 0) then { hint \"Rotor wash\"; };\n * if ([ace_player] call ace_goggles_fnc_isInRotorWash select 0) then { hint \"Rotor wash\"; };\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_radius\", 15]];\n\nprivate _rotorWash = [false, 0];\n\n{\n    if (isEngineOn _x) then {\n        private _distance = _unit distance _x;\n\n        // convert distance to 0...1 range, where 0 is the maximum radius\n        _distance = 1 - _distance / _radius;\n\n        // use highest amount of rotor wash as return value in case of multiple helicopters\n        if (_distance > _rotorWash select 1) then {\n            _rotorWash set [0, true];\n            _rotorWash set [1, _distance];\n        };\n    };\n    false\n} count (position _unit nearEntities [[\"Helicopter\"], _radius]);\n\n_rotorWash\n",
        "functionName": "ace_goggles_fnc_isInRotorWash"
      },
      {
        "fileName": "fnc_removeDirtEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Removes dirt from the glasses.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_removeDirtEffect\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!isNull (GETUVAR(GVAR(DisplayEffects),displayNull))) then {\n    (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10660) ctrlSetText \"\";\n};\n",
        "functionName": "ace_goggles_fnc_removeDirtEffect"
      },
      {
        "fileName": "fnc_removeDustEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Removes dust from the glasses.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_removeDustEffect\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!isNull (GETUVAR(GVAR(DisplayEffects),displayNull))) then {\n    (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10662) ctrlSetText \"\";\n};\n",
        "functionName": "ace_goggles_fnc_removeDustEffect"
      },
      {
        "fileName": "fnc_removeGlassesEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Removes the glasses effect from the screen, removes dirt effect, removes rain effect, removes dust effect. Does not reset array (glasses will still be broken, dirty, ect.)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_removeGlassesEffect\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nGVAR(EffectsActive) = false;\nGVAR(PostProcess) ppEffectEnable false;\n\nif (!isNull (GLASSDISPLAY)) then {\n    GLASSDISPLAY closeDisplay 0;\n};\n\nif (GVAR(effects) == 2) then {\n    call FUNC(removeDirtEffect);\n    call FUNC(removeRainEffect);\n    call FUNC(removeDustEffect);\n};\n",
        "functionName": "ace_goggles_fnc_removeGlassesEffect"
      },
      {
        "fileName": "fnc_removeRainEffect.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Removes rain effects from the screen.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_goggles_fnc_removeRainEffect\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!isNull GVAR(RainDrops)) then {\n    deleteVehicle GVAR(RainDrops);\n};\n\nGVAR(RainActive) = false;\nGVAR(RainLastLevel) = 0;\n",
        "functionName": "ace_goggles_fnc_removeRainEffect"
      }
    ]
  },
  {
    "component": "grenades",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n\n#include \"script_component.hpp\"\n\n[\"ace_flashbangExploded\", {_this call FUNC(flashbangExplosionEH)}] call CBA_fnc_addEventHandler;\n\n// Register fired event handlers\n[\"ace_firedPlayer\", DFUNC(throwGrenade)] call CBA_fnc_addEventHandler;\n[\"ace_firedPlayerNonLocal\", DFUNC(throwGrenade)] call CBA_fnc_addEventHandler;\n[\"ace_firedNonPlayer\", DFUNC(throwGrenade)] call CBA_fnc_addEventHandler;\n\nif (!hasInterface) exitWith {};\n\nGVAR(flashbangPPEffectCC) = ppEffectCreate [\"ColorCorrections\", 4265];\nGVAR(flashbangPPEffectCC) ppEffectForceInNVG true;\n\n// Add keybinds\n[\"ACE3 Weapons\", QGVAR(switchGrenadeMode), localize LSTRING(SwitchGrenadeMode), {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n    // Don't change mode or show hint if advanced throwing is active\n    if (ACE_player getVariable [QEGVAR(advanced_throwing,inHand), false]) exitWith {false};\n\n    // Statement\n    [] call FUNC(nextMode);\n}, {false}, [9, [false, false, false]], false] call CBA_fnc_addKeybind; //8 Key\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_flare.sqf",
        "content": "/*\n * Author: commy2\n * Makes flare shine.\n *\n * Arguments:\n * 0: The flare <OBJECT>\n * 1: Color of flare <ARRAY>\n * 2: Intensity of flare <NUMBER>\n * 3: Flare lifetime <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_nade, [0.5,0.5,0.5], 0.5, 60] call ace_grenades_fnc_flare\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_projectile\", \"_color\", \"_intensity\", \"_timeToLive\"];\n\nprivate _light = \"#lightpoint\" createVehicleLocal position _projectile;\n\n_light setLightColor _color;\n_light setLightAmbient _color;\n_light setLightIntensity _intensity;\n_light setLightBrightness 0.8;\n\n_light setLightUseFlare true;\n_light setLightFlareSize 3.0;\n_light setLightFlareMaxDistance 1000;\n\n_light setLightDayLight true;\n\n_light lightAttachObject [_projectile, [0,0,0]];\n//_light attachTo [_projectile, [0,0,0]];\n\n[{deleteVehicle _this}, _light, _timeToLive] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_grenades_fnc_flare"
      },
      {
        "fileName": "fnc_flashbangExplosionEH.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Creates the flashbang effect and knock out AI units.\n *\n * Arguments:\n * 0: The flashBang position ASL <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[0,0,0]] call ace_grenades_fnc_flashbangExplosionEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_grenadePosASL\"];\nTRACE_1(\"params\",_grenadePosASL);\n\n// Create flash to illuminate environment\nif (hasInterface) then {\n    private _light = \"#lightpoint\" createVehicleLocal ASLtoAGL _grenadePosASL;\n    _light setPosASL _grenadePosASL;\n\n    _light setLightBrightness 20;\n    _light setLightAmbient [1,1,1];\n    _light setLightColor [1,1,1];\n    _light setLightDayLight true;\n\n    // Reduce the light after 0.1 seconds\n    [{\n        params [\"_light\"];\n        _light setLightBrightness 5;\n        // Delete the light after 0.2 more seconds\n        [{\n            params [\"_light\"];\n            deleteVehicle _light;\n        }, [_light], 0.2] call CBA_fnc_waitAndExecute;\n    }, [_light], 0.1] call CBA_fnc_waitAndExecute;\n};\n\n// Affect local AI\n// @todo: Affect units in static weapons, turned out, etc\nprivate _affected = (ASLtoAGL _grenadePosASL) nearEntities [\"CAManBase\", 20];\n_affected = _affected - [ACE_player];\n{\n    if (local _x && {alive _x}) then {\n        private _strength = 1 - (((getPosASL _x) vectorDistance _grenadePosASL) min 20) / 20;\n\n        TRACE_3(\"FlashBangEffect Start\",_x,((getPosASL _x) vectorDistance _grenadePosASL),_strength);\n\n        [_x, true] call EFUNC(common,disableAI);\n\n        _x setSkill (skill _x / 50);\n\n        if (_strength > 0.2) then {\n            _x setVectorDir ((getPosASL _x) vectorDiff _grenadePosASL);\n        };\n\n        [{\n            params [\"_unit\"];\n\n            //Make sure we don't enable AI for unconscious units\n            if !(_unit getVariable [\"ace_isUnconscious\", false]) then {\n                [_unit, false] call EFUNC(common,disableAI);\n            };\n\n            _unit setSkill (skill _unit * 50);\n        }, [_x], 7 * _strength] call CBA_fnc_waitAndExecute;\n    };\n} count _affected;\n\n// Affect local player, independently of distance\nif (hasInterface && {!isNull ACE_player} && {alive ACE_player}) then {\n    // Do effects for player\n    // is there line of sight to the grenade?\n    private _eyePos = eyePos ACE_player; //PositionASL\n    _grenadePosASL set [2, (_grenadePosASL select 2) + 0.2]; // compensate for grenade glitching into ground\n\n    private _strength = 1 - ((_eyePos vectorDistance _grenadePosASL) min 20) / 20;\n\n    // Check for line of sight (check 4 points in case grenade is stuck in an object or underground)\n    private _losCoefficient = 1;\n    private _losCount = {\n        !lineIntersects [_grenadePosASL vectorAdd _x, _eyePos, ACE_player]\n    } count [[0,0,0], [0,0,0.2], [0.1, 0.1, 0.1], [-0.1, -0.1, 0.1]];\n    TRACE_1(\"Line of sight count (out of 4)\",_losCount);\n    if (_losCount <= 1) then {\n        _losCoefficient = 0.1;\n    };\n    _strength = _strength * _losCoefficient;\n\n    // Add ace_hearing ear ringing sound effect\n    if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Hearing\") && {_strength > 0}) then {\n        [40 * _strength] call EFUNC(hearing,earRinging);\n    };\n\n    // add ace_medical pain effect:\n    if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") && {_strength > 0.1}) then {\n        [ACE_player, _strength / 2] call EFUNC(medical,adjustPainLevel);\n    };\n\n    // Effect on vision has a wider range, with a higher falloff\n    _strength = 1 - (((_eyePos vectorDistance _grenadePosASL) min 25) / 25) ^ 0.4;\n    _strength = _strength * _losCoefficient;\n    // Account for people looking away by slightly reducing the effect for visual effects.\n    private _eyeDir = ((AGLtoASL positionCameraToWorld [0,0,1]) vectorDiff (AGLtoASL positionCameraToWorld [0,0,0]));\n    private _dirToUnitVector = _eyePos vectorFromTo _grenadePosASL;\n    private _angleDiff = acos (_eyeDir vectorDotProduct _dirToUnitVector);\n    TRACE_2(\"\",_angleDiff,((1 - (_angleDiff - 45) / (120 - 45)) max 0));\n    // from 0-45deg, full effect\n    if (_angleDiff > 45) then {\n        _strength = _strength * ((1 - (_angleDiff - 45) / (120 - 45)) max 0);\n    };\n\n    // Blind player\n    if (_strength > 0.1) then {\n        GVAR(flashbangPPEffectCC) ppEffectEnable true;\n        GVAR(flashbangPPEffectCC) ppEffectAdjust [1,1,(0.8 + _strength) min 1,[1,1,1,0],[0,0,0,1],[0,0,0,0]];\n        GVAR(flashbangPPEffectCC) ppEffectCommit 0.01;\n\n        //PARTIALRECOVERY - start decreasing effect over time\n        [{\n            params [\"_strength\"];\n\n            GVAR(flashbangPPEffectCC) ppEffectAdjust [1,1,0,[1,1,1,0],[0,0,0,1],[0,0,0,0]];\n            GVAR(flashbangPPEffectCC) ppEffectCommit (10 * _strength);\n        }, [_strength], 7 * _strength] call CBA_fnc_waitAndExecute;\n\n        //FULLRECOVERY - end effect\n        [{\n            GVAR(flashbangPPEffectCC) ppEffectEnable false;\n        }, [], 17 * _strength] call CBA_fnc_waitAndExecute;\n    };\n\n    if (_strength > 0.2) then {\n        ACE_player setVectorDir (_eyePos vectorDiff _grenadePosASL);\n    };\n};\ntrue\n",
        "functionName": "ace_grenades_fnc_flashbangExplosionEH"
      },
      {
        "fileName": "fnc_flashbangThrownFuze.sqf",
        "content": "/*\n * Author: commy2\n * Waits for the flashbang grenade fuze to trigger and 'explode'\n *\n * Arguments:\n * 0: projectile - Flashbang Grenade <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [theFlashbang] call ace_grenades_fnc_flashbangThrownFuze\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_projectile\"];\nTRACE_1(\"params\",_projectile);\n\nif (alive _projectile) then {\n    playSound3D [\"A3\\Sounds_F\\weapons\\Explosion\\explosion_mine_1.wss\", _projectile, false, getPosASL _projectile, 5, 1.2, 400];\n\n    [\"ace_flashbangExploded\", [getPosASL _projectile]] call CBA_fnc_globalEvent;\n};\n",
        "functionName": "ace_grenades_fnc_flashbangThrownFuze"
      },
      {
        "fileName": "fnc_incendiary.sqf",
        "content": "/*\n * Author: commy2\n * Makes incendiary burn.\n *\n * Arguments:\n * 0: The grenade <OBJECT>\n * 1: Incendiary lifetime <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_nade, 60] call ace_grenades_fnc_incendiary\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define ALERT_NEAR_ENEMY_RANGE 60\n\n#define PARTICLE_LIFE_TIME 2\n#define PARTICLE_DENSITY 20\n#define PARTICLE_SIZE 1\n#define PARTICLE_SPEED 1\n\n#define PARTICLE_SMOKE_LIFE_TIME 5\n#define PARTICLE_SMOKE_DENSITY 5\n#define PARTICLE_SMOKE_SIZE 0.5\n#define PARTICLE_SMOKE_SPEED 1\n#define PARTICLE_SMOKE_LIFTING 1\n#define PARTICLE_SMOKE_WIND_EFFECT 1\n\n#define EFFECT_SIZE 1\n#define ORIENTATION 5.4\n#define EXPANSION 1\n\nparams [\"_projectile\", \"_timeToLive\", \"_center\"];\n\nif (isNull _projectile) exitWith {TRACE_1(\"null\",_projectile);};\n\nprivate _position = position _projectile;\n\n// --- AI\nprivate _nearLocalEnemies = [];\n\n{\n    {\n        if (local _x && {[_center, side _x] call BIS_fnc_sideIsEnemy}) then { // WE WANT THE OBJECTS SIDE HERE!\n            _nearLocalEnemies pushBackUnique _x;\n        };\n    } forEach crew _x;\n} forEach (_position nearObjects ALERT_NEAR_ENEMY_RANGE);\n\n{\n    if (behaviour _x in [\"SAFE\", \"AWARE\"]) then {\n        _x setBehaviour \"COMBAT\";\n    };\n} forEach _nearLocalEnemies;\n\n// --- fire\nprivate _fire = \"#particlesource\" createVehicleLocal _position;\n\n_fire setParticleParams [\n    [\"\\A3\\data_f\\ParticleEffects\\Universal\\Universal\",16,10,32],\n    \"\",\n    \"billboard\",\n    1,\n    PARTICLE_LIFE_TIME,\n    [0,0,0],\n    [0, 0, 0.4 * PARTICLE_SPEED],\n    0,\n    0.0565,\n    0.05,\n    0.03,\n    [0.9 * PARTICLE_SIZE, 0],\n    [\n        [0.5,0.5,0.5,-0],\n        [0.5,0.5,0.5,-1],\n        [0.5,0.5,0.5,-1],\n        [0.5,0.5,0.5,-1],\n        [0.5,0.5,0.5,-1],\n        [0.5,0.5,0.5,0]\n    ],\n    [1],\n    0.01,\n    0.02,\n    \"\",\n    \"\",\n    _projectile,\n    ORIENTATION,\n    false,\n    -1,\n    [[3,3,3,0]]\n];\n\n_fire setParticleRandom [PARTICLE_LIFE_TIME / 4, [0.15 * EFFECT_SIZE, 0.15 * EFFECT_SIZE, 0], [0.2,0.2,0], 0.4, 0, [0,0,0,0], 0, 0, 0.2];\n_fire setParticleFire [1.2,1.0,0.1];\n_fire setDropInterval (1 / PARTICLE_DENSITY);\n\n// --- smoke\nprivate _smoke = \"#particlesource\" createVehicleLocal _position;\n\n_smoke setParticleParams [\n    [\"\\A3\\data_f\\ParticleEffects\\Universal\\Universal_02\",8,0,40,1],\n    \"\",\n    \"billboard\",\n    1,\n    PARTICLE_SMOKE_LIFE_TIME,\n    [0,0,0],\n    [0, 0, 2 * PARTICLE_SMOKE_SPEED],\n    0,\n    0.05,\n    0.04 * PARTICLE_SMOKE_LIFTING,\n    0.05 * PARTICLE_SMOKE_WIND_EFFECT,\n    [1 * PARTICLE_SMOKE_SIZE + 1, 1.8 * PARTICLE_SMOKE_SIZE + 15],\n    [\n        [0.7,0.7,0.7,0.7],\n        [0.7,0.7,0.7,0.6],\n        [0.7,0.7,0.7,0.45],\n        [0.84,0.84,0.84,0.28],\n        [0.84,0.84,0.84,0.16],\n        [0.84,0.84,0.84,0.09],\n        [0.84,0.84,0.84,0.06],\n        [1,1,1,0.02],\n        [1,1,1,0]\n    ],\n    [1,0.55,0.35],\n    0.1,\n    0.08 * EXPANSION,\n    \"\",\n    \"\",\n    _projectile\n];\n\n_smoke setParticleRandom [PARTICLE_SMOKE_LIFE_TIME / 2, [0.5 * EFFECT_SIZE, 0.5 * EFFECT_SIZE, 0.2 * EFFECT_SIZE], [0.3,0.3,0.5], 1, 0, [0,0,0,0.06], 0, 0];\n_smoke setDropInterval (1 / PARTICLE_SMOKE_DENSITY);\n\n// --- light\nprivate _light = \"#lightpoint\" createVehicleLocal (_position vectorAdd [0,0,0.5]);\n\n_light setLightBrightness 1.0;\n_light setLightColor [1,0.65,0.4];\n_light setLightAmbient [0.15,0.05,0];\n_light setLightIntensity (50 + 400 * ((PARTICLE_SIZE + EFFECT_SIZE) / 2));\n_light setLightAttenuation [0,0,0,1];\n\n_light setLightDayLight false;\n\n_light lightAttachObject [_projectile, [0,0,0]];\n\n// --- sound\nprivate _sound = objNull;\n\nif (isServer) then {\n    _sound = createSoundSource [\"Sound_Fire\", _position, [], 0];\n};\n\n[{\n    {deleteVehicle _x} forEach _this;\n}, [_fire, _smoke, _light, _sound], _timeToLive] call CBA_fnc_waitAndExecute;\n\n// --- damage\n{\n    if (local _x) then {\n        //systemChat format [\"burn: %1\", _x];\n\n        // --- destroy nearby static weapons and ammo boxes\n        if (_x isKindOf \"StaticWeapon\" || {_x isKindOf \"ACE_RepairItem_Base\"}) then {\n            _x setDamage 1;\n        };\n        if (_x isKindOf \"ReammoBox_F\") then {\n            if (\"ace_cookoff\" call EFUNC(common,isModLoaded) && {EGVAR(cookoff,enable)}) then {\n                _x call EFUNC(cookoff,cookOffBox);\n            } else {\n                _x setDamage 1;\n            };\n        };\n\n        // --- delete nearby ground weapon holders\n        if (_x isKindOf \"WeaponHolder\" || {_x isKindOf \"WeaponHolderSimulated\"}) then {\n            deleteVehicle _x;\n        };\n\n        // --- inflame fireplace, barrels etc.\n        _x inflame true;\n    };\n} forEach (_position nearObjects EFFECT_SIZE);\n\n// --- damage local vehicle\nprivate _vehicle = _position nearestObject \"Car\";\n\nif (!local _vehicle) exitWith {};\n\nprivate _config = _vehicle call CBA_fnc_getObjectConfig;\n\n// --- burn tyres\nprivate _fnc_isWheelHitPoint = {\n    params [\"_selectionName\"];\n\n    // wheels must use a selection named \"wheel_X_Y_steering\" for PhysX to work\n    _selectionName select [0, 6] == \"wheel_\" && {\n        _selectionName select [count _selectionName - 9] == \"_steering\"\n    } // return\n};\n\n{\n    private _wheelSelection = getText (_config >> \"HitPoints\" >> _x >> \"name\");\n\n    if (_wheelSelection call _fnc_isWheelHitPoint) then {\n        private _wheelPosition = _vehicle modelToWorld (_vehicle selectionPosition _wheelSelection);\n\n        if (_position distance _wheelPosition < EFFECT_SIZE * 2) then {\n            _vehicle setHit [_wheelSelection, 1];\n        };\n    };\n} forEach (getAllHitPointsDamage _vehicle param [0, []]);\n\n// --- burn car engine\nif (_vehicle isKindOf \"Wheeled_APC_F\") exitWith {};\n\nprivate _engineSelection = getText (_config >> \"HitPoints\" >> \"HitEngine\" >> \"name\");\nprivate _enginePosition = _vehicle modelToWorld (_vehicle selectionPosition _engineSelection);\n\nif (_position distance _enginePosition < EFFECT_SIZE * 2) then {\n    _vehicle setHit [_engineSelection, 1];\n\n    if (\"ace_cookoff\" call EFUNC(common,isModLoaded) && {EGVAR(cookoff,enable)}) then {\n        _vehicle call EFUNC(cookoff,engineFire);\n    };\n};\n",
        "functionName": "ace_grenades_fnc_incendiary"
      },
      {
        "fileName": "fnc_nextMode.sqf",
        "content": "/*\n * Author: commy2\n * Select the next throwing mode and display message.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Handeled <BOOL>\n *\n * Example:\n * [] call ace_grenades_fnc_nextMode\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _mode = missionNamespace getVariable [QGVAR(currentThrowMode), 0];\n\nif (_mode == 4) then {\n    _mode = 0;\n} else {\n    _mode = _mode + 1;\n};\n\n// ROLL GRENADE DOESN'T WORK RIGHT NOW\nif (_mode == 3) then {\n    _mode = 4;\n};\n\nprivate _hint = localize ([\n    LSTRING(NormalThrow),\n    LSTRING(HighThrow),\n    LSTRING(PreciseThrow),\n    LSTRING(RollGrenade),\n    LSTRING(DropGrenade)  \n] select _mode);\n\n[_hint] call EFUNC(common,displayTextStructured);\n\nGVAR(currentThrowMode) = _mode;\n\ntrue\n",
        "functionName": "ace_grenades_fnc_nextMode"
      },
      {
        "fileName": "fnc_throwGrenade.sqf",
        "content": "/*\n * Author: commy2\n * Adjust the grenades throwing direction and speed to the selected throwing mode. Called from the unified fired EH only for CAManBase\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [clientFiredBIS-XEH] call ace_grenades_fnc_throwGrenade\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nif (_weapon != \"Throw\") exitWith {};\n\n// http://feedback.arma3.com/view.php?id=12340\nif (isNull _projectile) then {\n    _projectile = nearestObject [_unit, _ammo];\n};\n\nprivate _config = configFile >> \"CfgAmmo\" >> _ammo;\n\n// handle special grenades and sounds\nif (local _unit) then {\n    // handle priming sound, if present\n    private _soundConfig = getArray (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(pullPinSound));\n    if !(_soundConfig isEqualTo []) then {\n        _soundConfig params [\"_file\", \"_volume\", \"_pitch\", \"_distance\"];\n        playSound3D [_file, objNull, false, getPosASL _projectile, _volume, _pitch, _distance];\n    };\n\n    if (getNumber (_config >> QGVAR(flashbang)) == 1) then {\n        private _fuzeTime = getNumber (_config >> \"explosionTime\");\n\n        [FUNC(flashbangThrownFuze), [_projectile], _fuzeTime] call CBA_fnc_waitAndExecute;\n    };\n};\n\nif (getNumber (_config >> QGVAR(flare)) == 1) then {\n    private _fuzeTime = getNumber (_config >> \"explosionTime\");\n    private _timeToLive = getNumber (_config >> \"timeToLive\");\n    private _color = getArray (_config >> QGVAR(color));\n    private _intensity = _color deleteAt 3;\n\n    [FUNC(flare), [_projectile, _color, _intensity, _timeToLive], _fuzeTime] call CBA_fnc_waitAndExecute;\n};\n\nif (getNumber (_config >> QGVAR(incendiary)) == 1) then {\n    private _fuzeTime = getNumber (_config >> \"explosionTime\");\n    private _timeToLive = getNumber (_config >> \"timeToLive\");\n\n    [FUNC(incendiary), [_projectile, _timeToLive, side _unit], _fuzeTime] call CBA_fnc_waitAndExecute; // WE WANT THE OBJECTS SIDE HERE!\n};\n\n// handle throw modes\nif (_unit != ACE_player) exitWith {};\nif (_unit getVariable [QEGVAR(advanced_throwing,primed), false]) exitWith {LOG(\"advanced_throwing throw\");};\n\nprivate _mode = missionNamespace getVariable [QGVAR(currentThrowMode), 0];\n\nif (_mode != 0) then {\n    private _velocity = velocity _projectile;\n\n    switch (_mode) do {\n        //high throw\n        case 1 : {\n            _velocity = [\n            0.5 * (_velocity select 0),\n            0.5 * (_velocity select 1),\n            [0, 0, 0] distance (_velocity vectorMultiply 0.5)\n            ];\n        };\n        //precise throw\n        case 2 : {\n            _velocity = (_unit weaponDirection _weapon) vectorMultiply (vectorMagnitude _velocity);\n        };\n        //roll grande\n        case 3 : {\n            //@todo\n        };\n        //drop grenade\n        case 4 : {\n            _velocity = [0, 0, 0];\n        };\n    };\n\n    _projectile setVelocity _velocity;\n};\n",
        "functionName": "ace_grenades_fnc_throwGrenade"
      }
    ]
  },
  {
    "component": "gunbag",
    "files": [
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// restore gunbag info after respawn\n[\"CAManBase\", \"respawn\", {\n    [{\n        params [\"_unit\", \"_corpse\"];\n\n        private _newBackpack = backpackContainer _unit;\n        private _oldBackpack = backpackContainer _corpse;\n\n        if !(typeOf _newBackpack isEqualTo typeOf _oldBackpack) exitWith {};\n\n        private _state = _oldBackpack getVariable [QGVAR(gunbagWeapon), []];\n\n        if !(_state isEqualTo []) then {\n            _newBackpack setVariable [QGVAR(gunbagWeapon), _state, true];\n        };\n    }, _this] call CBA_fnc_execNextFrame;\n}] call CBA_fnc_addClassEventHandler;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_calculateMass.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Calculate mass of weapon an items.\n *\n * Arguments:\n * 0: Weapon <STRING>\n * 1: Items <ARRAY>\n * 2: Magazines <ARRAY>\n *\n * Return Value:\n * Mass <NUMBER>\n *\n * Example:\n * [\"weapon\", [\"item1\", \"item2\"], [\"mag1\", \"mag2\"]] call ace_gunbag_fnc_calculateMass\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_weapon\", \"_items\", \"_magazines\"];\n\nprivate _mass = getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"WeaponSlotsInfo\" >> \"mass\");\n\n{\n    _mass = _mass + getNumber (configFile >> \"CfgWeapons\" >> _x >> \"ItemInfo\" >> \"mass\");\n} foreach _items;\n\n{\n    _mass = _mass + getNumber (configFile >> \"CfgMagazines\" >> _x >> \"mass\");\n} forEach _magazines;\n\n_mass\n",
        "functionName": "ace_gunbag_fnc_calculateMass"
      },
      {
        "fileName": "fnc_canInteract.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Check if client able to interact with gunbag.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * -1: can't interact 0: empty gunbag 1: full gunbag <NUMBER>\n *\n * Example:\n * _canInteract = [player, target] call ace_gunbag_fnc_canInteract\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nprivate _result = -1;\nprivate _gunbag = backpackContainer _target;\nprivate _weapon = primaryWeapon _unit;\n\nif ((_gunbag getVariable [QGVAR(gunbagWeapon), []]) isEqualTo [] && {_weapon != \"\"} && {!(_weapon call FUNC(isMachineGun))}) then {\n    _result = 0;\n};\n\nif (!((_gunbag getVariable [QGVAR(gunbagWeapon), []]) isEqualTo []) && {_weapon == \"\"}) then {\n    _result = 1;\n};\n\n_result\n",
        "functionName": "ace_gunbag_fnc_canInteract"
      },
      {
        "fileName": "fnc_hasGunbag.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Switches gunbag full/empty for mass calculation.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Has Gunbag <BOOL>\n *\n * Example:\n * [player] call ace_gunbag_fnc_hasGunbag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n(backpackContainer _unit) isKindOf QUOTE(ADDON)\n",
        "functionName": "ace_gunbag_fnc_hasGunbag"
      },
      {
        "fileName": "fnc_isMachineGun.sqf",
        "content": "/*\n * Author: commy2\n * Reports true if a weapon is a machine gun.\n *\n * Arguments:\n * 0: Weapon class name <STRING>\n *\n * Return Value:\n * Is machine gun <BOOL>\n *\n * Example:\n * (currentWeapon player) call ace_gunbag_fnc_isMachineGun\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_weapon\"];\n\nprivate _config = _weapon call CBA_fnc_getItemConfig;\n\n// definition of a machine gun by BIS_fnc_itemType\nprivate _cursor = getText (_config >> \"cursor\");\n\nif (toLower _cursor in [\"\", \"emptycursor\"]) then {\n    _cursor = getText (_config >> \"cursorAim\");\n};\n\n_cursor == \"MG\"\n",
        "functionName": "ace_gunbag_fnc_isMachineGun"
      },
      {
        "fileName": "fnc_offGunbag.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Get weapon out of gunbag.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, target] call ace_gunbag_fnc_toGunbag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nprivate _gunbag = backpackContainer _target;\n\n_unit call EFUNC(common,goKneeling);\n\n// play sound\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\n};\n\n[PROGRESSBAR_TIME, _this, {\n    (_this select 0) call FUNC(offGunbagCallback)\n}, {}, localize LSTRING(offGunbag), {\n    (_this select 0) call FUNC(canInteract) == 1\n}] call EFUNC(common,progressBar);\n",
        "functionName": "ace_gunbag_fnc_offGunbag"
      },
      {
        "fileName": "fnc_offGunbagCallback.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Get weapon out of gunbag.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, target] call ace_gunbag_fnc_offGunbagCallback\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nprivate _gunbag = backpackContainer _target;\n\nprivate _state = _gunbag getVariable [QGVAR(gunbagWeapon), []];\n\nif (_state isEqualTo []) exitWith {\n    [localize LSTRING(empty)] call EFUNC(common,displayTextStructured);\n};\n\n_state params [\"_weapon\", \"_items\", \"_magazines\"];\n\n_unit addWeapon _weapon;\n\n// Game will auto add magazines from player's inventory, put these back in player inventory as they will be overwritten\n([_unit, _weapon] call EFUNC(common,getWeaponState)) params [\"\", \"\", \"_addedMags\", \"_addedAmmo\"];\n{\n    if (((_x select 0) != \"\") && {(_addedMags select _forEachIndex) != \"\"}) then {\n        TRACE_2(\"Re-adding mag\",_x,_addedMags select _forEachIndex);\n        _unit addMagazine [_addedMags select _forEachIndex, _addedAmmo select _forEachIndex];\n    };\n} forEach _magazines;\n\nremoveAllPrimaryWeaponItems _unit;\n\n{\n    _unit addWeaponItem [_weapon, _x];\n} forEach (_items + _magazines);\n\n_unit selectWeapon _weapon;\n\n_magazines = _magazines apply {_x select 0};\n\nprivate _mass = [_weapon, _items, _magazines] call FUNC(calculateMass);\n\n// remove virtual load\n[_target, _gunbag, -_mass] call EFUNC(movement,addLoadToUnitContainer);\n_gunbag setVariable [QGVAR(gunbagWeapon), [], true];\n\n// play sound\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\n};\n",
        "functionName": "ace_gunbag_fnc_offGunbagCallback"
      },
      {
        "fileName": "fnc_status.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Check gunbag status full/empty.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_gunbag_fnc_status\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _state = (backpackContainer _unit) getVariable [QGVAR(gunbagWeapon), []];\n\nif (_state isEqualTo []) then {\n    [localize LSTRING(empty)] call EFUNC(common,displayTextStructured);\n} else {\n    _state params [\"_weapon\"];\n\n    [\n        getText (configFile >> \"CfgWeapons\" >> _weapon >> \"displayname\"),\n        getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\")\n    ] call EFUNC(common,displayTextPicture);\n};\n",
        "functionName": "ace_gunbag_fnc_status"
      },
      {
        "fileName": "fnc_toGunbag.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Put weapon into gunbag.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, target] call ace_gunbag_fnc_toGunbag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nprivate _gunbag = backpackContainer _target;\n\n_unit call EFUNC(common,goKneeling);\n\n// play sound\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\n};\n\n[PROGRESSBAR_TIME, _this, {\n    (_this select 0) call FUNC(toGunbagCallback)\n}, {}, localize LSTRING(toGunbag), {\n    (_this select 0) call FUNC(canInteract) == 0\n}] call EFUNC(common,progressBar);\n",
        "functionName": "ace_gunbag_fnc_toGunbag"
      },
      {
        "fileName": "fnc_toGunbagCallback.sqf",
        "content": "/*\n * Author: Ir0n1E\n * Put weapon into gunbag.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, target] call ace_gunbag_fnc_toGunbagCallback\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nprivate _weapon = primaryWeapon _unit;\nprivate _gunbag = backpackContainer _target;\n\nprivate _state = [_unit, _weapon] call EFUNC(common,getWeaponState);\n\n/*\n * example return value _state\n * [[\"\",\"\",\"optic_Aco\",\"\"],[\"arifle_MX_GL_ACO_F\",\"GL_3GL_F\"],[\"30Rnd_65x39_caseless_mag\",\"1Rnd_HE_Grenade_shell\"],[30,1]]\n */\n\n_state params [\"_items\", \"\", \"_magazines\", \"_ammo\"];\n\nprivate _mass = [_weapon, _items, _magazines] call FUNC(calculateMass);\n\n{\n    _magazines set [_forEachIndex, [_x, _ammo select _forEachIndex]];\n} forEach _magazines;\n\n_unit removeWeapon _weapon;\n\n// add virtual load\n[_target, _gunbag, _mass] call EFUNC(movement,addLoadToUnitContainer);\n_gunbag setVariable [QGVAR(gunbagWeapon), [_weapon, _items, _magazines], true];\n\n// play sound\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\n};\n",
        "functionName": "ace_gunbag_fnc_toGunbagCallback"
      }
    ]
  },
  {
    "component": "hearing",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(cacheAmmoLoudness) = call CBA_fnc_createNamespace;\n\nGVAR(deafnessDV) = 0;\nGVAR(deafnessPrior) = 0;\nGVAR(volume) = 1;\nGVAR(playerVehAttenuation) = 1;\nGVAR(time3) = 0;\nGVAR(damageCoefficent) = 1;\nGVAR(volumeAttenuation) = 1;\nGVAR(lastPlayerVehicle) = objNull;\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"settingInit\",GVAR(EnableCombatDeafness));\n    // Only run PFEH and install event handlers if combat deafness is enabled\n    if (!GVAR(EnableCombatDeafness)) exitWith {};\n\n    // Spawn volume updating process\n    [LINKFUNC(updateVolume), 1, [false]] call CBA_fnc_addPerFrameHandler;\n\n    // Update veh attunation when player veh changes\n    [\"vehicle\", {\n        params [\"_player\", \"_vehicle\"];\n        TRACE_2(\"vehicle change\",_player,_vehicle);\n        _this call FUNC(updatePlayerVehAttenuation);\n\n        if (!isNull GVAR(lastPlayerVehicle)) then {\n            private _firedEH = GVAR(lastPlayerVehicle) getVariable [QGVAR(firedEH), -1];\n            GVAR(lastPlayerVehicle) removeEventHandler [\"FiredNear\", _firedEH];\n            GVAR(lastPlayerVehicle) setVariable [QGVAR(firedEH), nil];\n            GVAR(lastPlayerVehicle) = objNull;\n            TRACE_2(\"removed veh eh\",_firedEH,GVAR(lastPlayerVehicle));\n        };\n        if ((!isNull _vehicle) && {_player != _vehicle}) then {\n            private _firedEH = _vehicle addEventHandler [\"FiredNear\", {call FUNC(firedNear)}];\n            _vehicle setVariable [QGVAR(firedEH), _firedEH];\n            GVAR(lastPlayerVehicle) = _vehicle;\n            TRACE_2(\"added veh eh\",_firedEH,GVAR(lastPlayerVehicle));\n        };\n    }, true] call CBA_fnc_addPlayerEventHandler;\n    [\"turret\", LINKFUNC(updatePlayerVehAttenuation), false] call CBA_fnc_addPlayerEventHandler;\n\n\n    // Reset deafness on respawn (or remote control player switch)\n    [\"unit\", {\n        params [\"_player\", \"_oldPlayer\"];\n        TRACE_2(\"unit change\",_player,_oldPlayer);\n\n        if (!isNull _oldPlayer) then {\n            private _firedEH = _oldPlayer getVariable [QGVAR(firedEH), -1];\n            _oldPlayer removeEventHandler [\"FiredNear\", _firedEH];\n            _oldPlayer setVariable [QGVAR(firedEH), nil];\n            private _explosionEH = _oldPlayer getVariable [QGVAR(explosionEH), -1];\n            _oldPlayer removeEventHandler [\"Explosion\", _explosionEH];\n            _oldPlayer setVariable [QGVAR(explosionEH), nil];\n            TRACE_3(\"removed unit eh\",_oldPlayer,_firedEH,_explosionEH);\n        };\n        // Don't add a new EH if the unit respawned\n        if ((_player getVariable [QGVAR(firedEH), -1]) == -1) then {\n            if ((getNumber (configFile >> \"CfgVehicles\" >> (typeOf _player) >> \"isPlayableLogic\")) == 1) exitWith {\n                TRACE_1(\"skipping playable logic\",typeOf _player); // VirtualMan_F (placeable logic zeus / spectator)\n            };\n            private _firedEH = _player addEventHandler [\"FiredNear\", {call FUNC(firedNear)}];\n            _player setVariable [QGVAR(firedEH), _firedEH];\n            private _explosionEH = _player addEventHandler [\"Explosion\", {call FUNC(explosionNear)}];\n            _player setVariable [QGVAR(explosionEH), _explosionEH];\n            TRACE_3(\"added unit eh\",_player,_firedEH,_explosionEH);\n        };\n\n        GVAR(deafnessDV) = 0;\n        GVAR(deafnessPrior) = 0;\n        GVAR(time3) = 0;\n        [] call FUNC(updateHearingProtection);\n    }, true] call CBA_fnc_addPlayerEventHandler;\n\n    // Update protection on possible helmet change\n    [\"loadout\", LINKFUNC(updateHearingProtection), false] call CBA_fnc_addPlayerEventHandler;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addEarPlugs.sqf",
        "content": "/*\n * Author: commy2\n * Called on unit initialization. Adds earplugs if the unit is equipped with either a really loud primary weapon or a rocket launcher.\n *\n * Arguments:\n * 0: A Soldier <Object>\n *\n * Return Value:\n * None\n *\n * Example:\n * [guy] call ace_hearing_fnc_addEarPlugs\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_2(\"params\",_unit,typeOf _unit);\n\n// only run this after the settings are initialized\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(addEarPlugs), _this];\n};\n\n// Exit if hearing is disabled OR autoAdd is disabled OR soldier has earplugs already in (persistence scenarios)\nif (!GVAR(enableCombatDeafness) || {!GVAR(autoAddEarplugsToUnits)} || {[_unit] call FUNC(hasEarPlugsIn)}) exitWith {};\n\n// add earplugs if the soldier has a rocket launcher\nif ((secondaryWeapon _unit) != \"\") exitWith {\n    TRACE_1(\"has launcher - adding\",_unit);\n    _unit addItem \"ACE_EarPlugs\";\n};\n\n// otherwise add earplugs if the soldier has a big rifle\nif ((primaryWeapon _unit) == \"\") exitWith {};\n\n(primaryWeaponMagazine _unit) params [[\"_magazine\", \"\"]];\nif (_magazine == \"\") exitWith {};\n\nprivate _initSpeed = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\nprivate _ammo = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\nprivate _count = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"count\");\n\nprivate _caliber = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ACE_caliber\");\n_caliber = call {\n    if (_ammo isKindOf [\"ShellBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\n    if (_ammo isKindOf [\"RocketBase\", (configFile >> \"CfgAmmo\")]) exitWith { 200 };\n    if (_ammo isKindOf [\"MissileBase\", (configFile >> \"CfgAmmo\")]) exitWith { 600 };\n    if (_ammo isKindOf [\"SubmunitionBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\n    if (_caliber <= 0) then { 6.5 } else { _caliber };\n};\nprivate _loudness = (_caliber ^ 1.25 / 10) * (_initspeed / 1000) / 5;\n\n//If unit has a machine gun boost effective loudness 50%\nif (_count >= 50) then {_loudness = _loudness * 1.5};\n\nTRACE_2(\"primaryWeapon\",_unit,_loudness);\n\nif (_loudness > 0.2) then {\n    TRACE_1(\"loud gun - adding\",_unit);\n    _unit addItem \"ACE_EarPlugs\";\n};\n",
        "functionName": "ace_hearing_fnc_addEarPlugs"
      },
      {
        "fileName": "fnc_earRinging.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2, Rocko, Rommel, Ruthberg\n * Handle new sound souce near ace_player and apply hearing damage\n *\n * Arguments:\n * 0: strength of ear ringing <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_strength] call ace_hearing_fnc_earRinging\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_strength\"];\n\nif (_strength < 0.05) exitWith {};\nif (!isNull curatorCamera) exitWith {};\nif ((!GVAR(enabledForZeusUnits)) && {player != ACE_player}) exitWith {};\n\nTRACE_2(\"adding\",_strength * GVAR(damageCoefficent),GVAR(deafnessDV));\n\nGVAR(deafnessDV) = GVAR(deafnessDV) + (_strength * GVAR(damageCoefficent));\n",
        "functionName": "ace_hearing_fnc_earRinging"
      },
      {
        "fileName": "fnc_explosionNear.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2, Ruthberg\n * Handles deafness due to explosions going off near the player.\n *\n * Arguments:\n * 0: vehicle - Object the event handler is assigned to (player) <OBJECT>\n * 1: damage - Damage inflicted to the object <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [clientExplosionEvent] call ace_hearing_fnc_explosionNear\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_damage\"];\n\nTRACE_2(\"explosion near player\",_unit,_damage);\n\nprivate _strength = (0 max _damage) * 30;\nif (_strength < 0.01) exitWith {};\n\n// Call inmediately, as it will get pick up later anyway by the update thread\n[_strength] call FUNC(earRinging);\n",
        "functionName": "ace_hearing_fnc_explosionNear"
      },
      {
        "fileName": "fnc_firedNear.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Handles deafness due to large-caliber weapons going off near the player.\n *\n * Arguments:\n * 0: Unit - Object the event handler is assigned to <OBJECT>\n * 1: Firer: Object - Object which fires a weapon near the unit <OBJECT>\n * 2: Distance - Distance in meters between the unit and firer <NUMBER>\n * 3: weapon - Fired weapon <STRING>\n * 4: muzzle - Muzzle that was used (not used) <STRING>\n * 5: mode - Current mode of the fired weapon (not used) <STRING>\n * 6: ammo - Ammo used <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [clientFiredNearEvent] call ace_hearing_fnc_firedNear\n * [player, player, 10, \"arifle_MX_ACO_pointer_F\", \"arifle_MX_ACO_pointer_F\", \"single\", \"B_65x39_Caseless\"] call ace_hearing_fnc_firedNear\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_firer\", \"_distance\", \"_weapon\", \"\", \"\", \"_ammo\"];\n\nif (_weapon in [\"Throw\", \"Put\"]) exitWith {};\nif (_distance > 50) exitWith {};\n\nprivate _vehAttenuation = if ((ACE_player == (vehicle ACE_player)) || {isTurnedOut ACE_player}) then {1} else {GVAR(playerVehAttenuation)};\nprivate _distance = 1 max _distance;\n\nprivate _silencer = switch (_weapon) do {\n    case (primaryWeapon _firer) : {(primaryWeaponItems _firer) select 0};\n    case (secondaryWeapon _firer) : {(secondaryWeaponItems _firer) select 0};\n    case (handgunWeapon _firer) : {(handgunItems _firer) select 0};\n    default {\"\"};\n};\n\nprivate _audibleFireCoef = 1;\nif (_silencer != \"\") then {\n    _audibleFireCoef = getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"audibleFire\");\n};\n\nprivate _loudness = GVAR(cacheAmmoLoudness) getVariable (format [\"%1%2\",_weapon,_ammo]);\nif (isNil \"_loudness\") then {\n    private _muzzles = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"muzzles\");\n    private _weaponMagazines = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\n    {\n        if (_x != \"this\") then {\n            private _muzzleMagazines = getArray (configFile >> \"CfgWeapons\" >> _weapon >> _x >> \"magazines\");\n            _weaponMagazines append _muzzleMagazines;\n        };\n    } count _muzzles;\n    {\n        private _ammoType = getText(configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\n        _weaponMagazines set [_forEachIndex, [_x, _ammoType]];\n    } forEach _weaponMagazines;\n\n    private _magazine = \"\";\n    {\n        _x params [\"_magazineType\", \"_ammoType\"];\n        if (_ammoType == _ammo) exitWith {\n            _magazine = _magazineType;\n        };\n    } count _weaponMagazines;\n\n    if (_magazine == \"\") then {\n        _loudness = 0;\n        TRACE_2(\"No mag for Weapon/Ammo??\",_weapon,_ammo);\n    } else {\n        private _initSpeed = getNumber(configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\n        private _caliber = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ACE_caliber\");\n        _caliber = call {\n            // If explicilty defined, use ACE_caliber\n            if ((count configProperties [(configFile >> \"CfgAmmo\" >> _ammo), \"configName _x == 'ACE_caliber'\", false]) == 1) exitWith {_caliber};\n            if (_ammo isKindOf [\"ShellBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\n            if (_ammo isKindOf [\"RocketBase\", (configFile >> \"CfgAmmo\")]) exitWith { 200 };\n            if (_ammo isKindOf [\"MissileBase\", (configFile >> \"CfgAmmo\")]) exitWith { 600 };\n            if (_ammo isKindOf [\"SubmunitionBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\n            if (_caliber <= 0) then { 6.5 } else { _caliber };\n        };\n\n        _loudness = (_caliber ^ 1.25 / 10) * (_initspeed / 1000) / 5;\n        TRACE_6(\"building cache\",_weapon,_ammo,_magazine,_initSpeed,_caliber,_loudness);\n    };\n    GVAR(cacheAmmoLoudness) setVariable [(format [\"%1%2\",_weapon,_ammo]), _loudness];\n};\n\n_loudness = _loudness * _audibleFireCoef;\nprivate _strength = _vehAttenuation * (_loudness - (_loudness / 50 * _distance)); // linear drop off\n\nTRACE_1(\"result\",_strength);\n\nif (_strength < 0.01) exitWith {};\n\n// Call inmediately, as it will get pick up later anyway by the update thread\n[_strength] call FUNC(earRinging);\n",
        "functionName": "ace_hearing_fnc_firedNear"
      },
      {
        "fileName": "fnc_handleRespawn.sqf",
        "content": "/*\n * Author: PabstMirror\n * Reset earplugs on respawn, and then re-add if appropriate\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ACE_hearing_fnc_handleRespawn;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_2(\"params\",_unit,typeOf _unit);\n\nif (!local _unit) exitWith {}; //XEH should only be called on local units\n\n//Do not add or remove earplugs if gear should be preserved\nif (missionNamespace getVariable [QEGVAR(respawn,SavePreDeathGear), false]) exitWith {};\n\nprivate _respawn = [0] call BIS_fnc_missionRespawnType;\n\n//if respawn is not Group or side:\nif (_respawn <= 3) then {\n    //Remove earplugs if they have them:\n    if (_unit getVariable [\"ACE_hasEarPlugsin\", false]) then {\n        TRACE_1(\"had EarPlugs in - removing\",_unit);\n        _unit setVariable [\"ACE_hasEarPlugsin\", false, true];\n    };\n};\n\n//Re-add if they need them:\n[_unit] call FUNC(addEarPlugs);\n",
        "functionName": "ace_hearing_fnc_handleRespawn"
      },
      {
        "fileName": "fnc_hasEarPlugsIn.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit has earplugs put in.\n *\n * Arguments:\n * 0: Unit (player) <OBJECT>\n *\n * Return Value:\n * Have Earplugs in <BOOL>\n *\n * Example:\n * [ace_player] call ace_hearing_fnc_hasEarPlugsIn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\"];\n\n_unit getVariable [\"ACE_hasEarPlugsin\", false]\n",
        "functionName": "ace_hearing_fnc_hasEarPlugsIn"
      },
      {
        "fileName": "fnc_moduleHearing.sqf",
        "content": "/*\n * Author: esteldunedain\n * Initializes the Hearing module.\n *\n * Arguments:\n * Whatever the module provides. (I dunno.) <UNKNOWN>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ACE_hearing_fnc_moduleHearing\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(EnableCombatDeafness), \"EnableCombatDeafness\"] call EFUNC(common,readSettingFromModule);\n\n// Do Not Force - read module setting only non-default is set due to using SCALAR\nif ((_logic getVariable \"DisableEarRinging\") != -1) then {\n    [_logic, QGVAR(DisableEarRinging), \"DisableEarRinging\"] call EFUNC(common,readSettingFromModule);\n};\n[_logic, QGVAR(enabledForZeusUnits), \"enabledForZeusUnits\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(autoAddEarplugsToUnits), \"autoAddEarplugsToUnits\"] call EFUNC(common,readSettingFromModule);\nINFO(\"Hearing Module Initialized.\");\n",
        "functionName": "ace_hearing_fnc_moduleHearing"
      },
      {
        "fileName": "fnc_putInEarplugs.sqf",
        "content": "/*\n * Author: Hope Johnson and commy2\n * Puts in earplugs.\n *\n * Arguments:\n * 0: Unit (player) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ace_player] call ace_hearing_fnc_putInEarplugs\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\"];\n\nif (!GVAR(EnableCombatDeafness)) exitWith {};\n\n// Plugs in inventory, putting them in\n_player removeItem \"ACE_EarPlugs\";\n\n_player setVariable [\"ACE_hasEarPlugsIn\", true, true];\n\n[localize LSTRING(EarPlugs_Are_On)] call EFUNC(common,displayTextStructured);\n\n//Force an immediate fast volume update:\n[[true]] call FUNC(updateVolume);\n\n/*// No Earplugs in inventory, telling user\n[localize LSTRING(NoPlugs)] call EFUNC(common,displayTextStructured);*/\n\n[] call FUNC(updateHearingProtection);\n",
        "functionName": "ace_hearing_fnc_putInEarplugs"
      },
      {
        "fileName": "fnc_removeEarplugs.sqf",
        "content": "/*\n * Author: Hope Johnson and commy2\n * Takes out earplugs.\n *\n * Arguments:\n * 0: Unit (player) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ace_player] call ace_hearing_fnc_removeEarplugs\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\"];\n\nif (!GVAR(EnableCombatDeafness)) exitWith {};\n\nif !(_player canAdd \"ACE_EarPlugs\") exitWith { // inventory full\n    [localize LSTRING(Inventory_Full)] call EFUNC(common,displayTextStructured);\n};\n\n// Plugs already in and removing them.\n_player addItem \"ACE_EarPlugs\";\n\n_player setVariable [\"ACE_hasEarPlugsIn\", false, true];\n\n[localize LSTRING(EarPlugs_Are_Off)] call EFUNC(common,displayTextStructured);\n\n//Force an immediate fast volume update:\n[[true]] call FUNC(updateVolume);\n\n[] call FUNC(updateHearingProtection);\n",
        "functionName": "ace_hearing_fnc_removeEarplugs"
      },
      {
        "fileName": "fnc_updateHearingProtection.sqf",
        "content": "/*\n * Author: PabstMirror\n * Updates the hearing protection and volume attenuation for player on earbuds/helmet change\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_hearing_fnc_updateHearingProtection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nTRACE_1(\"params\",_this);\n\nif (isNull ACE_player) exitWith {\n    GVAR(damageCoefficent) = 0;\n    GVAR(volumeAttenuation) = 1;\n};\n\n// Handle Earplugs\nprivate _hasEarPlugsIn = [ACE_player] call FUNC(hasEarPlugsIn);\nGVAR(damageCoefficent) = [1, 0.25] select _hasEarPlugsIn;\nGVAR(volumeAttenuation) = [1, GVAR(EarplugsVolume)] select _hasEarPlugsIn;\n\n// Handle Headgear\nif (headgear ACE_player != \"\") then {\n    private _protection = getNumber (configFile >> \"CfgWeapons\" >> headgear ACE_player >> QGVAR(protection)) min 1;\n    GVAR(damageCoefficent) = GVAR(damageCoefficent) * (1 - _protection);\n    private _attenuation = getNumber (configFile >> \"CfgWeapons\" >> headgear ACE_player >> QGVAR(lowerVolume)) min 1;\n    GVAR(volumeAttenuation) = GVAR(volumeAttenuation) * (1 - _attenuation);\n};\n\n// Handle Goggles\nif (goggles ACE_player != \"\") then {\n    private _protection = getNumber (configFile >> \"CfgGlasses\" >> goggles ACE_player >> QGVAR(protection)) min 1;\n    GVAR(damageCoefficent) = GVAR(damageCoefficent) * (1 - _protection);\n    private _attenuation = getNumber (configFile >> \"CfgGlasses\" >> goggles ACE_player >> QGVAR(lowerVolume)) min 1;\n    GVAR(volumeAttenuation) = GVAR(volumeAttenuation) * (1 - _attenuation);\n};\n",
        "functionName": "ace_hearing_fnc_updateHearingProtection"
      },
      {
        "fileName": "fnc_updatePlayerVehAttenuation.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets the sound attenuation of a player to the outside.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Ammount that unit can hear outside <NUMBER>\n *\n * Example:\n * [] call ace_hearing_fnc_updatePlayerVehAttenuation\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _vehicle = vehicle ACE_player;\n\nif (isNull _vehicle) exitWith {};\n\nprivate _newAttenuation = 1;\nif (ACE_player != _vehicle) then {\n    private _turretPath = [ACE_player] call EFUNC(common,getTurretIndex);\n    private _effectType = getText (configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"attenuationEffectType\");\n\n    if (!(_turretPath isEqualTo [])) then {\n        private _turretConfig = [(configFile >> \"CfgVehicles\" >> (typeOf _vehicle)), _turretPath] call EFUNC(common,getTurretConfigPath);\n\n        if ((getNumber (_turretConfig >> \"disableSoundAttenuation\")) == 1) then {\n            _effectType = \"\";\n        } else {\n            if (isText (_turretConfig >> \"soundAttenuationTurret\")) then {\n                _effectType = getText (_turretConfig >> \"soundAttenuationTurret\");\n            };\n        };\n    };\n\n    _newAttenuation = switch (true) do {\n        case (_effectType == \"\"): {1};\n        case (_effectType == \"CarAttenuation\");\n        case (_effectType == \"RHS_CarAttenuation\"): { // Increase protection for armored cars\n            private _armor = getNumber (configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"HitPoints\" >> \"HitBody\" >> \"armor\");\n            linearConversion [2, 8, _armor, 0.5, 0.3, true];};\n        case (_effectType == \"OpenCarAttenuation\"): {1};\n        case (_effectType == \"TankAttenuation\"): {0.1};\n        case (_effectType == \"HeliAttenuation\"): {0.3};\n        case (_effectType == \"OpenHeliAttenuation\"): {0.9};\n        case (_effectType == \"SemiOpenHeliAttenuation\"): {0.6};\n        case (_effectType == \"HeliAttenuationGunner\"): {0.85};\n        case (_effectType == \"HeliAttenuationRamp\"): {0.85};\n        default {1};\n    };\n};\n\nTRACE_2(\"New vehicle attenuation\",_vehicle,_newAttenuation);\n\nGVAR(playerVehAttenuation) = _newAttenuation;\n",
        "functionName": "ace_hearing_fnc_updatePlayerVehAttenuation"
      },
      {
        "fileName": "fnc_updateVolume.sqf",
        "content": "/*\n * Author: commy2 and esteldunedain and Ruthberg\n * Updates and applies the current deafness. Called every 1 sec from a PFEH.\n *\n * Arguments:\n * 0: Args <ARRAY>\n *   0: Just update volume (skip ringing/recovery) <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_hearing_fnc_updateVolume\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!alive ACE_player) exitWith {\n    if (missionNameSpace getVariable [QGVAR(disableVolumeUpdate), false]) exitWith {};\n    TRACE_1(\"dead - removing hearing effects\",ACE_player);\n    [QUOTE(ADDON), 1, true] call EFUNC(common,setHearingCapability);\n};\n\n(_this select 0) params [[\"_justUpdateVolume\", false]];\n\nGVAR(deafnessDV) = (GVAR(deafnessDV) min 20) max 0;\nGVAR(volume) = (1 -  (GVAR(deafnessDV) / 20)) max 0.05;\nTRACE_3(\"\",GVAR(volume),GVAR(deafnessDV),GVAR(deafnessDV) - GVAR(deafnessPrior));\n\nif (!_justUpdateVolume) then {\n    // Ring if we got a big increase in the last second or enough accumulated damage\n    if (GVAR(deafnessDV) - GVAR(deafnessPrior) > 1 ||\n        GVAR(deafnessDV) > 10) then {\n\n        if (CBA_missionTime - GVAR(time3) < 3) exitWith {};\n        GVAR(time3) = CBA_missionTime;\n\n        if (GVAR(deafnessDV) > 19.75) then {\n            playSound ([\"ACE_Combat_Deafness_Heavy\", \"ACE_Combat_Deafness_Heavy_NoRing\"] select GVAR(DisableEarRinging));\n        } else {\n            playSound ([\"ACE_Combat_Deafness_Medium\", \"ACE_Combat_Deafness_Medium_NoRing\"] select GVAR(DisableEarRinging));\n        };\n    };\n    GVAR(deafnessPrior) = GVAR(deafnessDV);\n\n    // Hearing takes longer to return to normal after it hits rock bottom\n    GVAR(deafnessDV) =  (GVAR(deafnessDV) - (0.5 * (GVAR(volume) max 0.1))) max 0;\n};\n\nif (missionNameSpace getVariable [QGVAR(disableVolumeUpdate), false]) exitWith {};\n\nprivate _volume = GVAR(volume);\n\n// Earplugs and headgear can attenuate hearing\n_volume = _volume min GVAR(volumeAttenuation);\n\n// Reduce volume if player is unconscious\nif (ACE_player getVariable [\"ACE_isUnconscious\", false]) then {\n    _volume = _volume min GVAR(UnconsciousnessVolume);\n};\n\n[QUOTE(ADDON), _volume, true] call EFUNC(common,setHearingCapability);\n",
        "functionName": "ace_hearing_fnc_updateVolume"
      }
    ]
  },
  {
    "component": "hellfire",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ace_settingsInitialized\", {\n    [\"turret\", LINKFUNC(setupVehicle), false] call CBA_fnc_addPlayerEventHandler;\n    [\"vehicle\", LINKFUNC(setupVehicle), true] call CBA_fnc_addPlayerEventHandler; // only one of these needs the retro flag\n\n    // Add UAV Control Compatibility\n    [\"ACE_controlledUAV\", {\n        params [\"_UAV\", \"_seatAI\", \"_turret\", \"_position\"];\n        TRACE_4(\"ACE_controlledUAV EH\",_UAV,_seatAI,_turret,_position);\n        if (!isNull _seatAI) then {\n            [_seatAI] call FUNC(setupVehicle);\n        };\n    }] call CBA_fnc_addEventHandler;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n #include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_attackProfile.sqf",
        "content": "/*\n * Author: PabstMirror\n * Hellfire attack profile. Handles all 4 modes LOBL, LOAL-DIR, LOAL-HI, LOAL-LO\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_hellfire_fnc_attackProfile\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_seekerTargetPos\", \"_args\", \"_attackProfileStateParams\"];\n_args params [\"_firedEH\", \"_launchParams\"];\n_launchParams params [\"\",\"_targetLaunchParams\"];\n_targetLaunchParams params [\"\", \"\", \"_launchPos\"];\n_firedEH params [\"\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n\n// Get state params:\nif (_attackProfileStateParams isEqualTo []) then {\n    _this call FUNC(getAttackProfileSettings);\n};\n_attackProfileStateParams params [\"_attackStage\", \"_configLaunchHeightClear\"];\n\n\nprivate _projectilePos = getPosASL _projectile;\nprivate _distanceFromLaunch2d = _launchPos distance2d _projectilePos;\nprivate _heightAboveLaunch = (_projectilePos select 2) - (_launchPos select 2);\n\n// Add height depending on distance for compensate\nprivate _returnTargetPos = nil;\n\nswitch (_attackStage) do {\n    case STAGE_LAUNCH: { // Gain height quickly to pass terrain mask\n        _returnTargetPos = _projectilePos getPos [100, getDir _projectile];\n        _returnTargetPos set [2, (_projectilePos select 2) + 36.4]; // 100 and 36.4 gives a 20 deg angle\n\n        if (_heightAboveLaunch > _configLaunchHeightClear) then {\n            _attackProfileStateParams set [0, STAGE_SEEK_CRUISE];\n            TRACE_2(\"New Stage: STAGE_SEEK_CRUISE\",_distanceFromLaunch2d,_heightAboveLaunch);\n        };\n    };\n    case STAGE_SEEK_CRUISE: { // Slowly gain altitude while searching for target\n        // Before 4000 cruise at 5.7 degrees up, then level out\n        private _cruiseHeight = linearConversion [3000, 5000, _distanceFromLaunch2d, 10, 0, true];\n\n        _returnTargetPos = _projectilePos getPos [100, getDir _projectile];\n        _returnTargetPos set [2, (_projectilePos select 2) + _cruiseHeight];\n\n        if (!(_seekerTargetPos isEqualTo [0,0,0])) then {\n            _attackProfileStateParams set [0, STAGE_ATTACK_CRUISE];\n            TRACE_1(\"New Stage: STAGE_ATTACK_CRUISE\",_distanceFromLaunch2d);\n        };\n    };\n    case STAGE_ATTACK_CRUISE: {\n        private _currentHeightOverTarget = (_projectilePos select 2) - (_seekerTargetPos select 2);\n        private _distanceToTarget2d = _seekerTargetPos distance2d _projectilePos;\n        private _distToGoRatio = _distanceToTarget2d / (_launchPos distance2d _seekerTargetPos);\n\n        // arcing up at 7 degrees to start until 50% left, then smooth curve to a downward attack\n        private _gainSlope = linearConversion [0.5, 0.1, _distToGoRatio, 7, -7, true]; \n        _returnTargetPos = +_seekerTargetPos;\n        _returnTargetPos set [2, ((_projectilePos select 2) + (_distanceToTarget2d * sin _gainSlope)) max (_seekerTargetPos select 2)];\n    \n        if ((_distanceToTarget2d < 500) || {(_currentHeightOverTarget atan2 _distanceToTarget2d) > 15}) then { // Wait until we can come down at a sharp angle\n            _attackProfileStateParams set [0, STAGE_ATTACK_TERMINAL];\n            TRACE_2(\"New Stage: STAGE_ATTACK_TERMINAL\",_distanceToTarget2d,_currentHeightOverTarget);\n        };\n    };\n    case STAGE_ATTACK_TERMINAL: {\n        private _distanceToTarget2d = _seekerTargetPos distance2d _projectilePos;\n        _returnTargetPos = _seekerTargetPos vectorAdd [0, 0, _distanceToTarget2d * 0.02];\n    };\n};\n\n// TRACE_1(\"Adjusted target position\", _returnTargetPos);\n_returnTargetPos;\n",
        "functionName": "ace_hellfire_fnc_attackProfile"
      },
      {
        "fileName": "fnc_getAttackProfileSettings.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets attack profile parameters for first run of hellfire attack profile function\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Nothing\n *\n * Example:\n * [[], [], []] call ace_hellfire_fnc_getAttackProfileSettings;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_seekerTargetPos\", \"_args\", \"_attackProfileStateParams\"];\n_args params [\"_firedEH\", \"_launchParams\"];\n_launchParams params [\"\", \"\", \"\", \"_attackProfile\"];\n_firedEH params [\"\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n\nprivate _attackConfig = configFile >> QEGVAR(missileguidance,AttackProfiles) >> _attackProfile;\n\n// Launch (clearing terrain mask for LO/HI):\nprivate _configLaunchHeightClear = getNumber (_attackConfig >> QGVAR(launchHeightClear));\n\n// Get starting stage\nprivate _startingStage = if (_configLaunchHeightClear > 0) then {\n    STAGE_LAUNCH; // LOAL-HI / LO\n} else {\n    if (_seekerTargetPos isEqualTo [0,0,0]) then {\n        STAGE_SEEK_CRUISE; // LOAL-DIR\n    } else {\n        STAGE_ATTACK_CRUISE // LOBL\n    };\n};\n\n// Set data in param array\n_attackProfileStateParams set [0, _startingStage];\n_attackProfileStateParams set [1, _configLaunchHeightClear];\n\nTRACE_1(\"new shot settings\",_attackProfileStateParams);\n",
        "functionName": "ace_hellfire_fnc_getAttackProfileSettings"
      },
      {
        "fileName": "fnc_setupVehicle.sqf",
        "content": "/*\n * Author: PabstMirror\n * Adds interaction menu actions to switch the firemode to a vehicle.\n * Also adds a Laser Designator if vehicle is configured for one.\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * Nothing\n *\n * Example:\n * [player] call ace_hellfire_fnc_setupVehicle\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n\nparams [\"_player\"];\n// Note: player may be the currently controlled UAV's AI unit (so may be different from ace_player)\nTRACE_1(\"showHud\",_player);\n\nprivate _enabled = false;\nprivate _vehicle = vehicle _player;\nprivate _turretPath = [-1];\n\nif ((alive _player) && {_player != _vehicle}) then {\n    if (_player != (driver _vehicle)) then {\n        _turretPath = _player call CBA_fnc_turretPath\n    };\n    {\n        if ((getNumber (configFile >> \"CfgWeapons\" >> _x >> QGVAR(enabled))) == 1) then {\n            TRACE_1(\"enabled\",_x);\n            _enabled = true;\n        };\n    } forEach (_vehicle weaponsTurret _turretPath);\n};\n\nif (!_enabled) exitWith {TRACE_3(\"Not enabled\",_enabled,_vehicle,_turretPath);};\n\n\n// Add laser if vehicle is configured for one:\nif ((getNumber (configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> QGVAR(addLaserDesignator))) == 1) then {  \n    [{\n        params [\"_vehicle\", \"_turretPath\"];\n        TRACE_3(\"checking for laser\",_vehicle,_turretPath,_vehicle turretLocal _turretPath);\n        if (!alive _vehicle) exitWith {};\n        if (!(_vehicle turretLocal _turretPath)) then {WARNING(\"Turret not local\");};\n        private _hasLaser = false;\n        {\n            // Most addons just use \"Laserdesignator_mounted\", but this should cover custom ones\n            if ((getNumber (configFile >> \"CfgWeapons\" >> _x >> \"Laser\")) == 1) exitWith {\n                _hasLaser = true;\n            };\n        } forEach (_vehicle weaponsTurret _turretPath);\n        if (!_hasLaser) then {\n            TRACE_1(\"Adding Laser Designator\",typeOf _vehicle);\n            _vehicle addWeaponTurret [\"Laserdesignator_mounted\", _turretPath];\n            _vehicle addMagazineTurret [\"Laserbatteries\", _turretPath];\n        };\n    }, [_vehicle, _turretPath], 1] call CBA_fnc_waitAndExecute; // Need to delay slightly for turret to become local (probably only needs a single frame)\n};\n\n\n// Add interaction menu actions:\nif (_vehicle getVariable [QGVAR(actionsAdded), false]) exitWith {};\n_vehicle setVariable [QGVAR(actionsAdded), true];\n\nprivate _action = [QUOTE(ADDON), localize LSTRING(hellfireModeAction), \"\", {}, {true}] call EFUNC(interact_menu,createAction);\nprivate _basePath = [_vehicle, 1, [\"ACE_SelfActions\"], _action] call EFUNC(interact_menu,addActionToObject);\n\nprivate _fnc_statement = {\n    params [\"_target\", \"\", \"_attackProfile\"];\n    TRACE_2(\"statement\",_target,_attackProfile);\n\n    _target setVariable [QEGVAR(missileguidance,attackProfile), _attackProfile];\n};\nprivate _fnc_condition = {\n    params [\"_target\", \"_player\", \"_attackProfile\"];\n    \n    private _turretPath = if (ACE_player == (driver _target)) then {[-1]} else {ACE_player call CBA_fnc_turretPath};\n    private _hasWeapon = ({(isNumber (configFile >> \"CfgWeapons\" >> _x >> QGVAR(enabled))) && {getNumber (configFile >> \"CfgWeapons\" >> _x >> QGVAR(enabled)) > 0}} count (_target weaponsTurret _turretPath)) > 0;\n\n    (_hasWeapon) &&\n    {(_target getVariable [QEGVAR(missileguidance,attackProfile), \"hellfire\"]) != _attackProfile};\n};\n\n{\n    private _displayName = getText (configFile >> QEGVAR(missileguidance,AttackProfiles) >> _x >> \"name\");\n    private _action = [format [QGVAR(%1),_x], _displayName, \"\", _fnc_statement, _fnc_condition, {}, _x] call EFUNC(interact_menu,createAction);\n    [_vehicle, 1, _basePath, _action] call EFUNC(interact_menu,addActionToObject);\n} forEach [\"hellfire\", \"hellfire_hi\", \"hellfire_lo\"];\n\nTRACE_2(\"interactions added\",_vehicle,typeOf _vehicle);\n",
        "functionName": "ace_hellfire_fnc_setupVehicle"
      }
    ]
  },
  {
    "component": "hitreactions",
    "files": [
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_fallDown.sqf",
        "content": "/*\n * Author: commy2\n * Adds reactions to a unit that was hit. EH only runs where to unit is local. Adds screams, falling down, falling from ladders, ejecting from static weapons and camshake for players\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: firer <OBJECT>\n * 2: damage taken <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, kevin, 5] call ACE_hitreactions_fnc_fallDown\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_firer\", \"_damage\"];\n\n// exit if system is disabled\nif (GVAR(minDamageToTrigger) == -1) exitWith {};\n\n// don't fall after minor damage\nif (_damage < GVAR(minDamageToTrigger)) exitWith {};\n\n// don't fall on collision damage\nif (_unit == _firer) exitWith {};\n\n// camshake for player\nif (_unit == ACE_player) then {\n    if (visibleMap) then {\n        openMap false;\n    };\n    addCamShake [3, 5, _damage + random 10];\n};\n\n// play scream sound\nif (!isNil QEFUNC(medical,playInjuredSound)) then {\n    [_unit] call EFUNC(medical,playInjuredSound);\n};\n\nprivate _vehicle = vehicle _unit;\n\n// handle static weapons\nif (_vehicle isKindOf \"StaticWeapon\") exitWith {\n    if (!alive _unit) then {\n        _unit action [\"Eject\", _vehicle];\n        unassignVehicle _unit;\n    };\n};\n\n// don't do animations if in a vehicle (looks weird and animations never reset):\nif (_vehicle != _unit) exitWith {};\n\n// this checks most things, so it doesn't mess with being inside vehicles or while dragging etc.\nif !([_unit, _vehicle] call EFUNC(common,canInteractWith)) exitWith {};\n\n// handle ladders\nif (getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> animationState _unit >> \"ACE_isLadder\") == 1) exitWith {\n    _unit action [\"LadderOff\", nearestObject [position _unit, \"House\"]];\n};\n\n// only play animation when standing due to lack of animations, sry\nif !(stance _unit in [\"CROUCH\", \"STAND\"]) exitWith {};\n\nprivate _velocity = vectorMagnitude velocity _unit;\n\n// only fall when moving\nif (_velocity < 2) exitWith {};\n\n// get correct animation by weapon\nprivate _anim = _unit call FUNC(getRandomAnimation);\n\n// exit if no animation for this weapon exists, i.e. binocular or rocket launcher\nif (_anim == \"\") exitWith {};\n\n// don't mess with transitions. don't fall then.\nif !([_unit] call EFUNC(common,inTransitionAnim)) then {\n    [_unit, _anim, 2] call EFUNC(common,doAnimation);\n};\n",
        "functionName": "ace_hitreactions_fnc_fallDown"
      },
      {
        "fileName": "fnc_getRandomAnimation.sqf",
        "content": "/*\n * Author: commy2\n * Get a random fall animation for the unit.\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * Fall animation <STRING>\n *\n * Example:\n * [bob] call ACE_hitreactions_fnc_getRandomAnimation\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _weapon = currentWeapon _unit;\n\nif (_weapon == \"\") exitWith {\n    \"AmovPercMsprSnonWnonDf_AmovPpneMstpSnonWnonDnon\"\n};\n\nif (_weapon == primaryWeapon _unit) exitWith {\n    if (_unit call EFUNC(common,isPlayer)) then {\n        private _isRunning = _velocity > 4;\n\n        [\n            [\"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon_2\", \"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon\"] select _isRunning,\n            [\"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon_2\", \"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon\"] select _isRunning,\n            \"AmovPercMstpSrasWrflDnon_AadjPpneMstpSrasWrflDleft\",\n            \"AmovPercMstpSrasWrflDnon_AadjPpneMstpSrasWrflDright\"\n        ] select floor random 4\n    } else {\n        \"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon\"\n    };\n};\n\nif (_weapon == handgunWeapon _unit) exitWith {\n    if (_unit call EFUNC(common,isPlayer)) then {\n        [\n            \"AmovPercMsprSlowWpstDf_AmovPpneMstpSrasWpstDnon\",\n            \"AmovPercMsprSlowWpstDf_AmovPpneMstpSrasWpstDnon\",\n            \"AmovPercMstpSrasWpstDnon_AadjPpneMstpSrasWpstDleft\",\n            \"AmovPercMstpSrasWpstDnon_AadjPpneMstpSrasWpstDright\"\n        ] select floor random 4\n    } else {\n        \"AmovPercMsprSlowWpstDf_AmovPpneMstpSrasWpstDnon\"\n    };\n};\n\n\"\"\n",
        "functionName": "ace_hitreactions_fnc_getRandomAnimation"
      }
    ]
  },
  {
    "component": "huntir",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nGVAR(ZOOM) = 0;\nGVAR(NV) = 0;\nGVAR(IRON) = false;\nGVAR(TI) = 0;\nGVAR(cur_cam) = 0;\nGVAR(ROTATE) = 0;\nGVAR(ELEVAT) = 0.01;\n\n// Register fire event handler\n// Don't run for non players, as they are too dumb to launch huntirs anyway\n[\"ace_firedPlayer\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_cam.sqf",
        "content": "/*\n * Author: Norrin, Rocko, Ruthberg\n *\n * Handles HuntIR camera\n *\n * Arguments:\n * 0: HuntIR <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cam] call ACE_huntir_fnc_cam\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\nparams [\"_huntIR\"];\n\nGVAR(huntIR) = _huntIR;\nGVAR(pos) = getPosVisual GVAR(huntIR);\n\nGVAR(ZOOM) = 0;\nGVAR(NV) = 0;\nGVAR(TI) = 0;\nGVAR(cur_cam) = 0;\nGVAR(ROTATE) = 0;\nGVAR(ELEVAT) = 0.01;\n\nHUNTIR_BACKGROUND_LAYER_ID cutText[\"\",\"PLAIN\"];\n\nclosedialog 0;\ncreateDialog QGVAR(cam_dialog);\nuiNameSpace setVariable [QGVAR(monitor), findDisplay 18880];\n(uiNameSpace getVariable QGVAR(monitor)) displaySetEventHandler [\"Keydown\", QUOTE(_this call FUNC(keyPressed))];\n\nctrlSetText [4, \"0X\"];\n\nGVAR(logic) = \"Logic\" createVehicleLocal [0, 0, 0];\nGVAR(logic) setPosATL (GVAR(pos) vectorAdd [0, 0, -5]);\nGVAR(logic) setVectorUp [0.001, 0.001, 1];\n\nGVAR(cam) = \"camera\" camCreate GVAR(pos);\nGVAR(cam) camSetTarget GVAR(logic);\nGVAR(cam) cameraEffect [\"internal\", \"BACK\"];\nGVAR(cam) camSetRelPos [0, 0, 2];\nGVAR(cam) camCommit 0;\nshowCinemaBorder false;\ncamUseNVG false;\n\nGVAR(pphandle) = ppEffectCreate [\"colorCorrections\", 135522];\nGVAR(pphandle) ppEffectAdjust [1, 1, 0, [0.01, 0.02, 0.04, 0.01], [0.87, 1.08, 1.196, 0.3], [0.399, 0.287, 0.014, 0.0]];\nGVAR(pphandle) ppEffectCommit 0;\nGVAR(pphandle) ppEffectEnable true;\n\nGVAR(stop) = false;\ncall FUNC(huntirCompass);\n\nGVAR(no_cams) = ACE_player nearEntities [\"ACE_HuntIR\", HUNTIR_MAX_TRANSMISSION_RANGE];\n{\n    GVAR(no_cams) set [_forEachIndex, [(getPosVisual ACE_player) vectorDistance (getPosVisual _x), _x]];\n} forEach GVAR(no_cams);\nGVAR(no_cams) sort true;\n{\n    GVAR(no_cams) set [_forEachIndex, _x select 1];\n} forEach GVAR(no_cams);\n[{\n    //Close monitor if we no longer have the item:\n    if ((!([ACE_player, \"ACE_HuntIR_monitor\"] call EFUNC(common,hasItem))) && {!isNull (uiNameSpace getVariable [QGVAR(monitor), displayNull])}) then {\n        closeDialog 0;\n    };\n\n    GVAR(nearHuntIRs) = ACE_player nearEntities [\"ACE_HuntIR\", HUNTIR_MAX_TRANSMISSION_RANGE];\n    {\n        if (((getPosVisual _x) select 2) > 20 && {!(_x in GVAR(no_cams))} && {_x getHitPointDamage \"HitCamera\" < 0.25}) then {\n            GVAR(no_cams) pushBack _x;\n        };\n        true\n    } count GVAR(nearHuntIRs);\n    {\n        if (((getPosVisual _x) select 2) <= 20 || {!(_x in GVAR(nearHuntIRs))} || {_x getHitPointDamage \"HitCamera\" >= 0.25}) then {\n            GVAR(no_cams) deleteAt _forEachIndex;\n            if (_forEachIndex < GVAR(cur_cam)) then {\n                GVAR(cur_cam) = GVAR(cur_cam) - 1;\n            };\n        };\n    } forEach GVAR(no_cams);\n\n    GVAR(cur_cam) = 0 max GVAR(cur_cam) min ((count GVAR(no_cams)) - 1);\n    if (count GVAR(no_cams) > 0) then {\n        GVAR(huntIR) = GVAR(no_cams) select GVAR(cur_cam);\n    };\n\n    GVAR(pos) = getPosVisual GVAR(huntIR);\n\n    if ((!dialog) || (count GVAR(no_cams) == 0) || ((GVAR(pos) select 2) <= 20)) exitWith {\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n        GVAR(stop) = true;\n\n        GVAR(pphandle) ppEffectEnable true;\n        ppEffectDestroy GVAR(pphandle);\n\n        GVAR(NV) = 0;\n        setAperture -1;\n        closedialog 0;\n        titletext [\" \", \"BLACK IN\", 4];\n        ACE_player switchCamera \"INTERNAL\";\n        GVAR(cam) CameraEffect [\"Terminate\", \"Back\"];\n        CamDestroy GVAR(cam);\n        deleteVehicle GVAR(logic);\n        if (player != ACE_player) then {\n            player remoteControl ACE_player;\n        };\n    };\n\n    switch (GVAR(ZOOM)) do {\n        case 0: {\n            GVAR(cam) camsetFOV 0.7;\n            GVAR(cam) camSetFocus [GVAR(pos) select 2, 1];\n        };\n        case 1: {\n            GVAR(cam) camsetFOV 0.35;\n            GVAR(cam) camSetFocus [(GVAR(pos) select 2)/2, 1];\n        };\n        case 2: {\n            GVAR(cam) camsetFOV 0.17;\n            GVAR(cam) camSetFocus [(GVAR(pos) select 2)/4, 1];\n        };\n        case 3: {\n            GVAR(cam) camsetFOV 0.1;\n            GVAR(cam) camSetFocus [(GVAR(pos) select 2)/8, 1];\n        };\n    };\n\n    GVAR(logic) setPosATL (GVAR(pos) vectorAdd [0, 0, -5]);\n    GVAR(logic) setDir GVAR(ROTATE);\n    GVAR(logic) setVectorUp [0.0001, 0.0001, 1];\n    GVAR(cam) CameraEffect [\"internal\", \"BACK\"];\n    private _cam_coord_y = GVAR(ELEVAT) * cos(GVAR(ROTATE));\n    private _cam_coord_x = GVAR(ELEVAT) * sin(GVAR(ROTATE));\n    GVAR(cam) camSetRelPos [_cam_coord_x, _cam_coord_y, 2];\n    GVAR(cam) camCommit 0;\n\n    ctrlSetText [1, format[\"%1 m\", round(GVAR(pos) select 2)]];\n    ctrlSetText [2, format[\"%1\", GVAR(cur_cam) + 1]];\n    private _cam_time = CBA_missionTime - (GVAR(huntIR) getVariable [QGVAR(startTime), CBA_missionTime]);\n    ctrlSetText [3, format[\"%1 s\", round(_cam_time)]];\n    private _cam_pos = getPosVisual GVAR(huntIR);\n    _cam_pos = format [\"X = %1, Y = %2\", round (_cam_pos select 0), round (_cam_pos select 1)];\n    ctrlSetText [5, _cam_pos];\n    ctrlSetText [6, \"\"];\n}, 0, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_huntir_fnc_cam"
      },
      {
        "fileName": "fnc_handleFired.sqf",
        "content": "/*\n * Author: Norrin, Rocko, Ruthberg\n *\n * Handles HuntIR projectiles. Called from the unified fired EH for the local player.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_huntir_fnc_handleFired\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nif (_ammo != \"F_HuntIR\") exitWith {};\n\nif (!hasInterface) exitWith {};\n\n[{\n    params [\"_projectile\"];\n\n    //If null (deleted or hit water) exit:\n    if (isNull _projectile) exitWith {};\n    //If it's not spinning (hit ground), bail:\n    if ((vectorMagnitude (velocity _projectile)) < 0.1) exitWith {};\n\n    \"ACE_HuntIR_Propell\" createVehicle (getPosATL _projectile);\n    [{\n        params [\"_position\"];\n        private _huntir = createVehicle [\"ACE_HuntIR\", _position, [], 0, \"FLY\"];\n        _huntir setPosATL _position;\n        _huntir setVariable [QGVAR(startTime), CBA_missionTime, true];\n        [{\n            params [\"_args\", \"_idPFH\"];\n            _args params [\"_huntir\"];\n            if (isNull _huntir) exitWith {\n                [_idPFH] call CBA_fnc_removePerFrameHandler;\n            };\n\n            private _parachuteDamage = _huntir getHitPointDamage \"HitParachute\";\n            if (_parachuteDamage > 0) then {\n                private _velocity = velocity _huntir;\n                _velocity set [2, -1 min -20 * sqrt(_parachuteDamage)];\n                _huntir setVelocity _velocity;\n                _huntir setVectorUp [0, 0, 1];\n            };\n        }, 0, [_huntir]] call CBA_fnc_addPerFrameHandler;\n    }, [getPosATL _projectile vectorAdd [0, 0, 50]], 2, 0] call CBA_fnc_waitAndExecute;\n}, [_projectile], 5, 0] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_huntir_fnc_handleFired"
      },
      {
        "fileName": "fnc_huntir.sqf",
        "content": "/*\n * Author: Norrin, Rocko, Ruthberg\n *\n * HuntIR monitor system\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_huntir_fnc_huntir\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __TYPE_WRITER_DELAY 0.05\n\nif ((ACE_player call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\n    ACE_player playMove \"AmovPercMstpSrasWrflDnon_diary\";\n};\n\nHUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"BLACK\", 0];\ncreateDialog QGVAR(cam_dialog_off);\n\n[{\n    if (!dialog) exitWith {\n        HUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"PLAIN\", 0];\n    };\n    closeDialog 0;\n    createDialog QGVAR(cam_dialog_inactive);\n    uiNameSpace setVariable [QGVAR(monitor), findDisplay 18881];\n    [{\n        GVAR(startTime) = CBA_missionTime;\n        GVAR(done) = false;\n        GVAR(connectionDelay) = 5;\n        GVAR(state) = \"searching\";\n        GVAR(message) = [];\n        GVAR(messageSearching) = toArray \"Searching.....\";\n        GVAR(messageConnecting) = toArray \"Connecting.....\";\n        [{\n            //Close monitor if we no longer have item:\n            if ((!([ACE_player, \"ACE_HuntIR_monitor\"] call EFUNC(common,hasItem))) && {!isNull (uiNameSpace getVariable [QGVAR(monitor), displayNull])}) then {\n                closeDialog 0;\n            };\n\n            private _elapsedTime = CBA_missionTime - GVAR(startTime);\n            private _nearestHuntIRs = ACE_player nearEntities [\"ACE_HuntIR\", HUNTIR_MAX_TRANSMISSION_RANGE];\n\n            if ((!dialog) || GVAR(done)) exitWith {\n                [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n                if (dialog && GVAR(state) == \"connected\") then {\n                    [_nearestHuntIRs select 0] call FUNC(cam);\n                } else {\n                    HUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"PLAIN\"];\n                };\n            };\n            switch (GVAR(state)) do {\n                case \"searching\": {\n                    if (count GVAR(message) < count GVAR(messageSearching)) then {\n                        GVAR(message) pushBack (GVAR(messageSearching) select (count GVAR(message)));\n                        ctrlSetText [1, toString GVAR(message)];\n                    } else {\n                        GVAR(message) = [];\n                        if (_elapsedTime > 10) then {\n                            GVAR(state) = \"noGDS\";\n                        };\n                        if (_elapsedTime > 5 && {{_x getHitPointDamage \"HitCamera\" < 0.25} count _nearestHuntIRs > 0}) then {\n                            GVAR(state) = \"connecting\";\n                        };\n                    };\n                };\n                case \"connecting\": {\n                    if (count GVAR(message) < count GVAR(messageConnecting)) then {\n                        GVAR(message) pushBack (GVAR(messageConnecting) select (count GVAR(message)));\n                        ctrlSetText [1, toString GVAR(message)];\n                    } else {\n                        GVAR(message) = [];\n                        GVAR(connectionDelay) = GVAR(connectionDelay) - 1;\n                        if (GVAR(connectionDelay) <= 0) then {\n                            GVAR(done) = true;\n                            GVAR(state) = \"connected\";\n                        };\n                    };\n                };\n                case \"noGDS\": {\n                    ctrlSetText [1, \"No GDS System detected\"];\n                    [{\n                        GVAR(done) = true;\n                        closedialog 0;\n                        HUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"PLAIN\"];\n                    }, [], 3, 0] call CBA_fnc_waitAndExecute;\n                };\n            };\n        }, __TYPE_WRITER_DELAY, []] call CBA_fnc_addPerFrameHandler;\n    }, [], 0.5, 0] call CBA_fnc_waitAndExecute;\n}, [], 1, 0] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_huntir_fnc_huntir"
      },
      {
        "fileName": "fnc_huntirCompass.sqf",
        "content": "/*\n * Author: Norrin, Rocko, Ruthberg\n *\n * HuntIR monitor compass\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_huntir_fnc_huntirCompass\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\n#define __DSP (uiNamespace getVariable QGVAR(cam_rose))\n#define __CHAR_N (__DSP displayCtrl 64432)\n#define __CHAR_E (__DSP displayCtrl 64433)\n#define __CHAR_S (__DSP displayCtrl 64434)\n#define __CHAR_W (__DSP displayCtrl 64435)\n\n#define __OFFSET_X 0.003\n#define __OFFSET_Y 0.003\n#define __WIDTH 0.1\n#define __HEIGHT 0.1\n#define __RADIUS 0.05\n#define __CENTER_X 0.70\n#define __CENTER_Y 0.65\n\nprivate _fnc_correctIt = {\n    params [\"_pos\", \"_dir\"];\n    if (_dir >= 270 || {_dir <= 90}) then {\n        _pos set [1, (_pos select 1) + __OFFSET_Y]\n    };\n    if (_dir >= 0 && {_dir <= 180}) then {\n        _pos set [0, (_pos select 0) - __OFFSET_X]\n    };\n    if (_dir >= 90 && {_dir <= 270}) then {\n        _pos set [1, (_pos select 1) - __OFFSET_Y]\n    };\n    if (_dir >= 180 && {_dir <= 360}) then {\n        _pos set [0, (_pos select 0) + __OFFSET_X]\n    };\n    _pos\n};\n\nHUNTIR_CAM_ROSE_LAYER_ID cutRsc [QGVAR(cam_rose), \"PLAIN\"];\n\n[{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_fnc_correctIt\"];\n\n    if (GVAR(stop)) exitWith {\n        HUNTIR_CAM_ROSE_LAYER_ID cutText [\"\", \"PLAIN\"];\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n\n    private _dir = getDir GVAR(cam); // direction player;\n\n    private _x1 = __CENTER_X - (__RADIUS * sin(_dir));\n    private _y1 = __CENTER_Y - (__RADIUS * cos(_dir));\n    private _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\n    __CHAR_N ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\n    __CHAR_N ctrlCommit 0;\n\n    _x1 = __CENTER_X - (__RADIUS * sin(_dir + 90));\n    _y1 = __CENTER_Y - (__RADIUS * cos(_dir + 90));\n    _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\n    __CHAR_W ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\n    __CHAR_W ctrlCommit 0;\n\n    _x1 = __CENTER_X - (__RADIUS * sin(_dir + 180));\n    _y1 = __CENTER_Y - (__RADIUS * cos(_dir + 180));\n    _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\n    __CHAR_S ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\n    __CHAR_S ctrlCommit 0;\n\n    _x1 = __CENTER_X - (__RADIUS * sin(_dir + 270));\n    _y1 = __CENTER_Y - (__RADIUS * cos(_dir + 270));\n    _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\n    __CHAR_E ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\n    __CHAR_E ctrlCommit 0;\n\n}, 0.01, [_fnc_correctIt]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_huntir_fnc_huntirCompass"
      },
      {
        "fileName": "fnc_keyPressed.sqf",
        "content": "/*\n * Author: Norrin, Rocko\n * Handles the HuntIR monitor key interaction\n *\n * Arguments:\n * 0: ? <UNKNOWN>\n * 1: keycode <NUMBER>\n *\n * Return Value:\n * handled? <BOOLEAN>\n *\n * Example:\n * [] call ace_huntir_fnc_keyPressed\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _ret = false;\n\nswitch (_this select 1) do {\n    // A = Lower zoom level\n    case 30: {\n        if (GVAR(ZOOM) > 0) then {\n            GVAR(ZOOM) = GVAR(ZOOM) - 1;\n        };\n        switch (GVAR(ZOOM)) do {\n            case 0: { ctrlSetText [4, \"0X\"];};\n            case 1: { ctrlSetText [4, \"2X\"];};\n            case 2: { ctrlSetText [4, \"4X\"];};\n            case 3: { ctrlSetText [4, \"8X\"];};\n        };\n        _ret = true;\n    };\n    // D = Increase zoom level\n    case 32: {\n        if (GVAR(ZOOM) < 3) then {\n            GVAR(ZOOM) = GVAR(ZOOM) + 1;\n        };\n        switch (GVAR(ZOOM)) do {\n            case 0: { ctrlSetText [4, \"0X\"];};\n            case 1: { ctrlSetText [4, \"2X\"];};\n            case 2: { ctrlSetText [4, \"4X\"];};\n            case 3: { ctrlSetText [4, \"8X\"];};\n        };\n        _ret = true;\n    };\n    //N key ( Toggle NV and TI modes )\n    case 49: {\n        if (GVAR(NV) == 0) then {\n            setAperture -1;\n            camUseNVG true;\n            GVAR(NV) = 1;\n            if (!GVAR(IRON)) then {\n                GVAR(IRON) = true;\n            };\n        } else {\n            setAperture -1;\n            camUseNVG false;\n            GVAR(NV) = 0;\n            GVAR(IRON) = false;\n        };\n        _ret = true;\n    };\n    // S = Next camera\n    case 31: {\n        GVAR(cur_cam) = GVAR(cur_cam) + 1;\n        _ret = true;\n    };\n    // W = Previous camera\n    case 17: {\n        GVAR(cur_cam) = GVAR(cur_cam) - 1;\n        _ret = true;\n    };\n    // Rotate camera anticlockwise\n    case 203: {\n        GVAR(ROTATE) = GVAR(ROTATE) - 3;\n        _ret = true;\n    };\n    // Rotate camera clockwise\n    case 205: {\n        GVAR(ROTATE) = GVAR(ROTATE) + 3;\n        _ret = true;\n    };\n    // Raise camera\n    case 200: {\n        if (GVAR(ELEVAT) < 4.01) then {\n            GVAR(ELEVAT) = GVAR(ELEVAT) + 0.12;\n        };\n        _ret = true;\n    };\n    // Lower camera\n    case 208: {\n        if (GVAR(ELEVAT) > -3.99) then {\n            GVAR(ELEVAT) = GVAR(ELEVAT) - 0.12;\n        };\n        _ret = true;\n    };\n    // Reset camera\n    case 19: {\n        GVAR(ROTATE) = 0;\n        GVAR(ELEVAT) = 0.01;\n        GVAR(ZOOM) = 0;\n        ctrlSetText [4, \"0X\"];\n        GVAR(NV) = 0;\n        camUseNVG false;\n        setAperture -1;\n        _ret = true;\n    };\n};\n\n_ret\n",
        "functionName": "ace_huntir_fnc_keyPressed"
      }
    ]
  },
  {
    "component": "interaction",
    "files": [
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"MouseZChanged\", {(_this select 1) call FUNC(handleScrollWheel)}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2 and esteldunedain\n#include \"script_component.hpp\"\n\nACE_Modifier = 0;\n\n[QGVAR(pardon), {(_this select 0) addRating -rating (_this select 0)}] call CBA_fnc_addEventHandler;\n\n[QGVAR(getDown), {\n    params [\"_target\"];\n\n    _target setUnitPos \"DOWN\";\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(sendAway), {\n    params [\"_unit\", \"_position\"];\n\n    _unit setUnitPos \"AUTO\";\n    _unit doMove _position;\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(setLampOn), {\n    params [\"_lamp\", \"_hitPointsDamage\", \"_disabledLampDMG\"];\n    {if((_x select 1) == _disabledLampDMG) then {_lamp setHit [_x select 0, 0];};nil} count _hitPointsDamage;\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(setLampOff), {\n    params [\"_lamp\", \"_hitPointsDamage\", \"_disabledLampDMG\"];\n    {_lamp setHit [_x select 0, (_x select 1) max _disabledLampDMG];nil} count _hitPointsDamage;\n}] call CBA_fnc_addEventHandler;\n\n// Zeus action events\n[QGVAR(zeusStance),{\n    { _x setUnitPos (_this select 0); } forEach (_this select 1);\n}] call CBA_fnc_addEventHandler;\n\n// The following 3 events handle both waypoints and groups\n[QGVAR(zeusBehaviour),{\n    if (param [2,false]) then {\n        { _x setWaypointBehaviour (_this select 0); } forEach (_this select 1);\n    } else {\n        { _x setBehaviour (_this select 0); } forEach (_this select 1);\n    };\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(zeusSpeed),{\n    if (param [2,false]) then {\n        { _x setWaypointSpeed (_this select 0); } forEach (_this select 1);\n    } else {\n        { _x setSpeedMode (_this select 0); } forEach (_this select 1);\n    };\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(zeusFormation),{\n    if (param [2,false]) then {\n        { _x setWaypointFormation (_this select 0); } forEach (_this select 1);\n    } else {\n        { _x setFormation (_this select 0); } forEach (_this select 1);\n    };\n}] call CBA_fnc_addEventHandler;\n\nif (!hasInterface) exitWith {};\n\nGVAR(isOpeningDoor) = false;\n\n[QGVAR(tapShoulder), {\n    params [\"_unit\", \"_shoulderNum\"];\n\n    if (_unit == ACE_player) then {\n        addCamShake [4, 0.5, 5];\n        private _message = parseText format ([[\"%1 &gt;\", localize LSTRING(YouWereTappedRight)], [\"&lt; %1\", localize LSTRING(YouWereTappedLeft)]] select (_shoulderNum == 1));\n        [_message] call EFUNC(common,displayTextStructured);\n    };\n}] call CBA_fnc_addEventHandler;\n\n// add keybinds\n[\"ACE3 Common\", QGVAR(openDoor), localize LSTRING(OpenDoor), {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if (GVAR(isOpeningDoor) || {[MACRO_DOOR_REACH_DISTANCE] call FUNC(getDoor) select 1 == ''}) exitWith {false};\n\n    // Statement\n    call EFUNC(interaction,openDoor);\n    true\n}, {\n    //Probably don't want any conditions here, so variable never gets locked down\n    // Statement\n    GVAR(isOpeningDoor) = false;\n    true\n},\n[57, [false, true, false]], false] call CBA_fnc_addKeybind; //Key CTRL+Space\n\n[\"ACE3 Common\", QGVAR(tapShoulder), localize LSTRING(TapShoulder), {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player, cursorTarget] call FUNC(canTapShoulder)) exitWith {false};\n\n    //Tap whichever shoulder is closest\n    private _shoulderNum = [0, 1] select (([cursorTarget, ACE_player] call BIS_fnc_relativeDirTo) > 180);\n\n    // Statement\n    [ACE_player, cursorTarget, _shoulderNum] call FUNC(tapShoulder);\n    true\n},\n{false},\n[20, [true, false, false]], false] call CBA_fnc_addKeybind;\n\n[\"isNotSwimming\", {!(_this call EFUNC(common,isSwimming))}] call EFUNC(common,addCanInteractWithCondition);\n[\"isNotOnLadder\", {getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> animationState (_this select 0) >> \"ACE_isLadder\") != 1}] call EFUNC(common,addCanInteractWithCondition);\n\n[\"ace_settingsInitialized\", {\n    if (GVAR(disableNegativeRating)) then {\n        player addEventHandler [\"HandleRating\", {\n            (_this select 1) max 0\n        }];\n    };\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addPassengerActions.sqf",
        "content": "/*\n * Author: esteldunedain\n * Mount unit actions inside passenger submenu.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player <OBJECT>\n * 3: Parameters <ARRAY>\n *\n * Return Value:\n * Children actions <ARRAY>\n *\n * Example:\n * array = [target, player, [params]] call ace_interaction_fnc_addPassengerAction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"\", \"_parameters\"];\n_parameters params [\"_unit\"];\n\nprivate _namespace = EGVAR(interact_menu,ActNamespace);\nprivate _actionTrees = _namespace getVariable typeOf _unit;\nif (isNil \"_actionTrees\") then {\n    _actionTrees = [];\n};\n\nprivate _actions = [];\n\n// Mount unit MainActions menu\n{\n    _x params [\"_actionData\", \"_children\"];\n\n    _actions pushBack [_actionData, _children, _unit];\n    false\n} count (_actionTrees select 0 select 1);\n\n_actions\n",
        "functionName": "ace_interaction_fnc_addPassengerActions"
      },
      {
        "fileName": "fnc_addPassengersActions.sqf",
        "content": "/*\n * Author: esteldunedain\n * Create one action per passenger.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player <OBJECT>\n * 3: Parameters <ARRAY>\n *\n * Return Value:\n * Children actions <ARRAY>\n *\n * Example:\n * [target, player, [params]] call ace_interaction_fnc_addPassengersActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_player\"];\n\nprivate _actions = [];\n\n{\n    private _unit = _x;\n\n    if (_unit != _player && {getText (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"simulation\") != \"UAVPilot\"}) then {\n        private _icon = [\n            \"\",\n            \"A3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_driver_ca.paa\",\n            \"A3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_gunner_ca.paa\",\n            \"A3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_commander_ca.paa\"\n        ] select (([driver _vehicle, gunner _vehicle, commander _vehicle] find _unit) + 1);\n\n        if (_unit getVariable [QEGVAR(captives,isHandcuffed), false]) then {\n            _icon = QPATHTOEF(captives,UI\\handcuff_ca.paa);\n        };\n\n        _actions pushBack [\n            [\n                format [\"%1\", _unit],\n                [_unit, true] call EFUNC(common,getName),\n                _icon,\n                { \n                    //statement (Run on hover) - reset the cache so we will insert actions immedietly when hovering over new unit\n                    TRACE_2(\"Cleaning Cache\",_target,vehicle _target);\n                    [vehicle _target, QEGVAR(interact_menu,ATCache_ACE_SelfActions)] call EFUNC(common,eraseCache);\n                },\n                {true},\n                {\n                    if (EGVAR(interact_menu,selectedTarget) isEqualTo _target) then {\n                        _this call FUNC(addPassengerActions)\n                    } else {\n                        [] //not selected, don't waste time on actions\n                    };\n                },\n                [_unit],\n                {[0, 0, 0]},\n                2,\n                [false,false,false,true,false] //add run on hover (4th bit true)\n                ] call EFUNC(interact_menu,createAction),\n                [],\n                _unit\n            ];\n    };\n    false\n} count crew _vehicle;\n\n_actions\n",
        "functionName": "ace_interaction_fnc_addPassengersActions"
      },
      {
        "fileName": "fnc_canBecomeLeader.sqf",
        "content": "/*\n * Author: PabstMirror\n * Test if can Become Leader of group.\n *\n * Arguments:\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * Able to become leader of group <BOOL>\n *\n * Example:\n * [player] call ace_interaction_fnc_canBecomeLeader\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\ncount units group _unit > 1 && {leader group _unit != _unit}\n",
        "functionName": "ace_interaction_fnc_canBecomeLeader"
      },
      {
        "fileName": "fnc_canInteractWithCivilian.sqf",
        "content": "/*\n * Author: commy2\n * Checks if the unit can interact with civilian\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n * 2: Target has to be on the civilian side (default: true) <BOOL>\n *\n * Return Value:\n * Able to interact with civilian <BOOL>\n *\n * Example:\n * [target] call ace_interaction_fnc_canInteractWithCivilian\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", [\"_isCivilian\", true]];\nalive _target && [side _target != side _unit, side group _target == civilian] select _isCivilian // return\n",
        "functionName": "ace_interaction_fnc_canInteractWithCivilian"
      },
      {
        "fileName": "fnc_canJoinGroup.sqf",
        "content": "/*\n * Author: commy2\n * Checks if the unit can join a group\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Able to join a group <BOOL>\n *\n * Example:\n * [player, target] call ace_interaction_fnc_canJoinGroup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nalive _target\n&& {!(_target getVariable [\"ACE_isUnconscious\", false])}\n&& {side group _unit == side group _target}\n&& {group _unit != group _target} // return\n",
        "functionName": "ace_interaction_fnc_canJoinGroup"
      },
      {
        "fileName": "fnc_canJoinTeam.sqf",
        "content": "/*\n * Author: commy2\n * Checks if the player can join a team\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Able to join a team <BOOL>\n *\n * Example:\n * [player, target] call ace_interaction_fnc_canJoinTeam\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nalive _target\n&& {!(_target getVariable [\"ACE_isUnconscious\", false])}\n&& {!([_target] call EFUNC(common,isPlayer))}\n&& {_target in units group _unit}\n",
        "functionName": "ace_interaction_fnc_canJoinTeam"
      },
      {
        "fileName": "fnc_canPardon.sqf",
        "content": "/*\n * Author: commy2\n * Checks if the unit can pardon the target.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Unit can pardon target <BOOL>\n *\n * Example:\n * [bob, kevin] call ACE_interaction_fnc_canPardon\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\nalive _target\n&& {rating _target < -2000}\n&& {side group _unit == side group _target}\n",
        "functionName": "ace_interaction_fnc_canPardon"
      },
      {
        "fileName": "fnc_canPassMagazine.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if unit has a spare magazine for the specified weapon.\n *\n * Arguments:\n * 0: Unit that passes the magazine <OBJECT>\n * 1: Unit to pass the magazine to <OBJECT>\n * 2: Weapon classname <STRING>\n *\n * Return Value:\n * Unit can pass magazine <BOOL>\n *\n * Example:\n * [_player, _target, \"arifle_MX_F\"] call ace_interaction_fnc_canPassMagazine\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_player\", \"_target\", \"_weapon\"];\n\nif (!GVAR(enableMagazinePassing)) exitWith {false};\nif (((vehicle _target) != _target) && {(vehicle _target) != (vehicle _player)}) exitWith {false};\n\nprivate _compatibleMags = getArray (configfile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\n{\n    _x params [\"_className\", \"\", \"_loaded\"];\n    if ((_className in _compatibleMags) && {!_loaded} && {_target canAdd _className}) exitWith {true};\n    false\n} foreach (magazinesAmmoFull _player);\n",
        "functionName": "ace_interaction_fnc_canPassMagazine"
      },
      {
        "fileName": "fnc_canPullOutBody.sqf",
        "content": "/*\n * Author: Dystopian\n * Checks if unit can pull target body out of vehicle.\n *\n * Arguments:\n * 1: Body <OBJECT>\n * 2: Unit <OBJECT>\n *\n * Return Value:\n * Able to pull out target body <BOOL>\n *\n * Example:\n * [crew cursorObject select 0, player] call ace_interaction_fnc_canPullOutBody\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_body\", \"_unit\"];\n\nprivate _vehicle = objectParent _body;\n\nif (\n    !isNull objectParent _unit\n    || {alive _body}\n    || {isNull _vehicle}\n    || {1 < locked _vehicle}\n    || {\n        0 < {alive _x} count crew _vehicle // alive is in vehicle\n        // group is used here for situations when side player == ENEMY\n        && {0.6 > side group _unit getFriend side group _vehicle} // player is enemy\n    }\n) exitWith {false};\n\n((fullCrew [_vehicle, \"\"] select {_body == _x select 0}) select 0) params [\"\", \"\", \"_cargoIndex\", \"_turretPath\"];\n\nprivate _locked = if (!(_turretPath isEqualTo [])) then {\n    _vehicle lockedTurret _turretPath;\n} else {\n    if (_cargoIndex > -1) then {\n        _vehicle lockedCargo _cargoIndex;\n    } else {\n        lockedDriver _vehicle;\n    };\n};\n\n!_locked\n",
        "functionName": "ace_interaction_fnc_canPullOutBody"
      },
      {
        "fileName": "fnc_canPush.sqf",
        "content": "/*\n * Author: Jonpas\n * Checks if the boat can be pushed.\n *\n * Arguments:\n * 0: Target <OBJECT>\n *\n * Return Value:\n * Can Push <BOOL>\n *\n * Example:\n * [target] call ace_interaction_fnc_canPush\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nalive _target &&\n{getMass _target <= 2600 || getNumber (configFile >> \"CfgVehicles\" >> typeOf _target >> QGVAR(canPush)) == 1} &&\n{vectorMagnitude velocity _target < 3}\n",
        "functionName": "ace_interaction_fnc_canPush"
      },
      {
        "fileName": "fnc_canTapShoulder.sqf",
        "content": "/*\n * Author: commy2\n * Checks if the player can tap a shoulder.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Able to tap a shoulder <BOOL>\n *\n * Example:\n * [player, target] call ace_interaction_fnc_canTapShoulder\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\n\n_target isKindOf \"CAManBase\" &&\n{alive _target} &&\n{_unit distance _target < 4} &&\n{!(_target getVariable [\"ACE_isUnconscious\", false])} // return\n",
        "functionName": "ace_interaction_fnc_canTapShoulder"
      },
      {
        "fileName": "fnc_doBecomeLeader.sqf",
        "content": "/*\n * Author: PabstMirror\n * Become Leader of group.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_interaction_fnc_doBecomeLeader\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n[QEGVAR(common,selectLeader), [group _unit, _unit], units group _unit] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_interaction_fnc_doBecomeLeader"
      },
      {
        "fileName": "fnc_getDoor.sqf",
        "content": "/*\n * Author: commy2, Phyma\n * Find door.\n *\n * Arguments:\n * 0: Distance <NUMBER>\n *\n * Return Value:\n * House objects and door <ARRAY>\n * 0: House <OBJECT>\n * 1: Door Name <STRING>\n *\n * Example:\n * [player, target] call ace_interaction_fnc_getDoor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_distance\"];\n\nprivate _position0 = positionCameraToWorld [0, 0, 0];\nprivate _position1 = positionCameraToWorld [0, 0, _distance];\n\nprivate _intersections = lineIntersectsSurfaces [AGLToASL _position0, AGLToASL _position1, cameraOn, objNull, true, 1, \"GEOM\"];\n\nif (_intersections isEqualTo []) exitWith {[objNull, \"\"]};\n\nprivate _house = _intersections select 0 select 2;\n\n// shithouse is bugged\nif (typeOf _house == \"\") exitWith {[objNull, \"\"]};\n\n_intersections = [_house, \"GEOM\"] intersect [_position0, _position1];\n\nprivate _door = toLower (_intersections select 0 select 0);\n\nif (isNil \"_door\") exitWith {[_house, \"\"]};\n\n//Check if door is glass because then we need to find the proper location of the door so we can use it\nif ((_door find \"glass\") != -1) then {\n    _door = [_distance, _house, _door] call FUNC(getGlassDoor);\n};\n\nif (isNil \"_door\") exitWith {[_house, \"\"]};\n\n[_house, _door]\n",
        "functionName": "ace_interaction_fnc_getDoor"
      },
      {
        "fileName": "fnc_getDoorAnimations.sqf",
        "content": "/*\n * Author: commy2, Phyma\n * Get door animations.\n *\n * Arguments:\n * 0: House <OBJECT>\n * 1: Door <STRING>\n *\n * Return Value:\n * Animation and Locked variable <ARRAY>\n * 0: Animation <STRING>\n * 1: Locked variable <STRING>\n *\n * Example:\n * array = [target, \"door\"] call ace_interaction_fnc_getDoorAnimations\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_house\", \"_door\"];\n\nprivate _animate = animationNames _house;\nprivate _animations = [];\nprivate _lockedVariable = [];\n\n{\n    private _animName = toLower _x;\n    if ((_animName find (toLower _door)) != -1) then {\n        if (((_animName find \"disabled\") != -1) || ((_animName find \"locked\") != -1)) then {\n            _lockedVariable pushBack _animName;\n        } else {\n            _animations pushBack _animName;\n        };\n    };\n} forEach _animate;\n\n[_animations, _lockedVariable]\n",
        "functionName": "ace_interaction_fnc_getDoorAnimations"
      },
      {
        "fileName": "fnc_getDown.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Forces a civilian to the ground with a chance of failure.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [civillian] call ace_interaction_fnc_getDown\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define SEND_RADIUS 10\n\nparams [\"_unit\", \"_target\"];\n\n[_unit, \"GestureGo\"] call EFUNC(common,doGesture);\n\nprivate _chance = [0.5, 0.8] select (count weapons _unit > 0);\n\n{\n    if (count weapons _x == 0 && {random 1 < _chance}) then {\n        [QGVAR(getDown), [_x], [_x]] call CBA_fnc_targetEvent;\n    };\n    false\n} count (_target nearEntities [\"Civilian\", SEND_RADIUS]);\n",
        "functionName": "ace_interaction_fnc_getDown"
      },
      {
        "fileName": "fnc_getGlassDoor.sqf",
        "content": "/*\n * Author: Phyma\n * Find glass door.\n *\n * Arguments:\n * 0: Distance <NUMBER>\n * 1: House <OBJECT>\n * 2: Door name <STRING>\n *\n * Return Value:\n * 0: Door Name <STRING>\n *\n * Example:\n * [player, target] call ace_interaction_fnc_getGlassDoor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_distance\", \"_house\", \"_door\"];\n\nprivate _doorParts = [];\nprivate _doorPos = [];\nprivate _animate = animationNames _house;\nprivate _glassDoor = _door splitString \"_\";\nprivate _glassPos = (_house selectionPosition [(_glassDoor select 0) + \"_\" + (_glassDoor select 1) + \"_effects\", \"Memory\"]);\n// Calculate all animation names so we know what is there\n{\n    private _animName = toLower _x;\n    if (((_animName find \"door\") != -1) && ((_animName find \"locked\") == -1) && ((_animName find \"disabled\") == -1) && ((_animName find \"handle\") == -1)) then {\n        private _splitStr = _animName splitString \"_\";\n        _doorParts pushBack ((_splitStr select 0) + \"_\" + (_splitStr select 1) + \"_trigger\");\n    };\n} forEach _animate;\n\n\n// Get the pos of all the door components and save the parts\n{\n    _doorPos pushBack (_house selectionPosition [_x, \"Memory\"]);\n} forEach _doorParts;\n\n// Calculate what door that is closest to the glass door\nprivate _lowestDistance = 0;\n{\n    private _objDist = _glassPos distance  _x;\n    //Make sure we dont take another door by mistake\n    if (_objDist <= _distance) then {\n        //Need to set the value in the beginning\n        if (_lowestDistance == 0) then {\n            _lowestDistance = _objDist;\n            private _splitStr = (_doorParts select _forEachIndex) splitString \"_\";\n            _door = (_splitStr select 0) + \"_\" + (_splitStr select 1);\n        } else {\n            if (_objDist < _lowestDistance) then {\n                _lowestDistance = _objDist;\n                private _splitStr = (_doorParts select _forEachIndex) splitString \"_\";\n                _door = (_splitStr select 0) + \"_\" + (_splitStr select 1);\n            };\n        };\n    };\n} forEach _doorPos;\n\n// Check if we have a door or if it is the glass part\nif ((isNil \"_door\") || ((_door find \"glass\") != -1)) exitWith {};\n\n_door\n\n",
        "functionName": "ace_interaction_fnc_getGlassDoor"
      },
      {
        "fileName": "fnc_getInteractionDistance.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets effective interaction distance (handles very large vehicles)\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 0: Target Vehicle <OBJECT>\n *\n * Return Value:\n * Distance to interaction point <NUMBER>\n *\n * Example:\n * [player, cursorObject] call ace_interaction_fnc_getInteractionDistance\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\"];\nTRACE_3(\"getInteractionDistance\",_unit,_target,typeOf _target);\n\n// Handle Man, Crate\nif (!((_target isKindOf \"Car\") || {_target isKindOf \"Tank\"} || {_target isKindOf \"Helicopter\"} || {_target isKindOf \"Plane\"} || {_target isKindOf \"Ship_F\"})) exitWith {\n    _unit distance _target\n};\n\nprivate _unitEyeASL = eyePos _unit;\nprivate _targetModelPos = [_target, _unitEyeASL] call FUNC(getVehiclePosComplex);\nprivate _distance = _unitEyeASL distance (AGLtoASL (_target modelToWorld _targetModelPos));\n\nTRACE_2(\"\",_targetModelPos,_distance);\n\n_distance\n",
        "functionName": "ace_interaction_fnc_getInteractionDistance"
      },
      {
        "fileName": "fnc_getVehiclePos.sqf",
        "content": "/*\n * Author: esteldunedain\n * Return a suitable position for the action point for the given target vehicle\n *\n * Arguments:\n * None (uses local variable _target)\n *\n * Return Value:\n * Children actions <ARRAY>\n *\n * Example:\n * call ace_interaction_fnc_getVehiclePos\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n// IGNORE_PRIVATE_WARNING(_target);\n\nprivate _bb = boundingBoxReal _target;\n(_bb select 0) params [\"_bbX\", \"_bbY\", \"_bbZ\"];\n\nprivate _cameraPosASL = EGVAR(interact_menu,cameraPosASL);\nprivate _relPos = _target worldToModelVisual ASLToAGL _cameraPosASL;\n#ifdef DEBUG_MODE_FULL\n    _relPos = _target worldToModelVisual ASLToAGL eyePos ACE_player;\n#endif\n_relPos params [\"_dx\", \"_dy\", \"_dz\"];\n\nprivate _ndx = (abs _dx) / ((abs (_bbx)) - 1);\nprivate _ndy = (abs _dy) / ((abs (_bbY)) - 1);\nprivate _ndz = (abs _dz) / ((abs (_bbZ)) - 1);\n\nprivate _pos = [];\nif (_ndx > _ndy) then {\n    if (_ndx > _ndz) then {\n        // _ndx is greater, will colide with x plane first\n        _pos = _relPos vectorMultiply ((1 / _ndx) min 0.8);\n    } else {\n        // _ndz is greater, will colide with z plane first\n        _pos = _relPos vectorMultiply ((1 / _ndz) min 0.8);\n    };\n} else {\n    if (_ndy > _ndz) then {\n        // _ndy is greater, will colide with y plane first\n        _pos = _relPos vectorMultiply ((1 / _ndy) min 0.8);\n    } else {\n        // _ndz is greater, will colide with z plane first\n        _pos = _relPos vectorMultiply ((1 / _ndz) min 0.8);\n    };\n};\n\n// Set max height at player's eye level (prevent very high interaction point on choppers)\n// Only when above water level to prevent underwater actions from following player eye level\nif (_cameraPosASL select 2 >= 0) then {\n    _pos set [2, (_pos select 2) min _dz];\n};\n\nTRACE_4(\"\",_bb,_bbX,_relPos,_pos,_cameraPosASL);\n_pos\n\n///////////////////\n// The code belows works very well for cursor mode, but not at all in normal mode\n// maybe it could be enabled by default only for that mode\n/*\nif (cursorObject isEqualTo _target) exitWith {\n    private _dest = EGVAR(interact_menu,cameraPosASL) vectorAdd (EGVAR(interact_menu,cameraDir) vectorMultiply 50);\n    private _origin = EGVAR(interact_menu,cameraPosASL);\n    //private _origin = EGVAR(interact_menu,cameraPosASL) vectorAdd [0, 0, -0.35] vectorDiff (EGVAR(interact_menu,cameraDir) vectorMultiply 1.5);\n    //private _dest = AGLtoASL (_target modelToWorldVisual [0,0,0]);\n    private _results = lineIntersectsSurfaces [_origin, _dest, ACE_player, objNull, true, 5];\n    private _finalPos = [0,0,0];\n    {\n        _x params [\"_pos\", \"\", \"_obj\"];\n        TRACE_3(\"\",_forEachIndex,_obj,_target);\n        if (_obj isEqualTo _target) exitWith {\n            _finalPos = _target worldToModelVisual ASLtoAGL (_pos vectorAdd (EGVAR(interact_menu,cameraDir) vectorMultiply 1.0));\n        };\n    } forEach _results;\n    _finalPos\n};\n[0,0,0]\n*/\n///////////////////\n\n",
        "functionName": "ace_interaction_fnc_getVehiclePos"
      },
      {
        "fileName": "fnc_getVehiclePosComplex.sqf",
        "content": "/*\n * Author: esteldunedain, PabstMirror\n * Return a suitable position for the action point for the given target vehicle\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player's Position ASL <ARRAY>\n *\n * Return Value:\n * Interaction point in model cords <ARRAY>\n *\n * Example:\n * [cursorTarget, eyePos player] call ace_interaction_fnc_getVehiclePosComplex\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_cameraPosASL\"];\nTRACE_2(\"params\",_target,_cameraPosASL);\n\nprivate _bb = boundingBoxReal _target;\n(_bb select 0) params [\"_bbX\", \"_bbY\", \"_bbZ\"];\n\nprivate _config = configFile >> \"CfgVehicles\" >> (typeOf _target);\nif (isNumber (_config >> QGVAR(bodyWidth))) then {_bbX = getNumber (_config >> QGVAR(bodyWidth));};\nif (isNumber (_config >> QGVAR(bodyLength))) then {_bbY = getNumber (_config >> QGVAR(bodyLength));};\n\nprivate _relPos = _target worldToModelVisual ASLToAGL _cameraPosASL;\n_relPos params [\"_dx\", \"_dy\", \"_dz\"];\n\nprivate _ndx = (abs _dx) / ((abs (_bbx)) - 1);\nprivate _ndy = (abs _dy) / ((abs (_bbY)) - 1);\nprivate _ndz = (abs _dz) / ((abs (_bbZ)) - 1);\n\n\nprivate _pos = [];\nif (_ndx > _ndy) then {\n    if (_ndx > _ndz) then {\n        // _ndx is greater, will colide with x plane first\n        _pos = _relPos vectorMultiply ((1 / _ndx) min 0.8);\n    } else {\n        // _ndz is greater, will colide with z plane first\n        _pos = _relPos vectorMultiply ((1 / _ndz) min 0.8);\n    };\n} else {\n    if (_ndy > _ndz) then {\n        // _ndy is greater, will colide with y plane first\n        _pos = _relPos vectorMultiply ((1 / _ndy) min 0.8);\n    } else {\n        // _ndz is greater, will colide with z plane first\n        _pos = _relPos vectorMultiply ((1 / _ndz) min 0.8);\n    };\n};\n\n// Set max height at player's eye level (prevent very high interaction point on vehicles)\n// Only when above water level to prevent underwater actions from following player eye level\nif (_cameraPosASL select 2 >= 0) then {\n    _pos set [2, (_pos select 2) min _dz];\n};\n\nTRACE_4(\"\",_bb,_bbX,_relPos,_pos,_cameraPosASL);\n_pos\n",
        "functionName": "ace_interaction_fnc_getVehiclePosComplex"
      },
      {
        "fileName": "fnc_getWeaponPos.sqf",
        "content": "/*\n * Author: esteldunedain\n * Return a suitable position for the action point for the current weapon\n *\n * Arguments:\n * None (uses local variable _target)\n *\n * Return Value:\n * Children actions <ARRAY>\n *\n * Example:\n * call ace_interaction_fnc_getWeaponPos\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n// IGNORE_PRIVATE_WARNING(_target);\n\nprivate _weaponDir = _target weaponDirection currentWeapon _target;\nprivate _refSystem = _weaponDir call EFUNC(common,createOrthonormalReference);\n\n(_target selectionPosition \"righthand\") vectorAdd ((_refSystem select 2) vectorMultiply 0.1);\n",
        "functionName": "ace_interaction_fnc_getWeaponPos"
      },
      {
        "fileName": "fnc_handleScrollWheel.sqf",
        "content": "/*\n * Author: commy2\n * Handles incremental door opening\n *\n * Arguments:\n * 0: scroll amount <NUMBER>\n *\n * Return Value:\n * handled <BOOL>\n *\n * Example:\n * [5] call ACE_interaction_fnc_handleScrollWheel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_scroll\"];\n\nif !(GVAR(isOpeningDoor)) exitWith {false};\n\nGVAR(doorTargetPhase) = ((GVAR(doorTargetPhase) + (_scroll / (1.2 * 12))) max 0) min 1;\n\nGVAR(usedScrollWheel) = true;\n\ntrue\n",
        "functionName": "ace_interaction_fnc_handleScrollWheel"
      },
      {
        "fileName": "fnc_hideMouseHint.sqf",
        "content": "/*\n * Author: Garth de Wet (LH)\n * Hides the interaction helper text with the mouse buttons at the bottom middle of the screen\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_interaction_fnc_hideMouseHint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (isNull (uiNamespace getVariable [\"ACE_Helper_Display\", objNull])) exitWith {};\n\n(QGVAR(InteractionHelper) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n\n// Re-enable action menu\ninGameUISetEventHandler [\"PrevAction\", \"false\"];\ninGameUISetEventHandler [\"NextAction\", \"false\"];\ninGameUISetEventHandler [\"Action\", \"false\"];\n",
        "functionName": "ace_interaction_fnc_hideMouseHint"
      },
      {
        "fileName": "fnc_joinTeam.sqf",
        "content": "/*\n * Author: commy2\n * Unit joins a fire team.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Team <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"YELLOW\"] call ace_interaction_fnc_joinTeam\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_team\"];\n\n[\"CBA_teamColorChanged\", [_unit, _team]] call CBA_fnc_globalEvent;\n\n// display message\nif (_unit == ACE_player) then {\n    private _message = \"\";\n\n    if (_team == \"MAIN\") then {\n        _message = localize LSTRING(LeftTeam);\n    } else {\n        _team = localize format [LSTRING(Team%1), _team];\n        _message = format [localize LSTRING(JoinedTeam), _team];\n    };\n\n    [_message] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_interaction_fnc_joinTeam"
      },
      {
        "fileName": "fnc_modifyJoinGroupAction.sqf",
        "content": "/*\n * Author: PabstMirror\n * Modifies the ACE_JoinGroup action to show group name.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player <OBJECT>\n * 2: Args <ANY>\n * 3: Action Data <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorObject, player, [], []] call ace_interaction_fnc_modifyJoinGroupAction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_player\", \"\", \"_actionData\"];\n\nprivate _actionText = format [\"%1: %2\", localize LSTRING(JoinGroup), groupID group _target];\nTRACE_3(\"\",_target,group _target,_actionText);\n\n_actionData set [1, _actionText];\n",
        "functionName": "ace_interaction_fnc_modifyJoinGroupAction"
      },
      {
        "fileName": "fnc_moduleInteraction.sqf",
        "content": "/*\n * Author: bux578\n * Initializes the Interaction module.\n *\n * Arguments:\n * 0: Logic <NUMBER>\n * 1: Units <ARRAY>\n * 2: Activation State <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic, ???, activationState] call ace_interaction_fnc_moduleInteraction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(EnableTeamManagement), \"EnableTeamManagement\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(disableNegativeRating), \"DisableNegativeRating\"] call EFUNC(common,readSettingFromModule);\n\nINFO(\"Interaction Module Initialized.\");\n",
        "functionName": "ace_interaction_fnc_moduleInteraction"
      },
      {
        "fileName": "fnc_openDoor.sqf",
        "content": "/*\n * Author: commy2\n * Open door.\n *\n * Arguments:\n * 0: House <OBJECT>\n * 1: Door <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [house, \"door\"] call ace_interaction_fnc_openDoor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _info = [MACRO_DOOR_REACH_DISTANCE] call FUNC(getDoor);\n\n_info params [\"_house\", \"_door\"];\nTRACE_2(\"openDoor\",_house,_door);\n\nif (isNull _house) exitWith {};\n\nprivate _getDoorAnimations = [_house, _door] call FUNC(getDoorAnimations);\n\n_getDoorAnimations params [\"_animations\"];\n\nif (_animations isEqualTo []) exitWith {};\n\nprivate _lockedVariable = format [\"bis_disabled_%1\", _door];\n\n// Check if the door can be locked aka have locked variable, otherwhise cant lock it\nif ((_house animationPhase (_animations select 0) <= 0) && {_house getVariable [_lockedVariable, 0] == 1}) exitWith {\n    private _lockedAnimation = format [\"%1_locked_source\", _door];\n    TRACE_3(\"locked\",_house,_lockedAnimation,isClass (configfile >> \"CfgVehicles\" >> (typeOf _house) >> \"AnimationSources\" >> _lockedAnimation));\n    if (isClass (configfile >> \"CfgVehicles\" >> (typeOf _house) >> \"AnimationSources\" >> _lockedAnimation)) then {\n        // from: a3\\structures_f\\scripts\\fn_door.sqf: - wiggles the door handle (A3 buildings)\n        _house animateSource [_lockedAnimation, (1 - (_house animationSourcePhase _lockedAnimation))];\n    };\n};\n\n// Add handle on carrier\nif (typeOf _house == \"Land_Carrier_01_island_01_F\") then {\n    private _handle = format [\"door_handle_%1_rot_1\", (_animations select 0) select [5, 1]];\n    TRACE_1(\"carrier handle\",_handle);\n    _animations pushBack _handle;\n};\n\nplaySound \"ACE_Sound_Click\"; // @todo replace with smth. more fitting\n\nGVAR(doorTargetPhase) = _house animationPhase (_animations select 0);\nGVAR(isOpeningDoor) = true;\nGVAR(usedScrollWheel) = false;\n\n[{\n    (_this select 0) params [\"_house\", \"_animations\", \"_position\", \"_time\", \"_frame\"];\n\n    if !(GVAR(isOpeningDoor)) exitWith {\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n        // didn't use incremental opening. Just do animation normally.\n        if !(GVAR(usedScrollWheel)) then {\n            private _phase = [0, 1] select (_house animationPhase (_animations select 0) < 0.5);\n\n            {_house animate [_x, _phase]; false} count _animations;\n        };\n    };\n\n    // check if player moved too far away\n    if (getPosASL ACE_player distance _position > 1) exitWith {\n        GVAR(isOpeningDoor) = false;\n    };\n\n    // this allows for holding the door in it's current state.\n    if (CBA_missionTime > _time && {diag_frameno > _frame}) then {\n        GVAR(usedScrollWheel) = true;\n    };\n    // do incremental door opening\n    {_house animate [_x, GVAR(doorTargetPhase)]; false} count _animations;\n}, 0.1, [_house, _animations, getPosASL ACE_player, CBA_missionTime + 0.2, diag_frameno + 2]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_interaction_fnc_openDoor"
      },
      {
        "fileName": "fnc_pardon.sqf",
        "content": "/*\n * Author: commy2\n * Unit pardons target unit.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_interaction_fnc_pardon\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"_target\"];\n\n[QGVAR(pardon), [_target], [_target]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_interaction_fnc_pardon"
      },
      {
        "fileName": "fnc_passMagazine.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Pass spare magazine for the specified weapon.\n *\n * Arguments:\n * 0: Unit that passes the magazine <OBJECT>\n * 1: Unit to pass the magazine to <OBJECT>\n * 2: Weapon classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player, _target, \"arifle_MX_F\"] call ace_interaction_fnc_magToPassazine\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_player\", \"_target\", \"_weapon\"];\n\nprivate _compatibleMags = getArray (configfile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\nprivate _filteredMags = magazinesAmmoFull _player select {(_x select 0) in _compatibleMags && {!(_x select 2)}};\n\n//select magazine with most ammo\nprivate _magToPass = _filteredMags select 0;\nprivate _magToPassIndex = 0;\n{\n    _x params [\"_className\", \"_ammoCount\"];\n    if ((_ammoCount > (_magToPass select 1)) && (_target canAdd _className)) then {\n        _magToPass = _x;\n        _magToPassIndex = _forEachIndex;\n    };\n} foreach _filteredMags;\n\n//remove all magazines and add them again, except the one to be passed\n//needed because of missing commands, see http://feedback.arma3.com/view.php?id=12782\n_magToPass params [\"_magToPassClassName\", \"_magToPassAmmoCount\"];\n_player removeMagazines _magToPassClassName;\n{\n    _x params [\"_className\", \"_ammoCount\"];\n    if ((_className == _magToPassClassName) && (_forEachIndex != _magToPassIndex)) then {\n        _player addMagazine [_className, _ammoCount];\n    };\n} foreach _filteredMags;\n\n[_player, \"PutDown\"] call EFUNC(common,doGesture);\n\n_target addMagazine [_magToPassClassName, _magToPassAmmoCount];\n\nprivate _playerName = [_player] call EFUNC(common,getName);\nprivate _magToPassDisplayName = getText (configFile >> \"CfgMagazines\" >> _magToPassClassName >> \"displayName\");\n[QEGVAR(common,displayTextStructured), [[LSTRING(PassMagazineHint), _playerName, _magToPassDisplayName], 1.5, _target], [_target]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_interaction_fnc_passMagazine"
      },
      {
        "fileName": "fnc_pullOutBody.sqf",
        "content": "/*\n * Author: Dystopian\n * Makes unit pull target body out of vehicle.\n *\n * Arguments:\n * 0: Body <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [crew cursorObject select 0, player] call ace_interaction_fnc_pullOutBody\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_body\", \"_unit\"];\n\nprivate _vehicle = objectParent _body; // vehicle command doesn't work for dead\n\n// get target crew properties\nprivate [\"_cargoIndex\", \"_turretPath\"];\nprivate _cargoNumber = -1;\n{\n    if (\"cargo\" == _x select 1) then {\n        INC(_cargoNumber);\n    };\n    if (_body == _x select 0) exitWith {\n        _cargoIndex = _x select 2;\n        _turretPath = _x select 3;\n    };\n} forEach fullCrew [_vehicle, \"\", true];\nTRACE_3(\"\",_cargoIndex,_cargoNumber,_turretPath);\n\nprivate _preserveEngineOn = false;\n\n// first get in to target seat\nif (!(_turretPath isEqualTo [])) then {\n    _unit action [\"GetInTurret\", _vehicle, _turretPath];\n} else {\n    if (_cargoIndex > -1) then {\n        _unit action [\"GetInCargo\", _vehicle, _cargoNumber];\n    } else {\n        _unit action [\"GetInDriver\", _vehicle];\n        _preserveEngineOn = isEngineOn _vehicle;\n    };\n};\n\n// then get out\n[\n    {(_this select 0) in (_this select 1)},\n    {\n        params [\"_unit\", \"_vehicle\", \"_preserveEngineOn\"];\n        TRACE_3(\"\",_unit,_vehicle,_preserveEngineOn);\n        _unit action [\"GetOut\", _vehicle];\n        if (_preserveEngineOn) then {\n            [{isNull driver _this}, {_this engineOn true}, _vehicle] call CBA_fnc_waitUntilAndExecute;\n        };\n    },\n    [_unit, _vehicle, _preserveEngineOn]\n] call CBA_fnc_waitUntilAndExecute;\n",
        "functionName": "ace_interaction_fnc_pullOutBody"
      },
      {
        "fileName": "fnc_push.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Pushes a boat away from the player\n *\n * Arguments:\n * 0: Boat <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [Boats, Jose] call ace_interaction_fnc_push\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_boat\", \"_unit\"];\n\nprivate _newVelocity = vectorDir _unit;\n_newVelocity set [2, 0.25];\n_newVelocity = _newVelocity vectorMultiply 2;\n\n[QEGVAR(common,setVelocity), [_boat, _newVelocity], [_boat]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_interaction_fnc_push"
      },
      {
        "fileName": "fnc_sendAway.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Sends a near civilian crowd away with a chance of failure.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [civillian] call ace_interaction_fnc_sendAway\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define SEND_DISTANCE 50\n#define SEND_RADIUS 10\n\nparams [\"_unit\"];\n\n[_unit, \"GestureGo\"] call EFUNC(common,doGesture);\n\nprivate _chance = [0.5, 0.8] select (count weapons _unit > 0);\n\n{\n    if (count weapons _x == 0 && {random 1 < _chance}) then {\n        private _position = getPosASL _unit vectorAdd (eyeDirection _unit vectorMultiply SEND_DISTANCE);\n        _position set [2, 0];\n\n        [QGVAR(sendAway), [_x, _position], [_x]] call CBA_fnc_targetEvent;\n    };\n    false\n} count (_unit nearEntities [\"Civilian\", SEND_RADIUS]);\n",
        "functionName": "ace_interaction_fnc_sendAway"
      },
      {
        "fileName": "fnc_showMouseHint.sqf",
        "content": "/*\n * Author: Garth de Wet (LH)\n * Shows the interaction helper text with the mouse buttons at the bottom middle of the screen.\n *\n * Arguments:\n * 0: Left Click Text <STRING>\n * 1: Right Click Text <STRING>\n * 2: Scroll Text <STRING> (default: \"\")\n * 2: Extra Icon/Text pairs <ARRAY> (default: [])\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"Place Explosive\", \"Cancel\"] call ace_interaction_fnc_showMouseHint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define GUI_GRID_W  (0.025)\n#define GUI_GRID_H  (0.04)\n\nparams [\"_leftClick\", \"_rightClick\", [\"_scroll\", \"\"], [\"_extraIconSets\", []]];\n\n(QGVAR(InteractionHelper) call BIS_fnc_rscLayer) cutRsc [QGVAR(InteractionHelper), \"PLAIN\", 0.5, false];\n\ndisableSerialization;\n\nprivate _display = uiNamespace getVariable [\"ACE_Helper_Display\", objNull];\n\nif (isNull _display) exitWith {WARNING(\"Display was null\");};\n\n(_display displayCtrl 1000) ctrlSetText _leftClick;\n(_display displayCtrl 1001) ctrlSetText _rightClick;\n\n(_display displayCtrl 1000) ctrlShow (_leftClick != \"\");\n(_display displayCtrl 1200) ctrlShow (_leftClick != \"\");\n(_display displayCtrl 1001) ctrlShow (_rightClick != \"\");\n(_display displayCtrl 1201) ctrlShow (_rightClick != \"\");\n\nprivate _offset = 19;\n\nif (_scroll == \"\") then {\n    (_display displayCtrl 1002) ctrlShow false;\n    (_display displayCtrl 1202) ctrlShow false;\n    (_display displayCtrl 1001) ctrlSetPosition [21 * GUI_GRID_W, 18 * GUI_GRID_H, 24 * GUI_GRID_W, 1.5 * GUI_GRID_H];\n    (_display displayCtrl 1201) ctrlSetPosition [20 * GUI_GRID_W, 18.5 * GUI_GRID_H, 1.5 * GUI_GRID_W, 1 * GUI_GRID_H];\n    (_display displayCtrl 1001) ctrlCommit 0;\n    (_display displayCtrl 1201) ctrlCommit 0;\n} else {\n    _offset = _offset + 1;\n    (_display displayCtrl 1002) ctrlSetText _scroll;\n\n    // Disable action menu\n    inGameUISetEventHandler [\"PrevAction\", \"true\"];\n    inGameUISetEventHandler [\"NextAction\", \"true\"];\n    inGameUISetEventHandler [\"Action\", \"true\"];\n};\n\n{\n    _x params [[\"_xKeyName\", \"\", [\"\"]], [\"_xText\", \"\", [\"\"]]];\n    switch (toLower _xKeyName) do {\n        case (\"alt\"): {_xKeyName = format [\"<%1>\", toUpper localize \"str_dik_alt\"];};\n        case (\"control\");\n        case (\"ctrl\"): {_xKeyName = format [\"<%1>\", toUpper localize \"str_dik_control\"];};\n        case (\"shift\"): {_xKeyName = format [\"<%1>\", toUpper localize \"str_dik_shift\"];};\n    };\n\n    private _keyNameCtrl = _display ctrlCreate [\"RscInteractionText_right\", -1];\n    private _textCtrl = _display ctrlCreate [\"RscInteractionText\", -1];\n    _keyNameCtrl ctrlSetText _xKeyName;\n    _textCtrl ctrlSetText _xText;\n    _keyNameCtrl ctrlSetPosition [0 * GUI_GRID_W, _offset * GUI_GRID_H, 21.4 * GUI_GRID_W, 1.5 * GUI_GRID_H];\n    _textCtrl ctrlSetPosition [21 * GUI_GRID_W, _offset * GUI_GRID_H, 24 * GUI_GRID_W, 1.5 * GUI_GRID_H];\n    _keyNameCtrl ctrlCommit 0;\n    _textCtrl ctrlCommit 0;\n    _offset = _offset + 1;\n} forEach _extraIconSets;\n\n",
        "functionName": "ace_interaction_fnc_showMouseHint"
      },
      {
        "fileName": "fnc_switchLamp.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Turn on/off lamp\n *\n * Arguments:\n * 0: Lamp <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * lamp call ace_interaction_fnc_switchLamp\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define DISABLED_LAMP_DMG 0.95\n\nparams [\"_lamp\"];\n\n_isOn = _lamp getVariable [\"ACE_lampOn\", true];\nprivate _reflectors = \"true\" configClasses (configfile >> \"CfgVehicles\" >> (typeof _lamp) >> \"Reflectors\");\nprivate _hitPointsDamage = [];\n{\n    private _hitPoint = getText (_x >> \"hitpoint\");\n    _hitPointsDamage pushback [_hitPoint, _lamp getHit _hitPoint];\n    nil\n} count _reflectors;\n\n//if lamp is on turn it off\nprivate _eventName = [QGVAR(setLampOn), QGVAR(setLampOff)] select _isOn;\n[_eventName, [_lamp, _hitPointsDamage, DISABLED_LAMP_DMG], [_lamp]] call CBA_fnc_targetEvent;\n\n_lamp setVariable [\"ACE_lampOn\", !_isOn, true];\n",
        "functionName": "ace_interaction_fnc_switchLamp"
      },
      {
        "fileName": "fnc_tapShoulder.sqf",
        "content": "/*\n * Author: commy2\n * Taps a shoulder\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n * 2: Shoulder which was tapped [0: left, 1: right] <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, target, 0] call ace_interaction_fnc_tapShoulder\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_shoulderNum\"];\n\nif (_unit == ACE_player) then {\n    addCamShake [4, 0.5, 5];\n};\n\n[_unit, \"gesturePoint\"] call EFUNC(common,doGesture);\n\n[QGVAR(tapShoulder), [_target, _shoulderNum], [_target]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_interaction_fnc_tapShoulder"
      }
    ]
  },
  {
    "component": "interact_menu",
    "files": [
      {
        "fileName": "XEH_clientInit.sqf",
        "content": "//XEH_clientInit.sqf\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(blockDefaultActions) = [];\n\nGVAR(cachedBuildingTypes) = [];\nGVAR(cachedBuildingActionPairs) = [];\n\nGVAR(ParsedTextCached) = [];\n\n[\"ace_settingChanged\", {\n    params [\"_name\"];\n    if (({_x == _name} count [QGVAR(colorTextMax), QGVAR(colorTextMin), QGVAR(colorShadowMax), QGVAR(colorShadowMin), QGVAR(textSize), QGVAR(shadowSetting)]) == 1) then {\n        [] call FUNC(setupTextColors);\n    };\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_settingsInitialized\", {\n    //Setup text/shadow/size/color settings matrix\n    [] call FUNC(setupTextColors);\n    // Install the render EH on the main display\n    addMissionEventHandler [\"Draw3D\", {call FUNC(render)}];\n}] call CBA_fnc_addEventHandler;\n\n//Add Actions to Houses:\n[\"ace_interactMenuOpened\", {_this call FUNC(userActions_addHouseActions)}] call CBA_fnc_addEventHandler;\n\n[\"ACE3 Common\", QGVAR(InteractKey), (localize LSTRING(InteractKey)),\n{\n    // Statement\n    [0] call FUNC(keyDown)\n},{[0,false] call FUNC(keyUp)},\n[219, [false, false, false]], false] call CBA_fnc_addKeybind;  //Left Windows Key\n\n[\"ACE3 Common\", QGVAR(SelfInteractKey), (localize LSTRING(SelfInteractKey)),\n{\n    // Statement\n    [1] call FUNC(keyDown)\n},{[1,false] call FUNC(keyUp)},\n[219, [false, true, false]], false] call CBA_fnc_addKeybind; //Left Windows Key + Ctrl/Strg\n\n\n[\"ACE3 Common\", QGVAR(InteractKey_Toggle),\nformat [\"%1 (%2)\", (localize LSTRING(InteractKey)), localize ELSTRING(common,KeybindToggle)],\n{\n    if (GVAR(openedMenuType) != 0) then {\n        [0] call FUNC(keyDown)\n    } else {\n        [0,false] call FUNC(keyUp)\n    };\n}, {}, [-1, [false, false, false]], false] call CBA_fnc_addKeybind; // UNBOUND\n\n[\"ACE3 Common\", QGVAR(SelfInteractKey_Toggle),\nformat [\"%1 (%2)\", (localize LSTRING(SelfInteractKey)), localize ELSTRING(common,KeybindToggle)],\n{\n    if (GVAR(openedMenuType) != 1) then {\n        [1] call FUNC(keyDown)\n    } else {\n        [1, false] call FUNC(keyUp)\n    };\n}, {}, [-1, [false, false, false]], false] call CBA_fnc_addKeybind; // UNBOUND\n\n\n// Listens for the falling unconscious event, just in case the menu needs to be closed\n[\"ace_unconscious\", {\n    // If no menu is open just quit\n    if (GVAR(openedMenuType) < 0) exitWith {};\n\n    params [\"_unit\", \"_isUnconscious\"];\n\n    if (_unit != ACE_player || !_isUnconscious) exitWith {};\n\n    GVAR(actionSelected) = false;\n    [GVAR(openedMenuType), false] call FUNC(keyUp);\n}] call CBA_fnc_addEventHandler;\n\n// background options\n[\"ace_interactMenuOpened\", {\n    if (GVAR(menuBackground)==1) then {[QGVAR(menuBackground), true] call EFUNC(common,blurScreen);};\n    if (GVAR(menuBackground)==2) then {0 cutRsc[QGVAR(menuBackground), \"PLAIN\", 1, false];};\n}] call CBA_fnc_addEventHandler;\n[\"ace_interactMenuClosed\", {\n    if (GVAR(menuBackground)==1) then {[QGVAR(menuBackground), false] call EFUNC(common,blurScreen);};\n    if (GVAR(menuBackground)==2) then {(uiNamespace getVariable [QGVAR(menuBackground), displayNull]) closeDisplay 0;};\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_displayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_display\"];\n\nif (ctrlIDD _display == 12) then { // RscDisplayMainMap\n    (_display displayCtrl 51) ctrlAddEventHandler [\"Draw\", {_this call FUNC(render)}];\n};\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(ActNamespace) = [] call CBA_fnc_createNamespace;\nGVAR(ActSelfNamespace) = [] call CBA_fnc_createNamespace;\n\n// Event handlers for all interact menu controls\nDFUNC(handleMouseMovement) = {\n    if (GVAR(cursorKeepCentered)) then {\n        GVAR(cursorPos) = GVAR(cursorPos) vectorAdd [_this select 1, _this select 2, 0] vectorDiff [0.5, 0.5, 0];\n        setMousePosition [0.5, 0.5];\n    } else {\n        GVAR(cursorPos) = [_this select 1, _this select 2, 0];\n    };\n};\nDFUNC(handleMouseButtonDown) = {\n    if !(GVAR(actionOnKeyRelease)) then {\n        [GVAR(openedMenuType),true] call FUNC(keyUp);\n    };\n};\n\nGVAR(keyDown) = false;\nGVAR(keyDownSelfAction) = false;\nGVAR(keyDownTime) = 0;\nGVAR(openedMenuType) = -1;\n\nGVAR(lastTime) = diag_tickTime;\nGVAR(rotationAngle) = 0;\n\nGVAR(selectedAction) = [[],[]];\nGVAR(actionSelected) = false;\nGVAR(selectedTarget) = objNull;\n\nGVAR(menuDepthPath) = [];\nGVAR(lastPos) = [0,0,0];\n\nGVAR(currentOptions) = [];\n\nGVAR(lastPath) = [];\n\nGVAR(expanded) = false;\n\nGVAR(startHoverTime) = diag_tickTime;\nGVAR(expandedTime) = diag_tickTime;\n\n// reset on mission load\naddMissionEventHandler [\"Loaded\", {\n    GVAR(startHoverTime) = 0;\n    GVAR(expandedTime) = 0;\n}];\n\nGVAR(iconCtrls) = [];\nGVAR(iconCount) = 0;\n\nGVAR(collectedActionPoints) = [];\nGVAR(foundActions) = [];\nGVAR(lastTimeSearchedActions) = -1000;\n\n// Init zeus menu\n[] call FUNC(compileMenuZeus);\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addActionToClass.sqf",
        "content": "/*\n * Author: esteldunedain\n * Insert an ACE action to a class, under a certain path\n * Note: This function is NOT global.\n *\n * Arguments:\n * 0: TypeOf of the class <STRING>\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\n * 2: Parent path of the new action <ARRAY>\n * 3: Action <ARRAY>\n * 4: Use Inheritance <BOOL> (default: false)\n *\n * Return Value:\n * The entry full path, which can be used to remove the entry, or add children entries <ARRAY>.\n *\n * Example:\n * [typeOf cursorTarget, 0, [\"ACE_TapShoulderRight\"],VulcanPinchAction] call ace_interact_menu_fnc_addActionToClass;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!params [[\"_objectType\", \"\", [\"\"]], [\"_typeNum\", 0, [0]], [\"_parentPath\", [], [[]]], [\"_action\", [], [[]], 11]]) exitWith {\n    ERROR(\"Bad Params\");\n    []\n};\nTRACE_4(\"params\",_objectType,_typeNum,_parentPath,_action);\n\nif (param [4, false, [false]]) exitwith {\n    if (isNil QGVAR(inheritedActions)) then {GVAR(inheritedActions) = [];};\n    private _index = GVAR(inheritedActions) pushBack [[], _typeNum, _parentPath, _action];\n    private _initEH = compile format ['\n        params [\"_object\"];\n        private _typeOf = typeOf _object;\n        (GVAR(inheritedActions) select %1) params [\"_addedClasses\", \"_typeNum\", \"_parentPath\", \"_action\"];\n        if (_typeOf in _addedClasses) exitWith {};\n        _addedClasses pushBack _typeOf;\n        [_typeOf, _typeNum, _parentPath, _action] call FUNC(addActionToClass);\n    ', _index];\n    TRACE_2(\"Added inheritable action\",_objectType,_index);\n    [_objectType, \"init\", _initEH, true, [], true] call CBA_fnc_addClassEventHandler;\n\n    // Return the full path\n    (_parentPath + [_action select 0])\n};\n\n// Ensure the config menu was compiled first\nif (_typeNum == 0) then {\n    [_objectType] call FUNC(compileMenu);\n} else {\n    [_objectType] call FUNC(compileMenuSelfAction);\n};\n\nprivate _namespace = [GVAR(ActNamespace), GVAR(ActSelfNamespace)] select _typeNum;\nprivate _actionTrees = _namespace getVariable _objectType;\nif (isNil \"_actionTrees\") then {\n    _actionTrees = [];\n    _namespace setVariable [_objectType, _actionTrees];\n};\n\nif (_parentPath isEqualTo [\"ACE_MainActions\"]) then {\n    [_objectType, _typeNum] call FUNC(addMainAction);\n};\n\nprivate _parentNode = [_actionTrees, _parentPath] call FUNC(findActionNode);\nif (isNil {_parentNode}) exitWith {\n    ERROR_4(\"Failed to add action - action (%1) to parent %2 on object %3 [%4]\",(_action select 0),_parentPath,_objectType,_typeNum);\n    []\n};\n\n// Add action node as children of the correct node of action tree\n(_parentNode select 1) pushBack [_action,[]];\n\n// Return the full path\n(_parentPath + [_action select 0])\n",
        "functionName": "ace_interact_menu_fnc_addActionToClass"
      },
      {
        "fileName": "fnc_addActionToObject.sqf",
        "content": "/*\n * Author: esteldunedain\n * Insert an ACE action to an object, under a certain config path\n * Note: This function is NOT global.\n *\n * Arguments:\n * 0: Object the action should be assigned to <OBJECT>\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\n * 2: Parent path of the new action <ARRAY>\n * 3: Action <ARRAY>\n *\n * Return Value:\n * The entry full path, which can be used to remove the entry, or add children entries <ARRAY>.\n *\n * Example:\n * [cursorTarget, 0, [\"ACE_TapShoulderRight\"],VulcanPinchAction] call ace_interact_menu_fnc_addActionToObject;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!params [[\"_object\", objNull, [objNull]], [\"_typeNum\", 0, [0]], [\"_parentPath\", [], [[]]], [\"_action\", [], [[]], 11]]) exitWith {\n    ERROR(\"Bad Params\");\n    []\n};\n\nprivate _varName = [QGVAR(actions),QGVAR(selfActions)] select _typeNum;\nprivate _actionList = _object getVariable [_varName, []];\n\nif (_actionList isEqualTo []) then {\n    _object setVariable [_varName, _actionList];\n};\n\nif (_parentPath isEqualTo [\"ACE_MainActions\"]) then {\n    [(typeOf _object), _typeNum] call FUNC(addMainAction);\n};\n\n// Add action and parent path to the list of object actions\n_actionList pushBack [_action, +_parentPath];\n\n// Return the full path\n(_parentPath + [_action select 0])\n",
        "functionName": "ace_interact_menu_fnc_addActionToObject"
      },
      {
        "fileName": "fnc_addActionToZeus.sqf",
        "content": "/*\n * Author: PabstMirror\n * Insert an ACE action to zeus.\n * Note: This function is NOT global.\n *\n * Arguments:\n * 0: Parent path of the new action (e.g. [\"ACE_ZeusActions\"]) <ARRAY>\n * 1: Action <ARRAY>\n *\n * Return Value:\n * The entry full path, which can be used to add children entries <ARRAY>.\n *\n * Example:\n * [[\"ACE_ZeusActions\"], zeusAction] call ace_interact_menu_fnc_addActionToZeus;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!params [[\"_parentPath\", [], [[]]], [\"_action\", [], [[]], 11]]) exitWith {ERROR(\"Bad Params\"); []};\nif ((_parentPath param [0, \"\"]) != \"ACE_ZeusActions\") exitWith {ERROR_1(\"Bad path %1 - should have ACE_ZeusActions as base\", _parentPath); []};\nTRACE_2(\"addActionToZeus\",_parentPath,_action);\n\nprivate _currentPath = GVAR(ZeusActions);\nprivate _pathValid = false;\n{\n    private _targetParent = _x;\n    _pathValid = false;\n    {\n        _x params [\"_xAction\", \"_xSubActions\"];\n        TRACE_2(\"\",_targetParent,_xAction);\n        if ((_xAction select 0) == _targetParent) exitWith {\n            _pathValid = true;\n            _currentPath = _xSubActions;\n        };\n    } forEach _currentPath;\n} forEach _parentPath;\n\nif (!_pathValid) exitWith {ERROR_1(\"Bad path %1\", _parentPath); []};\n\nTRACE_1(\"Adding Action\",_currentPath);\n_currentPath pushBack [_action, []];\n\n// Return the full path\n(_parentPath + [_action select 0])\n",
        "functionName": "ace_interact_menu_fnc_addActionToZeus"
      },
      {
        "fileName": "fnc_addMainAction.sqf",
        "content": "/*\n * Author: Jonpas, PabstMirror\n * Makes sure there is a ACE_MainActions on the object type\n *\n * Arguments:\n * 0: Object classname <STRING>\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"Table\", 0] call ace_interact_menu_fnc_addMainAction;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_objectType\", \"_typeNum\"];\n\nprivate _namespace = [GVAR(ActNamespace), GVAR(ActSelfNamespace)] select _typeNum;\nprivate _actionTrees = _namespace getVariable _objectType;\nif (isNil \"_actionTrees\") then {\n    _actionTrees = [];\n};\n\nprivate _parentNode = [_actionTrees, [\"ACE_MainActions\"]] call FUNC(findActionNode);\n\nif (isNil {_parentNode}) then {\n    TRACE_2(\"No Main Action on object\", _objectType, _typeNum);\n    private _mainAction = [\"ACE_MainActions\", localize ELSTRING(interaction,MainAction), \"\", {}, {true}] call FUNC(createAction);\n    [_objectType, _typeNum, [], _mainAction] call EFUNC(interact_menu,addActionToClass);\n};\n",
        "functionName": "ace_interact_menu_fnc_addMainAction"
      },
      {
        "fileName": "fnc_collectActiveActionTree.sqf",
        "content": "/*\n * Author: esteldunedain\n * Collect a entire tree of active actions\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Original action tree <ARRAY>\n * 2: Parent path <ARRAY>\n * 3: Distance to base point (will be 0 for self/zeus/in-vehicle) <NUMBER>\n *\n * Return Value:\n * Active children <ARRAY>\n *\n * Example:\n * [bob, [array], [array], 5] call ACE_interact_menu_fnc_collectActoveActionTree\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_origAction\", \"_parentPath\", \"_distanceToBasePoint\"];\n_origAction params [\"_origActionData\", \"_origActionChildren\"];\n\nprivate _target = _object;\nprivate _player = ACE_player;\n\n// Check if the function should be modified first\nif !((_origActionData select 10) isEqualTo {}) then {\n    // It should, so make a copy and pass it to the modifierFunction\n    _origActionData = +_origActionData;\n    [_target, ACE_player, _origActionData select 6, _origActionData] call (_origActionData select 10);\n};\n\n_origActionData params [\"_actionName\", \"\", \"\", \"_statementCode\", \"_conditionCode\", \"_insertChildrenCode\", \"_customParams\", \"\", \"_distance\"];\n\n// Return nothing if the action itself is not active\nif !([_target, ACE_player, _customParams] call _conditionCode) exitWith {\n    []\n};\n\n// Return nothing if the action is to far (including checking sub actions) [DISABLED FOR NOW ref #2196]\n// if (_distanceToBasePoint > _distance) exitWith {\n    // []\n// };\n\nprivate _fullPath = +_parentPath;\n_fullPath pushBack _actionName;\nprivate _activeChildren = [];\n\n// If there's a statement to dynamically insert children then execute it\nif !({} isEqualTo _insertChildrenCode) then {\n    private _dynamicChildren = [_target, ACE_player, _customParams] call _insertChildrenCode;\n\n    // Collect dynamic children class actions\n    {\n        private _action = [_x select 2, _x, _fullPath, _distanceToBasePoint] call FUNC(collectActiveActionTree);\n        if ((count _action) > 0) then {\n            _activeChildren pushBack _action;\n        };\n        nil\n    } count _dynamicChildren;\n};\n\n// Collect children class actions\n{\n    private _action = [_object, _x, _fullPath, _distanceToBasePoint] call FUNC(collectActiveActionTree);\n    if ((count _action) > 0) then {\n        _activeChildren pushBack _action;\n    };\n    nil\n} count _origActionChildren;\n\n// Collect children object actions\n{\n    _x params [\"_actionData\", \"_pPath\"];\n\n    // Check if the action is children of the original action\n    if (_pPath isEqualTo _fullPath) then {\n        private _action = [_object, [_actionData,[]], _fullPath, _distanceToBasePoint] call FUNC(collectActiveActionTree);\n        if ((count _action) > 0) then {\n            _activeChildren pushBack _action;\n        };\n    };\n    nil\n} count GVAR(objectActionList);\n\n\n// If the original action has no statement, and no children, don't display it\nif ((_activeChildren isEqualTo []) && {_statementCode isEqualTo {}}) exitWith {\n    // @todo: Account for showDisabled?\n    []\n};\n\n\n[_origActionData, _activeChildren, _object]\n",
        "functionName": "ace_interact_menu_fnc_collectActiveActionTree"
      },
      {
        "fileName": "fnc_compileMenu.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Compile the action menu from config for an object's class\n *\n * Arguments:\n * 0: Object or class name <OBJECT> or <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_interact_menu_fnc_compileMenu\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _objectType = _target;\nif (_target isEqualType objNull) then {\n    _objectType = typeOf _target;\n};\nprivate _namespace = GVAR(ActNamespace);\n\n// Exit if the action menu is already compiled for this class\nif !(isNil {_namespace getVariable _objectType}) exitWith {};\n\nprivate _recurseFnc = {\n    params [\"_actionsCfg\", \"_parentDistance\"];\n    private _actions = [];\n\n    {\n        private _entryCfg = _x;\n        if(isClass _entryCfg) then {\n            private _displayName = getText (_entryCfg >> \"displayName\");\n            private _distance = _parentDistance;\n            if (isNumber (_entryCfg >> \"distance\")) then {_distance = getNumber (_entryCfg >> \"distance\");};\n            // if (_distance < _parentDistance) then {WARNING_3(\"[%1] distance %2 less than parent %3\", configName _entryCfg, _distance, _parentDistance);};\n            private _icon = getText (_entryCfg >> \"icon\");\n            private _statement = compile (getText (_entryCfg >> \"statement\"));\n\n            // If the position entry is present, compile it\n            private _position = getText (_entryCfg >> \"position\");\n            if (_position != \"\") then {\n                _position = compile _position;\n            } else {\n                // If the not, but the selection entry is present use that\n                _position = getText (_entryCfg >> \"selection\");\n                if (_position != \"\") then {\n                    _position = compile format [\"_target selectionPosition '%1'\", _position];\n                } else {\n                    // Otherwise, just use the origin\n                    _position = {[0,0,0]};\n                };\n            };\n\n            private _condition = getText (_entryCfg >> \"condition\");\n            if (_condition == \"\") then {_condition = \"true\"};\n\n            // Add canInteract (including exceptions) and canInteractWith to condition\n            if ((configName _entryCfg) != \"ACE_MainActions\") then {\n                _condition = _condition + format [QUOTE( && {[ARR_3(ACE_player, _target, %1)] call EFUNC(common,canInteractWith)} ), getArray (_entryCfg >> \"exceptions\")];\n            };\n\n            private _insertChildren = compile (getText (_entryCfg >> \"insertChildren\"));\n            private _modifierFunction = compile (getText (_entryCfg >> \"modifierFunction\"));\n\n            private _showDisabled = (getNumber (_entryCfg >> \"showDisabled\")) > 0;\n            private _enableInside = (getNumber (_entryCfg >> \"enableInside\")) > 0;\n            private _canCollapse = (getNumber (_entryCfg >> \"canCollapse\")) > 0;\n            private _runOnHover = false;\n            if (isText (_entryCfg >> \"runOnHover\")) then {\n                _runOnHover = compile getText (_entryCfg >> \"runOnHover\");\n            } else {\n                _runOnHover = (getNumber (_entryCfg >> \"runOnHover\")) > 0;\n            };\n\n            _condition = compile _condition;\n            private _children = [_entryCfg, _distance] call _recurseFnc;\n\n            private _entry = [\n                        [\n                            configName _entryCfg,\n                            _displayName,\n                            _icon,\n                            _statement,\n                            _condition,\n                            _insertChildren,\n                            [],\n                            _position,\n                            _distance,\n                            [_showDisabled,_enableInside,_canCollapse,_runOnHover, false],\n                            _modifierFunction\n                        ],\n                        _children\n                    ];\n            _actions pushBack _entry;\n        };\n        nil\n    } count (configProperties [_actionsCfg, \"isClass _x\", true]);\n    _actions\n};\n\nif ((getNumber (configFile >> \"CfgVehicles\" >> _objectType >> \"isPlayableLogic\")) == 1) exitWith {\n    TRACE_1(\"skipping playable logic\",_objectType);\n    _namespace setVariable [_objectType, []];\n};\n\nprivate _actionsCfg = configFile >> \"CfgVehicles\" >> _objectType >> \"ACE_Actions\";\n\nTRACE_1(\"Building ACE_Actions\",_objectType);\nprivate _actions = [_actionsCfg, 0] call _recurseFnc;\n\n// ace_interaction_fnc_addPassengerAction expects ACE_MainActions to be first\n// Other mods can change the order that configs are added, so we should verify this now and resort if needed\nif (_objectType isKindOf \"CaManBase\") then {\n    if ((((_actions select 0) select 0) select 0) != \"ACE_MainActions\") then {\n        INFO_1(\"ACE_MainActions not first for man [%1]\",_objectType);\n        private _mainActions = [];\n        {\n            if (((_x select 0) select 0) == \"ACE_MainActions\") then {\n                _mainActions = _actions deleteAt _forEachIndex;\n            };\n        } forEach _actions;\n        if (_mainActions isEqualTo []) exitWith {ERROR_1(\"ACE_MainActions not found on man [%1]\",_objectType);};\n        _actions = [_mainActions] + _actions; // resort array with ACE_MainActions first\n    };\n};\n\n_namespace setVariable [_objectType, _actions];\n\n/*\n[\n    [\n        [\n            \"MyAction\",\n            \"My Action\",\n            \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Actions\\eject_ca.paa\",\n            { (_this select 0) setVelocity [0,0,10]; },\n            { true },\n            {},\n            [],\n            {[0,0,0]},\n            1,\n            [false,false,false,false,false]\n        ],\n        [children actions]\n    ]\n]\n*/\n",
        "functionName": "ace_interact_menu_fnc_compileMenu"
      },
      {
        "fileName": "fnc_compileMenuSelfAction.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Compile the self action menu from config for an object's class\n *\n * Arguments:\n * 0: Object or class name <OBJECT> or <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_interact_menu_fnc_compileMenuSelfAction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _objectType = _target;\nif (_target isEqualType objNull) then {\n    _objectType = typeOf _target;\n};\nprivate _namespace = GVAR(ActSelfNamespace);\n\n// Exit if the action menu is already compiled for this class\nif !(isNil {_namespace getVariable _objectType}) exitWith {};\n\n\nprivate _recurseFnc = {\n    params [\"_actionsCfg\"];\n\n    private _actions = [];\n\n    {\n        private _entryCfg = _x;\n        if(isClass _entryCfg) then {\n            private _displayName = getText (_entryCfg >> \"displayName\");\n\n            private _icon = getText (_entryCfg >> \"icon\");\n            private _statement = compile (getText (_entryCfg >> \"statement\"));\n\n            private _condition = getText (_entryCfg >> \"condition\");\n            if (_condition == \"\") then {_condition = \"true\"};\n\n            // Add canInteract (including exceptions) and canInteractWith to condition\n            _condition = _condition + format [QUOTE( && {[ARR_3(ACE_player, _target, %1)] call EFUNC(common,canInteractWith)} ), getArray (_entryCfg >> \"exceptions\")];\n\n            private _insertChildren = compile (getText (_entryCfg >> \"insertChildren\"));\n            private _modifierFunction = compile (getText (_entryCfg >> \"modifierFunction\"));\n\n            private _showDisabled = (getNumber (_entryCfg >> \"showDisabled\")) > 0;\n            private _enableInside = (getNumber (_entryCfg >> \"enableInside\")) > 0;\n            private _canCollapse = (getNumber (_entryCfg >> \"canCollapse\")) > 0;\n            private _runOnHover = true;\n            if (isText (_entryCfg >> \"runOnHover\")) then {\n                _runOnHover = compile getText (_entryCfg >> \"runOnHover\");\n            } else {\n                _runOnHover = (getNumber (_entryCfg >> \"runOnHover\")) > 0;\n            };\n\n            _condition = compile _condition;\n            private _children = [_entryCfg] call _recurseFnc;\n\n            private _entry = [\n                        [\n                            configName _entryCfg,\n                            _displayName,\n                            _icon,\n                            _statement,\n                            _condition,\n                            _insertChildren,\n                            [],\n                            [0,0,0],\n                            10, //distace\n                            [_showDisabled,_enableInside,_canCollapse,_runOnHover, true],\n                            _modifierFunction\n                        ],\n                        _children\n                    ];\n            _actions pushBack _entry;\n        };\n        nil\n    } count (configProperties [_actionsCfg, \"isClass _x\", true]);\n    _actions\n};\n\nprivate _actionsCfg = configFile >> \"CfgVehicles\" >> _objectType >> \"ACE_SelfActions\";\n\nprivate _baseDisplayName = \"\";\nprivate _baseIcon = \"\";\nif (_objectType isKindOf \"CAManBase\") then {\n    _baseDisplayName = localize LSTRING(SelfActionsRoot);\n    _baseIcon = \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Actions\\eject_ca.paa\";\n} else {\n    _baseDisplayName = getText (configFile >> \"CfgVehicles\" >> _objectType >> \"displayName\");\n    //Alt would be to just use a static text, if veh names end up being too long:\n    // _baseDisplayName = localize LSTRING(VehicleActionsRoot);\n\n    //Pull the icon from the vehicle's config:\n    _baseIcon = getText (configFile >> \"CfgVehicles\" >> _objectType >> \"Icon\");\n    //icon could be a CfgVehicleIcons\n    if isText (configFile >> \"CfgVehicleIcons\" >> _baseIcon) then {\n        _baseIcon = getText (configFile >> \"CfgVehicleIcons\" >> _baseIcon);\n    };\n};\n\nTRACE_1(\"Building ACE_SelfActions\",_objectType);\n// Create a master action to base on self action\nprivate _actions = [\n        [\n            [\n                \"ACE_SelfActions\",\n                _baseDisplayName,\n                _baseIcon,\n                {\n                    // Dummy statement so it's not collapsed when there's no available actions\n                    true\n                },\n                {[ACE_player, _target, [\"isNotInside\",\"isNotDragging\", \"isNotCarrying\", \"isNotSwimming\", \"notOnMap\", \"isNotEscorting\", \"isNotSurrendering\", \"isNotSitting\", \"isNotOnLadder\", \"isNotRefueling\"]] call EFUNC(common,canInteractWith)},\n                {},\n                {},\n                \"Spine3\",\n                10,\n                [false,true,false,false,false]\n            ],\n            [_actionsCfg] call _recurseFnc\n        ]\n    ];\n\n_namespace setVariable [_objectType, _actions];\n",
        "functionName": "ace_interact_menu_fnc_compileMenuSelfAction"
      },
      {
        "fileName": "fnc_compileMenuZeus.sqf",
        "content": "/*\n * Author: SilentSpike\n * Compile the zeus action menu (only to be done once)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_interact_menu_fnc_compileMenuZeus\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Exit if the action menu is already compiled for zeus\nif !(isNil {missionNamespace getVariable [QGVAR(ZeusActions), nil]}) exitWith {};\n\nprivate _recurseFnc = {\n    params [\"_actionsCfg\"];\n    private _actions = [];\n\n    {\n        private _entryCfg = _x;\n        if(isClass _entryCfg) then {\n            private _displayName = getText (_entryCfg >> \"displayName\");\n\n            private _icon = getText (_entryCfg >> \"icon\");\n            private _statement = compile (getText (_entryCfg >> \"statement\"));\n\n            private _condition = getText (_entryCfg >> \"condition\");\n            if (_condition == \"\") then {_condition = \"true\"};\n\n            private _insertChildren = compile (getText (_entryCfg >> \"insertChildren\"));\n            private _modifierFunction = compile (getText (_entryCfg >> \"modifierFunction\"));\n\n            private _showDisabled = (getNumber (_entryCfg >> \"showDisabled\")) > 0;\n            private _enableInside = (getNumber (_entryCfg >> \"enableInside\")) > 0;\n            private _canCollapse = (getNumber (_entryCfg >> \"canCollapse\")) > 0;\n            private _runOnHover = true;\n            if (isText (_entryCfg >> \"runOnHover\")) then {\n                _runOnHover = compile getText (_entryCfg >> \"runOnHover\");\n            } else {\n                _runOnHover = (getNumber (_entryCfg >> \"runOnHover\")) > 0;\n            };\n\n            private _condition = compile _condition;\n            private _children = [_entryCfg] call _recurseFnc;\n\n            private _entry = [\n                        [\n                            configName _entryCfg,\n                            _displayName,\n                            _icon,\n                            _statement,\n                            _condition,\n                            _insertChildren,\n                            {},\n                            [0,0,0],\n                            10, //distace\n                            [_showDisabled,_enableInside,_canCollapse,_runOnHover,false],\n                            _modifierFunction\n                        ],\n                        _children\n                    ];\n            _actions pushBack _entry;\n        };\n    } forEach (configProperties [_actionsCfg, \"isClass _x\", true]);\n    _actions\n};\n\nprivate _actionsCfg = configFile >> \"ACE_ZeusActions\";\n\n// Create a master action to base zeus actions on\nGVAR(ZeusActions) = [\n    [\n        [\n            \"ACE_ZeusActions\",\n            localize LSTRING(ZeusActionsRoot),\n            \"\\A3\\Ui_F_Curator\\Data\\Logos\\arma3_zeus_icon_ca.paa\",\n            {true},\n            {true},\n            {},\n            {},\n            {[0,0,0]},\n            10,\n            [false,true,false,false,false]\n        ],\n        [_actionsCfg] call _recurseFnc\n    ]\n];\n",
        "functionName": "ace_interact_menu_fnc_compileMenuZeus"
      },
      {
        "fileName": "fnc_createAction.sqf",
        "content": "/*\n * Author: esteldunedain\n * Creates an isolated ACE action\n * Note: This function is NOT global.\n *\n * Arguments:\n * 0: Action name <STRING>\n * 1: Name of the action shown in the menu <STRING>\n * 2: Icon <STRING>\n * 3: Statement <CODE>\n * 4: Condition <CODE>\n * 5: Insert children code <CODE> (Optional)\n * 6: Action parameters <ANY> (Optional)\n * 7: Position (Position array, Position code or Selection Name) <ARRAY>, <CODE> or <STRING> (Optional)\n * 8: Distance <NUMBER> (Optional)\n * 9: Other parameters [showDisabled,enableInside,canCollapse,runOnHover,doNotCheckLOS] <ARRAY> (Optional)\n * 10: Modifier function <CODE> (Optional)\n *\n * Return Value:\n * Action <ARRAY>\n *\n * Example:\n * [\"VulcanPinch\",\"Vulcan Pinch\",\"\",{_target setDamage 1;},{true},{},[parameters], [0,0,0], 100] call ace_interact_menu_fnc_createAction;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\n// IGNORE_PRIVATE_WARNING(_actionName,_displayName,_icon,_statement,_condition,_insertChildren,_customParams,_position,_distance,_params,_modifierFunction);\n\nparams [\n    \"_actionName\",\n    \"_displayName\",\n    \"_icon\",\n    \"_statement\",\n    \"_condition\",\n    [\"_insertChildren\", {}],\n    [\"_customParams\", []],\n    [\"_position\", {[0, 0, 0]}],\n    [\"_distance\", 2],\n    [\"_params\", [false, false, false, false, false]],\n    [\"_modifierFunction\", {}]\n];\n\n_position = if (_position isEqualType \"\") then {\n    // If the action is set to a selection, create the suitable code - IGNORE_PRIVATE_WARNING(_target);\n    compile format [\"_target selectionPosition '%1'\", _position];\n} else {\n    if (_position isEqualType []) then {\n        // If the action is set to a array position, create the suitable code\n        compile format [\"%1\", _position];\n    } else {\n        _position;\n    };\n};\n\n[\n    _actionName,\n    _displayName,\n    _icon,\n    _statement,\n    _condition,\n    _insertChildren,\n    _customParams,\n    _position,\n    _distance,\n    _params,\n    _modifierFunction\n]\n",
        "functionName": "ace_interact_menu_fnc_createAction"
      },
      {
        "fileName": "fnc_createVehiclesActions.sqf",
        "content": "/*\n * Author: Dystopian\n * Creates child actions for vehicle list.\n * Statement gets vehicle as action parameter.\n *\n * Arguments:\n * 0: Vehicle list <ARRAY>\n * 1: Statement <CODE>\n * 2: Target <OBJECT>\n *\n * Return Value:\n * Array of actions <ARRAY>\n *\n * Example:\n * [nearestObjects [player, [\"AllVehicles\"], 10], {}, cursorObject] call ace_interact_menu_fnc_createVehiclesActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicles\", \"_statement\", \"_target\"];\n\n_vehicles apply {\n    private _config = configFile >> \"CfgVehicles\" >> typeOf _x;\n    private _name = getText (_config >> \"displayName\");\n    private _ownerName = [_x, true] call EFUNC(common,getName);\n    if (\"\" != _ownerName) then {\n        _name = format [\"%1 (%2)\", _name, _ownerName];\n    };\n    private _icon = (getText (_config >> \"icon\")) call BIS_fnc_textureVehicleIcon;\n    private _action = [format [\"%1\", _x], _name, _icon, _statement, {true}, {}, _x] call EFUNC(interact_menu,createAction);\n    [_action, [], _target]\n}\n",
        "functionName": "ace_interact_menu_fnc_createVehiclesActions"
      },
      {
        "fileName": "fnc_ctrlSetParsedTextCached.sqf",
        "content": "/*\n * Author: commy2\n * Sets the controls structured text if it isn't already set.\n *\n * Arguments:\n * 0: Structured Text Ctrl <CONTROL>\n * 1: Index <NUMBER>\n * 2: Text <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL, 5, \"text\"] call ACE_interact_menu_fnc_ctrlSetParsedTextCached\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ctrl\", \"_index\", \"_text\"];\n\n//systemChat str (_text != ARR_SELECT(GVAR(ParsedTextCached),_index,\"-1\"));\n\nif (_text != (GVAR(ParsedTextCached) param [_index,\"-1\"])) then {\n    GVAR(ParsedTextCached) set [_index, _text];\n    _ctrl ctrlSetStructuredText parseText _text;\n};\n",
        "functionName": "ace_interact_menu_fnc_ctrlSetParsedTextCached"
      },
      {
        "fileName": "fnc_findActionNode.sqf",
        "content": "/*\n * Author: esteldunedain\n * Return action point from path\n * Note: This function is NOT global.\n *\n * Arguments:\n * 0: List of Action Tree <ARRAY>\n * 1: Path <ARRAY>\n *\n * Return Value:\n * Action node <ARRAY> or <NIL> if not found \n *\n * Example:\n * [actionTree, [\"ACE_TapShoulderRight\",\"VulcanPinchAction\"]] call ace_interact_menu_fnc_findActionNode;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_actionTreeList\", \"_parentPath\"];\n\n// Hack to make this work on the root node too\nif (_parentPath isEqualTo []) exitWith {\n    [[],_actionTreeList]\n};\n\n// Search the class action trees and find where to insert the entry\nprivate _parentNode = [[],_actionTreeList];\nprivate _foundParentNode = false;\n\nprivate _fnc_findFolder = {\n    params [\"_parentPath\", \"_level\", \"_actionNode\"];\n\n    {\n        _x params [\"_actionData\", \"_actionChildren\"];\n        if ((_actionData select 0) isEqualTo (_parentPath select _level)) exitWith {\n\n            if (count _parentPath == _level + 1) exitWith {\n                _parentNode = _x;\n                _foundParentNode = true;\n            };\n\n            // The action should go somewhere in here\n            [_parentPath, _level + 1, _x] call _fnc_findFolder;\n        };\n    } forEach (_actionNode select 1);\n};\n\n[_parentPath, 0, [[],_actionTreeList]] call _fnc_findFolder;\n\n// Exit if there's no entry point to insert this action\nif (!_foundParentNode) exitWith {};\n\n_parentNode\n",
        "functionName": "ace_interact_menu_fnc_findActionNode"
      },
      {
        "fileName": "fnc_handleEscapeMenu.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handle the escape key being pressed.\n *\n * Arguments:\n * 0: Escape menu display that should be closed <DISPLAY> (default: displayNull)\n *\n * Return Value:\n * None\n *\n * Example:\n * [display] call ace_interact_menu_fnc_handleEscapeMenu\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(openedMenuType) < 0) exitWith {};\n\nparams [[\"_display\", displayNull, [displayNull]]];\nTRACE_2(\"handleEscapeMenu\",_display,isNull _display);\n\nif (!isNull _display) then {\n    _display closeDisplay 0;\n};\n\nGVAR(actionSelected) = false;\n[GVAR(openedMenuType), false] call FUNC(keyUp);\n",
        "functionName": "ace_interact_menu_fnc_handleEscapeMenu"
      },
      {
        "fileName": "fnc_isSubPath.sqf",
        "content": "/*\n * Author: esteldunedain\n * Check if the first path is a subpath of the other\n *\n * Arguments:\n * 0: LongPath <ARRAY>\n * 1: ShortPath <STRING>\n *\n * Return Value:\n * Bool <BOOL>\n *\n * Example:\n * [[[\"ACE_SelfActions\", player],[\"ace_Gestures\", player]], [[\"ACE_SelfActions\", player]]] call ace_interact_menu_fnc_isSubPath\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_longPath\", \"_shortPath\"];\n\nprivate _isSubPath = true;\n\nif (count _shortPath > count _longPath) exitWith {false};\n\n//IGNORE_PRIVATE_WARNING [\"_i\"];\nfor [{private _i = 0},{_i < count _shortPath},{_i = _i + 1}] do {\n    if !((_longPath select _i) isEqualTo (_shortPath select _i)) exitWith {\n        _isSubPath = false;\n    };\n};\n\n_isSubPath\n",
        "functionName": "ace_interact_menu_fnc_isSubPath"
      },
      {
        "fileName": "fnc_keyDown.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Handle interactions key down\n *\n * Arguments:\n * 0: Type of key: 0 interaction / 1 self interaction <NUMBER>\n *\n * Return Value:\n * true <BOOL>\n *\n * Example:\n * [0] call ACE_interact_menu_fnc_keyDown\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_menuType\"];\n\nif (GVAR(openedMenuType) == _menuType) exitWith {true};\n\n// Conditions: canInteract (these don't apply to zeus)\nif ((isNull curatorCamera) && {\n    !([ACE_player, objNull, [\"isNotInside\",\"isNotDragging\", \"isNotCarrying\", \"isNotSwimming\", \"notOnMap\", \"isNotEscorting\", \"isNotSurrendering\", \"isNotSitting\", \"isNotOnLadder\", \"isNotRefueling\"]] call EFUNC(common,canInteractWith))\n}) exitWith {false};\n\nwhile {dialog} do {\n    closeDialog 0;\n};\n\nif (_menuType == 0) then {\n    GVAR(keyDown) = true;\n    GVAR(keyDownSelfAction) = false;\n} else {\n    GVAR(keyDown) = false;\n    GVAR(keyDownSelfAction) = true;\n};\nGVAR(keyDownTime) = diag_tickTime;\nGVAR(openedMenuType) = _menuType;\nGVAR(lastTimeSearchedActions) = -1000;\nGVAR(ParsedTextCached) = [];\n\nGVAR(useCursorMenu) = (vehicle ACE_player != ACE_player) ||\n                      (!(isNull (ACE_controlledUAV select 0))) ||\n                      visibleMap ||\n                      (!isNull curatorCamera) ||\n                      {(_menuType == 1) && {(isWeaponDeployed ACE_player) || GVAR(AlwaysUseCursorSelfInteraction) || {cameraView == \"GUNNER\"}}} ||\n                      {(_menuType == 0) && GVAR(AlwaysUseCursorInteraction)};\n\n// Delete existing controls in case there's any left\nGVAR(iconCount) = 0;\nfor \"_i\" from 0 to (count GVAR(iconCtrls))-1 do {\n    ctrlDelete (GVAR(iconCtrls) select _i);\n    GVAR(ParsedTextCached) set [_i, \"\"];\n};\nGVAR(iconCtrls) resize GVAR(iconCount);\n\nif (GVAR(useCursorMenu)) then {\n    // Don't close zeus interface if open\n    if (isNull curatorCamera) then {\n        (findDisplay 46) createDisplay QGVAR(cursorMenu); //\"RscCinemaBorder\";//\n    } else {\n        createDialog QGVAR(cursorMenu);\n    };\n    (finddisplay 91919) displayAddEventHandler [\"KeyUp\", {[_this,'keyup'] call CBA_events_fnc_keyHandler}];\n    (finddisplay 91919) displayAddEventHandler [\"KeyDown\", {\n        // Handle the escape key being pressed with menu open:\n        if ((_this select [1,4]) isEqualTo [1,false,false,false]) exitWith { // escape key with no modifiers\n            [displayNull] call FUNC(handleEscapeMenu);\n        };\n        [_this,'keydown'] call CBA_events_fnc_keyHandler;\n    }];\n    // The dialog sets:\n    // uiNamespace getVariable QGVAR(dlgCursorMenu);\n    // uiNamespace getVariable QGVAR(cursorMenuOpened);\n    GVAR(cursorPos) = [0.5,0.5,0];\n\n    private _ctrl = (findDisplay 91919) ctrlCreate [\"RscStructuredText\", 9922];\n    _ctrl ctrlSetPosition [safeZoneX, safeZoneY, safeZoneW, safeZoneH];\n    _ctrl ctrlCommit 0;\n\n    // handles Mouse moving and LMB in cursor mode when action on keyrelease is disabled\n    ((finddisplay 91919) displayctrl 9922) ctrlAddEventHandler [\"MouseMoving\", DFUNC(handleMouseMovement)];\n    ((finddisplay 91919) displayctrl 9922) ctrlAddEventHandler [\"MouseButtonDown\", DFUNC(handleMouseButtonDown)];\n    setMousePosition [0.5, 0.5];\n} else {\n    if (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]) then {\n        (findDisplay 91919) closeDisplay 2;\n    };\n};\n\nGVAR(selfMenuOffset) = (AGLtoASL (positionCameraToWorld [0, 0, 2])) vectorDiff (AGLtoASL (positionCameraToWorld [0, 0, 0]));\n\n//Auto expand the first level when self, mounted vehicle or zeus (skips the first animation as there is only one choice)\nif (GVAR(openedMenuType) == 0) then {\n    if (isNull curatorCamera) then {\n        if (!(isNull (ACE_controlledUAV select 0))) then {\n            GVAR(menuDepthPath) = [[\"ACE_SelfActions\", (ACE_controlledUAV select 0)]];\n            GVAR(expanded) = true;\n            GVAR(expandedTime) = diag_tickTime;\n            GVAR(lastPath) = +GVAR(menuDepthPath);\n            GVAR(startHoverTime) = -1000;\n        } else {\n            if (vehicle ACE_player != ACE_player) then {\n                GVAR(menuDepthPath) = [[\"ACE_SelfActions\", (vehicle ACE_player)]];\n                GVAR(expanded) = true;\n                GVAR(expandedTime) = diag_tickTime;\n                GVAR(lastPath) = +GVAR(menuDepthPath);\n                GVAR(startHoverTime) = -1000;\n            };\n        };\n    } else {\n        GVAR(menuDepthPath) = [[\"ACE_ZeusActions\", (getAssignedCuratorLogic player)]];\n        GVAR(expanded) = true;\n        GVAR(expandedTime) = diag_tickTime;\n        GVAR(lastPath) = +GVAR(menuDepthPath);\n        GVAR(startHoverTime) = -1000;\n    };\n} else {\n    GVAR(menuDepthPath) = [[\"ACE_SelfActions\", ACE_player]];\n    GVAR(expanded) = true;\n    GVAR(expandedTime) = diag_tickTime;\n    GVAR(lastPath) = +GVAR(menuDepthPath);\n    GVAR(startHoverTime) = -1000;\n};\n\n[\"ace_interactMenuOpened\", [_menuType]] call CBA_fnc_localEvent;\n\n//Remove the old \"DefaultAction\" action event handler if it already exists\nGVAR(blockDefaultActions) params [[\"_player\", objNull], [\"_ehid\", -1]];\nTRACE_2(\"blockDefaultActions\",_player,_ehid);\nif (!isNull _player) then {\n    [_player, \"DefaultAction\", _ehid] call EFUNC(common,removeActionEventHandler);\n    GVAR(blockDefaultActions) = [];\n};\n//Add the \"DefaultAction\" action event handler\nif (alive ACE_player) then {\n    private _ehid = [ACE_player, \"DefaultAction\", {GVAR(openedMenuType) >= 0}, {\n        if (!GVAR(actionOnKeyRelease) && GVAR(actionSelected)) then {\n            [GVAR(openedMenuType),true] call FUNC(keyUp);\n        };\n    }] call EFUNC(common,addActionEventHandler);\n    TRACE_2(\"Added\",ACE_player,_ehid);\n    GVAR(blockDefaultActions) = [ACE_player, _ehid];\n};\n\ntrue\n",
        "functionName": "ace_interact_menu_fnc_keyDown"
      },
      {
        "fileName": "fnc_keyUp.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Handle interactions key up\n *\n * Arguments:\n * 0: Type of key: 0 interaction / 1 self interaction <NUMBER>\n *\n * Return Value:\n * true <BOOL>\n *\n * Example:\n * [1] call ACE_interact_menu_fnc_keyUp\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_menuType\", \"_calledByClicking\"];\n\n// Exit if there's no menu opened\nif (GVAR(openedMenuType) < 0) exitWith {true};\n\nif (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]) then {\n    (findDisplay 91919) closeDisplay 2;\n};\n\nif(GVAR(actionSelected)) then {\n    this = GVAR(selectedTarget);\n\n    private _player = ACE_Player;\n    private _target = GVAR(selectedTarget);\n\n    // Clear the conditions caches\n    [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\n\n    // exit scope if selecting an action on key release is disabled\n    if (!(GVAR(actionOnKeyRelease)) && !_calledByClicking) exitWith {};\n\n    // Check the action conditions\n    private _actionData = GVAR(selectedAction) select 0;\n    if ([_target, _player, _actionData select 6] call (_actionData select 4)) then {\n        // Call the statement\n        [_target, _player, _actionData select 6] call (_actionData select 3);\n\n        // Clear the conditions caches again if the action was performed\n        [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\n    };\n};\n\n[\"ace_interactMenuClosed\", [GVAR(openedMenuType)]] call CBA_fnc_localEvent;\n\n//Remove the \"DefaultAction\" action event handler\nGVAR(blockDefaultActions) params [[\"_player\", objNull], [\"_ehid\", -1]];\nTRACE_2(\"blockDefaultActions\",_player,_ehid);\nif (!isNull _player) then {\n    [_player, \"DefaultAction\", _ehid] call EFUNC(common,removeActionEventHandler);\n    GVAR(blockDefaultActions) = [];\n};\n\nGVAR(keyDown) = false;\nGVAR(keyDownSelfAction) = false;\nGVAR(openedMenuType) = -1;\n\nGVAR(expanded) = false;\nGVAR(lastPath) = [];\nGVAR(menuDepthPath) = [];\n\ntrue\n",
        "functionName": "ace_interact_menu_fnc_keyUp"
      },
      {
        "fileName": "fnc_removeActionFromClass.sqf",
        "content": "/*\n * Author: esteldunedain\n * Removes an action from a class\n *\n * Arguments:\n * 0: TypeOf of the class <STRING>\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\n * 2: Full path of the new action <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [typeOf cursorTarget, 0,[\"ACE_TapShoulderRight\",\"VulcanPinch\"]] call ace_interact_menu_fnc_removeActionFromClass;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_objectType\", \"_typeNum\", \"_fullPath\"];\n\nprivate _res = _fullPath call FUNC(splitPath);\n_res params [\"_parentPath\", \"_actionName\"];\n\nprivate _namespace = [GVAR(ActNamespace), GVAR(ActSelfNamespace)] select _typeNum;\nprivate _actionTrees = _namespace getVariable _objectType;\nif (isNil \"_actionTrees\") then {\n    _actionTrees = [];\n};\n\nprivate _parentNode = [_actionTrees, _parentPath] call FUNC(findActionNode);\nif (isNil {_parentNode}) exitWith {};\n\n// Iterate through children of the father\nprivate _found = false;\n{\n    if (((_x select 0) select 0) == _actionName) exitWith {\n        TRACE_2(\"Deleting Action\", _forEachIndex, _x);\n        _found = true;\n        (_parentNode select 1) deleteAt _forEachIndex;\n    };\n} forEach (_parentNode select 1);\n\nif (!_found) then {\n    WARNING(\"Failed to find action to delete\");\n};\n",
        "functionName": "ace_interact_menu_fnc_removeActionFromClass"
      },
      {
        "fileName": "fnc_removeActionFromObject.sqf",
        "content": "/*\n * Author: commy2, NouberNou and esteldunedain\n * Removes an action from an object\n *\n * Arguments:\n * 0: Object the action is assigned to <OBJECT>\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\n * 2: Full path of the action to remove <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorTarget,0,[\"ACE_TapShoulderRight\",\"VulcanPinch\"]] call ace_interact_menu_fnc_removeActionFromObject;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_typeNum\", \"_fullPath\"];\n\nprivate _res = _fullPath call FUNC(splitPath);\n_res params [\"_parentPath\", \"_actionName\"];\n\nprivate _varName = [QGVAR(actions),QGVAR(selfActions)] select _typeNum;\nprivate _actionList = _object getVariable [_varName, []];\n{\n    if (((_x select 0) select 0) isEqualTo _actionName &&\n        {(_x select 1) isEqualTo _parentPath}) exitWith {\n        _actionList deleteAt _forEachIndex;\n    };\n} forEach _actionList;\n",
        "functionName": "ace_interact_menu_fnc_removeActionFromObject"
      },
      {
        "fileName": "fnc_render.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Render all available nearby interactions\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_interact_menu_fnc_render\n *\n * Public: No\n */\n// #define ENABLE_PERFORMANCE_COUNTERS\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(fnc_render);\n\nprivate _foundTarget = false;\n\nif (GVAR(openedMenuType) >= 0) then {\n    BEGIN_COUNTER(fnc_renderMenuOpen);\n\n    private _cursorPos2 = positionCameraToWorld [0, 0, 2];\n\n    // Render all available nearby interactions\n    call FUNC(renderActionPoints);\n\n    // Draw the red selector only when there's no cursor\n    if !(uiNamespace getVariable [QGVAR(cursorMenuOpened),false]) then {\n        [[0.5,0.5], \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selected_ca.paa\"] call FUNC(renderSelector);\n    };\n\n    private _cursorScreenPos = [worldToScreen _cursorPos2, GVAR(cursorPos)] select (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]);\n\n    private _closestDistance = 1000000;\n    private _closestSelection = -1;\n    {\n        _x params [\"\", \"_sPos\"];\n        private _distanceFromCursor = _cursorScreenPos distance2d _sPos;\n        if ((_distanceFromCursor < 0.1118) && {_distanceFromCursor < _closestDistance}) then {\n            _closestDistance = _distanceFromCursor;\n            _closestSelection = _forEachIndex;\n        };\n    } forEach GVAR(currentOptions);\n\n    if (_closestSelection == -1) exitWith {END_COUNTER(fnc_renderMenuOpen);};\n\n    private _closest = GVAR(currentOptions) select _closestSelection;\n    _closest params [\"_action\", \"_sPos\", \"_hoverPath\"];\n\n    private _cTime = diag_tickTime;\n    private _delta = _cTime - GVAR(lastTime);\n    GVAR(lastTime) = _cTime;\n\n    GVAR(rotationAngle) = (GVAR(rotationAngle) + (270*_delta)) mod 360;\n    [_sPos, format [QPATHTOF(ui\\selector%1.paa), floor (((abs GVAR(rotationAngle)) mod 90) / 6)]] call FUNC(renderSelector);\n\n    _foundTarget = true;\n    GVAR(actionSelected) = true;\n    GVAR(selectedAction) = _action select 1;\n    GVAR(selectedTarget) = (GVAR(selectedAction)) select 2;\n\n    private _misMatch = !(GVAR(lastPath) isEqualTo _hoverPath);\n\n    if(_misMatch && {diag_tickTime-GVAR(expandedTime) > linearConversion [0, 2, GVAR(menuAnimationSpeed), 0.25, 0.08333333]}) then {\n        GVAR(startHoverTime) = diag_tickTime;\n        GVAR(lastPath) = _hoverPath;\n        GVAR(expanded) = false;\n    } else {\n        if(!GVAR(expanded) && {diag_tickTime-GVAR(startHoverTime) > linearConversion [0, 2, GVAR(menuAnimationSpeed), 0.25, 0.08333333]}) then {\n            GVAR(expanded) = true;\n\n            // Start the expanding menu animation only if the user is not going up the menu\n            if !([GVAR(menuDepthPath),GVAR(lastPath)] call FUNC(isSubPath)) then {\n                GVAR(expandedTime) = diag_tickTime;\n            };\n            GVAR(menuDepthPath) = +GVAR(lastPath);\n\n            // Execute the current action if it's run on hover\n            private _tmp = ((GVAR(selectedAction) select 0) select 9) select 3;\n            private _runOnHover = true;\n            if (_tmp isEqualType {}) then {\n                _runOnHover = call _tmp;\n            } else {\n                if (_tmp isEqualType false) then {\n                    _runOnHover = _tmp;\n                } else {\n                    _runOnHover = _tmp > 0;\n                };\n            };\n            if (_runOnHover) then {\n                this = GVAR(selectedTarget);\n                private _player = ACE_Player;\n                private _target = GVAR(selectedTarget);\n\n                // Clear the conditions caches\n                [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\n\n                // Check the action conditions\n                private _actionData = GVAR(selectedAction) select 0;\n                if ([_target, _player, _actionData select 6] call (_actionData select 4)) then {\n                    // Call the statement\n                    [_target, _player, _actionData select 6] call (_actionData select 3);\n\n                    // Clear the conditions caches again if the action was performed\n                    [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\n                };\n            };\n        };\n    };\n    END_COUNTER(fnc_renderMenuOpen);\n};\n\nif(!_foundTarget && GVAR(actionSelected)) then {\n    GVAR(actionSelected) = false;\n};\nfor \"_i\" from GVAR(iconCount) to (count GVAR(iconCtrls))-1 do {\n    ctrlDelete (GVAR(iconCtrls) select _i);\n    GVAR(ParsedTextCached) set [_i, \"\"];\n};\nGVAR(iconCtrls) resize GVAR(iconCount);\nGVAR(iconCount) = 0;\n\nEND_COUNTER(fnc_render);\n",
        "functionName": "ace_interact_menu_fnc_render"
      },
      {
        "fileName": "fnc_renderActionPoints.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Render all action points\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_interact_menu_fnc_renderActionPoints\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(currentOptions) = [];\n\nprivate _player = ACE_player;\n\nGVAR(cameraPosASL) = AGLtoASL (positionCameraToWorld [0, 0, 0]);\nGVAR(cameraDir) = (AGLtoASL (positionCameraToWorld [0, 0, 1])) vectorDiff GVAR(cameraPosASL);\n\nprivate _fnc_renderNearbyActions = {\n    // Render all nearby interaction menus\n    #define MAXINTERACTOBJECTS 3\n\n    GVAR(foundActions) = [];\n    GVAR(lastTimeSearchedActions) = diag_tickTime;\n\n    private _numInteractObjects = 0;\n    private _nearestObjects = nearestObjects [ACE_player, [\"All\"], 13];\n    {\n        private _target = _x;\n\n        // Quick oclussion test. Skip objects more than 1 m behind the camera plane\n        private _lambda = ((getPosASL _x) vectorDiff GVAR(cameraPosASL)) vectorDotProduct GVAR(cameraDir);\n        if ((_lambda > -1) && {!isObjectHidden _target}) then {\n            private _numInteractions = 0;\n            // Prevent interacting with yourself or your own vehicle\n            if (_target != ACE_player && {_target != vehicle ACE_player}) then {\n\n                // Iterate through object actions, find base level actions and render them if appropiate\n                GVAR(objectActionList) = _target getVariable [QGVAR(actions), []];\n                {\n                    // Only render them directly if they are base level actions\n                    if ((_x select 1) isEqualTo []) then {\n                        // Try to render the menu\n                        private _action = _x;\n                        if ([_target, _action] call FUNC(renderBaseMenu)) then {\n                            _numInteractions = _numInteractions + 1;\n                            GVAR(foundActions) pushBack [_target, _action, GVAR(objectActionList)];\n                        };\n                    };\n                    nil\n                } count GVAR(objectActionList);\n\n                // Iterate through base level class actions and render them if appropiate\n                private _namespace = GVAR(ActNamespace);\n                private _classActions = _namespace getVariable typeOf _target;\n\n                {\n                    private _action = _x;\n                    // Try to render the menu\n                    if ([_target, _action] call FUNC(renderBaseMenu)) then {\n                        _numInteractions = _numInteractions + 1;\n                        GVAR(foundActions) pushBack [_target, _action, GVAR(objectActionList)];\n                    };\n                    nil\n                } count _classActions;\n\n                // Limit the amount of objects the player can interact with\n                if (_numInteractions > 0) then {\n                    _numInteractObjects = _numInteractObjects + 1;\n                };\n            };\n        };\n        if (_numInteractObjects >= MAXINTERACTOBJECTS) exitWith {};\n\n        nil\n    } count _nearestObjects;\n};\n\nprivate _fnc_renderLastFrameActions = {\n    {\n        _x params [\"_target\", \"_action\", \"_objectActionList\"];\n\n        GVAR(objectActionList) = _objectActionList;\n        [_target, _action] call FUNC(renderBaseMenu);\n        nil\n    } count GVAR(foundActions);\n};\n\nprivate _fnc_renderSelfActions = {\n    private _target = _this;\n\n    // Set object actions for collectActiveActionTree\n    GVAR(objectActionList) = _target getVariable [QGVAR(selfActions), []];\n\n    // Iterate through base level class actions and render them if appropiate\n    private _namespace = GVAR(ActSelfNamespace);\n    private _classActions = _namespace getVariable typeOf _target;\n\n    private _pos = if !(GVAR(useCursorMenu)) then {\n        //Convert to ASL, add offset and then convert back to AGL (handles waves when over water)\n        ASLtoAGL ((AGLtoASL (positionCameraToWorld [0, 0, 0])) vectorAdd GVAR(selfMenuOffset));\n    } else {\n        [0.5, 0.5]\n    };\n\n    {\n        _action = _x;\n        [_target, _action, _pos] call FUNC(renderBaseMenu);\n        nil\n    } count _classActions;\n};\n\nprivate _fnc_renderZeusActions = {\n    {\n        private _action = _x;\n        [_this, _action, [0.5, 0.5]] call FUNC(renderBaseMenu);\n        nil\n    } count GVAR(ZeusActions);\n};\n\n\nGVAR(collectedActionPoints) resize 0;\n\n// Render nearby actions, unit self actions or vehicle self actions as appropiate\nif (GVAR(openedMenuType) == 0) then {\n    if (isNull curatorCamera) then {\n        if (!(isNull (ACE_controlledUAV select 0))) then {\n            // Render UAV self actions when in control of UAV AI\n            (ACE_controlledUAV select 0) call _fnc_renderSelfActions;\n        } else {\n            if (vehicle ACE_player == ACE_player) then {\n                if (diag_tickTime > GVAR(lastTimeSearchedActions) + 0.20) then {\n                    // Once every 0.2 secs, collect nearby objects active and visible action points and render them\n                    call _fnc_renderNearbyActions;\n                } else {\n                    // The rest of the frames just draw the same action points rendered the last frame\n                    call _fnc_renderLastFrameActions;\n                };\n            } else {\n                // Render vehicle self actions when in vehicle\n                (vehicle ACE_player) call _fnc_renderSelfActions;\n            };\n        };\n    } else {\n        // Render zeus actions when zeus open\n        (getAssignedCuratorLogic player) call _fnc_renderZeusActions;\n    };\n} else {\n    ACE_player call _fnc_renderSelfActions;\n};\n\nif (count GVAR(collectedActionPoints) > 1) then {\n    // Do the oclusion pass\n\n    // Order action points according to z\n    GVAR(collectedActionPoints) sort true;\n\n    for [{private _i = count GVAR(collectedActionPoints) - 1}, {_i > 0}, {_i = _i - 1}] do {\n        for [{private _j = _i - 1}, {_j >= 0}, {_j = _j - 1}] do {\n            // Check if action point _i is ocluded by _j\n            private _delta = vectorNormalized ((GVAR(collectedActionPoints) select _i select 1) vectorDiff (GVAR(collectedActionPoints) select _j select 1));\n\n            // If _i is inside a cone with 20º half angle with origin on _j\n            if ((_delta select 2 > 0.94) && {((GVAR(collectedActionPoints) select _i select 1) distance2d (GVAR(collectedActionPoints) select _j select 1)) < 0.1}) exitWith {\n                GVAR(collectedActionPoints) deleteAt _i;\n            };\n        };\n    };\n};\n\n// Render the non-ocluded points\n{\n    _x params [\"_z\", \"_sPos\", \"_activeActionTree\"];\n    [[], _activeActionTree, _sPos, [180,360]] call FUNC(renderMenu);\n    nil\n} count GVAR(collectedActionPoints);\n",
        "functionName": "ace_interact_menu_fnc_renderActionPoints"
      },
      {
        "fileName": "fnc_renderBaseMenu.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Render the interaction menu for a base action\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Action node <ARRAY>\n * 2: 3D position or 2D position <ARRAY> (Optional)\n *\n * Return Value:\n * Was the menu rendered <BOOL>\n *\n * Example:\n * [bob, [node], [0, 0, 0]] call ACE_interact_menu_fnc_renderBaseMenu\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(fnc_renderBaseMenu)\n\nparams [\"_object\", \"_baseActionNode\"];\n_baseActionNode params [\"_actionData\"];\n_actionData params [\"_actionName\", \"\", \"\", \"\", \"\", \"\", \"\", \"_positionCode\", \"_distance\", \"_params\"];\n\n\n// Obtain a 3D position for the action\nprivate _pos = if((count _this) > 2) then {\n    _this select 2\n} else {\n    // Setup scope variables for position code\n    private _target = _object;\n\n    // Get action position\n    _object modelToWorldVisual (call _positionCode)\n};\n\n// For non-self actions, exit if the action is too far away or ocluded\nprivate _distanceToBasePoint = 0; //This will be 0 for self/zeus/in-vehicle (used later to check sub action distance)\nif ((GVAR(openedMenuType) == 0) && {isNull (ACE_controlledUAV select 0)} && {vehicle ACE_player == ACE_player} && {isNull curatorCamera} &&\n    {\n        private _headPos = ACE_player modelToWorldVisual (ACE_player selectionPosition \"pilot\");\n        _distanceToBasePoint = _headPos distance _pos;\n\n        if (_distanceToBasePoint > _distance) exitWith {true};\n\n        if ((_distanceToBasePoint > 1.2) && {!(_params select 4)}) exitWith {\n            // If distance to action is greater than 1.2 m and check isn't disabled in params, check LOS\n            lineIntersects [AGLtoASL _headPos, AGLtoASL _pos, _object, ACE_player]\n        };\n        false\n    }) exitWith {false};\n\n// Exit if the action is behind you\nprivate _sPos = if (count _pos != 2) then {\n    worldToScreen _pos\n} else {\n    _pos\n};\nif (_sPos isEqualTo []) exitWith {false};\n\n// Exit if the action is off screen\nif ((_sPos select 0) < safeZoneXAbs || {(_sPos select 0) > safeZoneXAbs + safeZoneWAbs}) exitWith {false};\nif ((_sPos select 1) < safeZoneY    || {(_sPos select 1) > safeZoneY    + safeZoneH}) exitWith {false};\n\n\nBEGIN_COUNTER(fnc_collectActiveActionTree);\n\n// Collect active tree\nprivate _uid = format [QGVAR(ATCache_%1), _actionName];\nprivate _activeActionTree = [\n                        [_object, _baseActionNode, [], _distanceToBasePoint],\n                        DFUNC(collectActiveActionTree),\n                        _object, _uid, 1.0, \"ace_interactMenuClosed\"\n                    ] call EFUNC(common,cachedCall);\n\nEND_COUNTER(fnc_collectActiveActionTree);\n\n#ifdef DEBUG_MODE_EXTRA\ndiag_log \"Printing: _activeActionTree\";\n[0, _activeActionTree] call {\n    params [\"_level\", \"_node\"];\n    _node params [\"_actionData\", \"_children\", \"_object\"];\n    diag_log text format [\"Level %1 -> %2 on %3\", _level, _actionData select 0, _object];\n};\n#endif\n\n// Check if there's something left for rendering\nif (_activeActionTree isEqualTo []) exitWith {false};\n\nBEGIN_COUNTER(fnc_renderMenus);\n\nif (count _pos > 2) then {\n    _sPos pushBack (((AGLtoASL _pos) vectorDiff GVAR(cameraPosASL)) vectorDotProduct GVAR(cameraDir));\n} else {\n    _sPos pushBack 0;\n};\n\n// Add action point for oclusion and rendering\nGVAR(collectedActionPoints) pushBack [_sPos select 2, _sPos, _activeActionTree];\n\nEND_COUNTER(fnc_renderMenus);\n\nEND_COUNTER(fnc_renderBaseMenu);\n\ntrue\n",
        "functionName": "ace_interact_menu_fnc_renderBaseMenu"
      },
      {
        "fileName": "fnc_renderIcon.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Render a single interaction icon\n *\n * Arguments:\n * 0: Text <STRING>\n * 1: Icon <STRING>\n * 2: 2d position <ARRAY>\n * 3: Text Settings <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"text\", \"icon\", [5, 6], \"text\"] call ACE_interact_menu_fnc_renderIcon\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n#define DEFAULT_ICON QUOTE(\\z\\ace\\addons\\interaction\\ui\\dot_ca.paa)\n\nparams [\"_text\", \"_icon\", \"_sPos\", \"_textSettings\"];\n\nTRACE_2(\"Icon\",_text,_sPos);\n\nif(GVAR(iconCount) > (count GVAR(iconCtrls))-1) then {\n    private _displayNum = [[46, 12] select visibleMap, 91919] select (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]);\n    GVAR(iconCtrls) pushBack ((findDisplay _displayNum) ctrlCreate [\"RscStructuredText\", 54021 + GVAR(iconCount)]);\n    if (GVAR(useCursorMenu)) then {\n        ((finddisplay _displayNum) displayctrl (54021 + GVAR(iconCount))) ctrlAddEventHandler [\"MouseMoving\", DFUNC(handleMouseMovement)];\n        ((finddisplay _displayNum) displayctrl (54021 + GVAR(iconCount))) ctrlAddEventHandler [\"MouseButtonDown\", DFUNC(handleMouseButtonDown)];\n    };\n};\nprivate _ctrl = GVAR(iconCtrls) select GVAR(iconCount);\n\nif(_icon == \"\") then {\n    _icon = DEFAULT_ICON;\n};\n\n_text = if (GVAR(UseListMenu)) then {\n    format [\"<img image='%1' align='left'/><t %2>%3</t>\", _icon, _textSettings, _text]\n} else {\n    format [\"<img image='%1' align='center'/><br/><t %2 align='center'>%3</t>\", _icon, _textSettings, \"ace_break_line\" callExtension _text];\n};\n\n[_ctrl, GVAR(iconCount), _text] call FUNC(ctrlSetParsedTextCached);\nGVAR(iconCount) = GVAR(iconCount) + 1;\n\nprivate _pos = if (GVAR(UseListMenu)) then {\n    [(_sPos select 0) - (0.0095 * SafeZoneW), (_sPos select 1) - (0.0095 * SafeZoneW), 0.20 * SafeZoneW, 0.035 * SafeZoneW]\n} else {\n    [(_sPos select 0) - (0.0750 * SafeZoneW), (_sPos select 1) - (0.0095 * SafeZoneW), 0.15 * SafeZoneW, 0.100 * SafeZoneW]\n};\n\nif (GVAR(cursorKeepCentered) && {uiNamespace getVariable [QGVAR(cursorMenuOpened),false]}) then {\n    _pos set [0, ((_pos select 0) - (GVAR(cursorPos) select 0) + 0.5)];\n    _pos set [1, ((_pos select 1) - (GVAR(cursorPos) select 1) + 0.5)];\n};\n\n_ctrl ctrlSetPosition _pos;\n_ctrl ctrlCommit 0;\n",
        "functionName": "ace_interact_menu_fnc_renderIcon"
      },
      {
        "fileName": "fnc_renderMenu.sqf",
        "content": "/*\n * Author: NouberNou and esteldunedain\n * Render an interaction menu and it's children recursively\n *\n * Arguments:\n * 0: Parent path <ARRAY>\n * 1: Action data <ARRAY>\n * 2: 2D position <ARRAY>\n * 3: Angle range available for rendering <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[], [], [5, 2], []] call ACE_interact_menu_fnc_renderMenu\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_parentPath\", \"_action\", \"_sPos\", \"_angles\"];\n_action params [\"_actionData\", \"_activeChildren\", \"_actionObject\"];\n_angles params [\"_centerAngle\", \"_maxAngleSpan\"];\n\nprivate _menuDepth = (count GVAR(menuDepthPath));\n\n//BEGIN_COUNTER(constructing_paths);\n\n// Store path to action\nprivate _path = +_parentPath;\n_path pushBack [_actionData select 0,_actionObject];\n\n// Check if the menu is on the selected path\nprivate _menuInSelectedPath = true;\n{\n    if (_forEachIndex >= (count GVAR(menuDepthPath))) exitWith {\n        _menuInSelectedPath = false;\n    };\n    if !(_x isEqualTo (GVAR(menuDepthPath) select _forEachIndex)) exitWith {\n        _menuInSelectedPath = false;\n    };\n} forEach _path;\n\n//END_COUNTER(constructing_paths);\n//BEGIN_COUNTER(constructing_colors);\n\n//Get text color settings string\nprivate _textSettings = GVAR(colorSelectedSettings);\nif(!_menuInSelectedPath) then {\n    _textSettings = (GVAR(textSettingsMatrix) select (count _path)) select _menuDepth;\n};\n\n//END_COUNTER(constructing_colors);\n//BEGIN_COUNTER(fnc_renderIcons);\n\n[_actionData select 1, _actionData select 2, _sPos, _textSettings] call FUNC(renderIcon);\n\n//END_COUNTER(fnc_renderIcons);\n\n//BEGIN_COUNTER(currentOptions);\n\n// Add the action to current options\nGVAR(currentOptions) pushBack [_this, _sPos, _path];\n\n//END_COUNTER(currentOptions);\n\n// Exit without rendering children if it isn't\nif !(_menuInSelectedPath) exitWith {true};\n\n//BEGIN_COUNTER(children);\n\nprivate _numChildren = count _activeChildren;\nprivate _angleSpan = _maxAngleSpan min (55 * ((_numChildren) - 1));\nif (_angleSpan >= 305) then {\n    _angleSpan = 360;\n};\nprivate _angleInterval = 55;\nif (_angleSpan < 360) then {\n    if (_numChildren > 1) then {\n        _angleInterval = _angleSpan / (_numChildren - 1);\n    };\n} else {\n    _angleInterval = _angleSpan / (_numChildren);\n};\nif (_numChildren == 1) then {\n    _angleInterval = 55;\n};\n\n// Scale menu based on the amount of children\nprivate _scaleX = 1;\nprivate _scaleY = 1;\n\nif (GVAR(UseListMenu)) then {\n    private _textSize = [0.75, 0.875, 1, 1.2, 1.4] select GVAR(textSize);\n    _scaleX = _textSize * 0.17 * 1.1;\n    _scaleY = 0.17 * 0.30 * 4/3;\n} else {\n    private _textSize = if (GVAR(textSize) > 2) then {1.3} else {1};\n    _scaleX = _textSize * 0.17 * (((0.8 * (0.46 / sin (0.5 * _angleInterval))) min 1.1) max 0.5);\n    _scaleY = _textSize * 0.17 * 4/3 * (((0.8 * (0.46 / sin (0.5 * _angleInterval))) min 1.1) max 0.5);\n};\n\n// Animate menu scale\nif (_menuInSelectedPath && {_menuDepth == count _path}) then {\n    _scaleX = _scaleX * (0.3 + 0.7 * (((diag_tickTime - GVAR(expandedTime)) * linearConversion [0, 2, GVAR(menuAnimationSpeed), 8, 16]) min 1));\n    _scaleY = _scaleY * (0.3 + 0.7 * (((diag_tickTime - GVAR(expandedTime)) * linearConversion [0, 2, GVAR(menuAnimationSpeed), 8, 16]) min 1));\n};\n\nprivate _target = _actionObject;\nprivate _player = ACE_player;\n\n//END_COUNTER(children);\nprivate _angle = _centerAngle - _angleSpan / 2;\n{\n    private _newPos =  if (GVAR(UseListMenu)) then {\n        [(_sPos select 0) + _scaleX,\n         (_sPos select 1) + _scaleY * (_forEachIndex - _numChildren/2 + 0.5)];\n    } else {\n        [(_sPos select 0) - _scaleX * (cos _angle),\n         (_sPos select 1) + _scaleY * (sin _angle)];\n    };\n\n    [_path, _x, _newPos, [_angle, 150]] call FUNC(renderMenu);\n\n    _angle = _angle + _angleInterval;\n} forEach _activeChildren;\n\ntrue\n",
        "functionName": "ace_interact_menu_fnc_renderMenu"
      },
      {
        "fileName": "fnc_renderSelector.sqf",
        "content": "/*\n * Author: esteldunedain\n * Render a single interaction icon\n *\n * Arguments:\n * 0: 2d position <ARRAY>\n * 1: Icon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[2, 5], \"icon\"] call ACE_interact_menu_fnc_renderSelector\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_sPos\", \"_icon\"];\n\nif(GVAR(iconCount) > (count GVAR(iconCtrls))-1) then {\n    private _displayNum = [[46, 12] select visibleMap,91919] select (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]);\n    GVAR(iconCtrls) pushBack ((findDisplay _displayNum) ctrlCreate [\"RscStructuredText\", 54021+GVAR(iconCount)]);\n    if (GVAR(useCursorMenu)) then {\n        ((finddisplay _displayNum) displayctrl (54021+GVAR(iconCount))) ctrlAddEventHandler [\"MouseMoving\", DFUNC(handleMouseMovement)];\n        ((finddisplay _displayNum) displayctrl (54021+GVAR(iconCount))) ctrlAddEventHandler [\"MouseButtonDown\", DFUNC(handleMouseButtonDown)];\n    };\n};\n\nprivate _ctrl = GVAR(iconCtrls) select GVAR(iconCount);\n\nprivate _pos = if (GVAR(UseListMenu)) then {\n    [_ctrl, GVAR(iconCount), format [\"<img image='%1' color='#FF0000' size='1.6'/>\", _icon]] call FUNC(ctrlSetParsedTextCached);\n    [(_sPos select 0)-(0.014*SafeZoneW), (_sPos select 1)-(0.014*SafeZoneW), 0.05*SafeZoneW, 0.035*SafeZoneW]\n} else {\n    [_ctrl, GVAR(iconCount), format [\"<img image='%1' color='#FF0000' size='1.6' align='center'/>\", _icon]] call FUNC(ctrlSetParsedTextCached);\n    [(_sPos select 0)-(0.050*SafeZoneW), (_sPos select 1)-(0.014*SafeZoneW), 0.1*SafeZoneW, 0.035*SafeZoneW]\n};\n\nGVAR(iconCount) = GVAR(iconCount) + 1;\n\nif (GVAR(cursorKeepCentered) && {uiNamespace getVariable [QGVAR(cursorMenuOpened),false]}) then {\n    _pos set [0, ((_pos select 0) - (GVAR(cursorPos) select 0) + 0.5)];\n    _pos set [1, ((_pos select 1) - (GVAR(cursorPos) select 1) + 0.5)];\n};\n\n_ctrl ctrlSetPosition _pos;\n_ctrl ctrlCommit 0;\n",
        "functionName": "ace_interact_menu_fnc_renderSelector"
      },
      {
        "fileName": "fnc_setupTextColors.sqf",
        "content": "/*\n * Author: PabstMirror\n * Builds color strings needed for displaying interaction text\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_interact_menu_fnc_setupTextColor\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//Mixes 2 colors (number arrays) and makes a color string \"#AARRGGBB\" for structured text\nprivate _mixColor = {\n    params [\"_color1\", \"_color2\", \"_ratio\"];\n\n    private _return = \"\";\n    for \"_index\" from 0 to 3 do {\n        private _mix = linearConversion [0, 1, _ratio, (_color1 select _index), (_color2 select _index)];\n        if (_index != 3) then {\n            _return = _return + ([255 * _mix] call EFUNC(common,toHex));\n        } else {\n            _return = \"#\" + ([255 * _mix] call EFUNC(common,toHex)) + _return;\n        };\n    };\n    _return\n};\n\nprivate _colorTextMin = missionNamespace getVariable [QGVAR(colorTextMin), [1,1,1,0.25]];\nprivate _colorTextMax = missionNamespace getVariable [QGVAR(colorTextMax), [1,1,1,1]];\nprivate _colorShadowMin = missionNamespace getVariable [QGVAR(colorShadowMin), [0,0,0,0.25]];\nprivate _colorShadowMax = missionNamespace getVariable [QGVAR(colorShadowMax), [0,0,0,1]];\nprivate _shadowSetting = missionNamespace getVariable [QGVAR(shadowSetting), 2];\nprivate _textSize = missionNamespace getVariable [QGVAR(textSize), 2];\n\nTRACE_6(\"Building text matrix\",_colorTextMin,_colorTextMax,_colorShadowMin,_colorShadowMax,_shadowSetting,_textSize);\n\nprivate _textColor = [_colorTextMin, _colorTextMax, 1] call _mixColor;\nprivate _shadowColor = [_colorShadowMin, _colorShadowMax, 1] call _mixColor;\n_textSize = switch (_textSize) do {\n    case (0): {0.4};\n    case (1): {0.6};\n    case (2): {0.8};\n    case (3): {1};\n    case (4): {1.2};\n};\n\nGVAR(colorSelectedSettings) = format [\"color='%1' size='%2' shadow='%3' shadowColor='%4' shadowOffset='0.06'\", _textColor, _textSize, _shadowSetting, _shadowColor];\n\nGVAR(textSettingsMatrix) = [];\nfor \"_pathCount\" from 0 to 15 do {\n    private _row = [];\n    for \"_menuDepth\" from 0 to 15 do {\n        if (_menuDepth > 0) then {\n            _textColor = [_colorTextMin, _colorTextMax, (((_pathCount - 1) / _menuDepth) max 0.25)] call _mixColor;\n            _shadowColor = [_colorShadowMin, _colorShadowMax, (((_pathCount - 1) / _menuDepth) max 0.25)] call _mixColor;\n        } else {\n            _textColor = [_colorTextMin, _colorTextMax, 0] call _mixColor;\n            _shadowColor = [_colorShadowMin, _colorShadowMax, 0] call _mixColor;\n        };\n        _row pushBack format [\"color='%1' size='%2' shadow='%3' shadowColor='%4' shadowOffset='0.06'\", _textColor, _textSize, _shadowSetting, _shadowColor];\n    };\n    GVAR(textSettingsMatrix) pushBack _row;\n};\n",
        "functionName": "ace_interact_menu_fnc_setupTextColors"
      },
      {
        "fileName": "fnc_splitPath.sqf",
        "content": "/*\n * Author: esteldunedain\n * Take full path and split it between parent path and action name\n *\n * Arguments:\n * Full path of the action to remove <ARRAY>\n *\n * Return Value:\n * 0: Parent path <ARRAY>\n * 1: Action name <STRING>\n *\n * Example:\n * [[path]] call ACE_interact_menu_fnc_splitPath\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _parentPath = [];\nfor [{private _i = 0},{_i < (count _this) - 1},{_i = _i + 1}] do {\n    _parentPath pushBack (_this select _i);\n};\nprivate _actionName = if (count _this > 0) then {\n    _this select ((count _this) - 1);\n} else {\n    \"\"\n};\n\n[_parentPath, _actionName]\n",
        "functionName": "ace_interact_menu_fnc_splitPath"
      },
      {
        "fileName": "fnc_userActions_addHouseActions.sqf",
        "content": "/*\n * Author: PabstMirror\n * Scans for nearby \"Static\" objects (buildings) and adds the UserActions to them.\n * Called when interact_menu starts rendering (from \"interactMenuOpened\" event)\n *\n * Arguments:\n * 0: Interact Menu Type (0 - world, 1 - self) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [0] call ace_interact_menu_fnc_userActions_addHouseActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_interactionType\"];\n\n//Ignore if not enabled:\nif (!GVAR(addBuildingActions)) exitWith {};\n//Ignore self-interaction menu:\nif (_interactionType != 0) exitWith {};\n//Ignore when mounted:\nif ((vehicle ACE_player) != ACE_player) exitWith {};\n\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_setPosition\", \"_addedHelpers\", \"_housesScaned\", \"_housesToScanForActions\"];\n\n    if (!EGVAR(interact_menu,keyDown)) then {\n        {deleteVehicle _x;} forEach _addedHelpers;\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    } else {\n        // Prevent Rare Error when ending mission with interact key down:\n        if (isNull ace_player) exitWith {};\n\n        //Make the common case fast (cursorTarget is looking at a door):\n        if ((!isNull cursorTarget) && {cursorTarget isKindOf \"Static\"} && {!(cursorTarget in _housesScaned)}) then {\n            if (((count (configFile >> \"CfgVehicles\" >> (typeOf cursorTarget) >> \"UserActions\")) > 0) || {(count (getArray (configFile >> \"CfgVehicles\" >> (typeOf cursorTarget) >> \"ladders\"))) > 0}) then {\n                _housesToScanForActions = [cursorTarget];\n            } else {\n                _housesScaned pushBack cursorTarget;\n            };\n        };\n\n        //For performance, we only do 1 thing per frame,\n        //-either do a wide scan and search for houses with actions\n        //-or scan one house at a time and add the actions for that house\n\n        if (_housesToScanForActions isEqualTo []) then {\n            //If player moved >2 meters from last pos, then rescan\n            if (((getPosASL ace_player) distance _setPosition) < 2) exitWith {};\n\n            private _nearBuidlings = nearestObjects [ace_player, [\"Static\"], 30];\n            {\n                private _typeOfHouse = typeOf _x;\n                if (((count (configFile >> \"CfgVehicles\" >> _typeOfHouse >> \"UserActions\")) == 0) && {(count (getArray (configFile >> \"CfgVehicles\" >> _typeOfHouse >> \"ladders\"))) == 0}) then {\n                    _housesScaned pushBack _x;\n                } else {\n                    _housesToScanForActions pushBack _x;\n                };\n                nil\n            } count (_nearBuidlings - _housesScaned);\n\n            _args set [0, (getPosASL ace_player)];\n        } else {\n            _houseBeingScaned = _housesToScanForActions deleteAt 0;\n            private _typeOfHouse = typeOf _houseBeingScaned;\n            //Skip this house for now if we are outside of it's radius\n            //(we have to scan far out for the big houses, but we don't want to waste time adding actions on every little shack)\n            if ((_houseBeingScaned != cursorTarget) && {((ACE_player distance _houseBeingScaned) - ((sizeOf _typeOfHouse) / 2)) > 4}) exitWith {};\n\n            _housesScaned pushBack _houseBeingScaned;\n\n            private _actionSet = [_typeOfHouse] call FUNC(userActions_getHouseActions);\n            _actionSet params [\"_memPoints\", \"_memPointsActions\"];\n\n            // systemChat format [\"Add Actions for [%1] (count %2) @ %3\", _typeOfHouse, (count _memPoints), diag_tickTime];\n            {\n                private _helperPos = AGLtoASL (_houseBeingScaned modelToWorld (_houseBeingScaned selectionPosition _x));\n                private _helperObject = \"ACE_LogicDummy\" createVehicleLocal [0,0,0];\n                _addedHelpers pushBack _helperObject;\n                _helperObject setVariable [QGVAR(building), _houseBeingScaned];\n                _helperObject setPosASL _helperPos;\n                TRACE_3(\"Making New Helper\",_helperObject,_x,_houseBeingScaned);\n\n                {\n                    [_helperObject, 0, [], _x] call EFUNC(interact_menu,addActionToObject);\n                    nil\n                } count (_memPointsActions select _forEachIndex);\n\n            } forEach _memPoints;\n        };\n    };\n}, 0, [((getPosASL ace_player) vectorAdd [-100,0,0]), [], [], []]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_interact_menu_fnc_userActions_addHouseActions"
      },
      {
        "fileName": "fnc_userActions_getHouseActions.sqf",
        "content": "/*\n * Author: PabstMirror\n * Scans the buidling type for UserActions and Ladder mount points.\n *\n * Arguments:\n * 0: Building Classname <STRING>\n *\n * Return Value:\n * [[Array of MemPoints], [Array Of Actions]] <ARRAY>\n *\n * Example:\n * [\"Land_i_House_Big_01_V1_F\"] call ace_interact_menu_fnc_userActions_getHouseActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_typeOfBuilding\"];\n\nprivate _searchIndex = GVAR(cachedBuildingTypes) find _typeOfBuilding;\nif (_searchIndex != -1) exitWith {GVAR(cachedBuildingActionPairs) select _searchIndex};\n\nprivate _memPoints = [];\nprivate _memPointsActions = [];\n\n//Get the offset for a memory point:\nprivate _fnc_getMemPointOffset = {\n    params [\"_memoryPoint\"];\n    _memPointIndex = _memPoints find _memoryPoint;\n    _actionOffset = [0,0,0];\n    if (_memPointIndex == -1) then {\n        _memPoints pushBack _memoryPoint;\n        _memPointsActions pushBack [];\n    } else {\n        _actionOffset set [2, 0.0254 * (count (_memPointsActions select _memPointIndex))];\n    };\n    _actionOffset\n};\n\n// Add UserActions for the building:\nprivate _fnc_userAction_Statement = {\n    params [\"_target\", \"_player\", \"_variable\"];\n    _variable params [\"_actionStatement\", \"_actionCondition\"];\n    this = _target getVariable [QGVAR(building), objNull];\n    call _actionStatement;\n};\nprivate _fnc_userAction_Condition = {\n    params [\"_target\", \"_player\", \"_variable\"];\n    _variable params [\"_actionStatement\", \"_actionCondition\"];\n    this = _target getVariable [QGVAR(building), objNull];\n    if (isNull this) exitWith {false};\n    call _actionCondition;\n};\n\nprivate _configPath = configFile >> \"CfgVehicles\" >> _typeOfBuilding >> \"UserActions\";\nfor \"_index\" from 0 to ((count _configPath) - 1) do {\n    private _actionPath = _configPath select _index;\n\n    private _actionDisplayName = getText (_actionPath >> \"displayName\");\n    private _actionDisplayNameDefault = getText (_actionPath >> \"displayNameDefault\");\n    private _actionPosition = getText (_actionPath >> \"position\");\n    private _actionCondition = getText (_actionPath >> \"condition\");\n    private _actionStatement = getText (_actionPath >> \"statement\");\n    private _actionMaxDistance = getNumber (_actionPath >> \"radius\");\n\n    if (_actionDisplayName == \"\") then {_actionDisplayName = (configName _x);};\n    if (_actionPosition == \"\") then {ERROR(\"Bad Position\");};\n    if (_actionCondition == \"\") then {_actionCondition = \"true\";};\n    if (_actionStatement == \"\") then {ERROR(\"No Statement\");};\n\n    _actionStatement = compile _actionStatement;\n    _actionCondition = compile _actionCondition;\n    _actionMaxDistance = _actionMaxDistance + 0.1; //increase range slightly\n\n    //extension ~4x as fast:\n    private _iconImage =  \"ace_parse_imagepath\" callExtension _actionDisplayNameDefault;\n\n    private _actionOffset = [_actionPosition] call _fnc_getMemPointOffset;\n    private _memPointIndex = _memPoints find _actionPosition;\n\n    _action = [(configName _actionPath), _actionDisplayName, _iconImage, _fnc_userAction_Statement, _fnc_userAction_Condition, {}, [_actionStatement, _actionCondition], _actionOffset, _actionMaxDistance, [false,false,false,false,true]] call EFUNC(interact_menu,createAction);\n    (_memPointsActions select _memPointIndex) pushBack _action;\n};\n\n// Add Ladder Actions for the building:\nprivate _fnc_ladder_ladderUp = {\n    params [\"_target\", \"_player\", \"_variable\"];\n    _variable params [\"_ladderIndex\"];\n    private _building = _target getVariable [QGVAR(building), objNull];\n    TRACE_3(\"Ladder Action - UP\",_player,_building,_ladderIndex);\n    _player action [\"LadderUp\", _building, _ladderIndex, 0];\n};\nprivate _fnc_ladder_ladderDown = {\n    params [\"_target\", \"_player\", \"_variable\"];\n    _variable params [\"_ladderIndex\"];\n    private _building = _target getVariable [QGVAR(building), objNull];\n    TRACE_3(\"Ladder Action - Down\",_player,_building,_ladderIndex);\n    _player action [\"LadderDown\", _building, _ladderIndex, 1];\n};\n\nprivate _fnc_ladder_conditional = {\n    params [\"_target\", \"_player\"];\n    //(Check distance < 2) and (Don't show actions if on a ladder)\n    ((_target distance _player) < 2) && {((getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> (animationState _player) >> \"onLadder\")) == 0)}\n};\n\nprivate _ladders = getArray (configFile >> \"CfgVehicles\" >> _typeOfBuilding >> \"ladders\");\n{\n    _x params [\"_ladderBottomMemPoint\", \"_ladderTopMemPoint\"];\n\n    private _actionMaxDistance = 3; //interact_menu will check head -> target's offset; leave this high and do a precice distance check in condition\n\n    private _actionDisplayName = localize \"str_action_ladderup\";\n    private _iconImage = \"\\A3\\ui_f\\data\\igui\\cfg\\actions\\ladderup_ca.paa\";\n    //Ladder Up Action:\n    private _actionOffset = [_ladderBottomMemPoint] call _fnc_getMemPointOffset;\n    _actionOffset = _actionOffset vectorAdd [0,0,1];\n    private _memPointIndex = _memPoints find _ladderBottomMemPoint;\n    private _action = [format [\"LadderUp_%1\", _forEachIndex], _actionDisplayName, _iconImage, _fnc_ladder_ladderUp, _fnc_ladder_conditional, {}, [_forEachIndex], _actionOffset, _actionMaxDistance, [false,false,false,false,true]] call EFUNC(interact_menu,createAction);\n    (_memPointsActions select _memPointIndex) pushBack _action;\n\n    _actionDisplayName = localize \"str_action_ladderdown\";\n    _iconImage = \"\\A3\\ui_f\\data\\igui\\cfg\\actions\\ladderdown_ca.paa\";\n    //Ladder Down Action:\n    _actionOffset = [_ladderTopMemPoint] call _fnc_getMemPointOffset;\n    _actionOffset = _actionOffset vectorAdd [0,0,0.25];\n    _memPointIndex = _memPoints find _ladderTopMemPoint;\n    _action = [format [\"LadderDown_%1\", _forEachIndex], _actionDisplayName, _iconImage, _fnc_ladder_ladderDown, _fnc_ladder_conditional, {}, [_forEachIndex], _actionOffset, _actionMaxDistance, [false,false,false,false,true]] call EFUNC(interact_menu,createAction);\n    (_memPointsActions select _memPointIndex) pushBack _action;\n\n} forEach _ladders;\n\nGVAR(cachedBuildingTypes) pushBack _typeOfBuilding;\nGVAR(cachedBuildingActionPairs) pushBack [_memPoints, _memPointsActions];\n\n\n[_memPoints, _memPointsActions]\n",
        "functionName": "ace_interact_menu_fnc_userActions_getHouseActions"
      }
    ]
  },
  {
    "component": "inventory",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n// cache config\n// items in the inventory display can only be distinguished by their lb names and pictures\n// this can cause collisions (mainly weapons with attachments),\n// but if the item has the same name and picture it at least shouldn't change the filter anyway\n// luckily we don't need private items, so dummy and parent classes are out of the picture\n\nGVAR(ItemKeyNamespace) = [] call CBA_fnc_createNamespace;\n\nprivate _fnc_addToCache = {\n    private _displayName = getText (_this >> \"displayName\");\n    private _picture = getText (_this >> \"picture\");\n\n    // list box seems to delete the leading backslash\n    if (_picture select [0,1] == \"\\\") then {\n        _picture = _picture select [1];\n    };\n\n    GVAR(ItemKeyNamespace) setVariable [format [\"%1:%2\", _displayName, _picture], _this];\n};\n\nprivate _allItems = [];\n\n_allItems append (\"getNumber (_x >> 'scope') > 0\" configClasses (configFile >> \"CfgWeapons\"));\n_allItems append (\"getNumber (_x >> 'scope') > 0\" configClasses (configFile >> \"CfgGlasses\"));\n_allItems append (\"getNumber (_x >> 'scope') == 2\" configClasses (configFile >> \"CfgMagazines\"));\n_allItems append (\"getNumber (_x >> 'scope') > 0 && {getNumber (_x >> 'isBackpack') == 1}\" configClasses (configFile >> \"CfgVehicles\"));\n\n{_x call _fnc_addToCache; false} count _allItems;\n\nGVAR(customFilters) = [];\nGVAR(selectedFilterIndex) = -1;\n\n// add custom filters\n\n// generate list of grenades\nGVAR(Grenades_ItemList) = [];\n\n{\n    GVAR(Grenades_ItemList) append getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> _x >> \"magazines\");\n    false\n} count getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> \"muzzles\");\n\n// make list case insensitive\nGVAR(Grenades_ItemList) = GVAR(Grenades_ItemList) apply {toLower _x};\n\n// filter duplicates\nGVAR(Grenades_ItemList) = GVAR(Grenades_ItemList) arrayIntersect GVAR(Grenades_ItemList);\n\n[localize LSTRING(Grenades), QFUNC(filterGrenades)] call FUNC(addCustomFilter);\n\n[localize LSTRING(Backpacks), QFUNC(filterBackpacks)] call FUNC(addCustomFilter);\n[localize LSTRING(Uniforms), QFUNC(filterUniforms)] call FUNC(addCustomFilter);\n[localize LSTRING(Vests), QFUNC(filterVests)] call FUNC(addCustomFilter);\n[localize LSTRING(Headgear), QFUNC(filterHeadgear)] call FUNC(addCustomFilter);\n\n// generate list of medical items\nGVAR(Medical_ItemList) = [];\n\n{\n    GVAR(Medical_ItemList) append getArray (_x >> \"items\");\n    false\n} count (\n    (\"true\" configClasses (configFile >> QEGVAR(Medical,Actions) >> \"Basic\")) +\n    (\"true\" configClasses (configFile >> QEGVAR(Medical,Actions) >> \"Advanced\"))\n);\n\n// remove all numbers from list\nGVAR(Medical_ItemList) = GVAR(Medical_ItemList) select {_x isEqualType \"\"};\n\n// make list case insensitive\nGVAR(Medical_ItemList) = GVAR(Medical_ItemList) apply {toLower _x};\n\n// filter duplicates\nGVAR(Medical_ItemList) = GVAR(Medical_ItemList) arrayIntersect GVAR(Medical_ItemList);\n\n[localize LSTRING(Medical), QFUNC(filterMedical)] call FUNC(addCustomFilter);\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addCustomFilter.sqf",
        "content": "/*\n * Author: commy2\n * Adds a custom filter list to the inventory display.\n * Functions are here as strings, because list boxes can only store numbers and strings.\n *\n * Arguments:\n * 0: Localized filter display name <STRING>\n * 1: Filter function name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"displayname\", \"filter\"] call ACE_inventory_fnc_addCustomFilter\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_filterName\", \"ERROR: No Name\", [\"\"]], [\"_fncName\", \"\", [\"\"]]];\n\nGVAR(customFilters) pushBack [_filterName, _fncName];\n",
        "functionName": "ace_inventory_fnc_addCustomFilter"
      },
      {
        "fileName": "fnc_currentItemListBox.sqf",
        "content": "/*\n * Author: commy2\n * Returns the current item list box of given inventory display.\n * These can be Ground, Soldier, Uniform, Backpack or Vest.\n * Can also be Weapon since 1.52, but that apparently uses one of the above.\n *\n * Arguments:\n * 0: Inventory display <DISPLAY>\n *\n * Return Value:\n * Currently selected item list box <CONTROL>\n *\n * Example:\n * [DISPLAY] call ACE_inventory_fnc_currentItemListBox\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\nscopeName \"main\";\n\n{\n    private _control = _display displayCtrl _x;\n\n    if (ctrlShown _control) then {\n        _control breakOut \"main\";\n    };\n    false\n} count [IDC_ITEMLIST_GROUND, IDC_ITEMLIST_SOLDIER, IDC_ITEMLIST_UNIFORM, IDC_ITEMLIST_VEST, IDC_ITEMLIST_BACKPACK];\n\n-1\n",
        "functionName": "ace_inventory_fnc_currentItemListBox"
      },
      {
        "fileName": "fnc_filterBackpacks.sqf",
        "content": "/*\n * Author: commy2\n * Filter condition for the Backpacks filter list\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterBackpacks\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\ngetNumber (_config >> \"isBackpack\") == 1\n",
        "functionName": "ace_inventory_fnc_filterBackpacks"
      },
      {
        "fileName": "fnc_filterGrenades.sqf",
        "content": "/*\n * Author: commy2\n * Filter condition for the Grenades filter list\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterGrenades\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\ntoLower configName _config in GVAR(Grenades_ItemList)\n",
        "functionName": "ace_inventory_fnc_filterGrenades"
      },
      {
        "fileName": "fnc_filterHeadgear.sqf",
        "content": "/*\n * Author: commy2\n * Filter condition for the Headgear filter list\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterHeadgear\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\ngetNumber (_config >> \"ItemInfo\" >> \"type\") in [TYPE_HEADGEAR, TYPE_HMD] || {isClass (configFile >> \"CfgGlasses\" >> configName _config)}\n",
        "functionName": "ace_inventory_fnc_filterHeadgear"
      },
      {
        "fileName": "fnc_filterItems.sqf",
        "content": "/*\n * Author: commy2\n * Remove uniforms, vests and backpacks from Items filter.\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterItems\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\n!(getNumber (_config >> \"ItemInfo\" >> \"type\") in [TYPE_UNIFORM, TYPE_VESTS, TYPE_HEADGEAR]) && {!(_this call FUNC(filterBackpacks))}\n",
        "functionName": "ace_inventory_fnc_filterItems"
      },
      {
        "fileName": "fnc_filterMagazines.sqf",
        "content": "/*\n * Author: commy2\n * Remove backpacks and grenades from Magazines filter.\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterMagazines\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n!(_this call FUNC(filterBackpacks)) && {!(_this call FUNC(filterGrenades))}\n",
        "functionName": "ace_inventory_fnc_filterMagazines"
      },
      {
        "fileName": "fnc_filterMedical.sqf",
        "content": "/*\n * Author: commy2\n * Filter condition for the Medical filter list\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterMedical\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\ntoLower configName _config in GVAR(Medical_ItemList)\n",
        "functionName": "ace_inventory_fnc_filterMedical"
      },
      {
        "fileName": "fnc_filterUniforms.sqf",
        "content": "/*\n * Author: commy2\n * Filter condition for the Uniforms filter list\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterUniforms\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\ngetNumber (_config >> \"ItemInfo\" >> \"type\") == TYPE_UNIFORM\n",
        "functionName": "ace_inventory_fnc_filterUniforms"
      },
      {
        "fileName": "fnc_filterVests.sqf",
        "content": "/*\n * Author: commy2\n * Filter condition for the Vests filter list\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterVests\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_config\"];\n\ngetNumber (_config >> \"ItemInfo\" >> \"type\") == TYPE_VEST\n",
        "functionName": "ace_inventory_fnc_filterVests"
      },
      {
        "fileName": "fnc_filterWeapons.sqf",
        "content": "/*\n * Author: commy2\n * Remove backpacks from Weapons filter.\n *\n * Arguments:\n * 0: Item config entry <CONFIG>\n *\n * Return Value:\n * Item should appear in this list? <BOOL>\n *\n * Example:\n * [CONFIG] call ACE_inventory_fnc_filterWeapons\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n!(_this call FUNC(filterBackpacks))\n",
        "functionName": "ace_inventory_fnc_filterWeapons"
      },
      {
        "fileName": "fnc_forceItemListUpdate.sqf",
        "content": "/*\n * Author: commy2\n * Updates item list and removes every entry that does not fit in the currently selected filter list.\n *\n * Arguments:\n * 0: Inventory display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [DISPLAY] call ACE_inventory_fnc_forceitemListUpdate\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nparams [\"_display\"];\n\nprivate _index = GVAR(selectedFilterIndex);\nprivate _itemList = _display call FUNC(currentItemListBox);\nprivate _filterFunction = missionNamespace getVariable ((_display displayCtrl IDC_FILTERLISTS) lbData _index);\n\nif (_filterFunction isEqualType {}) then {\n    private _i = 0;\n\n    while {_i < lbSize _itemList} do {\n        private _config = GVAR(ItemKeyNamespace) getVariable format [\"%1:%2\", _itemList lbText _i, _itemList lbPicture _i];\n\n        if (!isNil \"_config\" && {!(_config call _filterFunction)}) then {\n            _itemList lbDelete _i;\n\n            // in case the filter function returns nil. Otherwise could lock up the game.\n            _i = _i - 1;\n        };\n\n        _i = _i + 1;\n    };\n};\n",
        "functionName": "ace_inventory_fnc_forceItemListUpdate"
      },
      {
        "fileName": "fnc_inventoryDisplayLoad.sqf",
        "content": "/*\n * Author: commy2\n * Executed every time an inventory display is opened.\n *\n * Arguments:\n * 0: Inventory display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [DISPLAY] call ACE_inventory_fnc_inventoryDisplayLoad\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nparams [\"_display\"];\n\nprivate _filter = _display displayCtrl IDC_FILTERLISTS;\n\n// engine defined behaviour is the following:\n// lb value, data and text don't matter, only the index.\n// the first three indecies are hard coded: 0 - weapons , 1 - magazines, 2 - items\n// all of them show backpacks, because BI\n// all other indecies show everything, so all we have to do is delete stuff we dont like\n_filter ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChanged)}];\n\n// have to add these a frame later, because this event happens before the engine adds the default filters\n[{\n    disableSerialization;\n    params [\"_filter\"];\n\n    // remove \"All\", so we can push it to the back later.\n    // to keep localization we can keep the lbText (displayed name).\n    private _index = lbSize _filter - 1;\n    private _nameAll = _filter lbText _index;\n    _filter lbDelete _index;\n\n    // add additional filter functions to the default filters. These remove backpacks etc.\n    _filter lbSetData [0, QFUNC(filterWeapons)];\n    _filter lbSetData [1, QFUNC(filterMagazines)];\n    _filter lbSetData [2, QFUNC(filterItems)];\n\n    // add our custom filters\n    {\n        _x params [\"_name\", \"_fncName\"];\n\n        _index = _filter lbAdd _name;\n        _filter lbSetData [_index, _fncName];\n\n        false\n    } count GVAR(customFilters);\n\n    // readd \"All\" filter to last position and select it\n    _index = _filter lbAdd _nameAll;\n    _filter lbSetCurSel _index;\n}, [_filter]] call CBA_fnc_execNextFrame;\n\n// monitor changes that can happen and force our update\nprivate _dummyControl = _display ctrlCreate [\"RscMapControl\", -1];\n\n_dummyControl ctrlSetPosition [0,0,0,0];\n_dummyControl ctrlCommit 0;\n\n_dummyControl ctrlAddEventHandler [\"Draw\", {\n    disableSerialization;\n    params [\"_dummyControl\"];\n\n    private _display = ctrlParent _dummyControl;\n\n    private _itemList = _display call FUNC(currentItemListBox);\n\n    // monitoring is done by setting a lb value. These are unused here and are reset every time the list box updates.\n    if (_itemList lbValue 0 != DUMMY_VALUE) then {\n        _display call FUNC(forceItemListUpdate);\n        _itemList lbSetValue [0, DUMMY_VALUE];\n    };\n}];\n",
        "functionName": "ace_inventory_fnc_inventoryDisplayLoad"
      },
      {
        "fileName": "fnc_onLBSelChanged.sqf",
        "content": "/*\n * Author: commy2\n * Executed when the filter list box is changed.\n * Sets new filter list index.\n *\n * Arguments:\n * 0: Filter list box <CONTROL>\n * 1: Filter list index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL, 5] call ACE_inventory_fnc_onLBSelChanged\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nparams [\"_filter\", \"_index\"];\n\nGVAR(selectedFilterIndex) = _index;\n\n[{\n    disableSerialization;\n    params [\"_display\"];\n\n    [_display] call FUNC(forceItemListUpdate);\n}, [ctrlParent _filter]] call CBA_fnc_execNextFrame;\n",
        "functionName": "ace_inventory_fnc_onLBSelChanged"
      }
    ]
  },
  {
    "component": "javelin",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "// by commy2\n\n[\"ACE3 Weapons\", QGVAR(lockTarget), localize LSTRING(LockTarget),\n{\n    if (GETGVAR(isLockKeyDown,false)) exitWith {false};\n\n    GVAR(isLockKeyDown) = true;\n    TRACE_1(\"lock key down\",GVAR(isLockKeyDown));\n\n    // Return false so it doesn't block the rest weapon action\n    false\n},\n{\n    // prevent holding down\n    GVAR(isLockKeyDown) = false;\n    TRACE_1(\"lock key up\",GVAR(isLockKeyDown));\n\n    false\n},\n[15, [false, false, false]], false] call CBA_fnc_addKeybind;  //Tab Key\n"
      },
      {
        "fileName": "XEH_clientInit.sqf",
        "content": "// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n#include \"initKeybinds.sqf\"\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(isLockKeyDown) = false;\nGVAR(pfehID) = -1;\n\nDFUNC(disableFire) = {\n    params [\"_firedEH\"];\n\n    if (_firedEH < 0 && {difficulty > 0}) then {\n        _firedEH = [ACE_player, \"DefaultAction\", {true}, {\n            private _canFire = (_this select 1) getVariable [\"ace_missileguidance_target\", nil];\n            if (!isNil \"_canFire\") exitWith { false };\n            true\n        }] call EFUNC(common,addActionEventHandler);\n        TRACE_1(\"Locking Fire Button\",_firedEH);\n\n    };\n    _firedEH\n};\nDFUNC(enableFire) = {\n    params [\"_firedEH\"];\n\n    if (_firedEH >= 0 && {difficulty > 0}) then {\n        TRACE_1(\"Unlocking Fire Button\",_firedEH);\n        [ACE_player, \"DefaultAction\", _firedEH] call EFUNC(common,removeActionEventHandler);\n    };\n    -1\n};\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_getTarget.sqf",
        "content": "/*\n * Author: PabstMirror\n * Find a target within the optic range\n *\n * Arguments:\n * 0: Last Target (seeds the scan) <OBJECT>\n * 1: Max Range (meters) <NUMBER>\n *\n * Return Value:\n * Target <OBJECT>\n *\n * Example:\n * [bob, 5] call ace_javelin_fnc_getTarget\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_lastTarget\", \"_maxRange\"];\n\nscopeName \"main\";\n\nprivate _viewASL = AGLtoASL positionCameraToWorld [0,0,0];\nprivate _viewDir = _viewASL vectorFromTo (AGLtoASL positionCameraToWorld [0,0,1]);\n\n// Attempt to lock onto current target if it is still valid\nif (!isNull _lastTarget) then {\n    private _aimASL = aimPos _lastTarget;\n\n    if ((_viewASL vectorDistance _aimASL) > _maxRange) exitWith {};\n    if ((acos ((_viewASL vectorFromTo _aimASL) vectorDotProduct _viewDir)) > 0.6) exitWith {};\n\n    private _relAngle = (_lastTarget getRelDir _viewASL);\n\n    for \"_xOffset\" from -2.5 to 2.5 step 0.5 do {\n        for \"_yOffset\" from -2 to 1 step 0.5 do {\n            // Find test points in the model based on the angle that we are viewing it from (not true 3d projection, but not bad)\n            private _testPosASL = AGLtoASL (_lastTarget modelToWorld [_xOffset * - cos _relAngle, _xOffset * sin _relAngle, _yOffset]);\n            private _intersectionsToCursorTarget = lineIntersectsSurfaces [_viewASL, _testPosASL, ace_player, vehicle ace_player, true, 1];\n            // drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", [[0,1,1,1], [1,0,1,1]] select (count _intersectionsToCursorTarget), (ASLtoAGL _testPosASL), 0.25, 0.25, 0, \"\", 0.5, 0.025, \"TahomaB\"];\n            if (!(_intersectionsToCursorTarget isEqualTo [])) then {\n                (_intersectionsToCursorTarget select 0) params [\"\", \"\", \"_intersectedObject\"];\n                if (_intersectedObject isKindOf \"AllVehicles\") then {\n                    _intersectedObject breakOut \"main\";\n                };\n            };\n        };\n    };\n};\n\n// Try cursorObject/Target as they are very fast\nif ((cursorObject isKindOf \"AllVehicles\") && {(cursorObject distance ace_player) < _maxRange}) then {\n    private _intersectionsToCursorTarget = lineIntersectsSurfaces [_viewASL, aimPos cursorObject, ace_player, cursorObject, true, 1];\n    if (_intersectionsToCursorTarget isEqualTo []) then {\n        cursorObject breakOut \"main\";\n    };\n};\nif ((cursorTarget isKindOf \"AllVehicles\") && {(cursorObject distance ace_player) < _maxRange}) then {\n    private _intersectionsToCursorTarget = lineIntersectsSurfaces [_viewASL, aimPos cursorTarget, ace_player, cursorTarget, true, 1];\n    if (_intersectionsToCursorTarget isEqualTo []) then {\n        cursorTarget breakOut \"main\";\n    };\n};\n\n// Attempt to scan using multiple rayscasts - This is expensive (n^2) and care should be given to balance accuracy vs speed\nfor \"_xOffset\" from -14 to 14 step 2 do {\n    for \"_yOffset\" from -12 to 12 step 4 do {\n        private _testPosASL = AGLtoASL (positionCameraToWorld [_xOffset, _yOffset, _maxRange]);\n        private _intersectionsToCursorTarget = lineIntersectsSurfaces [_viewASL, _testPosASL, ace_player, vehicle ace_player, true, 1];\n        // drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", [[0,1,0,1], [1,0,0,1]] select (count _intersectionsToCursorTarget), (ASLtoAGL _testPosASL), 0.25, 0.25, 0, \"\", 0.5, 0.025, \"TahomaB\"];\n        if (!(_intersectionsToCursorTarget isEqualTo [])) then {\n            (_intersectionsToCursorTarget select 0) params [\"\", \"\", \"_intersectedObject\"];\n            if (_intersectedObject isKindOf \"AllVehicles\") then {\n                _intersectedObject breakOut \"main\";\n            };\n        };\n    };\n};\n\nobjNull\n",
        "functionName": "ace_javelin_fnc_getTarget"
      },
      {
        "fileName": "fnc_mapHelperDraw.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the map helper's draw event\n * Resets arguments if not run recently\n * And starts a watchdog to detect when weapon display unloaded\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_javelin_fnc_mapHelperDraw\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nif (isNil QGVAR(arguments)) then {\n    TRACE_1(\"Starting optic draw\", _this);\n\n    // reset shooter var:\n    private _currentShooter = if (ACE_player call CBA_fnc_canUseWeapon) then {ACE_player} else {vehicle ACE_player};\n    _currentShooter setVariable [\"ace_missileguidance_target\", nil, false];\n\n    GVAR(arguments) = [\n        diag_frameno,       // Last run frame\n        objNull,            // currentTargetObject\n        0,                  // Lock Start Time\n        0,                  // Next Sound timer\n        -1,                 // _fireDisabledEH\n        0                   // _nextTargetScan\n    ];\n\n    // Start up a watchdog for when the display is no longer shown (but might not be unloaded or null)\n    [{\n        if (isNull (uiNamespace getVariable [\"ACE_RscOptics_javelin\", displayNull])) exitWith {true};\n        GVAR(arguments) params [\"_lastRunFrame\"];\n        (diag_frameno < _lastRunFrame) || {diag_frameno > (_lastRunFrame + 1)}\n    }, {\n        TRACE_1(\"old/null display - ending optic draw\",_this);\n        private _fireDisabledEH = GVAR(arguments) param [4, -1];\n        [_fireDisabledEH] call FUNC(enableFire);\n        GVAR(arguments) = nil;\n    }, []] call CBA_fnc_waitUntilAndExecute;\n};\n\nBEGIN_COUNTER(onOpticDraw);\nGVAR(arguments) call FUNC(onOpticDraw);\nEND_COUNTER(onOpticDraw);\n",
        "functionName": "ace_javelin_fnc_mapHelperDraw"
      },
      {
        "fileName": "fnc_onOpticDraw.sqf",
        "content": "/*\n * Author: jaynus, PabstMirror\n * Main loop, handles scaning for targets and drawing the javelin optic\n *\n * Arguments:\n * 0: Last run frame <NUMBER>\n * 0: Current target (what we locked last run) <OBJECT>\n * 0: Lock start time (cba mission time) <NUMBER>\n * 0: Next sound play time (ticktime) <NUMBER>\n * 0: Next target scan (ticktime) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_javelin_fnc_mapHelperDraw\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n// TRACE_1(\"onOpticDraw\",diag_frameno);\n\n#define __TRACKINTERVAL 0       // how frequent the ui update should be.\n#define __SCANNTERVAL 0.05      // how frequent the target scan check should be.\n#define __LOCKONTIME 3          // Lock on won't occur sooner\n\n// Pull the arguments\nparams [\"_lastRunFrame\", \"_currentTarget\", \"_lockStartTime\", \"_soundNextPlayTime\", \"_fireDisabledEH\", \"_nextTargetScan\"];\n\n// Get shooter info\nprivate _currentShooter = if (ACE_player call CBA_fnc_canUseWeapon) then {ACE_player} else {vehicle ACE_player};\nprivate _currentWeapon = currentWeapon _currentShooter;\nprivate _currentMagazine = currentMagazine _currentShooter;\n\n// Get weapon / ammo configs\nprivate _ammoCount = _currentShooter ammo _currentWeapon;\nprivate _weaponConfig = configProperties [configFile >> \"CfgWeapons\" >> _currentWeapon, QUOTE(configName _x == QUOTE(QGVAR(enabled))), false];\nprivate _ammoConfig = if (_currentMagazine != \"\") then {\n    private _ammoType = getText (configFile >> \"CfgMagazines\" >> _currentMagazine >> \"ammo\");\n    configProperties [(configFile >> \"CfgAmmo\" >> _ammoType), \"(configName _x) == 'ace_missileguidance'\", false];\n} else {\n    []\n};\n\n// Check if loaded and javelin enabled for wepaon and missile guidance enabled for loaded ammo\nif ((_ammoCount == 0) || // No ammo loaded\n        {(count _weaponConfig) < 1} || {(getNumber (_weaponConfig select 0)) != 1} || // Not enabled for weapon\n        {(count _ammoConfig) < 1} || {(getNumber ((_ammoConfig select 0) >> \"enabled\")) != 1} // Not enabled for ammo\n        ) exitWith {\n\n    __JavelinIGUITargeting ctrlShow false;\n    __JavelinIGUISeek ctrlSetTextColor __ColorGray;\n\n    _fireDisabledEH = [_fireDisabledEH] call FUNC(enableFire);\n    _this set [0, diag_frameno];\n    _this set [4, _fireDisabledEH];\n};\n\n\n// Bail on fast movement (keep it steady)\nif ((velocity ACE_player) distance [0,0,0] > 0.75 && {cameraView == \"GUNNER\"} && {cameraOn == ACE_player}) exitWith {\n    TRACE_1(\"exiting gunner because movement\",velocity ACE_player);\n    ACE_player switchCamera \"INTERNAL\";\n    if (player != ACE_player) then {\n        TRACE_2(\"Zeus, manually reseting RC after switchCamera\",player,ACE_player);\n        player remoteControl ACE_player;\n    };\n};\n\n// Refresh the firemode (top/dir)\n[] call FUNC(showFireMode);\n\n// Get UI constants\nprivate _offsetX = 0.5 * safeZoneW - safeZoneX - 0.5;\nprivate _offsetY = 0.5 * safeZoneH - safeZoneY - 0.5;\n\nprivate _newTarget = objNull;\nif (GVAR(isLockKeyDown) && {cameraView == \"GUNNER\"} && {(currentVisionMode ACE_player) == 2}) then {\n    // Attempting to lock; getTarget can be  expensive so it's rate is limited\n    if (diag_tickTime > _nextTargetScan) then {\n        BEGIN_COUNTER(getTarget);\n        _newTarget = [_currentTarget, 2500, 0.6] call FUNC(getTarget);\n        END_COUNTER(getTarget);\n        _nextTargetScan = diag_tickTime + __SCANNTERVAL;\n    } else {\n        _newTarget = _currentTarget;\n    };\n\n    // Show gate box\n    private _boundsInput = if (_currentTarget isKindOf \"CAManBase\") then {\n        [_currentTarget,[-0.5,-0.5,-0.25],[0,0,0]];\n    } else {\n        [_currentTarget,[-1,-1,-1],_currentTarget selectionPosition \"zamerny\"]; \n    };\n\n    private _bpos = _boundsInput call EFUNC(common,worldToScreenBounds);\n    \n    private _lockTime = if (isNull _currentTarget) then {0} else {CBA_missionTime - _lockStartTime};\n    private _minX = ((linearConversion [1, (__LOCKONTIME - 0.5), _lockTime, 0.5 - 0.075*safeZoneW, (_bpos select 0), true]) + _offsetX) max __ConstraintLeft;\n    private _minY = ((linearConversion [1, (__LOCKONTIME - 0.5), _lockTime, 0.5 - 0.075*safeZoneH, (_bpos select 1), true]) + _offsetY) max __ConstraintTop;\n    private _maxX = (((linearConversion [1, (__LOCKONTIME - 0.5), _lockTime, 0.5 + 0.075*safeZoneW, (_bpos select 2), true]) + _offsetX) min __ConstraintRight) - (0.025 * (3 / 4) * safeZoneH);\n    private _maxY = (((linearConversion [1, (__LOCKONTIME - 0.5), _lockTime, 0.5 + 0.075*safeZoneH, (_bpos select 3), true]) + _offsetY) min __ConstraintBottom) - (0.025 * safeZoneH);\n\n    // TRACE_3(\"\",_boundsInput,_bpos,_lockTime);\n    // TRACE_4(\"\",_minX,_maxX,_minY,_maxY);\n\n    __JavelinIGUITargetingGateTL ctrlSetPosition [_minX, _minY];\n    __JavelinIGUITargetingGateTR ctrlSetPosition [_maxX, _minY];\n    __JavelinIGUITargetingGateBL ctrlSetPosition [_minX, _maxY];\n    __JavelinIGUITargetingGateBR ctrlSetPosition [_maxX, _maxY];\n    {_x ctrlCommit __TRACKINTERVAL} forEach [__JavelinIGUITargetingGateTL, __JavelinIGUITargetingGateTR, __JavelinIGUITargetingGateBL, __JavelinIGUITargetingGateBR];\n\n    __JavelinIGUITargeting ctrlShow true;\n    __JavelinIGUITargetingGate ctrlShow true;\n} else {\n    // Not trying to lock\n    __JavelinIGUITargeting ctrlShow false;\n    __JavelinIGUITargetingGate ctrlShow false;\n    __JavelinIGUITargetingLines ctrlShow false;\n};\n\nif (isNull _newTarget) then {\n    // No target found\n    _currentTarget = objNull;\n    _lockStartTime = 0;\n    __JavelinIGUISeek ctrlSetTextColor __ColorGray;\n    _currentShooter setVariable [\"ace_missileguidance_target\", nil, false];\n\n    __JavelinIGUITargetingLines ctrlShow false;\n        \n    // Disallow fire\n    _fireDisabledEH = [_fireDisabledEH] call FUNC(disableFire);\n} else {\n    if ((!isNull _newTarget) && {_currentTarget != _newTarget}) then {\n        TRACE_1(\"New Target, reseting locking\", _newTarget);\n        _lockStartTime = CBA_missionTime;\n        _currentTarget = _newTarget;\n    };\n\n    if ((CBA_missionTime - _lockStartTime) > __LOCKONTIME) then { // Lock on after 3 seconds\n        TRACE_2(\"LOCKED!\", _currentTarget, _lockStartTime);\n        __JavelinIGUISeek ctrlSetTextColor __ColorGreen;\n        __JavelinIGUITargetingLines ctrlShow true;\n\n        // Move target marker (the crosshair) to aimpoint on the target\n        private _aimPointOnTarget = _currentTarget selectionPosition ([\"zamerny\", \"body\"] select (_currentTarget isKindOf \"CAManBase\"));\n        (worldToScreen (_currentTarget modelToWorld _aimPointOnTarget)) params [[\"_aposX\", 0.5], [\"_aposY\", 0.5]];\n        private _ctrlPos = ctrlPosition __JavelinIGUITargetingLineV;\n        _ctrlPos set [0, _aposX + _offsetX];\n        __JavelinIGUITargetingLineV ctrlSetPosition _ctrlPos;\n        __JavelinIGUITargetingLineV ctrlCommit __TRACKINTERVAL;\n        _ctrlPos = ctrlPosition __JavelinIGUITargetingLineH;\n        _ctrlPos set [1, _aposY + _offsetY];\n        __JavelinIGUITargetingLineH ctrlSetPosition _ctrlPos;\n        __JavelinIGUITargetingLineH ctrlCommit __TRACKINTERVAL;\n\n        _currentShooter setVariable [\"ace_missileguidance_target\", _currentTarget, false];\n\n        // Allow fire\n        _fireDisabledEH = [_fireDisabledEH] call FUNC(enableFire);\n\n        if (diag_tickTime > _soundNextPlayTime) then {\n            playSound \"ACE_Javelin_Locked\";\n            _soundNextPlayTime = diag_tickTime + 0.25;\n        };\n    } else {\n        // Lock in progress\n        __JavelinIGUISeek ctrlSetTextColor __ColorGray;\n        __JavelinIGUITargetingLines ctrlShow false;\n\n        _currentShooter setVariable [\"ace_missileguidance_target\", nil, false];\n\n        if (diag_tickTime > _soundNextPlayTime) then {\n            playSound \"ACE_Javelin_Locking\";\n            _soundNextPlayTime = diag_tickTime + 0.25;\n        };\n        // Disallow fire\n        _fireDisabledEH = [_fireDisabledEH] call FUNC(disableFire);\n    };\n};\n\n// Save arguments for next run\n_this set [0, diag_frameno];\n_this set [1, _currentTarget];\n_this set [2, _lockStartTime];\n_this set [3, _soundNextPlayTime];\n_this set [4, _fireDisabledEH];\n_this set [5, _nextTargetScan];\n",
        "functionName": "ace_javelin_fnc_onOpticDraw"
      },
      {
        "fileName": "fnc_showFireMode.sqf",
        "content": "/*\n * Author: jaynus\n * Updates fire mode on javelin display (top/dir)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_javelin_fnc_showFireMode\n *\n * Public: No\n */\n//#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nprivate _currentShooter = if (ACE_player call CBA_fnc_canUseWeapon) then {ACE_player} else {vehicle ACE_player};\nprivate _currentFireMode = _currentShooter getVariable [\"ace_missileguidance_attackProfile\", \"JAV_TOP\"];\n\nTRACE_1(\"showFireMode\", _currentFireMode);\n\nif (_currentFireMode == \"JAV_TOP\") then {\n    __JavelinIGUITop ctrlSetTextColor __ColorGreen;\n    __JavelinIGUIDir ctrlSetTextColor __ColorGray;\n} else {\n    __JavelinIGUITop ctrlSetTextColor __ColorGray;\n    __JavelinIGUIDir ctrlSetTextColor __ColorGreen;\n};\n",
        "functionName": "ace_javelin_fnc_showFireMode"
      }
    ]
  },
  {
    "component": "kestrel4500",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "[\"ACE3 Equipment\", QGVAR(KestrelDialogKey), localize LSTRING(KestrelDialogKey),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    if (GVAR(Kestrel4500)) exitWith {\n        closeDialog 0;\n        false\n    };\n    // Statement\n    [] call FUNC(createKestrelDialog);\n    false\n},\n{false},\n[0, [false, false, false]], false, 0] call CBA_fnc_addKeybind; // (empty default key)\n\n[\"ACE3 Equipment\", QGVAR(DisplayKestrelKey), localize LSTRING(DisplayKestrelKey),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n    // Statement\n    [] call FUNC(displayKestrel);\n    false\n},\n{false},\n[0, [true, false, false]], false, 0] call CBA_fnc_addKeybind; // (empty default key)\n\n\n//Add deviceKey entry:\nprivate _conditonCode = {\n    [] call FUNC(canShow);\n};\nprivate _toggleCode = {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {};\n\n    // Statement\n    if (!GVAR(Overlay)) then {\n        //If no overlay, show it:\n        [] call FUNC(displayKestrel);\n    } else {\n        //If overlay is up, switch to dialog:\n        [] call FUNC(createKestrelDialog);\n    };\n};\nprivate _closeCode = {\n    // Statement\n    if (GVAR(Overlay)) then {\n        //If dispaly is open, close it:\n        GVAR(Overlay) = false;\n    };\n    if (dialog && {!isNull (uiNamespace getVariable [\"Kestrel4500_Display\", displayNull])}) then {\n        //If dialog is open, close it:\n        GVAR(Kestrel4500) = false;\n        closeDialog 0;\n    };\n};\n[(localize LSTRING(Name)), QPATHTOF(UI\\Kestrel4500.paa), _conditonCode, _toggleCode, _closeCode] call EFUNC(common,deviceKeyRegisterNew);\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"initKeybinds.sqf\"\n\nGVAR(Menus) = [\"Date\", \"Direction\", \"Wind SPD  m/s\", \"CROSSWIND m/s\", \"HEADWIND  m/s\", \"TEMP       °C\", \"CHILL      °C\", \"HUMIDITY    %\", \"HEAT INDEX °C\", \"DEW POINT  °C\", \"WET BULB   °C\", \"BARO      hPA\", \"ALTITUDE    m\", \"DENS ALT    m\", \"User Screen   1\", \"User Screen   2\"];\n\nGVAR(TOTAL) = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nGVAR(ENTRIES) = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nGVAR(MinAvgMax) = false;\nGVAR(MinAvgMaxMode) = 0;\nGVAR(referenceHeadingMenu) = 0;\nGVAR(referenceHeadingAutoSet) = true;\nGVAR(manualSetCooldown) = diag_tickTime;\nGVAR(headingSetDisplayTimer) = 0;\n\nGVAR(Menu) = 1;\nGVAR(Directions) = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"];\nGVAR(Direction) = 0;\n\nGVAR(RefHeading) = 0;\nGVAR(TmpHeading) = 0;\n\nGVAR(updateTimer) = 0;\nGVAR(outputData) = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nGVAR(MeasuredWindSpeed) = 0;\nGVAR(ImpellerState) = 0;\n\nGVAR(Kestrel4500) = false;\nGVAR(Overlay) = false;\n\n[] call FUNC(restoreUserData);"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_buttonPressed.sqf",
        "content": "/*\n * Author: Ruthberg\n * Handles the Kestrel 4500 dialog button actions\n *\n * Arguments:\n * button ID <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * 2 call ace_kestrel4500_fnc_buttonPressed\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nswitch (_this) do {\n    case 0: { // Enter\n        if (!GVAR(MinAvgMax) && (GVAR(Menu) == 3 || GVAR(Menu) == 4)) then {\n            switch (GVAR(referenceHeadingMenu)) do {\n                case 0: { // Head- and Crosswind main page\n                    GVAR(TmpHeading) = GVAR(RefHeading);\n                    GVAR(referenceHeadingMenu) = 1;\n                };\n                case 1: { // Mode selection\n                    if (GVAR(referenceHeadingAutoSet)) then {\n                        GVAR(referenceHeadingMenu) = 2;\n                    } else {\n                        GVAR(referenceHeadingMenu) = 3;\n                    };\n                };\n                case 2: { // Auto set\n                    GVAR(RefHeading) = (getDir ACE_player) % 360;\n                    GVAR(referenceHeadingMenu) = 0;\n                    GVAR(headingSetDisplayTimer) = diag_tickTime;\n                };\n                case 3: { // Manual set\n                    GVAR(RefHeading) = GVAR(TmpHeading);\n                    GVAR(referenceHeadingMenu) = 0;\n                    GVAR(headingSetDisplayTimer) = diag_tickTime;\n                };\n            };\n        };\n        if (GVAR(MinAvgMax) && GVAR(Menu) > 1 && GVAR(Menu) < 5) then {\n            if (GVAR(MinAvgMaxMode) != 1) then {\n                {\n                    GVAR(MIN) set [_x, 0];\n                    GVAR(MAX) set [_x, 0];\n                    GVAR(TOTAL) set [_x, 0];\n                    GVAR(ENTRIES) set [_x, 0];\n                } forEach [2, 3, 4];\n            };\n            GVAR(MinAvgMaxMode) = (GVAR(MinAvgMaxMode) + 1) % 3;\n        };\n    };\n    case 1: { // Top\n        if (GVAR(referenceHeadingMenu) == 1) then {\n            GVAR(referenceHeadingAutoSet) = !GVAR(referenceHeadingAutoSet);\n        } else {\n            GVAR(Menu) = (GVAR(Menu) - 1 + (count GVAR(Menus))) % (count GVAR(Menus));\n        };\n    };\n    case 2: { // Bottom\n        if (GVAR(referenceHeadingMenu) == 1) then {\n            GVAR(referenceHeadingAutoSet) = !GVAR(referenceHeadingAutoSet);\n        } else {\n            GVAR(Menu) = (GVAR(Menu) + 1 + (count GVAR(Menus))) % (count GVAR(Menus));\n        };\n    };\n    case 3: { // Left\n        if (GVAR(referenceHeadingMenu) == 0) then {\n            GVAR(MinAvgMax) = !GVAR(MinAvgMax);\n        } else {\n            if (GVAR(referenceHeadingMenu) == 3) then {\n                if (diag_tickTime - GVAR(manualSetCooldown) < 0.2) then {\n                    GVAR(TmpHeading) = GVAR(TmpHeading) - 10;\n                } else {\n                    GVAR(TmpHeading) = GVAR(TmpHeading) - 1;\n                };\n                GVAR(TmpHeading) = (GVAR(TmpHeading) + 360) % 360;\n                GVAR(manualSetCooldown) = diag_tickTime;\n            };\n        };\n    };\n    case 4: { // Right\n        if (GVAR(referenceHeadingMenu) == 0) then {\n            GVAR(MinAvgMax) = !GVAR(MinAvgMax);\n        } else {\n            if (GVAR(referenceHeadingMenu) == 3) then {\n                if (diag_tickTime - GVAR(manualSetCooldown) < 0.2) then {\n                    GVAR(TmpHeading) = GVAR(TmpHeading) + 10;\n                } else {\n                    GVAR(TmpHeading) = GVAR(TmpHeading) + 1;\n                };\n                GVAR(TmpHeading) = (GVAR(TmpHeading) + 360) % 360;\n                GVAR(manualSetCooldown) = diag_tickTime;\n            };\n        };\n    };\n    case 5: { // Memory\n    };\n    case 6: { // Backlight\n    };\n    case 7: { // Exit\n        private _exit = true;\n        if (GVAR(referenceHeadingMenu) == 1) then {\n            GVAR(referenceHeadingMenu) = 0;\n            _exit = false;\n        };\n        if (GVAR(referenceHeadingMenu) > 1) then {\n            GVAR(referenceHeadingMenu) = 1;\n            _exit = false;\n        };\n        if (_exit) then {\n            closeDialog 0;\n        };\n    };\n};\n\n[] call FUNC(updateDisplay);\n[] call FUNC(storeUserData);\n",
        "functionName": "ace_kestrel4500_fnc_buttonPressed"
      },
      {
        "fileName": "fnc_canShow.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Tests if the Kestrel 4500 can be shown\n *\n * Arguments:\n * None\n *\n * Return Value:\n * canShow <BOOL>\n *\n * Example:\n * call ace_kestrel4500_fnc_canShow\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(\"ACE_Kestrel4500\" in (uniformItems ACE_player)) || (\"ACE_Kestrel4500\" in (vestItems ACE_player))\n",
        "functionName": "ace_kestrel4500_fnc_canShow"
      },
      {
        "fileName": "fnc_collectData.sqf",
        "content": "/*\n * Author: Ruthberg\n * Gathers the weather data for the Kestrel 4500\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_kestrel4500_fnc_collectData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _playerDir = getDir ACE_player;\nprivate _playerAltitude = (getPosASL ACE_player) select 2;\nprivate _temperature = _playerAltitude call EFUNC(weather,calculateTemperatureAtHeight);\nprivate _humidity = EGVAR(weather,currentHumidity);\nprivate _barometricPressure = _playerAltitude call EFUNC(weather,calculateBarometricPressure);\nprivate _altitude = EGVAR(common,mapAltitude) + _playerAltitude;\nprivate _airDensity = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateAirDensity);\nprivate _densityAltitude = _airDensity call EFUNC(weather,calculateDensityAltitude);\nprivate _chill = [_temperature, _humidity] call EFUNC(weather,calculateWindChill);\nprivate _heatIndex = [_temperature, _humidity] call EFUNC(weather,calculateHeatIndex);\nprivate _dewPoint = [_temperature, _humidity] call EFUNC(weather,calculateDewPoint);\nprivate _wetBulb = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateWetBulb);\n\nif (isNil QGVAR(MIN) || isNil QGVAR(MAX)) then {\n    GVAR(MIN) = [0, _playerDir, 0, 0, 0, _temperature, _chill, _humidity, _heatIndex, _dewPoint, _wetBulb, _barometricPressure, _altitude, _densityAltitude];\n    GVAR(MAX) = [0, _playerDir, 0, 0, 0, _temperature, _chill, _humidity, _heatIndex, _dewPoint, _wetBulb, _barometricPressure, _altitude, _densityAltitude];\n};\n\n{\n    GVAR(ENTRIES) set [_x, (GVAR(ENTRIES) select _x) + 1];\n} count [1, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n\n\n[0, _playerDir] call FUNC(updateMemory);\n\nif (GVAR(MinAvgMaxMode) == 1) then {\n    {\n        GVAR(ENTRIES) set [_x, (GVAR(ENTRIES) select _x) + 1];\n    } count [2, 3, 4];\n\n    // Wind SPD\n    private _windSpeed = call FUNC(measureWindSpeed);\n    [2, _windSpeed] call FUNC(updateMemory);\n\n    // CROSSWIND\n    private _crosswind = 0;\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n        _crosswind = abs(sin(GVAR(RefHeading) - _playerDir) * _windSpeed);\n    } else {\n        _crosswind = abs(sin(GVAR(RefHeading)) * _windSpeed);\n    };\n    [3, _crosswind] call FUNC(updateMemory);\n\n    // HEADWIND\n    private _headwind = 0;\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n        _headwind = cos(GVAR(RefHeading) - _playerDir) * _windSpeed;\n    } else {\n        _headwind = cos(GVAR(RefHeading)) * _windSpeed;\n    };\n    if (abs(_headwind) > abs(GVAR(MAX) select 4)) then {\n        GVAR(MAX) set [4, _headwind];\n    };\n    if (abs(_headwind) < abs(GVAR(MIN) select 4)) then {\n        GVAR(MIN) set [4, _headwind];\n    };\n    GVAR(TOTAL) set [4, (GVAR(TOTAL) select 4) + _headwind];\n};\n\n{ _x call FUNC(updateMemory); true } count [[5, _temperature],[6, _chill],[7, _humidity],[8, _heatIndex],[9, _dewPoint],[10, _wetBulb],[11, _barometricPressure],[12, _altitude],[13, _densityAltitude]];\n",
        "functionName": "ace_kestrel4500_fnc_collectData"
      },
      {
        "fileName": "fnc_createKestrelDialog.sqf",
        "content": "/*\n * Author: Ruthberg\n * Opens the Kestrel 4500 dialog\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_kestrel4500_fnc_createKestrelDialog\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(Kestrel4500)) exitWith { false };\nif (underwater ACE_player) exitWith { false };\nif (!(\"ACE_Kestrel4500\" in (uniformItems ACE_player)) && !(\"ACE_Kestrel4500\" in (vestItems ACE_player))) exitWith { false };\n\nGVAR(Overlay) = false;\n3 cutText [\"\", \"PLAIN\"];\n\nGVAR(Kestrel4500) = true;\ncreateDialog 'Kestrel4500_Display';\n\n[{\n    if (!dialog || !GVAR(Kestrel4500)) exitWith {\n        GVAR(Kestrel4500) = false;\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    [] call FUNC(updateDisplay);\n}, 1, _this select 0] call CBA_fnc_addPerFrameHandler;\n\ntrue\n",
        "functionName": "ace_kestrel4500_fnc_createKestrelDialog"
      },
      {
        "fileName": "fnc_dayOfWeek.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculate Current Day in the Week\n *\n * Arguments:\n * 0: Year <NUMBER>\n * 1: Month <NUMBER>\n * 2: Day <NUMBER>\n *\n * Return Value:\n * Day of The Week <NUMBER>\n *\n * Example:\n * [1995, 10, 21] call ace_kestrel4500_fnc_buttonPressed\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_year\", \"_month\", \"_day\"];\n\nprivate _table = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];\nif (_month < 3) then {\n    _year = _year - 1;\n};\n(_year + floor(_year/4) - floor(_year/100) + floor(_year/400) + (_table select (_month - 1)) + _day) % 7\n",
        "functionName": "ace_kestrel4500_fnc_dayOfWeek"
      },
      {
        "fileName": "fnc_displayKestrel.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows the Kestrel 4500 as rsc title\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_kestrel4500_fnc_displayKestrel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"RscKestrel4500\")\n#define __ctrlKestrel4500 (__dsp displayCtrl 75000)\n#define __ctrlTop (__dsp displayCtrl 75100)\n#define __ctrlCenterBig (__dsp displayCtrl 75200)\n#define __ctrlCenter (__dsp displayCtrl 75201)\n#define __ctrlCenterLine1Left (__dsp displayCtrl 75300)\n#define __ctrlCenterLine2Left (__dsp displayCtrl 75301)\n#define __ctrlCenterLine3Left (__dsp displayCtrl 75302)\n#define __ctrlCenterLine1Right (__dsp displayCtrl 75303)\n#define __ctrlCenterLine2Right (__dsp displayCtrl 75304)\n#define __ctrlCenterLine3Right (__dsp displayCtrl 75305)\n#define __ctrlInfoLine1 (__dsp displayCtrl 75400)\n#define __ctrlInfoLine2 (__dsp displayCtrl 75401)\n#define __ctrlBottomBig (__dsp displayCtrl 75500)\n#define __ctrlCenterLine1 (__dsp displayCtrl 75600)\n#define __ctrlCenterLine2 (__dsp displayCtrl 75601)\n#define __ctrlCenterLine3 (__dsp displayCtrl 75602)\n#define __ctrlCenterLine4 (__dsp displayCtrl 75603)\n#define __ctrlCenterLine5 (__dsp displayCtrl 75604)\n#define __ctrlCenterLine6 (__dsp displayCtrl 75605)\n\nif (GVAR(Overlay)) exitWith {\n    GVAR(Overlay) = false;\n    3 cutText [\"\", \"PLAIN\"];\n    true\n};\nif (underwater ACE_player) exitWith { true };\nif (!(\"ACE_Kestrel4500\" in (uniformItems ACE_player)) && !(\"ACE_Kestrel4500\" in (vestItems ACE_player))) exitWith { true };\n\nif (GVAR(Kestrel4500) && dialog) then {\n    GVAR(Kestrel4500) = false;\n    closeDialog 0;\n};\n\nGVAR(Overlay) = true;\n\n[{\n    // abort condition\n    if (!GVAR(Overlay) || {!((\"ACE_Kestrel4500\" in (uniformItems ACE_player)) || (\"ACE_Kestrel4500\" in (vestItems ACE_player)))}) exitWith {\n        GVAR(Overlay) = false;\n        3 cutText [\"\", \"PLAIN\"];\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    if (diag_tickTime > GVAR(updateTimer)) then {\n        GVAR(updateTimer) = diag_tickTime + 1;\n\n        private _outputData = [] call FUNC(generateOutputData);\n\n        3 cutRsc [\"RscKestrel4500\", \"PLAIN\", 1, false];\n        _outputData params [\n            \"_ctrlTop\",\n            \"_ctrlCenterBig\",\n            \"_ctrlCenter\",\n            \"_ctrlCenterLine1Left\",\n            \"_ctrlCenterLine2Left\",\n            \"_ctrlCenterLine3Left\",\n            \"_ctrlCenterLine1Right\",\n            \"_ctrlCenterLine2Right\",\n            \"_ctrlCenterLine3Right\",\n            \"_ctrlInfoLine1\",\n            \"_ctrlInfoLine2\",\n            \"_ctrlBottomBig\",\n            \"_ctrlCenterLine1\",\n            \"_ctrlCenterLine2\",\n            \"_ctrlCenterLine3\",\n            \"_ctrlCenterLine4\",\n            \"_ctrlCenterLine5\",\n            \"_ctrlCenterLine6\"\n        ];\n\n        __ctrlTop ctrlSetText _ctrlTop;\n        __ctrlCenterBig ctrlSetText _ctrlCenterBig;\n        __ctrlCenter ctrlSetText _ctrlCenter;\n\n        __ctrlCenterLine1Left ctrlSetText _ctrlCenterLine1Left;\n        __ctrlCenterLine2Left ctrlSetText _ctrlCenterLine2Left;\n        __ctrlCenterLine3Left ctrlSetText _ctrlCenterLine3Left;\n\n        __ctrlCenterLine1Right ctrlSetText _ctrlCenterLine1Right;\n        __ctrlCenterLine2Right ctrlSetText _ctrlCenterLine2Right;\n        __ctrlCenterLine3Right ctrlSetText _ctrlCenterLine3Right;\n\n        __ctrlInfoLine1 ctrlSetText _ctrlInfoLine1;\n        __ctrlInfoLine2 ctrlSetText _ctrlInfoLine2;\n\n        __ctrlBottomBig ctrlSetText _ctrlBottomBig;\n\n        __ctrlCenterLine1 ctrlSetText _ctrlCenterLine1;\n        __ctrlCenterLine2 ctrlSetText _ctrlCenterLine2;\n        __ctrlCenterLine3 ctrlSetText _ctrlCenterLine3;\n        __ctrlCenterLine4 ctrlSetText _ctrlCenterLine4;\n        __ctrlCenterLine5 ctrlSetText _ctrlCenterLine5;\n        __ctrlCenterLine6 ctrlSetText _ctrlCenterLine6;\n\n        if (GVAR(referenceHeadingMenu) == 1) then {\n            if (GVAR(referenceHeadingAutoSet)) then {\n                __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 0.6];\n                __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\n            } else {\n                __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\n                __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 0.6];\n            };\n        } else {\n            __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\n            __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\n        };\n    };\n\n    call FUNC(updateImpellerState);\n    __ctrlKestrel4500 ctrlSetText format [QPATHTOF(UI\\Kestrel4500_%1.paa), floor(GVAR(ImpellerState) % 7)];\n\n}, 0.01, []] call CBA_fnc_addPerFrameHandler;\n\ntrue\n",
        "functionName": "ace_kestrel4500_fnc_displayKestrel"
      },
      {
        "fileName": "fnc_generateOutputData.sqf",
        "content": "/*\n * Author: Ruthberg\n * Generates the Kestrel 4500 output text.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * 0: top <STRING>\n * 1: centerBig <STRING>\n * 2: CenterLine1Left <STRING>\n * 3: CenterLine2Left <STRING>\n * 4: CenterLine3Left <STRING>\n * 5: CenterLine1Right <STRING>\n * 6: CenterLine2Right <STRING>\n * 7: CenterLine3Right <STRING>\n * 8: InfoLine1 <STRING>\n * 9: InfoLine2 <STRING>\n * 10: Bottom Big <STRING>\n * 11: Center Line 1 <STRING>\n * 11: Center Line 2 <STRING>\n * 12: Center Line 3 <STRING>\n * 13: Center Line 4 <STRING>\n * 14: Center Line 5 <STRING>\n * 15: Center Line 6 <STRING>\n *\n * Example:\n * _var = call ace_kestrel4500_fnc_generateOutputData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (diag_tickTime - GVAR(headingSetDisplayTimer) < 0.8) exitWith {[\"\", \"\", \"  Heading Set\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]};\n\n[] call FUNC(collectData);\n\nprivate _textTop = GVAR(Menus) select GVAR(Menu);\nprivate _textCenterBig = \"\";\nprivate _textCenter = \"\";\n\nprivate _textCenterLine1Left = \"\";\nprivate _textCenterLine2Left = \"\";\nprivate _textCenterLine3Left = \"\";\nprivate _textCenterLine1Right = \"\";\nprivate _textCenterLine2Right = \"\";\nprivate _textCenterLine3Right = \"\";\n\nprivate _textInfoLine1 = \"\";\nprivate _textInfoLine2 = \"\";\n\nprivate _textBottomBig = \"\";\n\nprivate _textCenterLine1 = \"\";\nprivate _textCenterLine2 = \"\";\nprivate _textCenterLine3 = \"\";\nprivate _textCenterLine4 = \"\";\nprivate _textCenterLine5 = \"\";\nprivate _textCenterLine6 = \"\";\n\nprivate _windSpeed = call FUNC(measureWindSpeed);\nprivate _windDir = (wind select 0) atan2 (wind select 1);\n\nprivate _playerDir = getDir ACE_player;\nprivate _playerAltitude = (getPosASL ACE_player) select 2;\n\nprivate _temperature = _playerAltitude call EFUNC(weather,calculateTemperatureAtHeight);\nprivate _humidity = EGVAR(weather,currentHumidity);\nprivate _barometricPressure = _playerAltitude call EFUNC(weather,calculateBarometricPressure);\nprivate _airDensity = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateAirDensity);\nprivate _densityAltitude = _airDensity call EFUNC(weather,calculateDensityAltitude);\nprivate _chill = [_temperature, _humidity] call EFUNC(weather,calculateWindChill);\nprivate _heatIndex = [_temperature, _humidity] call EFUNC(weather,calculateHeatIndex);\nprivate _dewPoint = [_temperature, _humidity] call EFUNC(weather,calculateDewPoint);\nprivate _wetBulb = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateWetBulb);\n\nGVAR(Direction) = 4 * floor(_playerDir / 90);\nif (_playerDir % 90 > 10) then { GVAR(Direction) = GVAR(Direction) + 1};\nif (_playerDir % 90 > 35) then { GVAR(Direction) = GVAR(Direction) + 1};\nif (_playerDir % 90 > 55) then { GVAR(Direction) = GVAR(Direction) + 1};\nif (_playerDir % 90 > 80) then { GVAR(Direction) = GVAR(Direction) + 1};\nGVAR(Direction) = GVAR(Direction) % 16;\n\nif (GVAR(referenceHeadingMenu) == 0) then {\n    switch (GVAR(Menu)) do {\n        case 0: { // Date\n            date params [\"_year\", \"_month\", \"_day\"];\n            private _dayString = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"] select (date call FUNC(dayOfWeek));\n            private _monthString = localize ([\"str_january\",\"str_february\",\"str_march\",\"str_april\",\"str_may\",\"str_june\",\"str_july\",\"str_august\",\"str_september\",\"str_october\",\"str_november\",\"str_december\"] select (_month - 1));\n            _textTop = _dayString;\n            _textCenter = format[\"%1 %2 %3\", _day, _monthString, _year];\n            _textBottomBig = [daytime, \"HH:MM:SS\"] call bis_fnc_timeToString;\n        };\n        case 1: { // Direction\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = format[\"%1\", format[\"%1 %2\", GVAR(Directions) select GVAR(Direction), round(_playerDir)]];\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = \"N/A\";\n                _textCenterLine2Right = \"N/A\";\n                _textCenterLine3Right = \"N/A\";\n            };\n        };\n        case 2: { // Wind SPD\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_windSpeed * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Max\";\n                _textCenterLine2Left = \"Avg\";\n                switch (GVAR(MinAvgMaxMode)) do {\n                    case 0: {\n                        _textCenterLine1Right = \"--. -\";\n                        _textCenterLine2Right = \"--. -\";\n                        _textInfoLine2 = \"- average\";\n                    };\n                    case 1: {\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 2) * 10) / 10);\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 2) / (GVAR(Entries) select 2) * 10) / 10);\n                        _textInfoLine2 = \"- stop\";\n                    };\n                    case 2: {\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 2) * 10) / 10);\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 2) / (GVAR(Entries) select 2) * 10) / 10);\n                        _textInfoLine2 = \"- clear\";\n                    };\n                };\n            };\n        };\n        case 3: { // CROSSWIND\n            if (!GVAR(MinAvgMax)) then {\n                if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n                    _textCenterBig = Str(round(abs(sin(GVAR(RefHeading) - _playerDir) * _windSpeed) * 10) / 10);\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round(_windSpeed * 10) / 10, round(_playerDir)];\n                } else {\n                    _textCenterBig = Str(round(abs(sin(GVAR(RefHeading) - _windDir) * _windSpeed) * 10) / 10);\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round(_windSpeed * 10) / 10, round(180 + _windDir)];\n                };\n                _textInfoLine2 = \"- set heading\";\n            } else {\n                _textCenterLine1Left = \"Max\";\n                _textCenterLine2Left = \"Avg\";\n                switch (GVAR(MinAvgMaxMode)) do {\n                    case 0: {\n                        _textCenterLine1Right = \"--. -\";\n                        _textCenterLine2Right = \"--. -\";\n                        _textInfoLine2 = \"- average\";\n                    };\n                    case 1: {\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 3) * 10) / 10);\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 3) / (GVAR(Entries) select 3) * 10) / 10);\n                        _textInfoLine2 = \"- stop\";\n                    };\n                    case 2: {\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 3) * 10) / 10);\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 3) / (GVAR(Entries) select 3) * 10) / 10);\n                        _textInfoLine2 = \"- clear\";\n                    };\n                };\n            };\n        };\n        case 4: { // HEADWIND\n            if (!GVAR(MinAvgMax)) then {\n                if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n                    _textCenterBig = Str(round(cos(GVAR(RefHeading) - _playerDir) * _windSpeed * 10) / 10);\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round(_windSpeed * 10) / 10, round(_playerDir)];\n                } else {\n                    _textCenterBig = Str(round(-cos(GVAR(RefHeading) - _windDir) * _windSpeed * 10) / 10);\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round(_windSpeed * 10) / 10, round(180 + _windDir)];\n                };\n                _textInfoLine2 = \"- set heading\";\n            } else {\n                _textCenterLine1Left = \"Max\";\n                _textCenterLine2Left = \"Avg\";\n                switch (GVAR(MinAvgMaxMode)) do {\n                    case 0: {\n                        _textCenterLine1Right = \"--. -\";\n                        _textCenterLine2Right = \"--. -\";\n                        _textInfoLine2 = \"- average\";\n                    };\n                    case 1: {\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 4) * 10) / 10);\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 4) / (GVAR(Entries) select 4) * 10) / 10);\n                        _textInfoLine2 = \"- stop\";\n                    };\n                    case 2: {\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 4) * 10) / 10);\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 4) / (GVAR(Entries) select 4) * 10) / 10);\n                        _textInfoLine2 = \"- clear\";\n                    };\n                };\n            };\n        };\n        case 5: { // TEMP\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_temperature * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round((GVAR(Min) select 5) * 10) / 10);\n                _textCenterLine2Right = Str(round((GVAR(Total) select 5) / (GVAR(Entries) select 5) * 10) / 10);\n                _textCenterLine3Right = Str(round((GVAR(Max) select 5) * 10) / 10);\n            };\n        };\n        case 6: { // CHILL\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_chill * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round((GVAR(Min) select 6) * 10) / 10);\n                _textCenterLine2Right = Str(round((GVAR(Total) select 6) / (GVAR(Entries) select 6) * 10) / 10);\n                _textCenterLine3Right = Str(round((GVAR(Max) select 6) * 10) / 10);\n            };\n        };\n        case 7: { // HUMIDITY\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_humidity * 100 * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round((GVAR(Min) select 7) * 100 * 10) / 10);\n                _textCenterLine2Right = Str(round((GVAR(Total) select 7) / (GVAR(Entries) select 7) * 100 * 10) / 10);\n                _textCenterLine3Right = Str(round((GVAR(Max) select 7) * 100 * 10) / 10);\n            };\n        };\n        case 8: { // HEAT INDEX\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_heatIndex * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round((GVAR(Min) select 8) * 10) / 10);\n                _textCenterLine2Right = Str(round((GVAR(Total) select 8) / (GVAR(Entries) select 8) * 10) / 10);\n                _textCenterLine3Right = Str(round((GVAR(Max) select 8) * 10) / 10);\n            };\n        };\n        case 9: { // DEW POINT\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_dewPoint * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round((GVAR(Min) select 9) * 10) / 10);\n                _textCenterLine2Right = Str(round((GVAR(Total) select 9) / (GVAR(Entries) select 9) * 10) / 10);\n                _textCenterLine3Right = Str(round((GVAR(Max) select 9) * 10) / 10);\n            };\n        };\n        case 10: { // WET BULB\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_wetBulb * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round((GVAR(Min) select 10) * 10) / 10);\n                _textCenterLine2Right = Str(round((GVAR(Total) select 10) / (GVAR(Entries) select 10) * 10) / 10);\n                _textCenterLine3Right = Str(round((GVAR(Max) select 10) * 10) / 10);\n            };\n        };\n        case 11: { // BARO\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_barometricPressure * 10) / 10);\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round((GVAR(Min) select 11) * 10) / 10);\n                _textCenterLine2Right = Str(round((GVAR(Total) select 11) / (GVAR(Entries) select 11) * 10) / 10);\n                _textCenterLine3Right = Str(round((GVAR(Max) select 11) * 10) / 10);\n            };\n        };\n        case 12: { // ALTITUDE\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(EGVAR(common,mapAltitude) + _playerAltitude));\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round(GVAR(Min) select 12));\n                _textCenterLine2Right = Str(round((GVAR(Total) select 12) / (GVAR(Entries) select 12)));\n                _textCenterLine3Right = Str(round(GVAR(Max) select 12));\n            };\n        };\n        case 13: { // DENSITY ALTITUDE\n            if (!GVAR(MinAvgMax)) then {\n                _textCenterBig = Str(round(_densityAltitude));\n            } else {\n                _textCenterLine1Left = \"Min\";\n                _textCenterLine2Left = \"Avg\";\n                _textCenterLine3Left = \"Max\";\n                _textCenterLine1Right = Str(round(GVAR(Min) select 13));\n                _textCenterLine2Right = Str(round((GVAR(Total) select 13) / (GVAR(Entries) select 13)));\n                _textCenterLine3Right = Str(round(GVAR(Max) select 13));\n            };\n        };\n        case 14: { // User Screen 1\n            _textCenterLine1Left = Str(round(_playerDir));\n            _textCenterLine2Left = Str(round(EGVAR(common,mapAltitude) + _playerAltitude));\n            _textCenterLine3Left = Str(round(abs(_windSpeed) * 10) / 10);\n            _textCenterLine1Right = GVAR(Directions) select GVAR(Direction);\n            _textCenterLine2Right = \"m\";\n            _textCenterLine3Right = \"m/s\";\n        };\n        case 15: { // User Screen 2\n            _textCenterLine1Left = Str(round(_temperature * 10) / 10);\n            _textCenterLine2Left = Str(round(_humidity * 100 * 10) / 10);\n            _textCenterLine3Left = Str(round((_playerAltitude call EFUNC(weather,calculateBarometricPressure)) * 10) / 10);\n            _textCenterLine1Right = \"C\";\n            _textCenterLine2Right = \"%\";\n            _textCenterLine3Right = \"hPA\";\n        };\n    };\n} else {\n    _textTop = \"\";\n    switch (GVAR(referenceHeadingMenu)) do {\n        case 1: {\n            _textCenterLine1 = \"MAGNETIC  HEADING\";\n            _textCenterLine2 = Str(round(GVAR(RefHeading)));\n            _textCenterLine3 = \"Auto Set           \";\n            _textCenterLine4 = \"Manual Set         \";\n            _textCenterLine5 = \"================\";\n            _textCenterLine6 = \"- select  (|) exit\";\n        };\n        case 2: {\n            _textCenterLine1 = \"MAGNETIC  HEADING\";\n            _textCenterLine2 = Str(round(_playerDir));\n            _textCenterLine3 = \"Point Down the\";\n            _textCenterLine4 = \"Runway or Range\";\n            _textCenterLine5 = \"================\";\n            _textCenterLine6 = \"- set heading\";\n        };\n        case 3: {\n            _textCenterLine1 = \"MAGNETIC  HEADING\";\n            _textCenterLine2 = Str(round(GVAR(TmpHeading)));\n            _textCenterLine3 = \"Press < and >\";\n            _textCenterLine4 = \"to Adjust\";\n            _textCenterLine5 = \"================\";\n            _textCenterLine6 = \"- set heading\";\n        };\n    };\n};\n\n[_textTop, _textCenterBig, _textCenter, _textCenterLine1Left, _textCenterLine2Left, _textCenterLine3Left, _textCenterLine1Right, _textCenterLine2Right, _textCenterLine3Right, _textInfoLine1, _textInfoLine2, _textBottomBig, _textCenterLine1, _textCenterLine2, _textCenterLine3, _textCenterLine4, _textCenterLine5, _textCenterLine6]\n",
        "functionName": "ace_kestrel4500_fnc_generateOutputData"
      },
      {
        "fileName": "fnc_measureWindSpeed.sqf",
        "content": "/*\n * Author: Ruthberg\n * Measures the wind speed, stores the information in GVAR(MeasuredWindSpeed) and updates GVAR(ImpellerState)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * wind speed <NUMBER>\n *\n * Example:\n * call ace_kestrel4500_fnc_canShow\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _playerDir = getDir ACE_player;\nprivate _windSpeed = vectorMagnitude wind;\nprivate _windDir = (wind select 0) atan2 (wind select 1);\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    // With wind gradient\n    _windSpeed = [eyePos ACE_player, true, true, true] call EFUNC(weather,calculateWindSpeed);\n    _windSpeed = abs(cos(_playerDir - _windDir)) * _windSpeed;\n} else {\n    // Without wind gradient\n    _windSpeed = [eyePos ACE_player, false, true, true] call EFUNC(weather,calculateWindSpeed);\n};\n\nif (_windSpeed > 0.3 || {GVAR(MeasuredWindSpeed) > 0.1 && _windSpeed > 0.125}) then {\n   GVAR(MeasuredWindSpeed) = _windSpeed;\n} else {\n    GVAR(MeasuredWindSpeed) = GVAR(MeasuredWindSpeed) * 0.99;\n    if (GVAR(MeasuredWindSpeed) < 0.05) then {\n        GVAR(MeasuredWindSpeed) = 0;\n    };\n};\n\nGVAR(MeasuredWindSpeed)\n",
        "functionName": "ace_kestrel4500_fnc_measureWindSpeed"
      },
      {
        "fileName": "fnc_onCloseDialog.sqf",
        "content": "/*\n * Author: Ruthberg\n * Called if Kestrel Dialog is closed\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_kestrel4500_fnc_onCloseDialog\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nuiNamespace setVariable ['Kestrel4500_Display', nil];\nGVAR(Kestrel4500) = false;\n",
        "functionName": "ace_kestrel4500_fnc_onCloseDialog"
      },
      {
        "fileName": "fnc_onCloseDisplay.sqf",
        "content": "/*\n * Author: Ruthberg\n * Called if Kestrel Display is closed\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_kestrel4500_fnc_onCloseDisplay\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nuiNamespace setVariable ['RscKestrel4500', nil];\nGVAR(Overlay) = false;\n",
        "functionName": "ace_kestrel4500_fnc_onCloseDisplay"
      },
      {
        "fileName": "fnc_restoreUserData.sqf",
        "content": "/*\n * Author: Ruthberg\n * Reads user data from profileNamespace\n *\n * Arguments:\n * Nothing\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_kestrel4500_fnc_restore_user_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(Menu) = 0 max (profileNamespace getVariable [\"ACE_Kestrel4500_menu\", 0]) min ((count GVAR(Menus)) - 1);\nGVAR(RefHeading) = 0 max (profileNamespace getVariable [\"ACE_Kestrel4500_RefHeading\", 0]) min 359;\n",
        "functionName": "ace_kestrel4500_fnc_restoreUserData"
      },
      {
        "fileName": "fnc_storeUserData.sqf",
        "content": "/*\n * Author: Ruthberg\n * Saves user data into profileNamespace\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_kestrel4500_fnc_store_user_data\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprofileNamespace setVariable [\"ACE_Kestrel4500_menu\", GVAR(menu)];\nprofileNamespace setVariable [\"ACE_Kestrel4500_RefHeading\", GVAR(RefHeading)];\n",
        "functionName": "ace_kestrel4500_fnc_storeUserData"
      },
      {
        "fileName": "fnc_updateDisplay.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the Kestrel 4500 dialog text boxes.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"Kestrel4500_Display\")\n#define __ctrlCenterLine3 (__dsp displayCtrl 74602)\n#define __ctrlCenterLine4 (__dsp displayCtrl 74603)\n\nprivate _outputData = [] call FUNC(generateOutputData);\n\n{\n    ctrlSetText [_x , _outputData select _forEachIndex];\n} forEach [74100, 74200, 74201, 74300, 74301, 74302, 74303, 74304, 74305, 74400, 74401, 74500, 74600, 74601, 74602, 74603, 74604, 74605];\n\nif (GVAR(referenceHeadingMenu) == 1) then {\n    if (GVAR(referenceHeadingAutoSet)) then {\n        __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 0.6];\n        __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\n    } else {\n        __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\n        __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 0.6];\n    };\n} else {\n    __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\n    __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\n};\n",
        "functionName": "ace_kestrel4500_fnc_updateDisplay"
      },
      {
        "fileName": "fnc_updateImpellerState.sqf",
        "content": "/*\n * Author: Ruthberg\n * Updates the Kestrel 4500 Impeller state\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _windSpeed = call FUNC(measureWindSpeed);\n\nGVAR(ImpellerState) = GVAR(ImpellerState) + (ceil(_windSpeed) min 1) max _windSpeed;\nif (GVAR(ImpellerState) > 1000) then { GVAR(ImpellerState) = 0 };\n",
        "functionName": "ace_kestrel4500_fnc_updateImpellerState"
      },
      {
        "fileName": "fnc_updateMemory.sqf",
        "content": "/*\n * Author: Ruthberg\n * Update Memory of Kestrel\n *\n * Arguments:\n * 0: Slot <NUMBER>\n * 1: Value <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1, \"test\"] call ace_kestrel4500_fnc_updateMemory\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_slot\", \"_value\"];\nGVAR(MIN)   set [_slot, (GVAR(MIN) select _slot) min _value];\nGVAR(MAX)   set [_slot, _value max (GVAR(MAX) select _slot)];\nGVAR(TOTAL) set [_slot, (GVAR(TOTAL) select _slot) + _value];\n",
        "functionName": "ace_kestrel4500_fnc_updateMemory"
      }
    ]
  },
  {
    "component": "laser",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "\n\n[\"ACE3 Equipment\", QGVAR(LaserCodeUp), localize LSTRING(laserCodeUp),\n{\n    [1] call FUNC(keyLaserCodeChange);\n},\n{false},\n[16, [false, true, true]], false, 0] call CBA_fnc_addKeybind; // (ALT+CTRL+Q)\n\n[\"ACE3 Equipment\", QGVAR(LaserCodeDown), localize LSTRING(laserCodeDown),\n{\n\n    [-1] call FUNC(keyLaserCodeChange);\n},\n{false},\n[18, [false, true, true]], false, 0] call CBA_fnc_addKeybind; // (ALT+CTRL+E)\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (hasInterface) then {\n#include \"initKeybinds.sqf\"\n\n    GVAR(pfID) = -1;\n\n    [\"ace_settingsInitialized\", {\n        [\"turret\", LINKFUNC(showVehicleHud), false] call CBA_fnc_addPlayerEventHandler;\n        [\"vehicle\", LINKFUNC(showVehicleHud), true] call CBA_fnc_addPlayerEventHandler; // only one of these needs the retro flag\n\n        // Add UAV Control Compatibility\n        [\"ACE_controlledUAV\", {\n            params [\"_UAV\", \"_seatAI\", \"_turret\", \"_position\"];\n            TRACE_4(\"ACE_controlledUAV EH\",_UAV,_seatAI,_turret,_position);\n            if (!isNull _seatAI) then {\n                [_seatAI] call FUNC(showVehicleHud);\n            };\n        }] call CBA_fnc_addEventHandler;\n    }] call CBA_fnc_addEventHandler;\n};\n\n// Global Laser EHs\n[\"ace_laserOn\", {\n    params [\"_uuid\", \"_args\"];\n    TRACE_2(\"ace_laserOn eh\",_uuid,_args);\n    [GVAR(laserEmitters), _uuid, _args] call CBA_fnc_hashSet;\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_laserOff\", {\n    params [\"_uuid\"];\n    TRACE_1(\"ace_laserOn eh\",_uuid);\n    if ([GVAR(laserEmitters), _uuid] call CBA_fnc_hashHasKey) then {\n        [GVAR(laserEmitters), _uuid] call CBA_fnc_hashRem;\n    };\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(updateCode), {\n    params [\"_uuid\", \"_newCode\"];\n    TRACE_2(\"ace_laser_updateCode eh\",_uuid,_newCode);\n    if ([GVAR(laserEmitters), _uuid] call CBA_fnc_hashHasKey) then {\n        private _laserArray = [GVAR(laserEmitters), _uuid] call CBA_fnc_hashGet;\n        TRACE_2(\"updating\",_newCode,_laserArray select 4);\n        _laserArray set [4, _newCode];\n    };\n}] call CBA_fnc_addEventHandler;\n\n// Shows detector and mine posistions in 3d when debug is on\n#ifdef DRAW_LASER_INFO\naddMissionEventHandler [\"Draw3D\", {_this call FUNC(dev_drawVisibleLaserTargets)}];\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// Laser default variables\nACE_DEFAULT_LASER_CODE = 1111;\nACE_DEFAULT_LASER_WAVELENGTH = 1550;\nACE_DEFAULT_LASER_BEAMSPREAD = 1;\n\nGVAR(laserEmitters) = [] call CBA_fnc_hashCreate;\nGVAR(trackedLaserTargets) = [];\nGVAR(pfehID) = -1;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addLaserTarget.sqf",
        "content": "/*\n * Author: esteldunedain\n * Adds a vanilla laser target to the tracker PFH and globaly turns it on\n *\n * Argument:\n * 0: TargetObject (vanilla laser) <OBJECT>\n * 1: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [laserTarget player, player] call ace_laser_fnc_addLaserTarget;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_targetObject\", \"_vehicle\"];\nTRACE_2(\"params\",_targetObject,_vehicle);\n\n// Get the designator variables, or use defaults\nprivate _waveLength = _vehicle getVariable [QEGVAR(laser,waveLength), ACE_DEFAULT_LASER_WAVELENGTH];\nprivate _laserCode = _vehicle getVariable [QEGVAR(laser,code), ACE_DEFAULT_LASER_CODE];\nprivate _beamSpread = _vehicle getVariable [QEGVAR(laser,beamSpread), ACE_DEFAULT_LASER_BEAMSPREAD];\nTRACE_3(\"codes\",_waveLength,_laserCode,_beamSpread);\n\n// Laser method is the method ACE_Laser will use to determine from where to where it should project the designator cone\n_vehicle setVariable [QGVAR(targetObject), _targetObject, true];\n\nprivate _laserMethod = QFUNC(findLaserSource);\n\nprivate _vehicleSourceSelection = \"\";\nif (_vehicle isKindOf \"CaManBase\") then {\n    _vehicleSourceSelection = \"pilot\";\n} else {\n    { // Go through turrets on vehicle and find the laser\n        private _turretPath = _x;\n        {\n            if ((getNumber (configFile >> \"CfgWeapons\" >> _x >> \"laser\")) > 0) exitWith {\n                _vehicleSourceSelection = getText (([_vehicle, _turretPath] call CBA_fnc_getTurret) >> \"memoryPointGunnerOptics\");\n                TRACE_3(\"\",_turretPath,_x,_vehicleSourceSelection);\n            };\n        } forEach (_vehicle weaponsTurret _turretPath);\n    } forEach (allTurrets [_vehicle, true]);\n};\n\nprivate _methodArgs = [_vehicleSourceSelection];\n\nTRACE_6(\"Laser on:\",_vehicle,_laserMethod,_waveLength,_laserCode,_beamSpread,_methodArgs);\nprivate _laserUuid = [_vehicle, _vehicle, _laserMethod, _waveLength, _laserCode, _beamSpread, _methodArgs] call FUNC(laserOn);\n\nGVAR(trackedLaserTargets) pushBack [_targetObject, _vehicle, _laserUuid, _laserCode];\nTRACE_1(\"\",GVAR(trackedLaserTargets));\n\nif (GVAR(pfehID) == -1) then {\n    TRACE_1(\"starting pfeh\",count GVAR(trackedLaserTargets));\n    GVAR(pfehID) = [DFUNC(laserTargetPFH), 0, []] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_laser_fnc_addLaserTarget"
      },
      {
        "fileName": "fnc_dev_drawVisibleLaserTargets.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Argument:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_laser_fnc_dev_drawVisibleLaserTargets\n *\n * Public: No\n */\n\n\n// Dev Debug Function\n// Displays lasers and attempts to lock on to codes 1111 and 1112 from a target vehicle's view\n// On Screen Debug:\n//     Red - Vanilla Laser Targets\n//     Yellow - Array (vehicle pos/weapon) Laser Targets\n//     Green - Rays\n//     Blue - Seeker Locks\n\n#include \"script_component.hpp\"\n\n// Try searching for lasers from a given vehicle position [BLUE]:\nprivate _seekerVehicle = vehicle ace_player;\nprivate _testSeekerPosASL = AGLtoASL (_seekerVehicle modelToWorldVisual [0,0,1]);\nprivate _testSeekerDir = vectorDirVisual _seekerVehicle;\n{\n    private _code = _x;\n    private _results = [_testSeekerPosASL, _testSeekerDir, 45, 10000, [1550,1550], _code, _seekerVehicle] call FUNC(seekerFindLaserSpot);\n    private _resultPos = _results select 0;\n    if (!isNil \"_resultPos\") then {\n        // Draw lock results\n        drawLine3D [ASLtoAGL _testSeekerPosASL, ASLtoAGL _resultPos, [0,0,1,1]];\n        drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\", [0,0,1,1], (ASLtoAGL _resultPos), 1.5, 1.5, 45, format [\"%1 from %2\", _code, _results select 1], 0.5, 0.025, \"TahomaB\"];\n    };\n} forEach [1111, 1112]; // Scan at codes 1111 and 1112\n\n\n// Draw all lasers\n[GVAR(laserEmitters), {\n    //IGNORE_PRIVATE_WARNING [\"_key\", \"_value\"];\n    // TRACE_2(\"\",_key,_value);\n    _value params [\"_obj\", \"_owner\", \"_laserMethod\", \"_waveLength\", \"_laserCode\", \"_beamSpread\"];\n\n    // Draw vanila lasers [RED]\n    if (_laserMethod isEqualTo QFUNC(findLaserSource)) then { // Normal vanilla laserTarget func\n        private _targetObject = _obj getVariable [QGVAR(targetObject), objNull];\n        private _targetPosASL = getPosASL _targetObject;\n        drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\", [1,0,0,1], (ASLtoAGL _targetPosASL), 0.5, 0.5, 0, \"\", 0.5, 0.025, \"TahomaB\"];\n\n        (_value call FUNC(findLaserSource)) params [\"_laserPosASL\", \"_laserDir\"];\n        private _resultsRay = [_laserPosASL, _laserDir, _obj] call FUNC(shootRay);\n\n        private _rayPos = _resultsRay select 0;\n        if (isNil \"_rayPos\") then {\n            drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\", [1,0,0,1], (ASLtoAGL _targetPosASL), 2, 2, 0, \"Nil Ray\", 0.5, 0.025, \"TahomaB\"];\n        } else {\n            private _diff = _rayPos vectorDistance (getPosASL _targetObject); // Diff from ray position compared to actual\n            drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\", [1,0,0,1], (ASLtoAGL _rayPos), 2, 2, 0, format [\"Diff %1\",_diff], 0.5, 0.025, \"TahomaB\"];\n        };\n    };\n    // Draw array weapon lasers [YELLOW]\n    if ((_laserMethod isEqualType []) && {(count _laserMethod) == 2}) then {\n        _laserMethod params [\"_modelPosition\", \"_weaponName\"];\n        private _laserPosASL = AGLtoASL (_obj modelToWorldVisual _modelPosition);\n        drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\", [1,1,0,1], (ASLtoAGL _laserPosASL), 0.5, 0.5, 0, _weaponName, 0.5, 0.025, \"TahomaB\"];\n        private _laserDir = _obj weaponDirection _weaponName;\n        private _resultsRay = [_laserPosASL, _laserDir, _obj] call FUNC(shootRay);\n        private _rayPos = _resultsRay select 0;\n        if (!isNil \"_rayPos\") then {\n            drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\", [1,1,0,1], (ASLtoAGL _rayPos), 2, 2, 0, _weaponName, 0.5, 0.025, \"TahomaB\"];\n        };\n    };\n}] call CBA_fnc_hashEachPair;\n",
        "functionName": "ace_laser_fnc_dev_drawVisibleLaserTargets"
      },
      {
        "fileName": "fnc_findLaserSource.sqf",
        "content": "/*\n * Author: esteldunedain\n * Handler function for finding position and direction of a vanilla laser.\n *\n * Arguments:\n * 0: Vehicle (shooter of laser) <OBJECT>\n * 6: Method Args <ARRAY>\n *      0: Laser Source selection on Vehicle <STRING>\n *\n * Return Value:\n * [position, direction] <ARRAY>\n *\n * Example:\n * [player, x,x,x,x,x, [\"pilot\"]] call ace_laser_fnc_findLaserSource;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"\", \"\", \"\", \"\", \"\", \"_methodArgs\"];\n_methodArgs params [\"_ownerSelection\"];\n\n// Get the laser target object stored in the unit\nprivate _targetObject = _vehicle getVariable [QGVAR(targetObject), objNull];\nprivate _targetPos = getPosASL _targetObject;\nif (surfaceIsWater _targetPos && {(_targetPos select 2) < 0}) then {\n    // Vanilla lasers seem to give position at ocean floor heigh, even though the x and y are correct??\n    _targetPos set [2, 0.25];\n};\n\nprivate _povPos = AGLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition _ownerSelection));\nprivate _povDir = _povPos vectorFromTo _targetPos;\n\nTRACE_4(\"\",_vehicle,_targetObject,_povPos,_povDir);\n\nif(isNil \"_povPos\" || isNil \"_povDir\") exitWith {\n    WARNING_2(\"bad data [%1][%2]\",_povPos,_povDir);\n    [-1,-1]\n};\n\n[_povPos, _povDir]\n",
        "functionName": "ace_laser_fnc_findLaserSource"
      },
      {
        "fileName": "fnc_handleLaserTargetCreation.sqf",
        "content": "/*\n * Author: esteldunedain\n * Associates a newly created laser target to it's owner\n *\n * Argument:\n * 0: Vanilla Laser (base type LaserTarget) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [laserTarget player] call ace_laser_fnc_handleLaserTargetCreation;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nTRACE_1(\"params\",_this);\n[{\n    params [\"_targetObject\"];\n\n    // Only handle locally created lasers\n    if(!(local _targetObject)) exitWith {TRACE_1(\"not local\",_targetObject);};\n\n    private _owners = allUnits select {(lasertarget _x) == _targetObject};\n    if (count _owners == 1) exitWith {\n        TRACE_2(\"Laser target owner [allUnits]\", _targetObject, _owners select 0);\n        [_targetObject, _owners select 0] call FUNC(addLaserTarget);\n    };\n\n    _owners = vehicles select {(lasertarget _x) == _targetObject};\n    if (count _owners == 1) exitWith {\n        TRACE_2(\"Laser target owner [vehicles]\", _targetObject, _owners select 0);\n        [_targetObject, _owners select 0] call FUNC(addLaserTarget);\n    };\n\n    // Vehicle based laser designators won't be linked via laserTarget if the turret has \"primaryGunner = 0\"\n    // This backup method just checks the player's vic - which should be reasonably safe as we know the laserTarget is local\n    private _foundSource = false;\n    private _vehicle = vehicle ACE_player;\n    TRACE_2(\"\",_vehicle,typeOf _vehicle);\n    if ((alive ACE_player) && {_vehicle != ACE_player}) then {\n        private _turretPath = if (ACE_player == (driver _vehicle)) then {[-1]} else {ACE_player call CBA_fnc_turretPath};\n        TRACE_1(\"\",_turretPath);\n        if (!(_turretPath isEqualTo [])) then {\n            private _currentWeapon = _vehicle currentWeaponTurret _turretPath;\n            TRACE_1(\"\",_currentWeapon);\n            if ((getNumber (configFile >> \"CfgWeapons\" >> _currentWeapon >> \"laser\")) == 1) then {\n                #ifdef DEBUG_MODE_FULL\n                private _turretConfig = [_vehicle, _turretPath] call CBA_fnc_getTurret;\n                private _primaryGunner = getNumber (_turretConfig >> \"primaryGunner\");\n                TRACE_1(\"\",_primaryGunner);\n                #endif\n                TRACE_2(\"Laser target owner [backup method]\",_targetObject,_vehicle);\n                [_targetObject, _vehicle] call FUNC(addLaserTarget);\n                _foundSource = true;\n            };\n        };\n    };\n    if (!_foundSource) then {\n        WARNING_1(\"Laser target doesn't have owner\", _targetObject);\n    };\n\n}, _this] call CBA_fnc_execNextFrame;\n",
        "functionName": "ace_laser_fnc_handleLaserTargetCreation"
      },
      {
        "fileName": "fnc_keyLaserCodeChange.sqf",
        "content": "/*\n * Author: PabstMirror\n * Change the laser key code (both seeker and transmitter)\n *\n * Argument:\n * 0: Change in code <NUMBER>\n *\n * Return Value:\n * Key Handled <BOOL>\n\n * Example:\n * [1] call ace_laser_fnc_keyLaserCodeChange;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_codeChange\", 0, [0]]];\n\nTRACE_1(\"params\",_codeChange);\n\nif ((!alive ACE_player) || {!([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith))}) exitWith {false};\n\nprivate _currentShooter = objNull;\nprivate _currentWeapon = \"\";\n\nif (isNull (ACE_controlledUAV param [0, objNull])) then {\n    if (ACE_player call CBA_fnc_canUseWeapon) then {\n        _currentShooter = ACE_player;\n        _currentWeapon = currentWeapon ACE_player;\n    } else {\n        _currentShooter = vehicle ACE_player;\n        private _turretPath = if (ACE_player == (driver _currentShooter)) then {[-1]} else {ACE_player call CBA_fnc_turretPath};\n        _currentWeapon = _currentShooter currentWeaponTurret _turretPath;\n    };\n} else {\n    _currentShooter = ACE_controlledUAV select 0;\n    private _turretPath = ACE_controlledUAV select 2;\n    _currentWeapon = _currentShooter currentWeaponTurret _turretPath;\n};\n\nTRACE_2(\"\",_currentShooter,_currentWeapon);\nif (((getNumber (configFile >> \"CfgWeapons\" >> _currentWeapon >> \"laser\")) == 0) &&\n        {(getNumber (configFile >> \"CfgWeapons\" >> _currentWeapon >> QGVAR(canSelect))) == 0}) exitWith {false};\n\nprivate _oldLaserCode = _currentShooter getVariable [QGVAR(code), ACE_DEFAULT_LASER_CODE];\nprivate _newLaserCode = _oldLaserCode;\n\n// \"Four-digit code equipment settings range from 1111 to 1788\"\n// While there is a 0 or 9 in code, keep adding change\n\nif (((_codeChange < 0) && {_oldLaserCode > ACE_DEFAULT_LASER_CODE}) || {(_codeChange > 0) && {_oldLaserCode < 1788}}) then {\n    _newLaserCode = _oldLaserCode + _codeChange;\n    while {(((str _newLaserCode) find \"0\") >= 0) || {((str _newLaserCode) find \"9\") >= 0}} do {\n        _newLaserCode = _newLaserCode + _codeChange;\n    };\n};\n\nTRACE_2(\"\",_oldLaserCode,_newLaserCode);\n\nif (_oldLaserCode != _newLaserCode) then {\n    _currentShooter setVariable [QGVAR(code), _newLaserCode, true];\n};\n[format [\"%1: %2\", localize LSTRING(laserCode), _newLaserCode]] call EFUNC(common,displayTextStructured);\n\ntrue\n",
        "functionName": "ace_laser_fnc_keyLaserCodeChange"
      },
      {
        "fileName": "fnc_laserOff.sqf",
        "content": "/*\n * Author: Nou\n * Turn a laser designator off.\n *\n * Arguments:\n * 0: UUID (from laserOn) <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"yourLaserUID\"] call ace_laser_fnc_laserOff;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_uuid\"];\n\nTRACE_1(\"Sending Global Laser Off Event\",_uuid);\n\n[\"ace_laserOff\", [_uuid]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_laser_fnc_laserOff"
      },
      {
        "fileName": "fnc_laserOn.sqf",
        "content": "/*\n * Author: Nou\n * Turn a laser designator on.\n *\n * Arguments:\n * 0: Emitter <OBJECT>\n * 1: Owner <OBJECT>\n * 2: Method, can be code, which emitter and owner are passed to, a string function name, an array with a position memory point and weapon name, or an array with a position memory point, a vector begining memory point, and vector ending memory point. <STRING><CODE><ARRAY>\n * 3: Wavelength (1550nm is common eye safe) <NUMBER>\n * 4: Laser code <NUMBER>\n * 5: Beam divergence (in mils off beam center) <NUMBER>\n * 6: Method Args <ANY> (default: nil)\n *\n * Return Value:\n * UUID for sending to laserOff function <STRING>\n *\n * Example:\n * [hmg, hmg, [[0,0,1], \"HMG_static\"], 1550, 1111, 1] call ace_laser_fnc_laserOn\n * [player, player, \"ace_laser_fnc_findLaserSource\", 1550, 1111, 1, [\"pilot\"]] call ace_laser_fnc_laserOn\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n// params [[\"_emitter\", objNull, [objNull]],[\"_owner\", objNull, [objNull]],[\"_method\", \"\", [\"\", {}, []]],[\"_wavelength\", 0, [0]],[\"_code\", 0, [0]],[\"_beamSpread\", 0, [0]],\"_methodArgs\"];\n\nprivate _uuid = format[\"%1%2%3\", floor diag_tickTime, floor random 1000, floor random 10000];\nprivate _args = [_uuid, _this];\n\nTRACE_2(\"Sending Global Laser On Event\",_uuid,_this);\n\n[\"ace_laserOn\", _args] call CBA_fnc_globalEvent;\n\n_uuid;\n",
        "functionName": "ace_laser_fnc_laserOn"
      },
      {
        "fileName": "fnc_laserTargetPFH.sqf",
        "content": "/*\n * Author: esteldunedain\n * Maintains the tracked lasers, deleting any laser that is turned off\n *\n * Argument:\n * PFEH Args\n *\n * Return Value:\n * None\n *\n * Example:\n * [[], 1]] call ace_laser_fnc_laserTargetPFH;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"_pfhuid\"];\n\nGVAR(trackedLaserTargets) = GVAR(trackedLaserTargets) select {\n    _x params [\"_targetObject\", \"_owner\", \"_laserUuid\", \"_laserCode\"];\n    if ((isNull _targetObject) ||\n            {!(alive _targetObject)} ||\n            {isNull _owner} ||\n            {!(alive _owner)}) then {\n\n        // Turn off the laser in ace_laser\n        [_laserUuid] call FUNC(laserOff);\n        TRACE_1(\"Laser off:\", _laserUuid);\n        false\n    } else {\n        private _newCode = _owner getVariable [QEGVAR(laser,code), ACE_DEFAULT_LASER_CODE];\n        if (_laserCode != _newCode) then {\n            TRACE_2(\"code change\",_newCode,_laserCode);\n            [QGVAR(updateCode), [_laserUuid, _newCode]] call CBA_fnc_globalEvent;\n            _x set [3, _newCode];\n        };\n        true\n    };\n};\n\nif (GVAR(trackedLaserTargets) isEqualTo []) then {\n    TRACE_1(\"ending pfeh\",count GVAR(trackedLaserTargets));\n    [_pfhuid] call CBA_fnc_removePerFrameHandler;\n    GVAR(pfehID) = -1;\n};\n",
        "functionName": "ace_laser_fnc_laserTargetPFH"
      },
      {
        "fileName": "fnc_onLaserDesignatorDraw.sqf",
        "content": "/*\n * Author: Nou\n * Update distance when rangefinder laser is on\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_laser_fnc_onLaserDesignatorDraw\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _laserCode = ACE_player getVariable[QGVAR(code), ACE_DEFAULT_LASER_CODE];\nif (!isNil \"_laserCode\") then {\n    __LaserDesignatorIGUI_LaserCode ctrlSetText format[\"Code: %1\", [_laserCode, 4, 0, false] call CBA_fnc_formatNumber];\n};\n\nif (! (ctrlShown __LaserDesignatorIGUI_LaserOn) ) then {\n    // TODO: hide distance\n    __LaserDesignatorIGUI_ACE_Distance ctrlSetText \"----\";\n} else {\n    __LaserDesignatorIGUI_ACE_Distance ctrlSetText (ctrlText __LaserDesignatorIGUI_CA_Distance);\n};\n",
        "functionName": "ace_laser_fnc_onLaserDesignatorDraw"
      },
      {
        "fileName": "fnc_rotateVectLine.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Argument:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_laser_fnc_rotateVectline\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_map\", \"_theta\"];\n_map params [\"_p\", \"_p1\", \"_p2\", \"_q1\", \"_q2\", \"_u\", \"_d\"];\n_q1 = +_q1;\n_q2 = +_q2;\n\n/* Step 4 */\n_q2 set[0, (_q1 select 0) * cos(_theta) - (_q1 select 1) * sin(_theta)];\n_q2 set[1, (_q1 select 0) * sin(_theta) + (_q1 select 1) * cos(_theta)];\n_q2 set[2, (_q1 select 2)];\n\n/* Inverse of step 3 */\n_q1 set[0,   (_q2 select 0) * _d + (_q2 select 2) * (_u select 0)];\n_q1 set[1,   (_q2 select 1)];\n_q1 set[2, - (_q2 select 0) * (_u select 0) + (_q2 select 2) * _d];\n\n/* Inverse of step 2 */\nif (_d != 0) then {\n  _q2 set[0,   (_q1 select 0)];\n  _q2 set[1,   (_q1 select 1) * (_u select 2) / _d + (_q1 select 2) * (_u select 1) / _d];\n  _q2 set[2, - (_q1 select 1) * (_u select 1) / _d + (_q1 select 2) * (_u select 2) / _d];\n} else {\n  _q2 = _q1;\n};\n\n/* Inverse of step 1 */\n_q1 = _q2 vectorAdd _p1;\n_q1;\n",
        "functionName": "ace_laser_fnc_rotateVectLine"
      },
      {
        "fileName": "fnc_rotateVectLineGetMap.sqf",
        "content": "/*\n * Author: ACE-Team\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_laser_fnc_rotateVectLineGetMap\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_p\", \"_p1\", \"_p2\"];\n\nprivate _q2 = [];\n\n/* Step 1 */\nprivate _q1 = _p vectorDiff _p1;\nprivate _u = _p2 vectorDiff _p1;\n_u = vectorNormalized _u;\nprivate _d = sqrt((_u select 1)*(_u select 1) + (_u select 2)*(_u select 2));\n\n/* Step 2 */\nif (_d != 0) then {\n  _q2 set[0, (_q1 select 0)];\n  _q2 set[1, (_q1 select 1) * (_u select 2) / _d - (_q1 select 2) * (_u select 1) / _d];\n  _q2 set[2, (_q1 select 1) * (_u select 1) / _d + (_q1 select 2) * (_u select 2) / _d];\n} else {\n  _q2 = _q1;\n};\n\n/* Step 3 */\n_q1 set[0, (_q2 select 0) * _d - (_q2 select 2) * (_u select 0)];\n_q1 set[1, (_q2 select 1)];\n_q1 set[2, (_q2 select 0) * (_u select 0) + (_q2 select 2) * _d];\n\n[_p, _p1, _p2, _q1, _q2, _u, _d]\n",
        "functionName": "ace_laser_fnc_rotateVectLineGetMap"
      },
      {
        "fileName": "fnc_seekerFindLaserSpot.sqf",
        "content": "/*\n * Author: Nou\n * Searches for a laser spot given a seekers params.\n * Provides the interface for Missile Guidance\n *\n * Arguments:\n * 0: Position of seeker (ASL) <ARRAY>\n * 1: Direction vector (will be normalized) <ARRAY>\n * 2: Seeker FOV in degrees <NUMBER>\n * 3: Seeker max distance in meters <NUMBER>\n * 4: Seeker wavelength sensitivity range, [1550,1550] is common eye safe <ARRAY>\n * 5: Seeker laser code. <NUMBER>\n * 6: Ignore 1 (e.g. Player's vehicle) <OBJECT> (default: objNull)\n *\n * Return Value:\n * [Strongest compatible laser spot ASL pos, owner object] Nil array values if nothing found <ARRAY>\n *\n * Example:\n * [getPosASL player, [0,1,0], 90, [1500, 1500], 1111, player] call ace_laser_fnc_seekerFindLaserSpot\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(seekerFindLaserSpot);\n\nparams [\"_posASL\", \"_dir\", \"_seekerFov\", \"_seekerMaxDistance\", \"_seekerWavelengths\", \"_seekerCode\", [\"_ignoreObj1\", objNull]];\n\n_dir = vectorNormalized _dir;\n_seekerWavelengths params [\"_seekerWavelengthMin\", \"_seekerWavelengthMax\"];\n\nprivate _seekerCos = cos _seekerFov;\nprivate _seekerMaxDistSq = _seekerMaxDistance ^ 2;\n\nTRACE_6(\"\",_posASL,_dir,_seekerFov,_seekerMaxDistance,_seekerWavelengths,_seekerCode);\n\nprivate _spots = [];\nprivate _finalPos = nil;\nprivate _finalOwner = objNull;\n\n// Go through all lasers in GVAR(laserEmitters)\n{\n    _x params [\"_obj\", \"_owner\", \"_laserMethod\", \"_emitterWavelength\", \"_laserCode\", \"_divergence\"];\n    TRACE_6(\"laser\",_obj,_owner,_laserMethod,_emitterWavelength,_laserCode,_divergence);\n\n    if (alive _obj && {_emitterWavelength >= _seekerWavelengthMin} && {_emitterWavelength <= _seekerWavelengthMax} && {_laserCode == _seekerCode}) then {\n\n        private _laser = [];\n        // Find laser pos and dir of the laser depending on type\n        if (IS_STRING(_laserMethod)) then {\n            _laser = _x call (missionNamespace getVariable [_laserMethod, []]);\n        } else {\n            if (IS_CODE(_laserMethod)) then {\n                _laser = _x call _laserMethod;\n            } else {\n\n                if (IS_ARRAY(_laserMethod)) then {\n                    if (count _laserMethod == 2) then { // [modelPosition, weaponName] for _obj\n                        _laser = [AGLtoASL (_obj modelToWorldVisual (_laserMethod select 0)), _obj weaponDirection (_laserMethod select 1)];\n                    } else {\n                        if (count _laserMethod == 3) then {\n                            _laser = [AGLtoASL (_obj modelToWorldVisual (_laserMethod select 0)), (AGLtoASL (_obj modelToWorldVisual (_laserMethod select 1))) vectorFromTo (AGLtoASL (_obj modelToWorldVisual (_laserMethod select 2)))];\n                        };\n                    };\n                };\n            };\n        };\n\n        TRACE_1(\"\",_laser);\n        //Handle Weird Data Return - skips over this laser in the for loop\n        if ((_laser isEqualTo []) || {_laser isEqualTo [-1, -1]}) exitWith {WARNING_1(\"Bad Laser Return\",_laser);};\n        _laser params [[\"_laserPos\", [], [[]], 3], [\"_laserDir\", [], [[]], 3]];\n\n        if (GVAR(dispersionCount) > 0) then {\n            // Shoot a cone with dispersion\n            ([_laserPos, _laserDir, _divergence, GVAR(dispersionCount), _obj] call FUNC(shootCone)) params [\"\", \"\", \"_resultPositions\"];\n            {\n                private _testPoint = _x select 0;\n                private _testPointVector = _posASL vectorFromTo _testPoint;\n                private _testDotProduct = _dir vectorDotProduct _testPointVector;\n                if ((_testDotProduct > _seekerCos) && {(_testPoint vectorDistanceSqr _posASL) < _seekerMaxDistSq}) then {\n                    _spots pushBack [_testPoint, _owner];\n                };\n            } forEach _resultPositions;\n        } else {\n            // Shoot a single perfect ray from source to target (note, increased chance to \"miss\" on weird objects like bushes / rocks)\n            ([_laserPos, _laserDir, _obj] call FUNC(shootRay)) params [\"_resultPos\", \"_distance\"];\n            TRACE_2(\"spot\",_resultPos,_distance);\n            if (_distance > 0) then {\n                private _testPointVector = _posASL vectorFromTo _resultPos;\n                private _testDotProduct = _dir vectorDotProduct _testPointVector;\n                if ((_testDotProduct > _seekerCos) && {(_resultPos vectorDistanceSqr _posASL) < _seekerMaxDistSq}) then {\n                    _spots pushBack [_resultPos, _owner];\n                };\n            };\n        };\n    };\n} forEach (GVAR(laserEmitters) select 2); // Go through all values in hash\n\nTRACE_2(\"\",count _spots, _spots);\n\nif ((count _spots) > 0) then {\n    private _bucketList = nil;\n    private _bucketPos = nil;\n    private _c = 0;\n    private _buckets = [];\n    private _excludes = [];\n    private _bucketIndex = 0;\n\n    // Put close points together into buckets\n    while { count(_spots) != count(_excludes) && _c < (count _spots) } do {\n        scopeName \"mainSearch\";\n        {\n            if (!(_forEachIndex in _excludes)) then {\n                private _index = _buckets pushBack [_x, [_x]];\n                _excludes pushBack _forEachIndex;\n                _bucketPos = _x select 0;\n                _bucketList = (_buckets select _index) select 1;\n                breakTo \"mainSearch\";\n            };\n        } forEach _spots;\n        {\n            if (!(_forEachIndex in _excludes)) then {\n                private _testPos = (_x select 0);\n                if ((_testPos vectorDistanceSqr _bucketPos) <= 100) then {\n                    _bucketList pushBack _x;\n                    _excludes pushBack _forEachIndex;\n                };\n            };\n        } forEach _spots;\n        _c = _c + 1;\n    };\n\n    TRACE_1(\"\",_buckets);\n\n    private _finalBuckets = [];\n    private _largest = -1;\n    private _largestIndex = 0;\n    {\n        // find bucket with largest number of points we can see\n        private _index = _finalBuckets pushBack [];\n        _bucketList = _finalBuckets select _index;\n        {\n            private _testPos = (_x select 0) vectorAdd [0,0,0.05];\n            private _testIntersections = lineIntersectsSurfaces [_posASL, _testPos, _ignoreObj1];\n            if ([] isEqualTo _testIntersections) then {\n                _bucketList pushBack _x;\n            };\n        } forEach (_x select 1);\n        if ((count _bucketList) > _largest) then {\n            _largest = (count _bucketList);\n            _largestIndex = _index;\n        };\n    } forEach _buckets;\n\n    private _finalBucket = _finalBuckets select _largestIndex;\n    private _ownersHash = [] call CBA_fnc_hashCreate;\n\n    TRACE_2(\"\",_finalBucket,_finalBuckets);\n\n    if (count _finalBucket > 0) then {\n        // merge all points in the best bucket into an average point and find effective owner\n        _finalPos = [0,0,0];\n        {\n            _x params [\"_xPos\", \"_owner\"];\n            _finalPos = _finalPos vectorAdd _xPos;\n            if ([_ownersHash, _owner] call CBA_fnc_hashHasKey) then {\n                private _count = [_ownersHash, _owner] call CBA_fnc_hashGet;\n                [_ownersHash, _owner, _count + 1] call CBA_fnc_hashSet;\n            } else {\n                [_ownersHash, _owner, 1] call CBA_fnc_hashSet;\n            };\n        } forEach _finalBucket;\n\n        _finalPos = _finalPos vectorMultiply (1 / (count _finalBucket));\n\n        private _maxOwnerCount = -1;\n\n        [_ownersHash, {\n            //IGNORE_PRIVATE_WARNING [\"_key\", \"_value\"];\n            if (_value > _maxOwnerCount) then {\n                _finalOwner = _key;\n            };\n        }] call CBA_fnc_hashEachPair;\n    };\n};\n\nEND_COUNTER(seekerFindLaserSpot);\n\n#ifdef DRAW_LASER_INFO\nif (isNil \"_finalPos\") then {\n    drawIcon3D [\"\\A3\\ui_f\\data\\map\\vehicleicons\\iconMan_ca.paa\", [0.9,1,0,1], (ASLtoAGL _posASL), 1, 1, 0, format [\"Seeker: %1\", _seekerCode], 0.5, 0.025, \"TahomaB\"];\n} else {\n    drawIcon3D [\"\\A3\\ui_f\\data\\map\\vehicleicons\\iconManAT_ca.paa\", [0.5,1,0,1], (ASLtoAGL _posASL), 1, 1, 0, format [\"Seeker: %1\", _seekerCode], 0.5, 0.025, \"TahomaB\"];\n    drawLine3D [ASLtoAGL _posASL, ASLtoAGL _finalPos, [0.5,1,0,1]];\n};\n#endif\n\nTRACE_2(\"return\",_finalPos,_finalOwner);\nif (isNil \"_finalPos\") exitWith {[nil, _finalOwner]};\n[_finalPos, _finalOwner];\n",
        "functionName": "ace_laser_fnc_seekerFindLaserSpot"
      },
      {
        "fileName": "fnc_shootCone.sqf",
        "content": "/*\n * Author: Nou\n * Shoots multiple rays in a dispersion pattern.\n *\n * Arguments:\n * 0: Origin position ASL <ARRAY>\n * 1: Direction (normalized) <ARRAY>\n * 2: Divergence (mils) <NUMBER> (default: 0.3)\n * 3: Count at each divergence level <NUMBER> (default: 3)\n * 4: Ignore vehicle 1 (e.g. Player's vehicle) <OBJECT> (default: objNull)\n *\n * Return Value:\n * [_longestReturn, _shortestReturn, _resultPositions] <ARRAY>\n *\n * Example:\n * [getPosASL player, [0,1,0]] call ace_laser_fnc_shootCone\n *\n * Public: No\n */\n//#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(shootCone);\n\nparams [\"_pos\", \"_vec\", [\"_divergence\", 0.3], [\"_count\", 3], [\"_ignoreObj1\", objNull]];\n\nprivate _longestReturn = -1000000000;\nprivate _shortestReturn = 1000000000;\nprivate _resultPositions = [];\nprivate _p1 = [0,0,0];\nprivate _p2 = +_vec;\nprivate _p = (_vec call CBA_fnc_vect2polar);\nprivate _v = [(_p select 0), (_p select 1), (_p select 2)+90] call CBA_fnc_polar2vect;\nprivate _cp = _vec vectorCrossProduct _v;\n\nprivate _vecRotateMap = [_cp, _p1, _p2] call FUNC(rotateVectLineGetMap);\n\n// Check first with a perfect ray to the center\nprivate _result = [_pos, _vec, _ignoreObj1] call FUNC(shootRay);\nprivate _resultPos = _result select 0;\n\nif (!isNil \"_resultPos\") then {\n    private _distance = _result select 1;\n    if (_distance < _shortestReturn) then { _shortestReturn = _distance; };\n    if (_distance > _longestReturn) then { _longestReturn = _distance; };\n    _resultPositions pushBack _result;\n};\n\nprivate _pos2 = _pos vectorAdd (_vec vectorMultiply 1000);\n// Try at 3 radius (full, half, quarter of specified divergence)\n{\n    private _radOffset = random 360;\n    for \"_i\" from 1 to ceil(_count*_x) do { // Will always do at least 1\n        private _offset = [_vecRotateMap, (((360/_count)*_i)+_radOffset) mod 360] call FUNC(rotateVectLine);\n        private _offsetPos = _pos2 vectorAdd (_offset vectorMultiply (_divergence*_x));\n\n        private _offsetVector = _pos vectorFromTo _offsetPos;\n        _result = [_pos, _offsetVector, _ignoreObj1] call FUNC(shootRay);\n        _resultPos = _result select 0;\n        if (!isNil \"_resultPos\") then {\n            private _distance = _result select 1;\n            if (_distance < _shortestReturn) then { _shortestReturn = _distance; };\n            if (_distance > _longestReturn) then { _longestReturn = _distance; };\n            _resultPositions pushBack _result;\n        };\n    };\n} forEach [1,0.5,0.25];\n\nEND_COUNTER(shootCone);\n\n[_longestReturn, _shortestReturn, _resultPositions];\n",
        "functionName": "ace_laser_fnc_shootCone"
      },
      {
        "fileName": "fnc_shootRay.sqf",
        "content": "/*\n * Author: Nou, PabstMirror\n * Shoots a ray from a source to a direction and finds first intersction and distance.\n *\n * Arguments:\n * 0: Origin position ASL <ARRAY>\n * 1: Direction (normalized) <ARRAY>\n * 2: Ignore 1 (e.g. Player's vehicle) <OBJECT> (default: objNull)\n * 2: Ignore 2 (e.g. Player's vehicle) <OBJECT> (default: objNull)\n *\n * Return Value:\n * [posASL, distance] - pos will be nil if no intersection <ARRAY>\n *\n * Example:\n * [getPosASL player, [0,1,0], player] call ace_laser_fnc_shootRay\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(shootRay);\n\nparams [\"_posASL\", \"_dir\", [\"_ignoreVehicle1\", objNull], [\"_ignoreVehicle2\", objNull]];\n// TRACE_2(\"ray origin:\", _posASL, _dir);\n\nprivate _distance = 0;\nprivate _resultPos = nil;\n\nprivate _farPoint = _posASL vectorAdd (_dir vectorMultiply 10000);\nprivate _intersects = lineIntersectsSurfaces [_posASL, _farPoint, _ignoreVehicle1, _ignoreVehicle2];\n// workaround for lineIntersectsSurfaces using a hardcoded max distance of 5000m. New max distance 15000m\nif (_intersects isEqualTo []) then {\n    _intersects = lineIntersectsSurfaces [_posASL vectorAdd (_dir vectorMultiply 5000), _farPoint vectorAdd (_dir vectorMultiply 5000), _ignoreVehicle1, _ignoreVehicle2];\n    if (_intersects isEqualTo []) then {\n        _intersects = lineIntersectsSurfaces [_posASL vectorAdd (_dir vectorMultiply 10000), _farPoint vectorAdd (_dir vectorMultiply 10000), _ignoreVehicle1, _ignoreVehicle2];\n    };\n};\n\nif (!(_intersects isEqualTo [])) then {\n    (_intersects select 0) params [\"_intersectPosASL\", \"\", \"_intersectObject\"];\n    // Move back slightly to prevents issues with it going below terrain\n    _distance = (_posASL vectorDistance _intersectPosASL) - 0.005;\n    _resultPos = _posASL vectorAdd (_dir vectorMultiply _distance);\n};\n\nTRACE_3(\"\", _resultPos, _distance, _intersects);\n\n#ifdef DRAW_LASER_INFO\nif !(isNil \"_resultPos\") then {\n    private _text = [_distance, 4, 0] call CBA_fnc_formatNumber;\n    drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [0, 1, 0, 1], ASLtoAGL _resultPos, 0.5, 0.5, 0, _text, 0.4, 0.025, \"TahomaB\"];\n    drawLine3D [ASLtoAGL _posASL, ASLtoAGL _resultPos, [0,1,0,1]];\n};\n#endif\n\nEND_COUNTER(shootRay);\n[_resultPos, _distance];\n",
        "functionName": "ace_laser_fnc_shootRay"
      },
      {
        "fileName": "fnc_showVehicleHud.sqf",
        "content": "/*\n * Author: PabstMirror\n * Shows the laser hud when vehicle is equiped with the weapon.\n * Shows laser code, fire mode and seeker status.\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * Nothing\n *\n * Example:\n * [player] call ace_laser_fnc_showVehicleHud\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\"];\nTRACE_1(\"showHud\",_player);\n\nprivate _enabled = false;\nprivate _vehicle = vehicle _player;\nprivate _turretPath = [-1];\n\nif ((alive _player) && {_player != _vehicle}) then {\n    if (_player != (driver _vehicle)) then {\n        _turretPath = _player call CBA_fnc_turretPath\n    };\n    {\n        if ((getNumber (configFile >> \"CfgWeapons\" >> _x >> QGVAR(showHud))) == 1) then {\n            TRACE_1(\"showHud\",_x);\n            _enabled = true;\n        };\n    } forEach (_vehicle weaponsTurret _turretPath);\n};\n\nif ((!_enabled) && (GVAR(pfID) < 0)) exitWith {TRACE_2(\"Disabled - No Change\",_enabled,GVAR(pfID));};\n\nTRACE_2(\"Cleaning up old pfeh and display\",_enabled,GVAR(pfID));\n[GVAR(pfID)] call CBA_fnc_removePerFrameHandler;\nif (!isNull (uiNamespace getVariable [QGVAR(display), displayNull])) then {\n    ([QGVAR(modeDisplay)] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n};\nGVAR(pfID) = -1;\n\nif (!_enabled) exitWith {TRACE_2(\"Disabled - Now Off\",_enabled,GVAR(pfID));};\n\nTRACE_2(\"Enabled - Adding PFEH\",_enabled,GVAR(pfID));\n\nprivate _adjustDown = false; // Flares display will block ours, if present just move ours down a bit\n{\n    if ((getText (configFile >> \"CfgWeapons\" >> _x >> \"simulation\")) == \"cmlauncher\") exitWith {_adjustDown = true};\n} forEach (_vehicle weaponsTurret _turretPath);\n\nprivate _turretConfig = [_vehicle, _turretPath] call CBA_fnc_getTurret;\nprivate _seekerSource = getText (_turretConfig >> \"memoryPointGunnerOptics\");\nTRACE_3(\"\",_adjustDown,_seekerSource,_vehicle selectionPosition _seekerSource);\n\nGVAR(pfID) = [{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_vehicle\", \"_turretPath\", \"_seekerSource\", \"_adjustDown\"];\n\n    // Restart display if null (not just at start, this will happen periodicly)\n    if (isNull (uiNamespace getVariable [QGVAR(display), displayNull])) then {\n        TRACE_1(\"creating display\",_this);\n        ([QGVAR(modeDisplay)] call BIS_fnc_rscLayer) cutRsc [QGVAR(modeDisplay), \"PLAIN\", 1, false];\n        if (_adjustDown) then {\n            private _ctrl = (uiNamespace getVariable [QGVAR(display), displayNull]) displayCtrl IDC_MODECONTROLGROUP;\n            private _pos = ctrlPosition _ctrl;\n            _pos set [1, (_pos select 1) + ((((safezoneW / safezoneH) min 1.2) / 1.2) / 25)];\n            _ctrl ctrlSetPosition _pos;\n            _ctrl ctrlCommit 0;\n        };\n    };\n\n    private _currentWeapon = _vehicle currentWeaponTurret _turretPath;\n    private _showLockMode = (getNumber (configFile >> \"CfgWeapons\" >> _currentWeapon >> QGVAR(showHud))) == 1;\n\n    private _ctrlGroup = (uiNamespace getVariable [QGVAR(display), displayNull]) displayCtrl 1000;\n\n    if (!_showLockMode) exitWith {\n        _ctrlGroup ctrlShow false;\n    };\n    _ctrlGroup ctrlShow true;\n\n    private _ctrlText = (uiNamespace getVariable [QGVAR(display), displayNull]) displayCtrl IDC_ATTACKMODE;\n    private _ctrlCode = (uiNamespace getVariable [QGVAR(display), displayNull]) displayCtrl IDC_LASERCODE;\n    private _ctrlIcon = (uiNamespace getVariable [QGVAR(display), displayNull]) displayCtrl IDC_LASERICON;\n\n    // Do Laser Scan:\n    private _ammo = getText (configFile >> \"CfgMagazines\" >> _vehicle currentMagazineTurret _turretPath >> \"ammo\");\n    private _laserSource = AGLtoASL (_vehicle modelToWorld (_vehicle selectionPosition _seekerSource));\n    private _laserCode = _vehicle getVariable [QEGVAR(laser,code), ACE_DEFAULT_LASER_CODE];\n    private _seekerAngle = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ace_missileguidance\" >> \"seekerAngle\");\n    private _seekerMaxRange = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ace_missileguidance\" >> \"seekerMaxRange\");\n    private _laserResult = [_laserSource, vectorDir _vehicle, _seekerAngle, _seekerMaxRange, [ACE_DEFAULT_LASER_WAVELENGTH,ACE_DEFAULT_LASER_WAVELENGTH], _laserCode, _vehicle] call EFUNC(laser,seekerFindLaserSpot);\n    private _foundTargetPos = _laserResult select 0;\n    private _haveLock = !isNil \"_foundTargetPos\";\n\n    private _defaultAttackProfile = getText (configFile >> \"CfgAmmo\" >> _ammo >> \"ace_missileguidance\" >> \"defaultAttackProfile\");\n    private _vehicleLockMode = _vehicle getVariable [QEGVAR(missileguidance,attackProfile), _defaultAttackProfile];\n\n    _modeShort = if (_haveLock) then {\n        getText (configFile >> QEGVAR(missileguidance,AttackProfiles) >> _vehicleLockMode >> \"nameLocked\");\n    } else {\n        getText (configFile >> QEGVAR(missileguidance,AttackProfiles) >> _vehicleLockMode >> \"name\");\n    };\n\n    _ctrlIcon ctrlSetTextColor ([[0,0,0,0.25],[1,0,0,0.75]] select _haveLock);\n    _ctrlText ctrlSetText _modeShort;\n    _ctrlCode ctrlSetText format [\"CODE: %1\", _laserCode];\n\n}, 0.1, [_vehicle, _turretPath, _seekerSource, _adjustDown]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_laser_fnc_showVehicleHud"
      }
    ]
  },
  {
    "component": "laserpointer",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\n// fixes laser when being captured. Needed, because the selectionPosition of the right hand is used\n[QEGVAR(captives,setHandcuffed), {if (_this select 1) then {(_this select 0) action [\"GunLightOff\", _this select 0]};}] call CBA_fnc_addEventHandler;\n\nif (!hasInterface) exitWith {};\n\nGVAR(nearUnits) = [];\nGVAR(index) = -1;\nGVAR(laserClassesCache) = [] call CBA_fnc_createNamespace;\nGVAR(redLaserUnits) = [];\nGVAR(greenLaserUnits) = [];\n\n[\"ace_settingsInitialized\", {\n    // If not enabled, dont't add draw eventhandler or PFEH (for performance)\n    if (!GVAR(enabled)) exitWith {\n        [\"CBA_attachmentSwitched\", {\n            params [\"_unit\", \"_prevItem\", \"_newItem\", \"_currWeaponType\"];\n            TRACE_4(\"CBA_attachmentSwitched eh\",_unit,_prevItem,_newItem,_currWeaponType);\n            if ((getNumber (configFile >> \"CfgWeapons\" >> _newItem >> \"ACE_laserpointer\")) > 0) then {\n                TRACE_1(\"removing ACE_laserpointer\",getNumber (configFile >> \"CfgWeapons\" >> _newItem >> \"ACE_laserpointer\"));\n                [1, \"prev\"] call CBA_accessory_fnc_switchAttachment;\n            };\n        }] call CBA_fnc_addEventHandler;\n    };\n\n    [{\n        private _oldNearUnits = GVAR(nearUnits);\n        GVAR(nearUnits) = call FUNC(getNearUnits);\n\n        // remove units that moved away\n        {\n            GVAR(redLaserUnits) deleteAt (GVAR(redLaserUnits) find _x);\n            GVAR(greenLaserUnits) deleteAt (GVAR(greenLaserUnits) find _x);\n        } forEach (_oldNearUnits - GVAR(nearUnits));\n    }, 5, []] call CBA_fnc_addPerFrameHandler;\n\n\n    private _fnc_processUnit = {\n        params [\"_unit\"];\n\n        private _weapon = currentWeapon _unit;\n        if (!(_unit isFlashlightOn _weapon)) exitWith {\n            GVAR(redLaserUnits) deleteAt (GVAR(redLaserUnits) find _unit);\n            GVAR(greenLaserUnits) deleteAt (GVAR(greenLaserUnits) find _unit);\n        };\n        \n        private _laser = [(_unit weaponAccessories _weapon) select 1] param [0, \"\"];\n        if (_laser isEqualTo \"\") exitWith {\n            GVAR(redLaserUnits) deleteAt (GVAR(redLaserUnits) find _unit);\n            GVAR(greenLaserUnits) deleteAt (GVAR(greenLaserUnits) find _unit);\n        };\n\n        private _laserID = GVAR(laserClassesCache) getVariable _laser;\n\n        if (isNil \"_laserID\") then {\n            _laserID = getNumber (configFile >> \"CfgWeapons\" >> _laser >> \"ACE_laserpointer\");\n            GVAR(laserClassesCache) setVariable [_laser, _laserID];\n        };\n        TRACE_3(\"\",_weapon,_laser,_laserID);\n\n        if (_laserID isEqualTo 1) exitWith {\n            GVAR(redLaserUnits) pushBackUnique _unit;\n            GVAR(greenLaserUnits) deleteAt (GVAR(greenLaserUnits) find _unit);\n        };\n\n        if (_laserID isEqualTo 2) exitWith {\n            GVAR(greenLaserUnits) pushBackUnique _unit;\n            GVAR(redLaserUnits) deleteAt (GVAR(redLaserUnits) find _unit);\n        };\n    };\n\n    // custom scheduler\n    [{\n        params [\"_fnc_processUnit\"];\n\n        ACE_player call _fnc_processUnit;\n\n        GVAR(index) = GVAR(index) + 1;\n        private _unit = GVAR(nearUnits) param [GVAR(index), objNull];\n\n        if (isNull _unit) exitWith {\n            GVAR(index) = -1;\n        };\n\n        _unit call _fnc_processUnit;\n    }, 0.1, _fnc_processUnit] call CBA_fnc_addPerFrameHandler;\n\n    addMissionEventHandler [\"Draw3D\", {call FUNC(onDraw)}];\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n[\"visionMode\", {\n    params [\"\", \"_visionMode\"];\n\n    GVAR(isIR) = _visionMode isEqualTo 1;\n    GVAR(isTI) = _visionMode isEqualTo 2;\n}] call CBA_fnc_addPlayerEventHandler;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_drawLaserpoint.sqf",
        "content": "/*\n * Author: commy2 and esteldunedain\n * Draw a Laser Point\n *\n * Arguments:\n * 0: Target unit <OBJECT>\n * 1: Range <NUMBER>\n * 2: is Green <BOOL>\n * 3: Brightness <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, 10, false, 2] call ace_laserpointer_fnc_drawLaserpoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_range\", \"_isGreen\", \"_brightness\"];\n\nprivate _unit = ACE_player;\n\nprivate _p0 = AGLToASL (_target modelToWorldVisual (_target selectionPosition \"righthand\"));\n\n// Find a system of orthogonal reference vectors\n// _v1 points in the direction of the weapon\n// _v2 points to the right of the weapon\n// _v3 points to the top side of the weapon\nprivate _v1 = _target weaponDirection currentWeapon _target;\nprivate _v2 = vectorNormalized (_v1 vectorCrossProduct [0,0,1]);\nprivate _v3 = _v2 vectorCrossProduct _v1;\n\n// Offset over the 3 reference axis\n// This offset could eventually be configured by weapon in the config\n#define OFFV1 0.31\n#define OFFV2 0\n#define OFFV3 0.08\n\n// Offset _p0, the start of the laser\n_p0 = _p0 vectorAdd (_v1 vectorMultiply OFFV1) vectorAdd (_v3 vectorMultiply OFFV3) vectorAdd (_v2 vectorMultiply OFFV2);\n\n// Calculate _p1, the potential end of the laser\nprivate _p1 = _p0 vectorAdd (_v1 vectorMultiply _range);\n\nprivate _pL = lineIntersectsSurfaces [_p0, _p1, _unit, vehicle _unit] select 0 select 0;\n\n// no intersection found, quit\nif (isNil \"_pL\") exitWith {};\n\nprivate _distance = _p0 vectorDistance _pL;\n\n//systemChat str _distance;\nif (_distance < 0.5) exitWith {};\n\n_pL = _p0 vectorAdd (_v1 vectorMultiply _distance);\n\nprivate _pL2 = _p0 vectorAdd (_v1 vectorMultiply (_distance - 0.5));\n\n_pL = ASLtoAGL _pL;\n\n/*\ndrawLine3D [\n    _p0,\n    _pL,\n    [[1,0,0,1], [0,1,0,1]] select _isGreen\n];\n*/\n\n//systemChat str [_target, \"FIRE\"] intersect [_camPos, _pL];\n\nprivate _camPos = positionCameraToWorld [0,0,0.2];\n\nif (count ([_target, \"FIRE\"] intersect [_camPos, _pL]) > 0) exitWith {};\nif (count ([_unit, \"FIRE\"] intersect [_camPos, _pL]) > 0) exitWith {};\n\n// Convert _camPos to ASL\n_camPos = AGLToASL _camPos;\n\nif (terrainIntersectASL [_camPos, _pL2]) exitWith {};\nif (lineIntersects [_camPos, _pL2]) exitWith {};\n\nprivate _size = 2 * sqrt (1 / _distance) * (call EFUNC(common,getZoom));\n\ndrawIcon3D [\n    format [\"\\a3\\weapons_f\\acc\\data\\collimdot_%1_ca.paa\", [\"red\", \"green\"] select _isGreen],\n    [[1,0.25,0.25,0.6*_brightness], [0.25,1,0.25,0.5*_brightness]] select _isGreen,\n    _pL,\n    _size,\n    _size,\n    45,\n    \"\",\n    0,\n    0.05\n];\n",
        "functionName": "ace_laserpointer_fnc_drawLaserpoint"
      },
      {
        "fileName": "fnc_getNearUnits.sqf",
        "content": "/*\n * Author: commy2\n * Reports near units.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Near Units <ARRAY>\n *\n * Example:\n * call ACE_laserpointer_fnc_getNearUnits\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _camPosAGL = positionCameraToWorld [0, 0, 0];\n\n// handle RHS / bugged vehicle slots\nif !((_camPosAGL select 0) isEqualType 0) exitWith { [] };\n\nprivate _nearUnits = [];\n\n{\n    _nearUnits append crew _x;\n} forEach nearestObjects [_camPosAGL, [\"AllVehicles\"], MAX_LASER_RANGE];\n\n_nearUnits\n",
        "functionName": "ace_laserpointer_fnc_getNearUnits"
      },
      {
        "fileName": "fnc_onDraw.sqf",
        "content": "/*\n * Author: commy2\n * Draw the visible laser beams of all cached units.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_laserpointer_fnc_onDraw\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (count GVAR(redLaserUnits) + count GVAR(greenLaserUnits) > 0 && {!GVAR(isTI)}) then {\n    private _brightness = 2 - call EFUNC(common,ambientBrightness);\n\n    {\n        // red laser. draw green dot anyway in IR mode\n        [_x, 100, GVAR(isIR), _brightness] call FUNC(drawLaserpoint);\n    } count GVAR(redLaserUnits);\n\n    {\n        // green laser\n        [_x, 100, true, _brightness] call FUNC(drawLaserpoint);\n    } count GVAR(greenLaserUnits);\n};\n",
        "functionName": "ace_laserpointer_fnc_onDraw"
      }
    ]
  },
  {
    "component": "logistics_uavbattery",
    "files": [
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canRefuelUAV.sqf",
        "content": "/*\n * Author: marc_book\n * Tests if unit can refuel the target UAV\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: UAV <OBJECT>\n *\n * Return Value:\n * Can the player rechange the UAV <BOOL>\n *\n * Example:\n * [player, theUAV] call ace_logistics_uavbattery_fnc_canRefuelUAV\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\"];\n\n(\"ACE_UAVBattery\" in (items _caller)) && {(fuel _target) < 1} && {(speed _target) < 1} && {!(isEngineOn _target)} && {(_target distance _caller) <= 4}\n",
        "functionName": "ace_logistics_uavbattery_fnc_canRefuelUAV"
      },
      {
        "fileName": "fnc_refuelUAV.sqf",
        "content": "/*\n * Author: marc_book\n * Starts refueling/recharging the 'Dartar' UAVs\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: UAV <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, theUAV] call ace_logistics_uavbattery_fnc_refuelUAV\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_caller\", \"_target\"];\n\nif (!(_this call FUNC(canRefuelUAV))) exitWith {};\n\nprivate _onFinish = {\n    (_this select 0) params [\"_caller\", \"_target\"];\n    _caller removeItem \"ACE_UAVBattery\";\n    playSound3D [QUOTE(PATHTO_R(sounds\\exchange_battery.ogg)), objNull, false, getPosASL _caller, 1, 1, 10];\n      [QEGVAR(common,setFuel), [_target, 1], [_target]] call CBA_fnc_targetEvent; //setFuel is local\n};\n\nprivate _onFailure = {\n    (_this select 0) params [\"_caller\", \"_target\"];\n    [_caller, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\n};\n\n[_caller, \"AinvPknlMstpSnonWnonDr_medic5\", 0] call EFUNC(common,doAnimation);\n\n[10, [_caller, _target], _onFinish, _onFailure, (localize LSTRING(Battery_Recharge)), {(_this select 0) call FUNC(canRefuelUAV)}] call EFUNC(common,progressBar);\n",
        "functionName": "ace_logistics_uavbattery_fnc_refuelUAV"
      }
    ]
  },
  {
    "component": "logistics_wirecutter",
    "files": [
      {
        "fileName": "XEH_clientInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ace_interactMenuOpened\", {_this call FUNC(interactEH)}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_cutDownFence.sqf",
        "content": "/*\n * Author: gpgpgpgp, edited by commy2, PabstMirror\n * Starts cutting down a fence\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fence <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, berlinWall] call ace_logistics_wirecutter_fnc_cutDownFence\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_fenceObject\"];\nTRACE_2(\"params\",_unit,_fenceObject);\n\nif (_unit != ACE_player) exitWith {};\n\nprivate _timeToCut = if ([_unit] call EFUNC(common,isEngineer)) then {7.5} else {11};\n\nif !(_unit call EFUNC(common,isSwimming)) then {\n    [_unit, \"AinvPknlMstpSnonWnonDr_medic5\", 0] call EFUNC(common,doAnimation);\n};\n\nprivate _onCompletion = {\n    TRACE_1(\"_onCompletion\",_this);\n    (_this select 0) params [\"_fenceObject\", \"\", \"_unit\"];\n    _fenceObject setdamage 1;\n    if !(_unit call EFUNC(common,isSwimming)) then {\n        [_unit, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\n    };\n};\n\nprivate _onFail = {\n    TRACE_1(\"_onFail\", _this);\n    (_this select 0) params [\"\", \"\", \"_unit\"];\n    if !(_unit call EFUNC(common,isSwimming)) then {\n        [_unit, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\n    };\n};\n\nprivate _progressCheck = {\n    params [\"_args\", \"_passedTime\"];\n    _args params [\"_fenceObject\", \"_lastSoundEffectTime\", \"_unit\"];\n\n    if (_passedTime > (_lastSoundEffectTime + SOUND_CLIP_TIME_SPACEING)) then {\n        playSound3D [QUOTE(PATHTO_R(sound\\wirecut.ogg)), objNull, false, (getPosASL _unit), 3, 1, 10];\n        _args set [1, _passedTime];\n    };\n\n    ((!isNull _fenceObject) && {(damage _fenceObject) < 1} && {(\"ACE_wirecutter\" in (items _unit))})\n};\n\n[_timeToCut, [_fenceObject,0,_unit], _onCompletion, _onFail, localize LSTRING(CuttingFence), _progressCheck, [\"isNotSwimming\"]] call EFUNC(common,progressBar);\n\n[\"ace_wireCuttingStarted\", [_unit, _fenceObject]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_logistics_wirecutter_fnc_cutDownFence"
      },
      {
        "fileName": "fnc_interactEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * When interact_menu starts rendering (from \"interact_keyDown\" event)\n *\n * Arguments:\n * Interact Menu Type (0 - world, 1 - self) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [0] call ace_logistics_wirecutter_fnc_interactEH\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_interactionType\"];\n\n//Ignore self-interaction menu or mounted vehicle interaction\nif ((_interactionType != 0) || {(vehicle ACE_player) != ACE_player}) exitWith {};\n\n//for performance only do stuff it they have a wirecutter item\n//(if they somehow get one durring keydown they'll just have to reopen)\nif (!(\"ACE_wirecutter\" in (items ace_player))) exitWith {};\n\nTRACE_1(\"Starting wire-cut action PFEH\",_interactionType);\n\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_setPosition\", \"_addedHelpers\", \"_fencesHelped\"];\n\n    if (!EGVAR(interact_menu,keyDown)) then {\n        {deleteVehicle _x; nil} count _addedHelpers;\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    } else {\n        // Prevent Rare Error when ending mission with interact key down:\n        if (isNull ace_player) exitWith {};\n\n        //If player moved >5 meters from last pos, then rescan\n        if (((getPosASL ace_player) distance _setPosition) > 5) then {\n\n            private _fncStatement = {\n                params [\"\", \"_player\", \"_attachedFence\"];\n                [_player, _attachedFence] call FUNC(cutDownFence);\n            };\n            private _fncCondition = {\n                params [\"_helper\", \"_player\", \"_attachedFence\"];\n                if (!([_player, _attachedFence, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith))) exitWith {false};\n                ((!isNull _attachedFence) && {(damage _attachedFence) < 1} && {(\"ACE_wirecutter\" in (items _player))} && {\n                    //Custom LOS check for fence\n                    private _headPos = ACE_player modelToWorldVisual (ACE_player selectionPosition \"pilot\");\n                    ((!(lineIntersects [AGLtoASL _headPos, AGLtoASL (_helper modelToWorldVisual [0,0,1.25]), _attachedFence, ACE_player])) ||\n                    {!(lineIntersects [AGLtoASL _headPos, getPosASL _attachedFence, _attachedFence, ACE_player])})\n                })\n            };\n\n            {\n                if (!(_x in _fencesHelped)) then {\n                    if ([_x] call FUNC(isFence)) then {\n                        _fencesHelped pushBack _x;\n                        private _helper = \"ACE_LogicDummy\" createVehicleLocal (getpos _x);\n                        private _action = [QGVAR(helperCutFence), (localize LSTRING(CutFence)), QPATHTOF(ui\\wirecutter_ca.paa), _fncStatement, _fncCondition, {}, _x, {[0,0,0]}, 5.5, [false, false, false, false, true]] call EFUNC(interact_menu,createAction);\n                        [_helper, 0, [],_action] call EFUNC(interact_menu,addActionToObject);\n                        _helper setPosASL ((getPosASL _x) vectorAdd [0,0,1.25]);\n                        _addedHelpers pushBack _helper;\n                    };\n                };\n                nil\n            } count nearestObjects [ace_player, [], 15];\n\n            _args set [0, (getPosASL ace_player)];\n        };\n    };\n}, 0.1, [((getPosASL ace_player) vectorAdd [-100,0,0]), [], []]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_logistics_wirecutter_fnc_interactEH"
      },
      {
        "fileName": "fnc_isFence.sqf",
        "content": "/*\n * Author: PabstMirror\n * Checks if object is a fence.  Should work on any fence type, even (typeOf == \"\").\n * Call is fairly expensive because of all of the string checking.\n *\n * Arguments:\n * 0: An Object To Test <OBJECT>\n *\n * Return Value:\n * Is it a fence <BOOL>\n *\n * Example:\n * [aFence] call ace_logistics_wirecutter_fnc_isFence\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\nTRACE_1(\"params\",_object);\n\nprivate _typeOf = typeOf _object;\n\nprivate _returnValue = if (_typeOf != \"\") then {\n    //If the fence has configEntry we can check it directly\n    (1 == (getNumber (configFile >> \"CfgVehicles\" >> _typeOf >> QGVAR(isFence))));\n} else {\n    //Check the p3d name against list (in script_component.hpp)\n    ((getModelInfo _object) select 0) in FENCE_P3DS;\n};\n\n_returnValue\n",
        "functionName": "ace_logistics_wirecutter_fnc_isFence"
      }
    ]
  },
  {
    "component": "magazinerepack",
    "files": [
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_getMagazineChildren.sqf",
        "content": "/*\n * Author: PabstMirror, commy2, esteldunedain, Ruthberg\n * Gets magazine children for interaciton menu.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player <OBJECT>\n *\n * Return Value:\n * ChildActions <ARRAY>\n *\n * Example:\n * [player, player] call ace_magazinerepack_fnc_getMagazineChildren\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_player\"];\n\n// get all mags and ammo count\nprivate _unitMagazines = [];\nprivate _unitMagCounts = [];\n{\n    _x params [\"_xClassname\", \"_xCount\", \"_xLoaded\", \"_xType\"];\n\n    private _xFullMagazineCount = getNumber (configFile >> \"CfgMagazines\" >> _xClassname >> \"count\");\n\n    //for every partial magazine, that is either in inventory or can be moved there\n    if ((_xCount < _xFullMagazineCount) && {_xCount > 0} && {(!_xLoaded) || {_player canAdd _xClassname}}) then {\n        private _index = _unitMagazines find _xClassname;\n        if (_index == -1) then {\n            _unitMagazines pushBack _xClassname;\n            _unitMagCounts pushBack [_xCount];\n        } else {\n            (_unitMagCounts select _index) pushBack _xCount;\n        };\n    };\n} forEach (magazinesAmmoFull _player);\n\n//Create the action children for all appropriate magazines\nprivate _actions = [];\n{\n    if ((count (_unitMagCounts select _forEachIndex)) >= 2) then {// Ignore invalid magazines types (need 2+ partial mags to do anything)\n        private _displayName = getText (configFile >> \"CfgMagazines\" >> _x >> \"displayName\");\n        private _picture = getText (configFile >> \"CfgMagazines\" >> _x >> \"picture\");\n\n        private _action = [_x, _displayName, _picture, {_this call FUNC(startRepackingMagazine)}, {true}, {}, _x] call EFUNC(interact_menu,createAction);\n        _actions pushBack [_action, [], _player];\n    };\n} forEach _unitMagazines;\n\n_actions\n",
        "functionName": "ace_magazinerepack_fnc_getMagazineChildren"
      },
      {
        "fileName": "fnc_magazineRepackFinish.sqf",
        "content": "/*\n * Author: PabstMirror (based on repack from commy2, esteldunedain, Ruthberg)\n * Simulates repacking a set of magazines.\n * Returns the timing and magazines counts at every stage.\n *\n * Arguments:\n * 0: Arguments [classname,lastAmmoStatus,events] <ARRAY>\n * 1: Elapsed Time <NUMBER>\n * 2: Total Time Repacking Will Take <NUMBER>\n * 3: Error Code <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * (args from progressBar) call ace_magazinerepack_fnc_magazineRepackFinish\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_elapsedTime\", \"_totalTime\", \"_errorCode\"];\n_args params [\"_magazineClassname\", \"_lastAmmoCount\"];\n\nprivate _fullMagazineCount = getNumber (configFile >> \"CfgMagazines\" >> _magazineClassname >> \"count\");\n\n// Don't show anything if player can't interact\nif (!([ACE_player, objNull, [\"isNotInside\", \"isNotSitting\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith))) exitWith {};\n\n// Count mags\nprivate _fullMags = 0;\nprivate _partialMags = 0;\nprivate _bulletsLeft = 0;\n{\n    _x params [\"_classname\", \"_count\"];\n\n    if (_classname == _magazineClassname && {_count > 0}) then {\n        if (_count == _fullMagazineCount) then {\n            _fullMags = _fullMags + 1;\n        } else {\n            _partialMags = _partialMags + 1;\n            _bulletsLeft = _count;\n        };\n    };\n} forEach (magazinesAmmoFull ACE_player);\n\nprivate _structuredOutputText = if (_errorCode == 0) then {\n    private _repackedMagsText = format [localize LSTRING(RepackedMagazinesDetail), _fullMags, _bulletsLeft];\n    format [\"<t align='center'>%1</t><br/>%2\", localize LSTRING(RepackComplete), _repackedMagsText];\n} else {\n    private _repackedMagsText = format [localize LSTRING(RepackedMagazinesCount), _fullMags, _partialMags];\n    format [\"<t align='center'>%1</t><br/>%2\", localize LSTRING(RepackInterrupted), _repackedMagsText];\n};\n\nprivate _picture = getText (configFile >> \"CfgMagazines\" >> _magazineClassname >> \"picture\");\n[_structuredOutputText, _picture, nil, nil, 2.5] call EFUNC(common,displayTextPicture);\n",
        "functionName": "ace_magazinerepack_fnc_magazineRepackFinish"
      },
      {
        "fileName": "fnc_magazineRepackProgress.sqf",
        "content": "/*\n * Author: PabstMirror (based on repack from commy2, esteldunedain, Ruthberg)\n * Handles each frame durring the repack progressBar.\n * On each event (repacked bullet or move to new mag) it plays a sound and syncs up the new magazines to the player.\n *\n * Arguments:\n * 0: Arguments [classname,lastAmmoStatus,events] <ARRAY>\n * 1: Elapsed Time <NUMBER>\n * 2: Total Time Repacking Will Take <NUMBER>\n *\n * Return Value:\n * Keep going (on missing mags return false) <BOOL>\n *\n * Example:\n * (args from progressBar) call ace_magazinerepack_fnc_magazineRepackProgress\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_elapsedTime\", \"_totalTime\"];\n_args params [\"_magazineClassname\", \"_lastAmmoCount\", \"_simEvents\"];\n\nif !((_simEvents select 0) params [\"_nextEventTime\", \"_nextEventIsBullet\", \"_nextEventMags\"]) exitWith { ERROR(\"No Event\"); false };\n\n\nif (_nextEventTime > _elapsedTime) exitWith { true };//waiting on next event\n\n//Verify we aren't missing any ammo\nprivate _currentAmmoCount = [];\n{\n    _x params [\"_xClassname\", \"_xCount\"];\n    if (_xClassname == _magazineClassname) then {\n        _currentAmmoCount pushBack _xCount;\n    };\n} forEach (magazinesAmmo ACE_player);  //only inventory mags\n\n//Go through mags we currently have and check off the ones we should have\nprivate _addedMagazines = +_currentAmmoCount;\nprivate _missingAmmo = false;\n{\n    if (_x > 0) then {\n        private _index = _addedMagazines find _x;\n        if (_index != -1) then {\n            _addedMagazines deleteAt _index;\n        } else {\n            _missingAmmo = true;\n        };\n    };\n} forEach _lastAmmoCount;\n\nif (_missingAmmo) exitWith { false };  //something removed ammo that was being repacked (could be other players or scripts)\n\nprivate _updateMagazinesOnPlayerFnc = {\n    ACE_player removeMagazines _magazineClassname;  //remove inventory magazines\n    {\n        if (_x > 0) then {\n            ACE_player addMagazine [_magazineClassname, _x];\n        };\n    } forEach (_addedMagazines + _nextEventMags);\n    _args set [1, _nextEventMags];  //store the new magazine\n};\n\nif (_nextEventIsBullet) then {\n    playSound QGVAR(soundRoundFinished);\n    if ((((count _simEvents) % 3) == 0) || {(count _simEvents) == 1}) then {\n        //For performance - only update mags every 3 bullets (or if it's the last event)\n        call _updateMagazinesOnPlayerFnc;\n    };\n} else {\n    playSound QGVAR(soundMagazineFinished);\n    call _updateMagazinesOnPlayerFnc;\n};\n\n_simEvents deleteAt 0; //pop off the event\n\ntrue\n",
        "functionName": "ace_magazinerepack_fnc_magazineRepackProgress"
      },
      {
        "fileName": "fnc_simulateRepackEvents.sqf",
        "content": "/*\n * Author: PabstMirror\n * Simulates repacking a set of magazines.\n * Returns the timing and magazines counts at every stage.\n *\n * Arguments:\n * 0: How many rounds in a full magazine <NUMBER>\n * 1: Array of rounds in magazines <ARRAY>\n * 2: Magazine is a belt <BOOL>\n *\n * Return Value:\n * Array in format [time, isBullet, array of ammo counts] <ARRAY>\n *\n * Example:\n * [10, [1,2,3,8], false] call ace_magazinerepack_fnc_simulateRepackEvents =\n * [[1.5,true,[0,2,3,9]],[3.5,false,[0,2,3,9]],[5,true,[0,1,3,10]],[7,false,[0,1,3,10]],[8.5,true,[0,0,4,10]],[10.5,false,[0,0,4,10]]]\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_fullMagazineCount\", \"_arrayOfAmmoCounts\", \"_isBelt\"];\n\n// Sort Ascending - Don't modify original\n_arrayOfAmmoCounts = +_arrayOfAmmoCounts;\n_arrayOfAmmoCounts sort true;\n\nprivate _fnc_newMag = {\n    //IGNORE_PRIVATE_WARNING [\"_time\", \"_events\"];\n    _time = _time + GVAR(TimePerMagazine);\n    _events pushBack [_time, false, +_arrayOfAmmoCounts];\n};\n\nprivate _lowIndex = 0;\nprivate _highIndex = (count _arrayOfAmmoCounts) - 1;\nprivate _ammoToTransfer = 0;\nprivate _ammoAvailable = 0;\nprivate _time = 0;\nprivate _events = [];\n\nwhile {_lowIndex < _highIndex} do {\n    private _ammoNeeded = _fullMagazineCount - (_arrayOfAmmoCounts select _highIndex);\n    _ammoAvailable = _arrayOfAmmoCounts select _lowIndex;\n\n    if (_ammoAvailable == 0) then {\n        _lowIndex = _lowIndex + 1;\n        call _fnc_newMag;\n    } else {\n        if (_ammoNeeded == 0) then {\n            _highIndex = _highIndex - 1;\n            call _fnc_newMag;\n        } else {\n            private _ammoSwaped = _ammoAvailable min _ammoNeeded;\n            if (_isBelt) then {\n                _time = _time + GVAR(TimePerBeltLink);\n                _arrayOfAmmoCounts set [_lowIndex, (_arrayOfAmmoCounts select _lowIndex) - _ammoSwaped];\n                _arrayOfAmmoCounts set [_highIndex, (_arrayOfAmmoCounts select _highIndex) + _ammoSwaped];\n                _events pushBack [_time, true, +_arrayOfAmmoCounts];\n            } else {\n                for \"_swapProgress\" from 0 to (_ammoSwaped - 1) do {\n                    _time = _time + GVAR(TimePerAmmo);\n                    _arrayOfAmmoCounts set [_lowIndex, (_arrayOfAmmoCounts select _lowIndex) - 1];\n                    _arrayOfAmmoCounts set [_highIndex, (_arrayOfAmmoCounts select _highIndex) + 1];\n                    _events pushBack [_time, true, +_arrayOfAmmoCounts];\n                };\n            };\n        };\n    };\n};\n\n_events\n",
        "functionName": "ace_magazinerepack_fnc_simulateRepackEvents"
      },
      {
        "fileName": "fnc_startRepackingMagazine.sqf",
        "content": "/*\n * Author: PabstMirror (based on repack from commy2, esteldunedain, Ruthberg)\n * Starts repacking a specific magazine classname.\n * If room in inventory, unload magazine from weapon to be repacked.\n * Precalcs all the event timings and starts the progressBar.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player <OBJECT>\n * 2: Magazine Classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, player, \"30Rnd_65x39_caseless_mag\"] call ace_magazinerepack_fnc_startRepackingMagazine\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_player\", \"_magazineClassname\"];\n\nif (isNil \"_magazineClassname\" || {_magazineClassname == \"\"}) exitWith {ERROR(\"Bad Mag Classname\");};\nprivate _magazineCfg = configFile >> \"CfgMagazines\" >> _magazineClassname;\n// Calculate actual ammo to transfer during repack\nprivate _fullMagazineCount = getNumber (_magazineCfg >> \"count\");\n//Is linked belt magazine:\nprivate _isBelt = isNumber (_magazineCfg >> \"ACE_isBelt\") && {(getNumber (_magazineCfg >> \"ACE_isBelt\")) == 1};\n\n//Check canInteractWith:\nif !([_player, objNull, [\"isNotInside\", \"isNotSwimming\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {};\n\n[_player] call EFUNC(common,goKneeling);\n\nprivate _startingAmmoCounts = [];\n{\n    _x params [\"_xClassname\", \"_xCount\", \"_xLoaded\", \"_xType\"];\n    if (_xClassname == _magazineClassname && {_xCount != _fullMagazineCount && {_xCount > 0}}) then {\n        if (_xLoaded) then {\n            //Try to Remove from weapon and add to inventory, otherwise ignore\n            if (_player canAdd _magazineClassname) then {\n                switch (_xType) do {\n                    case (1): {_player removePrimaryWeaponItem _magazineClassname};\n                    case (2): {_player removeHandgunItem _magazineClassname};\n                    case (4): {_player removeSecondaryWeaponItem _magazineClassname};\n                    default {ERROR(\"Loaded Location Invalid\");};\n                };\n                _player addMagazine [_magazineClassname, _xCount];\n                _startingAmmoCounts pushBack _xCount;\n            };\n        } else {\n            _startingAmmoCounts pushBack _xCount;\n        };\n    };\n} forEach (magazinesAmmoFull _player);\n\nif (count _startingAmmoCounts < 2) exitWith {ERROR(\"Not Enough Mags to Repack\");};\n\nprivate _simEvents = [_fullMagazineCount, _startingAmmoCounts, _isBelt] call FUNC(simulateRepackEvents);\nprivate _totalTime = _simEvents select (count _simEvents - 1) select 0;\n\n[\n    _totalTime,\n    [_magazineClassname, _startingAmmoCounts, _simEvents],\n    {_this call FUNC(magazineRepackFinish)},\n    {_this call FUNC(magazineRepackFinish)},\n    (localize LSTRING(RepackingMagazine)),\n    {_this call FUNC(magazineRepackProgress)},\n    [\"isNotInside\", \"isNotSwimming\", \"isNotSitting\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_magazinerepack_fnc_startRepackingMagazine"
      }
    ]
  },
  {
    "component": "main",
    "files": [],
    "functions": []
  },
  {
    "component": "map",
    "files": [
      {
        "fileName": "XEH_postInitClient.sqf",
        "content": "#include \"script_component.hpp\"\n\n// Exit on Headless as well\nif (!hasInterface) exitWith {};\n\nLOG(MSG_INIT);\n\n// Calculate the maximum zoom allowed for this map\ncall FUNC(determineZoom);\n\n[{\n    if (isNull findDisplay 12) exitWith {};\n\n    GVAR(lastStillPosition) = ((findDisplay 12) displayCtrl 51) ctrlMapScreenToWorld [0.5, 0.5];\n    GVAR(lastStillTime) = CBA_missionTime;\n    GVAR(isShaking) = false;\n\n    //map sizes are multiples of 1280\n    GVAR(worldSize) = worldSize / 1280;\n    GVAR(mousePos) = [0.5,0.5];\n\n    //Allow panning the lastStillPosition while mapShake is active\n    GVAR(rightMouseButtonLastPos) = [];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"Draw\", {_this call FUNC(updateMapEffects)}];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseMoving\", {\n        if (GVAR(isShaking) && {(count GVAR(rightMouseButtonLastPos)) == 2}) then {\n            private _lastPos = (_this select 0) ctrlMapScreenToWorld GVAR(rightMouseButtonLastPos);\n            private _newPos = (_this select 0) ctrlMapScreenToWorld (_this select [1,2]);\n            GVAR(lastStillPosition) set [0, (GVAR(lastStillPosition) select 0) + (_lastPos select 0) - (_newPos select 0)];\n            GVAR(lastStillPosition) set [1, (GVAR(lastStillPosition) select 1) + (_lastPos select 1) - (_newPos select 1)];\n            GVAR(rightMouseButtonLastPos) = _this select [1,2];\n            TRACE_3(\"Mouse Move\",_lastPos,_newPos,GVAR(rightMouseButtonLastPos));\n        };\n    }];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseButtonDown\", {\n        if ((_this select 1) == 1) then {\n            GVAR(rightMouseButtonLastPos) = _this select [2,2];\n        };\n    }];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseButtonUp\", {\n        if ((_this select 1) == 1) then {\n            GVAR(rightMouseButtonLastPos) = [];\n        };\n    }];\n\n    //get mouse position on map\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseMoving\", {\n        GVAR(mousePos) = (_this select 0) ctrlMapScreenToWorld [_this select 1, _this select 2];\n    }];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseHolding\", {\n        GVAR(mousePos) = (_this select 0) ctrlMapScreenToWorld [_this select 1, _this select 2];\n    }];\n\n    [_this select 1] call CBA_fnc_removePerFrameHandler;\n}, 0] call CBA_fnc_addPerFrameHandler;\n\n[\"ace_settingsInitialized\", {\n    if (isMultiplayer && {GVAR(DefaultChannel) != -1}) then {\n        //Set the chat channel once the map has finished loading\n        [{\n            if ((isNull findDisplay 37) && {isNull findDisplay 52} && {isNull findDisplay 53} && {isNull findDisplay 12}) exitWith {};\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            setCurrentChannel GVAR(DefaultChannel);\n            if (currentChannel == GVAR(DefaultChannel)) then {\n                // INFO_1(\"Channel Set - %1\", currentChannel);\n            } else {\n                ERROR_2(\"Failed To Set Channel %1 (is %2)\", GVAR(DefaultChannel), currentChannel);\n            };\n        }, 0, []] call CBA_fnc_addPerFrameHandler;\n    };\n\n    // Start Blue Force Tracking if Enabled\n    if (GVAR(BFT_Enabled)) then {\n        GVAR(BFT_markers) = [];\n        [FUNC(blueForceTrackingUpdate), GVAR(BFT_Interval), []] call CBA_fnc_addPerFrameHandler;\n    };\n\n    //illumination settings\n    if (GVAR(mapIllumination)) then {\n        [\"loadout\", {\n            params [\"_player\", \"\"];\n            private _unitLight = _player getVariable [QGVAR(flashlight), [\"\", objNull]];\n            _unitLight params [\"_flashlight\", \"_glow\"];\n            if ((_flashlight != \"\") && {!(_flashlight in ([_player] call FUNC(getUnitFlashlights)))}) then {\n                // remove the current glow if the unit suddenly lost it's flashlight\n                if (!isNull _glow) then {\n                    _glow = [_player, \"\", false] call FUNC(flashlightGlow);\n                };\n                _player setVariable [QGVAR(flashlight), [\"\", _glow], true];\n            };\n        }] call CBA_fnc_addPlayerEventHandler;\n\n        if (GVAR(mapGlow)) then {\n            [\"visibleMap\", {\n                params [\"_player\", \"_mapOn\"];\n                private _unitLight = _player getVariable [QGVAR(flashlight), [\"\", objNull]];\n                _unitLight params [\"_flashlight\", \"_glow\"];\n                private _flashlightOn = !(_flashlight isEqualTo \"\");\n                if (_mapOn) then {\n                    if (_flashlightOn && {isNull _glow}) then {\n                        [_player, _flashlight] call FUNC(flashlightGlow);\n                        playSound QGVAR(flashlightClick);\n                    };\n                } else {\n                    if (!isNull _glow) then {\n                        [_player, \"\"] call FUNC(flashlightGlow);\n                    };\n                };\n            }] call CBA_fnc_addPlayerEventHandler;\n        };\n    };\n}] call CBA_fnc_addEventHandler;\n\n// hide clock on map if player has no watch\nGVAR(hasWatch) = true;\n\n[\"loadout\", {\n    params [\"_unit\"];\n    if (isNull _unit) exitWith {\n        GVAR(hasWatch) = true;\n    };\n    GVAR(hasWatch) = false;\n    {\n        if (_x isKindOf [\"ItemWatch\", configFile >> \"CfgWeapons\"]) exitWith {GVAR(hasWatch) = true;};\n        false\n    } count (assignedItems _unit);\n}, true] call CBA_fnc_addPlayerEventHandler;\n\n\n// Vehicle map lighting:\nGVAR(vehicleLightCondition) = {true};\nGVAR(vehicleExteriorTurrets) = [];\nGVAR(vehicleLightColor) = [1,1,1,0];\n\n[\"vehicle\", {\n    params [\"_unit\", \"_vehicle\"];\n    if ((isNull _vehicle) || {_unit == _vehicle}) exitWith {};\n    private _cfg = configfile >> \"CfgVehicles\" >> (typeOf _vehicle);\n    GVAR(vehicleExteriorTurrets) = getArray (_cfg >> QGVAR(vehicleExteriorTurrets));\n    GVAR(vehicleLightColor) = [_cfg >> QGVAR(vehicleLightColor), \"array\", [1,1,1,0]] call CBA_fnc_getConfigEntry;\n\n    // Handle vehicles with toggleable interior lights:\n    private _vehicleLightCondition = getText (_cfg >> QGVAR(vehicleLightCondition));\n    if (_vehicleLightCondition == \"\") then {\n        private _userAction = toLower getText (_cfg >> \"UserActions\" >> \"ToggleLight\" >> \"statement\");\n        switch (true) do {\n            case ((_userAction find \"cabinlights_hide\") > 0): {_vehicleLightCondition = \"(_vehicle animationSourcePhase 'cabinlights_hide') == 1\";};\n            case ((_userAction find \"cargolights_hide\") > 0): {_vehicleLightCondition = \"(_vehicle animationSourcePhase 'cargolights_hide') == 1\";};\n        };\n    };\n\n    GVAR(vehicleLightCondition) = if (_vehicleLightCondition != \"\") then {\n        if (_vehicle isKindOf \"Helicopter\" || {_vehicle isKindOf \"Plane\"}) then {\n            compile format [\"(driver _vehicle == _unit) || {gunner _vehicle == _unit} || {%1}\", _vehicleLightCondition];\n        } else {\n            compile _vehicleLightCondition\n        };\n    } else {\n        switch (true) do {\n            case (_vehicle isKindOf \"Tank\");\n            case (_vehicle isKindOf \"Wheeled_APC\"): { {true} };\n            case (_vehicle isKindOf \"Helicopter\");\n            case (_vehicle isKindOf \"Plane\"): { {(driver _vehicle == _unit) || {gunner _vehicle == _unit}} };\n            default { {false} };\n        };\n    };\n}, true] call CBA_fnc_addPlayerEventHandler;\n"
      },
      {
        "fileName": "XEH_postInitServer.sqf",
        "content": "#include \"script_component.hpp\"\n\n// Delete map glow lights from disconnecting players, #2810\naddMissionEventHandler [\"HandleDisconnect\",{\n    params [\"_disconnectedPlayer\"];\n    if (!GVAR(mapGlow)) exitWith {};\n    private _unitLight = _disconnectedPlayer getVariable [QGVAR(flashlight), [\"\", objNull]];\n    _unitLight params [\"\", \"_glow\"];\n    \n    if ((!isNull _disconnectedPlayer) && {!isNull _glow}) then {\n        detach _glow;\n        deleteVehicle _glow;\n    };\n\n    nil\n}];\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\nLOG(MSG_INIT);\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_blueForceTrackingModule.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Initializes the blue force tracking module.\n *\n * Arguments:\n * Whatever the module provides. (I dunno.) <UNKNOWN>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_map_fnc_blueForceTrackingModule\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(BFT_Enabled), \"Enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(BFT_Interval), \"Interval\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(BFT_HideAiGroups), \"HideAiGroups\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(BFT_ShowPlayerNames), \"ShowPlayerNames\"] call EFUNC(common,readSettingFromModule);\n\nINFO_3(\"Blue Force Tracking Module Initialized:\", GVAR(BFT_Enabled), GVAR(BFT_Interval), GVAR(BFT_HideAiGroups));\n",
        "functionName": "ace_map_fnc_blueForceTrackingModule"
      },
      {
        "fileName": "fnc_blueForceTrackingUpdate.sqf",
        "content": "/*\n * Author: ACE-Team\n * Update the blue force tracking.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_map_fnc_blueForceTrackingUpdate\n *\n * Public: No\n */\n\n\n// #define ENABLE_PERFORMANCE_COUNTERS\n#include \"script_component.hpp\"\n// BEGIN_COUNTER(blueForceTrackingUpdate);\n\n// Delete last set of markers (always)\n{\n    deleteMarkerLocal _x;\n} forEach GVAR(BFT_markers);\n\nGVAR(BFT_markers) = [];\n\nif (GVAR(BFT_Enabled) and {(!isNil \"ACE_player\") and {alive ACE_player}}) then {\n\n    private _groupsToDrawMarkers = [];\n    private _playerSide = call EFUNC(common,playerSide);\n\n    _groupsToDrawMarkers = allGroups select {side _x == _playerSide};\n\n    if (GVAR(BFT_HideAiGroups)) then {\n        _groupsToDrawMarkers = _groupsToDrawMarkers select {\n            {\n                _x call EFUNC(common,isPlayer);\n            } count units _x > 0;\n        };\n    };\n\n    if (GVAR(BFT_ShowPlayerNames)) then {\n        private _playersToDrawMarkers = allPlayers select {side _x == _playerSide && {!(_x getVariable [QGVAR(hideBlueForceMarker), false])}};\n\n        {\n            private _markerType = [_x] call EFUNC(common,getMarkerType);\n            private _colour = format [\"Color%1\", side _x];\n\n            private _marker = createMarkerLocal [format [\"ACE_BFT_%1\", _forEachIndex], [(getPos _x) select 0, (getPos _x) select 1]];\n            _marker setMarkerTypeLocal _markerType;\n            _marker setMarkerColorLocal _colour;\n            _marker setMarkerTextLocal (name _x);\n\n            GVAR(BFT_markers) pushBack _marker;\n        } forEach _playersToDrawMarkers;\n\n        _groupsToDrawMarkers = _groupsToDrawMarkers select {\n            {\n                !(_x call EFUNC(common,isPlayer));\n            } count units _x > 0;\n        };\n    };\n\n    _groupsToDrawMarkers = _groupsToDrawMarkers select {!(_x getVariable [QGVAR(hideBlueForceMarker), false])};\n\n    {\n        private _markerType = [_x] call EFUNC(common,getMarkerType);\n        private _colour = format [\"Color%1\", side _x];\n\n        private _marker = createMarkerLocal [format [\"ACE_BFT_%1\", _forEachIndex], [(getPos leader _x) select 0, (getPos leader _x) select 1]];\n        _marker setMarkerTypeLocal _markerType;\n        _marker setMarkerColorLocal _colour;\n        _marker setMarkerTextLocal (groupId _x);\n\n        GVAR(BFT_markers) pushBack _marker;\n    } forEach _groupsToDrawMarkers;\n};\n\n// END_COUNTER(blueForceTrackingUpdate);\n",
        "functionName": "ace_map_fnc_blueForceTrackingUpdate"
      },
      {
        "fileName": "fnc_compileFlashlightMenu.sqf",
        "content": "/*\n * Author: voiper\n * Compile list of flashlight classnames and add to the \"Flashlight\" parent menu.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player <OBJECT>\n * 3: Parameters <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player, _player, []] call ace_map_fnc_compileFlashlightMenu;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"\", \"_player\"];\n\nprivate _actions = [];\nprivate _flashlightItems = [_player] call FUNC(getUnitFlashlights);\nprivate _unitLight = _player getVariable [QGVAR(flashlight), [\"\", objNull]];\n_unitLight params [\"_flashlight\", \"\"];\n\n//add all carried flashlight menus and on/off submenu actions\n{\n    private _cfg = (configFile >> \"CfgWeapons\" >> _x);\n    private _displayName = getText (_cfg >> \"displayName\");\n    private _icon = getText (_cfg >> \"picture\");\n\n    private _statement = if (_flashlight == _x) then {\n        _displayName = format [localize LSTRING(turnLightOff), _displayName];\n        {[_player, \"\"] call FUNC(switchFlashlight)}\n    } else {\n        _displayName = format [localize LSTRING(turnLightOn), _displayName];\n        {[_player, _this select 2] call FUNC(switchFlashlight)}\n    };\n\n    private _action = [_x, _displayName, _icon, _statement, {true}, {}, _x] call EFUNC(interact_menu,createAction);\n    _actions pushBack [_action, [], _player];\n} forEach _flashlightItems;\n\n_actions\n",
        "functionName": "ace_map_fnc_compileFlashlightMenu"
      },
      {
        "fileName": "fnc_determineMapLight.sqf",
        "content": "/*\n * Author: Rocko and esteldunedain\n * Calculates the current map illumination for a given unit\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * 0: Does the map needs shading? <BOOL>\n * 1: Color of the overlay <ARRAY>\n *\n * Example:\n * call ACE_map_fnc_determineMapLight\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// Blend two colors\nprivate _fnc_blendColor = {\n    params [\"_c1\", \"_c2\", \"_alpha\"];\n    [(_c1 select 0) * (1 - _alpha) + (_c2 select 0) * _alpha,\n    (_c1 select 1) * (1 - _alpha) + (_c2 select 1) * _alpha,\n    (_c1 select 2) * (1 - _alpha) + (_c2 select 2) * _alpha,\n    (_c1 select 3) * (1 - _alpha) + (_c2 select 3) * _alpha]\n};\n\n// Ambient light tint depending on time of day\nprivate _lightTint = call {\n    if (sunOrMoon == 1.0) exitWith {[0.5,0.5,0.5,1]};\n    if (sunOrMoon > 0.80) exitWith {[[1.0 - overcast,0.2,0,1], [1,1,1,1],   (sunOrMoon - 0.8) / 0.2] call _fnc_blendColor};\n    if (sunOrMoon > 0.50) exitWith {[[0,0,0.1,1], [1.0 - overcast,0.2,0,1], (sunOrMoon - 0.5) / 0.3] call _fnc_blendColor};\n    if (sunOrMoon <= 0.5) exitWith {[0,0,0.1,1]};\n    [0,0,0,0]\n};\n\nprivate _lightLevel = 0.04 + (0.96 * call EFUNC(common,ambientBrightness));\n\n// Do not obscure the map if the ambient light level is above 0.95\nif (_lightLevel > 0.95) exitWith {\n    [false, [1,1,1,0]]\n};\n\nprivate _vehicle = vehicle _unit;\n\n// Do not obscure the map if the player is on a enclosed vehicle (assume internal illumination)\nif ((_vehicle != _unit) && {(!isTurnedOut _unit)} && GVAR(vehicleLightCondition) && {!((_unit call CBA_fnc_turretPath) in GVAR(vehicleExteriorTurrets))}) exitWith {\n    TRACE_1(\"Player in a enclosed vehicle\",GVAR(vehicleLightColor));\n    [!(GVAR(vehicleLightColor) isEqualTo [1,1,1,0]), GVAR(vehicleLightColor)]\n};\n\n// Player is not in a vehicle\nTRACE_1(\"Player is on foot or in an open vehicle\",\"\");\n\n// Check if player is near a campfires, streetlamps, units with flashlights, vehicles with lights on, etc. - 40m\n{\n    _lightLevel = _lightLevel max ([_unit, _x] call EFUNC(common,lightIntensityFromObject));\n} forEach nearestObjects [_unit, [\"All\"], 40];\n\n// @todo: Illumination flares (timed)\n\n// Using chemlights\nprivate _nearObjects = (_unit nearObjects [\"Chemlight_base\", 4]) select {alive _x};\n\nif !(_nearObjects isEqualTo []) then {\n    private _nearestlight = _nearObjects select 0;\n    private _lightLevelTemp = (1 - ((((_unit distance _nearestlight) - 2) / 2) max 0)) * 0.4;\n    if (_lightLevelTemp > _lightLevel) then {\n        private _flareTint = getArray (configFile >> \"CfgLights\" >> (getText (configFile >> (getText (configFile >> \"CfgAmmo\" >> typeOf _nearestlight >> \"EffectsSmoke\")) >> \"Light1\" >> \"type\")) >> \"color\");\n        _lightTint = [_lightTint, _flareTint, (_lightLevelTemp - _lightLevel) / (1 - _lightLevel)] call _fnc_blendColor;\n        _lightLevel = _lightLevelTemp;\n        TRACE_1(\"player near chemlight\",\"\");\n    };\n};\n\n// Do not obscure the map if the ambient light level is above 0.95\nif (_lightLevel > 0.95) exitWith {\n    [false, [1,1,1,0]]\n};\n\n// Calculate resulting map color from tint and light level\nprivate _halfLight = _lightLevel / 0.5;\n\nprivate _finalLevel = if (_lightLevel < 0.5) then {\n    [(_lightTint select 0) * _halfLight,\n    (_lightTint select 1) * _halfLight,\n    (_lightTint select 2) * _halfLight,\n    (_lightTint select 3) * (1 - _lightLevel)]\n} else {\n    _halfLight = (_lightLevel - 0.5) / 0.5;\n    [(_lightTint select 0) * (1 - _halfLight) + _halfLight,\n    (_lightTint select 1) * (1 - _halfLight) + _halfLight,\n    (_lightTint select 2) * (1 - _halfLight) + _halfLight,\n    (_lightTint select 3) * (1 - _lightLevel)]\n};\n\n[true, _finalLevel]\n",
        "functionName": "ace_map_fnc_determineMapLight"
      },
      {
        "fileName": "fnc_determineZoom.sqf",
        "content": "/*\n * Author: Rocko\n * Calculate the maximum zoom level allowed for the current map\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_map_fnc_determineZoom\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _grids = (configFile >> \"CfgWorlds\" >> worldName >> \"Grid\");\nprivate _fourSize = -1;\nprivate _sixSize = -1;\nfor \"_i\" from 1 to 10 do {\n    private _continue = false;\n    if (isClass(_grids >> format[\"Zoom%1\", _i])) then {\n        _continue = true;\n        private _size = getText(_grids >> format[\"Zoom%1\", _i] >> \"formatX\");\n        if ((count toArray(_size)) == 2) then {\n            _fourSize = getNumber(_grids >> format[\"Zoom%1\", _i] >> \"zoomMax\");\n        };\n        if ((count toArray(_size)) == 3) then {\n            _sixSize = getNumber(_grids >> format[\"Zoom%1\", _i] >> \"zoomMax\");\n        };\n        if (_fourSize != -1 && {_sixSize != -1}) then {\n            _continue = false;\n        };\n    };\n    if (!_continue) exitWith {};\n};\n\nif(_fourSize != -1 && {_sixSize != -1}) then {\n    if (isNil QGVAR(minMapSize)) then {\n        GVAR(minMapSize) = _sixSize + 0.01\n    } else {\n        GVAR(minMapSize) = -1\n    };\n};\n",
        "functionName": "ace_map_fnc_determineZoom"
      },
      {
        "fileName": "fnc_flashlightGlow.sqf",
        "content": "/*\n * Author: voiper\n * Add or remove global flashlight glow for when player is looking at map.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Flashlight classname (\"\" for off) <STRING>\n * 2: Set the PVAR? <BOOL> (default: true)\n *\n * Return Value:\n * Glow object <OBJECT>\n *\n * Example:\n * [ACE_player, \"ACE_Flashlight_MX991\"] call ace_map_fnc_flashlightGlow;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_flashlightType\", [\"_set\", true]];\n\nprivate _unitLight = _unit getVariable [QGVAR(flashlight), [\"\", objNull]];\n_unitLight params [\"_flashlight\", \"_glow\"];\n\nif (!isNull _glow) then {\n    detach _glow;\n    deleteVehicle _glow;\n};\n\nif !(_flashlightType isEqualTo \"\") then {\n    private _color = getText (configFile >> \"CfgWeapons\" >> _flashlightType >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Colour\");\n    if !(_color in [\"white\", \"red\", \"green\", \"blue\", \"yellow\", \"orange\"]) then {_color = \"white\"};\n    private _class = format [\"ACE_FlashlightProxy_%1\", _color];\n\n    _glow = _class createVehicle [0,0,0];\n    _glow attachTo [_unit, [0,0.1,-0.05], \"neck\"];\n} else {\n    _glow = objNull;\n};\n\nif (_set) then {\n    _unit setVariable [QGVAR(flashlight), [_flashlight, _glow], true];\n};\n\n_glow\n",
        "functionName": "ace_map_fnc_flashlightGlow"
      },
      {
        "fileName": "fnc_getUnitFlashlights.sqf",
        "content": "/*\n * Author: voiper\n * Check a unit for any flashlights that can be used on map.\n *\n * Arguments:\n * 0: Unit to check <OBJECT>\n *\n * Return Value:\n * Flashlight classnames (empty for none) <ARRAY>\n *\n * Example:\n * [unit] call ace_map_fnc_getUnitFlashlights;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _flashlights = [];\n\n{\n    if (isText (configFile >> \"CfgWeapons\" >> _x >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Colour\")) then {\n        _flashlights pushBackUnique _x;\n    };\n} forEach (items _unit);\n\n_flashlights\n",
        "functionName": "ace_map_fnc_getUnitFlashlights"
      },
      {
        "fileName": "fnc_moduleMap.sqf",
        "content": "/*\n * Author: esteldunedain\n * Initializes the Map module.\n *\n * Arguments:\n * Whatever the module provides. (I dunno.) <UNKNOWN>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_map_fnc_moduleMap\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(mapIllumination),          \"MapIllumination\"         ] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(mapGlow),                  \"MapGlow\"                 ] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(mapShake),                 \"MapShake\"                ] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(mapLimitZoom),             \"MapLimitZoom\"            ] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(mapShowCursorCoordinates), \"MapShowCursorCoordinates\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(DefaultChannel),           \"DefaultChannel\"          ] call EFUNC(common,readSettingFromModule);\n\nINFO(\"Map Module Initialized.\");\n",
        "functionName": "ace_map_fnc_moduleMap"
      },
      {
        "fileName": "fnc_onDrawMap.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * Something\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_map_fnc_onDrawMap\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n((_this select 0) displayCtrl 1016) ctrlShow GVAR(mapShowCursorCoordinates);\n\n// hide clock when no watch in inventory, or whatever never ever\n((_this select 0) displayCtrl 101) ctrlShow GVAR(hasWatch);\n",
        "functionName": "ace_map_fnc_onDrawMap"
      },
      {
        "fileName": "fnc_simulateMapLight.sqf",
        "content": "/*\n * Author: voiper\n * Draw nearby lighting and sexy flashlight beams on main map.\n *\n * Arguments:\n * 0: Map control <CONTROL>\n * 1: Map zoom level <NUMBER>\n * 2: Current map centre <ARRAY>\n * 3: Light level from ace_map_fnc_determineMapLight <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL, 5, [5, 4, 6], []] call ACE_map_fnc_simulateMapLights\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_mapCtrl\", \"_mapScale\", \"_mapCentre\", \"_lightLevel\"];\n\nprivate _unitLight = ACE_player getVariable [QGVAR(flashlight), [\"\", objNull]];\n_unitLight params [\"_flashlight\", \"\"];\n\n//map width (on screen) in pixels\nprivate _screenSize = 640 * safeZoneWAbs;\n\n//resolution params (every frame in case resolution change)\ngetResolution params [\"_resX\", \"_resY\", \"_viewPortX\", \"_viewPortY\", \"\", \"_uiScale\"];\n\n//engine rounds the viewport ratios, when they should be fractions; this can cause problems\nprivate _realViewPortY = _resY * _uiScale;\nprivate _realViewPortX = _realViewPortY * 4/3;\n\n//textures\nprivate _fillTex = \"#(rgb,8,8,3)color(0,0,0,1)\";\n\n//colour/alpha\n_lightLevel params [\"_r\", \"_g\", \"_b\", \"_a\"];\nprivate _colourAlpha = (_r + _g + _b) min _a;\nprivate _shadeAlpha = _a;\n\nprivate _colourList = [_r, _g, _b];\n_colourList sort false;\nprivate _maxColour = _colourList select 0;\n\n//ambient colour fill\n_mapCtrl drawIcon [format[\"#(rgb,8,8,3)color(%1,%2,%3,1)\", _r / _maxColour, _g / _maxColour, _b / _maxColour], [1,1,1,_colourAlpha], _mapCentre, _screenSize, _screenSize, 0, \"\", 0];\n\nif (_flashlight == \"\") then {\n    //ambient shade fill\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], _mapCentre, _screenSize, _screenSize, 0, \"\", 0];\n} else {\n    private _mousePos = GVAR(mousePos);\n\n    //flashlight settings\n    private _cfg = (configFile >> \"CfgWeapons\" >> _flashlight >> \"ItemInfo\" >> \"FlashLight\");\n    private _size = getNumber (_cfg >> \"ACE_Flashlight_Size\");\n    private _flashTex = getText (_cfg >> \"ACE_Flashlight_Beam\");\n    private _beamSize = (safeZoneW/safeZoneWAbs) * _screenSize / _size;\n\n    //after 5x zoom, it's simulated to be fixed (it actually gets bigger relative to zoom)\n    if (_mapScale < 0.2) then {_beamSize = _beamSize / (_mapScale * (1 / 0.2))};\n\n    //assign corrective ratio to fix sub-pixel gaps/overlaps (symptom of viewport * X/Y resolution rounding)\n    private _viewPortRatioFixY = if (_realViewPortY != _viewPortY) then {\n        _realViewPortX / (_realViewPortY / _viewPortY * _viewPortX)\n    } else {\n        if (_realViewPortX != _viewPortX) then {\n            _realViewPortX / _viewPortX\n        } else {\n            1\n        };\n    };\n\n    //offset the elements\n    private _offsetX = _mapScale * GVAR(worldSize) * (_screenSize * 2 + _beamSize);\n    private _offsetYDown = _mapScale * GVAR(worldSize) * (_screenSize + _beamSize) * _viewPortRatioFixY;\n    //up is bigger because of a potential exploit\n    private _offsetYUp = _mapScale * GVAR(worldSize) * (_screenSize * 4 + _beamSize) * _viewPortRatioFixY;\n\n    //draw the matrix /whoa\n    _mapCtrl drawIcon [_flashTex, [1,1,1,_shadeAlpha], _mousePos, _beamSize, _beamSize, 0, \"\", 0]; //centre beam\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0) - _offsetX, (_mousePos select 1)], _screenSize * 2, _beamSize, 0, \"\", 0]; //left\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0) + _offsetX, (_mousePos select 1)], _screenSize * 2, _beamSize, 0, \"\", 0]; //right\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0), (_mousePos select 1) - _offsetYDown], _screenSize * 4, _screenSize, 0, \"\", 0]; //down\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0), (_mousePos select 1) + _offsetYUp], _screenSize * 4, _screenSize * 4, 0, \"\", 0]; //up\n};\n",
        "functionName": "ace_map_fnc_simulateMapLight"
      },
      {
        "fileName": "fnc_switchFlashlight.sqf",
        "content": "/*\n * Author: voioper\n * Switch flashlight on/off.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: New flashlight classname (\"\" for off) <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, \"ACE_Flashlight_MX991\"] call ace_map_fnc_switchFlashlight;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_newFlashlight\"];\n\nprivate _unitLight = _unit getVariable [QGVAR(flashlight), [\"\", objNull]];\n_unitLight params [\"_flashlight\", \"_glow\"];\n\nif (GVAR(mapGlow)) then {\n    // we don't want to set the PVAR twice in a row, so tell this func not to set it\n    _glow = [_unit, _newFlashlight, false] call FUNC(flashlightGlow);\n};\n\nprivate _config = (configFile >> \"CfgWeapons\");\n\nif (\n    (getNumber (_config >> _newFlashlight >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Sound\") > 0) ||\n    {getNumber (_config >> _flashlight >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Sound\") > 0}\n) then {\n    playSound QGVAR(flashlightClick);\n};\n\n_unit setVariable [QGVAR(flashlight), [_newFlashlight, _glow], true];\n",
        "functionName": "ace_map_fnc_switchFlashlight"
      },
      {
        "fileName": "fnc_updateMapEffects.sqf",
        "content": "/*\n * Author: Rocko and esteldunedain\n * On map draw, updates the effects\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_map_fnc_updateMapEffects\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_mapCtrl\"];\nprivate _mapScale = ctrlMapScale _mapCtrl;\nprivate _mapCentre = _mapCtrl ctrlMapScreenToWorld [0.5, 0.5];\n\nif (GVAR(mapIllumination)) then {\n    //get nearby lighting\n    private _light = [[ACE_player], FUNC(determineMapLight), missionNamespace, QGVAR(mapLight), 0.1] call EFUNC(common,cachedCall);\n\n    _light params [\"_applyLighting\", \"_lightLevel\"];\n\n    if (_applyLighting) then {\n        [_mapCtrl, _mapScale, _mapCentre, _lightLevel] call FUNC(simulateMapLight);\n    };\n};\n\nif (GVAR(mapShake)) then {\n\n    // Only shake map while moving on foot\n    private _speed = 0;\n    if (vehicle ACE_player == ACE_player) then {\n        _speed = vectorMagnitude (velocity ACE_player);\n    };\n\n    // If speed is large enough, create anims to shake map\n    if (_speed > 0.1) then {\n        if (ctrlMapAnimDone _mapCtrl) then {\n\n            private _amplitude = (_speed - 0.1) / 5 * (1000 * _mapScale);\n            private _time = 0.1;\n\n            private _shakePos = [(GVAR(lastStillPosition) select 0) + sin((CBA_missionTime + _time - GVAR(lastStillTime))*100) * _amplitude * 0.25,\n                         (GVAR(lastStillPosition) select 1) + sin((CBA_missionTime + _time - GVAR(lastStillTime))*260) * _amplitude];\n\n            _mapCtrl ctrlMapAnimAdd [_time, _mapScale, _shakePos];\n            ctrlMapAnimCommit _mapCtrl;\n\n            GVAR(isShaking) = true;\n        };\n    } else {\n        if (GVAR(isShaking)) then {\n            // Stop shaking, return to original position\n            ctrlMapAnimClear _mapCtrl;\n            _mapCtrl ctrlMapAnimAdd [0, _mapScale, GVAR(lastStillPosition)];\n            ctrlMapAnimCommit _mapCtrl;\n            GVAR(isShaking) = false;\n        } else {\n            // The map is still, store state\n            GVAR(lastStillPosition) = _mapCentre;\n            GVAR(lastStillTime) = CBA_missionTime;\n        };\n    };\n};\n\nif (GVAR(mapLimitZoom)) then {\n    if (GVAR(minMapSize) >= _mapScale) then {\n        ctrlMapAnimClear _mapCtrl;\n        _mapCtrl ctrlMapAnimAdd [0, GVAR(minMapSize) + 0.001, _mapCentre];\n        ctrlMapAnimCommit _mapCtrl;\n    };\n};\n",
        "functionName": "ace_map_fnc_updateMapEffects"
      }
    ]
  },
  {
    "component": "maptools",
    "files": [
      {
        "fileName": "XEH_postInitClient.sqf",
        "content": "// by esteldunedain\n\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n// Init variables\nGVAR(mapGpsShow) = true;\n\nGVAR(mapTool_Shown) = 0;\nGVAR(mapTool_pos) = [0,0];\nGVAR(mapTool_angle) = 0;\nGVAR(mapTool_isDragging) = false;\nGVAR(mapTool_isRotating) = false;\n\n//Install the event handers for the map tools on the main in-game map\n[{!isNull findDisplay 12},\n{\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseMoving\", {_this call FUNC(handleMouseMove);}];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseButtonDown\", {[1, _this] call FUNC(handleMouseButton);}];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"MouseButtonUp\", {[0, _this] call FUNC(handleMouseButton)}];\n    ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler [\"Draw\", {_this call FUNC(updateMapToolMarkers);}];\n}, []] call CBA_fnc_waitUntilAndExecute;\n\n[\"visibleMap\", {\n    params [\"\", \"_mapOn\"];\n    if (_mapOn) then {\n        // Show GPS if required\n        [GVAR(mapGpsShow)] call FUNC(openMapGps);\n    } else {\n        // Hide GPS\n        [false] call FUNC(openMapGps);\n\n        // Handle closing map in middle of line drawing (it's never created)\n        GVAR(freedrawing) = false;\n    };\n}] call CBA_fnc_addPlayerEventHandler;\n\n\nGVAR(freeDrawingData) = [];\nGVAR(freedrawing) = false;\n\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_calculateMapScale.sqf",
        "content": "/*\n * Author: esteldunedain\n * Returns the equivalent of 100m in screen coordinates\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_maptools_fnc_calculateMapScale\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _pos = ((findDisplay 12) displayCtrl 51) ctrlMapScreenToWorld [0.5, 0.5];\nprivate _screenOffset = ((findDisplay 12) displayCtrl 51) posWorldToScreen [(_pos select 0) + 100, (_pos select 1)];\n\n(_screenOffset select 0) - 0.5\n",
        "functionName": "ace_maptools_fnc_calculateMapScale"
      },
      {
        "fileName": "fnc_canUseMapGPS.sqf",
        "content": "/*\n * Author: esteldunedain\n * canUseMapGPS\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * call ACE_map_fnc_canUseMapGPS\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nvisibleMap &&\n{alive ACE_player} &&\n{\"ItemGPS\" in (assignedItems ACE_player)}\n",
        "functionName": "ace_maptools_fnc_canUseMapGPS"
      },
      {
        "fileName": "fnc_canUseMapTools.sqf",
        "content": "/*\n * Author: esteldunedain\n * canUseMapTools\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * call ACE_maptools_fnc_canUseMapTools\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nvisibleMap &&\n{alive ACE_player} &&\n{\n    scopeName \"hasMap\";\n    {\n        if (_x isKindOf [\"ItemMap\", configFile >> \"CfgWeapons\"]) exitWith {true breakOut \"hasMap\"};\n    } forEach (assignedItems ACE_player);\n    false\n} &&\n{\"ACE_MapTools\" in (items ACE_player)} &&\n{!GVAR(mapTool_isDragging)} &&\n{!GVAR(mapTool_isRotating)}\n",
        "functionName": "ace_maptools_fnc_canUseMapTools"
      },
      {
        "fileName": "fnc_drawLinesOnRoamer.sqf",
        "content": "/*\n * Author: PabstMirror\n * Prevents the cursor from entering the roamer when drawing lines and records the positions\n *\n * Arguments:\n * 0: The Map <CONTROL>\n * 1: Roamer Width <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [map, 300] call ace_maptools_fnc_drawLinesOnRoamer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!GVAR(drawStraightLines)) exitWith {};\n\nparams [\"_theMap\", \"_roamerWidth\"];\nGVAR(mapTool_pos) params [\"_roamerPosX\", \"_roamerPosY\"];\n\nprivate _posCenter = [_roamerPosX, _roamerPosY, 0];\n\nprivate _posTopRight = [\n_roamerPosX + (cos GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (sin GVAR(mapTool_angle)) * DIST_TOP_TO_CENTER_PERC * _roamerWidth,\n_roamerPosY + (-sin GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (cos GVAR(mapTool_angle)) * DIST_TOP_TO_CENTER_PERC * _roamerWidth,\n0];\n\nprivate _posTopLeft = [\n_roamerPosX + (-cos GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (sin GVAR(mapTool_angle)) * DIST_TOP_TO_CENTER_PERC * _roamerWidth,\n_roamerPosY + (sin GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (cos GVAR(mapTool_angle)) * DIST_TOP_TO_CENTER_PERC * _roamerWidth,\n0];\n\nprivate _posBottomLeft = [\n_roamerPosX + (-cos GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (sin GVAR(mapTool_angle)) * DIST_BOTTOM_TO_CENTER_PERC * _roamerWidth,\n_roamerPosY + (sin GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (cos GVAR(mapTool_angle)) * DIST_BOTTOM_TO_CENTER_PERC * _roamerWidth,\n0];\n\nprivate _posBottomRight = [\n_roamerPosX + (cos GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (sin GVAR(mapTool_angle)) * DIST_BOTTOM_TO_CENTER_PERC * _roamerWidth,\n_roamerPosY + (-sin GVAR(mapTool_angle)) * DIST_LEFT_TO_CENTER_PERC * _roamerWidth + (cos GVAR(mapTool_angle)) * DIST_BOTTOM_TO_CENTER_PERC * _roamerWidth,\n0];\n\nprivate _fnc_Distance = { // Get distance point _p is from a line made from _a to _b (uses 3d array commands, but z should be 0)\n    // Ref: https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Vector_formulation\n    params [\"_a\", \"_b\", \"_p\"];\n    private _n = _b vectorDiff _a;\n    private _pa = _a vectorDiff _p;\n    private _c = _n vectorMultiply ((_pa vectorDotProduct _n) / (_n vectorDotProduct _n));\n    private _d = _pa vectorDiff _c;\n    sqrt (_d vectorDotProduct _d);\n};\n\nprivate _currentMousePos = _theMap ctrlMapScreenToWorld getMousePosition;\n_currentMousePos set [2, 0];\n\n// Break the roamer rectangle into 4 triangle, one for each side\nswitch (true) do {\n    case (_currentMousePos inPolygon [_posCenter, _posTopLeft, _posBottomLeft]): { // Left\n        private _distanceToRoamerLine = ([_posTopLeft, _posBottomLeft, _currentMousePos] call _fnc_Distance);\n        _currentMousePos = _currentMousePos vectorAdd ([_distanceToRoamerLine, (GVAR(mapTool_angle) - 90) ,0] call CBA_fnc_polar2vect);\n        if (GVAR(freeDrawingData) isEqualTo []) then { // We start drawing on the line\n            GVAR(freeDrawingData) = [\"left\", _currentMousePos, _currentMousePos];\n        } else {\n            if ((GVAR(freeDrawingData) select 0) == \"left\") then { // We are already drawing on this line, find best spot\n                if ((_currentMousePos distance2d _posTopLeft) < ((GVAR(freeDrawingData) select 1) distance2d _posTopLeft)) then {\n                    GVAR(freeDrawingData) set [1, _currentMousePos];\n                };\n                if ((_currentMousePos distance2d _posBottomLeft) < ((GVAR(freeDrawingData) select 2) distance2d _posBottomLeft)) then {\n                    GVAR(freeDrawingData) set [2, _currentMousePos];\n                };\n            };\n        };\n        private _screenPosOfCorrectedPos = _theMap ctrlMapWorldToScreen _currentMousePos;\n        setMousePosition _screenPosOfCorrectedPos;\n    };\n    case (_currentMousePos inPolygon [_posCenter, _posTopLeft, _posTopRight]): { // Top\n        private _distanceToRoamerLine = ([_posTopLeft, _posTopRight, _currentMousePos] call _fnc_Distance);\n        _currentMousePos = _currentMousePos vectorAdd ([_distanceToRoamerLine, (GVAR(mapTool_angle) + 0) ,0] call CBA_fnc_polar2vect);\n        if (GVAR(freeDrawingData) isEqualTo []) then { // We start drawing on the line\n            GVAR(freeDrawingData) = [\"top\", _currentMousePos, _currentMousePos];\n        } else {\n            if ((GVAR(freeDrawingData) select 0) == \"top\") then { // We are already drawing on this line, find best spot\n                if ((_currentMousePos distance2d _posTopLeft) < ((GVAR(freeDrawingData) select 1) distance2d _posTopLeft)) then {\n                    GVAR(freeDrawingData) set [1, _currentMousePos];\n                };\n                if ((_currentMousePos distance2d _posTopRight) < ((GVAR(freeDrawingData) select 2) distance2d _posTopRight)) then {\n                    GVAR(freeDrawingData) set [2, _currentMousePos];\n                };\n            };\n        };\n        private _screenPosOfCorrectedPos = _theMap ctrlMapWorldToScreen _currentMousePos;\n        setMousePosition _screenPosOfCorrectedPos;\n    };\n    case (_currentMousePos inPolygon [_posCenter, _posTopRight, _posBottomRight]): { // Right\n        private _distanceToRoamerLine = ([_posTopRight, _posBottomRight, _currentMousePos] call _fnc_Distance);\n        _currentMousePos = _currentMousePos vectorAdd ([_distanceToRoamerLine, (GVAR(mapTool_angle) + 90) ,0] call CBA_fnc_polar2vect);\n        if (GVAR(freeDrawingData) isEqualTo []) then { // We start drawing on the line\n            GVAR(freeDrawingData) = [\"right\", _currentMousePos, _currentMousePos];\n        } else {\n            if ((GVAR(freeDrawingData) select 0) == \"right\") then { // We are already drawing on this line, find best spot\n                if ((_currentMousePos distance2d _posTopRight) < ((GVAR(freeDrawingData) select 1) distance2d _posTopRight)) then {\n                    GVAR(freeDrawingData) set [1, _currentMousePos];\n                };\n                if ((_currentMousePos distance2d _posBottomRight) < ((GVAR(freeDrawingData) select 2) distance2d _posBottomRight)) then {\n                    GVAR(freeDrawingData) set [2, _currentMousePos];\n                };\n            };\n        };\n        private _screenPosOfCorrectedPos = _theMap ctrlMapWorldToScreen _currentMousePos;\n        setMousePosition _screenPosOfCorrectedPos;\n    };\n    case (_currentMousePos inPolygon [_posCenter, _posBottomLeft, _posBottomRight]): { // Bottom\n        private _distanceToRoamerLine = ([_posBottomLeft, _posBottomRight, _currentMousePos] call _fnc_Distance);\n        _currentMousePos = _currentMousePos vectorAdd ([_distanceToRoamerLine, (GVAR(mapTool_angle) + 180) ,0] call CBA_fnc_polar2vect);\n        if (GVAR(freeDrawingData) isEqualTo []) then { // We start drawing on the line\n            GVAR(freeDrawingData) = [\"bottom\", _currentMousePos, _currentMousePos];\n        } else {\n            if ((GVAR(freeDrawingData) select 0) == \"bottom\") then { // We are already drawing on this line, find best spot\n                if ((_currentMousePos distance2d _posBottomLeft) < ((GVAR(freeDrawingData) select 1) distance2d _posBottomLeft)) then {\n                    GVAR(freeDrawingData) set [1, _currentMousePos];\n                };\n                if ((_currentMousePos distance2d _posBottomRight) < ((GVAR(freeDrawingData) select 2) distance2d _posBottomRight)) then {\n                    GVAR(freeDrawingData) set [2, _currentMousePos];\n                };\n            };\n        };\n        private _screenPosOfCorrectedPos = _theMap ctrlMapWorldToScreen _currentMousePos;\n        setMousePosition _screenPosOfCorrectedPos;\n    };\n};\n\n#ifdef DEBUG_MODE_FULL\n_theMap drawIcon ['iconStaticMG',[1,0,0,1],_posTopRight,24,24,getDir player,'1,1',1,0.03,'TahomaB','right'];\n_theMap drawIcon ['iconStaticMG',[1,0,0,1],_posTopLeft,24,24,getDir player,'-1,1',1,0.03,'TahomaB','right'];\n_theMap drawIcon ['iconStaticMG',[1,0,0,1],_posBottomLeft,24,24,getDir player,'-1,-1',1,0.03,'TahomaB','right'];\n_theMap drawIcon ['iconStaticMG',[1,0,0,1],_posBottomRight,24,24,getDir player,'1,-1',1,0.03,'TahomaB','right'];\nif !(GVAR(freeDrawingData) isEqualTo []) then {\n    _theMap drawIcon ['iconStaticMG',[0,0,1,1],GVAR(freeDrawingData) select 1,24,24,getDir player,'1,-1',1,0.03,'TahomaB','right'];\n    _theMap drawIcon ['iconStaticMG',[0,0,1,1],GVAR(freeDrawingData) select 2,24,24,getDir player,'1,-1',1,0.03,'TahomaB','right'];\n};\n#endif\n",
        "functionName": "ace_maptools_fnc_drawLinesOnRoamer"
      },
      {
        "fileName": "fnc_handleMouseButton.sqf",
        "content": "/*\n * Author: esteldunedain\n * Handle mouse buttons.\n *\n * Arguments:\n * 0: 1 if mouse down down, 0 if mouse button up <Number>\n * 1: Parameters of the mouse button event <ARRAY>\n *\n * Return Value:\n * true if event was handled <BOOL>\n *\n * Example:\n * [0, [array]] call ACE_maptools_fnc_handleMouseButton\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_dir\", \"_params\"];\n_params params [\"_control\", \"_button\", \"_screenPosX\", \"_screenPosY\", \"_shiftKey\", \"_ctrlKey\", \"_altKey\"];\nTRACE_2(\"params\",_dir,_params);\n\n// Using line drawing\nif ((_button == 0) && {GVAR(freedrawing) || _ctrlKey}) exitWith {\n    if (GVAR(freedrawing) && {_dir == 0}) then {\n        GVAR(freedrawing) = false;\n        GVAR(drawPosEnd) = _control ctrlMapScreenToWorld [_screenPosX, _screenPosY];\n        TRACE_1(\"Ending Line\",GVAR(freedrawing),GVAR(drawPosEnd));\n        [{\n            if (allMapMarkers isEqualTo []) exitWith {};\n            private _markerName = allMapMarkers select (count allMapMarkers - 1);\n            private _markerPos = getMarkerPos _markerName;\n            private _distanceCheck = _markerPos distance2d GVAR(drawPosStart);\n\n            TRACE_3(\"Line Drawn\",_markerName,_markerPos,_distanceCheck);\n\n            if (_distanceCheck > 1) exitWith {WARNING(\"Wrong Marker!\");};\n            if ((count GVAR(freeDrawingData)) != 3) exitWith {TRACE_1(\"never touched roamer\",GVAR(freeDrawingData));};\n\n            GVAR(freeDrawingData) params [\"\", \"_startStraightPos\", \"_endStraightPos\"];\n           _startStraightPos set [2, 0];\n            _endStraightPos set [2, 0];\n\n            // Convert marker to rectangle and change it's pos/size/dir\n            _markerName setMarkerShape \"RECTANGLE\";\n\n            private _difPos = _endStraightPos vectorDiff _startStraightPos;\n            private _mag = vectorMagnitude _difPos;\n            _markerName setMarkerPos (_startStraightPos vectorAdd (_difPos vectorMultiply 0.5));\n            _markerName setMarkerSize [10, _mag / 2];\n            _markerName setMarkerDir (_difPos call CBA_fnc_vectDir);\n\n        }, []] call CBA_fnc_execNextFrame;\n    } else {\n        if (_ctrlKey && {_dir == 1}) then {\n            GVAR(freeDrawingData) = [];\n            GVAR(freedrawing) = true;\n            GVAR(drawPosStart) = _control ctrlMapScreenToWorld [_screenPosX, _screenPosY];\n            TRACE_2(\"Starting Line\",GVAR(freedrawing),GVAR(drawPosStart));\n        } else {\n            GVAR(freedrawing) = false;\n            TRACE_1(\"weird - reseting\",GVAR(freedrawing));\n        };\n    };\n    false\n};\n\nprivate _handled = false;\n\n// If it's not a left button event, exit\nif (_button != 0) exitWith {_handled};\n\n// If releasing\nif (_dir != 1) then {\n    if (GVAR(mapTool_isDragging) || GVAR(mapTool_isRotating)) then {\n        GVAR(mapTool_isDragging) = false;\n        GVAR(mapTool_isRotating) = false;\n        _handled = true;\n    };\n} else {\n    // If clicking\n    if !(call FUNC(canUseMapTools)) exitWith {};\n\n    // Transform mouse screen position to coordinates\n    private _pos = _control ctrlMapScreenToWorld [_screenPosX, _screenPosY];\n    _pos set [count _pos, 0];\n\n    GVAR(mapTool_isDragging) = false;\n    GVAR(mapTool_isRotating) = false;\n\n    // If no map tool marker then exit\n    if (GVAR(mapTool_Shown) == 0) exitWith {};\n\n    // Check if clicking the maptool\n    if (_pos call FUNC(isInsideMapTool)) exitWith {\n        // Store data for dragging\n        GVAR(mapTool_startPos) = + GVAR(mapTool_pos);\n        GVAR(mapTool_startDragPos) = + _pos;\n\n        private _rotateKeyPressed = switch (GVAR(rotateModifierKey)) do {\n            case (1): {_altKey};\n            case (2): {_ctrlKey};\n            case (3): {_shiftKey};\n            default {false};\n        };\n\n        if (_rotateKeyPressed) then {\n            // Store data for rotating\n            GVAR(mapTool_startAngle) = + GVAR(mapTool_angle);\n            GVAR(mapTool_startDragAngle) = (180 + ((GVAR(mapTool_startDragPos) select 0) - (GVAR(mapTool_startPos) select 0)) atan2 ((GVAR(mapTool_startDragPos) select 1) - (GVAR(mapTool_startPos) select 1)) mod 360);\n            // Start rotating\n            GVAR(mapTool_isRotating) = true;\n        } else {\n            // Start dragging\n            GVAR(mapTool_isDragging) = true;\n        };\n        _handled = true;\n    };\n};\n\n_handled\n",
        "functionName": "ace_maptools_fnc_handleMouseButton"
      },
      {
        "fileName": "fnc_handleMouseMove.sqf",
        "content": "/*\n * Author: esteldunedain\n * Handle mouse movement over the map tool.\n *\n * Arguments:\n * 0: Map Control <CONTROL>\n * 1: Mouse position on screen coordinates <ARRAY>\n *\n * Return Value:\n * true if event was handled <BOOL>\n *\n * Example:\n * [CONTROL, [0, 5, 1]] call ACE_maptools_fnc_handleMouseMove\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_control\", \"_mousePosX\", \"_mousePosY\"];\nTRACE_3(\"params\",_control,_mousePosX,_mousePosY);\n\n// If have no map tools, then exit\nif (((isNull ACE_player) || {!(\"ACE_MapTools\" in items ACE_player)})) exitWith {\n    false\n};\n\n// If map tools not shown, then exit\nif (GVAR(mapTool_Shown) == 0) exitWith {false};\n\nprivate _mousePosition = _control ctrlMapScreenToWorld [_mousePosX, _mousePosY];\n\n// Translation\nif (GVAR(mapTool_isDragging)) exitWith {\n    GVAR(mapTool_pos) set [0, (GVAR(mapTool_startPos) select 0) + (_mousePosition select 0) - (GVAR(mapTool_startDragPos) select 0)];\n    GVAR(mapTool_pos) set [1, (GVAR(mapTool_startPos) select 1) + (_mousePosition select 1) - (GVAR(mapTool_startDragPos) select 1)];\n\n    true\n};\n\n// Rotation\nif (GVAR(mapTool_isRotating)) exitWith {\n    // Get new angle\n    private _angle =  (180 + ((_mousePosition select 0) - (GVAR(mapTool_startPos) select 0)) atan2 ((_mousePosition select 1) - (GVAR(mapTool_startPos) select 1)) mod 360);\n    GVAR(mapTool_angle) = GVAR(mapTool_startAngle) + _angle - GVAR(mapTool_startDragAngle);\n\n    true\n};\n\nfalse\n",
        "functionName": "ace_maptools_fnc_handleMouseMove"
      },
      {
        "fileName": "fnc_isInsideMapTool.sqf",
        "content": "/*\n * Author: esteldunedain\n * Return true if the position is inside the map marker (to allow dragging).\n *\n * Arguments:\n * 0: x Position (in meters) <NUMBER>\n * 1: y Position (in meters) <NUMBER>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [0, 5] call ACE_maptools_fnc_isInsideMapTool\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (GVAR(mapTool_Shown) == 0) exitWith {false};\nprivate _textureWidth = [TEXTURE_WIDTH_IN_M, TEXTURE_WIDTH_IN_M / 2] select (GVAR(mapTool_Shown) - 1);\n\nprivate _pos = [_this select 0, _this select 1, 0];\nprivate _relPos = _pos vectorDiff [GVAR(mapTool_pos) select 0, GVAR(mapTool_pos) select 1, 0];\nprivate _dirVector = [sin(GVAR(mapTool_angle)), cos(GVAR(mapTool_angle)), 0];\n\n// Projection of the relative position over the longitudinal axis of the map tool\nprivate _lambdaLong = _dirVector vectorDotProduct _relPos;\nif (_lambdaLong < DIST_BOTTOM_TO_CENTER_PERC * _textureWidth) exitWith {false};\n\n// Projection of the relative position over the trasversal axis of the map tool\nprivate _lambdaTrasAbs = vectorMagnitude (_relPos vectorDiff (_dirVector vectorMultiply _lambdaLong));\nif (_lambdaLong > DIST_TOP_TO_CENTER_PERC * _textureWidth) exitWith {false};\nif (_lambdaTrasAbs > DIST_LEFT_TO_CENTER_PERC * _textureWidth) exitWith {false};\n\ntrue\n",
        "functionName": "ace_maptools_fnc_isInsideMapTool"
      },
      {
        "fileName": "fnc_openMapGps.sqf",
        "content": "/*\n * Author: esteldunedain\n * Opens or closes the gps on the map screen, showing coordinates\n *\n * Arguments:\n * 0: Open GPS? <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ACE_maptools_fnc_openMapGps\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_shouldOpenGps\"];\n\nprivate _isOpen = !(isNull (uiNamespace getVariable [QGVAR(ui_mapGpsDisplay), displayNull]));\n\nif (_shouldOpenGps && {\"ItemGPS\" in assignedItems ACE_player} && {!_isOpen}) then {\n    (\"RscACE_MapGps\" call BIS_fnc_rscLayer) cutRsc [\"RscACE_MapGps\",\"PLAIN\"];\n\n    [FUNC(openMapGpsUpdate), 0.5, []] call CBA_fnc_addPerFrameHandler;  //update bearing/altitude every 0.5 sec (ticktime)\n} else {\n    (\"RscACE_MapGps\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\n};\n",
        "functionName": "ace_maptools_fnc_openMapGps"
      },
      {
        "fileName": "fnc_openMapGpsUpdate.sqf",
        "content": "/*\n * Author: esteldunedain\n * update gps display\n *\n * Arguments:\n * Something\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_maptools_fnc_openMapGpsUpdate\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif ((!(\"ItemGPS\" in assigneditems ACE_player)) || {isNull (uiNamespace getVariable [QGVAR(ui_mapGpsDisplay), displayNull])}) exitWith {\n    (\"RscACE_MapGps\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];  // Close GPS RSC\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;  // Remove frameHandler\n};\ndisableSerialization;\n\nprivate _mapGpsDisplay = uiNamespace getVariable [QGVAR(ui_mapGpsDisplay), displayNull];\nprivate _ctrl = _mapGpsDisplay displayCtrl 913590;\n_ctrl ctrlSetText str (round (getDir ACE_player));  // Set Heading\n_ctrl = _mapGpsDisplay displayCtrl 913591;\n_ctrl ctrlSetText str (round ((getPosASL ACE_player) select 2) + EGVAR(common,mapAltitude)); // Set Altitude\n_ctrl = _mapGpsDisplay displayCtrl 913592;\n_ctrl ctrlSetText mapGridPosition ACE_player; // Set grid cords\n",
        "functionName": "ace_maptools_fnc_openMapGpsUpdate"
      },
      {
        "fileName": "fnc_updateMapToolMarkers.sqf",
        "content": "/*\n * Author: esteldunedain\n * Update the map tool markers, position, size, rotation and visibility.\n *\n * Arguments:\n * 0: The Map <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ACE_maptools_fnc_updateMapToolMarkers\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_theMap\"];\n\nif ((GVAR(mapTool_Shown) == 0) || {!(\"ACE_MapTools\" in items ACE_player)}) exitWith {};\n\nprivate _rotatingTexture = \"\";\nprivate _textureWidth = 0;\nif (GVAR(mapTool_Shown) == 1) then {\n    _rotatingTexture = QPATHTOF(data\\mapToolRotatingNormal.paa);\n    _textureWidth = TEXTURE_WIDTH_IN_M;\n} else {\n    _rotatingTexture = QPATHTOF(data\\mapToolRotatingSmall.paa);\n    _textureWidth = TEXTURE_WIDTH_IN_M / 2;\n};\n\nif (GVAR(freedrawing)) then {[_theMap, _textureWidth] call FUNC(drawLinesOnRoamer);};\n\n// Update scale of both parts\ngetResolution params [\"_resWidth\", \"_resHeight\", \"\", \"\", \"_aspectRatio\"];\nprivate _scaleX = 32 * _textureWidth * CONSTANT_SCALE * (call FUNC(calculateMapScale));\nprivate _scaleY = _scaleX * ((_resWidth / _resHeight) / _aspectRatio); //handle bad aspect ratios\n\n// Position of the fixed part\nprivate _xPos = GVAR(mapTool_pos) select 0;\nprivate _yPos = (GVAR(mapTool_pos) select 1) + _textureWidth * CENTER_OFFSET_Y_PERC;\n\n_theMap drawIcon [QPATHTOF(data\\mapToolFixed.paa), [1,1,1,1], [_xPos,_yPos], _scaleX, _scaleY, 0, \"\", 0];\n\n// Position and rotation of the rotating part\n_xPos = (GVAR(mapTool_pos) select 0) + sin(GVAR(mapTool_angle)) * _textureWidth * CENTER_OFFSET_Y_PERC;\n_yPos = (GVAR(mapTool_pos) select 1) + cos(GVAR(mapTool_angle)) * _textureWidth * CENTER_OFFSET_Y_PERC;\n\n_theMap drawIcon [_rotatingTexture, [1,1,1,1], [_xPos,_yPos], _scaleX, _scaleY, GVAR(mapTool_angle), \"\", 0];\n",
        "functionName": "ace_maptools_fnc_updateMapToolMarkers"
      }
    ]
  },
  {
    "component": "map_gestures",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif ([\"STMapGestures\"] call EFUNC(common,isModLoaded)) exitWith {\n    WARNING(\"st_map_gestures is installed - exiting [remove st_map_gestures.pbo to allow ace version]\");\n};\n\nif (!hasInterface) exitWith {};\n\n[\"ace_settingsInitialized\", {\n    if (!GVAR(enabled)) exitWith {};\n    \n    // This will set QEGVAR(common,playerOwner) var on player objects\n    [] call EFUNC(common,setPlayerOwner);\n    \n    GVAR(pointPosition) = [0,0,0];\n\n    [QGVAR(syncPos), {\n        params [\"_unit\", \"_pointPos\"];\n        _unit setVariable [QGVAR(pointPosition), _pointPos];\n    }] call CBA_fnc_addEventHandler;\n\n    [{\n        if (isNull (findDisplay 12)) exitWith {};\n\n        params [\"\", \"_pfhId\"];\n\n        call FUNC(receiverInit);\n        call FUNC(transmitterInit);\n\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\n    }, 1, []] call CBA_fnc_addPerFrameHandler;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(GroupColorCfgMappingNew) = call CBA_fnc_createNamespace;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addGroupColorMapping.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix, PabstMirror\n * Adds a group id color mapping.\n *\n * Arguments:\n * 0: Group ID or group <STRING><GROUP>\n * 1: Leader color array (4 numbers including alpha) <ARRAY>\n * 2: Unit (non-leader) color array (4 numbers including alpha) <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"Alpha 1-1\", [1,0,0,1], [0,1,0,1]] call ace_map_gestures_fnc_addGroupColorMapping\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!params [[\"_group\", \"\", [grpNull, \"\"]], [\"_leadColor\", [1,1,1,1], [[]], 4], [\"_unitColor\", [1,1,1,1], [[]], 4]]) exitWith {\n    ERROR_1(\"Bad Params: %1\",_this);\n};\nTRACE_3(\"params\",_group,_leadColor,_unitColor);\n\nif (_group isEqualType grpNull) then {_group = groupID _group};\n\nif (_group == \"\") exitWith {ERROR(\"Group ID is blank, which is not valid.\")};\nif (!([_leadColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"leadColor is not a valid color array.\")};\nif (!([_unitColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"color is not a valid color array.\")};\n\nGVAR(GroupColorCfgMappingNew) setVariable [_group, [_leadColor, _unitColor]];\n",
        "functionName": "ace_map_gestures_fnc_addGroupColorMapping"
      },
      {
        "fileName": "fnc_drawMapGestures.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Receives and draws map gestures from nearby players.\n *\n * Arguments:\n * 0: Map Handle <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [findDisplay 12 displayCtrl 51] call ace_map_gesutres_fnc_drawMapGestures\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(draw);\n\n#define ICON_RENDER_SIZE 55\n#define ICON_TEXT_ALIGN \"left\"\n#define ICON_ANGLE 0\n#define ICON_SHADOW 1\n#define TEXT_FONT \"RobotoCondensedBold\"\n#define TEXT_ICON_RENDER_SIZE 20\n#define TEXT_SIZE 0.030\n#define TEXT_SHADOW 0\n\nif (!GVAR(enabled) || !visibleMap) exitWith {};\n\nparams [\"_mapHandle\"];\n\n// Iterate over all nearby players and render their pointer if player is transmitting.\n{\n\n    // Only render if the unit is alive and transmitting\n    if (alive _x && {_x getVariable [QGVAR(Transmit), false]}) then {\n\n        private _pos = _x getVariable [QGVAR(pointPosition), [0,0,0]];\n\n        private _group = group _x;\n        private _grpName = groupID _group;\n\n        // If color settings for the group exist, then use those, otherwise fall back to the default colors\n        private _colorMap = GVAR(GroupColorCfgMappingNew) getVariable _grpName;\n        private _color = if (isNil \"_colorMap\") then {\n            [GVAR(defaultLeadColor), GVAR(defaultColor)] select (_x != leader _group);\n        } else {\n            _colorMap select (_x != leader _group);\n        };\n\n        TRACE_2(\"\",_colorMap,_color);\n        \n        // Render icon and player name\n        _mapHandle drawIcon [\"\\a3\\ui_f\\data\\gui\\cfg\\Hints\\icon_text\\group_1_ca.paa\", _color, _pos, ICON_RENDER_SIZE, ICON_RENDER_SIZE, ICON_ANGLE, \"\", ICON_SHADOW, TEXT_SIZE, TEXT_FONT, ICON_TEXT_ALIGN];\n        _mapHandle drawIcon [\"#(argb,8,8,3)color(0,0,0,0)\", GVAR(nameTextColor), _pos, TEXT_ICON_RENDER_SIZE, TEXT_ICON_RENDER_SIZE, ICON_ANGLE, name _x, TEXT_SHADOW, TEXT_SIZE, TEXT_FONT, ICON_TEXT_ALIGN];\n    };\n    nil\n} count ([ACE_player, GVAR(maxRange)] call FUNC(getProximityPlayers));\n\nEND_COUNTER(draw);\n",
        "functionName": "ace_map_gestures_fnc_drawMapGestures"
      },
      {
        "fileName": "fnc_endTransmit.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Ensure that all variables used to indicate transmission are disabled.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_map_gestures_fnc_endTransmit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!GVAR(enabled)) exitWith {};\n\nACE_player setVariable [QGVAR(Transmit), false, true];\nGVAR(EnableTransmit) = false;\n",
        "functionName": "ace_map_gestures_fnc_endTransmit"
      },
      {
        "fileName": "fnc_getProximityPlayers.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Returns all players in a given range and in the units vehicle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Range <NUMBER>\n *\n * Return Value:\n * All units in proximity <ARRAY>\n *\n * Example:\n * [player, 7] call ace_map_gestures_fnc_getProximityPlayers\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_range\"];\n\nprivate _proximityPlayers = (getPos _unit) nearEntities [[\"CAMAnBase\"], _range];\n_proximityPlayers deleteAt (_proximityPlayers find _unit);\n_proximityPlayers append (crew vehicle _unit);\n\n_proximityPlayers select {[_x, false] call EFUNC(common,isPlayer);}\n",
        "functionName": "ace_map_gestures_fnc_getProximityPlayers"
      },
      {
        "fileName": "fnc_initTransmit.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Initializes transmitting map gestures.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_map_gestures_fnc_initTransmit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!GVAR(enabled)) exitWith {};\n\nGVAR(EnableTransmit) = true;\n[FUNC(transmit), GVAR(interval), []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_map_gestures_fnc_initTransmit"
      },
      {
        "fileName": "fnc_isValidColorArray.sqf",
        "content": "/*\n * Author: MikeMatrix\n * Validate if an array is in the propper color format.\n *\n * Arguments:\n * 0: Color Array <ARRAY>\n *\n * Return Value:\n * Is valid Color Array <BOOL>\n *\n * Example:\n * [[1, 0.2, 1, 0.5]] call ace_map_gestures_fnc_isValidColorArray\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nscopeName \"main\";\n\nparams [\"_colorArray\"];\n\nif (isNil \"_colorArray\") exitWith {false};\nif (!(_colorArray isEqualType [])) exitWith {false};\nif (count _colorArray != 4) exitWith {false};\n\n{\n    if ((!(_x isEqualType 0)) || {_x < 0 || _x > 1}) exitWith {false breakOut \"main\"};\n} count _colorArray;\n\ntrue\n",
        "functionName": "ace_map_gestures_fnc_isValidColorArray"
      },
      {
        "fileName": "fnc_moduleGroupSettings.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Initializes Settings for the groups modules and transcodes settings to a useable format.\n *\n * Arguments:\n * 0: Logic <LOGIC>\n * 1: Units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [module, [player], true] call ace_map_gestures_fnc_moduleGroupSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\nTRACE_3(\"params\",_logic,_units,_activated);\n\nif (!_activated) exitWith {};\n\n// Transcode string setting into usable array. Example: \"1,1,1,1\" -> [1, 1, 1, 1]\nprivate _leadColor = call compile (\"[\" + (_logic getVariable [\"leadColor\", \"\"]) + \"]\");\nif (!([_leadColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"leadColor is not a valid color array.\")};\nprivate _color = call compile (\"[\" + (_logic getVariable [\"color\", \"\"]) + \"]\");\nif (!([_color] call FUNC(isValidColorArray))) exitWith {ERROR(\"color is not a valid color array.\")};\n\n// Add all synchronized groups and reference custom configuration for them\n{\n    [group _x, _leadColor, _color] call FUNC(addGroupColorMapping);\n} forEach _units;\n",
        "functionName": "ace_map_gestures_fnc_moduleGroupSettings"
      },
      {
        "fileName": "fnc_moduleSettings.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Initializes Settings for the module and transcodes settings to a useable format.\n *\n * Arguments:\n * 0: Logic <LOGIC>\n * 1: Units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [module, [player], true] call ace_map_gestures_fnc_moduleGroupSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(maxRange), \"maxRange\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(interval), \"interval\"] call EFUNC(common,readSettingFromModule);\n\n//For default fallback colors, setting to empty (\"\") will not force on clients\nprivate _defaultLeadColor = _logic getVariable [\"defaultLeadColor\", \"\"];\nif (_defaultLeadColor != \"\") then {\n    _defaultLeadColor = call compile (\"[\" + _defaultLeadColor + \"]\");\n    if (!([_defaultLeadColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"defaultLeadColor is not a valid color array.\")};\n    [\"CBA_settings_setSettingMission\", [QGVAR(defaultLeadColor), _defaultLeadColor, true]] call CBA_fnc_localEvent;\n};\n\nprivate _defaultColor = _logic getVariable [\"defaultColor\", \"\"];\nif (_defaultColor != \"\") then {\n    _defaultColor = call compile (\"[\" + _defaultColor + \"]\");\n    if (!([_defaultColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"defaultColor is not a valid color array.\")};\n    [\"CBA_settings_setSettingMission\", [QGVAR(defaultColor), _defaultColor, true]] call CBA_fnc_localEvent;\n};\n\nINFO(\"Map Gestures Module Initialized.\");\n",
        "functionName": "ace_map_gestures_fnc_moduleSettings"
      },
      {
        "fileName": "fnc_receiverInit.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Initializes the receiver and hooks it to the Draw event of the map.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_map_gestures_fnc_receiverInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nACE_player setVariable [QGVAR(Transmit), false, true];\nGVAR(EnableTransmit) = false;\n\nif (!isNil QGVAR(DrawMapHandlerID)) then {\n    (findDisplay 12 displayCtrl 51) ctrlRemoveEventHandler [\"Draw\", GVAR(DrawMapHandlerID)];\n    GVAR(DrawMapHandlerID) = nil;\n};\nGVAR(DrawMapHandlerID) = findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", {call FUNC(drawMapGestures)}];\n",
        "functionName": "ace_map_gestures_fnc_receiverInit"
      },
      {
        "fileName": "fnc_transmit.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Transmit PFH\n *\n * Arguments:\n * 0: Arguments <ARRAY>\n * 1: PFH ID <NUMBER>\n *\n * Return Value:\n * Return description <TYPE>\n *\n * Example:\n * [[], 2] call ace_map_gestures_fnc_transmit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(transmit);\n\nparams [\"\", \"_pfhId\"];\n\nif (!visibleMap) then {\n    call FUNC(endTransmit);\n};\n\nif (!GVAR(EnableTransmit) || !visibleMap) exitWith {\n    [_pfhId] call CBA_fnc_removePerFrameHandler;\n};\n\n{\n    private _owner = _x getVariable [QEGVAR(common,playerOwner), -1];\n    if (_owner > -1) then {\n        private _remotePos = _x getVariable [QGVAR(remotePos), [0,0,0]];\n        if ((_remotePos distance2d GVAR(pointPosition)) > 1) then { // Only transmit when actually moving\n            [QGVAR(syncPos), [ACE_Player, GVAR(pointPosition)], _owner] call CBA_fnc_ownerEvent;\n            _x setVariable [QGVAR(remotePos), GVAR(pointPosition)];\n        };\n    };\n} count ([ACE_player, GVAR(maxRange)] call FUNC(getProximityPlayers));\n\nEND_COUNTER(transmit);\n",
        "functionName": "ace_map_gestures_fnc_transmit"
      },
      {
        "fileName": "fnc_transmitterInit.sqf",
        "content": "/*\n * Author: Dslyecxi, MikeMatrix\n * Initializes the transmitting event handlers.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_map_gestures_fnc_transmitterInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nprivate _mapCtrl = findDisplay 12 displayCtrl 51;\n\n// MouseMoving EH.\nif (!isNil QGVAR(MouseMoveHandlerID)) then {\n    _mapCtrl ctrlRemoveEventHandler [\"MouseMoving\", GVAR(MouseMoveHandlerID)];\n    GVAR(MouseMoveHandlerID) = nil;\n};\nGVAR(MouseMoveHandlerID) = _mapCtrl ctrlAddEventHandler [\"MouseMoving\", {\n    // Don't transmit any data if we're using the map tools\n    if (!GVAR(EnableTransmit) || {([\"ace_maptools\"] call EFUNC(common,isModLoaded)) && {EGVAR(maptools,mapTool_isDragging) || EGVAR(maptools,mapTool_isRotating)}}) exitWith {};\n\n    params [\"_control\", \"_posX\", \"_posY\"];\n\n    if (!(ACE_player getVariable QGVAR(Transmit))) then {\n        ACE_player setVariable [QGVAR(Transmit), true, true];\n    };\n\n    GVAR(pointPosition) = _control ctrlMapScreenToWorld [_posX, _posY];\n}];\n\n// MouseDown EH\nif (!isNil QGVAR(MouseDownHandlerID)) then {\n    _mapCtrl ctrlRemoveEventHandler [\"MouseButtonDown\",GVAR(MouseDownHandlerID)];\n    GVAR(MouseDownHandlerID) = nil;\n};\nGVAR(MouseDownHandlerID) = _mapCtrl ctrlAddEventHandler [\"MouseButtonDown\", {\n    if (!GVAR(enabled)) exitWith {};\n\n    params [\"\", \"_button\"];\n\n    if (_button == 0) then {call FUNC(initTransmit);};\n}];\n\n// MouseUp EH\nif (!isNil QGVAR(MouseUpHandlerID)) then {\n    _mapCtrl ctrlRemoveEventHandler [\"MouseButtonUp\", GVAR(MouseUpHandlerID)];\n    GVAR(MouseUpHandlerID) = nil;\n};\nGVAR(MouseUpHandlerID) = _mapCtrl ctrlAddEventHandler [\"MouseButtonUp\", {\n    if (!GVAR(enabled)) exitWith {};\n\n    params [\"\", \"_button\"];\n\n    if (_button == 0) then {call FUNC(endTransmit);};\n}];\n",
        "functionName": "ace_map_gestures_fnc_transmitterInit"
      }
    ]
  },
  {
    "component": "markers",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\n// recieve remote marker data\n[QGVAR(setMarkerNetwork), {_this call DFUNC(setMarkerNetwork)}] call CBA_fnc_addEventHandler;\n\n// recieve marker data for JIP\n[QGVAR(setMarkerJIP), {_this call DFUNC(setMarkerJIP)}] call CBA_fnc_addEventHandler;\n\n// request marker data for JIP\nif (isMultiplayer && {!isServer} && {hasInterface}) then {\n    GVAR(localLogic) = (createGroup sideLogic) createUnit [\"Logic\", [0,0,0], [], 0, \"NONE\"];\n    [QGVAR(sendMarkersJIP), [GVAR(localLogic)]] call CBA_fnc_serverEvent;\n};\n\nGVAR(mapDisplaysWithDrawEHs) = [];\nGVAR(currentMarkerPosition) = [];\nGVAR(currentMarkerAngle) = 0;\nGVAR(currentMarkerColorConfigName) = \"\";\nGVAR(currentMarkerConfigName) = \"\";\n\n// set marker pos local on every computer (prevent markers visible for everyone)\n[QGVAR(applyMarkerPosLocal), {\n    params[\"_marker\", \"_pos\"];\n    _marker setMarkerPosLocal _pos;\n\n    if (isServer) then {\n        private _index = (GETGVAR(allMapMarkers,[])) find _marker; // case-sensitive, but should be fine\n        if (_index < 0) exitWith {ERROR_1(\"Could not find data for %1\", _marker);};\n        private _data = GVAR(allMapMarkersProperties) select _index;\n        _data set [2, _pos];\n    };\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_settingsInitialized\", {\n    if (GVAR(movableMarkersEnabled)) then {\n        if (!hasInterface) exitWith {};\n        [{\n            !isNull (findDisplay 12)\n        }, {\n            (findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"MouseButtonDown\", FUNC(onMouseButtonDownMap)];\n            (findDisplay 12 displayCtrl 51) ctrlAddEventHandler [\"MouseButtonUp\", FUNC(onMouseButtonUpMap)];\n        }] call CBA_fnc_waitUntilAndExecute;\n    };\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// init marker types\nif (isNil QGVAR(MarkersCache)) then {\n    GVAR(MarkersCache) = [];\n\n    private _config = configfile >> \"CfgMarkers\";\n\n    for \"_a\" from 0 to (count _config - 1) do {\n        private _marker = _config select _a;\n\n        if (getNumber (_marker >> \"scope\") == 2) then {\n            private _name = getText (_marker >> \"name\");\n            private _icon = getText (_marker >> \"icon\");\n\n            GVAR(MarkersCache) pushBack [_name, _a, _icon];\n        };\n    };\n};\n\n// init marker colors\nif (isNil QGVAR(MarkerColorsCache)) then {\n    GVAR(MarkerColorsCache) = [];\n\n    private _config = configfile >> \"CfgMarkerColors\";\n\n    for \"_a\" from 0 to (count _config - 1) do {\n        private _marker = _config select _a;\n\n        if (getNumber (_marker >> \"scope\") == 2) then {\n            private _name = getText (_marker >> \"name\");\n            private _rgba = getArray (_marker >> \"color\");\n\n            {\n                if !( _x isEqualType 0) then {\n                    _rgba set [_forEachIndex, call compile _x];\n                };\n            } forEach _rgba;\n\n            _rgba params [\"_red\", \"_green\", \"_blue\", \"_alpha\"];\n            private _icon = format [\"#(argb,8,8,3)color(%1,%2,%3,%4)\", _red, _green, _blue, _alpha];\n\n            GVAR(MarkerColorsCache) pushBack [_name, _a, _icon];\n        };\n    };\n};\n\n//Server Sync JIP markers:\n[QGVAR(sendMarkersJIP), FUNC(sendMarkersJIP)] call CBA_fnc_addEventHandler;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canMoveMarker.sqf",
        "content": "/*\n * Author: chris579\n * Checks whether the player can move markers.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Whether the player can move markers <BOOL>\n *\n * Example:\n * [] call ace_markers_fnc_canMoveMarker\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nswitch (GVAR(moveRestriction)) do {\n    case MOVE_RESTRICTION_ALL: { true };\n    case MOVE_RESTRICTION_ADMINS: { IS_ADMIN };\n    case MOVE_RESTRICTION_GROUP_LEADERS: {\n        leader group ACE_player == ACE_player\n    };\n    case MOVE_RESTRICTION_GROUP_LEADERS_ADMINS: {\n        (leader group ACE_player == ACE_player) || IS_ADMIN\n    };\n    default { true };\n};\n",
        "functionName": "ace_markers_fnc_canMoveMarker"
      },
      {
        "fileName": "fnc_getEnabledChannels.sqf",
        "content": "/*\n * Author: commy2\n * Return enabled channels.\n *\n * Arguments:\n * 0: false - use channel id, true - use localized channel names <BOOl> (default: false)\n *\n * Return Value:\n * Enabled Channels <ARRAY>\n *\n * Example:\n * [false] call ACE_markers_fnc_getEnabledChannels\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_localize\", false, [false]]];\n\nprivate _currentChannel = currentChannel;\nprivate _enabledChannels = [];\n\nif (_localize) then {\n    if (setCurrentChannel 0) then {\n        _enabledChannels pushBack localize \"str_channel_global\";\n    };\n\n    if (setCurrentChannel 1) then {\n        _enabledChannels pushBack localize \"str_channel_side\";\n    };\n\n    if (setCurrentChannel 2) then {\n        _enabledChannels pushBack localize \"str_channel_command\";\n    };\n\n    if (setCurrentChannel 3) then {\n        _enabledChannels pushBack localize \"str_channel_group\";\n    };\n\n    if (setCurrentChannel 4) then {\n        _enabledChannels pushBack localize \"str_channel_vehicle\";\n    };\n\n    if (setCurrentChannel 5) then {\n        _enabledChannels pushBack localize \"str_channel_direct\";\n    };\n} else {\n    for \"_i\" from 0 to 5 do {\n        if (setCurrentChannel _i) then {\n            _enabledChannels pushBack _i;\n        };\n    };\n};\n\nsetCurrentChannel _currentChannel;\n\n_enabledChannels\n",
        "functionName": "ace_markers_fnc_getEnabledChannels"
      },
      {
        "fileName": "fnc_initInsertMarker.sqf",
        "content": "/*\n * Author: BIS, commy2\n * Sets up the marker placement\n * Run instead of \\a3\\ui_f\\scripts\\GUI\\RscDisplayInsertMarker.sqf\n *\n * Arguments:\n * 0: RscDisplayInsertMarker <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [onLoad] call ace_markers_fnc_initInsertMarker;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define BORDER 0.005\n\n[{\n    disableserialization;\n    params [\"_display\"];\n    TRACE_1(\"params\",_display);\n\n    //Can't place markers when can't interact\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {\n        _display closeDisplay 2;  //emulate \"Cancel\" button\n    };\n\n    //BIS Controls:\n    private _text = _display displayctrl 101;\n    private _picture = _display displayctrl 102;\n    private _channel = _display displayctrl 103;\n    private _buttonOK = _display displayctrl 1;\n    private _buttonCancel = _display displayctrl 2;\n    private _description = _display displayctrl 1100;\n    private _title = _display displayctrl 1001;\n    private _descriptionChannel = _display displayctrl 1101;\n\n    //ACE Controls:\n    // _sizeX = _display displayctrl 1200;\n    // _sizeY = _display displayctrl 1201;\n    private _aceShapeLB = _display displayctrl 1210;\n    private _aceColorLB = _display displayctrl 1211;\n    private _aceAngleSlider = _display displayctrl 1220;\n    private _aceAngleSliderText = _display displayctrl 1221;\n\n    ////////////////////\n    // Install MapDrawEH on current map\n    private _mapIDD = -1;\n\n    {\n        if (!isNull (findDisplay _x)) exitWith {\n            _mapIDD = _x;\n        };\n        false\n    } count [12, 37, 52, 53, 160];\n\n    if (_mapIDD == -1) exitWith {\n        ERROR(\"No Map?\");\n    };\n\n    if !(_mapIDD in GVAR(mapDisplaysWithDrawEHs)) then {\n        GVAR(mapDisplaysWithDrawEHs) pushBack _mapIDD;\n        ((finddisplay _mapIDD) displayctrl 51) ctrlAddEventHandler [\"Draw\", {_this call FUNC(mapDrawEH)}]; // @todo check if persistent\n    };\n\n    ////////////////////\n    // Calculate center position of the marker placement ctrl\n    private _pos = ctrlPosition _picture;\n    _pos = [(_pos select 0) + (_pos select 2) / 2, (_pos select 1) + (_pos select 3) / 2];\n\n    GVAR(currentMarkerPosition) = ((findDisplay _mapIDD) displayCtrl 51) ctrlMapScreenToWorld _pos;\n\n    //Hide the bis picture:\n    _picture ctrlShow false;\n\n    // prevent vanilla key input\n    _display displayAddEventHandler [\"KeyDown\", {(_this select 1) in [200, 208]}];\n\n\n    //Focus on the text input\n    ctrlSetFocus _text;\n\n    //--- Background\n    _pos = ctrlposition _text;\n    _pos params [\"_posX\", \"_posY\", \"_posW\", \"_posH\"];\n    _posX = _posX + 0.01;\n    _posY = _posY min ((safeZoneH + safeZoneY) - (8 * _posH + 8 * BORDER));  //prevent buttons being placed below bottom edge of screen\n    _pos set [0, _posX];\n    _pos set [1, _posY];\n    _text ctrlSetPosition _pos;\n    _text ctrlCommit 0;\n\n    //--- Title\n    _pos set [1, _posY - 2 * _posH - BORDER];\n    _pos set [3, _posH];\n    _title ctrlSetPosition _pos;\n    _title ctrlCommit 0;\n\n    //--- Description\n    _pos set [1, _posY - 1 * _posH];\n    _pos set [3,6 * _posH + 6 * BORDER];\n    _description ctrlEnable false;\n    _description ctrlSetPosition _pos;\n    _description ctrlSetStructuredText parseText format [\"<t size='0.8'>%1</t>\", localize \"str_lib_label_description\"];\n    _description ctrlCommit 0;\n\n    //--- Shape\n    _pos set [1, _posY + 1 * _posH + 2 * BORDER];\n    _pos set [2, _posW];\n    _pos set [3, _posH];\n    _aceShapeLB ctrlSetPosition _pos;\n    _aceShapeLB ctrlCommit 0;\n\n    //--- Color\n    _pos set [1, _posY + 2 * _posH + 3 * BORDER];\n    _pos set [2, _posW];\n    _aceColorLB ctrlSetPosition _pos;\n    _aceColorLB ctrlCommit 0;\n\n    //--- Angle\n    _pos set [1, _posY + 3 * _posH + 4 * BORDER];\n    _pos set [2, _posW];\n    _aceAngleSlider ctrlSetPosition _pos;\n    _aceAngleSlider ctrlCommit 0;\n\n    //--- Angle Text\n    _pos set [1, _posY + 4 * _posH + 5 * BORDER];\n    _pos set [2, _posW];\n    _aceAngleSliderText ctrlSetPosition _pos;\n    _aceAngleSliderText ctrlCommit 0;\n\n    private _offsetButtons = 0;\n\n    if (isMultiplayer) then {\n        _pos set [1,_posY + 5 * _posH + 7 * BORDER];\n        _pos set [3,_posH];\n        _descriptionChannel ctrlSetStructuredText parseText format [\"<t size='0.8'>%1:</t>\", localize \"str_a3_cfgvehicles_modulerespawnposition_f_arguments_marker_0\"];\n        _descriptionChannel ctrlSetPosition _pos;\n        _descriptionChannel ctrlCommit 0;\n\n        _pos set [1,_posY + 6 * _posH + 7 * BORDER];\n        _pos set [3,_posH];\n        _channel ctrlSetPosition _pos;\n        _channel ctrlCommit 0;\n\n        // channels are added by engine and not script. we have to manually delete them. requires channel names to be unique?\n        private _enabledChannels = true call FUNC(getEnabledChannels);\n        private _i = 0;\n\n        while {_i < lbSize _channel} do {\n            private _channelName = _channel lbText _i;\n\n            // _enabledChannels can not include custom channels names. Therefore also check if it's a custom one. Blame BI if the unit should not access the channel.\n            if (_channelName in _enabledChannels || {!(_channelName in CHANNEL_NAMES)}) then {\n                _i = _i + 1;\n            } else {\n                _channel lbDelete _i;\n            };\n        };\n\n        private _currentChannelName = CHANNEL_NAMES param [currentChannel, localize \"str_channel_group\"];\n\n        // select current channel in list box, must be done after lbDelete\n        for \"_j\" from 0 to (lbSize _channel - 1) do {\n            if (_channel lbText _j == _currentChannelName) then {\n                _channel lbSetCurSel _j;\n            };\n        };\n\n        _channel ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedChannel)}];\n\n        _offsetButtons = 7 * _posH + 8 * BORDER;\n    } else {\n        _descriptionChannel ctrlShow false;\n        _channel ctrlShow false;\n        _offsetButtons = 5 * _posH + 7 * BORDER;\n    };\n\n    //--- ButtonOK\n    _pos set [1, _posY + _offsetButtons];\n    _pos set [2, _posW / 2 - BORDER];\n    _pos set [3, _posH];\n    _buttonOk ctrlSetPosition _pos;\n    _buttonOk ctrlCommit 0;\n\n    //--- ButtonCancel\n    _pos set [0, _posX + _posW / 2];\n    _pos set [1, _posY + _offsetButtons];\n    _pos set [2, _posW / 2];\n    _pos set [3, _posH];\n    _buttonCancel ctrlSetPosition _pos;\n    _buttonCancel ctrlCommit 0;\n\n    ////////////////////\n    // init marker shape lb\n    lbClear _aceShapeLB;\n    {\n        _x params [\"_add\", \"_set\", \"_pic\"];\n        _aceShapeLB lbAdd _add;\n        _aceShapeLB lbSetValue [_forEachIndex, _set];\n        _aceShapeLB lbSetPicture [_forEachIndex, _pic];\n    } forEach GVAR(MarkersCache);\n\n    private _curSelShape = GETGVAR(curSelMarkerShape,0);\n    _aceShapeLB lbSetCurSel _curSelShape;\n\n    //Update now and add eventHandler:\n    [_aceShapeLB, _curSelShape] call FUNC(onLBSelChangedShape);\n    _aceShapeLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedShape)}];\n\n    ////////////////////\n    // init marker color lb\n    lbClear _aceColorLB;\n    {\n        _x params [\"_add\", \"_set\", \"_pic\"];\n        _aceColorLB lbAdd _add;\n        _aceColorLB lbSetValue [_forEachIndex, _set];\n        _aceColorLB lbSetPicture [_forEachIndex, _pic];\n    } forEach GVAR(MarkerColorsCache);\n\n    private _curSelColor = GETGVAR(curSelMarkerColor,0);\n    _aceColorLB lbSetCurSel _curSelColor;\n\n    //Update now and add eventHandler:\n    [_aceColorLB, _curSelColor] call FUNC(onLBSelChangedColor);\n    _aceColorLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedColor)}];\n\n    ////////////////////\n    // init marker angle slider\n    _aceAngleSlider sliderSetRange [-180, 180];\n\n    private _curSelAngle = GETGVAR(currentMarkerAngle,0);\n    _aceAngleSlider sliderSetPosition _curSelAngle;\n\n    //Update now and add eventHandler:\n    [_aceAngleSlider, _curSelAngle] call FUNC(onSliderPosChangedAngle);\n    _aceAngleSlider ctrlAddEventHandler [\"SliderPosChanged\", {_this call FUNC(onSliderPosChangedAngle)}];\n}, _this] call CBA_fnc_execNextFrame;\n",
        "functionName": "ace_markers_fnc_initInsertMarker"
      },
      {
        "fileName": "fnc_initModule.sqf",
        "content": "/*\n * Author: chris579\n * Initializes the Markers Module.\n *\n * Arguments:\n * 0: Logic <Object>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC] call ACE_markers_fnc_initModule\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(movableMarkersEnabled), \"MovableMarkersEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(moveRestriction), \"MoveRestriction\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_markers_fnc_initModule"
      },
      {
        "fileName": "fnc_mapDisplayInitEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles XEH DisplayLoad for the various map displays (RscDiary)\n *\n * Arguments:\n * 0: Map Display (idd 12,37,52,53) <Display>\n *\n * Return Value:\n * None\n *\n * Example:\n * [display] call ace_markers_fnc_mapDisplayInitEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_display\"];\nTRACE_1(\"params\",_display);\n\nprivate _bisShapeLB = _display displayctrl 1091;\nprivate _curSelShape = missionNamespace getVariable [QGVAR(curSelMarkerShape), 0];\nTRACE_2(\"shape\",_bisShapeLB,_curSelShape);\n_bisShapeLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedShape)}];\n_bisShapeLB lbSetCurSel _curSelShape;\n\n\nprivate _bisColorLB = _display displayctrl 1090;\nprivate _curSelColor = missionNamespace getVariable [QGVAR(curSelMarkerColor), 0];\nTRACE_2(\"color\",_bisColorLB,_curSelColor);\n_bisColorLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedColor)}];\n_bisColorLB lbSetCurSel _curSelColor;\n",
        "functionName": "ace_markers_fnc_mapDisplayInitEH"
      },
      {
        "fileName": "fnc_mapDrawEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Draws the current temp marker.  Allows rotation.\n *\n * Arguments:\n * 0: TheMap <Control>\n *\n * Return Value:\n * None\n *\n * Example:\n * [theMapControl] call ace_markers_fnc_mapDrawEH;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_theMap\"];\n// TRACE_1(\"params\",_theMap);\n\n//Only show if marker place is open:\nif (isNull findDisplay 54) exitWith {};\n//Error checking:\nif (GVAR(currentMarkerConfigName) == \"\" || {GVAR(currentMarkerColorConfigName) == \"\"} || {GVAR(currentMarkerPosition) isEqualTo []}) exitWith {\n    ERROR(\"Bad Data\");\n};\n\nprivate _sizeX = 1;\nprivate _sizeY = 1;\n\nprivate _textureConfig = configFile >> \"CfgMarkers\" >> GVAR(currentMarkerConfigName);\nprivate _texture = getText (_textureConfig >> \"icon\");\nprivate _markerSize = getNumber (_textureConfig >> \"size\");\nprivate _markerShadow = getNumber (_textureConfig >> \"shadow\");\nprivate _colorConfig = (configFile >> \"CfgMarkerColors\" >> GVAR(currentMarkerColorConfigName));\nprivate _drawColor = getArray (_colorConfig >> \"color\");\n\n//Convert possible code into numbers\n{\n    if (_x isEqualType \"\") then {\n        _drawColor set [_forEachIndex, call compile _x];\n    };\n} forEach _drawColor;\n\n_drawColor set [3, (_drawColor select 3) * 0.875]; //Arma adds a slight transparency\n\n_theMap drawIcon [\n    _texture,\n    _drawColor,\n    GVAR(currentMarkerPosition),\n    _sizeX * _markerSize,\n    _sizeY * _markerSize,\n    GVAR(currentMarkerAngle),\n    \"\",\n    _markerShadow\n];\n",
        "functionName": "ace_markers_fnc_mapDrawEH"
      },
      {
        "fileName": "fnc_movePFH.sqf",
        "content": "/*\n * Author: chris579\n * When the marker is being moved.\n *\n * Arguments:\n * 0: Marker data <ARRAY>\n * 1: PFH ID <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[MARKER], 5] call ace_markers_fnc_movePFH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_idPFH\"];\n_args params [\"_marker\"];\n\nif (isNull (findDisplay 12 displayCtrl 51) || {!(player getVariable [QGVAR(moveInProgress), false])}) exitWith {\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n\n    private _origin = ACE_player getVariable [QGVAR(movedMarkerOrigin), getMarkerPos _marker];\n\n    if !([QGVAR(markerMoveEnded), [ACE_player, _marker, _origin, getMarkerPos _marker]] call CBA_fnc_localEvent) exitWith {\n        _marker setMarkerPosLocal _origin;\n    };\n\n    [QGVAR(applyMarkerPosLocal), [_marker, getMarkerPos _marker]] call CBA_fnc_globalEvent;\n    _marker setMarkerAlphaLocal (ACE_player getVariable [QGVAR(movedMarkerAlpha), 1]);\n\n    EGVAR(map_gestures,enabled) = ACE_player getVariable [QGVAR(mapGesturesSetting), false];\n    (findDisplay 12 displayCtrl 51) ctrlMapCursor [\"Track\", \"Track\"];\n};\n\n_marker setMarkerPosLocal ((findDisplay 12 displayCtrl 51) posScreenToWorld getMousePosition);\n",
        "functionName": "ace_markers_fnc_movePFH"
      },
      {
        "fileName": "fnc_onLBSelChangedChannel.sqf",
        "content": "/*\n * Author: commy2\n * When the channel list box is changed.\n *\n * Arguments:\n * 0: Channel ListBox (idc 103) <CONTROL>\n * 1: Selected Index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL, 5] call ACE_markers_fnc_onLBSelChangedChannel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ctrl\", \"_index\"];\nTRACE_2(\"params\",_ctrl,_index);\n\nprivate _channelName = _ctrl lbText _index;\n\nsetCurrentChannel (CHANNEL_NAMES find _channelName);\n",
        "functionName": "ace_markers_fnc_onLBSelChangedChannel"
      },
      {
        "fileName": "fnc_onLBSelChangedColor.sqf",
        "content": "/*\n * Author: commy2\n * When the color list box is changed.\n *\n * Arguments:\n * 0: Color ListBox (idc 1211) <CONTROL>\n * 1: Selected Index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ColorLB, 5] call ace_markers_fnc_onLBSelChangedColor;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ctrl\", \"_index\"];\nTRACE_2(\"params\",_ctrl,_index);\n\nprivate _data = _ctrl lbValue _index;\n\nGVAR(curSelMarkerColor) = _index;\n\nprivate _config = (configFile >> \"CfgMarkerColors\") select _data;\n\nGVAR(currentMarkerColorConfigName) = configName _config;\n\n//Set map display to same color:\nprivate _bisColorLB = switch (false) do {\n    case (isNull findDisplay 12): {(findDisplay 12) displayCtrl 1090};\n    case (isNull findDisplay 52): {(findDisplay 52) displayCtrl 1090};\n    case (isNull findDisplay 53): {(findDisplay 53) displayCtrl 1090};\n    case (isNull findDisplay 37): {(findDisplay 37) displayCtrl 1090};\n    default {controlNull};\n};\nif (_ctrl != _bisColorLB) then { //Don't set what we got a EH from\n    _bisColorLB lbSetCurSel GVAR(curSelMarkerColor);\n};\n",
        "functionName": "ace_markers_fnc_onLBSelChangedColor"
      },
      {
        "fileName": "fnc_onLBSelChangedShape.sqf",
        "content": "/*\n * Author: commy2\n * When the shape list box is changed.\n *\n * Arguments:\n * 0: Shape ListBox (idc 1210) <CONTROL>\n * 1: Selected Index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ColorLB, 5] call ace_markers_fnc_onLBSelChangedShape;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ctrl\", \"_index\"];\nTRACE_2(\"params\",_ctrl,_index);\n\nprivate _data = _ctrl lbValue _index;\n\nGVAR(curSelMarkerShape) = _index;\n\nprivate _config = (configFile >> \"CfgMarkers\") select _data;\n\nGVAR(currentMarkerConfigName) = configName _config;\n\n//Set map display to same shape:\nprivate _bisShapeLB = switch (false) do {\n    case (isNull findDisplay 12): {(findDisplay 12) displayCtrl 1091};\n    case (isNull findDisplay 52): {(findDisplay 52) displayCtrl 1091};\n    case (isNull findDisplay 53): {(findDisplay 53) displayCtrl 1091};\n    case (isNull findDisplay 37): {(findDisplay 37) displayCtrl 1091};\n    default {controlNull};\n};\nif (_ctrl != _bisShapeLB) then { //Don't set what we got a EH from\n    _bisShapeLB lbSetCurSel GVAR(curSelMarkerShape);\n};\n",
        "functionName": "ace_markers_fnc_onLBSelChangedShape"
      },
      {
        "fileName": "fnc_onMouseButtonDownMap.sqf",
        "content": "/*\n * Author: chris579\n * Triggered when a mouse button is pressed on the map.\n *\n * Arguments:\n * 0: Map Control the EVH was assigned to <CONTROL>\n * 1: Button code <NUMBER>\n * 2: Position of x <NUMBER>\n * 3: Position of y <NUMBER>\n * 4: State of Shift <BOOL>\n * 5: State of Ctrl <BOOL>\n * 6: State of Alt <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL, 2, 0, 0, true, false, false] call ace_markers_fnc_onMouseButtonDownMap\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_mapCtrl\", \"_button\", \"_x\", \"_y\", \"_shift\", \"_ctrl\", \"_alt\"];\n\nif (_button != 0) exitWith {};\n\nprivate _mouseOver = ctrlMapMouseOver _mapCtrl;\n\nif (count _mouseOver == 2) then {\n    if ((_mouseOver select 0) == \"marker\") then {\n        private _markerName = _mouseOver select 1;\n\n        if (_markerName find \"_USER_DEFINED\" != -1) then {\n            if (!_ctrl && !_shift && _alt && ([] call FUNC(canMoveMarker))) then {\n                // move marker\n                _mapCtrl ctrlMapCursor [\"Track\", \"Move\"];\n\n                if !([QGVAR(markerMoveStarted), [ACE_player, _markerName, getMarkerPos _markerName]] call CBA_fnc_localEvent) exitWith {};\n\n                ACE_player setVariable [QGVAR(movedMarkerOrigin), getMarkerPos _markerName];\n                ACE_player setVariable [QGVAR(movedMarkerAlpha), markerAlpha _markerName];\n                ACE_player setVariable [QGVAR(moveInProgress), true];\n                ACE_player setVariable [QGVAR(mapGesturesSetting), EGVAR(map_gestures,enabled)];\n                EGVAR(map_gestures,enabled) = false;\n\n                _markerName setMarkerAlphaLocal 0.5;\n                [FUNC(movePFH), 0, [_markerName]] call CBA_fnc_addPerFrameHandler;\n\n            };\n        };\n    };\n};\n",
        "functionName": "ace_markers_fnc_onMouseButtonDownMap"
      },
      {
        "fileName": "fnc_onMouseButtonUpMap.sqf",
        "content": "/*\n * Author: chris579\n * Triggered when a mouse button is released on the map.\n *\n * Arguments:\n * 0: Map Control the evh was assigned to <CONTROL>\n * 1: Button code <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL, 2] call ace_markers_fnc_onMouseButtonUpMap\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_mapCtrl\", \"_button\"];\n\nplayer setVariable [QGVAR(moveInProgress), false];\n",
        "functionName": "ace_markers_fnc_onMouseButtonUpMap"
      },
      {
        "fileName": "fnc_onSliderPosChangedAngle.sqf",
        "content": "/*\n * Author: commy2\n * Angle Slider Pos changed\n *\n * Arguments:\n * 0: Slider (idc 1210) <CONTROL>\n * 1: Slider Data (angle: -180..180) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [Slider, 2] call ace_markers_fnc_onSliderPosChangedAngle;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ctrl\", \"_data\"];\nTRACE_2(\"params\",_ctrl,_data);\n\nprivate _direction = round _data;\n\nif (_direction < 0) then {\n    _direction = _direction + 360;\n};\n\n((ctrlParent _ctrl) displayCtrl 1221) ctrlSetText format [localize LSTRING(MarkerDirection), _direction];\n\nGVAR(currentMarkerAngle) = _data;\n",
        "functionName": "ace_markers_fnc_onSliderPosChangedAngle"
      },
      {
        "fileName": "fnc_placeMarker.sqf",
        "content": "/*\n * Author: commy2\n * MarkerPlacement closed\n *\n * Arguments:\n * 0: RscDisplayInsertMarker <DISPLAY>\n * 1: CloseNumber (1 = ButtonOk) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [onUnloadEvent] call ace_markers_fnc_placeMarker;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableserialization;\nparams [\"_display\", \"_closeNum\"];\nTRACE_2(\"params\",_display,_closeNum);\n\nif (_closeNum == 1) then {\n    // set and send marker data the next frame. the actual marker isn't created yet\n    [{\n        [QGVAR(setMarkerNetwork), [\n            allMapMarkers select (count allMapMarkers - 1), [\n                GETGVAR(currentMarkerConfigName,\"\"),\n                GETGVAR(currentMarkerColorConfigName,\"\"),\n                GETGVAR(currentMarkerPosition,[]),\n                GETGVAR(currentMarkerAngle,0)\n            ]\n        ]] call CBA_fnc_globalEvent;\n\n    }, []] call CBA_fnc_execNextFrame;\n};\n",
        "functionName": "ace_markers_fnc_placeMarker"
      },
      {
        "fileName": "fnc_sendMarkersJIP.sqf",
        "content": "/*\n * Author: commy2\n * Server: Recives a dummy logic, sends marker data back to the owner.\n *\n * Arguments:\n * 0: Logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [onUnloadEvent] call ace_markers_fnc_sendMarkerJIP;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\nTRACE_1(\"params\",_logic);\n\n[\n    QGVAR(setMarkerJIP),\n    [GETGVAR(allMapMarkers,[]), GETGVAR(allMapMarkersProperties,[])],\n    [_logic]\n] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_markers_fnc_sendMarkersJIP"
      },
      {
        "fileName": "fnc_setMarkerJIP.sqf",
        "content": "/*\n * Author: commy2\n * Client: Recives a marker data from server.\n *\n * Arguments:\n * 0: Array of map marker names <ARRAY>\n * 1: Array of map marker data <ARRAY>\n * 2: Logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[],[],dummyLogic] call ace_markers_fnc_setMarkerJIP;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_allMapMarkers\", \"_allMapMarkersProperties\"];\nTRACE_3(\"params\",_allMapMarkers,_allMapMarkersProperties);\n\n{\n    private _index = _allMapMarkers find _x;\n\n    if (_index != -1) then {\n        private _data = _allMapMarkersProperties select _index;\n        _data params [\"_markerClassname\", \"_colorClassname\", \"_pos\", \"_dir\"];\n\n        private _config = (configfile >> \"CfgMarkers\") >> _markerClassname;\n\n        if (!isClass _config) then {\n            WARNING(\"CfgMarker not found, changed to milDot\");\n            _config = configFile >> \"CfgMarkers\" >> \"MilDot\";\n        };\n\n        _x setMarkerTypeLocal configName _config;\n\n        _config = configfile >> \"CfgMarkerColors\" >> _colorClassname;\n\n        if (!isClass _config) then {\n            WARNING(\"CfgMarkerColors not found, changed to Default\");\n            _config = configFile >> \"CfgMarkerColors\" >> \"Default\";\n        };\n\n        _x setMarkerColorLocal configName _config;\n\n        _x setMarkerPosLocal _pos;\n        _x setMarkerDirLocal _dir;\n    };\n    false\n} count allMapMarkers;\n\nprivate _group = group GVAR(localLogic);\ndeleteVehicle GVAR(localLogic);\nGVAR(localLogic) = nil;\ndeleteGroup _group;\n",
        "functionName": "ace_markers_fnc_setMarkerJIP"
      },
      {
        "fileName": "fnc_setMarkerNetwork.sqf",
        "content": "/*\n * Author: commy2\n * Sets newly placed marker\n * Handles the QGVAR(setMarkerNetwork) event.\n *\n * Arguments:\n * 0: Markername <STRING>\n * 1: Marker Data <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[],[],dummyLogic] call ace_markers_fnc_setMarkerJIP;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_marker\", \"_data\"];\nTRACE_2(\"params\",_marker,_data);\n_data params [\"_markerClassname\", \"_colorClassname\", \"_pos\", \"_dir\"];\n\nprivate _config = configfile >> \"CfgMarkers\" >> _markerClassname;\n\nif (!isClass _config) then {\n    WARNING(\"CfgMarker not found, changed to milDot\");\n    _config = configFile >> \"CfgMarkers\" >> \"MilDot\";\n};\n\n_marker setMarkerTypeLocal configName _config;\n\n_config = configfile >> \"CfgMarkerColors\" >> _colorClassname;\n\nif (!isClass _config) then {\n    WARNING(\"CfgMarkerColors not found, changed to Default\");\n    _config = configFile >> \"CfgMarkerColors\" >> \"Default\";\n};\n\n_marker setMarkerColorLocal configName _config;\n\n_marker setMarkerPosLocal _pos;\n_marker setMarkerDirLocal _dir;\n\n// save properties on server machine for JIP, marker editing ready\nif (isMultiplayer && {isServer}) then {\n    private _allMapMarkers = GETGVAR(allMapMarkers,[]);\n    private _allMapMarkersProperties = GETGVAR(allMapMarkersProperties,[]);\n\n    private _index = _allMapMarkers find _marker;\n\n    if (_index == -1) then {\n        _allMapMarkers pushBack _marker;\n        _allMapMarkersProperties pushBack _data;\n    } else {\n        _allMapMarkers set [_index, _marker];\n        _allMapMarkersProperties set [_index, _data];\n    };\n\n    GVAR(allMapMarkers) = _allMapMarkers;\n    GVAR(allMapMarkersProperties) = _allMapMarkersProperties;\n};\n",
        "functionName": "ace_markers_fnc_setMarkerNetwork"
      }
    ]
  },
  {
    "component": "maverick",
    "files": [],
    "functions": []
  },
  {
    "component": "medical",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// ACE Medical System Visual Loop\n\n#include \"script_component.hpp\"\n\nGVAR(heartBeatSounds_Fast) = [\"ACE_heartbeat_fast_1\", \"ACE_heartbeat_fast_2\", \"ACE_heartbeat_fast_3\"];\nGVAR(heartBeatSounds_Normal) = [\"ACE_heartbeat_norm_1\", \"ACE_heartbeat_norm_2\"];\nGVAR(heartBeatSounds_Slow) = [\"ACE_heartbeat_slow_1\", \"ACE_heartbeat_slow_2\"];\n\n[\"ace_interactMenuClosed\", {[objNull, false] call FUNC(displayPatientInformation); }] call CBA_fnc_addEventHandler;\n\n//Treatment EventHandlers:\n[QGVAR(actionCheckBloodPressureLocal), DFUNC(actionCheckBloodPressureLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(actionCheckPulseLocal), DFUNC(actionCheckPulseLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(addVitalLoop), DFUNC(addVitalLoop)] call CBA_fnc_addEventHandler;\n[QGVAR(addToMedicalLog), DFUNC(addToLog)] call CBA_fnc_addEventHandler;\n[QGVAR(addToTriageCard), DFUNC(addToTriageCard)] call CBA_fnc_addEventHandler;\n[QGVAR(setDead), DFUNC(setDead)] call CBA_fnc_addEventHandler;\n[QGVAR(setHitPointDamage), DFUNC(setHitPointDamage)] call CBA_fnc_addEventHandler;\n[QGVAR(setUnconscious), DFUNC(setUnconscious)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentAdvanced_bandageLocal), DFUNC(treatmentAdvanced_bandageLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentAdvanced_CPRLocal), DFUNC(treatmentAdvanced_CPRLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentAdvanced_fullHealLocal), DFUNC(treatmentAdvanced_fullHealLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentAdvanced_medicationLocal), DFUNC(treatmentAdvanced_medicationLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentBasic_bloodbagLocal), DFUNC(treatmentBasic_bloodbagLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentBasic_morphineLocal), DFUNC(treatmentBasic_morphineLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentIVLocal), DFUNC(treatmentIVLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(treatmentTourniquetLocal), DFUNC(treatmentTourniquetLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(actionPlaceInBodyBag), FUNC(actionPlaceInBodyBag)] call CBA_fnc_addEventHandler;\n\n//Handle Deleting Bodies and creating litter on Server:\nif (isServer) then {\n    [\"ace_placedInBodyBag\", FUNC(serverRemoveBody)] call CBA_fnc_addEventHandler;\n    [QGVAR(createLitterServer), FUNC(handleCreateLitter)] call CBA_fnc_addEventHandler;\n};\n\n[\"ace_unconscious\", {\n    params [\"_unit\", \"_status\"];\n    if (local _unit) then {\n        if (_status) then {\n            _unit setVariable [\"tf_voiceVolume\", 0, true];\n            _unit setVariable [\"tf_unable_to_use_radio\", true, true];\n\n            _unit setVariable [\"acre_sys_core_isDisabled\", true, true];\n        } else {\n            _unit setVariable [\"tf_voiceVolume\", 1, true];\n            _unit setVariable [\"tf_unable_to_use_radio\", false, true];\n\n            _unit setVariable [\"acre_sys_core_isDisabled\", false, true];\n        };\n    };\n}] call CBA_fnc_addEventHandler;\n\n\n// Initialize all effects\nif (hasInterface) then {\n\n_fnc_createEffect = {\n    params [\"_type\", \"_layer\", \"_default\"];\n\n    private _effect = ppEffectCreate [_type, _layer];\n    _effect ppEffectForceInNVG true;\n    _effect ppEffectAdjust _default;\n    _effect ppEffectCommit 0;\n\n    _effect\n};\n\nGVAR(effectUnconsciousCC) = [\n    \"ColorCorrections\",\n    4201,\n    [1,1,0, [0,0,0,1], [0,0,0,0], [1,1,1,1], [0.4,0.4,0,0,0,0.1,0.3]]\n] call _fnc_createEffect;\n\nGVAR(effectUnconsciousRB) = [\n    \"RadialBlur\",\n    4202,\n    [0.01,0.01,0,0]\n] call _fnc_createEffect;\n\nGVAR(effectBlindingCC) = [\n    \"ColorCorrections\",\n    4203,\n    [1,1,0, [1,1,1,0], [0,0,0,1], [0,0,0,0]]\n] call _fnc_createEffect;\n\nGVAR(effectBloodVolumeCC) = [\n    \"ColorCorrections\",\n    4204,\n    [1,1,0, [0,0,0,0], [1,1,1,1], [0.2,0.2,0.2,0]]\n] call _fnc_createEffect;\n\nGVAR(effectPainCA) = [\n    \"chromAberration\",\n    4205,\n    [0, 0, false]\n] call _fnc_createEffect;\n\nGVAR(effectPainCC) = [\n    \"ColorCorrections\",\n    4206,\n    [1,1,0, [1,1,1,1], [0,0,0,0], [1,1,1,1], [1.3,1.3,0,0,0,0.2,2]]\n] call _fnc_createEffect;\n\n// Initialize Other Variables\nGVAR(effectBlind) = false;\nGVAR(effectTimeBlood) = CBA_missionTime;\n\n// MAIN EFFECTS LOOP\n[{\n    // Zeus interface is open or player is dead; disable everything\n    if (!(isNull curatorCamera) or !(alive ACE_player)) exitWith {\n        GVAR(effectUnconsciousCC) ppEffectEnable false;\n        GVAR(effectUnconsciousRB) ppEffectEnable false;\n        GVAR(effectBlindingCC) ppEffectEnable false;\n        GVAR(effectBloodVolumeCC) ppEffectEnable false;\n        GVAR(effectPainCA) ppEffectEnable false;\n        GVAR(effectPainCC) ppEffectEnable false;\n        [\"unconscious\", false] call EFUNC(common,setDisableUserInputStatus);\n    };\n\n    // Unconsciousness effect\n    if (ACE_player getVariable [\"ACE_isUnconscious\", false]) then {\n        GVAR(effectUnconsciousCC) ppEffectEnable true;\n        GVAR(effectUnconsciousRB) ppEffectEnable true;\n        GVAR(effectBlind) = true;\n        [\"unconscious\", true] call EFUNC(common,setDisableUserInputStatus);\n    } else {\n        GVAR(effectUnconsciousCC) ppEffectEnable false;\n        GVAR(effectUnconsciousRB) ppEffectEnable false;\n        [\"unconscious\", false] call EFUNC(common,setDisableUserInputStatus);\n        if (GVAR(effectBlind)) then {\n            _strength = 0.78 * (call EFUNC(common,ambientBrightness));\n            GVAR(effectBlindingCC) ppEffectEnable true;\n            GVAR(effectBlindingCC) ppEffectAdjust [1,1,_strength, [1,1,1,0], [0,0,0,1], [0,0,0,0]];\n            GVAR(effectBlindingCC) ppEffectCommit 0;\n\n            [{\n                GVAR(effectBlindingCC) ppEffectAdjust [1,1,0, [1,1,1,0], [0,0,0,1], [0,0,0,0]];\n                GVAR(effectBlindingCC) ppEffectCommit ((_this select 0) * 2);\n            }, [_strength], 0.01, 0] call CBA_fnc_waitAndExecute;\n\n            [{\n                GVAR(effectBlindingCC) ppEffectEnable false;\n            }, [], (_strength * 2) + 0.5, 0] call CBA_fnc_waitAndExecute;\n\n            GVAR(effectBlind) = false;\n        };\n    };\n\n    private _bleeding = [ACE_player] call FUNC(getBloodLoss);\n    // Bleeding Indicator\n    if (_bleeding > 0 and GVAR(effectTimeBlood) + 3.5 < CBA_missionTime) then {\n        GVAR(effectTimeBlood) = CBA_missionTime;\n        [600 * _bleeding] call FUNC(showBloodEffect);\n    };\n\n    // Blood Volume Effect\n    private _blood = if (GVAR(level) < 2) then {\n        (ACE_player getVariable [QGVAR(bloodVolume), 100]) / 100;\n    } else {\n        (((ACE_player getVariable [QGVAR(bloodVolume), 100]) - 60) max 0) / 40;\n    };\n\n    if (_blood > 0.99) then {\n        GVAR(effectBloodVolumeCC) ppEffectEnable false;\n    } else {\n        GVAR(effectBloodVolumeCC) ppEffectEnable true;\n        GVAR(effectBloodVolumeCC) ppEffectAdjust [1,1,0, [0,0,0,0], [1,1,1,_blood], [0.2,0.2,0.2,0]];\n        GVAR(effectBloodVolumeCC) ppEffectCommit 0;\n    };\n}, 0.5, []] call CBA_fnc_addPerFrameHandler;\n\n\nGVAR(lastHeartBeat) = CBA_missionTime;\nGVAR(lastHeartBeatSound) = CBA_missionTime;\n\n// HEARTRATE BASED EFFECTS\n[{\n    private _heartRate = ACE_player getVariable [QGVAR(heartRate), 70];\n    private _pain = ACE_player getVariable [QGVAR(pain), 0];\n    if (GVAR(level) == 1) then {\n        _heartRate = 60 + 40 * _pain;\n    };\n    if (_heartRate <= 0) exitWith {};\n    private _interval = 60 / (_heartRate min 40);\n\n    if ((ACE_player getVariable [\"ACE_isUnconscious\", false])) then {\n        if (GVAR(painEffectType) == 1) then {\n            GVAR(effectPainCA) ppEffectEnable false;\n        } else {\n            GVAR(effectPainCC) ppEffectEnable false;\n        };\n    } else {\n        if ((CBA_missionTime > GVAR(lastHeartBeat) + _interval)) then {\n            GVAR(lastHeartBeat) = CBA_missionTime;\n\n            // Pain effect, no pain effect in zeus camera\n            if (isNull curatorCamera) then {\n                private _strength = ((_pain - (ACE_player getVariable [QGVAR(painSuppress), 0])) max 0) min 1;\n                _strength = _strength * (ACE_player getVariable [QGVAR(painCoefficient), GVAR(painCoefficient)]);\n                if (GVAR(painEffectType) == 1) then {\n                    GVAR(effectPainCC) ppEffectEnable false;\n                    if (_pain > (ACE_player getVariable [QGVAR(painSuppress), 0]) && {alive ACE_player}) then {\n                        _strength = _strength * 0.15;\n                        GVAR(effectPainCA) ppEffectEnable true;\n                        GVAR(effectPainCA) ppEffectAdjust [_strength, _strength, false];\n                        GVAR(effectPainCA) ppEffectCommit 0.01;\n                        [{\n                            GVAR(effectPainCA) ppEffectAdjust [(_this select 0), (_this select 0), false];\n                            GVAR(effectPainCA) ppEffectCommit (_this select 1);\n                        }, [_strength * 0.1, _interval * 0.2], _interval * 0.05, 0] call CBA_fnc_waitAndExecute;\n                        [{\n                            GVAR(effectPainCA) ppEffectAdjust [(_this select 0), (_this select 0), false];\n                            GVAR(effectPainCA) ppEffectCommit 0.01;\n                        }, [_strength * 0.7], _interval * 0.3, 0] call CBA_fnc_waitAndExecute;\n                        [{\n                            GVAR(effectPainCA) ppEffectAdjust [(_this select 0), (_this select 0), false];\n                            GVAR(effectPainCA) ppEffectCommit (_this select 1);\n                        }, [_strength * 0.1, _interval * 0.55], _interval * 0.4, 0] call CBA_fnc_waitAndExecute;\n                    } else {\n                        GVAR(effectPainCA) ppEffectEnable false;\n                    };\n                } else {\n                    GVAR(effectPainCA) ppEffectEnable false;\n                    if (_pain > (ACE_player getVariable [QGVAR(painSuppress), 0]) && {alive ACE_player}) then {\n                        _strength = _strength * 0.9;\n                        GVAR(effectPainCC) ppEffectEnable true;\n                        GVAR(effectPainCC) ppEffectAdjust [1,1,0, [1,1,1,1], [0,0,0,0], [1,1,1,1], [1 - _strength,1 - _strength,0,0,0,0.2,2]];\n                        GVAR(effectPainCC) ppEffectCommit 0.01;\n                        [{\n                            GVAR(effectPainCC) ppEffectAdjust [1,1,0, [1,1,1,1], [0,0,0,0], [1,1,1,1], [1 - (_this select 0),1 - (_this select 0),0,0,0,0.2,2]];\n                            GVAR(effectPainCC) ppEffectCommit (_this select 1);\n                        }, [_strength * 0.1, _interval * 0.2], _interval * 0.05, 0] call CBA_fnc_waitAndExecute;\n                        [{\n                            GVAR(effectPainCC) ppEffectAdjust [1,1,0, [1,1,1,1], [0,0,0,0], [1,1,1,1], [1 - (_this select 0),1 - (_this select 0),0,0,0,0.2,2]];\n                            GVAR(effectPainCC) ppEffectCommit 0.01;\n                        }, [_strength * 0.7], _interval * 0.3, 0] call CBA_fnc_waitAndExecute;\n                        [{\n                            GVAR(effectPainCC) ppEffectAdjust [1,1,0, [1,1,1,1], [0,0,0,0], [1,1,1,1], [1 - (_this select 0),1 - (_this select 0),0,0,0,0.2,2]];\n                            GVAR(effectPainCC) ppEffectCommit (_this select 1);\n                        }, [_strength * 0.1, _interval * 0.55], _interval * 0.4, 0] call CBA_fnc_waitAndExecute;\n                    } else {\n                        GVAR(effectPainCC) ppEffectEnable false;\n                    };\n                };\n            };\n        };\n    };\n\n    if (GVAR(level) >= 2 && {_heartRate > 0}) then {\n        private _minTime = 60 / _heartRate;\n        if (CBA_missionTime - GVAR(lastHeartBeatSound) > _minTime) then {\n            GVAR(lastHeartBeatSound) = CBA_missionTime;\n            // Heart rate sound effect\n            if (_heartRate < 60) then {\n                private _sound = GVAR(heartBeatSounds_Normal) select (random((count GVAR(heartBeatSounds_Normal)) -1));\n                playSound _sound;\n            } else {\n                if (_heartRate > 150) then {\n                    playSound \"ACE_heartbeat_fast_2\";\n                };\n            };\n        };\n    };\n\n}, 0, []] call CBA_fnc_addPerFrameHandler;\n};\n\n[\"ace_settingsInitialized\", {\n    [\n        {(((_this select 0) getVariable [QGVAR(bloodVolume), 100]) < 65)},\n        {(((_this select 0) getVariable [QGVAR(pain), 0]) - ((_this select 0) getVariable [QGVAR(painSuppress), 0])) > 0.9},\n        {(([_this select 0] call FUNC(getBloodLoss)) > 0.25)},\n        {((_this select 0) getVariable [QGVAR(inReviveState), false])},\n        {((_this select 0) getVariable [QGVAR(inCardiacArrest), false])},\n        {((_this select 0) getVariable [\"ACE_isDead\", false])}\n    ] call FUNC(addUnconsciousCondition);\n\n}] call CBA_fnc_addEventHandler;\n\n// Prevent all types of interaction while unconscious\n// @todo: probably remove this when CBA keybind hold key works properly\n[\"isNotUnconscious\", {!((_this select 0) getVariable [\"ACE_isUnconscious\", false])}] call EFUNC(common,addCanInteractWithCondition);\n\n// Item Event Handler\n[\"loadout\", FUNC(itemCheck)] call CBA_fnc_addPlayerEventHandler;\n\nif (hasInterface) then {\n    [\"ace_playerJIP\", {\n        INFO(\"JIP Medical init for player.\");\n        [player] call FUNC(init);\n    }] call CBA_fnc_addEventHandler;\n};\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(injuredUnitCollection) = [];\n\nprivate _versionEx = \"ace_medical\" callExtension \"version\";\nDFUNC(handleDamage_assignWounds) = if (_versionEx == \"\") then {\n    INFO_1(\"Extension %1.dll not installed.\",\"ace_medical\");\n    DFUNC(handleDamage_woundsOld)\n} else {\n    INFO_2(\"Extension version: %1: %2\",\"ace_medical\",_versionEx);\n    DFUNC(handleDamage_wounds)\n};\n\ncall FUNC(parseConfigForInjuries);\n\nGVAR(HITPOINTS) = [\"HitHead\", \"HitBody\", \"HitLeftArm\", \"HitRightArm\", \"HitLeftLeg\", \"HitRightLeg\"];\nGVAR(SELECTIONS) = [\"head\", \"body\", \"hand_l\", \"hand_r\", \"leg_l\", \"leg_r\"];\n\n//Hack for #3168 (units in static weapons do not take any damage):\n//doing a manual pre-load with a small distance seems to fix the LOD problems with handle damage not returning full results\nGVAR(fixedStatics) = [];\nprivate _fixStatic = {\n    params [\"_vehicle\"];\n    private _vehType = typeOf _vehicle;\n    TRACE_2(\"\",_vehicle,_vehType);\n    if (!(_vehType in GVAR(fixedStatics))) then {\n        GVAR(fixedStatics) pushBack _vehType;\n        TRACE_1(\"starting preload\",_vehType);\n        [{\n            1 preloadObject (_this select 0);\n        }, {\n            TRACE_1(\"preload done\",_this);\n        }, [_vehType]] call CBA_fnc_waitUntilAndExecute;\n    };\n};\n[\"StaticWeapon\", \"init\", _fixStatic] call CBA_fnc_addClassEventHandler;\n[\"Car\", \"init\", _fixStatic] call CBA_fnc_addClassEventHandler;\n[\"CAManBase\", \"Init\", FUNC(handleInit)] call CBA_fnc_addClassEventHandler;\n[\"CAManBase\", \"Respawn\", FUNC(handleRespawn)] call CBA_fnc_addClassEventHandler;\n[\"CAManBase\", \"Killed\", FUNC(handleKilled)] call CBA_fnc_addClassEventHandler;\n[\"CAManBase\", \"Local\", FUNC(handleLocal)] call CBA_fnc_addClassEventHandler;\n\naddMissionEventHandler [\"Loaded\",{\n    {\n        TRACE_1(\"starting preload (save load)\",_x);\n        [{\n            1 preloadObject (_this select 0);\n        }, {\n            TRACE_1(\"preload done\",_this);\n        }, [_x]] call CBA_fnc_waitUntilAndExecute;\n    } forEach GVAR(fixedStatics);\n\n    // Reload configs into extension (handle full game restart)\n    call FUNC(parseConfigForInjuries);\n}];\n\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_actionCheckBloodPressure.sqf",
        "content": "/*\n * Author: Glowbal\n * Action for checking the blood pressure of the patient\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_actionCheckBloodPressure\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\"];\nif (local _target) then {\n    [QGVAR(actionCheckBloodPressureLocal), [_caller, _target, _selectionName]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(actionCheckBloodPressureLocal), [_caller, _target, _selectionName], _target] call CBA_fnc_targetEvent;\n};\n",
        "functionName": "ace_medical_fnc_actionCheckBloodPressure"
      },
      {
        "fileName": "fnc_actionCheckBloodPressureLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * Local callback for checking the blood pressure of a patient\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_actionCheckBloodPressureLocal\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\"];\n\nprivate _bloodPressure = if (!alive _target) then {\n    [0,0]\n} else {\n    [_target] call FUNC(getBloodPressure)\n};\n_bloodPressure params [ \"_bloodPressureLow\", \"_bloodPressureHigh\"];\nprivate _output = \"\";\nprivate _logOutPut = \"\";\nif ([_caller] call FUNC(isMedic)) then {\n    _output = LSTRING(Check_Bloodpressure_Output_1);\n    _logOutPut = format[\"%1/%2\",round(_bloodPressureHigh),round(_bloodPressureLow)];\n} else {\n    if (_bloodPressureHigh > 20) then {\n        _output = LSTRING(Check_Bloodpressure_Output_2);\n        _logOutPut = LSTRING(Check_Bloodpressure_Low);\n        if (_bloodPressureHigh > 100) then {\n            _output = LSTRING(Check_Bloodpressure_Output_3);\n            _logOutPut = LSTRING(Check_Bloodpressure_Normal);\n            if (_bloodPressureHigh > 160) then {\n                _output = LSTRING(Check_Bloodpressure_Output_4);\n                _logOutPut = LSTRING(Check_Bloodpressure_High);\n            };\n\n        };\n    } else {\n        if (random(10) > 3) then {\n            _output = LSTRING(Check_Bloodpressure_Output_5);\n            _logOutPut = LSTRING(Check_Bloodpressure_NoBloodpressure);\n        } else {\n            _output = LSTRING(Check_Bloodpressure_Output_6);\n            //Fail to find pressure, no logoutput\n        };\n    };\n};\n\nif (_selectionName in [\"hand_l\",\"hand_r\"] && {[_unit, _selectionName] call FUNC(hasTourniquetAppliedTo)}) then {\n    _output = LSTRING(Check_Bloodpressure_Output_6);\n    _logOutPut = \"\";\n};\n\n[QEGVAR(common,displayTextStructured), [[_output, [_target] call EFUNC(common,getName), round(_bloodPressureHigh),round(_bloodPressureLow)], 1.75, _caller], [_caller]] call CBA_fnc_targetEvent;\n\nif (_logOutPut != \"\") then {\n    [_target,\"activity\", LSTRING(Check_Bloodpressure_Log), [[_caller, false, true] call EFUNC(common,getName), _logOutPut]] call FUNC(addToLog);\n    [_target,\"quick_view\", LSTRING(Check_Bloodpressure_Log), [[_caller, false, true] call EFUNC(common,getName), _logOutPut]] call FUNC(addToLog);\n};\n",
        "functionName": "ace_medical_fnc_actionCheckBloodPressureLocal"
      },
      {
        "fileName": "fnc_actionCheckPulse.sqf",
        "content": "/*\n * Author: Glowbal\n * Action for checking the pulse or heart rate of the patient\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_actionCheckPulse\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\",\"_target\", \"_selectionName\"];\nif (local _target) then {\n    [QGVAR(actionCheckPulseLocal), [_caller, _target, _selectionName]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(actionCheckPulseLocal), [_caller, _target, _selectionName], _target] call CBA_fnc_targetEvent;\n};\n",
        "functionName": "ace_medical_fnc_actionCheckPulse"
      },
      {
        "fileName": "fnc_actionCheckPulseLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * Local callback for checking the pulse of a patient\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_actionCheckPulseLocal\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_unit\", \"_selectionName\"];\n\nprivate _heartRate = _unit getVariable [QGVAR(heartRate), 80];\nif (!alive _unit) then {\n    _heartRate = 0;\n};\nprivate _heartRateOutput = LSTRING(Check_Pulse_Output_5);\nprivate _logOutPut = LSTRING(Check_Pulse_None);\n\nif (_heartRate > 1.0) then {\n    if ([_caller] call FUNC(isMedic)) then {\n        _heartRateOutput = LSTRING(Check_Pulse_Output_1);\n        _logOutPut = format[\"%1\",round(_heartRate)];\n    } else {\n        // non medical personel will only find a pulse/HR\n        _heartRateOutput = LSTRING(Check_Pulse_Output_2);\n        _logOutPut = LSTRING(Check_Pulse_Weak);\n        if (_heartRate > 60) then {\n            if (_heartRate > 100) then {\n                _heartRateOutput = LSTRING(Check_Pulse_Output_3);\n                _logOutPut = LSTRING(Check_Pulse_Strong);\n            } else {\n                _heartRateOutput = LSTRING(Check_Pulse_Output_4);\n                _logOutPut = LSTRING(Check_Pulse_Normal);\n            };\n        };\n    };\n};\n\nif (_selectionName in [\"hand_l\",\"hand_r\"] && {[_unit, _selectionName] call FUNC(hasTourniquetAppliedTo)}) then {\n    _heartRateOutput = LSTRING(Check_Pulse_Output_5);\n    _logOutPut = LSTRING(Check_Pulse_None);\n};\n\n[QEGVAR(common,displayTextStructured), [[_heartRateOutput, [_unit] call EFUNC(common,getName), round(_heartRate)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\n\nif (_logOutPut != \"\") then {\n    [_unit,\"activity\", LSTRING(Check_Pulse_Log),[[_caller] call EFUNC(common,getName),_logOutPut]] call FUNC(addToLog);\n    [_unit,\"quick_view\", LSTRING(Check_Pulse_Log),[[_caller] call EFUNC(common,getName),_logOutPut]] call FUNC(addToLog);\n};\n",
        "functionName": "ace_medical_fnc_actionCheckPulseLocal"
      },
      {
        "fileName": "fnc_actionCheckResponse.sqf",
        "content": "/*\n * Author: Glowbal\n * Action for checking the response status of the patient\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_actionCheckResponse\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\"];\n\nprivate _output = [LSTRING(Check_Response_Unresponsive), LSTRING(Check_Response_Responsive)] select ([_target] call EFUNC(common,isAwake));\n\n[QEGVAR(common,displayTextStructured), [[_output, [_target] call EFUNC(common,getName)], 2, _caller], [_caller]] call CBA_fnc_targetEvent;\n\n[_target ,\"activity\", _output, [[_target, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n[_target, \"quick_view\", _output, [[_target, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n",
        "functionName": "ace_medical_fnc_actionCheckResponse"
      },
      {
        "fileName": "fnc_actionDiagnose.sqf",
        "content": "/*\n * Author: Glowbal\n * Action for diagnosing in basic medical\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_actionDiagnose\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\"];\n\nprivate _genericMessages = [LSTRING(diagnoseMessage), [_target] call EFUNC(common,getName)];\n\nif (alive _target) then {\n    _genericMessages pushBack LSTRING(diagnoseAlive);\n} else {\n    _genericMessages pushBack LSTRING(diagnoseDead);\n};\n\nif (_target getVariable[QGVAR(hasLostBlood), 0] > 0) then {\n    if (_target getVariable[QGVAR(hasLostBlood), 0] > 1) then {\n        _genericMessages pushBack LSTRING(lostBloodALot);\n    } else {\n        _genericMessages pushBack LSTRING(lostBlood);\n    };\n} else {\n    _genericMessages pushBack LSTRING(noBloodloss);\n};\n\nif (alive _target) then {\n    if (_target getVariable[QGVAR(hasPain), false]) then {\n        _genericMessages pushBack LSTRING(inPain);\n    } else {\n        _genericMessages pushBack LSTRING(noPain);\n    };\n};\n\n[QEGVAR(common,displayTextStructured), [_genericMessages, 3.0, _caller], [_caller]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_medical_fnc_actionDiagnose"
      },
      {
        "fileName": "fnc_actionLoadUnit.sqf",
        "content": "/*\n * Author: Glowbal\n * Action for loading an unconscious or dead unit in the nearest vehicle, or _vehicle if given.\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: The vehicle <OBJECT> (default: objNull)\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_actionLoadUnit\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", [\"_vehicle\", objNull]];\n\nif ([_target] call EFUNC(common,isAwake)) exitWith {\n    [QEGVAR(common,displayTextStructured), [[LSTRING(CanNotLoaded), [_target] call EFUNC(common,getName)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\n};\nif ([_target] call FUNC(isBeingCarried)) then {\n    [_caller, _target] call EFUNC(dragging,dropObject_carry);\n};\nif ([_target] call FUNC(isBeingDragged)) then {\n    [_caller, _target] call EFUNC(dragging,dropObject);\n};\n\n[_caller, _target, _vehicle] call EFUNC(common,loadPerson);\n",
        "functionName": "ace_medical_fnc_actionLoadUnit"
      },
      {
        "fileName": "fnc_actionPlaceInBodyBag.sqf",
        "content": "/*\n * Author: Glowbal\n * Replace a (dead) body by a body bag\n *\n * Arguments:\n * 0: The actor <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * body bag (will return objNull when run where target is not local) <OBJECT>\n *\n * Example:\n * [player, cursorTarget] call ace_medical_fnc_actionPlaceInBodyBag\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\"];\nTRACE_2(\"params\",_caller,_target);\n\nif (!local _target) exitWith {\n    TRACE_1(\"running where local\",local _target);\n    [QGVAR(actionPlaceInBodyBag), [_caller, _target], [_target]] call CBA_fnc_targetEvent;\n    objNull\n};\n\nif (alive _target) then {\n    TRACE_1(\"manually killing with setDead\",_target);\n    [_target, true] call FUNC(setDead);\n};\n\nprivate _position = (getPosASL _target) vectorAdd [0, 0, 0.2];\n\nprivate _headPos  = _target modelToWorldVisual (_target selectionPosition \"head\");\nprivate _spinePos = _target modelToWorldVisual (_target selectionPosition \"Spine3\");\nprivate _dirVect = _headPos vectorFromTo _spinePos;\nprivate _direction = _dirVect call CBA_fnc_vectDir;\n\n//move the body away now, so it won't physX the bodyBag object (this setPos seems to need to be called where object is local)\n_target setPosASL [-5000, -5000, 0];\n\nprivate _bodyBag = createVehicle [\"ACE_bodyBagObject\", _position, [], 0, \"\"];\n\n// prevent body bag from flipping\n_bodyBag setPosASL _position;\n_bodyBag setDir _direction;\n\n[\"ace_placedInBodyBag\", [_target, _bodyBag]] call CBA_fnc_globalEvent; //hide and delete body on server\n\n_bodyBag\n",
        "functionName": "ace_medical_fnc_actionPlaceInBodyBag"
      },
      {
        "fileName": "fnc_actionRemoveTourniquet.sqf",
        "content": "/*\n * Author: Glowbal\n * Action for removing the tourniquet on specified selection\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"selection\"] call ace_medical_fnc_actionRemoveTourniquet\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\"];\nTRACE_3(\"params\",_caller,_target,_selectionName);\n\n// grab the required data\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\n\n// Check if there is a tourniquet on this bodypart\nif ((_tourniquets select _part) == 0) exitWith {\n    [QEGVAR(common,displayTextStructured), [LSTRING(noTourniquetOnBodyPart), 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\n};\n\n// Removing the tourniquet\n_tourniquets set [_part, 0];\n_target setVariable [QGVAR(tourniquets), _tourniquets, true];\n\n// Adding the tourniquet item to the caller\n_caller addItem \"ACE_tourniquet\";\n\n//Handle all injected medications now that blood is flowing:\nprivate _delayedMedications = _target getVariable [QGVAR(occludedMedications), []];\nprivate _updatedArray = false;\nTRACE_2(\"meds\",_part,_delayedMedications);\n{\n    _x params [\"\", \"\", \"_medPartNum\"];\n    if (_part == _medPartNum) then {\n        TRACE_1(\"delayed medication call after tourniquet removeal\",_x);\n        [QGVAR(treatmentAdvanced_medicationLocal), _x, [_target]] call CBA_fnc_targetEvent;\n        _delayedMedications set [_forEachIndex, -1];\n        _updatedArray = true;\n    };\n} forEach _delayedMedications;\n\nif (_updatedArray) then {\n    _delayedMedications = _delayedMedications - [-1];\n    _target setVariable [QGVAR(occludedMedications), _delayedMedications, true];\n};\n",
        "functionName": "ace_medical_fnc_actionRemoveTourniquet"
      },
      {
        "fileName": "fnc_actionUnloadUnit.sqf",
        "content": "/*\n * Author: Glowbal\n * Action for unloading an unconscious or dead unit from a vechile\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: Drag after unload <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, false] call ACE_medical_fnc_actionUnloadUnit\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", [\"_drag\", false]];\n\n// cannot unload a unit not in a vehicle.\nif (vehicle _target == _target) exitWith {};\nif (([_target] call EFUNC(common,isAwake))) exitWith {};\n\n[\"ace_unloadPersonEvent\", [_target, vehicle _target, _caller], _target] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_medical_fnc_actionUnloadUnit"
      },
      {
        "fileName": "fnc_addDamageToUnit.sqf",
        "content": "/*\n * Author: PabstMirror\n * Manually Apply Damage to a unit (can cause lethal damage)\n * NOTE: because of caching, this will not have instant effects (~3 frame delay)\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Damage to Add <NUMBER>\n * 2: Selection (\"head\", \"body\", \"hand_l\", \"hand_r\", \"leg_l\", \"leg_r\") <STRING>\n * 3: Projectile Type <STRING>\n *\n * Return Value:\n * HandleDamage's return <NUMBER>\n *\n * Example:\n * [player, 0.8, \"leg_r\", \"bullet\"] call ace_medical_fnc_addDamageToUnit\n * [cursorTarget, 1, \"body\", \"stab\"] call ace_medical_fnc_addDamageToUnit\n *\n * Public: Yes\n */\n// #define DEBUG_MODE_FULL\n// #define DEBUG_TESTRESULTS\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_damageToAdd\", -1, [0]], [\"_selection\", \"\", [\"\"]], [\"_typeOfDamage\", \"\", [\"\"]]];\nTRACE_4(\"params\",_unit,_damageToAdd,_selection,_typeOfDamage);\n\n_selection = toLower _selection;\nif ((isNull _unit) || {!local _unit} || {!alive _unit}) exitWith {ERROR_1(\"addDamageToUnit - badUnit %1\", _this); -1};\nif (_damageToAdd < 0) exitWith {ERROR_1(\"addDamageToUnit - bad damage %1\", _this); -1};\nif (!(_selection in GVAR(SELECTIONS))) exitWith {ERROR_1(\"addDamageToUnit - bad selection %1\", _this); -1};\n\n//Get the hitpoint and the index\nprivate _hitpoint = [_unit, _selection, true] call ace_medical_fnc_translateSelections;\n(getAllHitPointsDamage _unit) params [[\"_allHitPoints\", []]];\nprivate _hitpointIndex = -1;\n{   //case insensitive find\n    if (_x == _hitpoint) exitWith {_hitpointIndex = _forEachIndex;};\n} forEach _allHitPoints;\nif (_hitpointIndex < 0) exitWith {ERROR_1(\"addDamageToUnit - bad hitpointIndex %1\", _this); -1};\n\nprivate _currentDamage = _unit getHitIndex _hitpointIndex;\n\n#ifdef DEBUG_TESTRESULTS\nprivate _checkAtFrame = diag_frameno + 5;\nprivate _partNumber = [_selection] call FUNC(selectionNameToNumber);\nprivate _startDmg = (_unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]]) select _partNumber;\nprivate _debugCode = {\n    params [\"\", \"_unit\", \"_startDmg\", \"_damageToAdd\", \"_partNumber\"];\n    private _endDmg = (_unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]]) select _partNumber;\n    if ((!alive _unit) || {_endDmg > _startDmg}) then {\n        INFO_6(\"addDamageToUnit - PASSED - [unit:%1, partNo:%2, addDmg:%3] results:[alive:%4 old:%5 new:%6]\", _unit, _partNumber, _damageToAdd, alive _unit, _startDmg, _endDmg);\n    } else {\n        ERROR_6(\"addDamageToUnit - FAILED - [unit:%1, partNo:%2, addDmg:%3] results:[alive:%4 old:%5 new:%6]\", _unit, _partNumber, _damageToAdd, alive _unit, _startDmg, _endDmg);\n    };\n};\n[{diag_frameno > (_this select 0)}, _debugCode, [_checkAtFrame, _unit, _startDmg, _damageToAdd, _partNumber]] call CBA_fnc_waitUntilAndExecute;\n#endif\n\nprivate _return = [_unit, _selection, (_currentDamage + _damageToAdd), _unit, _typeOfDamage, _hitpointIndex, objNull] call FUNC(handleDamage);\nTRACE_1(\"handleDamage called\",_return);\n\n_return\n",
        "functionName": "ace_medical_fnc_addDamageToUnit"
      },
      {
        "fileName": "fnc_addHeartRateAdjustment.sqf",
        "content": "/*\n * Author: Glowbal, KoffeinFlummi\n * Increase the Heart Rate of a local unit by given number within given amount of seconds.\n *\n * Arguments:\n * 0: The unit <OBJECT>\n * 1: value <NUMBER>\n * 2: time in seconds <NUMBER>\n * 3: callback <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 1, 5, {callback}] call ace_medical_fnc_addHeartRateAdjustment\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_value\", 0, [0]], [\"_time\", 1, [0]], [\"_callBack\", {}, [{}]]];\n\nprivate _adjustment = _unit getVariable [QGVAR(heartRateAdjustments), []];\n_adjustment pushBack [_value, _time, _callBack];\n_unit setVariable [QGVAR(heartRateAdjustments), _adjustment];\n\n[\"ace_heartRateAdjustmentAdded\", [_unit, _value, _time]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_medical_fnc_addHeartRateAdjustment"
      },
      {
        "fileName": "fnc_addLoadPatientActions.sqf",
        "content": "/*\n * Author: 654wak654\n * Adds child actions to the \"load patient\" action for near vehicles.\n *\n * Arguments:\n * 0: Patient <OBJECT>\n *\n * Return Value:\n * Child actions <ARRAY>\n *\n * Example:\n * [kevin] call ace_medical_fnc_addLoadPatientActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _statement = {\n    params [\"_target\", \"_player\", \"_vehicle\"];\n    [_player, _target, _vehicle] call FUNC(actionLoadUnit);\n};\n\n[_target call EFUNC(common,nearestVehiclesFreeSeat), _statement, _target] call EFUNC(interact_menu,createVehiclesActions)\n",
        "functionName": "ace_medical_fnc_addLoadPatientActions"
      },
      {
        "fileName": "fnc_addToLog.sqf",
        "content": "/*\n * Author: Glowbal\n * Add an entry to the specified log\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: The log type <STRING>\n * 2: The message <STRING>\n * 3: The arguments for localization <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"type\", \"message\", [_args]] call ace_medical_fnc_addToLog\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_type\", \"_message\", \"_arguments\"];\n\nif (!local _unit) exitWith {\n    [QGVAR(addToMedicalLog), _this, _unit] call CBA_fnc_targetEvent;\n};\n\ndate params [\"\", \"\", \"\", \"_hour\", \"_minute\"];\n\nprivate _moment = format [ ([\"%1:%2\", \"%1:0%2\"] select (_minute < 10)), _hour, _minute];\nprivate _logVarName = format[QGVAR(logFile_%1), _type];\n\nprivate _log = _unit getVariable [_logVarName, []];\nif (count _log >= 8) then {\n    private _newLog = [];\n    {\n        // ensure the first element will not be added\n        if (_forEachIndex > 0) then {\n            _newLog pushBack _x;\n        };\n    } forEach _log;\n    _log = _newLog;\n};\n_log pushBack [_message, _moment, _type, _arguments];\n\n_unit setVariable [_logVarName, _log, true];\n[\"ace_medicalLogEntryAdded\", [_unit, _type, _message, _arguments]] call CBA_fnc_localEvent;\n\nprivate _logs = _unit getVariable [QGVAR(allLogs), []];\nif !(_logVarName in _logs) then {\n    _logs pushBack _logVarName;\n    _unit setVariable [QGVAR(allLogs), _logs, true];\n};\n",
        "functionName": "ace_medical_fnc_addToLog"
      },
      {
        "fileName": "fnc_addToTriageCard.sqf",
        "content": "/*\n * Author: Glowbal\n * Add an entry to the triage card\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: The new item classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"bandage\"] call ace_medical_fnc_addToTriageCard\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_newItem\"];\n\nif (!local _unit) exitWith {\n    [QGVAR(addToTriageCard), _this, _unit] call CBA_fnc_targetEvent;\n};\n\nprivate _log = _unit getVariable [QGVAR(triageCard), []];\nprivate _inList = false;\nprivate _amount = 1;\n{\n    if ((_x select 0) == _newItem) exitWith {\n        private _info = _log select _forEachIndex;\n        _info set [1,(_info select 1) + 1];\n        _info set [2, CBA_missionTime];\n        _log set [_forEachIndex, _info];\n\n        _amount = (_info select 1);\n        _inList = true;\n    };\n} forEach _log;\n\nif (!_inList) then {\n    _log pushBack [_newItem, 1, CBA_missionTime];\n};\n_unit setVariable [QGVAR(triageCard), _log, true];\n[\"ace_triageCardItemAdded\", [_unit, _newItem, _amount]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_medical_fnc_addToTriageCard"
      },
      {
        "fileName": "fnc_addUnconsciousCondition.sqf",
        "content": "/*\n * Author: Glowbal\n * Adds new condition for the unconscious state. Conditions are not actively checked for units unless unit is in unconscious state.\n *\n * Arguments:\n * 0-N: Code, should return a boolean <CODE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[{bob}]] call ace_medical_fnc_addUnconsciousCondition\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (isnil QGVAR(unconsciousConditions)) then {\n    GVAR(unconsciousConditions) = [];\n};\nif (_this isEqualType []) then {\n    {\n        if (_x isEqualType {}) then {\n            GVAR(unconsciousConditions) pushback _x;\n        };\n    } foreach _this;\n};\n",
        "functionName": "ace_medical_fnc_addUnconsciousCondition"
      },
      {
        "fileName": "fnc_addUnloadPatientActions.sqf",
        "content": "/*\n * Author: esteldunedain\n * Create one unload action per unconscious passenger\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player <OBJECT>\n * 3: Parameters <ARRAY>\n *\n * Return Value:\n * Children actions <ARRAY>\n *\n * Example:\n * [car, kevin, [params]] call ACE_medical_fnc_addUnloadPatientActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_vehicle\", \"_player\", \"_parameters\"];\n\nprivate _actions = [];\n\n{\n    private _unit = _x;\n    if (_unit != _player && {(alive _unit) && {_unit getVariable [\"ACE_isUnconscious\", false]}}) then {\n        _actions pushBack\n            [\n                [\n                    str(_unit),\n                    [_unit, true] call EFUNC(common,getName),\n                    \"\",\n                    {[_player, (_this select 2) select 0] call FUNC(actionUnloadUnit);},\n                    {true},\n                    {},\n                    [_unit]\n                ] call EFUNC(interact_menu,createAction),\n                [],\n                _unit\n            ];\n    };\n} forEach crew _vehicle;\n\n_actions\n",
        "functionName": "ace_medical_fnc_addUnloadPatientActions"
      },
      {
        "fileName": "fnc_addVitalLoop.sqf",
        "content": "/*\n * Author: Glowbal\n * Enabled the vitals loop for a unit.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_medical_fnc_addVitalLoop\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_force\", false]];\n\nif !([_unit] call FUNC(hasMedicalEnabled) || _force) exitWith {};\n\nif !(local _unit) exitWith {\n    [QGVAR(addVitalLoop), [_unit, _force], _unit] call CBA_fnc_targetEvent;\n};\n\n// Quit if the unit already has a vital loop, or is dead, unless it's forced\nif ((_unit getVariable[QGVAR(addedToUnitLoop),false] || !alive _unit) && !_force) exitWith{};\n\n// Schedule the loop to be executed again 1 sec later\n// @todo: should the loop be started righ away instead?\n_unit setVariable [QGVAR(addedToUnitLoop), true, true];\n[DFUNC(vitalLoop), [_unit, CBA_missionTime], 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_addVitalLoop"
      },
      {
        "fileName": "fnc_adjustPainLevel.sqf",
        "content": "/*\n * Author: PabstMirror\n * Interface to allow external modules to safely adjust pain levels.\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: Added ammount of pain (can be negative) <NUMBER>\n *\n * Return Value:\n * The new pain level <NUMBER>\n *\n * Example:\n * [guy, 0.5] call ace_medical_fnc_adjustPainLevel\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_addedPain\"];\n//Only run on local units:\nif (!local _unit) exitWith {ERROR(\"unit is not local\");};\nTRACE_3(\"ACE_DEBUG: adjustPainLevel Called\",_unit, _pain, _addedPain);\n\n//Ignore if medical system disabled:\nif (GVAR(level) == 0) exitWith {};\n\nprivate _pain = ((_unit getVariable [QGVAR(pain), 0]) + _addedPain) max 0;\n\n_unit setVariable [QGVAR(pain), _pain];\n\n//Start up the vital watching (if not already running)\n[_unit] call FUNC(addVitalLoop);\n\n_pain;\n",
        "functionName": "ace_medical_fnc_adjustPainLevel"
      },
      {
        "fileName": "fnc_bodyCleanupLoop.sqf",
        "content": "/*\n * Author: Glowbal, esteldunedain\n * Loop that cleans up litter\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_medical_fnc_bodyCleanupLoop\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n{\n    TRACE_2(\"body\",_x,isPlayer _x);\n    if ((!isNull _x) && {!isPlayer _x}) then {deleteVehicle _x};\n} forEach GVAR(bodiesToDelete);\n\n// deleteVehicle doesn't have instant results so it won't usualy be filtered until next run\nGVAR(bodiesToDelete) = GVAR(bodiesToDelete) - [objNull];\n\n// If no more bodies remain, exit the loop\nif (GVAR(bodiesToDelete) isEqualTo []) exitWith {\n    TRACE_1(\"array emptied - rem PFEH\",GVAR(bodiesToDelete));\n};\n\n// Schedule the loop to be executed again 20 sec later\n[DFUNC(bodyCleanupLoop), [], 20] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_bodyCleanupLoop"
      },
      {
        "fileName": "fnc_canAccessMedicalEquipment.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if caller can access targets medical equipment, based upon accessLevel.\n *\n * Arguments:\n * 0: The caller <OBJECT>\n * 1: The target <OBJECT>\n *\n * Return Value:\n * Can Treat <BOOL>\n *\n * Example:\n * [bob, target] call ace_medical_fnc_canAccessMedicalEquipment\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\"];\n\nprivate _accessLevel = _target getVariable [QGVAR(allowSharedEquipmentAccess), -1];\n\nprivate _return = false;\n\nif (_accessLevel >= 0) then {\n    if (_accessLevel == 0) exitWith { _return = true; };\n    if (_accessLevel == 1) exitWith { _return = (side _target == side _caller); };\n    if (_accessLevel == 2) exitWith { _return = (group _target == group _caller); };\n};\n\n_return;\n",
        "functionName": "ace_medical_fnc_canAccessMedicalEquipment"
      },
      {
        "fileName": "fnc_canTreat.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if the treatment action can be performed.\n *\n * Arguments:\n * 0: The caller <OBJECT>\n * 1: The target <OBJECT>\n * 2: Selection name <STRING>\n * 3: ACE_Medical_Treatments Classname <STRING>\n *\n * Return Value:\n * Can Treat <BOOL>\n *\n * Example:\n * [player, cursorTarget, \"Head\", \"SurgicalKit\"] call ace_medical_fnc_canTreat\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\"];\n\nif !(_target isKindOf \"CAManBase\") exitWith { false };\n\nprivate _config = (ConfigFile >> \"ACE_Medical_Actions\" >> ([\"Basic\", \"Advanced\"] select (GVAR(level)>=2)) >> _className);\n\nif !(isClass _config) exitwith {false};\n\n// Allow self treatment check\nif (_caller == _target && {getNumber (_config >> \"allowSelfTreatment\") == 0}) exitwith {false};\n\nprivate _medicRequired = if (isNumber (_config >> \"requiredMedic\")) then {\n    getNumber (_config >> \"requiredMedic\");\n} else {\n    // Check for required class\n    if (isText (_config >> \"requiredMedic\")) exitwith {\n        missionNamespace getVariable [(getText (_config >> \"requiredMedic\")), 0]\n    };\n    0;\n};\nif !([_caller, _medicRequired] call FUNC(isMedic)) exitwith { false };\n\nprivate _items = getArray (_config >> \"items\");\nif (count _items > 0 && {!([_caller, _target, _items] call FUNC(hasItems))}) exitwith { false };\n\nprivate _allowedSelections = getArray (_config >> \"allowedSelections\");\nif !(\"All\" in _allowedSelections || {(_selectionName in _allowedSelections)}) exitwith { false };\n\nprivate _return = true;\nif (getText (_config >> \"condition\") != \"\") then {\n    private _condition = getText (_config >> \"condition\");\n    if (isnil _condition) then {\n        _condition = compile _condition;\n    } else {\n        _condition = missionNamespace getVariable _condition;\n    };\n    if (_condition isEqualType false) then {\n        _return = _condition;\n    } else {\n        _return = [_caller, _target, _selectionName, _className] call _condition;\n    };\n};\nif (!_return) exitwith { false };\n\nprivate _patientStateCondition = if (isText(_config >> \"patientStateCondition\")) then {\n    missionNamespace getVariable [getText(_config >> \"patientStateCondition\"), 0]\n} else {\n    getNumber(_config >> \"patientStateCondition\")\n};\nif (_patientStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitwith {false};\n\nprivate _locations = getArray (_config >> \"treatmentLocations\");\nif (\"All\" in _locations) exitwith { true };\n\nprivate _medFacility = {([_caller] call FUNC(isInMedicalFacility)) || ([_target] call FUNC(isInMedicalFacility))};\nprivate _medVeh = {([_caller] call FUNC(isInMedicalVehicle)) || ([_target] call FUNC(isInMedicalVehicle))};\n\n{\n    if (_x == \"field\") exitwith {_return = true;};\n    if (_x == \"MedicalFacility\" && _medFacility) exitwith {_return = true;};\n    if (_x == \"MedicalVehicle\" && _medVeh) exitwith {_return = true;};\n    if !(isnil _x) exitwith {\n        private _val = missionNamespace getVariable _x;\n        if (_val isEqualType 0) then {\n            _return = switch (_val) do {\n                case 0: {true}; //AdvancedMedicalSettings_anywhere\n                case 1: {call _medVeh}; //AdvancedMedicalSettings_vehicle\n                case 2: {call _medFacility}; //AdvancedMedicalSettings_facility\n                case 3: {(call _medFacility) || {call _medVeh}}; //AdvancedMedicalSettings_vehicleAndFacility\n                default {false}; //Disabled\n            };\n        };\n    };\n} foreach _locations;\n\n_return;\n",
        "functionName": "ace_medical_fnc_canTreat"
      },
      {
        "fileName": "fnc_canTreatCached.sqf",
        "content": "/*\n * Author: Glowbal\n * Cached Check if the treatment action can be performed.\n *\n * Arguments:\n * 0: The caller <OBJECT>\n * 1: The target <OBJECT>\n * 2: Selection name <STRING>\n * 3: ACE_Medical_Treatments Classname <STRING>\n *\n * Return Value:\n * Can Treat <BOOL>\n *\n * Example:\n * [bob, kevin, \"selection\", \"classname\"] call ACE_medical_fnc_canTreatCached\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n#define MAX_DURATION_CACHE 2\nparams [\"\", \"_target\", \"_selection\", \"_classname\"];\n\n// parameters, function, namespace, uid\n[_this, DFUNC(canTreat), _target, format [QGVAR(canTreat_%1_%2), _selection, _classname], MAX_DURATION_CACHE, QEGVAR(interact_menu,clearConditionCaches)] call EFUNC(common,cachedCall);\n",
        "functionName": "ace_medical_fnc_canTreatCached"
      },
      {
        "fileName": "fnc_copyDeadBody.sqf",
        "content": "/*\n * Author: Glowbal\n * Makes a copy of a dead body. For handling dead bodies for actions such as load and carry.\n *\n * Arguments:\n * 0: The oldbody <OBJECT>\n * 1: The caller <OBJECT>\n *\n * Return Value:\n * Returns the copy of the unit. If no copy could be made, returns the oldBody <OBJECT>\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_copyDeadBody\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_oldBody\", \"_caller\"];\n\nif (alive _oldBody) exitWith {_oldBody}; // we only want to do this for dead bodies\n\nprivate _name = _oldBody getVariable [\"ACE_name\", \"unknown\"];\nprivate _class = typeOf _oldBody;\nprivate _side = side _caller;\nprivate _group = createGroup _side;\nprivate _position = getPos _oldBody;\n\nprivate _newUnit = _group createUnit [typeOf _oldBody, _position, [], 0, \"NONE\"];\n_newUnit setVariable [\"ACE_name\", _name, true];\n\n_newUnit disableAI \"TARGET\";\n_newUnit disableAI \"AUTOTARGET\";\n_newUnit disableAI \"MOVE\";\n_newUnit disableAI \"ANIM\";\n_newUnit disableAI \"FSM\";\n\nremoveallweapons _newUnit;\nremoveallassigneditems _newUnit;\nremoveUniform _newUnit;\nremoveHeadgear _newUnit;\nremoveBackpack _newUnit;\nremoveVest _newUnit;\n\n_newUnit addHeadgear (headgear _oldBody);\n_newUnit addBackpack (backpack _oldBody);\nclearItemCargoGlobal (backpackContainer _newUnit);\nclearMagazineCargoGlobal (backpackContainer _newUnit);\nclearWeaponCargoGlobal (backpackContainer _newUnit);\n\n_newUnit addVest (vest _oldBody);\nclearItemCargoGlobal (backpackContainer _newUnit);\nclearMagazineCargoGlobal (backpackContainer _newUnit);\nclearWeaponCargoGlobal (backpackContainer _newUnit);\n\n_newUnit addUniform (uniform _oldBody);\nclearItemCargoGlobal (backpackContainer _newUnit);\nclearMagazineCargoGlobal (backpackContainer _newUnit);\nclearWeaponCargoGlobal (backpackContainer _newUnit);\n\n{_newUnit addMagazine _x} count (magazines _oldBody);\n{_newUnit addWeapon _x} count (weapons _oldBody);\n{_newUnit addItem _x} count (items _oldBody);\n\n_newUnit selectWeapon (primaryWeapon _newUnit);\n\n// We are attaching the old unit and hiding it, so we can keep the original unit until later.\n_oldBody attachTo [_newUnit, [0,0,0]];\nif (isMultiplayer) then {\n    hideObjectGlobal _oldBody;\n} else {\n    hideObject _oldBody;\n};\n\n_newUnit setVariable [QGVAR(copyOfUnit), _oldBody, true];\n_oldBody setVariable [QGVAR(hasCopy), _newUnit, true];\n_newUnit setVariable [\"ACE_isDead\", true, true];\n_newUnit setVariable [\"ACE_isUnconscious\", true, true];\n_newUnit setVariable [QGVAR(disableInteraction), true, true];\n_oldBody setVariable [QGVAR(disableInteraction), true, true];\n\n[_newUnit, 0.89] call FUNC(setStructuralDamage);\n_newUnit;\n",
        "functionName": "ace_medical_fnc_copyDeadBody"
      },
      {
        "fileName": "fnc_createLitter.sqf",
        "content": "/*\n * Author: Glowbal\n * Spawns litter for the treatment action on the ground around the target\n *\n * Arguments:\n * 0: The Caller <OBJECT>\n * 1: The target <OBJECT>\n * 2: The treatment Selection Name <STRING>\n * 3: The treatment classname <STRING>\n * 4: ? <UNKNOWN>\n * 5: Users of Items <UNKNOWN>\n * 6: Blood Loss on selection (previously called _previousDamage) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"selection\", \"classname\", , , 5] call ACE_medical_fnc_createLitter\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n#define MIN_ENTRIES_LITTER_CONFIG 3\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"\", \"_usersOfItems\", \"_bloodLossOnSelection\"];\nTRACE_6(\"params\",_caller,_target,_selectionName,_className,_usersOfItems,_bloodLossOnSelection);\n\n//Ensures comptibilty with other possible medical treatment configs\nprivate _previousDamage = _bloodLossOnSelection;\n\nif !(GVAR(allowLitterCreation)) exitwith {};\nif (vehicle _caller != _caller || {vehicle _target != _target}) exitwith {};\n\nprivate _config = if (GVAR(level) >= 2) then {\n    (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\n} else {\n    (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className)\n};\nif !(isClass _config) exitwith {TRACE_1(\"No action config\", _className);};\n\nif !(isArray (_config >> \"litter\")) exitwith {TRACE_1(\"No litter config\", _className);};\nprivate _litter = getArray (_config >> \"litter\");\n\nprivate _createLitter = {\n    params [\"_unit\", \"_litterClass\"];\n    // @TODO: handle carriers over water\n    // For now, don't spawn litter if we are over water to avoid floating litter\n    if (surfaceIsWater (getPos _unit)) exitWith { false };\n\n    private _position = getPosATL _unit;\n    _position params [\"_posX\", \"_posY\", \"_posZ\"];\n    _position = [_posX + (random 2) - 1, _posY + (random 2) - 1, _posZ];\n\n    private _direction = (random 360);\n\n    // Create the litter, and timeout the event based on the cleanup delay\n    // The cleanup delay for events in MP is handled by the server side\n    TRACE_3(\"Creating Litter on server\",_litterClass,_position,_direction);\n    [QGVAR(createLitterServer), [_litterClass, _position, _direction]] call CBA_fnc_serverEvent;\n\n    true\n};\n\nprivate _createdLitter = [];\n{\n    if (_x isEqualType []) then {\n        if (count _x < MIN_ENTRIES_LITTER_CONFIG) exitwith {};\n\n        _x params [\"_selection\", \"_litterCondition\", \"_litterOptions\"];\n\n        if (toLower _selection in [toLower _selectionName, \"all\"]) then { // in is case sensitve. We can be forgiving here, so lets use toLower.\n\n            if (isnil _litterCondition) then {\n                _litterCondition = if (_litterCondition != \"\") then {compile _litterCondition} else {{true}};\n            } else {\n                _litterCondition = missionNamespace getVariable _litterCondition;\n                if (!(_litterCondition isEqualType {})) then {_litterCondition = {false}};\n            };\n            if !([_caller, _target, _selectionName, _className, _usersOfItems, _bloodLossOnSelection] call _litterCondition) exitwith {};\n\n            if (_litterOptions isEqualType []) then {\n                // Loop through through the litter options and place the litter\n                {\n                    if (_x isEqualType [] && {(count _x > 0)}) then {\n                        [_target, selectRandom _x] call _createLitter;\n                    };\n                    if (_x isEqualType \"\") then {\n                        [_target, _x] call _createLitter;\n                    };\n                } foreach _litterOptions;\n            };\n        };\n    };\n} foreach _litter;\n",
        "functionName": "ace_medical_fnc_createLitter"
      },
      {
        "fileName": "fnc_determineIfFatal.sqf",
        "content": "/*\n * Author: Glowbal\n * Determine If Fatal\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Part <NUMBER>\n * 2: with Damage <NUMBER> (default: 0)\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 2, 5] call ACE_medical_fnc_determineIfFatal\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define INCREASE_CHANCE_HEAD 0.05\n#define INCREASE_CHANCE_TORSO 0.03\n#define INCREASE_CHANGE_LIMB 0.01\n\n#define CHANGE_FATAL_HEAD 0.7\n#define CHANGE_FATAL_TORSO 0.6\n#define CHANGE_FATAL_LIMB 0.1\n\nparams [\"_unit\", \"_part\", [\"_withDamage\", 0]];\n\nif (!alive _unit) exitWith {true};\nif ((vehicle _unit != _unit) && {!alive (vehicle _unit)}) exitWith { true };\nif (_part < 0 || _part > 5) exitWith {false};\n\n// Find the correct Damage threshold for unit.\nprivate _damageThreshold = [1,1,1];\nif ([_unit, GVAR(remoteControlledAI)] call EFUNC(common,isPlayer)) then {\n    _damageThreshold =_unit getVariable[QGVAR(unitDamageThreshold), [GVAR(playerDamageThreshold), GVAR(playerDamageThreshold), GVAR(playerDamageThreshold) * 1.7]];\n} else {\n    _damageThreshold =_unit getVariable[QGVAR(unitDamageThreshold), [GVAR(AIDamageThreshold), GVAR(AIDamageThreshold), GVAR(AIDamageThreshold) * 1.7]];\n};\n_damageThreshold params [\"_thresholdHead\", \"_thresholdTorso\",  \"_thresholdLimbs\"];\n\nprivate _damageBodyPart = ((_unit getVariable [QGVAR(bodyPartStatus),[0, 0, 0, 0, 0, 0]]) select _part) + _withDamage;\n\n// Check if damage to body part is higher as damage head\nif (_part == 0) exitWith {\n    private _chanceFatal = CHANGE_FATAL_HEAD + ((INCREASE_CHANCE_HEAD * (_damageBodyPart - _thresholdHead)) * 10);\n    (_damageBodyPart >= _thresholdHead && {(_chanceFatal >= random(1))});\n};\n\n// Check if damage to body part is higher as damage torso\nif (_part == 1) exitWith {\n    private _chanceFatal = CHANGE_FATAL_TORSO + ((INCREASE_CHANCE_TORSO * (_damageBodyPart - _thresholdTorso)) * 10);\n    (_damageBodyPart >= _thresholdTorso && {(_chanceFatal >= random(1))});\n};\n// Check if damage to body part is higher as damage limbs\n// We use a slightly lower decrease for limbs, as we want any injuries done to those to be less likely to be fatal compared to head shots or torso.\nprivate _chanceFatal = CHANGE_FATAL_LIMB + ((INCREASE_CHANGE_LIMB * (_damageBodyPart - _thresholdLimbs)) * 10);\n(_damageBodyPart >= _thresholdLimbs && {(_chanceFatal >= random(1))});\n",
        "functionName": "ace_medical_fnc_determineIfFatal"
      },
      {
        "fileName": "fnc_displayPatientInformation.sqf",
        "content": "/*\n * Author: Glowbal\n * Displays the patient information for given unit.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Show <BOOL> (default: true)\n * 2: Selection <NUMBER> (default: 0)\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true, 2] call ACE_medical_fnc_displayPatientInformation\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define MAX_DISTANCE 10\n\n// Exit for basic medical\nif (GVAR(level) < 2) exitWith {};\n\nparams [\"_target\", [\"_show\", true], [\"_selectionN\", 0]];\n\nGVAR(currentSelectedSelectionN) = [0, _selectionN] select (IS_SCALAR(_selectionN));\nGVAR(displayPatientInformationTarget) = [ObjNull, _target] select _show;\n\nif (_show) then {\n    (\"ACE_MedicalRscDisplayInformation\" call BIS_fnc_rscLayer) cutRsc [QGVAR(DisplayInformation),\"PLAIN\"];\n\n    [{\n        params [\"_args\", \"_idPFH\"];\n        _args params [\"_target\", \"_selectionN\"];\n\n        if (GVAR(displayPatientInformationTarget) != _target || GVAR(currentSelectedSelectionN) != _selectionN) exitwith {\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        };\n        if (ACE_player distance _target > MAX_DISTANCE) exitwith {\n            (\"ACE_MedicalRscDisplayInformation\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n            [QEGVAR(common,displayTextStructured), [[LSTRING(DistanceToFar), [_target] call EFUNC(common,getName)], 1.75, ACE_player], [ACE_player]] call CBA_fnc_targetEvent;\n        };\n\n        disableSerialization;\n        private _display = uiNamespace getVariable QGVAR(DisplayInformation);\n        if (isnil \"_display\") exitwith {\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        };\n\n        private _allInjuryTexts = [];\n        private _genericMessages = [];\n\n        private _partText = [LSTRING(Head), LSTRING(Torso), LSTRING(LeftArm) ,LSTRING(RightArm) ,LSTRING(LeftLeg), LSTRING(RightLeg)] select _selectionN;\n        _genericMessages pushback [localize _partText, [1, 1, 1, 1]];\n\n        if (_target getVariable[QGVAR(isBleeding), false]) then {\n            _genericMessages pushback [localize LSTRING(Status_Bleeding), [1, 0.1, 0.1, 1]];\n        };\n        if (_target getVariable[QGVAR(hasLostBlood), 0] > 1) then {\n            _genericMessages pushback [localize LSTRING(Status_Lost_Blood), [1, 0.1, 0.1, 1]];\n        };\n\n        if (((_target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]]) select _selectionN) > 0) then {\n            _genericMessages pushback [localize LSTRING(Status_Tourniquet_Applied), [0.77, 0.51, 0.08, 1]];\n        };\n        if (_target getVariable[QGVAR(hasPain), false]) then {\n            _genericMessages pushback [localize LSTRING(Status_Pain), [1, 1, 1, 1]];\n        };\n\n        private _totalIvVolume = 0;\n        private _bloodBags = _target getVariable [QGVAR(ivBags), []];\n        {\n            _x params [\"_bagVolumeRemaining\"];\n            _totalIvVolume = _totalIvVolume + _bagVolumeRemaining;\n        } foreach _bloodBags;\n\n        if (_totalIvVolume >= 1) then {\n            _genericMessages pushback [format[localize LSTRING(receivingIvVolume), floor _totalIvVolume], [1, 1, 1, 1]];\n        };\n\n        private _damaged = [false, false, false, false, false, false];\n        private _selectionBloodLoss = [0,0,0,0,0,0];\n\n        private _openWounds = _target getVariable [QGVAR(openWounds), []];\n        {\n            _x params [\"\", \"_x1\", \"_selectionX\", \"_amountOf\", \"_x4\"];\n            // Find how much this bodypart is bleeding\n            if (_amountOf > 0) then {\n                _damaged set [_selectionX, true];\n                _selectionBloodLoss set [_selectionX, (_selectionBloodLoss select _selectionX) + (20 * (_x4 * _amountOf))];\n\n                if (_selectionN == _selectionX) then {\n                // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\n                    if (_amountOf >= 1) then {\n                        // TODO localization\n                        _allInjuryTexts pushback [format[\"%2x %1\", (GVAR(AllWoundInjuryTypes) select _x1) select 6, ceil _amountOf], [1,1,1,1]];\n                    } else {\n                        // TODO localization\n                        _allInjuryTexts pushback [format[\"Partial %1\", (GVAR(AllWoundInjuryTypes) select _x1) select 6], [1,1,1,1]];\n                    };\n                };\n            };\n        } foreach _openWounds;\n\n        private _bandagedwounds = _target getVariable [QGVAR(bandagedWounds), []];\n        {\n            _x params [\"\", \"\", \"_selectionX\", \"_amountOf\", \"_x4\"];\n            // Find how much this bodypart is bleeding\n            if !(_damaged select _selectionX) then {\n                _selectionBloodLoss set [_selectionX, (_selectionBloodLoss select _selectionX) + (20 * (_x4 * _amountOf))];\n            };\n            if (_selectionN == _selectionX) then {\n                // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\n                if (_amountOf > 0) then {\n                    if (_amountOf >= 1) then {\n                        // TODO localization\n                        _allInjuryTexts pushback [format[\"[B] %2x %1\", (GVAR(AllWoundInjuryTypes) select (_x select 1)) select 6, ceil _amountOf], [0.88,0.7,0.65,1]];\n                    } else {\n                        // TODO localization\n                        _allInjuryTexts pushback [format[\"[B] Partial %1\", (GVAR(AllWoundInjuryTypes) select (_x select 1)) select 6], [0.88,0.7,0.65,1]];\n                    };\n                };\n            };\n        } foreach _bandagedwounds;\n\n        // Handle the body image coloring\n        private _availableSelections = [50,51,52,53,54,55];\n        {\n            private _total = _x;\n            private _red = 1;\n            private _green = 1;\n            private _blue = 1;\n\n            if (_total > 0) then {\n                if (_damaged select _forEachIndex) then {\n                    _green = (0.9 - _total) max 0;\n                    _blue = _green;\n                } else {\n                    _green = (0.9 - _total) max 0;\n                    _red = _green;\n                    //_blue = _green;\n                };\n            };\n            (_display displayCtrl (_availableSelections select _foreachIndex)) ctrlSetTextColor [_red, _green, _blue, 1.0];\n        } foreach _selectionBloodLoss;\n\n        private _lbCtrl = (_display displayCtrl 200);\n        lbClear _lbCtrl;\n        {\n            _x params [\"_add\", \"_color\"];\n            _lbCtrl lbAdd _add;\n            _lbCtrl lbSetColor [_foreachIndex, _color];\n        } foreach _genericMessages;\n\n        private _amountOfGeneric = count _genericMessages;\n        {\n            _x params [\"_add\", \"_color\"];\n            _lbCtrl lbAdd _add;\n            _lbCtrl lbSetColor [_foreachIndex + _amountOfGeneric, _color];\n        } foreach _allInjuryTexts;\n        if (count _allInjuryTexts == 0) then {\n            _lbCtrl lbAdd (localize LSTRING(NoInjuriesBodypart));\n        };\n\n        private _logCtrl = (_display displayCtrl 302);\n        lbClear _logCtrl;\n\n        private _logs = _target getVariable [QGVAR(logFile_Activity), []];\n        {\n            _x params [\"_message\", \"_moment\", \"_type\", \"_arguments\"];\n            if (isLocalized _message) then {\n                _message = localize _message;\n            };\n\n            {\n                if (_x isEqualType \"\" && {isLocalized _x}) then {\n                    _arguments set [_foreachIndex, localize _x];\n                };\n            } foreach _arguments;\n            _message = format([_message] + _arguments);\n            _logCtrl lbAdd format[\"%1 %2\", _moment, _message];\n        } foreach _logs;\n\n        private _triageStatus = [_target] call FUNC(getTriageStatus);\n        (_display displayCtrl 303) ctrlSetText (_triageStatus select 0);\n        (_display displayCtrl 303) ctrlSetBackgroundColor (_triageStatus select 2);\n\n    }, 0, [_target, GVAR(currentSelectedSelectionN)]] call CBA_fnc_addPerFrameHandler;\n\n} else {\n    (\"ACE_MedicalRscDisplayInformation\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\n};\n",
        "functionName": "ace_medical_fnc_displayPatientInformation"
      },
      {
        "fileName": "fnc_displayTriageCard.sqf",
        "content": "/*\n * Author: Glowbal\n * Display triage card for a unit\n *\n * Arguments:\n * 0: The unit <OBJECT>\n * 1: Show <BOOL> (default: true)\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true] call ace_medical_fnc_displayTriageCard\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", [\"_show\", true]];\n\nGVAR(TriageCardTarget) = if (_show) then {_target} else {ObjNull};\n\nif (_show) then {\n    //(\"ACE_MedicalTriageCard\" call BIS_fnc_rscLayer) cutRsc [QGVAR(triageCard),\"PLAIN\"];\n    createDialog QGVAR(triageCard);\n\n    [{\n        params [\"_args\", \"_idPFH\"];\n        _args params [\"_target\"];\n        if (GVAR(TriageCardTarget) != _target) exitWith {\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        };\n\n        disableSerialization;\n        private _display = uiNamespace getVariable QGVAR(triageCard);\n        if (isNil \"_display\") exitWith {\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        };\n\n        private _triageCardTexts = [];\n\n        // TODO fill the lb with the appropiate information for the patient\n        private _lbCtrl = (_display displayCtrl 200);\n        lbClear _lbCtrl;\n\n        private _log = _target getVariable [QGVAR(triageCard), []];\n        {\n            _x params [\"_item\", \"_amount\"];\n            private _message = _item;\n            if (isClass(configFile >> \"CfgWeapons\" >> _item)) then {\n                _message = getText(configFile >> \"CfgWeapons\" >> _item >> \"DisplayName\");\n            } else {\n                if (isLocalized _message) then {\n                    _message = localize _message;\n                };\n            };\n            _triageCardTexts pushBack format[\"%1x - %2\", _amount, _message];\n        } forEach _log;\n\n        if (count _triageCardTexts == 0) then {\n            _lbCtrl lbAdd (localize LSTRING(TriageCard_NoEntry));\n        };\n        {\n            _lbCtrl lbAdd _x;\n        } forEach _triageCardTexts;\n\n        private _triageStatus = [_target] call FUNC(getTriageStatus);\n        _triageStatus params [\"_text\", \"\", \"_color\"];\n\n        (_display displayCtrl 2000) ctrlSetText _text;\n        (_display displayCtrl 2000) ctrlSetBackgroundColor _color;\n\n    }, 0, [_target]] call CBA_fnc_addPerFrameHandler;\n\n} else {\n    //(\"ACE_MedicalTriageCard\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\n    closeDialog 7010;\n};\n",
        "functionName": "ace_medical_fnc_displayTriageCard"
      },
      {
        "fileName": "fnc_dropDownTriageCard.sqf",
        "content": "/*\n * Author: Glowbal\n * Display triage card for a unit\n *\n * Arguments:\n * 0: Show <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_medical_fnc_dropDownTriageCard\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_show\"];\n\ndisableSerialization;\nprivate _display = uiNamespace getVariable QGVAR(triageCard);\nif (isNil \"_display\") exitWith {};\n\nprivate _pos = [0,0,0,0];\nif (_show) then {\n    _pos = ctrlPosition (_display displayCtrl 2001);\n};\nfor \"_idc\" from 2002 to 2006 step 1 do {\n    _pos set [1, (_pos select 1) + (_pos select 3)];\n    private _ctrl = (_display displayCtrl _idc);\n    _ctrl ctrlSetPosition _pos;\n    _ctrl ctrlCommit 0;\n};\n",
        "functionName": "ace_medical_fnc_dropDownTriageCard"
      },
      {
        "fileName": "fnc_getBloodLoss.sqf",
        "content": "/*\n * Author: Glowbal\n * Calculate the total blood loss of a unit.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * Total blood loss of unit <NUMBER>\n *\n * Example:\n * [bob] call ACE_medical_fnc_getBloodLoss\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n#define BLOODLOSSRATE_BASIC 0.2\n\n// TODO Only use this calculation if medium or higher, otherwise use vanilla calculations (for basic medical).\nparams [\"_unit\"];\n\nprivate _totalBloodLoss = 0;\nprivate _tourniquets = _unit getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\n{\n    if ((_tourniquets select (_x select 2)) == 0) then {\n        // total bleeding ratio * percentage of injury left\n        _totalBloodLoss = _totalBloodLoss + ((_x select 4) * (_x select 3));\n        // (((BLOODLOSS_SMALL_WOUNDS * (_x select 0))) + ((BLOODLOSS_MEDIUM_WOUNDS * (_x select 1))) + ((BLOODLOSS_LARGE_WOUNDS * (_x select 2))) * (_cardiacOutput / DEFAULT_CARDIAC_OUTPUT));\n    };\n} forEach (_unit getVariable [QGVAR(openWounds), []]);\n\n{\n    _totalBloodLoss = _totalBloodLoss + ((_x select 4) * (_x select 3));\n} forEach (_unit getVariable [QGVAR(internalWounds), []]);\n\n_totalBloodLoss * ((_unit getVariable [QGVAR(bleedingCoefficient), GVAR(bleedingCoefficient)]) max 0);\n",
        "functionName": "ace_medical_fnc_getBloodLoss"
      },
      {
        "fileName": "fnc_getBloodPressure.sqf",
        "content": "/*\n * Author: Glowbal\n * Calculates the blood volume change and decreases the IVs given to the unit.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * 0: BloodPressure Low <NUMBER>\n * 1: BloodPressure High <NUMBER>\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_getBloodPressure\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n// Value is taken because with cardic output and resistance at default values, it will put blood pressure High at 120.\n#define MODIFIER_BP_HIGH     0.229\n\n// Value is taken because with cardic output and resistance at default values, it will put blood pressure Low at 80.\n#define MODIFIER_BP_LOW     0.1524\n\nparams [\"_unit\"];\n\nprivate _cardiacOutput = [_unit] call FUNC(getCardiacOutput);\nprivate _resistance = _unit getVariable [QGVAR(peripheralResistance), 100];\n\nprivate _bloodPressureHigh = (_cardiacOutput * MODIFIER_BP_HIGH) * _resistance;\nprivate _bloodPressureLow = (_cardiacOutput * MODIFIER_BP_LOW) * _resistance;\n\n[_bloodPressureLow max 0, _bloodPressureHigh max 0]\n",
        "functionName": "ace_medical_fnc_getBloodPressure"
      },
      {
        "fileName": "fnc_getBloodVolumeChange.sqf",
        "content": "/*\n * Author: Glowbal\n * Calculates the blood volume change and decreases the IVs given to the unit.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Global Sync Values (bloodbags) <BOOL>\n *\n * Return Value:\n * Blood volume change (in % total) <NUMBER>\n *\n * Example:\n * [bob, true] call ACE_medical_fnc_getBloodVolumeChange\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n/*\n    IV Change per second calculation:\n    250ml should take 60 seconds to fill. 250/60 = 4.166.\n    Basic medical is 10x (will take 6 seconds for 250ml)\n */\n#define IV_CHANGE_PER_SECOND         ([41.66, 4.166] select (GVAR(level) >= 2))\n\nparams [\"_unit\", \"_syncValues\"];\n\nprivate _bloodVolume = _unit getVariable [QGVAR(bloodVolume), 100];\nprivate _bloodVolumeChange = -([_unit] call FUNC(getBloodLoss));\n\nif (!isNil {_unit getVariable QGVAR(ivBags)}) then {\n    if (_bloodVolume < 100) then {\n        private _bloodBags = _unit getVariable [QGVAR(ivBags), []];\n        _bloodBags = _bloodBags apply {\n            _x params [\"_bagVolumeRemaining\"];\n            private _bagChange = IV_CHANGE_PER_SECOND min _bagVolumeRemaining; // absolute value of the change in miliLiters\n            _bagVolumeRemaining = _bagVolumeRemaining - _bagChange;\n            _bloodVolumeChange = _bloodVolumeChange + (_bagChange / 70); // ((bag change in ml) / (body total:7000ml)) out of 100 percent\n            if (_bagVolumeRemaining < 0.01) then {\n                []\n            } else {\n                [_bagVolumeRemaining];\n            };\n        };\n        _bloodBags = _bloodBags - [[]]; // remove empty bags\n        if (_bloodBags isEqualTo []) then {\n            _unit setVariable [QGVAR(ivBags), nil, true]; // no bags left - clear variable (always globaly sync this)\n        } else {\n            _unit setVariable [QGVAR(ivBags), _bloodBags, _syncValues];\n        };\n    } else {\n        _unit setVariable [QGVAR(ivBags), nil, true]; // blood volume = 100% - clear variable (always globaly sync this)\n    };\n};\n\n_bloodVolumeChange;\n",
        "functionName": "ace_medical_fnc_getBloodVolumeChange"
      },
      {
        "fileName": "fnc_getCardiacOutput.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the cardiac output from the Heart, based on current Heart Rate and Blood Volume.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * Current cardiac output <NUMBER>\n *\n * Example:\n * [bob] call ACE_medical_fnc_getCardiacOutput\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n/*\n    Cardiac output (Q or or CO ) is the volume of blood being pumped by the heart, in particular by a left or right ventricle in the CBA_missionTime interval of one minute. CO may be measured in many ways, for example dm3/min (1 dm3 equals 1 litre).\n\n    Source: http://en.wikipedia.org/wiki/Cardiac_output\n*/\n\n// to limit the amount of complex calculations necessary, we take a set modifier to calculate Stroke Volume.\n#define MODIFIER_CARDIAC_OUTPUT     19.04761\n\nparams [\"_unit\"];\n\n((_unit getVariable [QGVAR(bloodVolume), 100])/MODIFIER_CARDIAC_OUTPUT) + ((_unit getVariable [QGVAR(heartRate), 80])/80-1);\n",
        "functionName": "ace_medical_fnc_getCardiacOutput"
      },
      {
        "fileName": "fnc_getHeartRateChange.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the change in the heart rate. Used for the vitals calculations. Calculated in one seconds.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * Change in heart Rate <NUMBER>\n *\n * Example:\n * [bob] call ACE_medical_fnc_getHeartRateChange\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n#define HEART_RATE_MODIFIER 0.02\n\nparams [\"_unit\"];\n\nprivate _hrIncrease = 0;\nif (!(_unit getVariable [QGVAR(inCardiacArrest),false])) then {\n    private _heartRate = _unit getVariable [QGVAR(heartRate), 80];\n    private _bloodLoss = [_unit] call FUNC(getBloodLoss);\n\n    private _adjustment = _unit getVariable [QGVAR(heartRateAdjustments), []];\n    {\n        _x params [\"_values\", \"_time\", \"_callBack\"];\n        if (abs _values > 0) then {\n            if (_time <= 0) then {\n                _time = 1;\n            };\n            private _change = (_values / _time);\n            _hrIncrease = _hrIncrease + _change;\n\n            if ( (_time - 1) <= 0) then {\n                 _time = 0;\n                 _adjustment set [_forEachIndex, ObjNull];\n                 [_unit] call _callBack;\n            } else {\n                _time = _time - 1;\n                _adjustment set [_forEachIndex, [_values - _change, _time]];\n            };\n        } else {\n            _adjustment set [_forEachIndex, ObjNull];\n            [_unit] call _callBack;\n        };\n    } forEach _adjustment;\n\n    _adjustment = _adjustment - [ObjNull];\n    _unit setVariable [QGVAR(heartRateAdjustments), _adjustment];\n\n    private _bloodVolume = _unit getVariable [QGVAR(bloodVolume), 100];\n    if (_bloodVolume > 75) then {\n        if (_bloodLoss > 0.0) then {\n            if (_bloodLoss < 0.5) then {\n                if (_heartRate < 126) then {\n                    _hrIncrease = _hrIncrease + 0.05;\n                };\n            } else {\n                if (_bloodLoss < 1) then {\n                    if (_heartRate < 161) then {\n                        _hrIncrease = _hrIncrease + 0.1;\n                    };\n                } else {\n                    if (_heartRate < 220) then {\n                        _hrIncrease = _hrIncrease + 0.15;\n                    };\n                };\n            };\n        } else {\n            // Stabalize it\n            if (_heartRate < (60 + round(random(10)))) then {\n                _hrIncrease = _hrIncrease + HEART_RATE_MODIFIER;\n            } else {\n                if (_heartRate > (77 + round(random(10)))) then {\n                    _hrIncrease = _hrIncrease - HEART_RATE_MODIFIER;\n                };\n            };\n        };\n    } else {\n        _hrIncrease = _hrIncrease - HEART_RATE_MODIFIER;\n    };\n};\n_hrIncrease\n",
        "functionName": "ace_medical_fnc_getHeartRateChange"
      },
      {
        "fileName": "fnc_getTriageStatus.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the triage status and information from a unit\n *\n * Arguments:\n * 0: The unit <OBJECT>\n *\n * Return Value:\n * 0: Name <STRING>\n * 1: Status ID <NUMBER>\n * 2: Color <ARRAY <NUMBER>>\n *\n * Example:\n * [bob] call ace_medical_fnc_getTriageStatus\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _status = _unit getVariable [QGVAR(triageLevel), -1];\nprivate _return = switch (_status) do {\n    case 1: {[localize LSTRING(Triage_Status_Minor), 1, [0, 0.5, 0, 0.9]]};\n    case 2: {[localize LSTRING(Triage_Status_Delayed), 2, [0.7, 0.5, 0, 0.9]]};\n    case 3: {[localize LSTRING(Triage_Status_Immediate), 3, [0.4, 0.07, 0.07, 0.9]]};\n    case 4: {[localize LSTRING(Triage_Status_Deceased), 4, [0, 0, 0, 0.9]]};\n    default {[localize LSTRING(Triage_Status_None), 0, [0, 0, 0, 0.9]]};\n};\n_return\n",
        "functionName": "ace_medical_fnc_getTriageStatus"
      },
      {
        "fileName": "fnc_getTypeOfDamage.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the type of damage based upon the projectile.\n *\n * Arguments:\n * 0: The projectile classname or object <STRING>\n *\n * Return Value:\n * Type of damage <STRING>\n *\n * Example:\n * [\"bullet\"] call ACE_medical_fnc_getTypeOfDamage\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_typeOfProjectile\"];\n\n\nif (_typeOfProjectile isKindOf \"BulletBase\") exitWith {\"bullet\"};\nif (_typeOfProjectile isKindOf \"ShotgunBase\") exitWith {\"bullet\"};\nif (_typeOfProjectile isKindOf \"GrenadeCore\") exitWith {\"grenade\"};\nif (_typeOfProjectile isKindOf \"TimeBombCore\") exitWith {\"explosive\"};\nif (_typeOfProjectile isKindOf \"MineCore\") exitWith {\"explosive\"};\nif (_typeOfProjectile isKindOf \"FuelExplosion\") exitWith {\"explosive\"};\nif (_typeOfProjectile isKindOf \"ShellBase\") exitWith {\"shell\"};\nif (_typeOfProjectile isKindOf \"RocketBase\") exitWith {\"explosive\"};\nif (_typeOfProjectile isKindOf \"MissileBase\") exitWith {\"explosive\"};\nif (_typeOfProjectile isKindOf \"LaserBombCore\") exitWith {\"explosive\"};\nif (_typeOfProjectile isKindOf \"BombCore\") exitWith {\"explosive\"};\nif (_typeOfProjectile isKindOf \"Grenade\") exitWith {\"grenade\"};\ntoLower _typeOfProjectile\n",
        "functionName": "ace_medical_fnc_getTypeOfDamage"
      },
      {
        "fileName": "fnc_getUnconsciousCondition.sqf",
        "content": "/*\n * Author: Glowbal\n * Get whatever or not a unit should be or stay unconscious.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * Should the unit stay unconscious? <BOOL>\n *\n * Example:\n * [bob] call ace_medical_fnc_getUnconsciousCondition\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (isnil QGVAR(unconsciousConditions)) then {\n    GVAR(unconsciousConditions) = [];\n};\n\nprivate _return = false;\n{\n    if ((_x isEqualType {}) && {([_unit] call _x)}) exitwith {\n       _return = true;\n    };\n} foreach GVAR(unconsciousConditions);\n\n_return\n",
        "functionName": "ace_medical_fnc_getUnconsciousCondition"
      },
      {
        "fileName": "fnc_handleBandageOpening.sqf",
        "content": "/*\n * Author: Glowbal\n * Handles the bandage of a patient.\n *\n * Arguments:\n * 0: The target <OBJECT>\n * 1: The impact <NUMBER>\n * 2: Selection part number <NUMBER>\n * 3: Injury index <NUMBER>\n * 4: Injury <ARRAY>\n * 5: Used Bandage type <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 5, 5, 1, [injury], \"bandage\"] call ACE_medical_fnc_handleBandageOpening\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_impact\", \"_part\", \"_injuryIndex\", \"_injury\", \"_bandage\"];\n\nprivate _classID = _injury select 1;\nprivate _className = GVAR(woundClassNames) select _classID;\n\n// default, just in case..\nprivate _reopeningChance = 0.1;\nprivate _reopeningMinDelay = 120;\nprivate _reopeningMaxDelay = 200;\n\n// Get the default values for the used bandage\nprivate _config = (ConfigFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Bandaging\");\nif (isClass (_config >> _bandage)) then {\n    _config = (_config >> _bandage);\n    _reopeningChance = getNumber (_config >> \"reopeningChance\");\n    _reopeningMinDelay = getNumber (_config >> \"reopeningMinDelay\");\n    _reopeningMaxDelay = getNumber (_config >> \"reopeningMaxDelay\") max _reopeningMinDelay;\n} else {\n    WARNING_2(\"No config for bandage [%1] config base [%2]\", _bandage, _config);\n};\n\nif (isClass (_config >> _className)) then {\n    private _woundTreatmentConfig = (_config >> _className);\n    if (isNumber (_woundTreatmentConfig >> \"reopeningChance\")) then {\n        _reopeningChance = getNumber (_woundTreatmentConfig >> \"reopeningChance\");\n    };\n    if (isNumber (_woundTreatmentConfig >> \"reopeningMinDelay\")) then {\n        _reopeningMinDelay = getNumber (_woundTreatmentConfig >> \"reopeningMinDelay\");\n    };\n    if (isNumber (_woundTreatmentConfig >> \"reopeningMaxDelay\")) then {\n        _reopeningMaxDelay = getNumber (_woundTreatmentConfig >> \"reopeningMaxDelay\") max _reopeningMinDelay;\n    };\n} else {\n    WARNING_2(\"No config for wound type [%1] config base [%2]\", _className, _config);\n};\nTRACE_5(\"configs\",_bandage,_className,_reopeningChance,_reopeningMinDelay,_reopeningMaxDelay);\n\nprivate _bandagedWounds = _target getVariable [QGVAR(bandagedWounds), []];\nprivate _injuryType = _injury select 1;\nprivate _exist = false;\nprivate _bandagedInjury = [];\n{\n    if ((_x select 1) == _injuryType && (_x select 2) == (_injury select 2)) exitwith {\n        _exist = true;\n        private _existingInjury = _x;\n        _existingInjury set [3, (_existingInjury select 3) + _impact];\n        _bandagedWounds set [_foreachIndex, _existingInjury];\n\n        _bandagedInjury = _existingInjury;\n    };\n} foreach _bandagedWounds;\n\nif !(_exist) then {\n    // [ID, classID, bodypart, percentage treated, bloodloss rate]\n    _bandagedInjury = [_injury select 0, _injury select 1, _injury select 2, _impact, _injury select 4];\n    _bandagedWounds pushback _bandagedInjury;\n};\n\n_target setVariable [QGVAR(bandagedWounds), _bandagedWounds, true];\n\nTRACE_1(\"\",_reopeningChance);\n// Check if we are ever going to reopen this\nif (random(1) <= _reopeningChance) then {\n    private _delay = _reopeningMinDelay + random(_reopeningMaxDelay - _reopeningMinDelay);\n    TRACE_1(\"Will open\",_delay);\n    [{\n        params [\"_target\", \"_impact\", \"_part\", \"_injuryIndex\", \"_injury\"];\n        TRACE_5(\"params\",_target,_impact,_part,_injuryIndex,_injury);\n\n        //if (alive _target) then {\n            private _openWounds = _target getVariable [QGVAR(openWounds), []];\n            if ((count _openWounds) - 1 < _injuryIndex) exitwith {};\n            private _selectedInjury = _openWounds select _injuryIndex;\n            if (_selectedInjury select 1 == _injury select 1 && (_selectedInjury select 2) == (_injury select 2)) then { // matching the IDs\n\n                private _bandagedWounds = _target getVariable [QGVAR(bandagedWounds), []];\n                private _exist = false;\n                private _injuryId = _injury select 1;\n                {\n                    if ((_x select 1) == _injuryId && (_x select 2) == (_injury select 2)) exitwith {\n                        _exist = true;\n                        private _existingInjury = _x;\n                        _existingInjury set [3, ((_existingInjury select 3) - _impact) max 0];\n                        _bandagedWounds set [_foreachIndex, _existingInjury];\n                    };\n                } foreach _bandagedWounds;\n\n                if (_exist) then {\n                    TRACE_2(\"Reopening Wound\",_bandagedWounds,_openWounds);\n                    _selectedInjury set [3, (_selectedInjury select 3) + _impact];\n                    _openWounds set [_injuryIndex, _selectedInjury];\n                    _target setVariable [QGVAR(bandagedWounds), _bandagedWounds, true];\n                    _target setVariable [QGVAR(openWounds), _openWounds, true];\n                };\n            };\n            // Otherwise something went wrong, we we don't reopen them..\n       //};\n    }, [_target, _impact, _part, _injuryIndex, +_injury], _delay] call CBA_fnc_waitAndExecute;\n};\n",
        "functionName": "ace_medical_fnc_handleBandageOpening"
      },
      {
        "fileName": "fnc_handleCollisionDamage.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: New Damage <SCALAR>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 2] call ACE_medical_fnc_handleCollisionDamage\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_newDamage\"];\n\nprivate _selection = \"body\";\n\nprivate _totalDamage = (_unit getHit _selection) + _newDamage;\n\n_unit setHit [_selection, _totalDamage];\n\nsystemChat format [\"collision: %1\", _this];\n",
        "functionName": "ace_medical_fnc_handleCollisionDamage"
      },
      {
        "fileName": "fnc_handleCreateLitter.sqf",
        "content": "/*\n * Author: Glowbal\n * handle Litter Create\n *\n * Arguments:\n * 0: Litter Class <STRING>\n * 1: Position <ARRAY>\n * 2: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"litter\", [2, 5, 6], bob] call ACE_medical_fnc_handleCreateLitter\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_litterClass\", \"_position\", \"_direction\"];\nTRACE_3(\"params\",_litterClass,_position,_direction);\n\n//IGNORE_PRIVATE_WARNING(_values);\n\nif (isNil QGVAR(allCreatedLitter)) then {\n    GVAR(allCreatedLitter) = [];\n    GVAR(litterPFHRunning) = false;\n};\n\nprivate _p3dFile = getText (configFile >> \"CfgVehicles\" >> _litterClass >> \"model\");\nif (_p3dFile == \"\") exitWith {TRACE_2(\"no model\",_litterClass,_p3dFile)};\n// createSimpleObject expects a path without the leading slash\nif ((_p3dFile select [0,1]) == \"\\\") then {_p3dFile = _p3dFile select [1];};\n\nprivate _litterObject = createSimpleObject [_p3dFile, [0,0,0]];\nTRACE_2(\"created\",_litterClass,_litterObject);\n_litterObject setDir _direction;\n_litterObject setPosATL _position;\n// Move the litter next frame to get rid of HORRIBLE spacing, fixes #1112\n[{ params [\"_object\", \"_pos\"]; _object setPosATL _pos; }, [_litterObject, _position]] call CBA_fnc_execNextFrame;\n\nprivate _maxLitterCount = getArray (configFile >> \"ACE_Settings\" >> QGVAR(litterSimulationDetail) >> \"_values\") select GVAR(litterSimulationDetail);\nif ((count GVAR(allCreatedLitter)) > _maxLitterCount) then {\n    // gank the first litter object, and spawn ours.\n    private _oldLitter = GVAR(allCreatedLitter) deleteAt 0;\n    {\n        deleteVehicle _x;\n    } forEach (_oldLitter select 1);\n};\n\nGVAR(allCreatedLitter) pushBack [CBA_missionTime, [_litterObject]];\n\nif(!GVAR(litterPFHRunning) && {GVAR(litterCleanUpDelay) > 0}) then {\n    // Start the litter cleanup loop\n    GVAR(litterPFHRunning) = true;\n    call FUNC(litterCleanupLoop);\n};\n",
        "functionName": "ace_medical_fnc_handleCreateLitter"
      },
      {
        "fileName": "fnc_handleDamage_advanced.sqf",
        "content": "/*\n * Author: Glowbal\n * Advanced HandleDamage EH function.\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter <OBJECT>\n * 4: Projectile <STRING>\n * 5: Hit part index of the hit point <NUMBER>\n * 6: Shooter? <OBJECT>\n * 7: Current damage to be returned <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"leg\",  2, kevin, \"bullet\", 2, kevin, 2] call ACE_medical_fnc_handleDamage_advanced\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfProjectile\", \"_hitPointNumber\", \"\", \"_newDamage\"];\n\n// For burning damage we will get a ton of very small hits of damage; they are too small to create any wounds\n// Save them up in a variable and run when it is over a noticable amount\n\nif ((_typeOfProjectile == \"\") && {_newDamage < 0.15} && {\n    _newDamage = _newDamage + (_unit getVariable [QGVAR(trivialDamage), 0]);\n    if (_newDamage > 0.15) then {\n        // if the new sum is large enough, reset variable and continue with it added in\n        _unit setVariable [QGVAR(trivialDamage), 0];\n        false\n    } else {\n        // otherwise just save the new sum into the variable and exit\n        _unit setVariable [QGVAR(trivialDamage), _newDamage];\n        true // exit\n    };\n}) exitWith {};\n\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\nif (_part < 0) exitWith {};\n\nprivate _hitPoints = [\"HitHead\", \"HitBody\", \"HitLeftArm\", \"HitRightArm\", \"HitLeftLeg\", \"HitRightLeg\"];\n// Sorting out the damage\nprivate _damageBodyParts = _unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\n\n_damageBodyParts set [_part, (_damageBodyParts select _part) + _newDamage];\n_unit setVariable [QGVAR(bodyPartStatus), _damageBodyParts, true];\n\nprivate _typeOfDamage = [_typeOfProjectile] call FUNC(getTypeOfDamage);\n\n[_unit, _selectionName, _newDamage, _typeOfProjectile, _typeOfDamage] call FUNC(handleDamage_assignWounds);\n\n// TODO Disabled until implemented fully\n//if (GVAR(enableAirway)) then {\n//    [_unit,_selectionName,_newDamage,_sourceOfDamage, _typeOfDamage] call FUNC(handleDamage_airway);\n//};\n//if (GVAR(enableFractures)) then {\n//    [_unit,_selectionName,_newDamage,_sourceOfDamage, _typeOfDamage] call FUNC(handleDamage_fractures);\n//};\n//if (GVAR(enableInternalBleeding)) then {\n//    [_unit,_selectionName,_newDamage,_sourceOfDamage, _typeOfDamage] call FUNC(handleDamage_internalInjuries);\n//};\n\nif (alive _unit && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\n    // If it reaches this, we can assume that the hit did not kill this unit, as this function is called 3 frames after the damage has been passed.\n    if ([_unit, _part, if (_part > 1) then {_newDamage * 1.3} else {_newDamage * 2}] call FUNC(determineIfFatal)) then {\n        [_unit] call FUNC(setUnconscious);\n    };\n};\n",
        "functionName": "ace_medical_fnc_handleDamage_advanced"
      },
      {
        "fileName": "fnc_handleDamage_advancedSetDamage.sqf",
        "content": "/*\n * Author: Glowbal\n * Sets the hitpoint damage for au nit to the correct values\n *\n * Arguments:\n * 0: Unit for which the hitpoint damage will be sorted out <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_handleDamage_advancedSetDamage\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!local _unit) exitWith {};\n\n// [\"head\", \"body\", \"hand_l\", \"hand_r\", \"leg_l\", \"leg_r\"]\nprivate _bodyStatus = _unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\n\n_bodyStatus params [\"_headDamage\", \"_torsoDamage\", \"_handsDamageR\", \"_handsDamageL\", \"_legsDamageR\", \"_legsDamageL\"];\n\n_unit setHitPointDamage [\"hitHead\", _headDamage min 0.95];\n_unit setHitPointDamage [\"hitBody\", _torsoDamage min 0.95];\n_unit setHitPointDamage [\"hitHands\", (_handsDamageR + _handsDamageL) min 0.95];\n_unit setHitPointDamage [\"hitLegs\", (_legsDamageR + _legsDamageL) min 0.95];\n\nif (_bodyStatus isEqualTo [0,0,0,0,0,0]) then {\n    _unit setDamage 0;\n};\n",
        "functionName": "ace_medical_fnc_handleDamage_advancedSetDamage"
      },
      {
        "fileName": "fnc_handleDamage_airway.sqf",
        "content": "/*\n * Author: Glowbal\n * Handling of the airway injuries upon the handleDamage eventhandler.\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter or source of the damage <OBJECT>\n * 4: Type of the damage done <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"leg\", 2, kevin, \"shot\"] call ACE_medical_fnc_airway\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfDamage\"];\nprivate _bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\n\nif (_bodyPartn > 1) exitWith {};\n\nif (_amountOfDamage > 0.5) then {\n    if (random(1) >= 0.8) then {\n        if !(_unit getVariable[QGVAR(airwayCollapsed), false]) then {\n            _unit setVariable [QGVAR(airwayCollapsed), true, true];\n        };\n    };\n};\n",
        "functionName": "ace_medical_fnc_handleDamage_airway"
      },
      {
        "fileName": "fnc_handleDamage_caching.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Glowbal\n * Cache a handleDamage call to execute it 3 frames later\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter <OBJECT>\n * 4: Projectile <STRING>\n * 5: HitPointIndex (-1 for structural) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"leg\", 2, kevin, \"bullet\", -1] call ACE_medical_fnc_handleDamage_caching\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_selectionName\", \"_damage\", \"_source\", \"_projectile\", \"_hitPointIndex\"];\n\nprivate _hitSelections = GVAR(SELECTIONS);\n\n// Calculate change in damage - use getHitIndex because selection is translated (hitdiaphragm->body)\nprivate _newDamage = _damage - (damage _unit);\nif (_hitPointIndex >= 0) then {_newDamage = _damage - (_unit getHitIndex _hitPointIndex)};\n\nTRACE_7(\"ACE_DEBUG: HandleDamage_Caching Called\",_unit, _selectionName, _damage, _source, _projectile,_hitPointIndex,_newDamage);\n\n// Check for vehicle crash\nprivate _vehicle = vehicle _unit;\nif ((_vehicle != _unit) && {!(_vehicle isKindOf \"StaticWeapon\")} && {_source in [objNull, driver _vehicle, _vehicle]} && {_projectile == \"\"} && {_selectionName == \"\"}) then {\n    if (GVAR(enableVehicleCrashes)) then {\n        _selectionName = selectRandom _hitSelections;\n        _projectile = \"vehiclecrash\";\n        _this set [1, _selectionName];\n        _this set [4, _projectile];\n    };\n};\n\n// Handle falling damage\nprivate _impactVelocity = (velocity _unit) select 2;\nif (_impactVelocity < -5 && {_vehicle == _unit}) then {\n     TRACE_1(\"Starting isFalling\", time);\n    _unit setVariable [QGVAR(isFalling), true];\n    _unit setVariable [QGVAR(impactVelocity), _impactVelocity];\n} else {\n    if ((_unit getVariable [QGVAR(isFalling), false]) && {diag_frameno > (_unit getVariable [QGVAR(frameNo_damageCaching), -3]) + 2}) then {\n        TRACE_1(\"Ending isFalling\", time);\n        _unit setVariable [QGVAR(isFalling), false];\n    };\n};\n\nif (_unit getVariable [QGVAR(isFalling), false]) then {\n    if !(_selectionName in [\"\", \"leg_l\", \"leg_r\"]) then {\n        if (_selectionName == \"body\") then {\n            _newDamage = _newDamage * abs(_unit getVariable [QGVAR(impactVelocity), _impactVelocity]) / 50;\n        } else {\n            _newDamage = _newDamage * 0.5;\n        };\n        if (_newDamage < 0.075) then {_newDamage = 0;}; //Filter minor falling damage to non-leg hitpoints\n    } else {\n        if (_selectionName == \"\") then {\n            _selectionName = selectRandom [\"leg_l\", \"leg_r\"];\n            _this set [1, _selectionName];\n        };\n        _newDamage = _newDamage * 0.7;\n    };\n    _projectile = \"falling\";\n    _this set [4, \"falling\"];\n};\n\n// Finished with the current frame, reset variables\n// Note: sometimes handleDamage spans over 2 or even 3 frames.\nif (diag_frameno > (_unit getVariable [QGVAR(frameNo_damageCaching), -3]) + 2) then {\n    _unit setVariable [QGVAR(frameNo_damageCaching), diag_frameno];\n\n    // handle the cached damages 3 frames later\n    [{\n        params [\"_args\", \"_idPFH\"];\n        _args params [\"_unit\", \"_frameno\"];\n        if (diag_frameno >= _frameno + 2) then {\n            _unit setDamage 0;\n            private _cache_params = _unit getVariable [QGVAR(cachedHandleDamageParams), []];\n            private _cache_damages = _unit getVariable QGVAR(cachedDamages);\n            {\n                (_x + [_cache_damages select _forEachIndex]) call FUNC(handleDamage_advanced);\n            } forEach _cache_params;\n            [_unit] call FUNC(handleDamage_advancedSetDamage);\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        };\n    }, 0, [_unit, diag_frameno] ] call CBA_fnc_addPerFrameHandler;\n\n    _unit setVariable [QGVAR(cachedProjectiles), []];\n    _unit setVariable [QGVAR(cachedHitPoints), []];\n    _unit setVariable [QGVAR(cachedDamages), []];\n    _unit setVariable [QGVAR(cachedHandleDamageParams), []];\n};\n\n// Caching of the damage events\nif (_selectionName != \"\") then {\n    private _cache_projectiles = _unit getVariable QGVAR(cachedProjectiles);\n    private _index = _cache_projectiles find _projectile;\n\n    // Check if the current projectile has already been handled once\n    if (_index >= 0 && {_projectile != \"falling\"}) exitWith {\n\n        private _cache_damages = _unit getVariable QGVAR(cachedDamages);\n        private _otherDamage = (_cache_damages select _index); // Find the previous damage this projectile has done\n\n        // Take the highest damage of the two\n        if (_newDamage > _otherDamage) then {\n            private _cache_params = _unit getVariable QGVAR(cachedHandleDamageParams);\n            private _cache_hitpoints = _unit getVariable QGVAR(cachedHitPoints);\n\n            // Restore the damage before the previous damage was processed\n            private _hitPoint = _cache_hitpoints select _index;\n            private _restore = ((_unit getHitIndex _hitPoint) - _otherDamage) max 0;\n            _unit setHitIndex [_hitPoint, _restore];\n\n            _cache_hitpoints set [_index, _hitPointIndex];\n            _cache_damages set [_index, _newDamage];\n            _cache_params set[_index, _this];\n\n            _unit setVariable [QGVAR(cachedProjectiles), _cache_projectiles];\n            _unit setVariable [QGVAR(cachedHitPoints), _cache_hitpoints];\n            _unit setVariable [QGVAR(cachedDamages), _cache_damages];\n            _unit setVariable [QGVAR(cachedHandleDamageParams), _cache_params];\n        };\n    };\n\n    private _cache_hitpoints = _unit getVariable QGVAR(cachedHitPoints);\n    private _cache_damages = _unit getVariable QGVAR(cachedDamages);\n    private _cache_params = _unit getVariable QGVAR(cachedHandleDamageParams);\n\n    // This is an unhandled projectile\n    _cache_projectiles pushBack _projectile;\n    _cache_hitpoints pushBack _hitPointIndex;\n    _cache_damages pushBack _newDamage;\n    _cache_params pushBack _this;\n\n    // Store the new cached values\n    _unit setVariable [QGVAR(cachedProjectiles), _cache_projectiles];\n    _unit setVariable [QGVAR(cachedHitPoints), _cache_hitpoints];\n    _unit setVariable [QGVAR(cachedDamages), _cache_damages];\n    _unit setVariable [QGVAR(cachedHandleDamageParams), _cache_params];\n};\n\nTRACE_8(\"ACE_DEBUG: HandleDamage_Caching\",_unit, _newDamage, _cache_params, _cache_damages, _unit getVariable QGVAR(cachedProjectiles), _unit getVariable QGVAR(cachedHitPoints), _unit getVariable QGVAR(cachedDamages), _unit getVariable QGVAR(cachedHandleDamageParams));\n\n_newDamage\n",
        "functionName": "ace_medical_fnc_handleDamage_caching"
      },
      {
        "fileName": "fnc_handleDamage_fractures.sqf",
        "content": "/*\n * Author: Glowbal\n * Handling of the fracture injuries upon the handleDamage eventhandler.\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter or source of the damage <OBJECT>\n * 4: Type of the damage done <STRING>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [bob, \"leg\", 2, kevin, \"shot\"] call ACE_medical_fnc_handleDamage_fractures\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfDamage\"];\nprivate _bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\n\nprivate _fractureType = 1;\nif (_amountOfDamage > 0.05) then {\n\n    // TODO specify fractures based off typeOfInjury details better.\n    switch (_typeOfDamage) do {\n        case \"Bullet\": {\n            _fractureType = round(random(2));\n        };\n        case \"Grenade\": {\n            _fractureType = round(random(2));\n            if (_fractureType < 1) then {\n                _fractureType = 1;\n            };\n        };\n        case \"Explosive\": {\n            _fractureType = round(random(2));\n            if (_fractureType < 1) then {\n                _fractureType = 1;\n            };\n        };\n        case \"Shell\": {\n            _fractureType = round(random(2));\n            if (_fractureType < 1) then {\n                _fractureType = 1;\n            };\n        };\n        case \"Unknown\": {\n            _fractureType = round(random(1));\n        };\n        case \"VehicleCrash\": {\n            _fractureType = round(random(0));\n        };\n        default {\n            _fractureType = round(random(1));\n        };\n    };\n\n    private _fractures = _unit getVariable[QGVAR(fractures), []];\n    private _fractureID = 1;\n    private _amountOf = count _fractures;\n    if (_amountOf > 0) then {\n        _fractureID = (_fractures select (_amountOf - 1) select 0) + 1;\n    };\n    _fractures pushBack [_fractureID, _fractureType, _bodyPartn, 1 /* percentage treated */];\n    _unit setVariable [QGVAR(fractures), _fractures, true];\n};\n",
        "functionName": "ace_medical_fnc_handleDamage_fractures"
      },
      {
        "fileName": "fnc_handleDamage_internalInjuries.sqf",
        "content": "/*\n * Author: Glowbal\n * Handling of the internal injuries upon the handleDamage eventhandler.\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter or source of the damage <OBJECT>\n * 4: Type of the damage done <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"leg\", 2, kevin, \"shot\"] call ACE_medical_fnc_handleDamage_internalInjuries\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfDamage\"];\nprivate _bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\n\n// TODO implement internal injuries\n",
        "functionName": "ace_medical_fnc_handleDamage_internalInjuries"
      },
      {
        "fileName": "fnc_handleDamage_wounds.sqf",
        "content": "/*\n * Author: Glowbal\n * Handling of the open wounds & injuries upon the handleDamage eventhandler.\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter or source of the damage <OBJECT>\n * 4: Type of the damage done <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"leg\", 2, kevin, \"shot\"] call ACE_medical_fnc_handleDamage_wounds\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_selectionName\", \"_damage\", \"_typeOfProjectile\", \"_typeOfDamage\"];\nTRACE_6(\"ACE_DEBUG: HandleDamage Called\",_unit, _selectionName, _damage, _shooter, _typeOfProjectile,_typeOfDamage);\n\nif (_typeOfDamage == \"\") then {_typeOfDamage = \"unknown\";};\n\n// Administration for open wounds and ids\nprivate _openWounds = _unit getVariable[QGVAR(openWounds), []];\nprivate _woundID = _unit getVariable[QGVAR(lastUniqueWoundID), 1];\n\nprivate _extensionOutput = \"ace_medical\" callExtension format [\"HandleDamageWounds,%1,%2,%3,%4\", _selectionName, _damage, _typeOfDamage, _woundID];\n\nprivate _painToAdd = 0;\nprivate _woundsCreated = [];\n\ncall compile _extensionOutput;\n{\n    _x params [\"\", \"_toAddClassID\", \"_bodyPartNToAdd\"];\n    _foundIndex = -1;\n    {\n        _x params [\"\", \"_compareId\", \"_comparyBodyPartN\"];\n        // Check if we have an id of the given class on the given bodypart already\n        if (_compareId == _toAddClassID && {_comparyBodyPartN == _bodyPartNToAdd}) exitWith {\n            _foundIndex = _forEachIndex;\n        };\n    } forEach _openWounds;\n\n    if (_foundIndex < 0) then {\n        // Since it is a new injury, we will have to add it to the open wounds array to store it\n        _openWounds pushBack _x;\n    } else {\n        // We already have one of these, so we are just going to increase the number that we have of it with a new one.\n        private _injury = _openWounds select _foundIndex;\n        _injury set [3, (_injury select 3) + 1];\n    };\n} forEach _woundsCreated;\n\n_unit setVariable [QGVAR(openWounds), _openWounds, true];\n\n// Only update if new wounds have been created\nif (count _woundsCreated > 0) then {\n    _unit setVariable [QGVAR(lastUniqueWoundID), _woundID, true];\n};\n\nprivate _painLevel = _unit getVariable [QGVAR(pain), 0];\n_unit setVariable [QGVAR(pain), _painLevel + _painToAdd];\nTRACE_6(\"ACE_DEBUG: HandleDamage_WoundsOLD\",_unit, _painLevel, _painToAdd, _unit getVariable QGVAR(pain), _unit getVariable QGVAR(openWounds),_woundsCreated);\n",
        "functionName": "ace_medical_fnc_handleDamage_wounds"
      },
      {
        "fileName": "fnc_handleDamage_woundsOld.sqf",
        "content": "/*\n * Author: Glowbal\n * Handling of the open wounds & injuries upon the handleDamage eventhandler.\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter or source of the damage <OBJECT>\n * 4: Type of the damage done <STRING>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [bob, \"leg\", 1, kevin, \"shot\"] call ACE_medical_fnc_handleDamage_woundsOld\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_selectionName\", \"_damage\", \"_typeOfProjectile\", \"_typeOfDamage\"];\nTRACE_6(\"ACE_DEBUG: HandleDamage_WoundsOLD Called\",_unit, _selectionName, _damage, _shooter, _typeOfProjectile,_typeOfDamage);\n\n// Convert the selectionName to a number and ensure it is a valid selection.\nprivate _bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\nif (_bodyPartn < 0) exitWith {};\n\n// Get the injury type information. Format: [typeDamage thresholds, selectionSpecific, woundTypes]\nprivate _injuryTypeInfo = missionNamespace getVariable [format[QGVAR(woundInjuryType_%1), _typeOfDamage],[[], false, []]];\n\n// This are the available injuries for this damage type. Format [[classtype, selections, bloodloss, minimalDamage, pain], ..]\nprivate _allInjuriesForDamageType = _injuryTypeInfo select 2;\n// It appears we are dealing with an unknown type of damage.\n\nif (count _allInjuriesForDamageType == 0) then {\n    // grabbing the configuration for unknown damage type\n    _injuryTypeInfo = missionNamespace getVariable [QGVAR(woundInjuryType_unknown),[[], false, []]];\n    _allInjuriesForDamageType = _injuryTypeInfo select 2;\n};\n\n// find the available injuries for this damage type and damage amount\nprivate _highestPossibleSpot = -1;\nprivate _highestPossibleDamage = -1;\nprivate _allPossibleInjuries = [];\n{\n    private _damageLevels = _x select 4;\n    _damageLevels params [\"_minDamage\",\"_maxDamage\"];\n\n    // Check if the damage is higher as the min damage for the specific injury\n    if (_damage >= _minDamage && {_damage <= _maxDamage || _maxDamage < 0}) then {\n        //private _classType = _x select 0;\n        private _selections = _x select 1;\n        //private _bloodLoss = _x select 2;\n        //private _pain = _x select 3;\n\n        // Check if the injury can be applied to the given selection name\n        if (\"All\" in _selections || _selectionName in _selections) then {\n\n            // Find the wound which has the highest minimal damage, so we can use this later on for adding the correct injuries\n            if (_minDamage > _highestPossibleDamage) then {\n                _highestPossibleSpot = _forEachIndex;\n                _highestPossibleDamage = _minDamage;\n            };\n\n            // Store the valid possible injury for the damage type, damage amount and selection\n            _allPossibleInjuries pushBack _x;\n        };\n    };\n} forEach _allInjuriesForDamageType;\n\n// No possible wounds available for this damage type or damage amount.\nif (_highestPossibleSpot < 0) exitWith {};\n\n// Administration for open wounds and ids\nprivate _openWounds = _unit getVariable[QGVAR(openWounds), []];\nprivate _woundID = _unit getVariable[QGVAR(lastUniqueWoundID), 1];\n\nprivate _painToAdd = 0;\nprivate _woundsCreated = [];\n{\n    if (_x select 0 <= _damage) exitWith {\n        for \"_i\" from 0 to ((_x select 1)-1) do {\n\n            // Find the injury we are going to add. Format [ classID, allowdSelections, bloodloss, painOfInjury, minimalDamage]\n            private _toAddInjury =  if (random(1) >= 0.85) then {_allInjuriesForDamageType select _highestPossibleSpot} else {selectRandom _allPossibleInjuries};\n            private _toAddClassID = _toAddInjury select 0;\n            private _foundIndex = -1;\n\n            private _bodyPartNToAdd = if (_injuryTypeInfo select 1) then {_bodyPartn} else {floor(random(6))};\n            // If the injury type is selection part specific, we will check if one of those injury types already exists and find the spot for it..\n            if ((_injuryTypeInfo select 1)) then {\n                {\n                    // Check if we have an id of the given class on the given bodypart already\n                    if (_x select 1 == _toAddClassID && {_x select 2 == _bodyPartNToAdd}) exitWith {\n                        _foundIndex = _forEachIndex;\n                    };\n                } forEach _openWounds;\n            };\n\n            private _injury = [];\n            if (_foundIndex < 0) then {\n                // Create a new injury. Format [ID, classID, bodypart, percentage treated, bloodloss rate]\n                _injury = [_woundID, _toAddInjury select 0, _bodyPartNToAdd, 1, _toAddInjury select 2];\n\n                // Since it is a new injury, we will have to add it to the open wounds array to store it\n                _openWounds pushBack _injury;\n\n                // New injuries will also increase the wound ID\n                _woundID = _woundID + 1;\n            } else {\n                // We already have one of these, so we are just going to increase the number that we have of it with a new one.\n                _injury = _openWounds select _foundIndex;\n                _injury set [3, (_injury select 3) + 1];\n            };\n            // Store the injury so we can process it later correctly.\n            _woundsCreated pushBack _injury;\n\n            // Collect the pain that is caused by this injury\n            _painToAdd = _painToAdd + (_toAddInjury select 3);\n        };\n    };\n} forEach (_injuryTypeInfo select 0); // forEach damage thresholds\n\n_unit setVariable [QGVAR(openWounds), _openWounds, true];\n\n// Only update if new wounds have been created\nif (count _woundsCreated > 0) then {\n    _unit setVariable [QGVAR(lastUniqueWoundID), _woundID, true];\n};\n\nprivate _painLevel = _unit getVariable [QGVAR(pain), 0];\n_unit setVariable [QGVAR(pain), _painLevel + _painToAdd];\nTRACE_6(\"ACE_DEBUG: HandleDamage_WoundsOLD\",_unit, _painLevel, _painToAdd, _unit getVariable QGVAR(pain), _unit getVariable QGVAR(openWounds),_woundsCreated);\n",
        "functionName": "ace_medical_fnc_handleDamage_woundsOld"
      },
      {
        "fileName": "fnc_handleDamage.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Glowbal, commy2\n * Main HandleDamage EH function.\n *\n * Arguments:\n * 0: Unit That Was Hit <OBJECT>\n * 1: Name Of Hit Selection <STRING>\n * 2: Amount Of Damage <NUMBER>\n * 3: Shooter <OBJECT>\n * 4: Projectile <OBJECT, STRING>\n * 5: HitPointIndex (-1 for structural) <NUMBER>\n * 6: Shooter <OBJECT>\n *\n * Return Value:\n * Damage To Be Inflicted <NUMBER>\n *\n * Example:\n * [bob, \"leg\", 2, kevin, \"bullet\", -1, kevin] call ACE_medical_fnc_handleDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n_this = _this select [0, 7];\nparams [\"_unit\", \"_selection\", \"_damage\", \"_shooter\", \"_projectile\", \"_hitPointIndex\"];\nTRACE_5(\"ACE_DEBUG: HandleDamage Called\",_unit, _selection, _damage, _shooter, _projectile);\n\n// bug, apparently can fire for remote units in special cases\nif !(local _unit) exitWith {\n    TRACE_2(\"ACE_DEBUG: HandleDamage on remote unit!\",_unit, isServer);\n    nil\n};\n\n// bug, assumed fixed, @todo excessive testing, if nothing happens remove\nif (_projectile isEqualType objNull) then {\n    _projectile = typeOf _projectile;\n    _this set [4, _projectile];\n};\n\nTRACE_3(\"ACE_DEBUG: HandleDamage\",_selection,_damage,_unit);\n\n// If damage is in dummy hitpoints, \"hands\" and \"legs\", don't change anything\nif (_selection == \"hands\") exitWith {_unit getHit \"hands\"};\nif (_selection == \"legs\") exitWith {_unit getHit \"legs\"};\nif (_selection == \"arms\") exitWith {_unit getHit \"arms\"};\n\n// Deal with the new hitpoint and selection names introduced with Arma v1.50 and later.\n// This will convert new selection names into selection names that the medical system understands\n// TODO This should be cleaned up when we revisit the medical system at a later stage\n// and instead we should deal with the new hitpoints directly\n_selection = [_unit, _selection, _hitPointIndex] call FUNC(translateSelections);\n_this set [1, _selection]; // ensure that the parameters are set correctly\n\n// If the damage is being weird, we just tell it to fuck off. Ignore: \"hands\", \"legs\", \"arms\"\nif (_selection != \"\" && {!(_selection in GVAR(SELECTIONS))}) exitWith {0};\n\n// Exit if we disable damage temporarily\nif !(_unit getVariable [QGVAR(allowDamage), true]) exitWith {\n    TRACE_3(\"ACE_DEBUG: HandleDamage damage disabled.\",_selection,damage _unit,_unit);\n    if (_selection == \"\") then {\n        damage _unit\n    } else {\n        _unit getHit _selection\n    };\n};\n\n// Get return damage\nprivate _damageReturn = _damage;\n\nprivate _newDamage = _this call FUNC(handleDamage_caching);\n// handleDamage_caching may have modified the projectile string\nprivate _typeOfDamage = [_projectile] call FUNC(getTypeOfDamage);\n\nTRACE_3(\"ACE_DEBUG: HandleDamage caching new damage\",_selection,_newDamage,_unit);\n\nprivate _typeIndex = (GVAR(allAvailableDamageTypes) find _typeOfDamage);\nprivate _minLethalDamage = if (_typeIndex >= 0) then {\n    GVAR(minLethalDamages) select _typeIndex\n} else {\n    0.01\n};\n\nif (!isNull _shooter) then {\n    _unit setvariable [QGVAR(lastDamageSource), _shooter, false];\n};\n\nprivate _vehicle = vehicle _unit;\nprivate _effectiveSelectionName = _selection;\nif ((_vehicle != _unit) && {!(_vehicle isKindOf \"StaticWeapon\")} && {_shooter in [objNull, driver _vehicle, _vehicle]} && {_projectile == \"\"} && {_selection == \"\"}) then {\n    if (GVAR(enableVehicleCrashes)) then {\n        _effectiveSelectionName = _this select 1; //pull random selection from HDC\n    };\n};\n\nif ((_minLethalDamage <= _newDamage) && {[_unit, [_effectiveSelectionName] call FUNC(selectionNameToNumber), _newDamage] call FUNC(determineIfFatal)}) then {\n    if ((_unit getVariable [QGVAR(preventInstaDeath), GVAR(preventInstaDeath)])) exitwith {\n        _damageReturn = 0.9;\n    };\n    if ([_unit, false, true] call FUNC(setDead)) then {\n        _damageReturn = 1;\n    } else {\n        _damageReturn = _damageReturn min 0.89;\n    };\n} else {\n    _damageReturn = _damageReturn min 0.89;\n};\n\n// Start the loop that tracks the unit vitals\n[_unit] call FUNC(addVitalLoop);\n\nif (_unit getVariable [QGVAR(preventInstaDeath), GVAR(preventInstaDeath)]) exitWith {\n    private _delayedUnconsicous = false;\n    if (_vehicle != _unit and {damage _vehicle >= 1}) then {\n        [_unit] call EFUNC(common,unloadPerson);\n        _delayedUnconsicous = true;\n    };\n\n    if (_damageReturn >= 0.9 && {_selection in [\"\", \"head\", \"body\"]}) exitWith {\n        if (_unit getVariable [\"ACE_isUnconscious\", false]) exitwith {\n            [_unit, false, true] call FUNC(setDead);\n            0.89;\n        };\n        if (_delayedUnconsicous) then {\n            [{\n                [_this select 0, true] call FUNC(setUnconscious);\n            }, [_unit], 0.7] call CBA_fnc_waitAndExecute;\n        } else {\n            [{\n                [_this select 0, true] call FUNC(setUnconscious);\n            }, [_unit]] call CBA_fnc_execNextFrame;\n        };\n        0.89;\n    };\n    _damageReturn min 0.89;\n};\n\nif (((_unit getVariable [QGVAR(enableRevive), GVAR(enableRevive)]) > 0) && {_damageReturn >= 0.9} && {_selection in [\"\", \"head\", \"body\"]}) exitWith {\n    if (vehicle _unit != _unit and {damage (vehicle _unit) >= 1}) then {\n        [_unit] call EFUNC(common,unloadPerson);\n    };\n    [_unit, false, true] call FUNC(setDead);\n    0.89;\n};\n\nTRACE_3(\"ACE_DEBUG: HandleDamage damage return\",_selection,_damageReturn,_unit);\n\n_damageReturn\n",
        "functionName": "ace_medical_fnc_handleDamage"
      },
      {
        "fileName": "fnc_handleInit.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Called when a unit is initialized via XEH_init\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_handleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n_unit addEventHandler [\"HandleDamage\", {_this call FUNC(handleDamage)}];\n\nif (local _unit) then {\n    if (!EGVAR(common,settingsInitFinished)) exitWith {\n        EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(init), [_unit]];\n    };\n    [_unit] call FUNC(init);\n};\n",
        "functionName": "ace_medical_fnc_handleInit"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: Glowbal\n * Called when a unit is killed\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_handleKilled\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nif (!local _unit) exitWith {};\n\n_unit setVariable [QGVAR(pain), 0];\nif (GVAR(level) >= 2) then {\n    _unit setVariable [QGVAR(heartRate), 0];\n    _unit setVariable [QGVAR(bloodPressure), [0, 0]];\n    _unit setVariable [QGVAR(airwayStatus), 0];\n};\n",
        "functionName": "ace_medical_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handleLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * Called when a unit switched locality\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Is local <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true] call ACE_medical_fnc_handleLocal\n *\n * Public: No\n */\n\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_local\"];\nif (_local) then {\n    // If the unit had a loop tracking its vitals, restart it locally\n    if (_unit getVariable[QGVAR(addedToUnitLoop),false]) then {\n        [_unit, true] call FUNC(addVitalLoop);\n    };\n\n    if ((_unit getVariable [\"ACE_isUnconscious\",false]) && {count (_unit getVariable [QGVAR(unconsciousArguments), []]) >= 6}) then {\n        private _arguments = (_unit getVariable [QGVAR(unconsciousArguments), []]);\n        _arguments set [2, CBA_missionTime];\n\n        [DFUNC(unconsciousPFH), 0.1, _arguments ] call CBA_fnc_addPerFrameHandler;\n\n        _unit setVariable [QGVAR(unconsciousArguments), nil, true];\n    };\n};\n",
        "functionName": "ace_medical_fnc_handleLocal"
      },
      {
        "fileName": "fnc_handleRespawn.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Called when a unit is Respawned\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_handleRespawn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// reset all variables. @todo GROUP respawn?\n[_unit] call FUNC(init);\n\n// Reset captive status for respawning unit\nif (!(_unit getVariable [\"ACE_isUnconscious\", false])) then {\n    [_unit, \"setCaptive\", \"ace_unconscious\", false] call EFUNC(common,statusEffect_set);\n};\n\n// Remove maximum unconsciousness time handler\n_maxUnconHandle = _unit getVariable [QGVAR(maxUnconTimeHandle), -1];\nif (_maxUnconHandle > 0) then {\n    [_maxUnconHandle] call CBA_fnc_removePerFrameHandler;\n};\n",
        "functionName": "ace_medical_fnc_handleRespawn"
      },
      {
        "fileName": "fnc_handleUnitVitals.sqf",
        "content": "/*\n * Author: Glowbal\n * Updates the vitals. Is expected to be called every second.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_handleUnitVitals\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_interval\"];\nTRACE_3(\"ACE_DEBUG\",_unit,_interval,_unit);\nif (_interval == 0) exitWith {};\n\nprivate _lastTimeValuesSynced = _unit getVariable [QGVAR(lastMomentValuesSynced), 0];\nprivate _syncValues = (CBA_missionTime - _lastTimeValuesSynced >= (10 + floor(random(10))) && GVAR(keepLocalSettingsSynced));\nif (_syncValues) then {\n    _unit setVariable [QGVAR(lastMomentValuesSynced), CBA_missionTime];\n};\n\nprivate _bloodVolume = (_unit getVariable [QGVAR(bloodVolume), 100]) + ([_unit, _syncValues] call FUNC(getBloodVolumeChange));\n_bloodVolume = _bloodVolume max 0;\n\n_unit setVariable  [QGVAR(bloodVolume), _bloodVolume, _syncValues];\n\nTRACE_3(\"ACE_DEBUG\",_bloodVolume,_syncValues,_unit);\n// Set variables for synchronizing information across the net\nif (_bloodVolume < 100) then {\n    if (_bloodVolume < 90) then {\n        TRACE_4(\"ACE_DEBUG\",_bloodVolume,_unit getVariable QGVAR(hasLostBlood),_syncValues,_unit);\n        if (_unit getVariable [QGVAR(hasLostBlood), 0] != 2) then {\n            _unit setVariable [QGVAR(hasLostBlood), 2, true];\n        };\n    } else {\n        TRACE_4(\"ACE_DEBUG\", _bloodVolume,_unit getVariable QGVAR(hasLostBlood),_syncValues,_unit);\n        if (_unit getVariable [QGVAR(hasLostBlood), 0] != 1) then {\n            _unit setVariable [QGVAR(hasLostBlood), 1, true];\n        };\n    };\n} else {\n    TRACE_4(\"ACE_DEBUG\",_bloodVolume,_unit getVariable QGVAR(hasLostBlood),_syncValues,_unit);\n    if (_unit getVariable [QGVAR(hasLostBlood), 0] != 0) then {\n        _unit setVariable [QGVAR(hasLostBlood), 0, true];\n    };\n};\n\nTRACE_3(\"ACE_DEBUG\",[_unit] call FUNC(getBloodLoss),_unit getVariable QGVAR(isBleeding),_unit);\nif (([_unit] call FUNC(getBloodLoss)) > 0) then {\n    if !(_unit getVariable [QGVAR(isBleeding), false]) then {\n        _unit setVariable [QGVAR(isBleeding), true, true];\n    };\n} else {\n    if (_unit getVariable [QGVAR(isBleeding), false]) then {\n        _unit setVariable [QGVAR(isBleeding), false, true];\n    };\n};\n\nprivate _painStatus = _unit getVariable [QGVAR(pain), 0];\nTRACE_4(\"ACE_DEBUG\",_painStatus,_unit getVariable QGVAR(hasPain),_unit getVariable QGVAR(painSuppress),_unit);\nif (_painStatus > (_unit getVariable [QGVAR(painSuppress), 0])) then {\n    if !(_unit getVariable [QGVAR(hasPain), false]) then {\n        _unit setVariable [QGVAR(hasPain), true, true];\n    };\n} else {\n    if (_unit getVariable [QGVAR(hasPain), false]) then {\n        _unit setVariable [QGVAR(hasPain), false, true];\n    };\n};\n\nif (_bloodVolume < 30) exitWith {\n    [_unit] call FUNC(setDead);\n};\n\nif ([_unit] call EFUNC(common,isAwake)) then {\n    if (_bloodVolume < 60) then {\n        if (random(1) > 0.9) then {\n            [_unit, true, 15 + random(20)] call FUNC(setUnconscious);\n        };\n    };\n};\n\nif (GVAR(level) == 1) then {\n    TRACE_5(\"ACE_DEBUG_BASIC_VITALS\",_painStatus,_unit getVariable QGVAR(hasPain),_unit getVariable QGVAR(morphine),_syncValues,_unit);\n    // reduce pain\n    if (_painStatus > 0) then {\n        _unit setVariable [QGVAR(pain), (_painStatus - 0.001 * _interval) max 0, _syncValues];\n    };\n\n    // reduce painkillers\n    if (_unit getVariable [QGVAR(morphine), 0] > 0) then {\n        _unit setVariable [QGVAR(morphine), ((_unit getVariable [QGVAR(morphine), 0]) - 0.0015 * _interval) max 0, _syncValues];\n    };\n};\n\n// handle advanced medical, with vitals\nif (GVAR(level) >= 2) then {\n    TRACE_6(\"ACE_DEBUG_ADVANCED_VITALS\",_painStatus,_bloodVolume, _unit getVariable QGVAR(hasPain),_unit getVariable QGVAR(morphine),_syncValues,_unit);\n\n    // Handle pain due tourniquets, that have been applied more than 120 s ago\n    private _oldTourniquets = (_unit getVariable [QGVAR(tourniquets), []]) select {_x > 0 && {CBA_missionTime - _x > 120}};\n    // Increase pain at a rate of 0.001 units/s per old tourniquet\n    _painStatus = _painStatus + (count _oldTourniquets) * 0.001 * _interval;\n\n    // Set the vitals\n    private _heartRate = (_unit getVariable [QGVAR(heartRate), 80]) + (([_unit] call FUNC(getHeartRateChange)) * _interval);\n    _unit setVariable  [QGVAR(heartRate), _heartRate max 0, _syncValues];\n\n    private _bloodPressure = [_unit] call FUNC(getBloodPressure);\n    _unit setVariable  [QGVAR(bloodPressure), _bloodPressure, _syncValues];\n\n    _painReduce = [0.001, 0.002] select (_painStatus > 5);\n\n    // @todo: replace this and the rest of the setVariable with EFUNC(common,setApproximateVariablePublic)\n    _unit setVariable [QGVAR(pain), (_painStatus - _painReduce * _interval) max 0, _syncValues];\n\n    TRACE_8(\"ACE_DEBUG_ADVANCED_VITALS\",_painStatus,_painReduce,_heartRate,_bloodVolume,_bloodPressure,_interval,_syncValues,_unit);\n\n    // Check vitals for medical status\n    // TODO check for in revive state instead of variable\n    _bloodPressure params [\"_bloodPressureL\", \"_bloodPressureH\"];\n\n    if (!(_unit getVariable [QGVAR(inCardiacArrest),false])) then {\n        if (_heartRate < 10 || _bloodPressureH < 30 || _bloodVolume < 20) then {\n            [_unit, true, 10+ random(20)] call FUNC(setUnconscious); // safety check to ensure unconsciousness for units if they are not dead already.\n        };\n\n        if ((_bloodPressureH > 260)\n            || {_bloodPressureL < 40 && ({_heartRate > 190})}\n            || {(_bloodPressureH > 145 && {_heartRate > 150})}) then {\n\n            if (random(1) > 0.7) then {\n                [_unit] call FUNC(setCardiacArrest);\n            };\n        };\n        if (_heartRate > 200 || (_heartRate < 20)) then {\n            [_unit] call FUNC(setCardiacArrest);\n        };\n    };\n};\n",
        "functionName": "ace_medical_fnc_handleUnitVitals"
      },
      {
        "fileName": "fnc_hasItem.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if the item is present between the patient and the medic\n *\n * Arguments:\n * 0: Medic <OBJECT>\n * 1: Patient <OBJECT>\n * 2: Item <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, patient, \"bandage\"] call ace_medical_fnc_hasItem\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_medic\", \"_patient\", \"_item\"];\n\nif (isNil QGVAR(setting_allowSharedEquipment)) then {\n    GVAR(setting_allowSharedEquipment) = true;\n};\nif (GVAR(setting_allowSharedEquipment) && {[_patient, _item] call EFUNC(common,hasItem)}) exitWith {\n    true\n};\n\nif ([_medic, _item] call EFUNC(common,hasItem)) exitWith {\n    true\n};\n\nprivate _return = false;\nif ((vehicle _medic != _medic) && {[vehicle _medic] call FUNC(isMedicalVehicle)}) then {\n    private _crew = crew vehicle _medic;\n    {\n        if ([_medic, _x] call FUNC(canAccessMedicalEquipment) && {([_x, _item] call EFUNC(common,hasItem))}) exitWith {\n            _return = true;\n        };\n    } forEach _crew;\n};\n\n_return\n",
        "functionName": "ace_medical_fnc_hasItem"
      },
      {
        "fileName": "fnc_hasItems.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if all items are present between the patient and the medic.\n *\n * Arguments:\n * 0: Medic <OBJECT>\n * 1: Patient <OBJECT>\n * 2: Items <ARRAY<STRING>>\n *\n * Return Value:\n * Has the items <BOOL>\n *\n * Example:\n * [bob, patient, [\"bandage\", \"morphine\"]] call ace_medical_fnc_hasItems\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_medic\", \"_patient\", \"_items\"];\n\nprivate _return = true;\n{\n    //\n    if (_x isEqualType [] && {({[_medic, _patient, _x] call FUNC(hasItem)}count _x == 0)}) exitwith {\n        _return = false;\n    };\n    if (_x isEqualType \"\" && {!([_medic, _patient, _x] call FUNC(hasItem))}) exitwith {\n        _return = false;\n    };\n}foreach _items;\n\n_return\n",
        "functionName": "ace_medical_fnc_hasItems"
      },
      {
        "fileName": "fnc_hasMedicalEnabled.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if unit has CMS enabled\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * enabled <BOOL>\n *\n * Example:\n * [Unit] call ace_medical_fnc_hasMedicalEnabled\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _medicalEnabled = _unit getVariable QGVAR(enableMedical);\nif (isNil \"_medicalEnabled\") exitWith {\n    (((GVAR(enableFor) == 0 && (isPlayer _unit || (_unit getVariable [QEGVAR(common,isDeadPlayer), false])))) || (GVAR(enableFor) == 1) || GVAR(level) == 1)\n};\n\n_medicalEnabled\n",
        "functionName": "ace_medical_fnc_hasMedicalEnabled"
      },
      {
        "fileName": "fnc_hasTourniquetAppliedTo.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if unit has a tourniquet applied to the specified bodypart\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: SelectionName <STRING>\n *\n * Return Value:\n * Has tourniquet applied <BOOL>\n *\n * Example:\n * [bob, \"leg\"] call ace_medical_fnc_hasTourniquetAppliedTo\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_selectionName\"];\n\n(((_target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]]) select ([_selectionName] call FUNC(selectionNameToNumber))) > 0);\n",
        "functionName": "ace_medical_fnc_hasTourniquetAppliedTo"
      },
      {
        "fileName": "fnc_init.sqf",
        "content": "/*\n * Author: KoffeinFlummi, commy2\n * Initializes unit variables.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_init\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// basic\n_unit setVariable [QGVAR(pain), 0, true];\n_unit setVariable [QGVAR(morphine), 0, true];\n_unit setVariable [QGVAR(bloodVolume), 100, true];\n_unit setVariable [\"ACE_isUnconscious\", false, true];\n\n// advanced\n// tourniquets\n_unit setVariable [QGVAR(tourniquets), [0,0,0,0,0,0], true];\n\n//Delayed Medications (from tourniquets)\n_unit setVariable [QGVAR(occludedMedications), nil, true];\n\n// wounds and injuries\n_unit setVariable [QGVAR(openWounds), [], true];\n_unit setVariable [QGVAR(bandagedWounds), [], true];\n_unit setVariable [QGVAR(internalWounds), [], true];\n_unit setVariable [QGVAR(lastUniqueWoundID), 1, true];\n\n// vitals\n_unit setVariable [QGVAR(heartRate), 80];\n_unit setVariable [QGVAR(heartRateAdjustments), []];\n_unit setVariable [QGVAR(bloodPressure), [80, 120]];\n_unit setVariable [QGVAR(peripheralResistance), 100];\n\n// fractures\n_unit setVariable [QGVAR(fractures), [], true];\n\n// triage card and logs\n_unit setVariable [QGVAR(triageLevel), 0, true];\n_unit setVariable [QGVAR(triageCard), [], true];\n\n// IVs\n_unit setVariable [QGVAR(ivBags), nil, true];\n\n// damage storage\n_unit setVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0], true];\n\n// airway\n_unit setVariable [QGVAR(airwayStatus), 100];\n_unit setVariable [QGVAR(airwayOccluded), false];\n_unit setVariable [QGVAR(airwayCollapsed), false];\n\n// generic medical admin\n_unit setVariable [QGVAR(addedToUnitLoop), false, true];\n_unit setVariable [QGVAR(inCardiacArrest), false, true];\n_unit setVariable [QGVAR(hasLostBlood), 0, true];\n_unit setVariable [QGVAR(isBleeding), false, true];\n_unit setVariable [QGVAR(hasPain), false, true];\n_unit setVariable [QGVAR(amountOfReviveLives), GVAR(amountOfReviveLives), true];\n_unit setVariable [QGVAR(painSuppress), 0, true];\n\n// medication\nprivate _allUsedMedication = _unit getVariable [QGVAR(allUsedMedication), []];\n{\n   _unit setVariable [_x select 0, nil];\n} forEach _allUsedMedication;\n_unit setVariable [QGVAR(allUsedMedication), [], true];\n\nprivate _logs = _unit getVariable [QGVAR(allLogs), []];\n{\n    _unit setVariable [_x, nil];\n} forEach _logs;\n_unit setVariable [QGVAR(allLogs), [], true];\n\n// items\n[{\n    _this call FUNC(itemCheck);\n}, [_unit], 0.5, 0.1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_init"
      },
      {
        "fileName": "fnc_isBeingCarried.sqf",
        "content": "/*\n * Author: PabstMirror\n * Returns if a target is being carried. (from ace_dragging)\n *\n * Arguments:\n * 0: Target Unit <OBJECT>\n *\n * Return Value:\n * Is being carried <BOOL>\n *\n * Example:\n * [bob] call ace_medical_fnc_isBeingCarried\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _owner = _target getVariable [QEGVAR(common,owner), objNull];\n\nif (isNull _owner) exitWith {false};\n\n(_owner getVariable [QEGVAR(dragging,carriedObject), objNull]) == _target\n",
        "functionName": "ace_medical_fnc_isBeingCarried"
      },
      {
        "fileName": "fnc_isBeingDragged.sqf",
        "content": "/*\n * Author: PabstMirror\n * Returns if a target is being dragged. (from ace_dragging)\n *\n * Arguments:\n * 0: Target Unit <OBJECT>\n *\n * Return Value:\n * Is being dragged <BOOL>\n *\n * Example:\n * [bob] call ace_medical_fnc_isBeingDragged\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\n\nprivate _owner = _target getVariable [QEGVAR(common,owner), objNull];\n\nif (isNull _owner) exitWith {false};\n\n(_owner getVariable [QEGVAR(dragging,draggedObject), objNull]) == _target\n",
        "functionName": "ace_medical_fnc_isBeingDragged"
      },
      {
        "fileName": "fnc_isInMedicalFacility.sqf",
        "content": "/*\n * Author: Glowbal\n * Checks if a unit is in a designated medical facility\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * Is in medical facility <BOOL>\n *\n * Example:\n * [player] call ace_medical_fnc_isInMedicalFacility\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n//Cache the results as this function could be called rapidly\n(_unit getVariable [QGVAR(cacheInFacility), [-9, false]]) params [\"_expireTime\", \"_lastResult\"];\nif (CBA_missionTime < _expireTime) exitWith {_lastResult};\n\nprivate _eyePos = eyePos _unit;\nprivate _isInBuilding = false;\n\nprivate _medicalFacility =\n    [\n        \"TK_GUE_WarfareBFieldhHospital_Base_EP1\",\n        \"TK_GUE_WarfareBFieldhHospital_EP1\",\n        \"TK_WarfareBFieldhHospital_Base_EP1\",\n        \"TK_WarfareBFieldhHospital_EP1\",\n        \"US_WarfareBFieldhHospital_Base_EP1\",\n        \"US_WarfareBFieldhHospital_EP1\",\n        \"MASH_EP1\",\n        \"MASH\",\n        \"Land_A_Hospital\",\n        \"CDF_WarfareBFieldhHospital\",\n        \"GUE_WarfareBFieldhHospital\",\n        \"INS_WarfareBFieldhHospital\",\n        \"RU_WarfareBFieldhHospital\",\n        \"USMC_WarfareBFieldhHospital\"\n    ];\n\nprivate _objects = (lineIntersectsWith [_unit modelToWorldVisual [0, 0, (_eyePos select 2)], _unit modelToWorldVisual [0, 0, (_eyePos select 2) +10], _unit]);\n{\n    if (((typeOf _x) in _medicalFacility) || (_x getVariable [QGVAR(isMedicalFacility),false])) exitWith {\n        _isInBuilding = true;\n    };\n} forEach _objects;\nif (!_isInBuilding) then {\n    _objects = _unit nearObjects 7.5;\n    {\n        if (((typeOf _x) in _medicalFacility) || (_x getVariable [QGVAR(isMedicalFacility),false])) exitWith {\n            _isInBuilding = true;\n        };\n    } forEach _objects;\n};\n\n//Save the results (with a 1 second expiry)\n_unit setVariable [QGVAR(cacheInFacility), [CBA_missionTime + 1, _isInBuilding]];\n\n_isInBuilding;\n",
        "functionName": "ace_medical_fnc_isInMedicalFacility"
      },
      {
        "fileName": "fnc_isInMedicalVehicle.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Checks if a unit is in a medical vehicle.\n *\n * Arguments:\n * 0: unit to be checked <OBJECT>\n *\n * Return Value:\n * Is unit in medical vehicle? <BOOL>\n *\n * Example:\n * [player] call ace_medical_fnc_isInMedicalVehicle\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nprivate _vehicle = vehicle _unit;\n\nif (_unit == _vehicle) exitWith {false};\nif (_unit in [driver _vehicle, gunner _vehicle, commander _vehicle]) exitWith {false};\n\n(_vehicle getVariable [QGVAR(medicClass), getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"attendant\")]) > 0\n",
        "functionName": "ace_medical_fnc_isInMedicalVehicle"
      },
      {
        "fileName": "fnc_isInStableCondition.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if a unit is in a stable condition\n *\n * Arguments:\n * 0: The patient <OBJECT>\n *\n * Return Value:\n * Is in stable condition <BOOL>\n *\n * Example:\n * [bob] call ACE_medical_fnc_isInStableCondition\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _totalBloodLoss = 0;\n{\n    // total bleeding ratio * percentage of injury left\n    _totalBloodLoss = _totalBloodLoss + ((_x select 4) * (_x select 3));\n} forEach (_unit getVariable [QGVAR(openWounds), []]);\n\n(_totalBloodLoss == 0);\n",
        "functionName": "ace_medical_fnc_isInStableCondition"
      },
      {
        "fileName": "fnc_isMedic.sqf",
        "content": "/*\n * Author: Glowbal, KoffeinFlummi\n * Check if a unit is any medical class\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Class <NUMBER> (default: 1)\n *\n * Return Value:\n * Is in of medic class <BOOL>\n *\n * Example:\n * [player] call ace_medical_fnc_isMedic\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_medicN\", 1]];\n\nprivate _class = _unit getVariable [QGVAR(medicClass), [0, 1] select (_unit getUnitTrait \"medic\")];\n\nif (_class >= _medicN min GVAR(medicSetting)) exitWith {true};\nif (!GVAR(increaseTrainingInLocations)) exitWith {false};\n\nif (([_unit] call FUNC(isInMedicalVehicle)) || {[_unit] call FUNC(isInMedicalFacility)}) then {\n    _class = _class + 1; //boost by one: untrained becomes medic, medic becomes doctor\n};\n\n_class >= _medicN min GVAR(medicSetting)\n",
        "functionName": "ace_medical_fnc_isMedic"
      },
      {
        "fileName": "fnc_isMedicalVehicle.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if vehicle is a medical vehicle\n *\n * Arguments:\n * 0: The Vehicle <OBJECT>\n *\n * Return Value:\n * Is in of medic class <BOOL>\n *\n * Example:\n * [car] call ace_medical_fnc_isMedicalVehicle\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\n(_vehicle getVariable [QGVAR(medicClass), getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"attendant\")]) > 0\n",
        "functionName": "ace_medical_fnc_isMedicalVehicle"
      },
      {
        "fileName": "fnc_itemCheck.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Replaces vanilla items with ACE ones.\n *\n * Arguments:\n * 0: The unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_medical_fnc_itemCheck\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nwhile {({_x == \"FirstAidKit\"} count items _unit) > 0} do {\n    _unit removeItem \"FirstAidKit\";\n    if (GVAR(level) >= 2) then {\n        _unit addItem \"ACE_fieldDressing\";\n        _unit addItem \"ACE_packingBandage\";\n        _unit addItem \"ACE_morphine\";\n        _unit addItem \"ACE_tourniquet\";\n    } else {\n        _unit addItem \"ACE_fieldDressing\";\n        _unit addItem \"ACE_fieldDressing\";\n        _unit addItem \"ACE_morphine\";\n    };\n};\n\nwhile {({_x == \"Medikit\"} count items _unit) > 0} do {\n    _unit removeItem \"Medikit\";\n    if (GVAR(level) >= 2) then {\n        _unit addItemToBackpack \"ACE_fieldDressing\";\n        _unit addItemToBackpack \"ACE_packingBandage\";\n        _unit addItemToBackpack \"ACE_packingBandage\";\n        _unit addItemToBackpack \"ACE_epinephrine\";\n        _unit addItemToBackpack \"ACE_morphine\";\n        _unit addItemToBackpack \"ACE_salineIV_250\";\n        _unit addItemToBackpack \"ACE_tourniquet\";\n    } else {\n        _unit addItemToBackpack \"ACE_epinephrine\";\n        _unit addItemToBackpack \"ACE_epinephrine\";\n        _unit addItemToBackpack \"ACE_epinephrine\";\n        _unit addItemToBackpack \"ACE_epinephrine\";\n        _unit addItemToBackpack \"ACE_bloodIV\";\n        _unit addItemToBackpack \"ACE_bloodIV\";\n    };\n};\n",
        "functionName": "ace_medical_fnc_itemCheck"
      },
      {
        "fileName": "fnc_litterCleanupLoop.sqf",
        "content": "/*\n * Author: Glowbal, esteldunedain\n * Loop that cleans up litter\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_medical_fnc_litterCleanupLoop\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n{\n    _x params [\"_time\", \"_objects\"];\n    //Older elements are always at the begining of the array:\n    if ((CBA_missionTime - _time) < GVAR(litterCleanUpDelay)) exitWith {};\n    TRACE_2(\"deleting\",_time,_objects);\n    {\n        deleteVehicle _x;\n    } forEach _objects;\n    GVAR(allCreatedLitter) set [_forEachIndex, objNull];\n} forEach GVAR(allCreatedLitter);\nGVAR(allCreatedLitter) = GVAR(allCreatedLitter) - [objNull];\n\n// If no more litter remaining, exit the loop\nif (GVAR(allCreatedLitter) isEqualTo []) exitWith {\n    GVAR(litterPFHRunning) = false;\n};\n\n// Schedule the loop to be executed again 30 sec later\n[DFUNC(litterCleanupLoop), [], 30] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_litterCleanupLoop"
      },
      {
        "fileName": "fnc_medicationEffectLoop.sqf",
        "content": "/*\n * Author: Glowbal, esteldunedain\n * Medication effect loop for an injection.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Name of the Variable that is affected <STRING>\n * 2: Proportion of the effect applied <NUMBER>\n * 3: Rate at which the effect is applied <NUMBER>\n * 4: Viscosity adjustment rate <NUMBER>\n * 5: Pain reduction rate <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"leg\", 1, 2, 3, 4] call ACE_medical_fnc_medicationEffectLoop\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_variableName\", \"_amountDecreased\",\"_decreaseRate\", \"_viscosityAdjustmentRate\", \"_painReduceRate\"];\n\n// If the unit died the loop is finished\nif (!alive _unit) exitWith {};\n\n// If locality changed finish the local loop\nif (!local _unit) exitWith {};\n\n// Apply medicinal effect\nprivate _usedMeds = (_unit getVariable [_variableName, 0]) - _decreaseRate;\n_unit setVariable [_variableName, _usedMeds];\n\n// Restore the viscosity while the medication is leaving the system\n_unit setVariable [QGVAR(peripheralResistance), ((_unit getVariable [QGVAR(peripheralResistance), 100]) - _viscosityAdjustmentRate) max 0];\n_unit setVariable [QGVAR(painSuppress), ((_unit getVariable [QGVAR(painSuppress), 0]) - _painReduceRate) max 0];\n\n// Exit if the medication has finished it's effect\n_amountDecreased = _amountDecreased + _decreaseRate;\nif (_amountDecreased >= 1 || (_usedMeds <= 0) || !alive _unit) exitWith {};\n\n// Schedule the loop to be executed again 1 sec later\n[DFUNC(medicationEffectLoop), [_unit, _variableName, _amountDecreased, _decreaseRate, _viscosityAdjustmentRate, _painReduceRate], 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_medicationEffectLoop"
      },
      {
        "fileName": "fnc_modifyMedicalAction.sqf",
        "content": "/*\n * Author: esteldunedain\n * Modify the visuals of a medical action point.\n * On Basic medical: modify the icon color based on damage on that body part.\n *\n * Arguments:\n * 0: The Patient Unit <OBJECT>\n * 1: The Diagnosing Unit <OBJECT>\n * 2: Selection Number <NUMBER>\n * 3: The action to modify <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, 2, \"action\"] call ACE_medical_fnc_modifyMedicalAction\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_player\", \"_partNumber\", \"_actionData\"];\n\nprivate _bloodLossOnSelection = 0;\n// Add all bleeding from wounds on selection\n{\n    _x params [\"\", \"\", \"_selectionX\", \"_amountOf\", \"_percentageOpen\"];\n    if (_selectionX == _partNumber) then {\n        _bloodLossOnSelection = _bloodLossOnSelection + (_amountOf * _percentageOpen);\n    };\n} forEach (_target getvariable [QGVAR(openWounds), []]);\n\nif (_bloodLossOnSelection >= 0.15) then {\n    _actionData set [2, QPATHTOF(UI\\icons\\medical_crossRed.paa)];\n} else {\n    if (_bloodLossOnSelection > 0 ) then {\n        _actionData set [2, QPATHTOF(UI\\icons\\medical_crossYellow.paa)];\n    };\n};\n",
        "functionName": "ace_medical_fnc_modifyMedicalAction"
      },
      {
        "fileName": "fnc_moduleAdvancedMedicalSettings.sqf",
        "content": "/*\n * Author: Glowbal\n * Module for adjusting the medical treatment settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ACE_medical_fnc_moduleAdvancedMedicalSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(enableFor), \"enableFor\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(enableAdvancedWounds), \"enableAdvancedWounds\"] call EFUNC(common,readSettingFromModule);\n// TODO disabled until implemented\n// [_logic, QGVAR(enableAirway), \"enableAirway\"] call EFUNC(common,readSettingFromModule);\n// [_logic, QGVAR(enableFractures), \"enableFractures\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(medicSetting_PAK), \"medicSetting_PAK\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(medicSetting_SurgicalKit), \"medicSetting_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(consumeItem_PAK), \"consumeItem_PAK\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(consumeItem_SurgicalKit), \"consumeItem_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(useLocation_PAK), \"useLocation_PAK\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(useLocation_SurgicalKit), \"useLocation_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(useCondition_PAK), \"useCondition_PAK\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(useCondition_SurgicalKit), \"useCondition_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(healHitPointAfterAdvBandage), \"healHitPointAfterAdvBandage\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(painIsOnlySuppressed), \"painIsOnlySuppressed\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_medical_fnc_moduleAdvancedMedicalSettings"
      },
      {
        "fileName": "fnc_moduleAssignMedicalFacility.sqf",
        "content": "/*\n * Author: Glowbal\n * Register synchronized objects from passed object as a medical facility\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [kevin, bob], true] call ACE_medical_fnc_moduleAssignMedicalFacility\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_logic\", objNull, [objNull]]];\nif (!isNull _logic) then {\n    private _setting = _logic getVariable [\"class\",0];\n    private _objects = synchronizedObjects _logic;\n    {\n        if (local _x) then {\n            _x setVariable[QGVAR(isMedicalFacility), true, true];\n        };\n    } forEach _objects;\n};\n\ntrue;\n",
        "functionName": "ace_medical_fnc_moduleAssignMedicalFacility"
      },
      {
        "fileName": "fnc_moduleAssignMedicalVehicle.sqf",
        "content": "/*\n * Author: Glowbal\n * Assign vehicle as a medical vehicle.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ACE_medical_fnc_moduleAssignMedicalVehicle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif (!isNull _logic) then {\n    private _list = _logic getVariable [\"EnableList\", \"\"];\n    private _setting = _logic getVariable [\"enabled\", 0];\n\n    [_list, QGVAR(medicClass), _setting, true] call EFUNC(common,assignObjectsInList);\n    [synchronizedObjects _logic, QGVAR(medicClass), _setting, true, true] call EFUNC(common,assignObjectsInList);\n};\n",
        "functionName": "ace_medical_fnc_moduleAssignMedicalVehicle"
      },
      {
        "fileName": "fnc_moduleAssignMedicRoles.sqf",
        "content": "/*\n * Author: Glowbal\n * Assign a medical role to a unit.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ACE_medical_fnc_moduleAssignMedicRoles\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif (!isNull _logic) then {\n    private _list = _logic getVariable [\"EnableList\", \"\"];\n    private _setting = _logic getVariable [\"role\", 0];\n\n    [_list, QGVAR(medicClass), _setting, true] call EFUNC(common,assignObjectsInList);\n    [synchronizedObjects _logic, QGVAR(medicClass), _setting, true] call EFUNC(common,assignObjectsInList);\n};\n",
        "functionName": "ace_medical_fnc_moduleAssignMedicRoles"
      },
      {
        "fileName": "fnc_moduleBasicMedicalSettings.sqf",
        "content": "/*\n * Author: Glowbal\n * Module for adjusting the medical treatment settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [Logic, [bob, kevin], true] call ACE_medical_fnc_moduleBasicMedicalSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(medicSetting_basicEpi), \"medicSetting_basicEpi\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(useLocation_basicEpi), \"useLocation_basicEpi\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_medical_fnc_moduleBasicMedicalSettings"
      },
      {
        "fileName": "fnc_moduleMedicalSettings.sqf",
        "content": "/*\n * Author: Glowbal\n * Module for adjusting the medical damage settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ACE_medical_fnc_moduleMedicalSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(level), \"level\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(medicSetting), \"medicSetting\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(increaseTrainingInLocations), \"increaseTrainingInLocations\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(allowLitterCreation), \"allowLitterCreation\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(litterCleanUpDelay), \"litterCleanUpDelay\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(enableScreams), \"enableScreams\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(playerDamageThreshold), \"playerDamageThreshold\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(AIDamageThreshold), \"AIDamageThreshold\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(enableUnconsciousnessAI), \"enableUnconsciousnessAI\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(remoteControlledAI), \"remoteControlledAI\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(preventInstaDeath), \"preventInstaDeath\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(bleedingCoefficient), \"bleedingCoefficient\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(painCoefficient), \"painCoefficient\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(keepLocalSettingsSynced), \"keepLocalSettingsSynced\"] call EFUNC(common,readSettingFromModule);\n// [_logic, QGVAR(delayUnconCaptive), \"delayUnconCaptive\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_medical_fnc_moduleMedicalSettings"
      },
      {
        "fileName": "fnc_moduleReviveSettings.sqf",
        "content": "/*\n * Author: Glowbal\n * Module for adjusting the medical revive settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ACE_medical_fnc_moduleReviveSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(maxReviveTime), \"maxReviveTime\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(amountOfReviveLives), \"amountOfReviveLives\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(enableRevive), \"enableRevive\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_medical_fnc_moduleReviveSettings"
      },
      {
        "fileName": "fnc_onMedicationUsage.sqf",
        "content": "/*\n * Author: Glowbal\n * Handles the medication given to a patient.\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: Medication Treatment classname <STRING>\n * 2: The medication treatment variablename <STRING>\n * 3: Max dosage <NUMBER>\n * 4: The time in the system <NUMBER>\n * 5: Incompatable medication <ARRAY<STRING>>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"classname\", \"varname\", 5, 6, [\"stuff\"]] call ACE_medical_fnc_onMedicationUsage\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_className\", \"_variable\", \"_maxDosage\", \"_timeInSystem\", \"_incompatabileMeds\", \"_viscosityChange\", \"_painReduce\"];\nTRACE_8(\"params\",_target,_className,_variable,_maxDosage,_timeInSystem,_incompatabileMeds,_viscosityChange,_painReduce);\n\nprivate _foundEntry = false;\nprivate _allUsedMedication = _target getVariable [QGVAR(allUsedMedication), []];\n{\n    _x params [\"_variableX\", \"_allMedsFromClassname\"];\n    if (_variableX== _variable) exitWith {\n        if !(_className in _allMedsFromClassname) then {\n            _allMedsFromClassname pushBack _className;\n            _x set [1, _allMedsFromClassname];\n            _allUsedMedication set [_forEachIndex, _x];\n            _target setVariable [QGVAR(allUsedMedication), _allUsedMedication];\n        };\n        _foundEntry = true;\n    };\n} forEach _allUsedMedication;\n\nif (!_foundEntry) then {\n    _allUsedMedication pushBack [_variable, [_className]];\n    _target setVariable [QGVAR(allUsedMedication), _allUsedMedication];\n};\n\n\nprivate _usedMeds = _target getVariable [_variable, 0];\nif (_usedMeds >= floor (_maxDosage + round(random(2))) && _maxDosage >= 1 && GVAR(enableOverdosing)) then {\n    [_target] call FUNC(setDead);\n};\n\nprivate _hasOverDosed = 0;\n{\n    _x params [\"_med\", \"_limit\"];\n    {\n        _x params [\"\", \"_classNamesUsed\"];\n        if ({_x == _med} count _classNamesUsed > _limit) then {\n            _hasOverDosed = _hasOverDosed + 1;\n        };\n    } forEach _allUsedMedication;\n} forEach _incompatabileMeds;\n\nif (_hasOverDosed > 0 && GVAR(enableOverdosing)) then {\n    private _medicationConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Medication\");\n    private _onOverDose = getText (_medicationConfig >> \"onOverDose\");\n    if (isClass (_medicationConfig >> _className)) then {\n        _medicationConfig = (_medicationConfig >> _className);\n         if (isText (_medicationConfig  >> \"onOverDose\")) then { _onOverDose = getText (_medicationConfig >> \"onOverDose\"); };\n    };\n    if (isNil _onOverDose) then {\n        _onOverDose = compile _onOverDose;\n    } else {\n        _onOverDose = missionNamespace getVariable _onOverDose;\n    };\n    [_target, _className] call _onOverDose;\n};\n\nprivate _decreaseAmount = 1 / _timeInSystem;\nprivate _viscosityAdjustment = _viscosityChange / _timeInSystem;\n\n// Run the loop that computes the effect of the medication over time\n[_target, _variable, 0, _decreaseAmount, _viscosityAdjustment, _painReduce / _timeInSystem] call FUNC(medicationEffectLoop);\n",
        "functionName": "ace_medical_fnc_onMedicationUsage"
      },
      {
        "fileName": "fnc_parseConfigForInjuries.sqf",
        "content": "/*\n * Author: Glowbal\n * Parse the ACE_Medical_Advanced config for all injury types.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_medical_fnc_parseConfigForInjuries\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _injuriesRootConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Injuries\");\nprivate _allFoundDamageTypes = [];\nprivate _configDamageTypes = (_injuriesRootConfig >> \"damageTypes\");\n\n// minimum lethal damage collection, mapped to damageTypes\nprivate _defaultMinLethalDamage = getNumber (_configDamageTypes >> \"lethalDamage\");\nGVAR(minLethalDamages) = [];\n\n// Collect all available damage types from the config\nfor \"_i\" from 0 to (count _configDamageTypes -1) /* step +1 */ do {\n    // Only get the subclasses in damageType class\n    if (isClass(_configDamageTypes select _i)) then {\n        _allFoundDamageTypes pushBack (configName (_configDamageTypes select _i));\n        private _minLethalDamage = if (isNumber((_configDamageTypes select _i) >> \"lethalDamage\")) then {\n            getNumber((_configDamageTypes select _i) >> \"lethalDamage\");\n        } else {\n            _defaultMinLethalDamage\n        };\n\n        GVAR(minLethalDamages) pushBack _minLethalDamage;\n    };\n};\nGVAR(allAvailableDamageTypes) = _allFoundDamageTypes;\nGVAR(woundClassNames) = [];\nGVAR(fractureClassNames) = [];\n\n// Parsing the wounds\n// function for parsing a sublcass of an injury\nprivate _parseForSubClassWounds = {\n    private _subClass = _this select 0;\n    if (isClass (_entry >> _subClass)) exitWith {\n        private _subClassConfig = (_entry >> _subClass);\n        private _subClasstype = _classType + (configName _subClassConfig);\n        private _subClassselections = if (isArray(_subClassConfig >> \"selections\")) then { getArray(_subClassConfig >> \"selections\");} else { _selections };\n        private _subClassbloodLoss = if (isNumber(_subClassConfig >> \"bleedingRate\")) then { getNumber(_subClassConfig >> \"bleedingRate\");} else { _bloodLoss };\n        private _subClasspain = if (isNumber(_subClassConfig >> \"pain\")) then { getNumber(_subClassConfig >> \"pain\");} else { _pain };\n        private _subClassminDamage = if (isNumber(_subClassConfig >> \"minDamage\")) then { getNumber(_subClassConfig >> \"minDamage\");} else { _minDamage };\n        private _subClassmaxDamage = if (isNumber(_subClassConfig >> \"maxDamage\")) then { getNumber(_subClassConfig >> \"maxDamage\");} else { _maxDamage };\n        private _subClasscauses = if (isArray(_subClassConfig >> \"causes\")) then { getArray(_subClassConfig >> \"causes\");} else { _causes };\n        private _subClassDisplayName = if (isText(_subClassConfig >> \"name\")) then { getText(_subClassConfig >> \"name\");} else {_classDisplayName + \" \" + _subClass};\n        if (count _selections > 0 && {count _causes > 0}) then {\n            GVAR(woundClassNames) pushBack _subClasstype;\n            _allWoundClasses pushBack [_classID, _subClassselections, _subClassbloodLoss, _subClasspain, [_subClassminDamage, _subClassmaxDamage], _subClasscauses, _subClassDisplayName];\n            _classID = _classID + 1;\n        };\n        true;\n    };\n    false;\n};\n\n// TODO classTypes are strings currently. Convert them to unqiue IDs instead.\nprivate _woundsConfig = (_injuriesRootConfig >> \"wounds\");\nprivate _allWoundClasses = [];\nprivate _classID = 0;\nif (isClass _woundsConfig) then {\n    private _amountOf = count _woundsConfig;\n    for \"_i\" from 0 to (_amountOf -1) /* step +1 */ do {\n        private _entry = _woundsConfig select _i;\n        if (isClass _entry) then {\n            private _classType = (ConfigName _entry);\n            private _selections = if (isArray(_entry >> \"selections\")) then { getArray(_entry >> \"selections\");} else {[]};\n            private _bloodLoss = if (isNumber(_entry >> \"bleedingRate\")) then { getNumber(_entry >> \"bleedingRate\");} else {0};\n            private _pain = if (isNumber(_entry >> \"pain\")) then { getNumber(_entry >> \"pain\");} else {0};\n            private _minDamage = if (isNumber(_entry >> \"minDamage\")) then { getNumber(_entry >> \"minDamage\");} else {0};\n            private _maxDamage = if (isNumber(_entry >> \"maxDamage\")) then { getNumber(_entry >> \"maxDamage\");} else {-1};\n            private _causes = if (isArray(_entry >> \"causes\")) then { getArray(_entry >> \"causes\");} else {[]};\n            private _classDisplayName = if (isText(_entry >> \"name\")) then { getText(_entry >> \"name\");} else {_classType};\n\n            // TODO instead of hardcoding minor, medium and large just go through all sub classes recursively until none are found\n            if ([\"Minor\"] call _parseForSubClassWounds || [\"Medium\"] call _parseForSubClassWounds || [\"Large\"] call _parseForSubClassWounds) exitWith {}; // continue to the next one\n\n            // There were no subclasses, so we will add this one instead.\n            if (count _selections > 0 && count _causes > 0) then {\n                GVAR(woundClassNames) pushBack _classType;\n                _allWoundClasses pushBack [_classID, _selections, _bloodLoss, _pain, [_minDamage, _maxDamage], _causes, _classDisplayName];\n                _classID = _classID + 1;\n            };\n            true;\n        };\n    };\n};\nGVAR(AllWoundInjuryTypes) = _allWoundClasses;\n\n// Linking injuries to the woundInjuryType variables.\nprivate _damageTypesConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Injuries\" >> \"damageTypes\");\nprivate _thresholds = getArray(_damageTypesConfig >> \"thresholds\");\nprivate _selectionSpecific = getNumber(_damageTypesConfig >> \"selectionSpecific\");\n{\n    private _varName = format[QGVAR(woundInjuryType_%1),_x];\n    private _woundTypes = [];\n    private _type = _x;\n    {\n        // Check if this type is in the causes of a wound class, if so, we will store the wound types for this damage type\n        if (_type in (_x select 5)) then {\n            _woundTypes pushBack _x;\n        };\n    } forEach _allWoundClasses;\n    private _typeThresholds = _thresholds;\n    private _selectionSpecificType = _selectionSpecific;\n    if (isClass(_damageTypesConfig >> _x)) then {\n        if (isArray(_damageTypesConfig >> _x >> \"thresholds\")) then { _typeThresholds = getArray(_damageTypesConfig >> _x >> \"thresholds\");};\n        if (isNumber(_damageTypesConfig >> _x >> \"selectionSpecific\")) then { _selectionSpecificType = getNumber(_damageTypesConfig >> _x >> \"selectionSpecific\");};\n    };\n    missionNamespace setVariable [_varName, [_typeThresholds, _selectionSpecificType > 0, _woundTypes]];\n\n    // extension loading\n    private _minDamageThresholds = \"\";\n    private _amountThresholds = \"\";\n    {\n        _minDamageThresholds = _minDamageThresholds + str(_x select 0);\n        _amountThresholds = _amountThresholds + str(_x select 1);\n        if (_forEachIndex < (count _typeThresholds) - 1) then {\n            _minDamageThresholds = _minDamageThresholds + \":\";\n            _amountThresholds = _amountThresholds + \":\";\n        };\n    } forEach _typeThresholds;\n\n    \"ace_medical\" callExtension format [\"addDamageType,%1,%2,%3,%4,%5\", _type, GVAR(minLethalDamages) select _forEachIndex, _minDamageThresholds, _amountThresholds, _selectionSpecificType];\n\n} forEach _allFoundDamageTypes;\n\n\n// Extension loading\n\n{\n    // add shit to addInjuryType\n    _x params [\"_classID\", \"_selections\", \"_bloodLoss\", \"_pain\", \"_damage\", \"_causesArray\", \"_classDisplayName\"];\n    _damage params [\"_minDamage\", \"_maxDamage\"];\n    private _className = GVAR(woundClassNames) select _forEachIndex;\n    private _allowedSelections = \"\";\n\n    {\n        _allowedSelections = _allowedSelections + _x;\n        if (_forEachIndex < (count _selections) - 1) then {\n            _allowedSelections = _allowedSelections + \":\";\n        };\n    } forEach _selections;\n\n    private _causes = \"\";\n\n    {\n        _causes = _causes + _x;\n        if (_forEachIndex < (count _causesArray) - 1) then {\n            _causes = _causes + \":\";\n        };\n    } forEach _causesArray;\n    _classDisplayName = _x select 6;\n\n    \"ace_medical\" callExtension format[\"addInjuryType,%1,%2,%3,%4,%5,%6,%7,%8,%9\", _classID, _className, _allowedSelections, _bloodLoss, _pain, _minDamage, _maxDamage, _causes, _classDisplayName];\n\n} forEach _allWoundClasses;\n\n\"ace_medical\" callExtension \"ConfigComplete\";\n",
        "functionName": "ace_medical_fnc_parseConfigForInjuries"
      },
      {
        "fileName": "fnc_playInjuredSound.sqf",
        "content": "/*\n * Author: Glowbal\n * Play the injured sound for a unit if the unit is damaged. The sound broadcasted across MP.\n * Will not play if the unit has already played a sound within to close a time frame.\n * Delay: With minimal damage (below 1), the delay is (10 + random(50)) seconds. Otherwise it is 60 seconds / damage.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Amount of Pain <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 5] call ACE_medical_fnc_playInjuredSound\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_pain\"];\nif (!local _unit || !GVAR(enableScreams)) exitWith{};\n\n// Lock if the unit is already playing a sound.\nif ((_unit getVariable [QGVAR(playingInjuredSound),false])) exitWith {};\n_unit setVariable [QGVAR(playingInjuredSound),true];\n\n// Play the sound if there is any damage present.\nif (_pain > 0 && {[_unit] call EFUNC(common,isAwake)}) exitWith {\n    // Classnames of the available sounds.\n    private _availableSounds_A = [\n        \"WoundedGuyA_01\",\n        \"WoundedGuyA_02\",\n        \"WoundedGuyA_03\",\n        \"WoundedGuyA_04\",\n        \"WoundedGuyA_05\",\n        \"WoundedGuyA_06\",\n        \"WoundedGuyA_07\",\n        \"WoundedGuyA_08\"\n    ];\n    private _availableSounds_B = [\n        \"WoundedGuyB_01\",\n        \"WoundedGuyB_02\",\n        \"WoundedGuyB_03\",\n        \"WoundedGuyB_04\",\n        \"WoundedGuyB_05\",\n        \"WoundedGuyB_06\",\n        \"WoundedGuyB_07\",\n        \"WoundedGuyB_08\"\n    ];\n    private _availableSounds_C = [\n        \"WoundedGuyC_01\",\n        \"WoundedGuyC_02\",\n        \"WoundedGuyC_03\",\n        \"WoundedGuyC_04\",\n        \"WoundedGuyC_05\"\n    ];\n    private _sound = \"\";\n\n    // Select the to be played sound based upon damage amount.\n    if (_pain > 0.5) then {\n        if (random(1) > 0.5) then {\n            _sound = selectRandom _availableSounds_A;\n        } else {\n            _sound = selectRandom _availableSounds_B;\n        };\n    } else {\n        _sound = selectRandom _availableSounds_B;\n    };\n    // Play the sound\n    playSound3D [(getArray(configFile >> \"CfgSounds\" >> _sound >> \"sound\") select 0) + \".wss\", objNull, false, getPos _unit, 15, 1, 25]; // +2db, 15 meters.\n\n    // Figure out what the delay will be before it is possible to play a sound again.\n    private _delay = (30 - (random(25) * _pain)) max (3.5 + random(2));\n\n    // Clean up the lock\n    [{\n        (_this select 0) setVariable [QGVAR(playingInjuredSound), nil];\n    }, [_unit], _delay, _delay] call CBA_fnc_waitAndExecute;\n};\n\n// Clean up in case there has not been played any sounds.\n_unit setVariable [QGVAR(playingInjuredSound), nil];\n",
        "functionName": "ace_medical_fnc_playInjuredSound"
      },
      {
        "fileName": "fnc_reviveStateLoop.sqf",
        "content": "/*\n * Author: Glowbal, esteldunedain\n * Loop that handles a unit in the revive state.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_reviveStateLoop\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// If locality changed finish the local loop\n// @todo: reinitiate the loop elsewhere\nif (!local _unit) exitWith {};\n\nprivate _startTime = _unit getVariable [QGVAR(reviveStartTime), 0];\n\n// If we are in revive state in a blown up vehicle, try to unload so that people can access the body\nif ((alive _unit) && {(vehicle _unit) != _unit} && {!alive (vehicle _unit)}) then {\n    TRACE_2(\"Unloading\", _unit, vehicle _unit);\n    [_unit] call EFUNC(common,unloadPerson);\n};\n\n// If the timer run out, let the unit die and exit the loop\nif (GVAR(maxReviveTime) > 0 && {CBA_missionTime - _startTime > GVAR(maxReviveTime)}) exitwith {\n    _unit setVariable [QGVAR(inReviveState), nil, true];\n    _unit setVariable [QGVAR(reviveStartTime), nil];\n    [_unit, true] call FUNC(setDead);\n};\n\n// If the unit was taken out from revive state, exit the loop\nif !(_unit getVariable [QGVAR(inReviveState), false]) exitwith {\n    // Revived without dieing, so in case we have lifes, remove one.\n    if (GVAR(amountOfReviveLives) > 0) then {\n        _lifesLeft = _unit getVariable[QGVAR(amountOfReviveLives), GVAR(amountOfReviveLives)];\n        _unit setVariable [QGVAR(amountOfReviveLives), _lifesLeft - 1, true];\n    };\n\n    _unit setVariable [QGVAR(reviveStartTime), nil];\n};\n\n// Remove heartbeat\nif (GVAR(level) >= 2) then {\n    if (_unit getVariable [QGVAR(heartRate), 60] > 0) then {\n        _unit setVariable [QGVAR(heartRate), 0];\n    };\n};\n\n// Schedule the loop to be executed again 1 sec later\n[DFUNC(reviveStateLoop), [_unit], 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_reviveStateLoop"
      },
      {
        "fileName": "fnc_selectionNameToNumber.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the number representation of a selection name.\n *\n * Arguments:\n * 0: The selection name of a unit <STRING>\n *\n * Return Value:\n * Number representation. -1 if invalid. <NUMBER>\n *\n * Example:\n * [\"head\"] call ace_medical_fnc_selectionNameToNumber\n *\n * Public: yes\n */\n\n#include \"script_component.hpp\"\n\n([\"head\",\"body\",\"hand_l\",\"hand_r\",\"leg_l\",\"leg_r\"] find (_this select 0));\n",
        "functionName": "ace_medical_fnc_selectionNameToNumber"
      },
      {
        "fileName": "fnc_serverRemoveBody.sqf",
        "content": "/*\n * Author: PabstMirror\n * Removes corpse. Idealy it is just deleted the next frame,\n * but player bodies cannot be deleted until they respawn, so it is hidden and deleted later.\n *\n * Arguments:\n * 0: Mr Body <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorTarget] call ace_medical_fnc_serverRemoveBody\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\"];\nTRACE_2(\"\",_target,isPlayer _target);\n\n//Hide the body globaly\n[QEGVAR(common,hideObjectGlobal), [_target, true]] call CBA_fnc_serverEvent;\n\nif (isNil QGVAR(bodiesToDelete)) then {GVAR(bodiesToDelete) = [];};\nGVAR(bodiesToDelete) pushBack _target;\n\n// Start up a loop to wait for bodies to be free to delete\nif ((count GVAR(bodiesToDelete)) == 1) then {\n    [] call FUNC(bodyCleanupLoop);\n};\n\nnil\n",
        "functionName": "ace_medical_fnc_serverRemoveBody"
      },
      {
        "fileName": "fnc_setCardiacArrest.sqf",
        "content": "/*\n * Author: Glowbal\n * Triggers a unit into the Cardiac Arrest state from CMS. Will put the unit in an unconscious state and run a countdown timer until unit dies.\n * Timer is a random value between 120 and 720 seconds.\n *\n * Arguments:\n * 0: The unit that will be put in cardiac arrest state <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_medical_fnc_setCardiacArrest\n *\n * Public: yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(inCardiacArrest),false]) exitWith {};\n_unit setVariable [QGVAR(inCardiacArrest), true,true];\n_unit setVariable [QGVAR(heartRate), 0];\n\n[\"ace_cardiacArrestEntered\", [_unit]] call CBA_fnc_localEvent;\n\n[_unit, true] call FUNC(setUnconscious);\nprivate _timeInCardiacArrest = 120 + round(random(600));\n\n[{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_unit\", \"_startTime\", \"_timeInCardiacArrest\"];\n\n    private _heartRate = _unit getVariable [QGVAR(heartRate), 80];\n    if (_heartRate > 0 || !alive _unit) exitWith {\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n        _unit setVariable [QGVAR(inCardiacArrest), nil,true];\n    };\n    if (CBA_missionTime - _startTime >= _timeInCardiacArrest) exitWith {\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n        _unit setVariable [QGVAR(inCardiacArrest), nil,true];\n        [_unit] call FUNC(setDead);\n    };\n}, 1, [_unit, CBA_missionTime, _timeInCardiacArrest] ] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_medical_fnc_setCardiacArrest"
      },
      {
        "fileName": "fnc_setDead.sqf",
        "content": "/*\n * Author: Glowbal\n * Either kills a unit or puts the unit in a revivable state, depending on the settings.\n *\n * Arguments:\n * 0: The unit that will be killed <OBJECT>\n * 1: Force Dead (ignore revive setting) <BOOL> (default: false)\n * 1: Delay setDamage for a frame  <BOOL> (default: false)\n *\n * Return Value:\n * Did he died? <BOOL>\n *\n * Example:\n * [bob, false, false] call ace_medical_fnc_setDead\n *\n * Public: yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_force\", false], [\"_delaySetDamage\", false]];\n\nif ((!alive _unit) || {_unit getVariable [\"ACE_isDead\", false]}) exitWith {true};\nif (!local _unit) exitwith {\n    [QGVAR(setDead), [_unit, _force], _unit] call CBA_fnc_targetEvent;\n    false;\n};\n\nprivate _reviveVal = _unit getVariable [QGVAR(enableRevive), GVAR(enableRevive)];\nif (((_reviveVal == 1 && {[_unit] call EFUNC(common,isPlayer)} || _reviveVal == 2)) && !_force) exitwith {\n    if (_unit getVariable [QGVAR(inReviveState), false]) exitwith {\n        if (GVAR(amountOfReviveLives) > 0) then {\n            private _lifesLeft = _unit getVariable[QGVAR(amountOfReviveLives), GVAR(amountOfReviveLives)];\n            if (_lifesLeft <= 0) then {\n                [_unit, true] call FUNC(setDead);\n            };\n        };\n\n        false;\n    };\n\n    _unit setVariable [QGVAR(inReviveState), true, true];\n    _unit setVariable [QGVAR(reviveStartTime), CBA_missionTime];\n    [_unit, true] call FUNC(setUnconscious);\n\n    // Run the loop that tracks the revive state\n    [_unit ] call FUNC(reviveStateLoop);\n    false;\n};\n\n_unit setVariable [\"ACE_isDead\", true, true];\nif (isPLayer _unit) then {\n    _unit setVariable [\"isDeadPlayer\", true, true];\n};\n\n[\"ace_killed\", [_unit]] call CBA_fnc_localEvent;\n\n//Delay a frame before killing the unit via scripted damage\n//to avoid triggering the \"Killed\" Event twice (and having the wrong killer)\n\nif (!_delaySetDamage) then {\n    [_unit, 1] call FUNC(setStructuralDamage);\n} else {\n    [FUNC(setStructuralDamage), [_unit, 1]] call CBA_fnc_execNextFrame;\n};\n\ntrue;\n",
        "functionName": "ace_medical_fnc_setDead"
      },
      {
        "fileName": "fnc_setHitPointDamage.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * My very own setHitPointDamage since BIS' one is buggy when affecting a remote unit.\n * It also doesn't change the overall damage. This does.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: HitPoint <STRING>\n * 2: Damage <NUMBER>\n * 3: Disable overall damage adjustment <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [medic, \"Leg\", 2, false] call ace_medical_fnc_setHitPointDamage\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n#define LEGDAMAGETRESHOLD1 1\n#define LEGDAMAGETRESHOLD2 1.7\n#define ARMDAMAGETRESHOLD1 1\n#define ARMDAMAGETRESHOLD2 1.7\n\nparams [\"_unit\", \"_selection\", \"_damage\", [\"_disabled\", false]];\n\n// Unit isn't local, give function to machine where it is.\nif !(local _unit) exitWith {\n    [QGVAR(setHitPointDamage), _this, _unit] call CBA_fnc_targetEvent;\n};\n\n// Check if overall damage adjustment is disabled\nif (_disabled) exitWith {\n    _unit setHitPointDamage [_selection, _damage];\n};\n\nprivate _selections = [\n    \"HitHead\",\n    \"HitBody\",\n    \"HitLeftArm\",\n    \"HitRightArm\",\n    \"HitLeftLeg\",\n    \"HitRightLeg\"\n];\n\nif !(_selection in _selections) exitWith {\n    _unit setHitPointDamage [_selection, _damage];\n};\n\nprivate _damages = _selections apply {_unit getHitPointDamage _x};\n\nprivate _damageOld = damage _unit;\nprivate _damageSumOld = 0;\n{\n    _damageSumOld = _damageSumOld + _x;\n} forEach _damages;\n_damageSumOld = _damageSumOld max 0.001;\n\n_damages set [_selections find _selection, _damage];\n\nprivate _damageSumNew = 0;\n{\n    _damageSumNew = _damageSumNew + _x;\n} forEach _damages;\n\nprivate _damageNew = _damageSumNew / 6;\nif (_damageOld > 0) then {\n    _damageNew = _damageOld * (_damageSumNew / _damageSumOld);\n};\n\n// prevent death\nif (_damageNew >= 0.9) then {\n    _unit setDamage 0.9;\n    [_unit] call FUNC(setDead);\n} else {\n    _unit setDamage _damageNew;\n};\n\n{\n    private _damageFinal = (_damages select _forEachIndex);\n    _unit setHitPointDamage [_x, _damageFinal];\n} forEach _selections;\n\n// Leg Damage\nprivate _legdamage = (_unit getHitPointDamage \"HitLeftLeg\") + (_unit getHitPointDamage \"HitRightLeg\");\nif (_legdamage >= LEGDAMAGETRESHOLD1) then {\n    if (_unit getHitPointDamage \"HitLegs\" != 1) then {_unit setHitPointDamage [\"HitLegs\", 1]};\n} else {\n    if (_unit getHitPointDamage \"HitLegs\" != 0) then {_unit setHitPointDamage [\"HitLegs\", 0]};\n};\n// @todo: force prone for completely fucked up legs.\n\n\n// Arm Damage\nprivate _armdamage = (_unit getHitPointDamage \"HitLeftArm\") + (_unit getHitPointDamage \"HitRightArm\");\nif (_armdamage >= ARMDAMAGETRESHOLD1) then {\n    if (_unit getHitPointDamage \"HitHands\" != 1) then {_unit setHitPointDamage [\"HitHands\", 1]};\n} else {\n    if (_unit getHitPointDamage \"HitHands\" != 0) then {_unit setHitPointDamage [\"HitHands\", 0]};\n};\n// @todo: Drop weapon for full damage.\n",
        "functionName": "ace_medical_fnc_setHitPointDamage"
      },
      {
        "fileName": "fnc_setStructuralDamage.sqf",
        "content": "/*\n * Author: commy2\n * Set the structural damage of a soldier without changing the individual hitpoints. Unit has to be local. Not safe to use with vehicles!\n *\n * Arguments:\n * 0: The unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_medical_fnc_setStructuralDamage\n *\n * Public: no?\n */\n\nparams [\"_unit\", \"_damage\"];\n\nif (!local _unit) exitWith {};\n\nprivate _allHitPoints = getAllHitPointsDamage _unit select 2;\n\n_unit setDamage _damage;\n\n{\n    _unit setHitIndex [_forEachIndex, _x];\n} forEach _allHitPoints;\n",
        "functionName": "ace_medical_fnc_setStructuralDamage"
      },
      {
        "fileName": "fnc_setUnconscious.sqf",
        "content": "/*\n * Author: Glowbal\n * Sets a unit in the unconscious state.\n *\n * Arguments:\n * 0: The unit that will be put in an unconscious state <OBJECT>\n * 1: Set unconsciouns <BOOL> (default: true)\n * 2: Minimum unconscious time <NUMBER> (default: (round(random(10)+5)))\n * 3: Force AI Unconscious (skip random death chance) <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true] call ace_medical_fnc_setUnconscious;\n *\n * Public: yes\n */\n\n#include \"script_component.hpp\"\n\n#define DEFAULT_DELAY (round(random(10)+5))\n\n// only run this after the settings are initialized\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(setUnconscious), _this];\n};\n\nparams [\"_unit\", [\"_set\", true], [\"_minWaitingTime\", DEFAULT_DELAY], [\"_force\", false]];\n\n// No change, fuck off. (why is there no xor?)\nif (_set isEqualTo (_unit getVariable [\"ACE_isUnconscious\", false])) exitWith {};\n\nif !(_set) exitWith {\n    _unit setVariable [\"ACE_isUnconscious\", false, true];\n    if (_unit getVariable [QGVAR(inReviveState), false]) then {\n        _unit setVariable [QGVAR(inReviveState), nil, true];\n    };\n};\n\nif !(!(isNull _unit) && {(_unit isKindOf \"CAManBase\") && ([_unit] call EFUNC(common,isAwake))}) exitWith{};\n\nif (!local _unit) exitWith {\n    [QGVAR(setUnconscious), [_unit, _set, _minWaitingTime, _force], _unit] call CBA_fnc_targetEvent;\n};\n\n_unit setVariable [\"ACE_isUnconscious\", true, true];\n\nif (_unit == ACE_player) then {\n    if (visibleMap) then {openMap false};\n    while {dialog} do {\n        closeDialog 0;\n    };\n};\n\n// if we have unconsciousness for AI disabled, we will kill the unit instead\nprivate _isDead = false;\nif (!([_unit, GVAR(remoteControlledAI)] call EFUNC(common,isPlayer)) && !_force) then {\n    private _enableUncon = _unit getVariable [QGVAR(enableUnconsciousnessAI), GVAR(enableUnconsciousnessAI)];\n    if (_enableUncon == 0 or {_enableUncon == 1 and (random 1) < 0.5}) then {\n        [_unit, true] call FUNC(setDead);\n        _isDead = true;\n    };\n};\nif (_isDead) exitWith {};\n\n// If a unit has the launcher out, it will sometimes start selecting the primairy weapon while unconscious,\n// therefor we force it to select the primairy weapon before going unconscious\nif ((vehicle _unit) isKindOf \"StaticWeapon\") then {\n    [_unit] call EFUNC(common,unloadPerson);\n};\nif (animationState _unit in [\"ladderriflestatic\",\"laddercivilstatic\"]) then {\n    _unit action [\"ladderOff\", (nearestBuilding _unit)];\n};\nif (vehicle _unit == _unit) then {\n    if (primaryWeapon _unit == \"\") then {\n        _unit addWeapon \"ACE_FakePrimaryWeapon\";\n    };\n    _unit selectWeapon (primaryWeapon _unit);\n};\n\n// We are storing the current animation, so we can use it later on when waking the unit up inside a vehicle\nif (vehicle _unit != _unit) then {\n    _unit setVariable [QGVAR(vehicleAwakeAnim), [(vehicle _unit), (animationState _unit)]];\n};\n\n//Save current stance:\nprivate _originalPos = unitPos _unit;\n\n_unit setUnitPos \"DOWN\";\n[_unit, true] call EFUNC(common,disableAI);\n\n// So the AI does not get stuck, we are moving the unit to a temp group on its own.\n//Unconscious units shouldn't be put in another group #527:\nif (GVAR(moveUnitsFromGroupOnUnconscious)) then {\n    [_unit, true, \"ACE_isUnconscious\", side group _unit] call EFUNC(common,switchToGroupSide);\n};\n// Delay Unconscious so the AI dont instant stop shooting on the unit #3121\nif (GVAR(delayUnconCaptive) == 0) then {\n    [_unit, \"setCaptive\", \"ace_unconscious\", true] call EFUNC(common,statusEffect_set);\n} else {\n    // when the Delay is so high that the unit can wake up and get uncon again we need to check if it is the correct wait that got executed\n    private _counter = _unit getVariable [QGVAR(unconsciousCounter), 0];\n    _counter = _counter + 1;\n    _unit setVariable [QGVAR(unconsciousCounter), _counter];\n    [{\n        params [\"_unit\", \"_counter\"];\n        if (_unit getVariable [\"ACE_isUnconscious\", false] && (_unit getVariable [QGVAR(unconsciousCounter), 0]) == _counter) then {\n            [_unit, \"setCaptive\", \"ace_unconscious\", true] call EFUNC(common,statusEffect_set);\n        };\n    },[_unit, _counter], GVAR(delayUnconCaptive)] call CBA_fnc_waitAndExecute;\n};\n\nprivate _anim = [_unit] call EFUNC(common,getDeathAnim);\n[_unit, _anim, 1, true] call EFUNC(common,doAnimation);\n[{\n    params [\"_unit\", \"_anim\"];\n    if ((_unit getVariable \"ACE_isUnconscious\") and (animationState _unit != _anim)) then {\n        [_unit, _anim, 2, true] call EFUNC(common,doAnimation);\n    };\n}, [_unit, _anim], 0.5, 0] call CBA_fnc_waitAndExecute;\n\nprivate _startingTime = CBA_missionTime;\n\n[DFUNC(unconsciousPFH), 0.1, [_unit, _originalPos, _startingTime, _minWaitingTime, false, vehicle _unit isKindOf \"ParachuteBase\"] ] call CBA_fnc_addPerFrameHandler;\n\n// unconscious can't talk\n[_unit, \"isUnconscious\"] call EFUNC(common,muteUnit);\n\n[\"ace_unconscious\", [_unit, true]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_medical_fnc_setUnconscious"
      },
      {
        "fileName": "fnc_showBloodEffect.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Glowbal\n * Does the blood screen effect, just like BIS_fnc_bloodeffect, but in non-sheduled environment.\n *\n * Arguments:\n * 0: Effect multiplier <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [2] call ace_medical_fnc_showBloodEffect\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_bloodRemaining\"];\n\ndisableSerialization;\n\n// get already existing controls, or create them\n\nprivate _fxBloodControls = GETUVAR(GVAR(FXBloodControls),[]);\n\nprivate _bloodCtrl1 = controlNull;\nprivate _bloodCtrl2 = controlNull;\nprivate _bloodCtrl3 = controlNull;\nif (count _fxBloodControls != 3) then {\n    _bloodCtrl1 = findDisplay 46 ctrlCreate [\"RscPicture\", -1];\n    _bloodCtrl2 = findDisplay 46 ctrlCreate [\"RscPicture\", -1];\n    _bloodCtrl3 = findDisplay 46 ctrlCreate [\"RscPicture\", -1];\n\n    // set their textures, screen position etc.\n    _bloodCtrl1 ctrlSetText \"A3\\Ui_f\\data\\igui\\rsctitles\\HealthTextures\\blood_lower_ca.paa\";\n    _bloodCtrl2 ctrlSetText \"A3\\Ui_f\\data\\igui\\rsctitles\\HealthTextures\\blood_middle_ca.paa\";\n    _bloodCtrl3 ctrlSetText \"A3\\Ui_f\\data\\igui\\rsctitles\\HealthTextures\\blood_upper_ca.paa\";\n\n    // positions are from config\n    private _ctrlPosition = [\n        ((0 * safezoneW) + safezoneX) + ((safezoneW - (2.125 * safezoneW * 3/4)) / 2),\n        (-0.0625 * safezoneH) + safezoneY,\n        2.125 * safezoneW * 3/4,\n        1.125 * safezoneH\n    ];\n\n    _bloodCtrl1 ctrlSetPosition _ctrlPosition;\n    _bloodCtrl2 ctrlSetPosition _ctrlPosition;\n    _bloodCtrl3 ctrlSetPosition _ctrlPosition;\n\n    _fxBloodControls = [_bloodCtrl1, _bloodCtrl2, _bloodCtrl3];\n    SETUVAR(GVAR(FXBloodControls),_fxBloodControls);\n} else {\n    _bloodCtrl1 = _fxBloodControls select 0;\n    _bloodCtrl2 = _fxBloodControls select 1;\n    _bloodCtrl3 = _fxBloodControls select 2;\n};\n\n// reset everything\n_bloodCtrl1 ctrlSetFade 1;\n_bloodCtrl2 ctrlSetFade 1;\n_bloodCtrl3 ctrlSetFade 1;\n\n_bloodCtrl1 ctrlCommit 0;\n_bloodCtrl2 ctrlCommit 0;\n_bloodCtrl3 ctrlCommit 0;\n\nif (_bloodRemaining < 5) exitWith {\n    // nothing\n};\n\nif (_bloodRemaining < 25) exitWith {\n    _bloodCtrl1 ctrlSetFade 0.2;\n    _bloodCtrl1 ctrlCommit 0.2;\n\n    [{\n        (_this select 0) ctrlSetFade 1;\n        (_this select 0) ctrlCommit 0.8;\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\n};\n\nif (_bloodRemaining < 40) exitWith {\n    _bloodCtrl1 ctrlSetFade 0.2;\n    _bloodCtrl2 ctrlSetFade 0.85;\n    _bloodCtrl1 ctrlCommit 0.2;\n    _bloodCtrl2 ctrlCommit 0.2;\n\n    [{\n        (_this select 0) ctrlSetFade 1;\n        (_this select 1) ctrlSetFade 1;\n        (_this select 1) ctrlCommit 1;\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\n\n    [{\n        (_this select 0) ctrlCommit 0.8;\n    }, _fxBloodControls, 1.2] call CBA_fnc_waitAndExecute;\n};\n\nif (_bloodRemaining < 55) exitWith {\n    _bloodCtrl1 ctrlSetFade 0.2;\n    _bloodCtrl2 ctrlSetFade 0.7;\n    _bloodCtrl1 ctrlCommit 0.2;\n    _bloodCtrl2 ctrlCommit 0.2;\n\n    [{\n        (_this select 0) ctrlSetFade 1;\n        (_this select 1) ctrlSetFade 1;\n        (_this select 2) ctrlSetFade 1;\n        (_this select 1) ctrlCommit 1;\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\n\n    [{\n        (_this select 0) ctrlCommit 0.8;\n    }, _fxBloodControls, 1.2] call CBA_fnc_waitAndExecute;\n};\n\nif (_bloodRemaining < 70) exitWith {\n    _bloodCtrl1 ctrlSetFade 0.2;\n    _bloodCtrl2 ctrlSetFade 0.7;\n    _bloodCtrl3 ctrlSetFade 0.85;\n    _bloodCtrl1 ctrlCommit 0.2;\n    _bloodCtrl2 ctrlCommit 0.2;\n    _bloodCtrl3 ctrlCommit 0.2;\n\n    [{\n        (_this select 0) ctrlSetFade 1;\n        (_this select 1) ctrlSetFade 1;\n        (_this select 2) ctrlSetFade 1;\n        (_this select 2) ctrlCommit 1.5;\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\n\n    [{\n        (_this select 1) ctrlCommit 1;\n    }, _fxBloodControls, 1.7] call CBA_fnc_waitAndExecute;\n\n    [{\n        (_this select 0) ctrlCommit 0.8;\n    }, _fxBloodControls, 2.2] call CBA_fnc_waitAndExecute;\n};\n\n//default\n_bloodCtrl1 ctrlSetFade 0.2;\n_bloodCtrl2 ctrlSetFade 0.7;\n_bloodCtrl3 ctrlSetFade 0.7;\n_bloodCtrl1 ctrlCommit 0.2;\n_bloodCtrl2 ctrlCommit 0.2;\n_bloodCtrl3 ctrlCommit 0.2;\n\n[{\n    (_this select 0) ctrlSetFade 1;\n    (_this select 1) ctrlSetFade 1;\n    (_this select 2) ctrlSetFade 1;\n    (_this select 2) ctrlCommit 1.5;\n}, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\n\n[{\n    (_this select 1) ctrlCommit 1;\n}, _fxBloodControls, 1.7] call CBA_fnc_waitAndExecute;\n\n[{\n    (_this select 0) ctrlCommit 0.8;\n}, _fxBloodControls, 2.2] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_showBloodEffect"
      },
      {
        "fileName": "fnc_translateSelections.sqf",
        "content": "/*\n * Author: Glowbal\n * Translate selection names into medical usable hit selection names.\n * Aims to deal with the new hitpoint system introduced in Arma3 v1.50 and later.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: selection name <STRING>\n * 2: HitPoint Index/True to get hitpoint <NUMBER><BOOL>\n *\n * Return Value:\n * translated selection/hitpoint name <STRING>\n *\n * Example:\n * [bob, \"pelvis\", 4] call ace_medical_fnc_translateSelections\n * Returns \"body\"\n *\n * [bob, \"body\", true] call ace_medical_fnc_translateSelections\n * Returns \"HitBody\"\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define HEAD_SELECTIONS [\"face_hub\", \"neck\", \"head\"]\n#define HEAD_HITPOINTS [\"hitface\", \"hitneck\", \"hithead\"]\n#define TORSO_SELECTIONS [\"pelvis\", \"spine1\", \"spine2\", \"spine3\", \"body\"]\n#define TORSO_HITPOINTS [\"hitpelvis\", \"hitabdomen\", \"hitdiaphragm\", \"hitchest\", \"hitbody\"]\n#define L_ARM_SELECTIONS [\"hand_l\"]\n#define L_ARM_HITPOINTS [\"hitleftarm\", \"hand_l\"]\n#define R_ARM_SELECTIONS [\"hand_r\"]\n#define R_ARM_HITPOINTS [\"hitrightarm\", \"hand_r\"]\n#define L_LEG_SELECTIONS [\"leg_l\"]\n#define L_LEG_HITPOINTS [\"hitleftleg\", \"leg_l\"]\n#define R_LEG_SELECTIONS [\"leg_r\"]\n#define R_LEG_HITPOINTS [\"hitrightleg\", \"leg_r\"]\n\nparams [\"_unit\", \"_selection\", \"_hitPointIndex\"];\n\nif (_selection == \"\") exitWith {\"\"};\n\n//Get Selection from standard selection [\"head\",\"body\",\"hand_l\",\"hand_r\",\"leg_l\",\"leg_r\"]\nif (_hitPointIndex isEqualTo true) exitWith {\n    private _returnHitPoint = GVAR(HITPOINTS) select (GVAR(SELECTIONS) find _selection);\n    //If the selection is a valid hitpoint just return it:\n    if (!isNil {_unit getHitPointDamage _returnHitPoint}) exitWith {\n        _returnHitPoint;\n    };\n\n    //Those VR fuckers have weird limb hitpoints\n    private _hitPoints = switch (_selection) do {\n        case (\"hand_l\"): {L_ARM_HITPOINTS};\n        case (\"hand_r\"): {R_ARM_HITPOINTS};\n        case (\"leg_l\"): {L_LEG_HITPOINTS};\n        case (\"leg_r\"): {R_LEG_HITPOINTS};\n        case (\"head\"): {HEAD_HITPOINTS};\n        case (\"body\"): {TORSO_HITPOINTS};\n        default {[]};\n    };\n    {\n        if (!isNil {_unit getHitPointDamage _x}) exitWith {\n            _returnHitPoint = _x;\n        };\n    } forEach _hitPoints;\n    _returnHitPoint\n};\n\n\n//Get Selection from Selection/HitIndex:\n\nif (_selection in HEAD_SELECTIONS) exitWith {\"head\"};\nif (_selection in TORSO_SELECTIONS) exitWith {\"body\"};\n\n// Not necessary unless we get more hitpoints variants in an next arma update\n/*if (_selection in L_ARM_SELECTIONS) exitWith {\"hand_l\"};\nif (_selection in R_ARM_SELECTIONS) exitWith {\"hand_r\"};\nif (_selection in L_LEG_SELECTIONS) exitWith {\"leg_l\"};\nif (_selection in R_LEG_SELECTIONS) exitWith {\"leg_r\"};*/\n\n//Backup method to detect weird selections/hitpoints\nif ((_selection == \"?\") || {!(_selection in GVAR(SELECTIONS))}) exitWith {\n    if (_hitPointIndex < 0) exitWith {_selection};\n    private _hitPoint = toLower configName ((configProperties [(configFile >> \"CfgVehicles\" >> (typeOf _unit) >> \"HitPoints\")]) select _hitPointIndex);\n    TRACE_4(\"Weird sel/hit\", _unit, _selection, _hitPointIndex, _hitPoint);\n\n    if (_hitPoint in HEAD_HITPOINTS) exitWith {\"head\"};\n    if (_hitPoint in TORSO_HITPOINTS) exitWith {\"body\"};\n    if (_hitPoint in L_ARM_HITPOINTS) exitWith {\"hand_l\"};\n    if (_hitPoint in R_ARM_HITPOINTS) exitWith {\"hand_r\"};\n    if (_hitPoint in L_LEG_HITPOINTS) exitWith {\"leg_l\"};\n    if (_hitPoint in R_LEG_HITPOINTS) exitWith {\"leg_r\"};\n\n    _selection\n};\n\n_selection;\n",
        "functionName": "ace_medical_fnc_translateSelections"
      },
      {
        "fileName": "fnc_treatment_failure.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Glowbal\n * Callback when the treatment fails\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n * 4: Items available <ARRAY<STRING>>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"selectionname\", \"classname\", [\"bandage\"]] call ACE_medical_fnc_treatment_failure\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_args\"];\n_args params [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\", \"_usersOfItems\"];\n\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\n};\nif (vehicle _caller == _caller && {!(_caller call EFUNC(common,isSwimming))}) then {\n    private _lastAnim = _caller getVariable [QGVAR(treatmentPrevAnimCaller), \"\"];\n    //Don't play another medic animation (when player is rapidily treating)\n    TRACE_2(\"Reseting to old animation\", animationState player, _lastAnim);\n    switch (toLower _lastAnim) do {\n        case \"ainvpknlmstpslaywrfldnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWrflDnon\"};\n        case \"ainvppnemstpslaywrfldnon_medic\": {_lastAnim = \"AmovPpneMstpSrasWrflDnon\"};\n        case \"ainvpknlmstpslaywnondnon_medic\": {_lastAnim = \"AmovPknlMstpSnonWnonDnon\"};\n        case \"ainvppnemstpslaywpstdnon_medic\": {_lastAnim = \"AinvPpneMstpSlayWpstDnon\"};\n        case \"ainvpknlmstpslaywpstdnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWpstDnon\"};\n    };\n    [_caller, _lastAnim, 2] call EFUNC(common,doAnimation);\n};\n_caller setVariable [QGVAR(treatmentPrevAnimCaller), nil];\n\nprivate _weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnTreatment), []]);\nif ((_weaponSelect params [[\"_previousWeapon\", \"\"]]) && {(_previousWeapon != \"\") && {_previousWeapon in (weapons _caller)}}) then {\n    for \"_index\" from 0 to 299 do {\n        _caller action [\"SwitchWeapon\", _caller, _caller, _index];\n        //Just check weapon, muzzle and mode (ignore ammo in case they were reloading)\n        if (((weaponState _caller) select [0,3]) isEqualTo (_weaponSelect select [0,3])) exitWith {TRACE_1(\"Restoring\", (weaponState _caller));};\n        if ((weaponState _caller) isEqualTo [\"\",\"\",\"\",\"\",0]) exitWith {ERROR(\"weaponState not found\");};\n    };\n} else {\n    _caller action [\"SwitchWeapon\", _caller, _caller, 299];\n};\n\n{\n    _x params [\"_unit\", \"_item\"];\n    _unit addItem _item;\n} forEach _usersOfItems;\n\n// Record specific callback\nprivate _config = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className);\nif (GVAR(level) >= 2) then {\n    _config = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\n};\n\nprivate _callback = getText (_config >> \"callbackFailure\");\n_callback = if (isNil _callback) then {\n     compile _callback\n} else {\n    missionNamespace getVariable _callback\n};\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\n\n_args call _callback;\n",
        "functionName": "ace_medical_fnc_treatment_failure"
      },
      {
        "fileName": "fnc_treatment_success.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Glowbal\n * Callback when the treatment is completed\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n * 4: Items available <ARRAY<STRING>>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"selectionname\", \"classname\", [\"bandage\"]] call ACE_medical_fnc_treatment_success\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_args\"];\n_args params [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\", \"_usersOfItems\"];\n\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\n};\nif (vehicle _caller == _caller && {!(_caller call EFUNC(common,isSwimming))}) then {\n    private _lastAnim = _caller getVariable [QGVAR(treatmentPrevAnimCaller), \"\"];\n    //Don't play another medic animation (when player is rapidily treating)\n    TRACE_2(\"Reseting to old animation\", animationState player, _lastAnim);\n    switch (toLower _lastAnim) do {\n        case \"ainvpknlmstpslaywrfldnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWrflDnon\"};\n        case \"ainvppnemstpslaywrfldnon_medic\": {_lastAnim = \"AmovPpneMstpSrasWrflDnon\"};\n        case \"ainvpknlmstpslaywnondnon_medic\": {_lastAnim = \"AmovPknlMstpSnonWnonDnon\"};\n        case \"ainvppnemstpslaywpstdnon_medic\": {_lastAnim = \"AinvPpneMstpSlayWpstDnon\"};\n        case \"ainvpknlmstpslaywpstdnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWpstDnon\"};\n    };\n    [_caller, _lastAnim, 2] call EFUNC(common,doAnimation);\n};\n_caller setVariable [QGVAR(treatmentPrevAnimCaller), nil];\n\nprivate _weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnTreatment), []]);\nif ((_weaponSelect params [[\"_previousWeapon\", \"\"]]) && {(_previousWeapon != \"\") && {_previousWeapon in (weapons _caller)}}) then {\n    for \"_index\" from 0 to 299 do {\n        _caller action [\"SwitchWeapon\", _caller, _caller, _index];\n        //Just check weapon, muzzle and mode (ignore ammo in case they were reloading)\n        if (((weaponState _caller) select [0,3]) isEqualTo (_weaponSelect select [0,3])) exitWith {TRACE_1(\"Restoring\", (weaponState _caller));};\n        if ((weaponState _caller) isEqualTo [\"\",\"\",\"\",\"\",0]) exitWith {ERROR(\"weaponState not found\");};\n    };\n} else {\n    _caller action [\"SwitchWeapon\", _caller, _caller, 299];\n};\n\n// Record specific callback\nprivate _config = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className);\nif (GVAR(level) >= 2) then {\n    _config = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\n};\n\nprivate _callback = getText (_config >> \"callbackSuccess\");\nif (isNil _callback) then {\n    _callback = compile _callback;\n} else {\n    _callback = missionNamespace getVariable _callback;\n};\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\n\n//Get current blood loose on limb (for \"bloody\" litter)\nprivate _bloodLossOnSelection = 0;\nprivate _partNumber = ([_selectionName] call FUNC(selectionNameToNumber)) max 0;\n\n// Add all bleeding from wounds on selection\nprivate _openWounds = _target getvariable [QGVAR(openWounds), []];\n{\n    _x params [\"\", \"\", \"_selectionX\", \"_amountOf\", \"_percentageOpen\"];\n    if (_selectionX == _partNumber) then {\n        _bloodLossOnSelection = _bloodLossOnSelection + (_amountOf * _percentageOpen);\n    };\n} forEach _openWounds;\nTRACE_1(\"advanced\",_bloodLossOnSelection);\n\n_args call _callback;\n_args pushBack _bloodLossOnSelection;\n_args call FUNC(createLitter);\n\n//If we're not already tracking vitals, start:\nif (!(_target getVariable [QGVAR(addedToUnitLoop),false])) then {\n    [_target] call FUNC(addVitalLoop);\n};\n\n[\"ace_treatmentSucceded\", [_caller, _target, _selectionName, _className]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_medical_fnc_treatment_success"
      },
      {
        "fileName": "fnc_treatment.sqf",
        "content": "/*\n * Author: Glowbal, KoffeinFlummi\n * Starts the treatment process\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [medic, patient, \"SelectionName\",\"bandage\"] call ace_medical_fnc_treatment\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\"];\n\n// If the cursorMenu is open, the loading bar will fail. If we execute the function one frame later, it will work fine\nif (uiNamespace getVariable [QEGVAR(interact_menu,cursorMenuOpened),false]) exitwith {\n    [DFUNC(treatment), _this] call CBA_fnc_execNextFrame;\n};\n\nif !(_target isKindOf \"CAManBase\") exitWith {false};\n\nprivate _config = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className);\nif (GVAR(level) >= 2) then {\n    _config = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\n};\n\nif !(isClass _config) exitwith {false};\n\n// Allow self treatment check\nif (_caller == _target && {getNumber (_config >> \"allowSelfTreatment\") == 0}) exitwith {false};\n\nprivate _medicRequired = if (isNumber (_config >> \"requiredMedic\")) then {\n    getNumber (_config >> \"requiredMedic\");\n} else {\n    // Check for required class\n    if (isText (_config >> \"requiredMedic\")) exitwith {\n        missionNamespace getVariable [(getText (_config >> \"requiredMedic\")), 0];\n    };\n    0;\n};\n\nif !([_caller, _medicRequired] call FUNC(isMedic)) exitwith {false};\n\nprivate _allowedSelections = getArray (_config >> \"allowedSelections\");\nif !(\"All\" in _allowedSelections || {(_selectionName in _allowedSelections)}) exitwith {false};\n\n// Check item\nprivate _items = getArray (_config >> \"items\");\nif (count _items > 0 && {!([_caller, _target, _items] call FUNC(hasItems))}) exitwith {false};\n\nprivate _return = true;\nif (isText (_config >> \"Condition\")) then {\n    private _condition = getText(_config >> \"condition\");\n    if (_condition != \"\") then {\n        if (isnil _condition) then {\n            _condition = compile _condition;\n        } else {\n            _condition = missionNamespace getVariable _condition;\n        };\n        if (_condition isEqualType false) then {\n            _return = _condition;\n        } else {\n            _return = [_caller, _target, _selectionName, _className] call _condition;\n        };\n    };\n};\nif (!_return) exitwith {false};\n\nprivate _patientStateCondition = if (isText(_config >> \"patientStateCondition\")) then {\n    missionNamespace getVariable [getText(_config >> \"patientStateCondition\"), 0]\n} else {\n    getNumber(_config >> \"patientStateCondition\")\n};\nif (_patientStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitwith {false};\n\n// Check allowed locations\nprivate _locations = getArray (_config >> \"treatmentLocations\");\n\nif (\"All\" in _locations) then {\n    _return = true;\n} else {\n    private _medFacility = {([_caller] call FUNC(isInMedicalFacility)) || ([_target] call FUNC(isInMedicalFacility))};\n    private _medVeh = {([_caller] call FUNC(isInMedicalVehicle)) || ([_target] call FUNC(isInMedicalVehicle))};\n\n    {\n        if (_x == \"field\") exitwith {_return = true;};\n        if (_x == \"MedicalFacility\" && _medFacility) exitwith {_return = true;};\n        if (_x == \"MedicalVehicle\" && _medVeh) exitwith {_return = true;};\n        if !(isnil _x) exitwith {\n            private _val = missionNamespace getVariable _x;\n            if (_val isEqualType 0) then {\n                _return = switch (_val) do {\n                    case 0: {true}; //AdvancedMedicalSettings_anywhere\n                    case 1: {call _medVeh}; //AdvancedMedicalSettings_vehicle\n                    case 2: {call _medFacility}; //AdvancedMedicalSettings_facility\n                    case 3: {(call _medFacility) || {call _medVeh}}; //AdvancedMedicalSettings_vehicleAndFacility\n                    default {false}; //Disabled\n                };\n            };\n        };\n    } foreach _locations;\n};\n\nif !(_return) exitwith {false};\n\nprivate _usersOfItems = [];\nprivate _consumeItems = if (isNumber (_config >> \"itemConsumed\")) then {\n    getNumber (_config >> \"itemConsumed\");\n} else {\n    // Check for required class\n    if (isText (_config >> \"itemConsumed\")) exitwith {\n        missionNamespace getVariable [(getText (_config >> \"itemConsumed\")), 0];\n    };\n    0;\n};\nif (_consumeItems > 0) then {\n    _usersOfItems = ([_caller, _target, _items] call FUNC(useItems)) select 1;\n};\n\n// Parse the config for the progress callback\nprivate _callbackProgress = getText (_config >> \"callbackProgress\");\nif (_callbackProgress == \"\") then {\n    _callbackProgress = \"true\";\n};\nif (isNil _callbackProgress) then {\n    _callbackProgress = compile _callbackProgress;\n} else {\n    _callbackProgress = missionNamespace getVariable _callbackProgress;\n};\n\n// Patient Animation\nprivate _patientAnim = getText (_config >> \"animationPatient\");\nif (_target getVariable [\"ACE_isUnconscious\", false] && GVAR(allowUnconsciousAnimationOnTreatment)) then {\n    if !(animationState _target in (getArray (_config >> \"animationPatientUnconsciousExcludeOn\"))) then {\n        _patientAnim = getText (_config >> \"animationPatientUnconscious\");\n    };\n};\n\nif (_caller != _target && {vehicle _target == _target} && {_patientAnim != \"\"}) then {\n    if (_target getVariable [\"ACE_isUnconscious\", false]) then {\n        [_target, _patientAnim, 2, true] call EFUNC(common,doAnimation);\n    } else {\n        [_target, _patientAnim, 1, true] call EFUNC(common,doAnimation);\n    };\n};\n\n// Player Animation\nprivate _callerAnim = [getText (_config >> \"animationCaller\"), getText (_config >> \"animationCallerProne\")] select (stance _caller == \"PRONE\");\nif (_caller == _target) then {\n    _callerAnim = [getText (_config >> \"animationCallerSelf\"), getText (_config >> \"animationCallerSelfProne\")] select (stance _caller == \"PRONE\");\n};\n\n_caller setVariable [QGVAR(selectedWeaponOnTreatment), (weaponState _caller)];\n\n// Cannot use secondairy weapon for animation\nif (currentWeapon _caller == secondaryWeapon _caller) then {\n    _caller selectWeapon (primaryWeapon _caller);\n};\n\nprivate _wpn = [\"non\", \"rfl\", \"pst\"] select (1 + ([primaryWeapon _caller, handgunWeapon _caller] find (currentWeapon _caller)));\nprivate _callerAnim = [_callerAnim, \"[wpn]\", _wpn] call CBA_fnc_replace;\nif (vehicle _caller == _caller && {_callerAnim != \"\"}) then {\n    if (primaryWeapon _caller == \"\") then {\n        _caller addWeapon \"ACE_FakePrimaryWeapon\";\n    };\n    if (currentWeapon _caller == \"\") then {\n        _caller selectWeapon (primaryWeapon _caller); // unit always has a primary weapon here\n    };\n\n    if !(_caller call EFUNC(common,isSwimming)) then {\n        // Weapon on back also does not work underwater\n        if (isWeaponDeployed _caller) then {\n            TRACE_1(\"Weapon Deployed, breaking out first\",(stance _caller));\n            [_caller, \"\", 0] call EFUNC(common,doAnimation);\n        };\n\n        if ((stance _caller) == \"STAND\") then {\n            switch (_wpn) do {//If standing, end in a crouched animation based on their current weapon\n                case (\"rfl\"): {_caller setVariable [QGVAR(treatmentPrevAnimCaller), \"AmovPknlMstpSrasWrflDnon\"];};\n                case (\"pst\"): {_caller setVariable [QGVAR(treatmentPrevAnimCaller), \"AmovPknlMstpSrasWpstDnon\"];};\n                case (\"non\"): {_caller setVariable [QGVAR(treatmentPrevAnimCaller), \"AmovPknlMstpSnonWnonDnon\"];};\n            };\n        } else {\n            _caller setVariable [QGVAR(treatmentPrevAnimCaller), animationState _caller];\n        };\n        [_caller, _callerAnim] call EFUNC(common,doAnimation);\n    };\n};\n\n//Get treatment time\nprivate _treatmentTime = if (isNumber (_config >> \"treatmentTime\")) then {\n    getNumber (_config >> \"treatmentTime\");\n} else {\n    if (isText (_config >> \"treatmentTime\")) exitwith {\n        private _treatmentTimeConfig = getText(_config >> \"treatmentTime\");\n        if (isnil _treatmentTimeConfig) then {\n            _treatmentTimeConfig = compile _treatmentTimeConfig;\n        } else {\n            _treatmentTimeConfig = missionNamespace getVariable _treatmentTimeConfig;\n        };\n        if (_treatmentTimeConfig isEqualType 0) exitwith {\n            _treatmentTimeConfig;\n        };\n        [_caller, _target, _selectionName, _className] call _treatmentTimeConfig;\n    };\n    0;\n};\n\n// Start treatment\n[\n    _treatmentTime,\n    [_caller, _target, _selectionName, _className, _items, _usersOfItems],\n    DFUNC(treatment_success),\n    DFUNC(treatment_failure),\n    getText (_config >> \"displayNameProgress\"),\n    _callbackProgress,\n    [\"isNotInside\", \"isNotSwimming\"]\n] call EFUNC(common,progressBar);\n\n// Display Icon\nprivate _iconDisplayed = getText (_config >> \"actionIconPath\");\nif (_iconDisplayed != \"\") then {\n    [QGVAR(treatmentActionIcon), true, _iconDisplayed, [1,1,1,1], getNumber(_config >> \"actionIconDisplayTime\")] call EFUNC(common,displayIcon);\n};\n\n// handle display of text/hints\nprivate _displayText = \"\";\nif (_target != _caller) then {\n    _displayText = getText(_config >> \"displayTextOther\");\n} else {\n    _displayText = getText(_config >> \"displayTextSelf\");\n};\n\nif (_displayText != \"\") then {\n    [QEGVAR(common,displayTextStructured), [[_displayText, [_caller] call EFUNC(common,getName), [_target] call EFUNC(common,getName)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\n};\n\ntrue;\n",
        "functionName": "ace_medical_fnc_treatment"
      },
      {
        "fileName": "fnc_treatmentAdvanced_bandage.sqf",
        "content": "/*\n * Author: Glowbal\n * IV Treatment callback\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n * 4: Item <STRING>\n * 5: specific Spot <NUMBER> (default: -1)\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [medic, patient, \"Selectionname\", \"bandage\", \"bandage\", -1] call ace_medical_fnc_treatmentAdvanced_bandage\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\", \"\", [\"_specificSpot\", -1]];\n\n[_target, \"activity\", LSTRING(Activity_bandagedPatient), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n[_target, \"activity_view\", LSTRING(Activity_bandagedPatient), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\n\nif (local _target) then {\n    [QGVAR(treatmentAdvanced_bandageLocal), [_target, _className, _selectionName, _specificSpot]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(treatmentAdvanced_bandageLocal), [_target, _className, _selectionName, _specificSpot], _target] call CBA_fnc_targetEvent;\n};\n\n/*    {\n    if (_x != \"\") then {\n        [_target, _x] call FUNC(addToTriageCard);\n    };\n}forEach _items;*/\n\ntrue;\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_bandage"
      },
      {
        "fileName": "fnc_treatmentAdvanced_bandageLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * Handles the bandage of a patient.\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: Treatment classname <STRING>\n *\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [bob, \"classname\"] call ACE_medical_fnc_treatmentAdvanced_bandageLocal\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_bandage\", \"_selectionName\", [\"_specificClass\", -1]];\n\n// Ensure it is a valid bodypart\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\nif (_part < 0) exitWith {false};\n\n// Get the open wounds for this unit\nprivate _openWounds = _target getVariable [QGVAR(openWounds), []];\nif (count _openWounds == 0) exitWith {false}; // nothing to do here!\n\n// Get the default effectiveness for the used bandage\nprivate _config = (ConfigFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Bandaging\");\nprivate _effectiveness = getNumber (_config >> \"effectiveness\");\nif (isClass (_config >> _bandage)) then {\n    _config = (_config >> _bandage);\n    if (isNumber (_config >> \"effectiveness\")) then { _effectiveness = getNumber (_config >> \"effectiveness\");};\n};\n\n// Figure out which injury for this bodypart is the best choice to bandage\n// TODO also use up the remainder on left over injuries\nprivate _mostEffectiveSpot = 0;\nprivate _effectivenessFound = -1;\nprivate _mostEffectiveInjury = _openWounds select 0;\nprivate _exit = false;\n{\n    _x params [\"\", \"_classID\", \"_partX\"];\n    TRACE_2(\"OPENWOUND: \", _target, _x);\n    // Only parse injuries that are for the selected bodypart.\n    if (_partX == _part) then {\n        private _woundEffectiveness = _effectiveness;\n\n        // Select the classname from the wound classname storage\n        private _className = GVAR(woundClassNames) select _classID;\n\n        // Check if this wound type has attributes specified for the used bandage\n        if (isClass (_config >> _className)) then {\n            // Collect the effectiveness from the used bandage for this wound type\n            private _woundTreatmentConfig = (_config >> _className);\n            if (isNumber (_woundTreatmentConfig >> \"effectiveness\")) then {\n                _woundEffectiveness = getNumber (_woundTreatmentConfig >> \"effectiveness\");\n            };\n        } else {\n            //Basic medical bandage just has a base level config (same effectivenes for all wound types)\n            if (_bandage != \"Bandage\") then {\n                WARNING_2(\"No config for wound type [%1] config base [%2]\", _className, _config);\n            };\n        };\n\n        TRACE_2(\"Wound classes: \", _specificClass, _classID);\n        if (_specificClass == _classID) exitWith {\n            _effectivenessFound = _woundEffectiveness;\n            _mostEffectiveSpot = _forEachIndex;\n            _mostEffectiveInjury = _x;\n            _exit = true;\n        };\n\n        // Check if this is the currently most effective found.\n        if (_woundEffectiveness * ((_x select 4) * (_x select 3)) > _effectivenessFound * ((_mostEffectiveInjury select 4) * (_mostEffectiveInjury select 3))) then {\n            _effectivenessFound = _woundEffectiveness;\n            _mostEffectiveSpot = _forEachIndex;\n            _mostEffectiveInjury = _x;\n        };\n    };\n    if (_exit) exitWith {};\n} forEach _openWounds;\n\nif (_effectivenessFound == -1) exitWith {}; // Seems everything is patched up on this body part already..\n\n\n// TODO refactor this part\n// Find the impact this bandage has and reduce the amount this injury is present\nprivate _impact = if ((_mostEffectiveInjury select 3) >= _effectivenessFound) then {_effectivenessFound} else { (_mostEffectiveInjury select 3) };\n_mostEffectiveInjury set [ 3, ((_mostEffectiveInjury select 3) - _impact) max 0];\n_openWounds set [_mostEffectiveSpot, _mostEffectiveInjury];\n\n_target setVariable [QGVAR(openWounds), _openWounds, true];\n\n// Handle the reopening of bandaged wounds\nif (_impact > 0 && {GVAR(level) >= 2} && {GVAR(enableAdvancedWounds)}) then {\n    [_target, _impact, _part, _mostEffectiveSpot, _mostEffectiveInjury, _bandage] call FUNC(handleBandageOpening);\n};\n\n// If all wounds to a body part have been bandaged, reset damage to that body part to zero\n// so that the body part functions normally and blood is removed from the uniform.\n// Arma combines left and right arms into a single body part (HitHands), same with left and right legs (HitLegs).\n// Arms are actually hands.\nif (GVAR(healHitPointAfterAdvBandage) || {GVAR(level) < 2}) then {\n    // Get the list of the wounds the target is currently suffering from.\n    private _currentWounds = _target getVariable [QGVAR(openWounds), []];\n\n    // Tally of unbandaged wounds to each body part.\n    private _headWounds = 0;\n    private _bodyWounds = 0;\n    private _leftArmWounds = 0;\n    private _leftLegWounds = 0;\n    private _rightArmWounds = 0;\n    private _rightLegWounds = 0;\n\n    // Loop through all current wounds and add up the number of unbandaged wounds on each body part.\n    {\n        _x params [\"\", \"\", \"_bodyPart\", \"_numOpenWounds\", \"_bloodLoss\"];\n\n        // Use switch/case for early termination if wounded limb is found before all six are checked.\n        // Number of wounds multiplied by blood loss will return zero for a fully\n        // bandaged body part, not incrementing the wound counter; or it will return\n        // some other number which will increment the wound counter.\n        switch (_bodyPart) do {\n            // Head\n            case 0: {\n                _headWounds = _headWounds + (_numOpenWounds * _bloodLoss);\n            };\n\n            // Body\n            case 1: {\n                _bodyWounds = _bodyWounds + (_numOpenWounds * _bloodLoss);\n            };\n\n            // Left Arm\n            case 2: {\n                _leftArmWounds = _leftArmWounds + (_numOpenWounds * _bloodLoss);\n            };\n\n            // Right Arm\n            case 3: {\n                _rightArmWounds = _rightArmWounds + (_numOpenWounds * _bloodLoss);\n            };\n\n            // Left Leg\n            case 4: {\n                _leftLegWounds = _leftLegWounds + (_numOpenWounds * _bloodLoss);\n            };\n\n            // Right Leg\n            case 5: {\n                _rightLegWounds = _rightLegWounds + (_numOpenWounds * _bloodLoss);\n            };\n        };\n    } forEach _currentWounds;\n\n    // [\"head\", \"body\", \"hand_l\", \"hand_r\", \"leg_l\", \"leg_r\"]\n    private _bodyStatus = _target getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\n\n    // Any body part that has no wounds is healed to full health\n    if (_headWounds == 0) then {\n        _bodyStatus set [0, 0];\n    };\n    if (_bodyWounds == 0) then {\n        _bodyStatus set [1, 0];\n    };\n    if (_leftArmWounds == 0) then {\n        _bodyStatus set [2, 0];\n    };\n    if (_rightArmWounds == 0) then {\n        _bodyStatus set [3, 0];\n    };\n    if (_leftLegWounds == 0) then {\n        _bodyStatus set [4, 0];\n    };\n    if (_rightLegWounds == 0) then {\n        _bodyStatus set [5, 0];\n    };\n\n    _target setVariable [QGVAR(bodyPartStatus), _bodyStatus, true];\n\n    [_target] call FUNC(handleDamage_advancedSetDamage);\n};\n\ntrue;\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_bandageLocal"
      },
      {
        "fileName": "fnc_treatmentAdvanced_CPR.sqf",
        "content": "/*\n * Author: Glowbal\n * Callback for the CPR treatment action on success.\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [medic, patient, \"selectionName\", \"bandage\"] call ace_medical_fnc_treatmentAdvanced_CPR\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\n\nif (alive _target && {(_target getVariable [QGVAR(inCardiacArrest), false] || _target getVariable [QGVAR(inReviveState), false])}) then {\n    [_target, \"activity_view\", LSTRING(Activity_cpr), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n\n    if (local _target) then {\n        [QGVAR(treatmentAdvanced_CPRLocal), [_caller, _target]] call CBA_fnc_localEvent;\n    } else {\n        [QGVAR(treatmentAdvanced_CPRLocal), [_caller, _target], _target] call CBA_fnc_targetEvent;\n    };\n};\ntrue;\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_CPR"
      },
      {
        "fileName": "fnc_treatmentAdvanced_CPRLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * local Callback for the CPR treatment action on success.\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [medic, patient] call ace_medical_fnc_treatmentAdvanced_CPRLocal\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\",\"_target\"];\n\nif (_target getVariable [QGVAR(inReviveState), false]) then {\n    private _reviveStartTime = _target getVariable [QGVAR(reviveStartTime),0];\n    if (_reviveStartTime > 0) then {\n        _target setVariable [QGVAR(reviveStartTime), (_reviveStartTime + random(20)) min CBA_missionTime];\n    };\n};\n\nif (GVAR(level) > 1 && {(random 1) >= 0.6}) then {\n    _target setVariable [QGVAR(inCardiacArrest), nil,true];\n    _target setVariable [QGVAR(heartRate), 40];\n    _target setVariable [QGVAR(bloodPressure), [50,70]];\n};\n\n[_target, \"activity\", LSTRING(Activity_CPR), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n[_target, \"activity_view\", LSTRING(Activity_CPR), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\n\ntrue;\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_CPRLocal"
      },
      {
        "fileName": "fnc_treatmentAdvanced_fullHeal.sqf",
        "content": "/*\n * Author: Glowbal\n *\n *\n * Arguments:\n * 0: Caller <OBJECT>\n * 1: Target <OBJECT>\n * 2: SelectionName <STRING>\n * 3: ClassName <STRING>\n * 4: Item <UNKNOWN>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [bob, kevin, \"selection\", \"classname\", ] call ACE_medical_fnc_treatmentAdvanced_fullHeal\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\n\nif (local _target) then {\n    [QGVAR(treatmentAdvanced_fullHealLocal), [_caller, _target]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(treatmentAdvanced_fullHealLocal), [_caller, _target], _target] call CBA_fnc_targetEvent;\n};\n\ntrue;\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_fullHeal"
      },
      {
        "fileName": "fnc_treatmentAdvanced_fullHealLocal.sqf",
        "content": "/*\n * Author: Glowbal\n *\n *\n * Arguments:\n * 0: Caller <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_treatmentAdvanced_fullHealLocal\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\"];\n\nif (alive _target) exitWith {\n\n    _target setVariable [QGVAR(pain), 0, true];\n    _target setVariable [QGVAR(morphine), 0, true];\n    _target setVariable [QGVAR(bloodVolume), 100, true];\n\n    // tourniquets\n    _target setVariable [QGVAR(tourniquets), [0,0,0,0,0,0], true];\n\n    // wounds and injuries\n    _target setVariable [QGVAR(openWounds), [], true];\n    _target setVariable [QGVAR(bandagedWounds), [], true];\n    _target setVariable [QGVAR(internalWounds), [], true];\n\n    // vitals\n    _target setVariable [QGVAR(heartRate), 80];\n    _target setVariable [QGVAR(heartRateAdjustments), []];\n    _target setVariable [QGVAR(bloodPressure), [80, 120]];\n    _target setVariable [QGVAR(peripheralResistance), 100];\n\n    // fractures\n    _target setVariable [QGVAR(fractures), []];\n\n    // IVs\n    _target setVariable [QGVAR(ivBags), nil, true];\n\n    // damage storage\n    _target setVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0], true];\n\n    // airway\n    _target setVariable [QGVAR(airwayStatus), 100, true];\n    _target setVariable [QGVAR(airwayOccluded), false, true];\n    _target setVariable [QGVAR(airwayCollapsed), false, true];\n\n    // generic medical admin\n    _target setVariable [QGVAR(inCardiacArrest), false, true];\n    _target setVariable [QGVAR(inReviveState), false, true];\n    _target setVariable [\"ACE_isUnconscious\", false, true];\n    _target setVariable [QGVAR(hasLostBlood), 0, true];\n    _target setVariable [QGVAR(isBleeding), false, true];\n    _target setVariable [QGVAR(hasPain), false, true];\n    _target setVariable [QGVAR(painSuppress), 0, true];\n\n    // medication\n    private _allUsedMedication = _target getVariable [QGVAR(allUsedMedication), []];\n    {\n       _target setVariable [_x select 0, nil];\n    } forEach _allUsedMedication;\n\n    // Resetting damage\n    _target setDamage 0;\n\n    [_target, \"activity\", LSTRING(Activity_fullHeal), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n    [_target, \"activity_view\", LSTRING(Activity_fullHeal), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\n};\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_fullHealLocal"
      },
      {
        "fileName": "fnc_treatmentAdvanced_fullHealTreatmentTime.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the personal aid kit treatment time based on amount of damage to heal\n *\n * Arguments:\n * unit <OBJECT>\n *\n * Return Value:\n * treatment time <NUMBER>\n *\n * Example:\n * [_target] call ace_medical_fnc_treatmentAdvanced_fullHealTreatmentTime\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _totalDamage = 0;\n\n{\n    _totalDamage = _totalDamage + _x;\n} forEach (_this getVariable [QGVAR(bodyPartStatus), []]);\n\n(10 max (_totalDamage * 10) min 120)\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_fullHealTreatmentTime"
      },
      {
        "fileName": "fnc_treatmentAdvanced_medication.sqf",
        "content": "/*\n * Author: Glowbal\n * IV Treatment callback\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n * 4: Items Used <ARRAY>\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [medic, patient, \"selectionName\", \"bandage\", 2] call ace_medical_fnc_treatmentAdvanced_medication\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\nTRACE_5(\"params\",_caller,_target,_selectionName,_className,_items);\n\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\n\n[QGVAR(treatmentAdvanced_medicationLocal), [_target, _className, _part], [_target]] call CBA_fnc_targetEvent;\n\n{\n    if (_x != \"\") then {\n        [_target, _x] call FUNC(addToTriageCard);\n        [_target, \"activity\", LSTRING(Activity_usedItem), [[_caller, false, true] call EFUNC(common,getName), getText (configFile >> \"CfgWeapons\" >> _x >> \"displayName\")]] call FUNC(addToLog);\n        [_target, \"activity_view\", LSTRING(Activity_usedItem), [[_caller, false, true] call EFUNC(common,getName), getText (configFile >> \"CfgWeapons\" >> _x >> \"displayName\")]] call FUNC(addToLog);\n    };\n} forEach _items;\n\n\ntrue;\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_medication"
      },
      {
        "fileName": "fnc_treatmentAdvanced_medicationLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * Handles the medication given to a patient.\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: Treatment classname <STRING>\n * 2: Injection Site Part Number <NUMBER>\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [medic, \"bandage\", 2] call ace_medical_fnc_treatmentAdvanced_medicationLocal\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_className\", \"_partNumber\"];\nTRACE_3(\"params\",_target,_className,_partNumber);\n\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\nif ((_tourniquets select _partNumber) > 0) exitWith {\n    TRACE_1(\"unit has tourniquets blocking blood flow on injection site\",_tourniquets);\n    private _delayedMedications = _target getVariable [QGVAR(occludedMedications), []];\n    _delayedMedications pushBack _this;\n    _target setVariable [QGVAR(occludedMedications), _delayedMedications, true];\n    true\n};\n\n// We have added a new dose of this medication to our system, so let's increase it\nprivate _varName = format[QGVAR(%1_inSystem), _className];\nprivate _currentInSystem = _target getVariable [_varName, 0];\n_target setVariable [_varName, _currentInSystem + 1];\n\n// Find the proper attributes for the used medication\nprivate _medicationConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Medication\");\nprivate _painReduce = getNumber (_medicationConfig >> \"painReduce\");\nprivate _hrIncreaseLow = getArray (_medicationConfig >> \"hrIncreaseLow\");\nprivate _hrIncreaseNorm = getArray (_medicationConfig >> \"hrIncreaseNormal\");\nprivate _hrIncreaseHigh = getArray (_medicationConfig >> \"hrIncreaseHigh\");\nprivate _timeInSystem = getNumber (_medicationConfig >> \"timeInSystem\");\nprivate _maxDose = getNumber (_medicationConfig >> \"maxDose\");\nprivate _viscosityChange = getNumber (_medicationConfig >> \"viscosityChange\");\nprivate _hrCallback = getText (_medicationConfig >> \"hrCallback\");\n\nprivate _inCompatableMedication = [];\nif (isClass (_medicationConfig >> _className)) then {\n    _medicationConfig = (_medicationConfig >> _className);\n    if (isNumber (_medicationConfig >> \"painReduce\")) then { _painReduce = getNumber (_medicationConfig >> \"painReduce\");};\n    if (isArray (_medicationConfig >> \"hrIncreaseLow\")) then { _hrIncreaseLow = getArray (_medicationConfig >> \"hrIncreaseLow\"); };\n    if (isArray (_medicationConfig >> \"hrIncreaseNormal\")) then { _hrIncreaseNorm = getArray (_medicationConfig >> \"hrIncreaseNormal\"); };\n    if (isArray (_medicationConfig >> \"hrIncreaseHigh\")) then { _hrIncreaseHigh = getArray (_medicationConfig >> \"hrIncreaseHigh\"); };\n    if (isNumber (_medicationConfig >> \"timeInSystem\")) then { _timeInSystem = getNumber (_medicationConfig >> \"timeInSystem\"); };\n    if (isNumber (_medicationConfig >> \"maxDose\")) then { _maxDose = getNumber (_medicationConfig >> \"maxDose\"); };\n    if (isArray (_medicationConfig >> \"inCompatableMedication\")) then { _inCompatableMedication = getArray (_medicationConfig >> \"inCompatableMedication\"); };\n    if (isNumber (_medicationConfig >> \"viscosityChange\")) then { _viscosityChange = getNumber (_medicationConfig >> \"viscosityChange\"); };\n    if (isText (_medicationConfig >> \"hrCallback\")) then { _hrCallback = getText (_medicationConfig >> \"hrCallback\"); };\n};\nif (isNil _hrCallback) then {\n    _hrCallback = compile _hrCallback;\n} else {\n    _hrCallback = missionNamespace getVariable _hrCallback;\n};\nif (!(_hrCallback isEqualType {})) then {_hrCallback = {TRACE_1(\"callback was NOT code\",_hrCallback)};};\n\n// Adjust the heart rate based upon config entry\nprivate _heartRate = _target getVariable [QGVAR(heartRate), 70];\nif (alive _target) then {\n    if (_heartRate > 0) then {\n        if (_heartRate <= 45) then {\n            [_target, ((_hrIncreaseLow select 0) + random ((_hrIncreaseLow select 1) - (_hrIncreaseLow select 0))), (_hrIncreaseLow select 2), _hrCallback] call FUNC(addHeartRateAdjustment);\n        } else {\n            if (_heartRate > 120) then {\n                [_target, ((_hrIncreaseHigh select 0) + random ((_hrIncreaseHigh select 1) - (_hrIncreaseHigh select 0))), (_hrIncreaseHigh select 2), _hrCallback] call FUNC(addHeartRateAdjustment);\n            } else {\n                [_target, ((_hrIncreaseNorm select 0) + random ((_hrIncreaseNorm select 1) - (_hrIncreaseNorm select 0))), (_hrIncreaseNorm select 2), _hrCallback] call FUNC(addHeartRateAdjustment);\n            };\n        };\n    };\n};\n\nif (_painReduce > 0) then {\n    // Reduce pain\n    private _painSuppress = _target getVariable [QGVAR(painSuppress), 0];\n    _target setVariable [QGVAR(painSuppress), (_painSuppress + _painReduce) max 0];\n    if (!GVAR(painIsOnlySuppressed)) then {\n        _pain = _target getVariable [QGVAR(pain), 0];\n        _target setVariable [QGVAR(pain), (_pain - _painReduce) max 0, true];\n    };\n};\n\nprivate _resistance = _target getVariable [QGVAR(peripheralResistance), 100];\n_target setVariable [QGVAR(peripheralResistance), (_resistance + _viscosityChange) max 0];\n\n// Call back to ensure that the medication is decreased over time\n[_target, _classname, _varName, _maxDose, _timeInSystem, _inCompatableMedication, _viscosityChange, _painReduce] call FUNC(onMedicationUsage);\n\ntrue\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_medicationLocal"
      },
      {
        "fileName": "fnc_treatmentAdvanced_surgicalKit_onProgress.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Handles treatment via surgical kit per frame\n *\n * Arguments:\n * 0: Arguments <ARRAY>\n *  0: Caller <OBJECT>\n *  1: Target <OBJECT>\n * 1: Elapsed Time <NUMBER>\n * 2: Total Time <NUMBER>\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [[bob, kevin], 5, 5] call ACE_medical_fnc_treatmentAdvanced_surgicalKit_onProgress\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_elapsedTime\", \"_totalTime\"];\n_args params [\"_caller\", \"_target\"];\n\nprivate _bandagedWounds = _target getVariable [QGVAR(bandagedWounds), []];\n\n//In case two people stitch up one patient and the last wound has already been closed we can stop already\nif (count _bandagedWounds == 0) exitWith { false };\n\n//Has enough time elapsed that we can close another wound?\nif ((_totalTime - _elapsedTime) <= (((count _bandagedWounds) - 1) * 5)) then {\n    _bandagedWounds deleteAt 0;\n    _target setVariable [QGVAR(bandagedWounds), _bandagedWounds, true];\n};\n\ntrue\n",
        "functionName": "ace_medical_fnc_treatmentAdvanced_surgicalKit_onProgress"
      },
      {
        "fileName": "fnc_treatmentBasic_bloodbag.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Callback when the bloodbag treatment is complete\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: Selection Name <STRING>\n * 3: Treatment classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"selection\", \"classname\"] call ACE_medical_fnc_treatmentBasic_bloodbag\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_treatmentClassname\"];\n\nif (local _target) then {\n    [QGVAR(treatmentBasic_bloodbagLocal), [_target, _treatmentClassname]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(treatmentBasic_bloodbagLocal), [_target, _treatmentClassname], _target] call CBA_fnc_targetEvent;\n};\n",
        "functionName": "ace_medical_fnc_treatmentBasic_bloodbag"
      },
      {
        "fileName": "fnc_treatmentBasic_bloodbagLocal.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Local callback when the bloodbag treatment is complete\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: Treatment Classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"classname\"] call ACE_medical_fnc_treatmentBasic_bloodbagLocal\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define BLOODBAGHEAL 70\n\nparams [\"_target\", \"_treatmentClassname\"];\n\nprivate _bloodAdded = switch (true) do {\n    case (_treatmentClassname == \"BloodIV_250\"): {0.25 * BLOODBAGHEAL};\n    case (_treatmentClassname == \"BloodIV_500\"): {0.5 * BLOODBAGHEAL};\n    default {BLOODBAGHEAL};\n};\n\nprivate _blood = ((_target getVariable [QGVAR(bloodVolume), 100]) + _bloodAdded) min 100;\n_target setVariable [QGVAR(bloodVolume), _blood, true];\n",
        "functionName": "ace_medical_fnc_treatmentBasic_bloodbagLocal"
      },
      {
        "fileName": "fnc_treatmentBasic_epipen.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Callback when the epipen treatment is complete\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: Selection Name <STRING>\n * 3: Treatment classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"selection\", \"classname\"] call ACE_medical_fnc_treatmentBasic_epipen\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\",\"_className\"];\n\n[_target, false] call FUNC(setUnconscious);\n",
        "functionName": "ace_medical_fnc_treatmentBasic_epipen"
      },
      {
        "fileName": "fnc_treatmentBasic_morphine.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Callback when the morphine treatment is complete\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: Selection Name <STRING>\n * 3: Treatment classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"selection\", \"classname\"] call ACE_medical_fnc_treatmentBasic_morphine\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define MORPHINEHEAL 0.4\n\nparams [\"_caller\", \"_target\"];\n\nif (local _target) then {\n    [QGVAR(treatmentBasic_morphineLocal), [_target]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(treatmentBasic_morphineLocal), [_target], _target] call CBA_fnc_targetEvent;\n};\n",
        "functionName": "ace_medical_fnc_treatmentBasic_morphine"
      },
      {
        "fileName": "fnc_treatmentBasic_morphineLocal.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Local callback when the morphine treatment is complete\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ACE_medical_fnc_treatmentBasic_morphineLocal\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define MORPHINEHEAL 0.4\n\nparams [\"_target\"];\n\n// reduce pain, pain sensitivity\nprivate _morphine = ((_target getVariable [QGVAR(morphine), 0]) + MORPHINEHEAL) min 1;\n_target setVariable [QGVAR(morphine), _morphine, true];\n\nprivate _pain = ((_target getVariable [QGVAR(pain), 0]) - MORPHINEHEAL) max 0;\n_target setVariable [QGVAR(pain), _pain, true];\n\n// @todo overdose\n",
        "functionName": "ace_medical_fnc_treatmentBasic_morphineLocal"
      },
      {
        "fileName": "fnc_treatmentIV.sqf",
        "content": "/*\n * Author: Glowbal\n * Patient IV Treatment callback\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [medic, patient, \"SelectionName\", \"bandage\"] call ace_medical_fnc_treatmentIV\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\n\nif (_items isEqualTo []) exitWith {false};\n\n_items params [\"_removeItem\"];\nif (local _target) then {\n    [QGVAR(treatmentIVLocal), [_target, _className]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(treatmentIVLocal), [_target, _className], _target] call CBA_fnc_targetEvent;\n};\n\n[_target, _removeItem] call FUNC(addToTriageCard);\n[_target, \"activity\", LSTRING(Activity_gaveIV), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n[_target, \"activity_view\", LSTRING(Activity_gaveIV), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\n\ntrue\n",
        "functionName": "ace_medical_fnc_treatmentIV"
      },
      {
        "fileName": "fnc_treatmentIVLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * IV Treatment local callback\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: Treatment classname <STRING>\n *\n *\n * Return Value:\n * None\n *\n * Example:\n * [medic, \"Classname\"] call ace_medical_fnc_treatmentIVLocal\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_treatmentClassname\"];\n\nprivate _bloodVolume = _target getVariable [QGVAR(bloodVolume), 100];\nif (_bloodVolume >= 100) exitWith {};\n\n// Find the proper attributes for the used IV\nprivate _config = (configFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"IV\");\nprivate _volumeAdded = getNumber (_config >> \"volume\");\nprivate _typeOf = getText (_config >> \"type\");\n\nif (isClass (_config >> _treatmentClassname)) then {\n    _config = (_config >> _treatmentClassname);\n    if (isNumber (_config >> \"volume\")) then { _volumeAdded = getNumber (_config >> \"volume\");};\n    if (isText (_config >> \"type\")) then { _typeOf = getText (_config >> \"type\"); };\n} else {\n    ERROR(\"IV Treatment Classname not found\");\n};\n\nprivate _bloodBags = _target getVariable [QGVAR(ivBags), []];\n_bloodBags pushBack [_volumeAdded]; // Future BagType: [_volumeAdded, _typeOf]\n_target setVariable [QGVAR(ivBags), _bloodBags, true];\n",
        "functionName": "ace_medical_fnc_treatmentIVLocal"
      },
      {
        "fileName": "fnc_treatmentTourniquet.sqf",
        "content": "/*\n * Author: Glowbal\n * Apply a tourniquet to the patient\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: SelectionName <STRING>\n * 3: Treatment classname <STRING>\n *\n *\n * Return Value:\n * Succesful treatment started <BOOL>\n *\n * Example:\n * [bob, kevin, \"selection\", \"classname\"] call ACE_medical_fnc_treatmentTourniquet\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\n\nif (count _items == 0) exitWith {false};\n\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\nif (_part == 0 || _part == 1) exitWith {\n    // [QEGVAR(common,displayTextStructured), [\"You cannot apply a CAT on this body part!\"], [_caller]] call CBA_fnc_targetEvent;\n    false;\n};\n\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\nif ((_tourniquets select _part) > 0) exitWith {\n   _output = \"There is already a tourniquet on this body part!\"; // TODO localization\n   [QEGVAR(common,displayTextStructured), [_output, 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\n    false;\n};\n\nprivate _removeItem = _items select 0;\nif (local _target) then {\n    [QGVAR(treatmentTourniquetLocal), [_target, _removeItem, _selectionName]] call CBA_fnc_localEvent;\n} else {\n    [QGVAR(treatmentTourniquetLocal), [_target, _removeItem, _selectionName], _target] call CBA_fnc_targetEvent;\n};\n\n[_target, _removeItem] call FUNC(addToTriageCard);\n[_target, \"activity\", LSTRING(Activity_appliedTourniquet), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\n[_target, \"activity_view\", LSTRING(Activity_appliedTourniquet), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\n\ntrue\n",
        "functionName": "ace_medical_fnc_treatmentTourniquet"
      },
      {
        "fileName": "fnc_treatmentTourniquetLocal.sqf",
        "content": "/*\n * Author: Glowbal\n * Apply a tourniquet to the patient, local callback.\n *\n * Arguments:\n * 0: The patient <OBJECT>\n * 1: Item used classname <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"classname\"] call ACE_medical_fnc_treatmentTourniquetLocal\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_tourniquetItem\", \"_selectionName\"];\n\n//If we're not already tracking vitals, start:\n[_target] call FUNC(addVitalLoop);\n\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\n\n// Place a tourniquet on the bodypart\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\n_tourniquets set [_part, CBA_missionTime];\n_target setVariable [QGVAR(tourniquets), _tourniquets, true];\n",
        "functionName": "ace_medical_fnc_treatmentTourniquetLocal"
      },
      {
        "fileName": "fnc_unconsciousPFH.sqf",
        "content": "/*\n * Author: Glowbal\n * PFH logic for unconscious state\n *\n * Arguments:\n * 0: PFEH - <ARRAY>\n *      0: The unit that will be put in an unconscious state <OBJECT>\n *      1: unitPos (stance) <STRING>\n *      2: Starting Time <NUMBER>\n *      3: Minimum Waiting Time <NUMBER>\n *      4: Has Moved Out <BOOL>\n *      5: Parachute Check <BOOL>\n * 1: PFEH ID <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[unit,\"pos\", 5, 5, true, false], 5], \"classname\"] call ace_medical_fnc_unconsciousPFH\n *\n * Public: yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_idPFH\"];\n_args params [\"_unit\", \"_originalPos\", \"_startingTime\", \"_minWaitingTime\", \"_hasMovedOut\", \"_parachuteCheck\"];\n\nTRACE_6(\"ACE_DEBUG_Unconscious_PFH\",_unit, _originalPos, _startingTime, _minWaitingTime, _hasMovedOut, _parachuteCheck);\n\nif (!alive _unit) exitWith {\n    if (\"ACE_FakePrimaryWeapon\" in (weapons _unit)) then {\n        TRACE_1(\"Removing fake weapon [on death]\",_unit);\n        _unit removeWeapon \"ACE_FakePrimaryWeapon\";\n    };\n    if (GVAR(moveUnitsFromGroupOnUnconscious)) then {\n        [_unit, false, \"ACE_isUnconscious\", side group _unit] call EFUNC(common,switchToGroupSide);\n    };\n    [_unit, \"setCaptive\", \"ace_unconscious\", false] call EFUNC(common,statusEffect_set);\n    [_unit, false] call EFUNC(common,disableAI);\n    //_unit setUnitPos _originalPos;\n\n    [_unit, \"isUnconscious\"] call EFUNC(common,unmuteUnit);\n    [\"ace_unconscious\", [_unit, false]] call CBA_fnc_globalEvent;\n\n    TRACE_3(\"ACE_DEBUG_Unconscious_Exit\",_unit, (!alive _unit) , \"ace_unconscious\");\n\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// In case the unit is no longer in an unconscious state, we are going to check if we can already reset the animation\nif !(_unit getVariable [\"ACE_isUnconscious\",false]) exitWith {\n    TRACE_7(\"ACE_DEBUG_Unconscious_PFH\",_unit, _args, [_unit] call FUNC(isBeingCarried), [_unit] call FUNC(isBeingDragged), _idPFH, _unit getVariable QGVAR(unconsciousArguments),animationState _unit);\n    // TODO, handle this with carry instead, so we can remove the PFH here.\n    // Wait until the unit isn't being carried anymore, so we won't end up with wierd animations\n    if !(([_unit] call FUNC(isBeingCarried)) || ([_unit] call FUNC(isBeingDragged))) then {\n        if (\"ACE_FakePrimaryWeapon\" in (weapons _unit)) then {\n            TRACE_1(\"Removing fake weapon [on wakeup]\",_unit);\n            _unit removeWeapon \"ACE_FakePrimaryWeapon\";\n        };\n\n        if (vehicle _unit == _unit) then {\n            if (animationState _unit == \"AinjPpneMstpSnonWrflDnon\") then {\n                [_unit,\"AinjPpneMstpSnonWrflDnon_rolltofront\", 2] call EFUNC(common,doAnimation);\n                [_unit,\"amovppnemstpsnonwnondnon\", 1] call EFUNC(common,doAnimation);\n            } else {\n                [_unit,\"amovppnemstpsnonwnondnon\", 2] call EFUNC(common,doAnimation);\n            };\n        } else {\n            private _vehicle = vehicle _unit;\n            private _oldVehicleAnimation = _unit getVariable [QGVAR(vehicleAwakeAnim), []];\n            private _awakeInVehicleAnimation = \"\";\n            if (((count _oldVehicleAnimation) > 0) && {(_oldVehicleAnimation select 0) == _vehicle}) then {\n                _awakeInVehicleAnimation = _oldVehicleAnimation select 1;\n            };\n            //Make sure we have a valid, non-terminal animation:\n            if ((_awakeInVehicleAnimation != \"\") && {(getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _awakeInVehicleAnimation >> \"terminal\")) == 0}) then {\n                [_unit, _awakeInVehicleAnimation, 2] call EFUNC(common,doAnimation);\n            } else {\n                //Don't have a valid animation saved, reset the unit animation with a moveInXXX\n                TRACE_1(\"No Valid Animation, doing seat reset\", _awakeInVehicleAnimation);\n                private _slotInfo = [];\n                {if ((_x select 0) == _unit) exitWith {_slotInfo = _x;};} forEach (fullCrew _vehicle);\n                if (_slotInfo isEqualTo []) exitWith {ERROR(\"No _slotInfo?\");};\n                //Move the unit out:\n                _unit setPosASL ((getPosASL _unit) vectorAdd [0,0,100]);\n                //Move the unit back into old seat:\n                if ((_slotInfo select 1) == \"driver\") then {\n                    _unit moveInDriver _vehicle;\n                } else {\n                    if ((_slotInfo select 1) == \"cargo\") then {\n                        _unit moveInCargo [_vehicle, (_slotInfo select 2)];\n                    } else {\n                        _unit moveInTurret [_vehicle, (_slotInfo select 3)];\n                    };\n                };\n            };\n        };\n        _unit setVariable [QGVAR(vehicleAwakeAnim), nil];\n\n        [\"ace_unconscious\", [_unit, false]] call CBA_fnc_globalEvent;\n        // EXIT PFH\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n    if (!_hasMovedOut) then {\n        // Reset the unit back to the previous captive state.\n        [_unit, \"setCaptive\", \"ace_unconscious\", false] call EFUNC(common,statusEffect_set);\n\n        // Swhich the unit back to its original group\n        //Unconscious units shouldn't be put in another group #527:\n        if (GVAR(moveUnitsFromGroupOnUnconscious)) then {\n            [_unit, false, \"ACE_isUnconscious\", side group _unit] call EFUNC(common,switchToGroupSide);\n        };\n        [_unit, false] call EFUNC(common,disableAI);\n        _unit setUnitPos _originalPos; // This is not position but stance (DOWN, MIDDLE, UP)\n\n        _unit setUnconscious false;\n\n        [_unit, \"isUnconscious\"] call EFUNC(common,unmuteUnit);\n\n        // ensure this statement runs only once\n        _args set [4, true];\n    };\n};\n\nif (_parachuteCheck) then {\n    if !(vehicle _unit isKindOf \"ParachuteBase\") then {\n        [_unit, [_unit] call EFUNC(common,getDeathAnim), 1, true] call EFUNC(common,doAnimation);\n        _args set [5, false];\n    };\n};\n\nif (!local _unit) exitWith {\n    TRACE_6(\"ACE_DEBUG_Unconscious_PFH\",_unit, _args, _startingTime, _minWaitingTime, _idPFH, _unit getVariable QGVAR(unconsciousArguments));\n    _args set [3, _minWaitingTime - (CBA_missionTime - _startingTime)];\n    _unit setVariable [QGVAR(unconsciousArguments), _args, true];\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\n// Ensure we are waiting at least a minimum period before checking if we can wake up the unit again, allows for temp knock outs\nif ((CBA_missionTime - _startingTime) >= _minWaitingTime) exitWith {\n    TRACE_2(\"ACE_DEBUG_Unconscious_Temp knock outs\",_unit, [_unit] call FUNC(getUnconsciousCondition));\n    if (!([_unit] call FUNC(getUnconsciousCondition))) then {\n        _unit setVariable [\"ACE_isUnconscious\", false, true];\n    };\n};\n",
        "functionName": "ace_medical_fnc_unconsciousPFH"
      },
      {
        "fileName": "fnc_useItem.sqf",
        "content": "/*\n * Author: Glowbal\n * Use Equipment if any is available. Priority: 1) Medic, 2) Patient. If in vehicle: 3) Crew\n *\n * Arguments:\n * 0: Medic <OBJECT>\n * 1: Patient <OBJECT>\n * 2: Item <STRING>\n *\n * Return Value:\n * 0: success <BOOL>\n * 1: Unit <OBJECT>\n *\n * Example:\n * [unit, patient, \"bandage\"] call ace_repair_fnc_useItem\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_medic\", \"_patient\", \"_item\"];\n\nif (isNil QGVAR(setting_allowSharedEquipment)) then {\n    GVAR(setting_allowSharedEquipment) = true;\n};\n\nif (GVAR(setting_allowSharedEquipment) && {[_patient, _item] call EFUNC(common,hasItem)}) exitWith {\n    if (local _patient) then {\n        [\"ace_useItem\", [_patient, _item]] call CBA_fnc_localEvent;\n    } else {\n        [\"ace_useItem\", [_patient, _item], _patient] call CBA_fnc_targetEvent;\n    };\n    [true, _patient];\n};\n\nif ([_medic, _item] call EFUNC(common,hasItem)) exitWith {\n    if (local _medic) then {\n        [\"ace_useItem\", [_medic, _item]] call CBA_fnc_localEvent;\n    } else {\n        [\"ace_useItem\", [_medic, _item], _medic] call CBA_fnc_targetEvent;\n    };\n    [true, _medic];\n};\n\nprivate _return = [false, objNull];\nif ([vehicle _medic] call FUNC(isMedicalVehicle) && {vehicle _medic != _medic}) then {\n    private _crew = crew vehicle _medic;\n    {\n        if ([_medic, _x] call FUNC(canAccessMedicalEquipment) && {([_x, _item] call EFUNC(common,hasItem))}) exitWith {\n            _return = [true, _x];\n            if (local _x) then {\n                [\"ace_useItem\", [_x, _item]] call CBA_fnc_localEvent;\n            } else {\n                [\"ace_useItem\", [_x, _item], _x] call CBA_fnc_targetEvent;\n            };\n        };\n    } forEach _crew;\n};\n\n_return\n",
        "functionName": "ace_medical_fnc_useItem"
      },
      {
        "fileName": "fnc_useItems.sqf",
        "content": "/*\n * Author: Glowbal\n * Use Equipment items if any is available. Priority: 1) Medic, 2) Patient. If in vehicle: 3) Crew\n *\n * Arguments:\n * 0: Medic <OBJECT>\n * 1: Patient <OBJECT>\n * 2: Items <ARRAY<STRING>>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, patient, [\"bandage\"]] call ace_medical_fnc_useItems\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_medic\", \"_patient\", \"_items\"];\n\nprivate _itemsUsedBy = [];\n{\n    // handle a one of type use item\n    if (_x isEqualType []) then {\n        {\n            private _itemUsedInfo = [_medic, _patient, _x] call FUNC(useItem);\n            if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushBack [(_itemUsedInfo select 1), _x]};\n        } forEach _x;\n    };\n\n    // handle required item\n    if (_x isEqualType \"\") then {\n        private _itemUsedInfo = [_medic, _patient, _x] call FUNC(useItem);\n        if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushBack [(_itemUsedInfo select 1), _x]};\n    };\n} forEach _items;\n\n[count _items == count _itemsUsedBy, _itemsUsedBy];\n",
        "functionName": "ace_medical_fnc_useItems"
      },
      {
        "fileName": "fnc_vitalLoop.sqf",
        "content": "/*\n * Author: Glowbal, esteldunedain\n * Vital loop for a unit.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Time of last computation <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 5] call ACE_medical_fnc_vitalLoop\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_lastTime\"];\n\n// If the unit died the loop is finished\nif (!alive _unit) exitWith {};\n\n// If locality changed, broadcast the last medical state and finish the local loop\nif (!local _unit) exitWith {\n    if (GVAR(level) >= 2) then {\n        _unit setVariable [QGVAR(heartRate), _unit getVariable [QGVAR(heartRate), 80], true];\n        _unit setVariable [QGVAR(bloodPressure), _unit getVariable [QGVAR(bloodPressure), [80, 120]], true];\n    };\n    _unit setVariable [QGVAR(bloodVolume), _unit getVariable [QGVAR(bloodVolume), 100], true];\n};\n\n// Handle unit vitals\n[_unit, CBA_missionTime - _lastTime] call FUNC(handleUnitVitals);\n\n// Play injured sounds\nprivate _pain = _unit getVariable [QGVAR(pain), 0];\nif (_pain > (_unit getVariable [QGVAR(painSuppress), 0])) then {\n    // This introduces wierd unconscious behaviour for basic medical and possibly also advanced.\n    // TODO This is disabled as it's considered non critical code.\n    // We will need to decide if we want unconscious triggered on high pain levels or if we can get rid of this entirely.\n    /*if (_pain > 0.7 && {random(1) > 0.6}) then {\n        [_unit] call FUNC(setUnconscious);\n    };*/\n\n    [_unit, _pain] call FUNC(playInjuredSound);\n};\n\n// Schedule the loop to be executed again 1 sec later\n[DFUNC(vitalLoop), [_unit, CBA_missionTime], 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_medical_fnc_vitalLoop"
      }
    ]
  },
  {
    "component": "medical_ai",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"settingsInitialized\", GVAR(enabledFor));\n    if (GVAR(enabledFor) == 0) exitWith {}; // 0: disabled\n    if ((GVAR(enabledFor) == 1) && {!isServer} && {hasInterface}) exitWith {}; // 1: Don't Run on non-hc Clients\n    \n    // Only run for AI that does not have to deal with advanced medical\n    if (EGVAR(medical,enableFor) == 1 || {hasInterface && {EGVAR(medical,level) == 2}}) exitWith {};\n\n    [\"ace_firedNonPlayer\", {\n        _unit setVariable [QGVAR(lastFired), CBA_missionTime];\n    }] call CBA_fnc_addEventHandler;\n\n    if (hasInterface) then {\n        [\"ace_unconscious\", {\n            params [\"_unit\", \"_unconscious\"];\n            if (!_unconscious || {_unit != ACE_player}) exitWith {};\n\n            private _medic = objNull;\n            {\n                if ((!isPlayer _x) && {[_x] call EFUNC(medical,isMedic)}) exitWith {\n                    _medic = _x;\n                };\n            } forEach (units _unit);\n            if (isNull _medic) exitWith {};\n\n            private _healQueue = _medic getVariable [QGVAR(healQueue), []];\n            _healQueue pushBack _unit;\n            _medic setVariable [QGVAR(healQueue), _healQueue];\n        }] call CBA_fnc_addEventHandler;\n    };\n\n    GVAR(statemachine) = [configFile >> \"ACE_Medical_AI_StateMachine\"] call CBA_statemachine_fnc_createFromConfig;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canRequestMedic.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if there is a medic available in the unit's group.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Can request medic <BOOL>\n *\n * Example:\n * call ACE_medical_ai_fnc_canRequestMedic\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Note: Although an unconscious unit cannot call for a medic itself,\n//   we ignore this here. We need to \"notice\" the medic that he should\n//   treat other units, or else he won't do anything on his own.\n\nif ([_this] call EFUNC(medical,isMedic) || {vehicle _this != _this}) exitWith {false};\n\n{\n    if ([_x] call EFUNC(medical,isMedic) && {!([_x] call EFUNC(common,isPlayer))}) exitWith {\n        _this setVariable [QGVAR(assignedMedic), _x];\n        true\n    };\n    false\n} forEach (units _this);\n",
        "functionName": "ace_medical_ai_fnc_canRequestMedic"
      },
      {
        "fileName": "fnc_healSelf.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Makes the unit heal itself.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_medical_ai_fnc_healSelf\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Player will have to do this manually of course\nif ([_this] call EFUNC(common,isPlayer)) exitWith {};\n// Can't heal self when unconscious\nif (_this getVariable [\"ACE_isUnconscious\", false]) exitWith {};\n// Check if we're still treating\nif ((_this getVariable [QGVAR(treatmentOverAt), CBA_missionTime]) > CBA_missionTime) exitWith {};\n\nprivate _needsBandaging = ([_this] call EFUNC(medical,getBloodLoss)) > 0;\nprivate _needsMorphine  = (_this getVariable [QEGVAR(medical,pain), 0]) > 0.2;\n\nswitch (true) do {\n    case _needsBandaging: {\n        // Select first wound and bandage it\n        private _openWounds = _this getVariable [QEGVAR(medical,openWounds), []];\n        private _partIndex = {\n            _x params [\"\", \"\", \"_index\", \"_amount\", \"_percentage\"];\n            if (_amount * _percentage > 0) exitWith {\n                _index\n            };\n        } forEach _openWounds;\n        private _selection = [\"head\",\"body\",\"hand_l\",\"hand_r\",\"leg_l\",\"leg_r\"] select _partIndex;\n        [_this, \"Bandage\", _selection] call EFUNC(medical,treatmentAdvanced_bandageLocal);\n\n        #ifdef DEBUG_MODE_FULL\n            systemChat format [\"%1 is bandaging selection %2\", _this, _selection];\n        #endif\n\n        // Play animation\n        [_this, true, true] call FUNC(playTreatmentAnim);\n        _this setVariable [QGVAR(treatmentOverAt), CBA_missionTime + 5];\n    };\n    case _needsMorphine: {\n        [_this] call EFUNC(medical,treatmentBasic_morphineLocal);\n        [_this, false, true] call FUNC(playTreatmentAnim);\n        _this setVariable [QGVAR(treatmentOverAt), CBA_missionTime + 2];\n\n        #ifdef DEBUG_MODE_FULL\n            systemChat format [\"%1 is giving himself morphine\", _this];\n        #endif\n    };\n};\n",
        "functionName": "ace_medical_ai_fnc_healSelf"
      },
      {
        "fileName": "fnc_healUnit.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Makes a medic heal the next unit that needs treatment.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_medical_ai_fnc_healUnit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Can't heal other units when unconscious\nif (_this getVariable [\"ACE_isUnconscious\", false]) exitWith {};\n// Check if we're still treating\nif ((_this getVariable [QGVAR(treatmentOverAt), CBA_missionTime]) > CBA_missionTime) exitWith {};\n\n// Find next unit to treat\nprivate _healQueue = _this getVariable [QGVAR(healQueue), []];\nprivate _target = _healQueue select 0;\n\n// If unit died or was healed, be lazy and wait for the next tick\nif (isNull _target || {!alive _target} || {!(_target call FUNC(isInjured))}) exitWith {\n    _target forceSpeed -1;\n    _healQueue deleteAt 0;\n    _this getVariable [QGVAR(healQueue), _healQueue];\n    _this forceSpeed -1;\n    // return to formation instead of going where the injured unit was if it healed itself in the mean time\n    _this doFollow leader _this;\n    _this setVariable [QGVAR(movingToInjured), false];\n\n    #ifdef DEBUG_MODE_FULL\n        systemChat format [\"%1 finished healing %2\", _this, _target];\n    #endif\n};\n\n// Move to target...\nif (_this distance _target > 2) exitWith {\n    if !(_this getVariable [QGVAR(movingToInjured), false]) then {\n        _this setVariable [QGVAR(movingToInjured), true];\n        _this doMove getPosATL _target;\n    };\n};\n_this setVariable [QGVAR(movingToInjured), false];\n\n// ...and make sure medic and target don't move\n_this forceSpeed 0;\n_target forceSpeed 0;\n\nprivate _needsBandaging = ([_target] call EFUNC(medical,getBloodLoss)) > 0;\nprivate _needsMorphine  = (_target getVariable [QEGVAR(medical,pain), 0]) > 0.2;\nprivate _needsEpinephrine = _target getVariable [\"ACE_isUnconscious\", false];\n\nswitch (true) do {\n    case _needsBandaging: {\n        // Select first wound and bandage it\n        private _openWounds = _target getVariable [QEGVAR(medical,openWounds), []];\n        private _partIndex = {\n            _x params [\"\", \"\", \"_index\", \"_amount\", \"_percentage\"];\n            if (_amount * _percentage > 0) exitWith {\n                _index\n            };\n        } forEach _openWounds;\n        private _selection = [\"head\",\"body\",\"hand_l\",\"hand_r\",\"leg_l\",\"leg_r\"] select _partIndex;\n        [_this, _target, _selection, \"Bandage\"] call EFUNC(medical,treatmentAdvanced_bandage);\n\n        #ifdef DEBUG_MODE_FULL\n            systemChat format [\"%1 is bandaging selection %2 on %3\", _this, _selection, _target];\n        #endif\n\n        // Play animation\n        [_this, true, false] call FUNC(playTreatmentAnim);\n        _this setVariable [QGVAR(treatmentOverAt), CBA_missionTime + 5];\n    };\n    case _needsMorphine: {\n        [_this, _target] call EFUNC(medical,treatmentBasic_morphine);\n        [_this, false, false] call FUNC(playTreatmentAnim);\n        _this setVariable [QGVAR(treatmentOverAt), CBA_missionTime + 2];\n\n        #ifdef DEBUG_MODE_FULL\n            systemChat format [\"%1 is giving %2 morphine\", _this, _target];\n        #endif\n    };\n    case _needsEpinephrine: {\n        [_this, _target] call EFUNC(medical,treatmentBasic_epipen);\n        [_this, false, false] call FUNC(playTreatmentAnim);\n        _this setVariable [QGVAR(treatmentOverAt), CBA_missionTime + 2];\n\n        #ifdef DEBUG_MODE_FULL\n            systemChat format [\"%1 is using an epipen on %2\", _this, _target];\n        #endif\n    };\n};\n",
        "functionName": "ace_medical_ai_fnc_healUnit"
      },
      {
        "fileName": "fnc_isInjured.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if a unit needs treatment.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Does unit need treatment <BOOL>\n *\n * Example:\n * call ACE_medical_ai_fnc_isInjured\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif !(alive _this) exitWith {false};\n\n((_this getVariable [QEGVAR(medical,pain), 0] > 0.2) || {[_this] call EFUNC(medical,getBloodLoss) > 0 || {_this getVariable [\"ACE_isUnconscious\", false]}})\n",
        "functionName": "ace_medical_ai_fnc_isInjured"
      },
      {
        "fileName": "fnc_isSafe.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if a unit is currently considered safe enough to treat itself.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Is unit safe enough <BOOL>\n *\n * Example:\n * call ACE_medical_ai_fnc_isSafe\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(getSuppression _this == 0) && {CBA_missionTime - (_this getVariable [QGVAR(lastFired), -30]) > 30}\n",
        "functionName": "ace_medical_ai_fnc_isSafe"
      },
      {
        "fileName": "fnc_playTreatmentAnim.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Plays the corresponding treatment animation.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Is bandage <BOOL>\n * 2: Is self treatment <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, true, true] call ACE_medical_ai_fnc_playTreatmentAnim\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\", \"_isBandage\", \"_isSelfTreatment\"];\n\nif (vehicle _unit != _unit) exitWith {};\n\nprivate _animConfig = if (_isBandage) then {\n    configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> \"Bandage\";\n} else {\n    configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> \"Morphine\";\n};\n\nprivate _configProperty = \"animationCaller\";\nif (_isSelfTreatment) then {\n    _configProperty = _configProperty + \"Self\";\n};\nif (stance _unit == \"PRONE\") then {\n    _configProperty = _configProperty + \"Prone\";\n};\n\nprivate _anim = getText (_animConfig >> _configProperty);\nprivate _wpn = switch (true) do {\n    case ((currentWeapon _unit) == \"\"): {\"non\"};\n    case ((currentWeapon _unit) == (primaryWeapon _unit)): {\"rfl\"};\n    case ((currentWeapon _unit) == (handgunWeapon _unit)): {\"pst\"};\n    default {\"non\"};\n};\n_anim = [_anim, \"[wpn]\", _wpn] call CBA_fnc_replace;\n\n[_unit, _anim] call EFUNC(common,doAnimation);\n",
        "functionName": "ace_medical_ai_fnc_playTreatmentAnim"
      },
      {
        "fileName": "fnc_requestMedic.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Sends a request to the units assigned medic to heal it.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_medical_ai_fnc_requestMedic\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _assignedMedic = _this getVariable QGVAR(assignedMedic);\nprivate _healQueue = _assignedMedic getVariable [QGVAR(healQueue), []];\n_healQueue pushBack _this;\n_assignedMedic setVariable [QGVAR(healQueue), _healQueue];\n\n#ifdef DEBUG_MODE_FULL\n    systemChat format [\"%1 requested %2 for medical treatment\", _this, _assignedMedic];\n#endif\n",
        "functionName": "ace_medical_ai_fnc_requestMedic"
      },
      {
        "fileName": "fnc_wasRequested.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Checks if the unit was requested to treat another unit.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Was requested <BOOL>\n *\n * Example:\n * call ACE_medical_ai_fnc_wasRequested\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _healQueue = _this getVariable [QGVAR(healQueue), []];\n!(_healQueue isEqualTo [])\n",
        "functionName": "ace_medical_ai_fnc_wasRequested"
      }
    ]
  },
  {
    "component": "medical_blood",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nGVAR(useAceMedical) = [\"ace_medical\"] call EFUNC(common,isModLoaded);\n\n// To support public API regardless of component settings\n[QGVAR(spurt), {\n    _this call FUNC(spurt);\n}] call CBA_fnc_addEventHandler;\n\nif (isServer) then {\n    GVAR(bloodDrops) = [];\n\n    [QGVAR(bloodDropCreated), {\n        params [\"_bloodDrop\"];\n        GVAR(bloodDrops) pushBack _bloodDrop;\n        if (count GVAR(bloodDrops) >= MAX_BLOOD_OBJECTS) then {\n            private _deletedBloodDrop = GVAR(bloodDrops) deleteAt 0;\n            deleteVehicle _deletedBloodDrop;\n        };\n\n        [{deleteVehicle _this}, _bloodDrop, BLOOD_OBJECT_LIFETIME] call CBA_fnc_waitAndExecute;\n    }] call CBA_fnc_addEventHandler;\n};\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"settingsInitialized\", GVAR(enabledFor));\n    if (GVAR(enabledFor) == 0) exitWith {}; // 0: disabled\n    if ((GVAR(enabledFor) == 1) && {!hasInterface}) exitWith {}; // 1: enabledFor_OnlyPlayers\n\n    private _listcode = if (GVAR(enabledFor) == 1) then {\n        {[ACE_player] select {[_x] call FUNC(isBleeding)}} // ace_player is only possible local player\n    } else {\n        {allUnits select {(local _x) && {[_x] call FUNC(isBleeding)}}}; // filter all local bleeding units\n    };\n    \n    private _stateMachine = [_listcode, true] call CBA_statemachine_fnc_create;\n    [_stateMachine, {call FUNC(onBleeding)}, {}, {}, \"Bleeding\"] call CBA_statemachine_fnc_addState;\n\n\n    [\"CAManBase\", \"hit\", {\n        params [\"_unit\"];\n        if (GVAR(enabledFor) == 1 && {!isPlayer _unit && {_unit != ACE_player}}) exitWith {};\n        _this call FUNC(hit);\n    }] call CBA_fnc_addClassEventHandler;\n\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// blood object model namespace\nGVAR(models) = [] call CBA_fnc_createNamespace;\n\n{\n    _x params [\"_name\", \"_model\"];\n\n    // createSimpleObject expects a path without the leading slash\n    if ((_model select [0,1]) isEqualTo \"\\\") then {\n        _model = _model select [1];\n    };\n\n    GVAR(models) setVariable [_name, _model];\n} forEach [\n    // higher number means bigger model\n    [\"blooddrop_1\", QPATHTOF(data\\ace_drop_1.p3d)],\n    [\"blooddrop_2\", QPATHTOF(data\\ace_drop_2.p3d)],\n    [\"blooddrop_3\", QPATHTOF(data\\ace_drop_3.p3d)],\n    [\"blooddrop_4\", QPATHTOF(data\\ace_drop_4.p3d)]\n];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_createBlood.sqf",
        "content": "/*\n * Author: Glowbal\n * Spawn a blood drop.\n * Available blood drop classes are blooddrop_1 through blooddrop_4.\n *\n * Arguments:\n * 0: classname of blood drop <OBJECT>\n * 1: Position <ARRAY>\n *\n * Return Value:\n * Created blood drop <OBJECT>\n *\n * Example:\n * [\"blooddrop_2\", getPos player] call ace_medical_blood_fnc_createBlood\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_type\", \"_pos\"];\nTRACE_2(\"creating blood\",_type,_pos);\n\nprivate _model = GVAR(models) getVariable _type;\n\nprivate _object = createSimpleObject [_model, [0,0,0]];\n_object setDir random 360;\n_object setPos _pos;\n\n[QGVAR(bloodDropCreated), [_object]] call CBA_fnc_serverEvent;\n\n_object\n",
        "functionName": "ace_medical_blood_fnc_createBlood"
      },
      {
        "fileName": "fnc_hit.sqf",
        "content": "/*\n * Author: Glowbal\n * Handle unit hit eventhandler\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: caused by <OBJECT>\n * 2: damage <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, 5] call ACE_medical_blood_fnc_hit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_causedBy\", \"_damage\"];\n\nif (((vehicle _unit) != _unit) && {!((vehicle _unit) isKindOf \"StaticWeapon\")}) exitWith {}; // Don't bleed on ground if mounted\n\nif (isNull _causedBy) exitWith { // won't be able to calculate the direction properly, so instead we pick something at random\n    [QGVAR(spurt), [_unit, random 360, _damage]] call CBA_fnc_serverEvent;\n};\n\n// Calculate bulletDirection\nprivate _bulletDir = _unit getDir _causedBy;\n\n[QGVAR(spurt), [_unit, _bulletDir, _damage]] call CBA_fnc_serverEvent;\n",
        "functionName": "ace_medical_blood_fnc_hit"
      },
      {
        "fileName": "fnc_isBleeding.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if is bleeding\n *\n * Arguments:\n * 0: unit <TYPE>\n *\n * Return Value:\n * is Bleeding <BOOL>\n *\n * Example:\n * [UNIT] call ace_medical_blood_fnc_isBleeding\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (GVAR(useAceMedical)) exitWith {\n    _unit getVariable [QEGVAR(medical,isBleeding), false];\n};\nalive _unit && {getDammage _unit > 0.3};\n",
        "functionName": "ace_medical_blood_fnc_isBleeding"
      },
      {
        "fileName": "fnc_onBleeding.sqf",
        "content": "/*\n * Author: Glowbal\n * handle bleeding state (state machine)\n *\n * Arguments:\n * 0: unit <TYPE>\n *\n * Return Value:\n * is Bleeding <BOOL>\n *\n * Example:\n * [UNIT] call ace_medical_blood_fnc_onBleeding\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (((vehicle _unit) != _unit) && {!((vehicle _unit) isKindOf \"StaticWeapon\")}) exitWith {}; // Don't bleed on ground if mounted\n\nprivate _lastTime = _unit getVariable [QGVAR(lastTime), -10];\nprivate _bloodLoss = (if (GVAR(useAceMedical)) then {([_unit] call EFUNC(medical,getBloodLoss)) * 2.5} else {getDammage _unit * 2}) min 6;\n\nif ((CBA_missionTime - _lastTime) + _bloodLoss >= 8 + random 2) then {\n    _unit setVariable [QGVAR(lastTime), CBA_missionTime];\n\n    private _position = getPosASL _unit;\n    _position = _position vectorAdd [\n        random 0.4 - 0.2,\n        random 0.4 - 0.2,\n        0\n    ];\n    _position set [2, 0];\n\n    private _bloodDrop = [\"blooddrop_1\", \"blooddrop_2\", \"blooddrop_3\", \"blooddrop_4\"] select floor (_bloodLoss min 3);\n    [_bloodDrop, _position, getDir _unit] call FUNC(createBlood);\n};\n",
        "functionName": "ace_medical_blood_fnc_onBleeding"
      },
      {
        "fileName": "fnc_spurt.sqf",
        "content": "/*\n * Author: Sickboy\n * Spurt blood on the ground\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: direction <NUMBER>\n * 2: damage <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [UNIT, random 360, 1] call ace_medical_blood_fnc_spurt\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n#define MAXIMUM_DROPS 4\n#define DISTANCE_BETWEEN_DROPS 0.20\n#define OFFSET 0.25\n\nparams [\"_unit\", \"_dir\", \"_damage\"];\n_damage = _damage min 1;\n\nprivate _distanceBetweenDrops = DISTANCE_BETWEEN_DROPS * _damage;\nprivate _offset = OFFSET + _distanceBetweenDrops;\nprivate _pos = _unit getPos [_offset, _dir];\n[\"blooddrop_2\", _pos, _dir] call FUNC(createBlood);\n\nprivate _dropAmount = ceil (MAXIMUM_DROPS * _damage);\nif (_dropAmount > 1) then {\n    for \"_i\" from 2 to _dropAmount do {\n        _pos = _pos getPos [_distanceBetweenDrops, _dir];\n        [\"blooddrop_1\", _pos, _dir] call FUNC(createBlood);\n    };\n};\n",
        "functionName": "ace_medical_blood_fnc_spurt"
      }
    ]
  },
  {
    "component": "medical_menu",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(MenuPFHID) = -1;\nGVAR(lastOpenedOn) = -1;\nGVAR(pendingReopen) = false;\n\n[\"ace_treatmentSucceded\", {\n    if (GVAR(openAfterTreatment) && {GVAR(pendingReopen)}) then {\n        GVAR(pendingReopen) = false;\n        [{\n            [GVAR(INTERACTION_TARGET)] call FUNC(openMenu);\n        }, []] call CBA_fnc_execNextFrame;\n    };\n}] call CBA_fnc_addEventHandler;\n\n[\"ACE3 Common\", QGVAR(displayMenuKeyPressed), localize LSTRING(DisplayMenuKey),\n{\n    private _target = cursorTarget;\n    if (!((_target isKindOf \"CAManBase\") && {[ACE_player, _target] call FUNC(canOpenMenu)})) then {_target = ACE_player};\n\n    // Conditions: canInteract\n    if !([ACE_player, _target, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    if !([ACE_player, _target] call FUNC(canOpenMenu)) exitWith {false};\n\n    // Statement\n    [_target] call FUNC(openMenu);\n    false\n},\n{\n    if (CBA_missionTime - GVAR(lastOpenedOn) > 0.5) exitWith {\n        [objNull] call FUNC(openMenu);\n    };\n    false\n},\n[35, [false, false, false]], false, 0] call CBA_fnc_addKeybind;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(INTERACTION_TARGET) = objNull;\nGVAR(actionsOther) = [];\nGVAR(actionsSelf) = [];\nGVAR(selectedBodyPart) = 0;\n\ncall FUNC(collectActions);\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canOpenMenu.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if ACE_player can Open the medical menu\n *\n * Arguments:\n * 0: Caller <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Can open <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_medical_menu_fnc_canOpenMenu\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\"];\n\n(alive _caller)\n&& {!isNull _target}\n&& {((_caller distance _target) < GVAR(maxRange)) || {(vehicle _caller) == (vehicle _target)}} //for now, ignore range when in same vehicle\n&& {(GVAR(allow) == 1) || {(GVAR(allow) == 2) && {(vehicle _caller != _caller) || {vehicle _target != _target}}}}\n&& {(GVAR(useMenu) == 1) || {(GVAR(useMenu) == 2) && {(vehicle _caller != _caller) || {vehicle _target != _target}}}}\n",
        "functionName": "ace_medical_menu_fnc_canOpenMenu"
      },
      {
        "fileName": "fnc_collectActions.sqf",
        "content": "/*\n * Author: Glowbal\n * Collect treatment actions from medical config\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_medical_menu_fnc_collectActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _configBasic = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\");\nprivate _configAdvanced = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\");\n\nprivate _fnc_compileActionsLevel = {\n    params [\"_config\"];\n    private _actions = [];\n\n    {\n        if (isClass _x) then {\n            private _displayName = getText (_x >> \"displayName\");\n            private _category = getText (_x >> \"category\");\n            private _condition = format[QUOTE([ARR_4(ACE_player, GVAR(INTERACTION_TARGET), EGVAR(medical,SELECTIONS) select GVAR(selectedBodyPart), '%1')] call DEFUNC(medical,canTreatCached)), configName _x];\n            private _statement = format[QUOTE([ARR_4(ACE_player, GVAR(INTERACTION_TARGET), EGVAR(medical,SELECTIONS) select GVAR(selectedBodyPart), '%1')] call DEFUNC(medical,treatment)), configName _x];\n            _actions pushBack [_displayName, _category, compile _condition, compile _statement];\n        };\n        nil\n    } count (\"true\" configClasses _config);\n\n    _actions;\n};\n\nGVAR(actionsBasic) = [_configBasic] call _fnc_compileActionsLevel;\nGVAR(actionsAdvanced) = [_configAdvanced] call _fnc_compileActionsLevel;\n\n//Manually add the drag actions, if dragging exists.\nif ([\"ace_dragging\"] call EFUNC(common,isModLoaded)) then {\n    private _condition = {\n        (ACE_player != GVAR(INTERACTION_TARGET)) && {[ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,canDrag)}\n    };\n    private _statement = {\n        GVAR(pendingReopen) = false; //No medical_treatmentSuccess event after drag, so don't want this true\n        [ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,startDrag);\n    };\n    GVAR(actionsBasic) pushBack [localize ELSTRING(dragging,Drag), \"drag\", _condition, _statement];\n    GVAR(actionsAdvanced) pushBack [localize ELSTRING(dragging,Drag), \"drag\", _condition, _statement];\n\n    private _condition = {\n        (ACE_player != GVAR(INTERACTION_TARGET)) && {[ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,canCarry)}\n    };\n    private _statement = {\n        GVAR(pendingReopen) = false; //No medical_treatmentSuccess event after drag, so don't want this true\n        [ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,startCarry);\n    };\n    GVAR(actionsBasic) pushBack [localize ELSTRING(dragging,Carry), \"drag\", _condition, _statement];\n    GVAR(actionsAdvanced) pushBack [localize ELSTRING(dragging,Carry), \"drag\", _condition, _statement];\n};\n",
        "functionName": "ace_medical_menu_fnc_collectActions"
      },
      {
        "fileName": "fnc_getTreatmentOptions.sqf",
        "content": "/*\n * Author: Glowbal\n * Grab available treatment options for given category\n *\n * Arguments:\n * 0: The medic <OBJECT>\n * 1: The patient <OBJECT>\n * 2: Category name <STRING>\n *\n * Return Value:\n * Available actions <ARRAY>\n *\n * Example:\n * [ACE_player, poor_dude, \"some category\"] call ace_medical_menu_fnc_getTreatmentOptions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\", \"_name\"];\n\nif (!([ACE_player, _target, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith))) exitWith {[]};\n\nprivate _actions = if (EGVAR(medical,level) == 2) then {\n    GVAR(actionsAdvanced);\n} else {\n    GVAR(actionsBasic);\n};\n\nprivate _collectedActions = [];\nprivate _bodyPart = EGVAR(medical,SELECTIONS) select GVAR(selectedBodyPart);\n{\n    _x params [\"\", \"_currentCategory\", \"_currentCondition\"];\n    if (_name == _currentCategory && {call _currentCondition}) then {\n        _collectedActions pushBack _x;\n    };\n    nil\n} count _actions;\n\n_collectedActions;\n",
        "functionName": "ace_medical_menu_fnc_getTreatmentOptions"
      },
      {
        "fileName": "fnc_handleUI_DisplayOptions.sqf",
        "content": "/*\n * Author: Glowbal\n * Display the available treatment options in category\n *\n * Arguments:\n * 0: Category name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"some category\"] call ace_medical_menu_fnc_handleUI_DisplayOptions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define START_IDC 20\n#define END_IDC 27\n#define AMOUNT_OF_ENTRIES (count _entries)\n\nif (!hasInterface) exitWith{};\n\nparams [\"_name\"];\n\ndisableSerialization;\n\nprivate _display = uiNamespace getVariable QGVAR(medicalMenu);\nif (isNil \"_display\") exitWith {}; // no valid dialog present\n\nif (_name isEqualTo \"toggle\") exitWith {\n    private _newTarget = ACE_player;\n    //If we are on the player, and only if our old target is still valid, switch to it:\n    if ((GVAR(INTERACTION_TARGET) == ACE_player) &&\n            {[ACE_player, GVAR(INTERACTION_TARGET_PREVIOUS), [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)} &&\n            {[ACE_player, GVAR(INTERACTION_TARGET_PREVIOUS)] call FUNC(canOpenMenu)}) then {\n        _newTarget = GVAR(INTERACTION_TARGET_PREVIOUS);\n    };\n\n    GVAR(INTERACTION_TARGET_PREVIOUS) = GVAR(INTERACTION_TARGET);\n\n    closeDialog 0;\n    [{\n        [_this select 0] call FUNC(openMenu);\n    }, [_newTarget], 0.1] call CBA_fnc_waitAndExecute;\n};\n\n// Clean the dropdown options list from all actions\nfor [{_x = START_IDC}, {_x <= END_IDC}, {_x = _x + 1}] do {\n    private _ctrl = (_display displayCtrl (_x));\n    _ctrl ctrlSetText \"\";\n    _ctrl ctrlShow false;\n    _ctrl ctrlSetEventHandler [\"ButtonClick\",\"\"];\n    _ctrl ctrlSetTooltip \"\";\n    _ctrl ctrlCommit 0;\n};\n\nGVAR(LatestDisplayOptionMenu) = _name;\n\n// The triage card has no options available\nlbClear 212;\nif (_name isEqualTo \"triage\") exitWith {\n\n    ctrlEnable [212, true];\n    private _log = GVAR(INTERACTION_TARGET) getVariable [QEGVAR(medical,triageCard), []];\n    private _triageCardTexts = [];\n    {\n        _x params [\"_item\", \"_amount\", \"_time\"];\n        private _message = _item;\n        if (isClass(configFile >> \"CfgWeapons\" >> _item)) then {\n            _message = getText(configFile >> \"CfgWeapons\" >> _item >> \"DisplayName\");\n        } else {\n            if (isLocalized _message) then {\n                _message = localize _message;\n            };\n        };\n        _triageCardTexts pushBack format[\"%1x - %2 (%3m)\", _amount, _message, round((CBA_missionTime - _time) / 60)];\n        nil;\n    } count _log;\n\n    if (count _triageCardTexts == 0) exitWith {\n        lbAdd [212,(localize ELSTRING(medical,TriageCard_NoEntry))];\n    };\n    {\n        lbAdd [212,_x];\n        nil;\n    }count _triageCardTexts;\n};\n\nctrlEnable [212, false];\n\n_entries = [ACE_player, GVAR(INTERACTION_TARGET), _name] call FUNC(getTreatmentOptions);\n\n{\n    //player sidechat format[\"TRIGGERED: %1\",_x];\n    if (_forEachIndex > END_IDC) exitWith {};\n    _ctrl = (_display displayCtrl (START_IDC + _forEachIndex));\n    if (!(_forEachIndex > AMOUNT_OF_ENTRIES)) then {\n        _ctrl ctrlSetText (_x select 0);\n        private _code = format [\"ace_medical_menu_pendingReopen = true; call %1;\", (_x select 3)];\n        _ctrl ctrlSetEventHandler [\"ButtonClick\", _code];\n        _ctrl ctrlSetTooltip (_x select 0); // TODO implement\n        _ctrl ctrlShow true;\n    } else {\n        _ctrl ctrlSetText \"\";\n        _ctrl ctrlSetEventHandler [\"ButtonClick\", \"\"];\n    };\n    _ctrl ctrlCommit 0;\n} forEach _entries;\n",
        "functionName": "ace_medical_menu_fnc_handleUI_DisplayOptions"
      },
      {
        "fileName": "fnc_handleUI_dropDownTriageCard.sqf",
        "content": "/*\n * Author: Glowbal\n * Handle the triage card display\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_medical_menu_fnc_handleUI_dropDownTriageCard\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nprivate _display = uiNamespace getVariable QGVAR(medicalMenu);\nprivate _pos = [0, 0, 0, 0];\nprivate _currentPos = ctrlPosition (_display displayCtrl 2002);\n_currentPos params [\"_currentPosX\", \"_currentPosY\"];\nif (_currentPosX == 0 && _currentPosY == 0) then {\n    _pos = ctrlPosition (_display displayCtrl 2001);\n};\n\nfor \"_idc\" from 2002 to 2006 step 1 do {\n    _pos set [1, (_pos select 1) + (_pos select 3)];\n    private _ctrl = _display displayCtrl _idc;\n    _ctrl ctrlSetPosition _pos;\n    _ctrl ctrlCommit 0;\n};\n",
        "functionName": "ace_medical_menu_fnc_handleUI_dropDownTriageCard"
      },
      {
        "fileName": "fnc_module.sqf",
        "content": "/*\n * Author: Glowbal\n * Module for adjusting the medical menu settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ACE_medical_menu_fnc_module\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(allow), \"allow\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_medical_menu_fnc_module"
      },
      {
        "fileName": "fnc_onMenuClose.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Handle medical menu closed\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_medical_menu_fnc_onMenuClosed\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (EGVAR(interact_menu,menuBackground)==1) then {[QGVAR(id), false] call EFUNC(common,blurScreen);};\nif (EGVAR(interact_menu,menuBackground)==2) then {(uiNamespace getVariable [QEGVAR(interact_menu,menuBackground), displayNull]) closeDisplay 0;};\n\n[GVAR(MenuPFHID)] call CBA_fnc_removePerFrameHandler;\nGVAR(MenuPFHID) = -1;\n",
        "functionName": "ace_medical_menu_fnc_onMenuClose"
      },
      {
        "fileName": "fnc_onMenuOpen.sqf",
        "content": "/*\n * Author: Glowbal\n * Handle medical menu opened\n *\n * Arguments:\n * 0: Medical Menu display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [medical_menu] call ace_medical_menu_fnc_onMenuOpen\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n#define MAX_DISTANCE 10\n\nparams [\"_display\"];\n\nif (isNil \"_display\") exitWith {};\n\nif (EGVAR(interact_menu,menuBackground)==1) then {[QGVAR(id), true] call EFUNC(common,blurScreen);};\nif (EGVAR(interact_menu,menuBackground)==2) then {0 cutRsc[QEGVAR(interact_menu,menuBackground), \"PLAIN\", 1, false];};\n\nif (isNil QGVAR(LatestDisplayOptionMenu)) then {\n    GVAR(LatestDisplayOptionMenu) = \"triage\";\n} else {\n    if (GVAR(LatestDisplayOptionMenu) == \"toggle\") then {\n        GVAR(LatestDisplayOptionMenu) = \"triage\";\n        GVAR(INTERACTION_TARGET) = GVAR(INTERACTION_TARGET_PREVIOUS);\n    };\n};\n\nprivate _target = GVAR(INTERACTION_TARGET);\nif (isNil QGVAR(INTERACTION_TARGET_PREVIOUS)) then {\n    GVAR(INTERACTION_TARGET_PREVIOUS) = _target;\n};\n[GVAR(LatestDisplayOptionMenu)] call FUNC(handleUI_DisplayOptions);\n\ndisableSerialization;\n\n[_target, _display] call FUNC(updateUIInfo);\n\n(_display displayCtrl 11) ctrlSetTooltip localize LSTRING(VIEW_TRIAGE_CARD);\n(_display displayCtrl 12) ctrlSetTooltip localize LSTRING(EXAMINE_PATIENT);\n(_display displayCtrl 13) ctrlSetTooltip localize LSTRING(BANDAGE_FRACTURES);\n(_display displayCtrl 14) ctrlSetTooltip localize LSTRING(MEDICATION);\n(_display displayCtrl 15) ctrlSetTooltip localize LSTRING(AIRWAY_MANAGEMENT);\n(_display displayCtrl 16) ctrlSetTooltip localize LSTRING(ADVANCED_TREATMENT);\n(_display displayCtrl 17) ctrlSetTooltip localize LSTRING(DRAG_CARRY);\n(_display displayCtrl 18) ctrlSetTooltip localize LSTRING(TOGGLE_SELF);\n\n(_display displayCtrl 301) ctrlSetTooltip localize LSTRING(SELECT_HEAD);\n(_display displayCtrl 302) ctrlSetTooltip localize LSTRING(SELECT_TORSO);\n(_display displayCtrl 303) ctrlSetTooltip localize LSTRING(SELECT_ARM_R);\n(_display displayCtrl 304) ctrlSetTooltip localize LSTRING(SELECT_ARM_L);\n(_display displayCtrl 305) ctrlSetTooltip localize LSTRING(SELECT_LEG_R);\n(_display displayCtrl 306) ctrlSetTooltip localize LSTRING(SELECT_LEG_L);\n(_display displayCtrl 2001) ctrlSetTooltip localize LSTRING(SELECT_TRIAGE_STATUS);\n\n(_display displayCtrl 1) ctrlSetText format [\"%1\", [_target] call EFUNC(common,getName)];\nsetMousePosition [0.4, 0.4];\n\nif (GVAR(MenuPFHID) != -1) exitWith {ERROR(\"PFID already running\");};\n\nGVAR(MenuPFHID) = [{\n\n    (_this select 0) params [\"_display\"];\n    if (isNull GVAR(INTERACTION_TARGET)) then {\n        GVAR(INTERACTION_TARGET) = ACE_player;\n    };\n    [GVAR(INTERACTION_TARGET), _display] call FUNC(updateUIInfo);\n    [GVAR(INTERACTION_TARGET)] call FUNC(updateIcons);\n    [GVAR(LatestDisplayOptionMenu)] call FUNC(handleUI_DisplayOptions);\n\n    //Check that it's valid to stay open:\n    if !(([ACE_player, GVAR(INTERACTION_TARGET), [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) && {[ACE_player, GVAR(INTERACTION_TARGET)] call FUNC(canOpenMenu)}) then {\n        closeDialog 314412;\n        //If we failed because of distance check, show UI message:\n        if ((ACE_player distance GVAR(INTERACTION_TARGET)) > GVAR(maxRange)) then {\n            [[ELSTRING(medical,DistanceToFar), [GVAR(INTERACTION_TARGET)] call EFUNC(common,getName)], 2] call EFUNC(common,displayTextStructured);\n        };\n    };\n\n}, 0, [_display]] call CBA_fnc_addPerFrameHandler;\n\n[\"ace_medicalMenuOpened\", [ACE_player, _target]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_medical_menu_fnc_onMenuOpen"
      },
      {
        "fileName": "fnc_openMenu.sqf",
        "content": "/*\n * Author: Glowbal\n * Open the medical menu for target\n *\n * Arguments:\n * 0: Target <OBJECT>\n *\n * Return Value:\n * If action was taken <BOOL>\n *\n * Example:\n * [some_player] call ace_medical_menu_fnc_openMenu\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_interactionTarget\"];\n\nif (dialog || {isNull _interactionTarget}) exitWith {\n    disableSerialization;\n\n    private _display = uiNamespace getVariable QGVAR(medicalMenu);\n    if (!isNil \"_display\") then {\n        closeDialog 314412;\n    };\n};\n\nGVAR(INTERACTION_TARGET) = _interactionTarget;\n\ncreateDialog QGVAR(medicalMenu);\nGVAR(lastOpenedOn) = CBA_missionTime;\n\ntrue\n",
        "functionName": "ace_medical_menu_fnc_openMenu"
      },
      {
        "fileName": "fnc_setTriageStatus.sqf",
        "content": "/*\n * Author: Glowbal\n * Set the triage status of object\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Status <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, 2] call ACE_medical_menu_fnc_setTriageStatus\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_status\"];\n\n_target setVariable [QEGVAR(medical,triageLevel), _status, true];\n",
        "functionName": "ace_medical_menu_fnc_setTriageStatus"
      },
      {
        "fileName": "fnc_updateActivityLog.sqf",
        "content": "/*\n * Author: Glowbal\n * Update the activity log\n *\n * Arguments:\n * 0: display <DISPLAY>\n * 1: log collection <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [some_display, log] call ace_medical_menu_fnc_updateActivityLog\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_display\", \"_logs\"];\n\nprivate _logCtrl = _display displayCtrl 214;\nlbClear _logCtrl;\n\n{\n    _x params [\"_message\", \"_moment\", \"\", \"_arguments\"];\n\n    if (isLocalized _message) then {\n        _message = localize _message;\n    };\n\n    {\n        if (_x isEqualType \"\" && {isLocalized _x}) then {\n            _arguments set [_foreachIndex, localize _x];\n        };\n    } forEach _arguments;\n\n    _message = format ([_message] + _arguments);\n    _logCtrl lbAdd format [\"%1 %2\", _moment, _message];\n    nil\n} count _logs;\n",
        "functionName": "ace_medical_menu_fnc_updateActivityLog"
      },
      {
        "fileName": "fnc_updateBodyImage.sqf",
        "content": "/*\n * Author: Glowbal\n * Update the body image on the menu\n *\n * Arguments:\n * 0: selection bloodloss <ARRAY>\n * 1: damaged (array of bools) <ARRAY>\n * 2: display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [0.3, some_display] call ace_medical_menu_fnc_updateBodyImage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_selectionBloodLoss\", \"_damaged\", \"_display\"];\n\n// Handle the body image coloring\nprivate _availableSelections = [50, 51, 52, 53, 54, 55];\n{\n    private _red = 1;\n    private _green = 1;\n    private _blue = 1;\n\n    if (_x > 0) then {\n        if (_damaged select _forEachIndex) then {\n            _green = (0.9 - _x) max 0;\n            _blue = _green;\n        } else {\n            _green = (0.9 - _x) max 0;\n            _red = _green;\n            //_blue = _green;\n        };\n    };\n\n    (_display displayCtrl (_availableSelections select _forEachIndex)) ctrlSetTextColor [_red, _green, _blue, 1.0];\n} forEach _selectionBloodLoss;\n",
        "functionName": "ace_medical_menu_fnc_updateBodyImage"
      },
      {
        "fileName": "fnc_updateIcons.sqf",
        "content": "/*\n * Author: Glowbal\n * Update the category icons\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_medical_menu_fnc_updateIcons\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define START_IDC 111\n#define END_IDC 118\n\ndisableSerialization;\n\nprivate _display = uiNamespace getVariable QGVAR(medicalMenu);\nprivate _options = [\"triage\" , \"examine\", \"bandage\", \"medication\", \"airway\", \"advanced\", \"drag\", \"toggle\"];\n\nfor \"_idc\" from START_IDC to END_IDC step 1 do {\n    private _amount = [ACE_player, GVAR(INTERACTION_TARGET), _options select (_idc - START_IDC)] call FUNC(getTreatmentOptions);\n    if ((count _amount) > 0 || _idc == START_IDC || _idc == END_IDC) then {\n        (_display displayCtrl _idc) ctrlSettextColor [1, 1, 1, 1];\n    } else {\n        (_display displayCtrl _idc) ctrlSettextColor [0.4, 0.4, 0.4, 1];\n    };\n};\n",
        "functionName": "ace_medical_menu_fnc_updateIcons"
      },
      {
        "fileName": "fnc_updateInformationLists.sqf",
        "content": "/*\n * Author: Glowbal\n * Update the treatment information list\n *\n * Arguments:\n * 0: display <DISPLAY>\n * 1: message collection <ARRAY>\n * 2: injury collection <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [DISPLAY, [messagecollection], [injurycollection]] call ACE_medical_menu_fnc_updateInformationLists\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_display\", \"_genericMessages\", \"_allInjuryTexts\"];\n\nprivate _lbCtrl = _display displayCtrl 213;\nlbClear _lbCtrl;\n{\n    _x params [\"_add\", \"_color\"];\n    _lbCtrl lbAdd _add;\n    _lbCtrl lbSetColor [_forEachIndex, _color];\n} forEach _genericMessages;\n\nprivate _amountOfGeneric = count _genericMessages;\n{\n    _x params [\"_add\", \"_color\"];\n    _lbCtrl lbAdd _add;\n    _lbCtrl lbSetColor [_forEachIndex + _amountOfGeneric, _color];\n} forEach _allInjuryTexts;\n\nif (_allInjuryTexts isEqualTo []) then {\n    _lbCtrl lbAdd localize ELSTRING(medical,NoInjuriesBodypart);\n};\n",
        "functionName": "ace_medical_menu_fnc_updateInformationLists"
      },
      {
        "fileName": "fnc_updateQuickViewLog.sqf",
        "content": "/*\n * Author: Glowbal\n * Update the quick view log\n *\n * Arguments:\n * 0: display <DISPLAY>\n * 1: log collection <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [some_display, log] call ace_medical_menu_fnc_updateQuickViewLog\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_display\", \"_logs\"];\n\nprivate _logCtrl = _display displayCtrl 215;\nlbClear _logCtrl;\n\n{\n    _x params [\"_message\", \"_moment\", \"\", \"_arguments\"];\n\n    {\n        if (_x isEqualType \"\" && {isLocalized _x}) then {\n            _arguments set [_foreachIndex, localize _x];\n        };\n    } forEach _arguments;\n\n    _message = format ([([_message, localize _message] select (isLocalized _message))] + _arguments);\n    _logCtrl lbAdd format [\"%1 %2\", _moment, _message];\n    nil\n} count _logs;\n",
        "functionName": "ace_medical_menu_fnc_updateQuickViewLog"
      },
      {
        "fileName": "fnc_updateUIInfo.sqf",
        "content": "/*\n * Author: Glowbal\n * Update all UI information in the medical menu\n *\n * Arguments:\n * 0: target <OBJECT>\n * 1: display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [some_player, some_display] call ace_medical_menu_fnc_updateUIInfo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_display\"];\n\nif (isNil \"_display\" || {isNull _display}) exitWith {ERROR(\"No display\");};\n\nprivate _selectionN = GVAR(selectedBodyPart);\nif (_selectionN < 0 || {_selectionN > 5}) exitWith {};\n\nprivate _genericMessages = [];\nprivate _partText = [ELSTRING(medical,Head), ELSTRING(medical,Torso), ELSTRING(medical,LeftArm) ,ELSTRING(medical,RightArm) ,ELSTRING(medical,LeftLeg), ELSTRING(medical,RightLeg)] select _selectionN;\n_genericMessages pushBack [localize _partText, [1, 1, 1, 1]];\n\nif (_target getVariable [QEGVAR(medical,isBleeding), false]) then {\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Bleeding), [1, 0.1, 0.1, 1]];\n};\n\nif (_target getVariable [QEGVAR(medical,hasLostBlood), 0] > 1) then {\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Lost_Blood), [1, 0.1, 0.1, 1]];\n};\n\nif (((_target getVariable [QEGVAR(medical,tourniquets), [0, 0, 0, 0, 0, 0]]) select _selectionN) > 0) then {\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Tourniquet_Applied), [0.77, 0.51, 0.08, 1]];\n};\n\nif (_target getVariable [QEGVAR(medical,hasPain), false]) then {\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Pain), [1, 1, 1, 1]];\n};\n\nprivate _totalIvVolume = 0;\nprivate _bloodBags = _target getVariable [QEGVAR(medical,ivBags), []];\n{\n    _x params [\"_bagVolumeRemaining\"];\n    _totalIvVolume = _totalIvVolume + _bagVolumeRemaining;\n} foreach _bloodBags;\n\nif (_totalIvVolume >= 1) then {\n    _genericMessages pushBack [format [localize ELSTRING(medical,receivingIvVolume), floor _totalIvVolume], [1, 1, 1, 1]];\n};\n\nprivate _damaged = [false, false, false, false, false, false];\nprivate _selectionBloodLoss = [0, 0, 0, 0, 0, 0];\n\nprivate _allInjuryTexts = [];\nif ((EGVAR(medical,level) >= 2) && {([_target] call EFUNC(medical,hasMedicalEnabled))}) then {\n    private _openWounds = _target getVariable [QEGVAR(medical,openWounds), []];\n    {\n        private _amountOf = _x select 3;\n        // Find how much this bodypart is bleeding\n        if (_amountOf > 0) then {\n            _damaged set [_x select 2, true];\n            _selectionBloodLoss set [_x select 2, (_selectionBloodLoss select (_x select 2)) + (20 * ((_x select 4) * _amountOf))];\n\n            if (_selectionN == (_x select 2)) then {\n            // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\n                if (_amountOf >= 1) then {\n                    // TODO localization\n                    _allInjuryTexts pushBack [format[\"%2x %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6, ceil _amountOf], [1,1,1,1]];\n                } else {\n                    // TODO localization\n                    _allInjuryTexts pushBack [format[\"Partial %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6], [1,1,1,1]];\n                };\n            };\n        };\n    } forEach _openWounds;\n\n    private _bandagedwounds = _target getVariable [QEGVAR(medical,bandagedWounds), []];\n    {\n        private _amountOf = _x select 3;\n        // Find how much this bodypart is bleeding\n        if !(_damaged select (_x select 2)) then {\n            _selectionBloodLoss set [_x select 2, (_selectionBloodLoss select (_x select 2)) + (20 * ((_x select 4) * _amountOf))];\n        };\n        if (_selectionN == (_x select 2)) then {\n            // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\n            if (_amountOf > 0) then {\n                if (_amountOf >= 1) then {\n                    // TODO localization\n                    _allInjuryTexts pushBack [format [\"[B] %2x %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6, ceil _amountOf], [0.88,0.7,0.65,1]];\n                } else {\n                    // TODO localization\n                    _allInjuryTexts pushBack [format [\"[B] Partial %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6], [0.88,0.7,0.65,1]];\n                };\n            };\n        };\n    } forEach _bandagedwounds;\n} else {\n\n    // Add all bleeding from wounds on selection\n    private _openWounds = _target getVariable [QEGVAR(medical,openWounds), []];\n    {\n        private _amountOf = _x select 3;\n        // Find how much this bodypart is bleeding\n        if (_amountOf > 0) then {\n            _damaged set [_x select 2, true];\n            _selectionBloodLoss set [_x select 2, (_selectionBloodLoss select (_x select 2)) + (20 * ((_x select 4) * _amountOf))];\n        };\n    } forEach _openWounds;\n\n    private _bandagedwounds = _target getVariable [QEGVAR(medical,bandagedWounds), []];\n    {\n        private _amountOf = _x select 3;\n        // Find how much this bodypart is bleeding\n        if !(_damaged select (_x select 2)) then {\n            _selectionBloodLoss set [_x select 2, (_selectionBloodLoss select (_x select 2)) + (20 * ((_x select 4) * _amountOf))];\n        };\n    } forEach _bandagedwounds;\n\n    private _bloodLossOnSelection = _selectionBloodLoss select _selectionN;\n    if (_bloodLossOnSelection > 0) then {\n        private _severity = switch (true) do {\n            case (_bloodLossOnSelection > 0.5): {localize ELSTRING(medical,HeavilyWounded)};\n            case (_bloodLossOnSelection > 0.1): {localize ELSTRING(medical,LightlyWounded)};\n            default {localize ELSTRING(medical,VeryLightlyWounded)};\n        };\n        private _part = localize ([\n            ELSTRING(medical,Head),\n            ELSTRING(medical,Torso),\n            ELSTRING(medical,LeftArm),\n            ELSTRING(medical,RightArm),\n            ELSTRING(medical,LeftLeg),\n            ELSTRING(medical,RightLeg)\n        ] select _selectionN);\n        _allInjuryTexts pushBack [format [\"%1 %2\", _severity, toLower _part], [1,1,1,1]];\n    };\n};\n\n[_selectionBloodLoss, _damaged, _display] call FUNC(updateBodyImage);\n[_display, _genericMessages, _allInjuryTexts] call FUNC(updateInformationLists);\n\n[_display, _target getVariable [QEGVAR(medical,logFile_activity_view), []]] call FUNC(updateActivityLog);\n[_display, _target getVariable [QEGVAR(medical,logFile_quick_view), []]] call FUNC(updateQuickViewLog);\n\nprivate _triageStatus = [_target] call EFUNC(medical,getTriageStatus);\n(_display displayCtrl 2000) ctrlSetText (_triageStatus select 0);\n(_display displayCtrl 2000) ctrlSetBackgroundColor (_triageStatus select 2);\n",
        "functionName": "ace_medical_menu_fnc_updateUIInfo"
      }
    ]
  },
  {
    "component": "microdagr",
    "files": [
      {
        "fileName": "XEH_clientInit.sqf",
        "content": "//XEH_clientInit.sqf\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n//Add deviceKey entry:\nprivate _conditonCode = {\n    (\"ACE_microDAGR\" in (items ACE_player))\n};\nprivate _toggleCode = {\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {};\n    [] call FUNC(openDisplay); //toggle display mode\n};\nprivate _closeCode = {\n    if (GVAR(currentShowMode) == DISPLAY_MODE_CLOSED) exitWith {};\n    [DISPLAY_MODE_CLOSED] call FUNC(openDisplay);\n};\n[(localize LSTRING(itemName)), QPATHTOF(images\\microDAGR_item.paa), _conditonCode, _toggleCode, _closeCode] call EFUNC(common,deviceKeyRegisterNew);\n\n\n//Add Eventhandler:\n[QEGVAR(vector,rangefinderData), {_this call FUNC(recieveRangefinderData)}] call CBA_fnc_addEventHandler;\n\n//Global Variables to default:\nGVAR(gpsPositionASL) = [0,0,0];\nGVAR(mapAutoTrackPosition) = true;\nGVAR(mapShowTexture) = false;\nGVAR(mapPosition) = [-999, -999];\nGVAR(mapZoom) = 0.075;\nGVAR(currentApplicationPage) = APP_MODE_NULL;\nGVAR(currentShowMode) = DISPLAY_MODE_CLOSED;\n\n//User Settings\nGVAR(settingUseMils) = false;\nGVAR(settingShowAllWaypointsOnMap) = true;\n\nGVAR(newWaypointPosition) = [];\nGVAR(currentWaypoint) = -1;\nGVAR(rangeFinderPositionASL) = [];\n\nGVAR(mgrsGridZoneDesignator) = format [\"%1 %2\",EGVAR(common,MGRS_data) select 0, EGVAR(common,MGRS_data) select 1];\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n//Functions that are called for each draw of the map:\nGVAR(miniMapDrawHandlers) = [];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_appMarkKeypadEntry.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the keypad entries from the \"Mark\" Application\n *\n * Arguments:\n * 0: String version of Keypad entry [\"ok\",\"del\",\"1\",...] <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ok\"] call ace_microdagr_fnc_appMarkKeypadEntry\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_keypadButton\"];\n\ndisableSerialization;\nprivate _display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\n\nif (isNull _display) exitWith {ERROR(\"No Display\");};\n\nif (GVAR(currentApplicationPage) != APP_MODE_MARK) exitWith {};\n\nprivate _editText = ctrlText (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\n\nswitch (_keypadButton) do {\ncase (\"ok\"): {\n        if ((count GVAR(newWaypointPosition)) == 0) then {\n            private _actualPos = [_editText, true] call EFUNC(common,getMapPosFromGrid);\n            _actualPos set [2, (getTerrainHeightASL _actualPos)];\n            GVAR(newWaypointPosition) = _actualPos;\n            [APP_MODE_MARK] call FUNC(saveCurrentAndSetNewMode);\n        } else {\n            [_editText, GVAR(newWaypointPosition)] call FUNC(deviceAddWaypoint);\n            [APP_MODE_WAYPOINTS] call FUNC(saveCurrentAndSetNewMode);\n        };\n    };\ncase (\"del\"): {\n        _editText = _editText select [0, (((count _editText) - 1) max 0)];\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText _editText;\n        ctrlSetFocus (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\n    };\n    default {\n        _editText = _editText + _keypadButton;\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText _editText;\n        ctrlSetFocus (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\n    };\n};\n",
        "functionName": "ace_microdagr_fnc_appMarkKeypadEntry"
      },
      {
        "fileName": "fnc_appMenuButtonConnectRangefinder.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the \"Connect To\" button from the menu application\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_microdagr_fnc_appMenuButtonConnectRangefinder\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(currentWaypoint) = [-2, -1] select (GVAR(currentWaypoint) == -2);\nGVAR(rangeFinderPositionASL) = [];\n[APP_MODE_INFODISPLAY] call FUNC(saveCurrentAndSetNewMode);\n",
        "functionName": "ace_microdagr_fnc_appMenuButtonConnectRangefinder"
      },
      {
        "fileName": "fnc_appSettingsLBClick.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles double clicking on the setting listbox\n *\n * Arguments:\n * 0: Setting List box (not used) <CONTROL>\n * 1: Index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [settingList, 1] call ace_microdagr_fnc_appSettingsLBClick\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nparams [\"\", \"_itemClicked\"];\n\nswitch (_itemClicked) do {\n    case (0): { GVAR(settingUseMils) = ! GVAR(settingUseMils)};\n    case (1): { GVAR(settingShowAllWaypointsOnMap) = ! GVAR(settingShowAllWaypointsOnMap)};\n};\n\n[] call FUNC(updateDisplay);\n",
        "functionName": "ace_microdagr_fnc_appSettingsLBClick"
      },
      {
        "fileName": "fnc_appWaypointsButtonDeleteWP.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles clicking the delete button from the waypoint application\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_microdagr_fnc_appWaypointsButtonDeleteWP\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\n\nif (isNull _display) exitWith {ERROR(\"No Display\");};\n\nprivate _wpIndex = lbCurSel (_display displayCtrl IDC_MODEWAYPOINTS_LISTOFWAYPOINTS);\n\n//If it's our currentWP then deactivate\nif (GVAR(currentWaypoint) == _wpIndex) then {GVAR(currentWaypoint) = -1};\n\n//Delete from list:\n[_wpIndex] call FUNC(deviceDeleteWaypoint);\n//Update list now:\n[] call FUNC(updateDisplay);\n",
        "functionName": "ace_microdagr_fnc_appWaypointsButtonDeleteWP"
      },
      {
        "fileName": "fnc_appWaypointsButtonSetWP.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles clicking the setWP button from the waypoint application\n *\n * Arguments:\n * The \"SetWP\" button <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1234] call ace_microdagr_fnc_appWaypointsButtonSetWP\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nparams [\"_wpButton\"];\n\nprivate _wpListBox = (ctrlParent _wpButton) displayCtrl 144501;\nprivate _newWpIndex = lbCurSel _wpListBox;\nprivate _waypoints = [] call FUNC(deviceGetWaypoints);\n\nif ((_newWpIndex < 0) || (_newWpIndex > ((count _waypoints) - 1))) exitWith {\n    GVAR(currentWaypoint) = -1;\n};\n\nGVAR(currentWaypoint) = _newWpIndex;\n[APP_MODE_COMPASS] call FUNC(saveCurrentAndSetNewMode);\n",
        "functionName": "ace_microdagr_fnc_appWaypointsButtonSetWP"
      },
      {
        "fileName": "fnc_canShow.sqf",
        "content": "/*\n * Author: PabstMirror\n * Tests if the dagr can be shown in a mode\n *\n * Arguments:\n * The display mode to test showing <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1] call ace_microdagr_fnc_canShow\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_showType\"];\n\nprivate _returnValue = false;\n\n_returnValue = switch (_showType) do {\n    case (DISPLAY_MODE_CLOSED): { true }; //Can always close\n    case (DISPLAY_MODE_HIDDEN): { true }; //Can always hide\n    case (DISPLAY_MODE_DIALOG): {\n         (\"ACE_microDAGR\" in (items ACE_player)) && {[ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)}\n    };\n    case (DISPLAY_MODE_DISPLAY): {\n        //Can't have minimap up while zoomed in on foot, but allow drivers to use while in \"Gunner\" to handle non-3d vehicles like most tanks\n        ((cameraView != \"GUNNER\") || {(vehicle ACE_player != ACE_player) && {driver vehicle ACE_player == ACE_player}}) &&\n        {\"ACE_microDAGR\" in (items ACE_player)} && \n        {[ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)}\n    };\n    default { false };\n};\n\n_returnValue\n",
        "functionName": "ace_microdagr_fnc_canShow"
      },
      {
        "fileName": "fnc_deviceAddWaypoint.sqf",
        "content": "/*\n * Author: PabstMirror\n * Adds a waypoint to the \"device\"\n * Device saving not implemented yet, just save to player object\n *\n * Arguments:\n * 0: Waypoint name <STRING>\n * 1: Waypoint Position ASL <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"Hill 55\", [41,324, 12]] call ace_microdagr_fnc_deviceAddWaypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_waypointName\",\"_waypointPosASL\"];\n\nprivate _waypoints = ACE_player getVariable [QGVAR(waypoints), []];\n_waypoints pushBack [_waypointName, _waypointPosASL];\nACE_player setVariable [QGVAR(waypoints), _waypoints];\n",
        "functionName": "ace_microdagr_fnc_deviceAddWaypoint"
      },
      {
        "fileName": "fnc_deviceDeleteWaypoint.sqf",
        "content": "/*\n * Author: PabstMirror\n * Deletes a waypoint from the \"device\"\n * Device saving not implemented yet, just save to player object\n *\n * Arguments:\n * 0: Waypoint Index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"Hill 55\", [41,324, 12]] call ace_microdagr_fnc_deviceDeleteWaypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_wpIndex\"];\n\nprivate _waypoints = ACE_player getVariable [QGVAR(waypoints), []];\n\nif ((_wpIndex < 0) || (_wpIndex > ((count _waypoints) - 1))) exitWith {ERROR(\"out of bounds wp\");};\n\n_waypoints deleteAt _wpIndex;\nACE_player setVariable [QGVAR(waypoints), _waypoints];\n",
        "functionName": "ace_microdagr_fnc_deviceDeleteWaypoint"
      },
      {
        "fileName": "fnc_deviceGetWaypoints.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets all waypoints from the \"device\"\n * Device saving not implemented yet, just save to player object\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Waypoints <ARRAY>\n *\n * Example:\n * [[\"Hill 55\", [41,324, 12]]] = [] call ace_microdagr_fnc_deviceGetWaypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(ACE_player getVariable [QGVAR(waypoints), []])\n",
        "functionName": "ace_microdagr_fnc_deviceGetWaypoints"
      },
      {
        "fileName": "fnc_dialogClosedEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the dialog closeing, switches back to display mode\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_microdagr_fnc_dialogClosedEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG) then {\n    [-1] call FUNC(saveCurrentAndSetNewMode);\n    [DISPLAY_MODE_DISPLAY] call FUNC(openDisplay);\n};\n",
        "functionName": "ace_microdagr_fnc_dialogClosedEH"
      },
      {
        "fileName": "fnc_mapButtonDownEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles right clicking on the map ('dragging' the map)\n * Release autotrack if enabled.\n *\n * Arguments:\n * 0: The Map <CONTROL>\n * 1: MouseButton <NUMBER>\n * 2: MousePosX <NUMBER>\n * 3: MousePosY <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [minimap,0,0.5,0.5] call ace_microdagr_fnc_mapButtonDownEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"_mouseButton\"];\n\n//Only handle RMB\nif (_mouseButton != 1) exitWith {};\n\nif (GVAR(mapAutoTrackPosition)) then {\n    GVAR(mapAutoTrackPosition) = false;\n    [] call FUNC(showApplicationPage);\n};\n",
        "functionName": "ace_microdagr_fnc_mapButtonDownEH"
      },
      {
        "fileName": "fnc_mapDoubleTapEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the double tapping either of the 2 mini-maps\n *\n * Arguments:\n * 0: The Map <CONTROL>\n * 1: MouseButton <NUMBER>\n * 2: MousePosX <NUMBER>\n * 3: MousePosY <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [minimap,0,0.5,0.5] call ace_microdagr_fnc_mapDoubleTapEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_theMap\", \"_mouseButton\", \"_xPos\", \"_yPos\"];\n\n//Only handle LMB\nif (_mouseButton != 0) exitWith {};\n\nprivate _worldPos = _theMap ctrlMapScreenToWorld [_xPos, _yPos];\n_worldPos pushBack (getTerrainHeightASL _worldPos);\n\nGVAR(newWaypointPosition) = _worldPos;\n[APP_MODE_MARK] call FUNC(saveCurrentAndSetNewMode);\n",
        "functionName": "ace_microdagr_fnc_mapDoubleTapEH"
      },
      {
        "fileName": "fnc_mapOnDrawEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the draw event from all 3 maps (compass + 2 minimaps)\n *\n * Arguments:\n * 0: The Map <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [compassMap] call ace_microdagr_fnc_mapOnDrawEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_theMap\"];\n\nprivate _mapSize = (ctrlPosition _theMap) select 3;\n\nprivate _waypoints = [] call FUNC(deviceGetWaypoints);\n\nif (GVAR(currentApplicationPage) == 1) then {\n    _theMap ctrlMapAnimAdd [0, DUMMY_ZOOM, DUMMY_POS];\n    ctrlMapAnimCommit _theMap;\n    private _size = 412 * _mapSize;\n    _theMap drawIcon [QUOTE(PATHTO_R(images\\compass_starInverted.paa)), [1,1,1,1], DUMMY_POS, _size, _size, (-1 * (([ACE_player] call CBA_fnc_headDir) select 0)), '', 0 ];\n    _theMap drawIcon [QUOTE(PATHTO_R(images\\compass_needle.paa)), [0.533,0.769,0.76,1], DUMMY_POS, _size, _size, 0, '', 0 ];\n\n    if (GVAR(currentWaypoint) != -1) then {\n        private _targetPos = [];\n        if (GVAR(currentWaypoint) == -2) then {\n            if ((count GVAR(rangeFinderPositionASL)) == 3) then {\n                _targetPos = GVAR(rangeFinderPositionASL);\n            };\n        } else {\n            if (GVAR(currentWaypoint) < (count _waypoints)) then {\n                _targetPos = (_waypoints select GVAR(currentWaypoint)) select 1;\n            };\n        };\n        if ((count _targetPos) == 3) then {\n            private _relBearing = (ACE_player getDir _targetPos) - (([ACE_player] call CBA_fnc_headDir) select 0);\n            _theMap drawIcon [QUOTE(PATHTO_R(images\\compass_needle.paa)), [1,0.564,0.564,1], DUMMY_POS, _size, _size, _relBearing, '', 0 ];\n        };\n    };\n\n} else { //Map Mode:\n    //Call all added minimap draw event handlers:\n    {_this call _x;} forEach GVAR(miniMapDrawHandlers);\n\n    if (GVAR(mapAutoTrackPosition)) then {\n        _theMap ctrlMapAnimAdd [0, (GVAR(mapZoom)/_mapSize), (getPosASL ACE_player)];\n        ctrlMapAnimCommit _theMap;\n    };\n    private _size = 48 * _mapSize;\n    _theMap drawIcon [QUOTE(PATHTO_R(images\\icon_self.paa)), [0.533,0.769,0.76,0.75], (getPosASL ACE_player), _size, _size, (([ACE_player] call CBA_fnc_headDir) select 0), '', 0 ];\n\n    if (GVAR(settingShowAllWaypointsOnMap)) then {\n        _size = 32 * _mapSize;\n        {\n            _x params [\"_wpName\", \"_wpPos\"];\n            private _alpha = if (_forEachIndex == GVAR(currentWaypoint)) then {1} else {0.5};\n            _theMap drawIcon [QUOTE(PATHTO_R(images\\icon_mapWaypoints.paa)), [1,1,1,_alpha], _wpPos, _size, _size, 0, '', 0 ];\n        } forEach _waypoints;\n    };\n};\n",
        "functionName": "ace_microdagr_fnc_mapOnDrawEH"
      },
      {
        "fileName": "fnc_modeMapButtons.sqf",
        "content": "/*\n * Author: PabstMirror\n * Takes some arguments and returns something or other.\n *\n * Arguments:\n * 0: String of the map button pressed <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"autotrack\"] call ace_microdagr_fnc_modeMapButtons\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_mode\"];\n\n[-1] call FUNC(saveCurrentAndSetNewMode); //backup current draw pos/zoom\n\nif (_mode == \"autotrack\") then {\n    GVAR(mapAutoTrackPosition) = !GVAR(mapAutoTrackPosition);\n} else {\n    if (_mode == \"zoomin\") then {\n        GVAR(mapZoom) = GVAR(mapZoom) * (10/11);\n    } else {\n        GVAR(mapZoom) = GVAR(mapZoom) * (11/10);\n    };\n};\n[] call FUNC(showApplicationPage);\n",
        "functionName": "ace_microdagr_fnc_modeMapButtons"
      },
      {
        "fileName": "fnc_moduleMapFill.sqf",
        "content": "/*\n * Author: PabstMirror\n * Function for the module (handles the map fill level)\n *\n * Arguments:\n * 0: logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [module] call ace_microdagr_fnc_moduleMapFill\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(MapDataAvailable), \"MapDataAvailable\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_microdagr_fnc_moduleMapFill"
      },
      {
        "fileName": "fnc_openDisplay.sqf",
        "content": "/*\n * Author: PabstMirror\n * Changes the display mode of the MicroDAGR.\n *\n * Arguments:\n * 0: Display Mode to show the microDAGR in <NUMBER> (default: -1)\n *\n * Return Value:\n * None\n *\n * Example:\n * [1] call ace_microdagr_fnc_openDisplay\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_newDisplayShowMode\", -1, [-1]]];\nprivate _oldShowMode = GVAR(currentShowMode);\n\nif (_newDisplayShowMode == -1) then {\n    //Toggle mode button:\n    if (_oldShowMode in [DISPLAY_MODE_DISPLAY, DISPLAY_MODE_HIDDEN]) then {_newDisplayShowMode = DISPLAY_MODE_DIALOG};\n    if (_oldShowMode in [DISPLAY_MODE_DIALOG, DISPLAY_MODE_CLOSED]) then {_newDisplayShowMode = DISPLAY_MODE_DISPLAY};\n};\n\nif ((_newDisplayShowMode == DISPLAY_MODE_DISPLAY) && {!([DISPLAY_MODE_DISPLAY] call FUNC(canShow))}) then {_newDisplayShowMode = DISPLAY_MODE_HIDDEN};\nif ((_newDisplayShowMode == DISPLAY_MODE_DIALOG) && {!([DISPLAY_MODE_DIALOG] call FUNC(canShow))}) then {_newDisplayShowMode = DISPLAY_MODE_HIDDEN};\n\n\n//On first-startup\nif (GVAR(currentApplicationPage) == APP_MODE_NULL) then {\n    GVAR(currentApplicationPage) = APP_MODE_INFODISPLAY;\n    GVAR(mapPosition) = getPos ACE_player;\n};\n\nif (_newDisplayShowMode in [DISPLAY_MODE_CLOSED, DISPLAY_MODE_HIDDEN]) then {\n\n    //If Dialog is open, back it up before closing:\n    if (dialog && {!isNull (uiNamespace getVariable [QGVAR(DialogDisplay), displayNull])}) then {\n        [-1] call FUNC(saveCurrentAndSetNewMode);\n        closeDialog 0;\n    };\n\n    //Close the display:\n    (QGVAR(TheRscTitleDisplay) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n} else {\n    if (_newDisplayShowMode == DISPLAY_MODE_DISPLAY) then {\n        //If Dialog is open, back it up before closing:\n        if (dialog && {!isNull (uiNamespace getVariable [QGVAR(DialogDisplay), displayNull])}) then {\n            [-1] call FUNC(saveCurrentAndSetNewMode);\n            closeDialog 0;\n        };\n        //Open the display:\n        (QGVAR(TheRscTitleDisplay) call BIS_fnc_rscLayer) cutRsc [QGVAR(TheRscTitleDisplay), \"PLAIN\", 0, true];\n    } else { //DISPLAY_MODE_DIALOG\n        //Close the display:\n        (QGVAR(TheRscTitleDisplay) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n        //Open the dialog:\n        createDialog QGVAR(TheDialog);\n    };\n};\n\nGVAR(currentShowMode) = _newDisplayShowMode;\n//Update display applicaiton if open:\nif (GVAR(currentShowMode) in [DISPLAY_MODE_DIALOG, DISPLAY_MODE_DISPLAY]) then {\n    [] call FUNC(showApplicationPage);\n};\n\nif ((_oldShowMode == DISPLAY_MODE_CLOSED) && {GVAR(currentShowMode) != DISPLAY_MODE_CLOSED}) then {\n    //Start a pfeh to update display and handle hiding display\n\n    [{\n        params [\"_args\", \"_idPFH\"];\n        _args params [\"_player\"];\n        if ((isNull ACE_player) || {!alive ACE_player} || {ACE_player != _player} || {!(\"ACE_microDAGR\" in (items ACE_player))} || {GVAR(currentShowMode) == DISPLAY_MODE_CLOSED}) then {\n            //Close Display if still open:\n            if (GVAR(currentShowMode) != DISPLAY_MODE_CLOSED) then {\n                [DISPLAY_MODE_CLOSED] call FUNC(openDisplay);\n            };\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        } else {\n            if (GVAR(currentShowMode) == DISPLAY_MODE_HIDDEN) then {\n                //If display is hidden, and we can show, then swithc modes:\n                if ([DISPLAY_MODE_DISPLAY] call FUNC(canShow)) then {\n                    [DISPLAY_MODE_DISPLAY] call FUNC(openDisplay);\n                };\n            } else {\n                if ([GVAR(currentShowMode)] call FUNC(canShow)) then {\n                    [] call FUNC(updateDisplay);\n                } else {\n                    [DISPLAY_MODE_HIDDEN] call FUNC(openDisplay);\n                };\n            };\n        };\n    }, 0.1, [ACE_player]] call CBA_fnc_addPerFrameHandler;\n};\n",
        "functionName": "ace_microdagr_fnc_openDisplay"
      },
      {
        "fileName": "fnc_recieveRangefinderData.sqf",
        "content": "/*\n * Author: PabstMirror\n * Recieves the data packet from the vector rangefinder\n *\n * Arguments:\n * 0: Slope distance (Meters) <NUMBER>\n * 1: Azimuth (Degrees) <NUMBER>\n * 2: Inclination (Degrees) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1000, 45, 1] call ace_microdagr_fnc_recieveRangefinderData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_slopeDistance\", \"_azimuth\", \"_inclination\"];\n\nif (GVAR(currentWaypoint) != -2) exitWith {}; //Only take waypoint when \"connected\"\nif (_slopeDistance < 0) exitWith {}; //Bad Data\n\nprivate _horizontalDistance = (cos _inclination) * _slopeDistance;\nprivate _verticleDistance = (sin _inclination) * _slopeDistance;\n\nprivate _targetOffset = [((sin _azimuth) * _horizontalDistance), ((cos _azimuth) * _horizontalDistance), _verticleDistance];\n//This assumes the \"rangefinder view\" pos is very close to player, at worst the turret should only be a few meters different\nprivate _targetPosASL = (getPosASL ACE_player) vectorAdd _targetOffset;\n\nGVAR(rangeFinderPositionASL) = _targetPosASL;\n",
        "functionName": "ace_microdagr_fnc_recieveRangefinderData"
      },
      {
        "fileName": "fnc_saveCurrentAndSetNewMode.sqf",
        "content": "/*\n * Author: PabstMirror\n * Saves the current mode and sets a new mode\n * Used to backup display when switching display modes\n *\n * Arguments:\n * 0: New Mode <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [2] call ace_microdagr_fnc_saveCurrentAndSetNewMode\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_newMode\"];\n\ndisableSerialization;\nprivate _display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\n\nif (isNull _display) exitWith {ERROR(\"No Display\");};\n\nif (GVAR(currentApplicationPage) == 2) then {\n    private _theMap = [_display displayCtrl IDC_MAPDETAILS, _display displayCtrl IDC_MAPPLAIN] select (!GVAR(mapShowTexture));\n    private _mapCtrlPos = ctrlPosition _theMap;\n\n    _mapCtrlPos params [\"_mapCtrlPosX\", \"_mapCtrlPosY\", \"_mapCtrlPosZ\", \"_mapSize\"];\n    private _centerPos = [(_mapCtrlPosX + _mapCtrlPosZ / 2), (_mapCtrlPosY + _mapSize / 2)];\n    GVAR(mapPosition) = _theMap ctrlMapScreenToWorld _centerPos;\n    GVAR(mapZoom) = (ctrlMapScale _theMap) * _mapSize;\n\n    //Hit button again, toggle map modes:\n    if (_newMode == 2) then {\n        if (GVAR(mapShowTexture)) then {\n            GVAR(mapShowTexture) = false;\n        } else {\n            if (GVAR(MapDataAvailable) == MAP_DETAIL_SAT) then {\n                GVAR(mapShowTexture) = true;\n            };\n        };\n    };\n};\n\n//Can't switch to map if no map loaded\nif (_newMode == APP_MODE_MAP) then {\n    if (GVAR(MapDataAvailable) == MAP_DETAIL_NONE) then {\n        _newMode = -1;\n    };\n};\n\nif (_newMode != -1) then {\n    GVAR(currentApplicationPage) = _newMode;\n    [] call FUNC(showApplicationPage);\n};\n",
        "functionName": "ace_microdagr_fnc_saveCurrentAndSetNewMode"
      },
      {
        "fileName": "fnc_showApplicationPage.sqf",
        "content": "/*\n * Author: PabstMirror\n * Changes the \"application page\" shown on the microDAGR\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_microdagr_fnc_showApplicationPage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nprivate _display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\n\nif (isNull _display) exitWith {ERROR(\"No Display\");};\n\n//TopBar\n(_display displayCtrl IDC_RANGEFINDERCONNECTEDICON) ctrlShow (GVAR(currentWaypoint) == -2);\n\n//Mode: Info:\n(_display displayCtrl IDC_MODEDISPLAY) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_INFODISPLAY);\n\nif (GVAR(currentApplicationPage) == APP_MODE_INFODISPLAY) then {\n    (_display displayCtrl IDC_MODEDISPLAY_UTMGRID) ctrlSetText GVAR(mgrsGridZoneDesignator);\n    if (GVAR(currentWaypoint) == -1) then {\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTIMECG) ctrlShow true;\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTARGETCG) ctrlShow false;\n    } else {\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTIMECG) ctrlShow false;\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTARGETCG) ctrlShow true;\n        if (GVAR(currentWaypoint) == -2) then {\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETICON) ctrlSetText QUOTE(PATHTOF(images\\icon_menuLaser.paa));\n        } else {\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETICON) ctrlSetText QPATHTOF(images\\icon_menuMark.paa);\n        };\n    };\n};\n\n//Mode: Compass:\n(_display displayCtrl IDC_MODECOMPASS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_COMPASS);\n(_display displayCtrl IDC_MAPCOMPASS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_COMPASS);\n\n\n//Mode: Map\n(_display displayCtrl IDC_MODEMAP_MAPTRACKBUTTON) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MAP);\n(_display displayCtrl IDC_MODEMAP_MAPZOOMIN) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MAP);\n(_display displayCtrl IDC_MODEMAP_MAPZOOMOUT) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MAP);\n\n(_display displayCtrl IDC_MAPPLAIN) ctrlShow ((GVAR(currentApplicationPage) == APP_MODE_MAP) && {!GVAR(mapShowTexture)});\n(_display displayCtrl IDC_MAPDETAILS) ctrlShow ((GVAR(currentApplicationPage) == APP_MODE_MAP) && {GVAR(mapShowTexture)});\n\nif (GVAR(currentApplicationPage) == APP_MODE_MAP) then {\n    _theMap = if (!GVAR(mapShowTexture)) then {_display displayCtrl IDC_MAPPLAIN} else {_display displayCtrl IDC_MAPDETAILS};\n    _mapSize = (ctrlPosition _theMap) select 3;\n    _theMap ctrlMapAnimAdd [0, (GVAR(mapZoom) / _mapSize), GVAR(mapPosition)];\n    ctrlMapAnimCommit _theMap;\n    if (GVAR(mapAutoTrackPosition)) then {\n        (_display displayCtrl IDC_MODEMAP_MAPTRACKBUTTON) ctrlSetTextColor [1,1,1,0.8];\n    } else {\n        (_display displayCtrl IDC_MODEMAP_MAPTRACKBUTTON) ctrlSetTextColor [1,1,1,0.4];\n    };\n};\n\n//Mode: Menu\n(_display displayCtrl IDC_MODEMENU) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MENU);\n\n//Mode: Mark\nif (GVAR(currentApplicationPage) == APP_MODE_MARK) then {\n    (_display displayCtrl IDC_MODEMARK) ctrlShow true;\n    //not backed up for displayMode swap, not a big deal\n\n\n    if ((count GVAR(newWaypointPosition)) == 0) then {\n        (_display displayCtrl IDC_MODEMARK_HEADER) ctrlSetText (localize LSTRING(wpEnterCords));\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText \"\";\n    } else {\n        (_display displayCtrl IDC_MODEMARK_HEADER) ctrlSetText format [(localize LSTRING(wpEnterName)), mapGridPosition GVAR(newWaypointPosition)];\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText format [\"[%1]\", mapGridPosition GVAR(newWaypointPosition)];\n    };\n    ctrlSetFocus (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\n} else {\n    (_display displayCtrl IDC_MODEMARK) ctrlShow false;\n    GVAR(newWaypointPosition) = [];\n};\n\n//Mode: Waypoints\n(_display displayCtrl IDC_MODEWAYPOINTS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_WAYPOINTS);\n\n//Mode: Setting\n(_display displayCtrl IDC_MODESETTINGS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_SETUP);\n\n//Buttons pushed:\nif (GVAR(currentApplicationPage) == APP_MODE_INFODISPLAY) then {\n    (_display displayCtrl IDC_BUTTONBG0) ctrlSetText QPATHTOF(images\\button_pushedDown.paa);\n} else {\n    (_display displayCtrl IDC_BUTTONBG0) ctrlSetText QPATHTOF(images\\button_pushedUp.paa);\n};\nif (GVAR(currentApplicationPage) == APP_MODE_COMPASS) then {\n    (_display displayCtrl IDC_BUTTONBG1) ctrlSetText QPATHTOF(images\\button_pushedDown.paa);\n} else {\n    (_display displayCtrl IDC_BUTTONBG1) ctrlSetText QPATHTOF(images\\button_pushedUp.paa);\n};\nif (GVAR(currentApplicationPage) == APP_MODE_MAP) then {\n    (_display displayCtrl IDC_BUTTONBG2) ctrlSetText QPATHTOF(images\\button_pushedDown.paa);\n} else {\n    (_display displayCtrl IDC_BUTTONBG2) ctrlSetText QPATHTOF(images\\button_pushedUp.paa);\n};\n\n//Update the page now:\n[] call FUNC(updateDisplay);\n",
        "functionName": "ace_microdagr_fnc_showApplicationPage"
      },
      {
        "fileName": "fnc_updateDisplay.sqf",
        "content": "/*\n * Author: PabstMirror\n * Updates the display (several times a second) called from the pfeh\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_microdagr_fnc_updateDisplay\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\n\nif (isNull _display) exitWith {ERROR(\"No Display\");};\n\n//Fade \"shell\" at night\nprivate _daylight = [] call EFUNC(common,ambientBrightness);\n(_display displayCtrl IDC_MICRODAGRSHELL) ctrlSetTextColor [_daylight, _daylight, _daylight, 1];\n\n(_display displayCtrl IDC_CLOCKTEXT) ctrlSetText ([daytime, \"HH:MM\"] call bis_fnc_timeToString);\n\nprivate _waypoints = [] call FUNC(deviceGetWaypoints);\n\nswitch (GVAR(currentApplicationPage)) do {\ncase (APP_MODE_INFODISPLAY): {\n        //Easting/Northing:\n        private _posString = [getPos ACE_player] call EFUNC(common,getMapGridFromPos);\n        private _eastingText = (_posString select 0) + \"e\";\n        private _northingText = (_posString select 1) + \"n\";\n        (_display displayCtrl IDC_MODEDISPLAY_EASTING) ctrlSetText _eastingText;\n        (_display displayCtrl IDC_MODEDISPLAY_NORTHING) ctrlSetText _northingText;\n\n        //Elevation:\n        private _numASL = ((getPosASL ACE_player) select 2) + EGVAR(common,mapAltitude);\n        private _aboveSeaLevelText = [_numASL, 5, 0] call CBA_fnc_formatNumber;\n        _aboveSeaLevelText = if (_numASL > 0) then {\"+\" + _aboveSeaLevelText + \" MSL\"} else {_aboveSeaLevelText + \" MSL\"};\n        (_display displayCtrl IDC_MODEDISPLAY_ELEVATIONNUM) ctrlSetText _aboveSeaLevelText;\n\n        //Heading:\n        _compassAngleText = if (GVAR(settingUseMils)) then {\n            [(floor ((6400 / 360) * (([ACE_player] call CBA_fnc_headDir) select 0))), 4, 0] call CBA_fnc_formatNumber;\n        } else {\n            ([([ACE_player] call CBA_fnc_headDir) select 0, 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\n        };\n        (_display displayCtrl IDC_MODEDISPLAY_HEADINGNUM) ctrlSetText _compassAngleText;\n\n        //Speed:\n        (_display displayCtrl IDC_MODEDISPLAY_SPEEDNUM) ctrlSetText format [\"%1kph\", (round (speed (vehicle ACE_player)))];;\n\n\n        if (GVAR(currentWaypoint) == -1) then {\n            private _yearString = (date select 0);\n            private _monthSring = localize ([\"error\",\"str_january\",\"str_february\",\"str_march\",\"str_april\",\"str_may\",\"str_june\",\"str_july\",\"str_august\",\"str_september\",\"str_october\",\"str_november\",\"str_december\"] select (date select 1));\n            private _dayString = if ((date select 2) < 10) then {\"0\" + str (date select 2)} else {str (date select 2)};\n\n            (_display displayCtrl IDC_MODEDISPLAY_TIMEDISPLAYGREEN1) ctrlSetText format [\"%1-%2-%3\", _yearString, _monthSring, _dayString]; //\"18-Feb-2010\";\n            (_display displayCtrl IDC_MODEDISPLAY_TIMEDISPLAYGREEN2) ctrlSetText ([daytime, \"HH:MM:SS\"] call bis_fnc_timeToString);\n        } else {\n            private _targetPosName = \"\";\n            private _targetPosLocationASL = [];\n            _bearingText = \"----\";\n            _rangeText = \"----\";\n            _aboveSeaLevelText = \"----\";\n\n            if (GVAR(currentWaypoint) == -2) then {\n                if (!(GVAR(rangeFinderPositionASL) isEqualTo [])) then {\n                    private _targetPos = [GVAR(rangeFinderPositionASL)] call EFUNC(common,getMapGridFromPos);\n                    _targetPosName = format [\"[%1 %2 %3]\", EGVAR(common,MGRS_data) select 1, _targetPos select 0, _targetPos select 1];\n                    _targetPosLocationASL = GVAR(rangeFinderPositionASL);\n                };\n            } else {\n                if (GVAR(currentWaypoint) > ((count _waypoints) - 1)) exitWith {ERROR(\"bounds\");};\n                _targetPosName = (_waypoints select GVAR(currentWaypoint)) select 0;\n                _targetPosLocationASL = (_waypoints select GVAR(currentWaypoint)) select 1;\n            };\n\n            if (!(_targetPosLocationASL isEqualTo [])) then {\n                private _bearing = [(getPosASL ACE_player), _targetPosLocationASL] call BIS_fnc_dirTo;\n                _bearingText = if (GVAR(settingUseMils)) then {\n                    [(floor ((6400 / 360) * (_bearing))), 4, 0] call CBA_fnc_formatNumber;\n                } else {\n                    ([_bearing, 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\n                };\n                private _2dDistanceKm = ((getPosASL ACE_player) distance2D _targetPosLocationASL) / 1000;\n                _rangeText = format [\"%1km\", _2dDistanceKm toFixed 3];\n                private _numASL = (_targetPosLocationASL select 2) + EGVAR(common,mapAltitude);\n                _aboveSeaLevelText = [_numASL, 5, 0] call CBA_fnc_formatNumber;\n                _aboveSeaLevelText = if (_numASL > 0) then {\"+\" + _aboveSeaLevelText + \" MSL\"} else {_aboveSeaLevelText + \" MSL\"};\n            };\n\n            (_display displayCtrl IDC_MODEDISPLAY_TRACKNUM) ctrlSetText _bearingText;\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETRANGENUM) ctrlSetText _rangeText;\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETELEVATIONNUM) ctrlSetText _aboveSeaLevelText;\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETNAME) ctrlSetText _targetPosName;\n        };\n    };\ncase (APP_MODE_COMPASS): {\n        //Heading:\n        private _compassAngleText = if (GVAR(settingUseMils)) then {\n            [(floor ((6400 / 360) * (([ACE_player] call CBA_fnc_headDir) select 0))), 4, 0] call CBA_fnc_formatNumber;\n        } else {\n            ([([ACE_player] call CBA_fnc_headDir) select 0, 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\n        };\n        (_display displayCtrl IDC_MODECOMPASS_HEADING) ctrlSetText _compassAngleText;\n\n        //Speed:\n        private _SpeedText = format [\"%1kph\", (round (speed (vehicle ACE_player)))];;\n        (_display displayCtrl IDC_MODECOMPASS_SPEED) ctrlSetText _SpeedText;\n\n        if (GVAR(currentWaypoint) == -1) then {\n            (_display displayCtrl IDC_MODECOMPASS_BEARING) ctrlSetText \"\";\n            (_display displayCtrl IDC_MODECOMPASS_RANGE) ctrlSetText \"\";\n            (_display displayCtrl IDC_MODECOMPASS_TARGET) ctrlSetText \"\";\n        } else {\n            private _targetPosName = \"\";\n            private _targetPosLocationASL = [];\n\n            if (GVAR(currentWaypoint) == -2) then {\n                if (!(GVAR(rangeFinderPositionASL) isEqualTo [])) then {\n                    private _targetPos = [GVAR(rangeFinderPositionASL)] call EFUNC(common,getMapGridFromPos);\n                    _targetPosName = format [\"[%1 %2 %3]\", EGVAR(common,MGRS_data) select 1, _targetPos select 0, _targetPos select 1];\n                    _targetPosLocationASL = GVAR(rangeFinderPositionASL);\n                };\n            } else {\n                if (GVAR(currentWaypoint) > ((count _waypoints - 1))) exitWith {ERROR(\"bounds\");};\n                _targetPosName = (_waypoints select GVAR(currentWaypoint)) select 0;\n                _targetPosLocationASL = (_waypoints select GVAR(currentWaypoint)) select 1;\n            };\n\n            _bearingText = \"---\";\n            _rangeText = \"---\";\n\n            if (!(_targetPosLocationASL isEqualTo [])) then {\n                private _bearing = [(getPosASL ACE_player), _targetPosLocationASL] call BIS_fnc_dirTo;\n                _bearingText = if (GVAR(settingUseMils)) then {\n                    [(floor ((6400 / 360) * (_bearing))), 4, 0] call CBA_fnc_formatNumber;\n                } else {\n                    ([_bearing, 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\n                };\n                private _2dDistanceKm = ((getPosASL ACE_player) distance2D _targetPosLocationASL) / 1000;\n                _rangeText = format [\"%1km\", _2dDistanceKm toFixed 3];\n            };\n\n            (_display displayCtrl IDC_MODECOMPASS_BEARING) ctrlSetText _bearingText;\n            (_display displayCtrl IDC_MODECOMPASS_RANGE) ctrlSetText _rangeText;\n            (_display displayCtrl IDC_MODECOMPASS_TARGET) ctrlSetText _targetPosName;\n        };\n    };\n\ncase (APP_MODE_WAYPOINTS): {\n        private _wpListBox = _display displayCtrl IDC_MODEWAYPOINTS_LISTOFWAYPOINTS;\n        private _currentIndex = lbCurSel _wpListBox;\n\n        lbClear _wpListBox;\n        {\n            _x params [\"_wpName\", \"_wpPos\"];\n            _wpListBox lbAdd _wpName;\n            private _2dDistanceKm = ((getPosASL ACE_player) distance2D _wpPos) / 1000;\n            _wpListBox lbSetTextRight [_forEachIndex, (format [\"%1km\", _2dDistanceKm toFixed 3])];\n        } forEach _waypoints;\n\n        _currentIndex = (_currentIndex max 0) min (count _waypoints);\n        _wpListBox lbSetCurSel _currentIndex;\n\n        //Reset focus to a dummy ctrl (top button), otherwise HOME/POS1 key goes to top of listBox and has keybind blocked\n        ctrlSetFocus (_display displayCtrl IDC_TOPMENUBUTTON);\n    };\n\ncase (APP_MODE_SETUP): {\n        private _settingListBox = _display displayCtrl IDC_MODESETTINGS;\n        lbClear _settingListBox;\n\n        _settingListBox lbAdd (localize LSTRING(settingUseMils));\n        if (GVAR(settingUseMils)) then {\n            _settingListBox lbSetTextRight [0, (localize LSTRING(settingMils))];\n        } else {\n            _settingListBox lbSetTextRight [0, (localize LSTRING(settingDegrees))];\n        };\n\n        _settingListBox lbAdd (localize LSTRING(settingShowWP));\n        if (GVAR(settingShowAllWaypointsOnMap)) then {\n            _settingListBox lbSetTextRight [1, (localize LSTRING(settingOn))];\n        } else {\n            _settingListBox lbSetTextRight [1, (localize LSTRING(settingOff))];\n        };\n\n        //Reset focus to a dummy ctrl (top button), otherwise HOME/POS1 key goes to top of listBox and has keybind blocked\n        ctrlSetFocus (_display displayCtrl IDC_TOPMENUBUTTON);\n    };\n};\n",
        "functionName": "ace_microdagr_fnc_updateDisplay"
      }
    ]
  },
  {
    "component": "minedetector",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n// Create a dictionary to store detector configs\nGVAR(detectorConfigs) = call CBA_fnc_createNamespace;\n\n// Create a dictionary of detectable classnames\nGVAR(detectableClasses) = call CBA_fnc_createNamespace;\n{\n    if ((getNumber (_x >> QGVAR(detectable))) == 1) then {\n        GVAR(detectableClasses) setVariable [configName _x, true];\n    };\n} forEach (configProperties [configFile >> \"CfgVehicles\", \"isClass _x\", true]);\n{\n    if ((getNumber (_x >> QGVAR(detectable))) == 1) then {\n        GVAR(detectableClasses) setVariable [configName _x, true];\n    };\n} forEach (configProperties [configFile >> \"CfgAmmo\", \"isClass _x\", true]);\n\n[QGVAR(enableDetector), FUNC(enableDetector)] call CBA_fnc_addEventHandler;\n[QGVAR(disableDetector), FUNC(disableDetector)] call CBA_fnc_addEventHandler;\n\n// Shows detector and mine posistions in 3d when debug is on\n#ifdef DEBUG_MODE_FULL\nGVAR(debugDetector) = [];\naddMissionEventHandler [\"Draw3D\", {\n    if (GVAR(debugDetector) isEqualTo []) exitWith {};\n    GVAR(debugDetector) params [\"_detectorPointAGL\", \"_mines\"];\n    drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", [0,0,1,1], _detectorPointAGL, 1, 1, 0, \"detector\", 1, 0.02, \"PuristaMedium\"];\n    {\n        private _name = format [\"%1@%2\", typeOf _x, (floor ((_x distance _detectorPointAGL) * 10)) / 10];\n        if ((getNumber (configFile >> \"CfgVehicles\" >> (typeOf _x) >> QGVAR(detectable))) == 1) then {\n            drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", [1,0,0,1], (ASLtoAGL (getPosASL _x)), 1, 1, 0, _name, 1, 0.02, \"PuristaMedium\"];\n        } else {\n            drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", [1,1,0,1], (ASLtoAGL (getPosASL _x)), 1, 1, 0, _name, 1, 0.02, \"PuristaMedium\"];\n        };\n    } forEach _mines;\n}];\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_activateDetector.sqf",
        "content": "/*\n * Author: Glowbal\n * Activate the mine detector\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_minedetector_fnc_activateDetector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (call FUNC(canActivateDetector)) then {\n    [ACE_player, currentWeapon ACE_player] call FUNC(enableDetector);\n};\n",
        "functionName": "ace_minedetector_fnc_activateDetector"
      },
      {
        "fileName": "fnc_canActivateDetector.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if the mine detector can be activated\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Can be activated <BOOL>\n *\n * Example:\n * [] call ace_minedetector_fnc_canActivateDetector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n([ACE_player] call FUNC(hasDetector)) &&\n!([ACE_player, currentWeapon ACE_player] call FUNC(isDetectorEnabled));\n",
        "functionName": "ace_minedetector_fnc_canActivateDetector"
      },
      {
        "fileName": "fnc_canConnectHeadphones.sqf",
        "content": "/*\n * Author: esteldunedain\n * Check if headphones can be connected to the mine detector\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Can be connected <BOOL>\n *\n * Example:\n * [] call ace_minedetector_fnc_canConnectHeadphones\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n!(ACE_player getVariable [QGVAR(isUsingHeadphones), false]) &&\n{[ACE_player] call FUNC(hasDetector)};\n",
        "functionName": "ace_minedetector_fnc_canConnectHeadphones"
      },
      {
        "fileName": "fnc_canDeactivateDetector.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if the mine detector can be deactivated\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Can be deactivated <BOOL>\n *\n * Example:\n * [] call ace_minedetector_fnc_canDeactivateDetector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n([ACE_player] call FUNC(hasDetector)) &&\n{[ACE_player, currentWeapon ACE_player] call FUNC(isDetectorEnabled)};\n",
        "functionName": "ace_minedetector_fnc_canDeactivateDetector"
      },
      {
        "fileName": "fnc_canDisconnectHeadphones.sqf",
        "content": "/*\n * Author: esteldunedain\n * Check if headphones can be disconnected from the mine detector\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Can be disconnected <BOOL>\n *\n * Example:\n * [] call ace_minedetector_fnc_canDisconnectHeadphones\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n(ACE_player getVariable [QGVAR(isUsingHeadphones), false]) &&\n{[ACE_player] call FUNC(hasDetector)};\n",
        "functionName": "ace_minedetector_fnc_canDisconnectHeadphones"
      },
      {
        "fileName": "fnc_connectHeadphones.sqf",
        "content": "/*\n * Author: esteldunedain\n * Connect/disconnect headphones to the mine detector\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Connect? <BOOLEAN>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit, true] call ace_minedetector_fnc_connectHeadphones\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_state\"];\n_unit setVariable [QGVAR(isUsingHeadphones), _state];\n\nif (_state) then {\n    [localize LSTRING(HeadphonesConnected)] call EFUNC(common,displayTextStructured);\n} else {\n    [localize LSTRING(HeadphonesDisconnected)] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_minedetector_fnc_connectHeadphones"
      },
      {
        "fileName": "fnc_deactivateDetector.sqf",
        "content": "/*\n * Author: Glowbal\n * Deactivate the mine detector\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_minedetector_fnc_deactivateDetector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (call FUNC(canDeactivateDetector)) then {\n    [ACE_player, currentWeapon ACE_player] call FUNC(disableDetector);\n};\n",
        "functionName": "ace_minedetector_fnc_deactivateDetector"
      },
      {
        "fileName": "fnc_detectorLoop.sqf",
        "content": "/*\n * Author: Glowbal\n * Handle mine detection in a PFH loop\n *\n * Arguments:\n * 0: args <ARRAY>\n * 1: PHD Id <PFH_ID>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[args], 2] call ACE_minedetector_fnc_detectorLoop\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_args\", \"_idPFH\"];\n_args params [\"_unit\", \"_type\", \"_detectorConfig\", \"_lastPlayed\"];\n\n// If locality switched just turn off the detector\nif !(local _unit)  exitWith {\n    [QGVAR(disableDetector), [_unit, _type], _unit] call CBA_fnc_targetEvent;\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\nif !([_unit, _type] call FUNC(hasDetector)) exitWith {\n    // disable detector type\n    [_unit, _type] call FUNC(disableDetector);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\nif (!alive _unit) exitWith {\n    [_unit, _type] call FUNC(disableDetector);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\nif !([_unit, _type] call FUNC(isDetectorEnabled)) exitWith {\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\nif (currentWeapon _unit != _type) exitWith {\n    [_unit, _type] call FUNC(disableDetector);\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n};\n\nprivate _detected = [[_unit, _detectorConfig], FUNC(getDetectedObject), _unit, QGVAR(detectedObjects), 0.15] call EFUNC(common,cachedCall);\n_detected params [\"_hasDetected\", \"_mine\", \"_distance\"];\n\nif (!_hasDetected) exitWith {};\n\n// Launch a local event stating which mine was detected for mission purposes\n[QGVAR(mineDetected), [_unit, _mine, _distance]] call CBA_fnc_localEvent;\n\nprivate _distanceTiming = switch (true) do {\n    case (_distance >= 2): {1};\n    case (_distance >= 1.25): {0.85};\n    case (_distance >= 0.75): {0.7};\n    default {0.5};\n};\n\nif (CBA_missionTime - _lastPlayed < _distanceTiming) exitWith {};\n\n_args set [3, CBA_missionTime];\n_detectorConfig params [\"\", \"\", \"_soundClasses\"];\nprivate _soundClass = switch (true) do {\n    case (_distance >= 2): {_soundClasses select 3};\n    case (_distance >= 1.25): {_soundClasses select 2};\n    case (_distance >= 0.5): {_soundClasses select 1};\n    default {_soundClasses select 0};\n};\n\n[_unit, _soundClass] call FUNC(playDetectorSound);\n",
        "functionName": "ace_minedetector_fnc_detectorLoop"
      },
      {
        "fileName": "fnc_disableDetector.sqf",
        "content": "/*\n * Author: Glowbal\n * Disables the mine detector\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: detecter type <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [UNIT, DETECTOR_CLASS_NAME] call ace_minedetector_fnc_disableDetector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_detectorType\"];\n\nif !(local _unit) then {\n    [QGVAR(disableDetector), [_unit, _detectorType], _unit] call CBA_fnc_targetEvent;\n};\n\n_unit setVariable [format[QGVAR(enable_%1), _detectorType], false, true];\n\nif (_unit == ACE_player && {alive _unit}) then {\n    playSound \"ACE_Sound_Click\";\n};\n\n[QGVAR(detectorDisabled), [_unit, _detectorType]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_minedetector_fnc_disableDetector"
      },
      {
        "fileName": "fnc_enableDetector.sqf",
        "content": "/*\n * Author: Glowbal\n * Enables the mine detector\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: detecter type <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [UNIT, DETECTOR_CLASS_NAME] call ace_minedetector_fnc_enableDetector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_detectorType\"];\n\nif !(local _unit) then {\n    [QGVAR(enableDetector), [_unit, _detectorType], _unit] call CBA_fnc_targetEvent;\n};\n\n_unit setVariable [format[QGVAR(enable_%1), _detectorType], true, true];\n\nif (_unit == ACE_player) then {\n    playSound \"ACE_Sound_Click\";\n};\n\n[QGVAR(detectorEnabled), [_unit, _detectorType]] call CBA_fnc_localEvent;\n\nprivate _config = [_detectorType] call FUNC(getDetectorConfig);\n[FUNC(detectorLoop), 0.05, [_unit, _detectorType, _config, CBA_missionTime - 0.25]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_minedetector_fnc_enableDetector"
      },
      {
        "fileName": "fnc_getDetectedObject.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the distance to the nearest detectable object\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Configuration <ARRAY>\n *\n * Return Value:\n * [isDetected <BOOL>, mine <OBJECT>, distance <NUMBER>] <ARRAY>\n *\n * Example:\n * [ace_player, DETECTOR_CONFIG] call ace_minedetector_fnc_getDetectedObject\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_detectorConfig\"];\n_detectorConfig params [\"\", \"_radius\"];\n\nprivate _worldPosition = _unit modelToWorld (_unit selectionPosition \"granat\");\nprivate _ref = (_unit weaponDirection currentWeapon _unit) call EFUNC(common,createOrthonormalReference);\n_ref params [\"_v1\", \"_v2\", \"_v3\"];\nprivate _detectorPointAGL = _worldPosition vectorAdd\n                                (_v1 vectorMultiply ( 0.9 * __DR)) vectorAdd\n                                (_v2 vectorMultiply (-0.2 * __DR)) vectorAdd\n                                (_v3 vectorMultiply ( 0.4 * __DR));\n\nprivate _nearestObjects = nearestObjects [_detectorPointAGL, [], _radius];\n\n#ifdef DEBUG_MODE_FULL\nGVAR(debugDetector) = [_detectorPointAGL, _nearestObjects];\n#endif\n\nprivate _isDetectable = false;\nprivate _mine = objNull;\nprivate _distance = -1;\n\n{\n    private _objectType = typeOf _x;\n\n    _isDetectable = GVAR(detectableClasses) getVariable _objectType;\n    if (isNil \"_isDetectable\" || {(getModelInfo _x) select 0 == \"empty.p3d\"}) then {\n        _isDetectable = false;\n    };\n\n    // If a nun-null object was detected exit the search\n    if (_isDetectable && {!isNull _x}) exitWith {\n        _distance = _detectorPointAGL distance _x;\n        _mine = _x;\n        TRACE_3(\"return\", _isDetectable, _mine, _distance);\n    };\n} forEach _nearestObjects;\n\n[_isDetectable, _mine, _distance];\n",
        "functionName": "ace_minedetector_fnc_getDetectedObject"
      },
      {
        "fileName": "fnc_getDetectorConfig.sqf",
        "content": "/*\n * Author: Glowbal\n * Get the mine detector configuration from the cache or config file\n *\n * Arguments:\n * 0: Detector class name <STRING>\n *\n * Return Value:\n * Detector configuration or empty array if invalid <ARRAY>\n *\n * Example:\n * [\"my_detector\"] call ace_minedetector_fnc_getDetectorConfig\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_detectorType\"];\n\nif (_detectorType isEqualTo \"\") exitWith {[]};\n\nprivate _detectorConfig = GVAR(detectorConfigs) getVariable _detectorType;\nif (isNil \"_detectorConfig\") then {\n    private _cfgEntry = (configFile >> \"ACE_detector\" >> \"detectors\" >> _detectorType);\n    if (isClass _cfgEntry) then {\n        _detectorConfig = [\n            _detectorType,\n            getNumber (_cfgEntry >> \"radius\"),\n            getArray (_cfgEntry >> \"sounds\")\n        ];\n    } else {\n        _detectorConfig = [];\n    };\n    GVAR(detectorConfigs) setVariable [_detectorType, _detectorConfig];\n};\n_detectorConfig\n",
        "functionName": "ace_minedetector_fnc_getDetectorConfig"
      },
      {
        "fileName": "fnc_hasDetector.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if unit has a mine detector in hands\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Current weapon is a mine detector <BOOLEAN>\n *\n * Example:\n * [ace_player] call ace_minedetector_fnc_hasDetector\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n!(([currentWeapon _unit] call FUNC(getDetectorConfig)) isEqualTo []);\n",
        "functionName": "ace_minedetector_fnc_hasDetector"
      },
      {
        "fileName": "fnc_isDetectorEnabled.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if the mine detector is enabled\n *\n * Arguments:\n * 0: detecter type <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"example\"] call ace_minedetector_fnc_[functionName]\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_detectorType\"];\n\nalive _unit && {(_unit getVariable [format[QGVAR(enable_%1), _detectorType], false])};\n",
        "functionName": "ace_minedetector_fnc_isDetectorEnabled"
      },
      {
        "fileName": "fnc_playDetectorSound.sqf",
        "content": "/*\n * Author: Glowbal\n * Play the detector sound\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Sound class <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"ace_buzz_1\", 1] call ace_minedetector_fnc_playDetectorSound\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_soundClass\"];\n\nif (isNull _unit) exitWith {\n    ERROR_1(\"unit does not exist [%1]\",_unit);\n};\nif (!alive _unit) exitWith {\n    ERROR_1(\"unit is not alive [%1]\",_unit);\n};\n\nif (_unit getVariable [QGVAR(isUsingHeadphones), false] && {_unit == ACE_player}) then {\n    playSound _soundClass;\n} else {\n    private _posASL = AGLtoASL (_unit modelToWorld (_unit selectionPosition \"granat\"));\n    [_soundClass, _posASL, 3, 15] call EFUNC(common,playConfigSound3D);\n};\n",
        "functionName": "ace_minedetector_fnc_playDetectorSound"
      }
    ]
  },
  {
    "component": "missileguidance",
    "files": [
      {
        "fileName": "XEH_post_init.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(handoff), {_this call FUNC(handleHandoff)}] call CBA_fnc_addEventHandler;\n\n[\"ACE3 Weapons\", QGVAR(cycleFireMode), localize LSTRING(CycleFireMode),\n{\n    [] call FUNC(cycleAttackProfileKeyDown);\n    false\n},\n{\n    false\n},\n[15, [false, true, false]], false] call CBA_fnc_addKeybind;  //Ctrl+Tab Key\n"
      },
      {
        "fileName": "XEH_pre_init.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// Formally a ace_setting, users can still disable by `setting ace_missileguidance_enabled = x;` \n// [0 - Off , 1 - PlayerOnly, 2 - PlayerAndAi]\n// As weapons take config changes, there is little point in being able to disable guidance\nif (isNil QGVAR(enabled)) then { GVAR(enabled) = 2; };\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_attackProfile_AIR.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Attack profile: AIR\n * TODO: falls back to Linear\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Seeker State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_attackProfile_AIR;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n_this call FUNC(attackProfile_LIN);\n",
        "functionName": "ace_missileguidance_fnc_attackProfile_AIR"
      },
      {
        "fileName": "fnc_attackProfile_DIR.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Attack profile: DIR\n * TODO: falls back to Linear\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Seeker State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_attackProfile_DIR;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n_this call FUNC(attackProfile_LIN);\n",
        "functionName": "ace_missileguidance_fnc_attackProfile_DIR"
      },
      {
        "fileName": "fnc_attackProfile_HI.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Attack profile: HI\n * TODO: falls back to Linear\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_attackProfile_HI;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n_this call FUNC(attackProfile_LIN);\n",
        "functionName": "ace_missileguidance_fnc_attackProfile_HI"
      },
      {
        "fileName": "fnc_attackProfile_JAV_DIR.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Attack profile: Javelin Dir\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_attackProfile_JAV_DIR;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n#define STAGE_LAUNCH 1\n#define STAGE_CLIMB 2\n#define STAGE_COAST 3\n#define STAGE_TERMINAL 4\n\nparams [\"_seekerTargetPos\", \"_args\", \"_attackProfileStateParams\"];\n_args params [\"_firedEH\"];\n_firedEH params [\"_shooter\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n\nif (_seekerTargetPos isEqualTo [0,0,0]) exitWith {_seekerTargetPos};\n\nif (_attackProfileStateParams isEqualTo []) then {\n    _attackProfileStateParams set [0, STAGE_LAUNCH];\n};\n\nprivate _shooterPos = getPosASL _shooter;\nprivate _projectilePos = getPosASL _projectile;\n\nprivate _distanceToTarget = _projectilePos vectorDistance _seekerTargetPos;\nprivate _distanceToShooter = _projectilePos vectorDistance _shooterPos;\nprivate _distanceShooterToTarget = _shooterPos vectorDistance _seekerTargetPos;\n\nTRACE_2(\"\", _distanceToTarget, _distanceToShooter);\n\n// Add height depending on distance for compensate\nprivate _returnTargetPos = _seekerTargetPos;\n\nswitch (_attackProfileStateParams select 0) do {\n    case STAGE_LAUNCH: {\n        TRACE_1(\"STAGE_LAUNCH\",\"\");\n        if (_distanceToShooter < 10) then {\n            _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*2];\n        } else {\n            _attackProfileStateParams set [0, STAGE_CLIMB];\n        };\n    };\n    case STAGE_CLIMB: {\n        TRACE_1(\"STAGE_CLIMB\",\"\");\n       private _cruisAlt = 60 * (_distanceShooterToTarget/2000);\n\n        if ( ((ASLToAGL _projectilePos) select 2) - ((ASLToAGL _seekerTargetPos) select 2) >= _cruisAlt) then {\n            _attackProfileStateParams set [0, STAGE_TERMINAL];\n        } else {\n             _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*1.5];\n        };\n    };\n    case STAGE_TERMINAL: {\n        TRACE_1(\"STAGE_TERMINAL\",\"\");\n        _returnTargetPos = _seekerTargetPos;\n    };\n};\n\nTRACE_1(\"Adjusted target position\", _returnTargetPos);\n_returnTargetPos;\n",
        "functionName": "ace_missileguidance_fnc_attackProfile_JAV_DIR"
      },
      {
        "fileName": "fnc_attackProfile_JAV_TOP.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Attack profile: Javelin Top\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_attackProfile_JAV_TOP;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n#define STAGE_LAUNCH 1\n#define STAGE_CLIMB 2\n#define STAGE_COAST 3\n#define STAGE_TERMINAL 4\n\nparams [\"_seekerTargetPos\", \"_args\", \"_attackProfileStateParams\"];\n_args params [\"_firedEH\"];\n_firedEH params [\"_shooter\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n\nif (_seekerTargetPos isEqualTo [0,0,0]) exitWith {_seekerTargetPos};\n\nif (_attackProfileStateParams isEqualTo []) then {\n    _attackProfileStateParams set [0, STAGE_LAUNCH];\n};\n\nprivate _shooterPos = getPosASL _shooter;\nprivate _projectilePos = getPosASL _projectile;\n\nprivate _distanceToTarget = _projectilePos vectorDistance _seekerTargetPos;\nprivate _distanceToShooter = _projectilePos vectorDistance _shooterPos;\nprivate _distanceShooterToTarget = _shooterPos vectorDistance _seekerTargetPos;\n\nTRACE_2(\"\", _distanceToTarget, _distanceToShooter);\n\n// Add height depending on distance for compensate\nprivate _returnTargetPos = _seekerTargetPos;\n\nswitch( (_attackProfileStateParams select 0) ) do {\n    case STAGE_LAUNCH: {\n        TRACE_1(\"STAGE_LAUNCH\",\"\");\n        if (_distanceToShooter < 10) then {\n            _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*2];\n        } else {\n            _attackProfileStateParams set [0, STAGE_CLIMB];\n        };\n    };\n    case STAGE_CLIMB: {\n        TRACE_1(\"STAGE_CLIMB\",\"\");\n        private _cruisAlt = 140;\n        if (_distanceShooterToTarget < 1250) then {\n            _cruisAlt = 140 * (_distanceShooterToTarget/1250);\n            TRACE_1(\"_cruisAlt\", _cruisAlt);\n        };\n        if ( ((ASLToAGL _projectilePos) select 2) - ((ASLToAGL _seekerTargetPos) select 2) >= _cruisAlt) then {\n            if (_cruisAlt < 140) then {\n                _attackProfileStateParams set [0, STAGE_TERMINAL];\n            } else {\n                _attackProfileStateParams set [0, STAGE_COAST];\n            };\n        } else {\n             _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*1.5];\n        };\n    };\n    case STAGE_COAST: {\n        TRACE_1(\"STAGE_COAST\",\"\");\n        TRACE_1(\"\", ((ASLToAGL _projectilePos) select 2) - (( ASLToAGL _seekerTargetPos) select 2) );\n        if (_distanceToTarget < ( ((ASLToAGL _projectilePos) select 2) - (( ASLToAGL _seekerTargetPos) select 2) ) * 2) then {\n            _attackProfileStateParams set [0, STAGE_TERMINAL];\n        } else {\n            _returnTargetPos = _seekerTargetPos vectorAdd [0,0,(_projectilePos select 2)];\n        };\n    };\n    case STAGE_TERMINAL: {\n        TRACE_1(\"STAGE_TERMINAL\",\"\");\n        //_returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget * 0.02];\n        _returnTargetPos = _seekerTargetPos;\n    };\n};\n\nTRACE_1(\"Adjusted target position\", _returnTargetPos);\n_returnTargetPos;\n",
        "functionName": "ace_missileguidance_fnc_attackProfile_JAV_TOP"
      },
      {
        "fileName": "fnc_attackProfile_LIN.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Attack profile: Linear (used by DAGR)\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_attackProfile_LIN;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_seekerTargetPos\", \"_args\"];\n_args params [\"_firedEH\"];\n_firedEH params [\"_shooter\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n\nif (_seekerTargetPos isEqualTo [0,0,0]) exitWith {_seekerTargetPos};\n\nprivate _shooterPos = getPosASL _shooter;\nprivate _projectilePos = getPosASL _projectile;\n\nprivate _distanceToTarget = _projectilePos vectorDistance _seekerTargetPos;\nprivate _distanceToShooter = _projectilePos vectorDistance _shooterPos;\nprivate _distanceShooterToTarget = _shooterPos vectorDistance _seekerTargetPos;\n\nTRACE_2(\"\", _distanceToTarget, _distanceToShooter);\n\n// Add height depending on distance for compensate\nprivate _addHeight = [0,0,0];\n\n// Always climb an arc on initial launch if we are close to the round\nif ((((ASLtoAGL _projectilePos) select 2) < 5) && {_distanceToShooter < 15}) then {\n    _addHeight = _addHeight vectorAdd [0,0,_distanceToTarget];\n    TRACE_1(\"climb - near shooter\",_addHeight);\n} else {\n    // If we are below the target, increase the climbing arc\n    if (((_projectilePos select 2) < (_seekerTargetPos select 2)) && {_distanceToTarget > 100}) then {\n        _addHeight = _addHeight vectorAdd [0,0, ((_seekerTargetPos select 2) - (_projectilePos select 2))];\n        TRACE_1(\"climb - below target and far\",_addHeight);\n    };\n};\n\n// Handle arcing terminal low for high decent (when projectile above target)\nif ((_projectilePos select 2) > (_seekerTargetPos select 2)) then {\n    if (_distanceToTarget < 100) then {\n        _addHeight = _addHeight vectorDiff [0,0, ((_projectilePos select 2) - (_seekerTargetPos select 2)) * 0.5];\n        TRACE_1(\"above - close\",_addHeight);\n    } else {\n        TRACE_1(\"above - far\",_addHeight);\n        _addHeight = _addHeight vectorAdd [0,0, _distanceToTarget*0.02];\n    };\n};\n\nprivate _returnTargetPos = _seekerTargetPos vectorAdd _addHeight;\n\nTRACE_2(\"Adjusted target position\",_returnTargetPos,_addHeight);\n_returnTargetPos;\n",
        "functionName": "ace_missileguidance_fnc_attackProfile_LIN"
      },
      {
        "fileName": "fnc_attackProfile_MID.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Attack profile: MID\n * TODO: falls back to Linear\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_attackProfile_MID;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\n_this call FUNC(attackProfile_LIN);\n",
        "functionName": "ace_missileguidance_fnc_attackProfile_MID"
      },
      {
        "fileName": "fnc_changeMissileDirection.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Change a projectile's direction, maintaing speed\n *\n * Arguments:\n * 0: Projectile <OBJECT>\n * 1: Direction (unit vector) <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [missile, [0,1,0]] call ace_missileguidance_fnc_changeMissileDirection;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_projectile\", \"_v\"];\n\nprivate _l = sqrt ((_v select 0) ^ 2 + (_v select 1) ^ 2);\nprivate _r = -(_v select 2) / _l;\n\n_projectile setVectorDirAndUp [ _v, [(_v select 0) * _r,(_v select 1) * _r, _l] ];\n_projectile setVelocity (_v vectorMultiply (vectorMagnitude (velocity _projectile)));\n",
        "functionName": "ace_missileguidance_fnc_changeMissileDirection"
      },
      {
        "fileName": "fnc_checkLos.sqf",
        "content": "/*\n * Author: jaynus\n * Returns whether the seeker object can see the target position with lineIntersect\n *\n * Arguments:\n * 0: Seeker <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Has LOS <BOOL>\n *\n * Example:\n * [player, cursorTarget] call ace_missileguidance_fnc_checkLOS;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_seeker\", \"_target\"];\n\nif ((isNil \"_seeker\") || {isNil \"_target\"}) exitWith {\n    ERROR_2(\"nil\",_seeker,_target);\n    false\n};\n\nprivate _targetPos = getPosASL _target;\nprivate _targetAimPos = aimPos _target;\nprivate _seekerPos = getPosASL _seeker;\nprivate _return = true;\n\nif (!((terrainIntersectASL [_seekerPos, _targetPos]) && {terrainIntersectASL [_seekerPos, _targetAimPos]})) then {\n    if (lineIntersects [_seekerPos, _targetPos, _seeker, _target]) then {\n        _return = false;\n    };\n} else {\n    _return = false;\n};\n\n_return;\n",
        "functionName": "ace_missileguidance_fnc_checkLos"
      },
      {
        "fileName": "fnc_checkSeekerAngle.sqf",
        "content": "/*\n * Author: jaynus\n * Returns whether the target position is within the maximum angle FOV of the provided seeker\n * objects current direction.\n *\n * Arguments:\n * 0: Seeker <OBJECT>\n * 1: Target PosASL <ARRAY>\n * 2: Max Angle (degrees) <NUMBER>\n *\n * Return Value:\n * Can See <BOOL>\n *\n * Example:\n * [player, cursorTarget, 45] call ace_missileguidance_fnc_checkSeekerAngle;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_seeker\", \"_targetPos\", \"_seekerMaxAngle\"];\n\nprivate _sensorPos = getPosASL _seeker;\n\nprivate _testPointVector = vectorNormalized (_targetPos vectorDiff _sensorPos);\nprivate _testDotProduct = (vectorNormalized (velocity _seeker)) vectorDotProduct _testPointVector;\n\nTRACE_2(\"fov\",acos _testDotProduct,_seekerMaxAngle);\n\nif (_testDotProduct < (cos _seekerMaxAngle)) exitWith {\n    false\n};\n\ntrue\n",
        "functionName": "ace_missileguidance_fnc_checkSeekerAngle"
      },
      {
        "fileName": "fnc_cycleAttackProfileKeyDown.sqf",
        "content": "/*\n * Author: PabstMirror\n * Cycles fire mode for any missileGuidance enabled ammo that has multiple attack profiles\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_missileguidance_fnc_cycleAttackProfileKeyDown\n *\n * Public: No\n */\n\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nTRACE_1(\"cycle fire mode\",_this);\n\nif (!alive ACE_player) exitWith {};\nif (!([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith))) exitWith {};\n\n\nprivate _currentShooter = objNull;\nprivate _currentMagazine = \"\";\nif (isNull (ACE_controlledUAV param [0, objNull])) then {\n    if (((vehicle ACE_player) == ACE_player) || {ACE_player call CBA_fnc_canUseWeapon}) then {\n        _currentShooter = ACE_player;\n        _currentMagazine = currentMagazine ACE_player;\n    } else {\n        _currentShooter = vehicle ACE_player;\n        private _turretPath = if (ACE_player == (driver _currentShooter)) then {[-1]} else {ACE_player call CBA_fnc_turretPath};\n        _currentMagazine = _currentShooter currentMagazineTurret _turretPath;\n    };\n} else {\n    _currentShooter = ACE_controlledUAV select 0;\n    private _turretPath = ACE_controlledUAV select 2;\n    _currentMagazine = _currentShooter currentMagazineTurret _turretPath;\n};\n\nif (_currentMagazine == \"\") exitWith {TRACE_1(\"no magazine\",_currentMagazine)};\n\nprivate _ammo = getText (configFile >> \"CfgMagazines\" >> _currentMagazine >> \"ammo\");\n\nTRACE_3(\"\",_currentShooter,_currentMagazine,_ammo);\n\n// Bail if guidance is disabled for this ammo\nif ((getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QUOTE(ADDON) >> \"enabled\")) != 1) exitWith {TRACE_1(\"not enabled\",_ammo)};\n\n// Verify ammo has explicity added guidance config (ignore inheritances)\nprivate _configs = configProperties [(configFile >> \"CfgAmmo\" >> _ammo), QUOTE(configName _x == QUOTE(QUOTE(ADDON))), false];\nif ((count _configs) < 1) exitWith {TRACE_2(\"not explicity enabled\",_ammo,_configs)};\n\nprivate _attackProfiles = getArray (configFile >> \"CfgAmmo\" >> _ammo >> QUOTE(ADDON) >> \"attackProfiles\");\nif ((count _attackProfiles) <= 1) exitWith {TRACE_1(\"no choices for attack profile\",_attackProfiles)};\n\nprivate _currentFireMode = _currentShooter getVariable [QGVAR(attackProfile), \"#undefined\"];\n\n// Just like onFired, this is case sensitive!\nprivate _index = _attackProfiles find _currentFireMode;\nif (_index == -1) then {\n    _index = _attackProfiles find (getText (configFile >> \"CfgAmmo\" >> _ammo >> QUOTE(ADDON) >> \"defaultAttackProfile\"));\n};\n_index = (_index + 1) % (count _attackProfiles);\nprivate _nextFireMode = _attackProfiles select _index;\nTRACE_4(\"\",_currentFireMode,_nextFireMode,_index,_attackProfiles);\n\n_currentShooter setVariable [QGVAR(attackProfile), _nextFireMode, false];\n\nplaySound \"ACE_Sound_Click\";\n\nif ((getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QUOTE(ADDON) >> \"showHintOnCycle\")) == 1) then {\n    private _localizedName = getText (configFile >> QGVAR(AttackProfiles) >> _nextFireMode >> \"name\");\n    [_localizedName] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_missileguidance_fnc_cycleAttackProfileKeyDown"
      },
      {
        "fileName": "fnc_doAttackProfile.sqf",
        "content": "/*\n * Author: jaynus / nou, PabstMirror\n * Do attack profile with a valid seeker target location\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Seeker State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_missileguidance_fnc_doAttackProfile;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_seekerTargetPos\", \"_args\"];\n_args params [\"\", \"_launchParams\"];\n_launchParams params [\"\", \"\", \"\", \"_attackProfileName\"];\n\nprivate _attackProfileFunction = getText (configFile >> QGVAR(AttackProfiles) >> _attackProfileName >> \"functionName\");\n\nprivate _attackProfilePos = _this call (missionNamespace getVariable _attackProfileFunction);\n\nif ((isNil \"_attackProfilePos\") || {_attackProfilePos isEqualTo [0,0,0]}) exitWith {\n    ERROR_1(\"attack profile returned bad pos\",_attackProfilePos);\n    [0,0,0]\n};\n\n#ifdef DRAW_GUIDANCE_INFO\ndrawLine3D [(ASLtoAGL _attackProfilePos), (ASLtoAGL _seekerTargetPos), [0,1,1,1]];\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [0,0,1,1], ASLtoAGL _attackProfilePos, 0.5, 0.5, 0, _attackProfileName, 1, 0.025, \"TahomaB\"];\n#endif\n\nTRACE_2(\"return\",_attackProfilePos,_attackProfileName);\n_attackProfilePos;\n",
        "functionName": "ace_missileguidance_fnc_doAttackProfile"
      },
      {
        "fileName": "fnc_doHandoff.sqf",
        "content": "/*\n * Author: ACE\n * Not currently used\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Args <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [target, [args]] call ace_missileguidance_fnc_doHandoff\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_target\", \"_args\"];\n\n[QGVAR(handoff), [_target, _args]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_missileguidance_fnc_doHandoff"
      },
      {
        "fileName": "fnc_doSeekerSearch.sqf",
        "content": "/*\n * Author: jaynus / nou, PabstMirror\n * Do seeker search\n * Handles a nil/bad return and will attempt to use last known position if enabled on ammo\n *\n * Arguments:\n * 1: Guidance Arg Array <ARRAY>\n * 3: Last known pos state array <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[], [], []] call ace_missileguidance_fnc_seekerType_Optic;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"\", \"_args\", \"\", \"_lastKnownPosState\"];\n_args params [\"\", \"_launchParams\"];\n_launchParams params [\"\", \"\", \"_seekerTypeName\"];\n_lastKnownPosState params [\"_seekLastTargetPos\", \"_lastKnownPos\"];\n\nprivate _seekerFunction = getText (configFile >> QGVAR(SeekerTypes) >> _seekerTypeName >> \"functionName\");\n\nprivate _seekerTargetPos = _this call (missionNamespace getVariable _seekerFunction);\n\nif ((isNil \"_seekerTargetPos\") || {_seekerTargetPos isEqualTo [0,0,0]}) then { // A return of nil or [0,0,0] indicates the seeker has no target\n    if (_seekLastTargetPos && {!(_lastKnownPos isEqualTo [0,0,0])}) then { // if enabled for the ammo, use last known position if we have one stored\n        TRACE_2(\"seeker returned bad pos - using last known\",_seekLastTargetPos,_lastKnownPos);\n        _seekerTargetPos = _lastKnownPos;\n        #ifdef DRAW_GUIDANCE_INFO\n        drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\military\\unknown_CA.paa\", [1,1,0,1], ASLtoAGL _lastKnownPos, 0.25, 0.25, 0, \"LastKnownPos\", 1, 0.02, \"TahomaB\"];\n        #endif\n    } else {\n        TRACE_1(\"seeker returned no pos\",_seekerTargetPos);\n        _seekerTargetPos = [0,0,0];\n    };\n} else {\n    if (_seekLastTargetPos) then { // if enabled for the ammo, store last known position\n        TRACE_1(\"saving current pos\",_seekLastTargetPos);\n        _lastKnownPosState set [1, _seekerTargetPos];\n    };\n};\n\n#ifdef DRAW_GUIDANCE_INFO\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [0,1,0,1], ASLtoAGL _seekerTargetPos, 0.5, 0.5, 0, _seekerTypeName, 1, 0.025, \"TahomaB\"];\n#endif\n\nTRACE_2(\"return\",_seekerTargetPos,_seekerTypeName);\n_seekerTargetPos;\n",
        "functionName": "ace_missileguidance_fnc_doSeekerSearch"
      },
      {
        "fileName": "fnc_guidancePFH.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Guidance Per Frame Handler\n *\n * Arguments:\n * 0: Guidance Arg Array <ARRAY>\n * 1: PFID <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[], 0] call ace_missileguidance_fnc_guidancePFH;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(guidancePFH);\n\n#define TIMESTEP_FACTOR 0.01\n\nparams [\"_args\", \"_pfID\"];\n_args params [\"_firedEH\", \"_launchParams\", \"_flightParams\", \"_seekerParams\", \"_stateParams\"];\n_firedEH params [\"_shooter\",\"\",\"\",\"\",\"_ammo\",\"\",\"_projectile\"];\n_launchParams params [\"\",\"_targetLaunchParams\"];\n_stateParams params [\"_lastRunTime\", \"_seekerStateParams\", \"_attackProfileStateParams\", \"_lastKnownPosState\"];\n\nif (!alive _projectile || isNull _projectile || isNull _shooter) exitWith {\n    [_pfID] call CBA_fnc_removePerFrameHandler;\n    END_COUNTER(guidancePFH);\n};\n\nprivate _runtimeDelta = diag_tickTime - _lastRunTime;\nprivate _adjustTime = 1;\n\nif (accTime > 0) then {\n    _adjustTime = 1/accTime;\n    _adjustTime = _adjustTime *  (_runtimeDelta / TIMESTEP_FACTOR);\n    TRACE_4(\"Adjust timing\", 1/accTime, _adjustTime, _runtimeDelta, (_runtimeDelta / TIMESTEP_FACTOR) );\n} else {\n    _adjustTime = 0;\n};\n\nprivate _minDeflection = ((_flightParams select 0) - ((_flightParams select 0) * _adjustTime)) max 0;\nprivate _maxDeflection = (_flightParams select 1) * _adjustTime;\n// private _incDeflection = _flightParams select 2; // todo\n\nprivate _projectilePos = getPosASL _projectile;\n\n// Run seeker function:\nprivate _seekerTargetPos = [[0,0,0], _args, _seekerStateParams, _lastKnownPosState] call FUNC(doSeekerSearch);\n\n// Run attack profile function:\nprivate _profileAdjustedTargetPos = [_seekerTargetPos, _args, _attackProfileStateParams] call FUNC(doAttackProfile);\n\n// If we have no seeker target, then do not change anything\nif (!(_profileAdjustedTargetPos isEqualTo [0,0,0])) then {\n\n    private _targetVector = _projectilePos vectorFromTo _profileAdjustedTargetPos;\n    private _adjustVector = _targetVector vectorDiff (vectorDir _projectile);\n    _adjustVector params [\"_adjustVectorX\", \"_adjustVectorY\", \"_adjustVectorZ\"];\n\n    private _yaw = 0;\n    private _pitch = 0;\n    private _roll = 0;\n\n    if (_adjustVectorX < 0) then {\n        _yaw = - ( (_minDeflection max ((abs _adjustVectorX) min _maxDeflection) ) );\n    } else {\n        if (_adjustVectorX > 0) then {\n            _yaw = ( (_minDeflection max (_adjustVectorX min _maxDeflection) ) );\n        };\n    };\n    if (_adjustVectorY < 0) then {\n        _roll = - ( (_minDeflection max ((abs _adjustVectorY) min _maxDeflection) ) );\n    } else {\n        if (_adjustVectorY > 0) then {\n            _roll = ( (_minDeflection max (_adjustVectorY min _maxDeflection) ) );\n        };\n    };\n    if (_adjustVectorZ < 0) then {\n        _pitch = - ( (_minDeflection max ((abs _adjustVectorZ) min _maxDeflection) ) );\n    } else {\n        if (_adjustVectorZ > 0) then {\n            _pitch = ( (_minDeflection max (_adjustVectorZ min _maxDeflection) ) );\n        };\n    };\n    private _finalAdjustVector = [_yaw, _roll, _pitch];\n\n    TRACE_3(\"\", _pitch, _yaw, _roll);\n    TRACE_3(\"\", _targetVector, _adjustVector, _finalAdjustVector);\n\n    if (accTime > 0) then {\n        private _changeVector = (vectorDir _projectile) vectorAdd _finalAdjustVector;\n        TRACE_2(\"\",_projectile,_changeVector);\n        [_projectile, _changeVector] call FUNC(changeMissileDirection);\n    };\n};\n\n#ifdef DRAW_GUIDANCE_INFO\nTRACE_3(\"\",_projectilePos,_seekerTargetPos,_profileAdjustedTargetPos);\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [1,0,0,1], ASLtoAGL _projectilePos, 0.75, 0.75, 0, _ammo, 1, 0.025, \"TahomaB\"];\n\nprivate _ps = \"#particlesource\" createVehicleLocal (ASLtoAGL _projectilePos);\n_PS setParticleParams [[\"\\A3\\Data_f\\cl_basic\", 8, 3, 1], \"\", \"Billboard\", 1, 3.0141, [0, 0, 2], [0, 0, 0], 1, 1.275, 1, 0, [1, 1], [[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1]], [1], 1, 0, \"\", \"\", nil];\n_PS setDropInterval 3.0;\n#endif\n\n_stateParams set [0, diag_tickTime];\n\nEND_COUNTER(guidancePFH);\n\n",
        "functionName": "ace_missileguidance_fnc_guidancePFH"
      },
      {
        "fileName": "fnc_handleHandoff.sqf",
        "content": "/*\n * Author: ACE-Team\n * Not currently used\n *\n * Arguments:\n * 0: TARGET <OBJECT>\n * 1: ARGS <ARRAY>\n *\n * Return Value:\n * Boolean <BOOLEAN>\n *\n * Example:\n * [bob, kevin] call ACE_missileguidance_fnc_handleHandoff\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_target\", \"_args\"];\n\nif (isNil \"_target\" || {isNull _target} || {!local _target} ) exitWith { false };\n\n[FUNC(guidancePFH), 0, _args] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_missileguidance_fnc_handleHandoff"
      },
      {
        "fileName": "fnc_onFired.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Fired event handler, starts guidance if enabled for ammo\n *\n * Arguments:\n * 0: Shooter (Man/Vehicle) <OBJECT>\n * 4: Ammo <STRING>\n * 6: Projectile <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"\", \"\", \"\", \"ACE_Javelin_FGM148\", \"\", theMissile] call ace_missileguidance_fnc_onFired;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_shooter\",\"\",\"\",\"\",\"_ammo\",\"\",\"_projectile\"];\n\n// Bail on not missile\nif (!(_ammo isKindOf \"MissileBase\")) exitWith {};\n\n// Bail if guidance is disabled for this ammo\nif ((getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QUOTE(ADDON) >> \"enabled\")) != 1) exitWith {};\n\n// Bail on locality of the projectile, it should be local to us\nif (GVAR(enabled) < 1 || {!local _projectile} ) exitWith {};\n\n// Bail if shooter isn't player AND system not enabled for AI:\nif ( !isPlayer _shooter && { GVAR(enabled) < 2 } ) exitWith {};\n\n// Verify ammo has explicity added guidance config (ignore inheritances)\nprivate _configs = configProperties [(configFile >> \"CfgAmmo\" >> _ammo), QUOTE(configName _x == QUOTE(QUOTE(ADDON))), false];\nif ((count _configs) < 1) exitWith {};\n\n// MissileGuidance is enabled for this shot\nTRACE_4(\"enabled\",_shooter,_ammo,_projectile,typeOf _shooter);\n\nprivate _config = configFile >> \"CfgAmmo\" >> _ammo >> QUOTE(ADDON);\n\nprivate _target = _shooter getVariable [QGVAR(target), nil];\nprivate _targetPos = _shooter getVariable [QGVAR(targetPosition), nil];\nprivate _seekerType = _shooter getVariable [QGVAR(seekerType), nil];\nprivate _attackProfile = _shooter getVariable [QGVAR(attackProfile), nil];\nprivate _lockMode = _shooter getVariable [QGVAR(lockMode), nil];\n\nprivate _laserCode = _shooter getVariable [QEGVAR(laser,code), ACE_DEFAULT_LASER_CODE];\nprivate _laserInfo = [_laserCode, ACE_DEFAULT_LASER_WAVELENGTH, ACE_DEFAULT_LASER_WAVELENGTH];\n\nTRACE_6(\"getVars\",_target,_targetPos,_seekerType,_attackProfile,_lockMode,_laserCode);\n\nprivate _launchPos = getPosASL (vehicle _shooter);\n\nif (isNil \"_seekerType\" || {!(_seekerType in (getArray (_config >> \"seekerTypes\")))}) then {\n    _seekerType = getText (_config >> \"defaultSeekerType\");\n};\nif (isNil \"_attackProfile\" || {!(_attackProfile in (getArray (_config >> \"attackProfiles\")))}) then {\n    _attackProfile = getText (_config >> \"defaultAttackProfile\");\n};\nif (isNil \"_lockMode\" || {!(_lockMode in (getArray (_config >> \"seekerLockModes\")))}) then {\n    _lockMode = getText (_config >> \"defaultSeekerLockMode\");\n};\n\n// If we didn't get a target, try to fall back on tab locking\nif (isNil \"_target\") then {\n    if (!isPlayer _shooter) then {\n        // This was an AI shot, lets still guide it on the AI target\n        _target = _shooter getVariable [QGVAR(vanilla_target), nil];\n        TRACE_1(\"Detected AI Shooter!\", _target);\n    } else {\n        private _canUseLock = getNumber (_config >> \"canVanillaLock\");\n        // @TODO: Get vanilla target\n        if (_canUseLock > 0 || difficulty < 1) then {\n            private _vanillaTarget = cursorTarget;\n\n            TRACE_1(\"Using Vanilla Locking\", _vanillaTarget);\n            if (!isNil \"_vanillaTarget\") then {\n                _target = _vanillaTarget;\n            };\n        };\n    };\n};\n\n// Array for seek last target position\nprivate _seekLastTargetPos = (getNumber ( _config >> \"seekLastTargetPos\")) == 1;\nprivate _lastKnownPosState = [_seekLastTargetPos];\nif (_seekLastTargetPos && {!isNil \"_target\"}) then {\n    _lastKnownPosState set [1, (getPosASL _target)];\n} else {\n    _lastKnownPosState set [1, [0,0,0]];\n};\n\nTRACE_4(\"Beginning ACE guidance system\",_target,_ammo,_seekerType,_attackProfile);\nprivate _args = [_this,\n            [   _shooter,\n                [_target, _targetPos, _launchPos],\n                _seekerType,\n                _attackProfile,\n                _lockMode,\n                _laserInfo\n            ],\n            [\n                getNumber ( _config >> \"minDeflection\" ),\n                getNumber ( _config >> \"maxDeflection\" ),\n                getNumber ( _config >> \"incDeflection\" )\n            ],\n            [\n                getNumber ( _config >> \"seekerAngle\" ),\n                getNumber ( _config >> \"seekerAccuracy\" ),\n                getNumber ( _config >> \"seekerMaxRange\" )\n            ],\n            [ diag_tickTime, [], [], _lastKnownPosState]\n        ];\n\n\n// Run the \"onFired\" function passing the full guidance args array\nprivate _onFiredFunc = getText (_config >> \"onFired\");\nTRACE_1(\"\",_onFiredFunc);\nif (_onFiredFunc != \"\") then {\n    _args call (missionNamespace getVariable _onFiredFunc);\n};\n        \n        \n// Reverse:\n//  _args params [\"_firedEH\", \"_launchParams\", \"_flightParams\", \"_seekerParams\", \"_stateParams\"];\n//      _firedEH params [\"_shooter\",\"\",\"\",\"\",\"_ammo\",\"\",\"_projectile\"];\n//      _launchParams params [\"_shooter\",\"_targetLaunchParams\",\"_seekerType\",\"_attackProfile\",\"_lockMode\",\"_laserInfo\"];\n//          _targetLaunchParams params [\"_target\", \"_targetPos\", \"_launchPos\"];\n//      _stateParams params [\"_lastRunTime\", \"_seekerStateParams\", \"_attackProfileStateParams\", \"_lastKnownPosState\"];\n//      _seekerParams params [\"_seekerAngle\", \"_seekerAccuracy\", \"_seekerMaxRange\"];\n\n\n// Hand off to the guiding unit. We just use local player so local PFH fires for now\n// Laser code needs to give us a shooter for LOBL, or the seeker unit needs to be able to shift locality\n// Based on its homing laser\n// Lasers need to be handled in a special LOAL/LOBL case\n\n//if (isPlayer _shooter) then {\n//    private _guidingUnit = ACE_player;\n//\n//    if (local _guidingUnit) then {\n//        [FUNC(guidancePFH), 0, _args ] call CBA_fnc_addPerFrameHandler;\n//    } else {\n//        [QGVAR(handoff), [_guidingUnit, _args] ] call FUNC(doHandoff);\n//    };\n//} else {\n    // [FUNC(guidancePFH), 0, _args ] call CBA_fnc_addPerFrameHandler;\n//};\n\n[FUNC(guidancePFH), 0, _args ] call CBA_fnc_addPerFrameHandler;\n\n\n/* Clears locking settings\n(vehicle _shooter) setVariable [QGVAR(target), nil];\n(vehicle _shooter) setVariable [QGVAR(seekerType), nil];\n(vehicle _shooter) setVariable [QGVAR(attackProfile), nil];\n(vehicle _shooter) setVariable [QGVAR(lockMode), nil];\n */\n",
        "functionName": "ace_missileguidance_fnc_onFired"
      },
      {
        "fileName": "fnc_onIncomingMissile.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Handles AI shooting a locking missile\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Ammo <STRING>\n * 2: Shooter <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorTarget, \"x\", player] call ace_missileguidance_fnc_changeMissileDirection;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_ammo\", \"_shooter\"];\n\nif (GVAR(enabled) < 1) exitWith {};    // bail if enabled\nif !(local (gunner _shooter) || {local _shooter}) exitWith {}; // bail if not shooter\n\n_shooter setVariable [QGVAR(vanilla_target),_target, false];\nTRACE_2(\"setting vanilla target\",_shooter,_target);\n",
        "functionName": "ace_missileguidance_fnc_onIncomingMissile"
      },
      {
        "fileName": "fnc_seekerType_Optic.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Seeker Type: Optic\n *\n * Arguments:\n * 1: Guidance Arg Array <ARRAY>\n * 2: Seeker State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[], [], []] call ace_missileguidance_fnc_seekerType_Optic;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"\", \"_args\"];\n_args params [\"_firedEH\", \"_launchParams\", \"\", \"_seekerParams\", \"_stateParams\"];\n_firedEH params [\"\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n_launchParams params [\"\", \"_targetParams\"];\n_targetParams params [\"_target\"];\n_seekerParams params [\"_seekerAngle\", \"\", \"_seekerMaxRange\"];\n\nif (isNil \"_target\") exitWith {[0,0,0]};\n\nprivate _foundTargetPos = aimPos _target;\n\n// @TODO: This is seeker LOS and angle checks for LOAL only; LOBL does not need visual\nprivate _angleOkay = [_projectile, _foundTargetPos, _seekerAngle] call FUNC(checkSeekerAngle);\n\nprivate _losOkay = false;\nif (_angleOkay) then {\n    _losOkay = [_projectile, _target] call FUNC(checkLos);\n};\nTRACE_2(\"\", _angleOkay, _losOkay);\n\n// Can't see target, return [0,0,0] and let doSeekerSearch handle it\nif (!_angleOkay || !_losOkay) exitWith {[0,0,0]};\n\nTRACE_2(\"\", _target, _foundTargetPos);\n// @TODO: Configurable lead for seekers\nprivate _projectileSpeed = (vectorMagnitude velocity _projectile);\nprivate _distanceToTarget = (getPosASL _projectile) vectorDistance _foundTargetPos;\nprivate _eta = _distanceToTarget / _projectileSpeed;\n\nprivate _adjustDistance = (velocity _target) vectorMultiply _eta;\nTRACE_3(\"leading target\",_distanceToTarget,_eta,_adjustDistance);\n_foundTargetPos = _foundTargetPos vectorAdd _adjustDistance;\n\nTRACE_2(\"return\",_foundTargetPos,(aimPos _target) distance _foundTargetPos);\n_foundTargetPos;\n",
        "functionName": "ace_missileguidance_fnc_seekerType_Optic"
      },
      {
        "fileName": "fnc_seekerType_SALH.sqf",
        "content": "/*\n * Author: jaynus / nou\n * Seeker Type: SALH (Laser)\n * Wrapper for ace_laser_fnc_seekerFindLaserSpot\n *\n * Arguments:\n * 1: Guidance Arg Array <ARRAY>\n * 2: Seeker State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[], [], []] call ace_missileguidance_fnc_seekerType_SALH;\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"\", \"_args\"];\n_args params [\"_firedEH\", \"_launchParams\", \"\", \"_seekerParams\"];\n_firedEH params [\"\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n_launchParams params [\"\",\"\",\"\",\"\",\"\",\"_laserParams\"];\n_seekerParams params [\"_seekerAngle\", \"\", \"_seekerMaxRange\"];\n_laserParams params [\"_code\", \"_wavelengthMin\", \"_wavelengthMax\"];\n\n\nprivate _laserResult = [(getPosASL _projectile), (velocity _projectile), _seekerAngle, _seekerMaxRange, [_wavelengthMin, _wavelengthMax], _code, _projectile] call EFUNC(laser,seekerFindLaserSpot);\nprivate _foundTargetPos = _laserResult select 0;\nTRACE_1(\"Search\", _laserResult);\n\n_foundTargetPos;\n",
        "functionName": "ace_missileguidance_fnc_seekerType_SALH"
      }
    ]
  },
  {
    "component": "missionmodules",
    "files": [
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_moduleAmbianceSound.sqf",
        "content": "/*\n * Author: Glowbal\n * Plays synchronized ambiance sounds while the module is alive.\n *\n * Arguments:\n * 0: Logic <LOGIC>\n * 1: Units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_missionmodules_fnc_moduleAmbianceSound\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\n// We only play this on the locality of the logic, since the sounds are broadcasted across the network\nif (!_activated || !local _logic) exitWith {0};\n\nprivate _ambianceSounds = [];\nprivate _unparsedSounds = _logic getVariable [\"soundFiles\", \"\"];\nprivate _minimalDistance = (_logic getVariable [\"minimalDistance\", 400]) max 1;\nprivate _maximalDistance = (_logic getVariable [\"maximalDistance\", 10]) max _minimalDistance;\nprivate _minDelayBetweensounds = (_logic getVariable [\"minimalDelay\", 10]) max 1;\nprivate _maxDelayBetweenSounds = (_logic getVariable [\"maximalDelay\", 170]) max _minDelayBetweensounds;\nprivate _volume = (_logic getVariable [\"soundVolume\", 30]) max 1;\nprivate _followPlayers = _logic getVariable [\"followPlayers\", false];\n\nprivate _splittedList = _unparsedSounds splitString \",\";\nprivate _missionRoot = str missionConfigFile select [0, count str missionConfigFile - 15];\n\n{\n    _x = [_x] call CBA_fnc_removeWhitespace;\n\n    if (isClass (missionConfigFile >> \"CfgSounds\" >> _x)) then {\n        // CfgSounds accepts a leading backslash, but a double backslash\n        // is not accepted in the path, so we have to filter that.\n        private _soundPath = getArray (missionConfigFile >> \"CfgSounds\" >> _x >> \"sound\") select 0;\n        if (_soundPath select [0,1] == \"\\\") then {\n            _ambianceSounds pushBack (_missionRoot + (_soundPath select [1]));\n        } else {\n            _ambianceSounds pushBack (_missionRoot + _soundPath);\n        };\n    } else {\n        if (isClass (configFile >> \"CfgSounds\" >> _x)) then {\n            _soundPath = (getArray(configFile >> \"CfgSounds\" >> _x >> \"sound\")) param [0, \"\"];\n            if ((_soundPath select [0, 1]) == \"\\\") then {_soundPath = _soundPath select [1];};\n            _ambianceSounds pushBack _soundPath;\n        } else {\n            ERROR_1(\"Ambient Sounds: Sound \"\"%1\"\" not found.\",_x);\n        };\n    };\n\n    false\n} count _splittedList;\n\nif (count _ambianceSounds == 0) exitWith {};\n{\n    if ((_x find \".\") == -1) then {\n        _ambianceSounds set [_forEachIndex, _x + \".wss\"];\n    };\n} forEach _ambianceSounds;\n\nTRACE_1(\"\",_ambianceSounds);\n\n[{\n    params [\"_args\", \"_pfhHandle\"];\n    _args params [\"_logic\", \"_ambianceSounds\", \"_minimalDistance\", \"_maximalDistance\", \"_minDelayBetweensounds\", \"_maxDelayBetweenSounds\", \"_volume\", \"_followPlayers\", \"_lastTimePlayed\"];\n\n    if (!alive _logic) exitWith {\n        [_pfhHandle] call CBA_fnc_removePerFrameHandler;\n    };\n\n    if (CBA_missionTime - _lastTimePlayed >= ((_minDelayBetweensounds + random(_maxDelayBetweenSounds)) min _maxDelayBetweenSounds)) then {\n\n        // Find all players in session.\n        private _allUnits = if (isMultiplayer) then {playableUnits} else {[ACE_player]};\n\n        // Check if there are enough players to even start playing this sound.\n        if (count _allUnits > 0) then {\n            // find the position from which we are going to play this sound from.\n            private _newPosASL = if (_followPlayers) then {\n                // Select a target unit at random.\n                private _targetUnit = selectRandom _allUnits;\n                AGLtoASL (_targetUnit getPos [_minimalDistance + random (_maximalDistance - _minimalDistance), random 360]);\n            } else {\n                AGLtoASL (_logic getPos [_minimalDistance + random (_maximalDistance - _minimalDistance), random 360]);\n            };\n\n            TRACE_1(\"\",_newPosASL);\n            // If no unit is to close to this position, we will play the sound.\n            if ({(_newPosASL distance _x < (_minimalDistance / 2))}count _allUnits == 0) then {\n                private _soundFile = selectRandom _ambianceSounds;\n                TRACE_2(\"playing file\",_soundFile,_newPosASL);\n                playSound3D [_soundFile, objNull,  false, _newPosASL, _volume, 1, 1000];\n                _args set [8, CBA_missionTime];\n            } else {\n                TRACE_1(\"pos is too close to a player\",_newPosASL);\n            };\n        };\n    };\n}, 0.1, [_logic, _ambianceSounds, _minimalDistance, _maximalDistance, _minDelayBetweensounds, _maxDelayBetweenSounds, _volume, _followPlayers, CBA_missionTime] ] call CBA_fnc_addPerFrameHandler;\n\ntrue;\n",
        "functionName": "ace_missionmodules_fnc_moduleAmbianceSound"
      }
    ]
  },
  {
    "component": "mk6mortar",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(addMagazine), {\n    params [\"_static\", \"_magazine\"];\n    _static addMagazineTurret [_magazine,[0]];\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(removeMagazine), {\n    params [\"_static\", \"_magazine\"];\n    _static removeMagazineTurret [_magazine,[0]];\n}] call CBA_fnc_addEventHandler;\n\n[QGVAR(setAmmo), {\n    params [\"_static\", \"_magazine\",\"_ammoCount\"];\n    _static setMagazineTurretAmmo [_magazine, _ammoCount, [0]];\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_initMortar\", {_this call FUNC(mortarInit);}] call CBA_fnc_addEventHandler;\n\nif (hasInterface) then {\n    [\"ace_infoDisplayChanged\", FUNC(turretDisplayLoaded)] call CBA_fnc_addEventHandler;\n};\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"ace_settingsInitialized\",GVAR(useAmmoHandling));\n\n    [\"vehicle\", FUNC(handlePlayerVehicleChanged), true] call CBA_fnc_addPlayerEventHandler;\n\n    if (GVAR(useAmmoHandling)) then {\n        [\"Mortar_01_base_F\", \"init\", {\n            TRACE_2(\"mortar init\",_this,(_this select 0) turretLocal [0]);\n\n            //wait for proper turret locality change\n            [{\n                TRACE_2(\"after delay\",_this,(_this select 0) turretLocal [0]);\n                [\"ace_initMortar\", _this] call CBA_fnc_localEvent;\n            }, _this, 0.5] call CBA_fnc_waitAndExecute;\n\n        }, true, [], true] call CBA_fnc_addClassEventHandler;\n    };\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canLoadMagazine.sqf",
        "content": "/*\n * Author: Grey\n * Checks whether magazine can be loaded into static weapon\n *\n * Arguments:\n * 0: static <OBJECT>\n * 1: unit <OBJECT>\n * 2: magazine class to check; if not given having any compatible magazine returns true <STRING> (default: \"\")\n *\n * Return Value:\n * canLoadMagazine <BOOL>\n *\n * Example:\n * [_target,_player,\"ACE_1Rnd_82mm_Mo_HE\"] call ace_mk6mortar_fnc_canLoadMagazine\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_static\",\"_unit\",[\"_magazineClassOptional\",\"\",[\"\"]]];\n\nif !(alive _static && GVAR(useAmmoHandling)) exitWith {false};\n\nprivate _canLoadMagazine = false;\nprivate _hasCompatibleMagazine = false;\n\nprivate _currentMagazine = (magazinesAllTurrets _static) select 1;\nprivate _weapon = (_static weaponsTurret [0]) select 0;\n\nprivate _listOfMagNames = getArray(configFile >> \"cfgWeapons\" >> _weapon >> \"magazines\");\nprivate _count = 0;\n\n//If function is called with an optional string then check if player has that magzine otherwise check all magazines of the player to see if they are compatible with the static weapon\nif (_magazineClassOptional != \"\") then {\n    if ([_unit,_magazineClassOptional] call EFUNC(common,hasMagazine)) then {\n        _hasCompatibleMagazine = true;\n    };\n } else {\n    {\n        if ([_unit,_x] call EFUNC(common,hasMagazine)) exitWith {_hasCompatibleMagazine = true};\n    } forEach _listOfMagNames;\n};\n//If static weapon has a magazine then find the ammo count\nif (count (_static magazinesTurret [0]) > 0) then {\n    _count = _currentMagazine select 2;\n};\n//If the static weapon doesn't have a magzine or a magazine with no bullets, the player has a compatible magazine and the static weapon has a barrel then you can load a magazine\nif ((count (_static magazinesTurret [0]) == 0 || _count == 0 ) && _hasCompatibleMagazine) then {\n    _canLoadMagazine = true;\n};\n_canLoadMagazine\n",
        "functionName": "ace_mk6mortar_fnc_canLoadMagazine"
      },
      {
        "fileName": "fnc_canUnloadMagazine.sqf",
        "content": "/*\n * Author: Grey\n * Checks whether magazine can be unloaded from static weapon\n *\n * Arguments:\n * 0: static <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * canUnloadMagazine <BOOL>\n *\n * Example:\n * [_target,_player] call ace_mk6mortar_fnc_canUnloadMagazine\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_static\",\"_unit\"];\n\nif !(alive _static && GVAR(useAmmoHandling) && _static getVariable [QGVAR(initialized),false]) exitWith {false};\nprivate _canUnloadMagazine = false;\n\nprivate _ammoCount = ((magazinesAllTurrets _static) select 1) select 2;\nif (_ammoCount > 0) then {\n    _canUnloadMagazine = true;\n};\n_canUnloadMagazine\n",
        "functionName": "ace_mk6mortar_fnc_canUnloadMagazine"
      },
      {
        "fileName": "fnc_dev_buildTable.sqf",
        "content": "/*\n * Author: PabstMirror\n * DEV function to build mortar tables, very cpu intensive (never used durring normal gameplay)\n *\n * Arguments:\n * 0: Muzzle Velocity <NUMBER>\n * 1: Air Friction <NUMBER>\n *\n * Return Value:\n * None <Data in clipboard>\n *\n * Example:\n * [100, -0.0001] spawn ace_mk6mortar_fnc_dev_buildTable; //spawn (scheduled) is slower\n * [100, -0.0001] call ace_mk6mortar_fnc_dev_buildTable; //faster, but will lock while processing\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _muzzleVelocity = _this select 0;\nprivate _airFriction = _this select 1;\nprivate _stillInRange = true;\nprivate _currentRange = 100;\nprivate _increasePerRow = 50;\nprivate _outputArray = [];\n\n\n//[_rangeToHit, _lineElevation, _lineHeightElevation, _lineHeightTimeDelta, _lineTimeOfFlight, _lineCrosswindDeg, _lineHeadwindMeters, _lineTailWindMeters, _lineTempDec, _lineTempInc, _lineAirDensDec, _lineAirDensInc]\n\nwhile {_stillInRange} do {\n    private _result = [_muzzleVelocity, _currentRange, _airFriction] call FUNC(dev_simulateCalcRangeTableLine);\n    if (_result isEqualTo []) then {\n        _stillInRange = false;\n    } else {\n        if (_airFriction == 0) then {\n            _result set [5, 0];\n            _result set [6, 0];\n            _result set [7, 0];\n            _result set [8, 0];\n            _result set [9, 0];\n            _result set [10, 0];\n            _result set [11, 0];\n        };\n        if ((_result select 1) < 88) then {\n            _outputArray pushBack [\n            ([(_result select 0),  \"meters\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 1),  \"mil\", true] call FUNC(dev_formatNumber)),\n            ([(_result select 2),  \"mil\", true] call FUNC(dev_formatNumber)),\n            ([(_result select 3),  \"sec\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 4),  \"sec\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 5),  \"milPrecise\", true] call FUNC(dev_formatNumber)),\n            ([(_result select 6),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 7),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 8),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 9),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 10),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\n            ([(_result select 11), \"metersprecise\", false] call FUNC(dev_formatNumber))\n            ];\n        };\n        _currentRange = _currentRange + _increasePerRow;\n    };\n    hintSilent str _currentRange;\n};\n\n//handle floating point rounding errors\nprivate _outputString = format [\"case ((abs(_muzzleVelocity - %1) < 0.00001) && {(abs(_airFriction - %2) < 0.00001)}): {\n[\n\", _muzzleVelocity, _airFriction];\n\n{\n    if (_forEachIndex < ((count _outputArray) - 1)) then {\n        _outputString = _outputString + format [\"%1,\n    \", _x];\n    } else {\n        _outputString = _outputString + format [\"%1\n    ]\n    };\", _x];\n    };\n} forEach _outputArray;\n\ncopyToClipboard _outputString;\nrangeTableOutput = _outputString;\n\nhint \"done\";\n",
        "functionName": "ace_mk6mortar_fnc_dev_buildTable"
      },
      {
        "fileName": "fnc_dev_formatNumber.sqf",
        "content": "/*\n * Author: Pabst Mirror\n * Converts numbers into nicely formated strings.\n *\n * Arguments:\n * 0: Input number <NUMBER>\n * 1: Output type (see case statement) <STRING>\n * 2: If output type is mil, convert input type from deg->mil <BOOL>\n *\n * Return Value:\n * Formatted number <STRING>\n *\n * Example:\n * [45, \"mil4\", true] call ace_mk6mortar_fnc_dev_formatNumber = \"0800\"\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_theNumber\", \"_inputType\", \"_convertToMils\"];\n\nprivate _decimalPlaces = -1;\nprivate _integerPlaces = -1;\n\nswitch (toLower _inputType) do {\ncase (\"meters\"): {\n        _decimalPlaces = 0;\n        _integerPlaces = 1;\n    };\ncase (\"metersprecise\"): {\n        _decimalPlaces = 1;\n        _integerPlaces = 1;\n    };\ncase (\"meters4\"): {\n        _decimalPlaces = 0;\n        _integerPlaces = 4;\n    };\ncase (\"deg3precise\"): {\n        _decimalPlaces = 2;\n        _integerPlaces = 3;\n    };\ncase (\"mil\"): {\n        _decimalPlaces = 0;\n        _integerPlaces = 1;\n        if (_convertToMils) then {\n            _theNumber = _theNumber * (6400 / 360);\n        };\n    };\ncase (\"mil4\"): {\n        _decimalPlaces = 0;\n        _integerPlaces = 4;\n        if (_convertToMils) then {\n            _theNumber = _theNumber * (6400 / 360);\n        };\n    };\ncase (\"milprecise\"): {\n        _decimalPlaces = 1;\n        _integerPlaces = 1;\n        if (_convertToMils) then {\n            _theNumber = _theNumber * (6400 / 360);\n        };\n    };\ncase (\"sec\"): {\n        _decimalPlaces = 1;\n        _integerPlaces = 1;\n    };\n    default {systemChat format [\"badtype %1\", _inputType];};\n};\n\n//CBA_fnc_formatNumber is silly:  [-9.58545, 1, 1, false] call CBA_fnc_formatNumber == \"-9.-6\"\n\nprivate _prefix = if (_theNumber < 0) then {\"-\"} else {\"\"};\n\nprivate _return = [abs (_theNumber), _integerPlaces, _decimalPlaces, false] call CBA_fnc_formatNumber;\n\n(_prefix + _return)\n",
        "functionName": "ace_mk6mortar_fnc_dev_formatNumber"
      },
      {
        "fileName": "fnc_dev_simulateCalcRangeTableLine.sqf",
        "content": "/*\n * Author: Pabst Mirror\n * Builds a rangeTable line for a certian range, given muzzle velocity and air friction, returns [] if out of range.\n *\n * Arguments:\n * 0: Muzzle Velocity <NUMBER>\n * 1: Air Friction <NUMBER>\n * 2: Range To Hit <NUMBER>\n *\n * Return Value:\n * Range Table Line Data (see return line) <ARRAY>\n *\n * Example:\n * [300, -0.0001, 3000] call ace_mk6mortar_fnc_simulateCalcRangeTableLine\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define TIME_STEP (1/50)\n\nparams [\"_muzzleVelocity\", \"_rangeToHit\", \"_airFriction\"];\n\nprivate _startTime = diag_tickTime;\n\n\n\n//Run Binary search for correct elevation\nprivate _solution = [_rangeToHit, 0, _muzzleVelocity, _airFriction, TIME_STEP] call FUNC(dev_simulateFindSolution);\nif (_solution isEqualTo []) exitWith {[]};\n\n//Real Elevation\nprivate _lineElevation = _solution select 0;\n\n//Time Of Flight:\nprivate _lineTimeOfFlight = _solution select 1;\n\n//Height Adjustment for -100m (another binary search)\nprivate _solution = [_rangeToHit, -100, _muzzleVelocity, _airFriction, TIME_STEP] call FUNC(dev_simulateFindSolution);\nif (_solution isEqualTo []) exitWith {[]};//should never be triggered (lower elevation easier to hit)\n\nprivate _lineHeightElevation = ((_solution select 0) - _lineElevation);\nprivate _lineHeightTimeDelta = (_solution select 1) - _lineTimeOfFlight;\n\n//Compute for 10x and divide to minimize rounding errors\n\n//Crosswind\nprivate _lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1, 0, 10, 0, TIME_STEP] call FUNC(dev_simulateShot);\nprivate _lineCrosswindDeg = (_lastTestResult select 2) / 10;\n\n//Headwind:\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1, -10, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\nprivate _lineHeadwindMeters = (_rangeToHit - (_lastTestResult select 0)) / 10;\n\n//TailWind:\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1, 10, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\nprivate _lineTailWindMeters = (_rangeToHit - (_lastTestResult select 0)) / 10;\n\n//Air Temp Dec\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, (15 - 10), 1, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\n_lineTempDec = (_rangeToHit - (_lastTestResult select 0)) / 10;\n\n//Air Temp Inc\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, (15 + 10), 1, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\n_lineTempInc = (_rangeToHit - (_lastTestResult select 0)) / 10;\n\n//Air Density Dec\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 0.9, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\nprivate _lineAirDensDec = (_rangeToHit - (_lastTestResult select 0)) / 10;\n\n//Air Density Inc\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1.1, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\nprivate _lineAirDensInc = (_rangeToHit - (_lastTestResult select 0)) / 10;\n\n// systemChat format [\"debug: Range %1 - in %2 sec\", _rangeToHit, (diag_tickTime - _startTime)];\n\n[_rangeToHit, _lineElevation, _lineHeightElevation, _lineHeightTimeDelta, _lineTimeOfFlight, _lineCrosswindDeg, _lineHeadwindMeters, _lineTailWindMeters, _lineTempDec, _lineTempInc, _lineAirDensDec, _lineAirDensInc]\n",
        "functionName": "ace_mk6mortar_fnc_dev_simulateCalcRangeTableLine"
      },
      {
        "fileName": "fnc_dev_simulateFindSolution.sqf",
        "content": "/*\n * Author: PabstMirror\n * DEV to find a firing solution for a given range\n *\n * Arguments:\n * 0: Range to Hit (Meters) <NUMBER>\n * 1: Height To Hit (Meters) <NUMBER>\n * 2: Muzzle Velocity (M/S) <NUMBER>\n * 3: Air Friction <NUMBER>\n * 4: Time Step (seconds) (eg 1/50 will simulate 50 cycles per second) <NUMBER>\n *\n * Return Value:\n * [NUMBER - Elevation In Degrees, NUMBER - Shot Durration] <ARRAY>\n *\n * Example:\n * [_rangeToHit, _heightToHit, _muzzleVelocity, _airFriction, TIME_STEP] call ace_mk6mortar_fnc_dev_simulateFindSolution;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define MAX_ATTEMPTS 22\nparams [\"_rangeToHit\", \"_heightToHit\", \"_muzzleVelocity\", \"_airFriction\",\"_timeStep\"];\n\nprivate _maxElev = 90;\nprivate _minElev = 45; //todo - Low Angle Howitzers???\n\nprivate _error = 10000;\nprivate _solutionElevation = -1;\nprivate _lastTestResult = [];\nprivate _numberOfAttempts = 0;\n\n//(binary search)\nwhile {(_numberOfAttempts < MAX_ATTEMPTS) && {(abs _error) > 0.2}} do {\n    _numberOfAttempts = _numberOfAttempts + 1;\n    _solutionElevation = (_maxElev + _minElev) / 2;\n    _lastTestResult = [_solutionElevation, _muzzleVelocity, _airFriction, 15, 1, 0, 0, _heightToHit, _timeStep] call FUNC(dev_simulateShot);\n    _error = _rangeToHit - (_lastTestResult select 0);\n    if (_error > 0) then {\n        _maxElev = _solutionElevation; //test range was short\n    } else {\n        _minElev = _solutionElevation; //test range was long\n    };\n};\nif (_numberOfAttempts >= MAX_ATTEMPTS) exitWith {[]};\n\n//return the elevation and time required\n[_solutionElevation, (_lastTestResult select 1)]\n",
        "functionName": "ace_mk6mortar_fnc_dev_simulateFindSolution"
      },
      {
        "fileName": "fnc_dev_simulateShot.sqf",
        "content": "/*\n * Author: PabstMirror\n * DEV function to build mortar tables, very cpu intensive (never used durring normal gameplay)\n *\n * Arguments:\n * 0: Shot Angle (degrees) <NUMBER>\n * 1: Muzzle Velocity (m/s) <NUMBER>\n * 2: Air Friction <NUMBER>\n * 3: Tempeture (degres celcius) <NUMBER>\n * 4: Relative Air Denisty <NUMBER>\n * 5: Tail Wind (m/s) <NUMBER>\n * 6: Cross Wind (m/s) <NUMBER>\n * 7: Height Of Target (M) <NUMBER>\n * 8: Time Step (fraction of a second) <NUMBER>\n *\n * Return Value:\n * <ARRAY> [Distance Traveled<NUMBER>, Shot Time<NUMBER>, Offset (degrees)<NUMBER>]\n *\n * Example:\n * [45, 180, -0.0001, 15, 1, 10, 0, 0, 1/50] call ace_mk6mortar_fnc_dev_simulateShot;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_angleDeg\", \"_muzzleVelocity\", \"_airFriction\", \"_temp\", \"_relDensity\", \"_tailWind\", \"_crosswind\", \"_heightOfTarget\", \"_timeStep\"];\n\nprivate _wind = [_crosswind, _tailWind, 0];\nprivate _gravity = [0,0,-9.8];\n\nprivate _currentPos = [0,0,0];\nprivate _muzzleVelocity = _muzzleVelocity * (((_temp + 273.13) / 288.13 - 1) / 40 + 1);\nprivate _currentVelocity = [0, (_muzzleVelocity * cos _angleDeg), (_muzzleVelocity * sin _angleDeg)];\n\nprivate _currentTime = 0;\nprivate _lastPos = _currentPos;\n\nprivate _kCoefficent = -1 * _relDensity * _airFriction;  //save time in the loop and compute once\n\nwhile {((_currentVelocity select 2) > 0) || ((_currentPos select 2) >= _heightOfTarget)} do {\n    _lastPos = _currentPos;\n\n    private _aparentWind = _wind vectorDiff _currentVelocity;\n    private _changeInVelocity = _gravity vectorAdd (_aparentWind vectorMultiply ((vectorMagnitude _aparentWind) * _kCoefficent));\n\n    _currentVelocity = _currentVelocity vectorAdd (_changeInVelocity vectorMultiply _timeStep);\n\n    _currentPos = _currentPos vectorAdd (_currentVelocity vectorMultiply _timeStep);\n    _currentTime = _currentTime + _timeStep;\n};\n\n//Uses linearConversion to get a weighted average betwen points before and after dropping below target height\nprivate _linConversion = linearConversion [(_lastPos select 2), (_currentPos select 2), _heightOfTarget, 0, 1, true];\nprivate _middlePos = (_lastPos vectorMultiply (1 - _linConversion)) vectorAdd (_currentPos vectorMultiply (_linConversion));\n// private _middlePosOld = (_lastPos vectorAdd _currentPos) vectorMultiply 0.5;\n\n//Same to find travel time\nprivate _middleTotalTravelTime = _currentTime - (_timeStep * (1-_linConversion));\n\n//Find shot offset (from crosswind), in degrees\nprivate _offsetDeg = (_middlePos select 0) aTan2 (_middlePos select 1);\n\n[(_middlePos select 1), _middleTotalTravelTime, _offsetDeg]\n",
        "functionName": "ace_mk6mortar_fnc_dev_simulateShot"
      },
      {
        "fileName": "fnc_handleFired.sqf",
        "content": "/*\n * Author: PabstMirror\n * Called when the mortar is fired.\n *\n * Arguments:\n * 0: mortar - Object the event handler is assigned to <OBJECT>\n * 1: weapon - Fired weapon <STRING>\n * 2: muzzle - Muzzle that was used <STRING>\n * 3: mode - Current mode of the fired weapon <STRING>\n * 4: ammo - Ammo used <STRING>\n * 5: magazine - magazine name which was used <STRING>\n * 6: projectile - Object of the projectile that was shot <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [clientFiredBIS-XEH] call ace_mk6mortar_fnc_handleFired\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\"];\n\nif (GVAR(useAmmoHandling) && {_vehicle getVariable [QGVAR(initialized),false] && !(_vehicle getVariable [QGVAR(exclude),false])}) then {\n    // if !(_vehicle getVariable [QGVAR(exclude),false]) then {\n        _vehicle removeMagazineGlobal (_vehicle magazinesTurret [0] select 0);\n        TRACE_1(\"\",_vehicle magazinesTurret [0]);\n    // };\n};\n\nif (!GVAR(airResistanceEnabled)) exitWith {};\n\n// Large enough distance to not simulate any wind deflection\nif (_vehicle distance ACE_player > 8000) exitWith {false};\n\n//AI will have no clue how to use:\n_shooterMan = gunner _vehicle;\nif (!([_shooterMan] call EFUNC(common,isPlayer))) exitWith {false};\n\n//Calculate air density:\nprivate _altitude = (getPosASL _vehicle) select 2;\nprivate _temperature = _altitude call EFUNC(weather,calculateTemperatureAtHeight);\nprivate _pressure = _altitude call EFUNC(weather,calculateBarometricPressure);\nprivate _relativeHumidity = EGVAR(weather,currentHumidity);\nprivate _airDensity = [_temperature, _pressure, _relativeHumidity] call EFUNC(weather,calculateAirDensity);\nprivate _relativeDensity = _airDensity / 1.225;\n\nTRACE_5(\"FiredWeather\",_temperature,_pressure,_relativeHumidity,_airDensity,_relativeDensity);\n\n//powder effects:\nprivate _newMuzzleVelocityCoefficent = (((_temperature + 273.13) / 288.13 - 1) / 40 + 1);\nif (_newMuzzleVelocityCoefficent != 1) then {\n    _bulletVelocity = velocity _projectile;\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\n    _bulletVelocity = (vectorNormalized _bulletVelocity) vectorMultiply (_bulletSpeed * _newMuzzleVelocityCoefficent);\n    _projectile setVelocity _bulletVelocity;\n};\n\n\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_shell\", \"_airFriction\", \"_time\", \"_relativeDensity\"];\n\n    if (isNull _shell || {!alive _shell}) exitWith {\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    };\n\n    private _deltaT = CBA_missionTime - _time;\n    _args set[2, CBA_missionTime];\n\n    private _bulletVelocity = velocity _shell;\n    private _bulletSpeed = vectorMagnitude _bulletVelocity;\n\n    private _trueVelocity = _bulletVelocity vectorDiff wind;\n    private _trueSpeed = vectorMagnitude _trueVelocity;\n\n    private _drag = _deltaT * _airFriction * _trueSpeed * _relativeDensity;\n    private _accel = _trueVelocity vectorMultiply (_drag);\n    private _bulletVelocity = _bulletVelocity vectorAdd _accel;\n\n    _shell setVelocity _bulletVelocity;\n\n}, 0, [_projectile, MK6_82mm_AIR_FRICTION, CBA_missionTime, _relativeDensity]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_mk6mortar_fnc_handleFired"
      },
      {
        "fileName": "fnc_handlePlayerVehicleChanged.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles player getting into new vehicle.  Loads PFEG for mortar display if it is a mortar.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: New Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, mortar] call ace_mk6mortar_fnc_handlePlayerVehicleChanged;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_newVehicle\"];\n\nif (isNull _newVehicle) exitWith {};\nif (!(_newVehicle isKindOf \"Mortar_01_base_F\")) exitWith {};\n\n// Run magazine handling initialization if enabled\nif (!(_newVehicle getVariable [QGVAR(initialized),false]) && !(_newVehicle getVariable [QGVAR(exclude),false])) then {\n    // Make sure that mortar init is executed after settings init\n    [{\n        params [\"_mortar\"];\n        if (GVAR(useAmmoHandling) && {!(_mortar getVariable [QGVAR(initialized),false]) && !(_mortar getVariable [QGVAR(exclude),false])}) then {\n            //wait for proper turret locality change\n            [{\n                [\"ace_initMortar\", [_this], [_this]] call CBA_fnc_globalEvent;\n            }, _mortar, 0.05] call CBA_fnc_waitAndExecute;\n        };\n    }, _newVehicle] call EFUNC(common,runAfterSettingsInit);\n};\n\nprivate _tubeWeaponName = (weapons _newVehicle) select 0;\nprivate _fireModes = getArray (configFile >> \"CfgWeapons\" >> _tubeWeaponName >> \"modes\");\n\n//Restore last firemode:\nprivate _lastFireMode = _newVehicle getVariable [QGVAR(lastFireMode), -1];\nif (_lastFireMode != -1) then {\n    _player action [\"SwitchWeapon\", _newVehicle, _player, _lastFireMode];\n};\n\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_mortarVeh\", \"_fireModes\"];\n\n    if ((vehicle ACE_player) != _mortarVeh) then {\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    } else {\n\n        private _useMils = _mortarVeh getVariable [QGVAR(useMils), true];\n\n        //Compute: 'charge' from weaponstate\n        private _currentFireMode = (weaponState [_mortarVeh, [0]]) select 2;\n        private _currentChargeMode = _fireModes find _currentFireMode;\n\n        //Save firemode on vehicle:\n        _mortarVeh setVariable [QGVAR(lastFireMode), _currentChargeMode];\n\n        if (shownArtilleryComputer && {!GVAR(allowComputerRangefinder)}) then {\n            //Don't like this solution, but it works\n            closeDialog 0;\n            [parseText \"Computer Disabled\"] call EFUNC(common,displayTextStructured);\n        };\n\n        private _display = uiNamespace getVariable [\"ACE_Mk6_RscWeaponRangeArtillery\", displayNull];\n        if (isNull _display) exitWith {}; //It may be null for the first frame\n\n        private _chargeText = format [\"<t size='0.8'>%1: %2 <img image='%3'/></t>\", (localize LSTRING(rangetable_charge)), _currentChargeMode, QPATHTOF(UI\\ui_charges.paa)];\n\n        //Hud should hidden in 3rd person\n        private _notGunnerView = cameraView != \"GUNNER\";\n\n        //Calc real azimuth/elevation\n        //(looking at the sky VS looking at ground will radicaly change fire direction because BIS)\n        private _realAzimuth = -1;\n        private _realElevation = -1;\n\n        private _useRealWeaponDir = (ctrlText (_display displayCtrl 173)) == \"--\";\n        if (_useRealWeaponDir && {(_mortarVeh ammo (currentWeapon _mortarVeh)) == 0}) then {\n            // With no ammo, distance display will be empty, but gun will still fire at wonky angle if aimed at ground\n            private _testSeekerPosASL = AGLtoASL (positionCameraToWorld [0,0,0]);\n            private _testSeekerDir = _testSeekerPosASL vectorFromTo (AGLtoASL (positionCameraToWorld [0,0,1]));\n            private _testPoint = _testSeekerPosASL vectorAdd (_testSeekerDir vectorMultiply viewDistance);\n            if ((terrainIntersectASL [_testSeekerPosASL, _testPoint]) || {lineIntersects [_testSeekerPosASL, _testPoint]}) then {\n                _useRealWeaponDir = false; // If we are not looking at infinity (based on viewDistance)\n            };\n        };\n\n        if (_useRealWeaponDir) then {\n            //No range (looking at sky), it will follow weaponDir:\n            private _weaponDir = _mortarVeh weaponDirection (currentWeapon _mortarVeh);\n            _realAzimuth = (_weaponDir select 0) atan2 (_weaponDir select 1);\n            _realElevation = asin (_weaponDir select 2);\n        } else {\n            //Valid range, will fire at camera dir\n            private _lookVector = ((positionCameraToWorld [0,0,0]) call EFUNC(common,positionToASL)) vectorFromTo ((positionCameraToWorld [0,0,10]) call EFUNC(common,positionToASL));\n            _realAzimuth = ((_lookVector select 0) atan2 (_lookVector select 1));\n            private _upVectorDir = (((vectorUp _mortarVeh) select 0) atan2 ((vectorUp _mortarVeh) select 1));\n            private _elevationDiff = (cos (_realAzimuth - _upVectorDir)) * acos ((vectorUp _mortarVeh) select 2);\n            _realElevation = ((180 / PI) * (_mortarVeh animationPhase \"mainGun\")) + 75 - _elevationDiff;\n        };\n\n        //Update Heading Display:\n        if (_notGunnerView || (!GVAR(allowCompass))) then {\n            (_display displayCtrl 80156) ctrlSetText \"\";\n        } else {\n            if (_useMils) then {\n                (_display displayCtrl 80156) ctrlSetText str (((round (_realAzimuth * 6400 / 360)) + 6400) % 6400);\n            } else {\n                (_display displayCtrl 80156) ctrlSetText str ((round (_realAzimuth + 360)) % 360);\n            };\n        };\n\n        //Update CurrentElevation Display and \"charge\" text\n        if (_notGunnerView) then {\n            (_display displayCtrl 80085) ctrlSetStructuredText parseText \"\";\n            (_display displayCtrl 80175) ctrlSetText \"\";\n        } else {\n            (_display displayCtrl 80085) ctrlSetStructuredText parseText _chargeText;\n\n            if (_useMils) then {\n                (_display displayCtrl 80175) ctrlSetText str ((round (_realElevation * 6400 / 360)) % 6400);\n            } else {\n                (_display displayCtrl 80175) ctrlSetText str (((round (_realElevation * 100)) / 100) % 360);\n            };\n        };\n\n        //Update ElevationNeeded Display:\n        if (_notGunnerView || (!GVAR(allowComputerRangefinder))) then {\n            (_display displayCtrl 80176) ctrlSetText \"\";\n        } else {\n            private _elevDeg = parseNumber ctrlText (_display displayCtrl 176);\n            if (_elevDeg <= 0) then { //Bad data means \"----\" out of range\n                (_display displayCtrl 80176) ctrlSetText (ctrlText (_display displayCtrl 176));\n            } else {\n                _elevDeg = _elevDeg + (_realElevation - (parseNumber ctrlText (_display displayCtrl 175)));\n                if (_useMils) then {\n                    (_display displayCtrl 80176) ctrlSetText str round ((round (_elevDeg * 6400 / 360)) % 6400);\n                } else {\n                    (_display displayCtrl 80176) ctrlSetText str (((round (_elevDeg * 100)) / 100) % 360);\n                };\n            };\n        };\n    };\n}, 0, [_newVehicle, _fireModes]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_mk6mortar_fnc_handlePlayerVehicleChanged"
      },
      {
        "fileName": "fnc_loadMagazine.sqf",
        "content": "/*\n * Author: Grey\n * Loads Magazine into static weapon\n *\n * Arguments:\n * 0: static <OBJECT>\n * 1: unit <OBJECT>\n * 2: magazine class to load; if not given the first compatible magazine is loaded <STRING> (default: \"\")\n *\n * Return Value:\n * None\n *\n * Example:\n * [_target,_player,\"ACE_1Rnd_82mm_Mo_HE\"] call ace_mk6mortar_fnc_loadMagazine\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_static\",\"_unit\",[\"_magazineClassOptional\",\"\",[\"\"]]];\n\n//If function has been called with an optional classname hten add that magazine to the static weapon. Otherwise add the compatible magazine\nif(_magazineClassOptional != \"\") then {\n    _unit removeMagazine _magazineClassOptional;\n    [QGVAR(addMagazine), [_static, _magazineClassOptional]] call CBA_fnc_globalEvent;\n} else {\n    //Get weapon & magazine information of static weapon\n    private _weapon = (_static weaponsTurret [0]) select 0;\n    private _currentMagazine = (magazinesAllTurrets _static) select 1;\n    private _currentMagazineClass = _currentMagazine select 0;\n    private _count = _currentMagazine select 2;\n\n    //Check all of the players magazines to see if they are compatible with the static weapon. First magazine that is compatible is chosen\n    //VKing: This section ought to be double checked.\n    private _magazines = magazines _unit;\n    private _magazineDetails = magazinesDetail _unit;\n    private _listOfMagNames = getArray(configFile >> \"cfgWeapons\" >> _weapon >> \"magazines\");\n    private _magazineClass = \"\";\n    private _magazineClassDetails = \"\";\n    private _roundsLeft = 0;\n    {\n        if (_x in _listOfMagNames) exitWith {\n            _magazineClass = _x;\n            _magazineClassDetails = _magazineDetails select _forEachIndex;\n        };\n    } forEach _magazines;\n    //If the static weapon already has an empty magazine then remove it\n    if (_count == 0) then {\n        [QGVAR(removeMagazine), [_static, _currentMagazineClass]] call CBA_fnc_globalEvent;\n    };\n    //Find out the ammo count of the compatible magazine found\n    if (_magazineClassDetails != \"\") then{\n        private _parsed = _magazineClassDetails splitString \"([]/: )\";\n        _parsed params [\"_type\", \"\", \"\", \"_roundsLeftText\", \"_maxRoundsText\"];\n        _roundsLeft = parseNumber _roundsLeftText;\n        _magType = _type;\n    };\n\n    _unit removeMagazine _magazineClass;\n    [QGVAR(addMagazine), [_static, _magazineClass]] call CBA_fnc_globalEvent;\n    [QGVAR(setAmmo), [_static, _magazineClass,_roundsLeft], _static] call CBA_fnc_targetEvent;\n};\n",
        "functionName": "ace_mk6mortar_fnc_loadMagazine"
      },
      {
        "fileName": "fnc_loadMagazineTimer.sqf",
        "content": "/*\n * Author: Grey\n * Loads Magazine into static weapon using a timer.\n *\n * Arguments:\n * 0: Static <OBJECT>\n * 1: Unit <OBJECT>\n * 2: Time to load <NUMBER>\n * 3: Magazine Class <STRING> (default: \"\")\n *\n * Return Value:\n * None\n *\n * Example:\n * [_target,_player,\"ACE_1Rnd_82mm_Mo_HE\"] call ace_mk6mortar_fnc_loadMagazineTimer\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_static\",\"_unit\",\"_timeToLoad\",[\"_magazineClassOptional\",\"\",[\"\"]]];\n\n// Move player into animation if player is standing\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\", 1] call EFUNC(common,doAnimation);\n};\n\n[_timeToLoad, [_static,_unit,_magazineClassOptional], {(_this select 0) call FUNC(loadMagazine)}, {}, localize LSTRING(loadingMortar)] call EFUNC(common,progressBar);\n",
        "functionName": "ace_mk6mortar_fnc_loadMagazineTimer"
      },
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: PabstMirror\n * Loads settings from the module.\n *\n * Arguments:\n * 0: The Module Logic Object <OBJECT>\n * 1: synced objects <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [fromModule] call ace_mk6mortar_fnc_moduleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_syncedUnits\", \"_activated\"];\n\nif (!_activated) exitWith {WARNING(\"Module - placed but not active\");};\n\n[_logic, QGVAR(airResistanceEnabled), \"airResistanceEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(allowComputerRangefinder), \"allowComputerRangefinder\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(allowCompass), \"allowCompass\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(useAmmoHandling), \"useAmmoHandling\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_mk6mortar_fnc_moduleInit"
      },
      {
        "fileName": "fnc_mortarInit.sqf",
        "content": "/*\n * Author: VKing\n * Initializes mortar for use with ammunition handling magazines.\n *\n * Arguments:\n * 0: Mortar <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [mortar1] call ace_mk6mortar_fnc_mortarInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_mortar\"];\n\nif (_mortar getVariable [QGVAR(initialized),false] || _mortar getVariable [QGVAR(exclude),false]) exitWith {TRACE_1(\"Exit\",_mortar)};\nif (!(_mortar turretLocal [0])) exitWith {TRACE_1(\"Exit - turret not local\",_mortar)};\n\n// Remove all magazines from turret\nif (count magazines _mortar > 0) then {\n    {\n        _mortar removeMagazineTurret [_x,[0]];\n    } forEach magazines _mortar;\n};\n\n// Replace current turret weapon with ammo handling weapon\nprivate _currentWeapon = _mortar weaponsTurret [0] select 0;\nprivate _newWeapon = \"\";\n\nif (_currentWeapon == \"mortar_82mm\") then {\n    _newWeapon = \"ace_mortar_82mm\";\n} else {\n    _newWeapon = getText (configFile >> \"CfgWeapons\" >> _currentWeapon >> QGVAR(replaceWith));\n};\n\nif (_newWeapon != \"\") then {\n    _mortar removeWeaponTurret [_currentWeapon,[0]];\n    _mortar addWeaponTurret [_newWeapon,[0]];\n};\n\n_mortar setVariable [QGVAR(initialized),true,true];\nTRACE_1(\"Init complete\",_mortar);\n",
        "functionName": "ace_mk6mortar_fnc_mortarInit"
      },
      {
        "fileName": "fnc_rangeTableCanUse.sqf",
        "content": "/*\n * Author: PabstMirror\n * Can player open 82mm rangetable.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player <OBJECT>\n *\n * Return Value:\n * Can Open <BOOL>\n *\n * Example:\n * [bob, bob] call ace_mk6mortar_fnc_rangeTableCanUse\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_player\"];\n\n\"ACE_RangeTable_82mm\" in (items _player);\n",
        "functionName": "ace_mk6mortar_fnc_rangeTableCanUse"
      },
      {
        "fileName": "fnc_rangeTableOpen.sqf",
        "content": "/*\n * Author: PabstMirror\n * Opens the rangetable and fills the charge listbox.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_mk6mortar_fnc_rangeTableOpen\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define LIST_CHARGE ((uiNamespace getVariable \"ACE_82mm_RangeTable_Dialog\") displayCtrl 1501)\n\nprivate _weaponName = \"mortar_82mm\"; //todo: work on other weapons\n\ncreateDialog \"ACE_82mm_RangeTable_Dialog\";\nif (isNull (uiNamespace getVariable [\"ACE_82mm_RangeTable_Dialog\", displayNull])) exitWith {ERROR(\"Dialog failed to open\");};\n\n//Get Magazine Types\nprivate _magazines = getArray (configFile >> \"CfgWeapons\" >> _weaponName >> \"magazines\");\n\n//For now just get settings from first mag, all rounds have same flight characteristics:\nif ((count _magazines) < 1) exitWith {ERROR(\"No Magazines for weapon\");};\nprivate _initSpeed = getNumber (configFile >> \"CfgMagazines\" >> (_magazines select 0) >> \"initSpeed\");\n\n//Get Charge Modes\nprivate _fireModes = getArray (configFile >> \"CfgWeapons\" >> _weaponName >> \"modes\");\n\nprivate _muzzleVelocities = [];\n{\n    private _showToPlayer = getNumber (configFile >> \"CfgWeapons\" >> _weaponName >> _x >> \"showToPlayer\");\n    if (_showToPlayer == 1) then {\n        private _artilleryCharge = getNumber (configFile >> \"CfgWeapons\" >> _weaponName >> _x >> \"artilleryCharge\");\n        LIST_CHARGE lbAdd format [\"%1: %2\", (localize LSTRING(rangetable_charge)), (count _muzzleVelocities)];\n        LIST_CHARGE lbSetData [(count _muzzleVelocities), str (_artilleryCharge * _initSpeed)];\n        _muzzleVelocities pushBack _artilleryCharge;\n    };\n} forEach _fireModes;\n\nLIST_CHARGE lbSetCurSel 0;\n",
        "functionName": "ace_mk6mortar_fnc_rangeTableOpen"
      },
      {
        "fileName": "fnc_rangeTablePageChange.sqf",
        "content": "/*\n * Author: PabstMirror\n * Called when listbox selection changes.  Updates the rangetable with new values.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_mk6mortar_fnc_rangeTablePageChange\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define RANGE_TABLE       ((uiNamespace getVariable \"ACE_82mm_RangeTable_Dialog\") displayCtrl 20001)\n#define LIST_CHARGE       ((uiNamespace getVariable \"ACE_82mm_RangeTable_Dialog\") displayCtrl 1501)\n\nprivate _listBoxData = LIST_CHARGE lbData (lbCurSel LIST_CHARGE);\nif (isNil \"_listBoxData\" || {_listBoxData == \"\"}) exitWith {ERROR(\"lbCurSel out of bounds or no data\");};\nprivate _muzzleVelocity = parseNumber _listBoxData;\n\nprivate _airFriction = if (GVAR(airResistanceEnabled)) then {MK6_82mm_AIR_FRICTION} else {0};\n\nprivate _precalcArray = [_muzzleVelocity, _airFriction] call FUNC(rangeTablePreCalculatedValues);\n\nlnbClear RANGE_TABLE;\n{\n    RANGE_TABLE lnbAddRow _x;\n} forEach _precalcArray;\n\n//put dummy line at end because scrolling is fucked and can't see last line\nRANGE_TABLE lnbAddRow [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n",
        "functionName": "ace_mk6mortar_fnc_rangeTablePageChange"
      },
      {
        "fileName": "fnc_rangeTablePreCalculatedValues.sqf",
        "content": "/*\n * Author: PabstMirror\n * Simple Lookup Table for various muzzle velocities and air frictions.\n * Use ace_mk6mortar_fnc_dev_buildTable to build\n *\n * Arguments:\n * 0: Muzzle Velocity <NUMBER>\n * 1: Air Friction <NUMBER>\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * [200, 0] call ace_mk6mortar_fnc_rangeTablePreCalculatedValues\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_muzzleVelocity\", \"_airFriction\"];\n\nswitch (true) do {\n\ncase ((abs(_muzzleVelocity - 70) < 0.00001) && {(abs(_airFriction - -0.0001) < 0.00001)}): {\n        [\n        [\"100\",\"1493\",\"9\",\"1.4\",\"14.0\",\"3.7\",\"0.4\",\"-0.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"150\",\"1438\",\"14\",\"1.4\",\"13.9\",\"2.5\",\"0.4\",\"-0.4\",\"0.0\",\"0.0\",\"-0.1\",\"0.0\"],\n        [\"200\",\"1381\",\"20\",\"1.4\",\"13.8\",\"1.9\",\"0.5\",\"-0.4\",\"0.0\",\"0.0\",\"-0.1\",\"0.1\"],\n        [\"250\",\"1321\",\"27\",\"1.5\",\"13.6\",\"1.5\",\"0.5\",\"-0.4\",\"0.0\",\"0.0\",\"-0.1\",\"0.1\"],\n        [\"300\",\"1256\",\"36\",\"1.6\",\"13.3\",\"1.3\",\"0.6\",\"-0.5\",\"0.0\",\"-0.1\",\"-0.1\",\"0.1\"],\n        [\"350\",\"1183\",\"49\",\"1.7\",\"12.9\",\"1.1\",\"0.6\",\"-0.5\",\"0.1\",\"-0.1\",\"-0.1\",\"0.1\"],\n        [\"400\",\"1097\",\"70\",\"1.9\",\"12.4\",\"0.9\",\"0.6\",\"-0.5\",\"0.1\",\"-0.1\",\"-0.2\",\"0.1\"],\n        [\"450\",\"979\",\"113\",\"2.3\",\"11.6\",\"0.8\",\"0.6\",\"-0.5\",\"0.1\",\"-0.1\",\"-0.2\",\"0.2\"]\n        ]\n    };\ncase ((abs(_muzzleVelocity - 140) < 0.00001) && {(abs(_airFriction - -0.0001) < 0.00001)}): {\n        [\n        [\"150\",\"1556\",\"1\",\"0.8\",\"27.2\",\"16.3\",\"2.5\",\"-2.4\",\"0.0\",\"0.0\",\"-0.2\",\"0.2\"],\n        [\"200\",\"1541\",\"1\",\"0.8\",\"27.2\",\"12.3\",\"2.5\",\"-2.4\",\"0.0\",\"0.0\",\"-0.3\",\"0.2\"],\n        [\"250\",\"1527\",\"2\",\"0.8\",\"27.2\",\"9.9\",\"2.6\",\"-2.4\",\"0.0\",\"0.0\",\"-0.3\",\"0.3\"],\n        [\"300\",\"1512\",\"2\",\"0.8\",\"27.2\",\"8.3\",\"2.7\",\"-2.4\",\"0.1\",\"0.0\",\"-0.4\",\"0.4\"],\n        [\"350\",\"1497\",\"3\",\"0.8\",\"27.1\",\"7.1\",\"2.7\",\"-2.5\",\"0.0\",\"-0.1\",\"-0.5\",\"0.4\"],\n        [\"400\",\"1482\",\"3\",\"0.8\",\"27.1\",\"6.2\",\"2.7\",\"-2.5\",\"0.1\",\"-0.1\",\"-0.5\",\"0.5\"],\n        [\"450\",\"1467\",\"3\",\"0.8\",\"27.0\",\"5.6\",\"2.8\",\"-2.5\",\"0.1\",\"-0.1\",\"-0.6\",\"0.6\"],\n        [\"500\",\"1451\",\"4\",\"0.8\",\"27.0\",\"5.0\",\"2.9\",\"-2.6\",\"0.1\",\"-0.1\",\"-0.6\",\"0.6\"],\n        [\"550\",\"1436\",\"4\",\"0.8\",\"26.9\",\"4.6\",\"2.9\",\"-2.6\",\"0.1\",\"-0.1\",\"-0.7\",\"0.7\"],\n        [\"600\",\"1420\",\"5\",\"0.8\",\"26.8\",\"4.2\",\"3.0\",\"-2.7\",\"0.1\",\"-0.1\",\"-0.8\",\"0.8\"],\n        [\"650\",\"1404\",\"5\",\"0.8\",\"26.8\",\"3.9\",\"3.0\",\"-2.7\",\"0.1\",\"-0.1\",\"-0.9\",\"0.8\"],\n        [\"700\",\"1388\",\"6\",\"0.8\",\"26.7\",\"3.6\",\"3.1\",\"-2.8\",\"0.1\",\"-0.1\",\"-0.9\",\"0.9\"],\n        [\"750\",\"1372\",\"6\",\"0.8\",\"26.6\",\"3.4\",\"3.2\",\"-2.8\",\"0.1\",\"-0.1\",\"-1.0\",\"1.0\"],\n        [\"800\",\"1355\",\"7\",\"0.8\",\"26.5\",\"3.2\",\"3.2\",\"-2.9\",\"0.1\",\"-0.1\",\"-1.1\",\"1.1\"],\n        [\"850\",\"1338\",\"8\",\"0.8\",\"26.4\",\"3.0\",\"3.3\",\"-2.9\",\"0.1\",\"-0.1\",\"-1.1\",\"1.1\"],\n        [\"900\",\"1321\",\"8\",\"0.8\",\"26.2\",\"2.8\",\"3.4\",\"-3.0\",\"0.1\",\"-0.1\",\"-1.2\",\"1.2\"],\n        [\"950\",\"1303\",\"9\",\"0.9\",\"26.1\",\"2.7\",\"3.4\",\"-3.1\",\"0.1\",\"-0.2\",\"-1.3\",\"1.2\"],\n        [\"1000\",\"1285\",\"10\",\"0.9\",\"26.0\",\"2.6\",\"3.5\",\"-3.1\",\"0.2\",\"-0.1\",\"-1.4\",\"1.3\"],\n        [\"1050\",\"1266\",\"11\",\"0.9\",\"25.8\",\"2.4\",\"3.5\",\"-3.2\",\"0.1\",\"-0.2\",\"-1.4\",\"1.4\"],\n        [\"1100\",\"1247\",\"12\",\"0.9\",\"25.7\",\"2.3\",\"3.6\",\"-3.3\",\"0.1\",\"-0.2\",\"-1.5\",\"1.4\"],\n        [\"1150\",\"1228\",\"13\",\"0.9\",\"25.5\",\"2.2\",\"3.7\",\"-3.3\",\"0.2\",\"-0.2\",\"-1.6\",\"1.5\"],\n        [\"1200\",\"1207\",\"14\",\"1.0\",\"25.3\",\"2.1\",\"3.7\",\"-3.4\",\"0.2\",\"-0.2\",\"-1.7\",\"1.6\"],\n        [\"1250\",\"1186\",\"15\",\"1.0\",\"25.1\",\"2.0\",\"3.8\",\"-3.4\",\"0.2\",\"-0.2\",\"-1.7\",\"1.7\"],\n        [\"1300\",\"1163\",\"17\",\"1.0\",\"24.8\",\"1.9\",\"3.8\",\"-3.5\",\"0.2\",\"-0.2\",\"-1.8\",\"1.7\"],\n        [\"1350\",\"1140\",\"19\",\"1.0\",\"24.6\",\"1.9\",\"3.9\",\"-3.5\",\"0.2\",\"-0.2\",\"-1.9\",\"1.8\"],\n        [\"1400\",\"1115\",\"21\",\"1.1\",\"24.3\",\"1.8\",\"3.9\",\"-3.6\",\"0.2\",\"-0.2\",\"-1.9\",\"1.9\"],\n        [\"1450\",\"1088\",\"24\",\"1.1\",\"23.9\",\"1.7\",\"4.0\",\"-3.6\",\"0.2\",\"-0.2\",\"-2.0\",\"1.9\"],\n        [\"1500\",\"1060\",\"27\",\"1.2\",\"23.6\",\"1.6\",\"4.0\",\"-3.7\",\"0.2\",\"-0.2\",\"-2.1\",\"2.0\"],\n        [\"1550\",\"1028\",\"32\",\"1.3\",\"23.1\",\"1.5\",\"4.0\",\"-3.7\",\"0.2\",\"-0.2\",\"-2.1\",\"2.1\"],\n        [\"1600\",\"991\",\"38\",\"1.4\",\"22.6\",\"1.5\",\"4.0\",\"-3.7\",\"0.2\",\"-0.2\",\"-2.2\",\"2.1\"],\n        [\"1650\",\"947\",\"49\",\"1.7\",\"21.9\",\"1.4\",\"4.0\",\"-3.7\",\"0.2\",\"-0.3\",\"-2.3\",\"2.2\"],\n        [\"1700\",\"888\",\"71\",\"2.1\",\"21.0\",\"1.3\",\"3.9\",\"-3.6\",\"0.3\",\"-0.3\",\"-2.3\",\"2.2\"]\n        ]\n    };\ncase ((abs(_muzzleVelocity - 200) < 0.00001) && {(abs(_airFriction - -0.0001) < 0.00001)}): {\n        [\n        [\"250\",\"1559\",\"1\",\"0.6\",\"37.3\",\"23.8\",\"6.1\",\"-5.9\",\"0.0\",\"0.0\",\"-0.6\",\"0.5\"],\n        [\"300\",\"1551\",\"1\",\"0.6\",\"37.3\",\"20.0\",\"6.1\",\"-5.9\",\"0.1\",\"0.0\",\"-0.7\",\"0.7\"],\n        [\"350\",\"1543\",\"1\",\"0.6\",\"37.3\",\"17.2\",\"6.2\",\"-5.9\",\"0.0\",\"-0.1\",\"-0.8\",\"0.7\"],\n        [\"400\",\"1535\",\"1\",\"0.6\",\"37.3\",\"15.1\",\"6.2\",\"-5.9\",\"0.1\",\"0.0\",\"-0.9\",\"0.9\"],\n        [\"450\",\"1527\",\"1\",\"0.6\",\"37.3\",\"13.4\",\"6.3\",\"-6.0\",\"0.1\",\"-0.1\",\"-1.0\",\"1.0\"],\n        [\"500\",\"1519\",\"1\",\"0.6\",\"37.2\",\"12.1\",\"6.3\",\"-6.0\",\"0.1\",\"-0.1\",\"-1.1\",\"1.1\"],\n        [\"550\",\"1510\",\"1\",\"0.6\",\"37.2\",\"11.0\",\"6.4\",\"-6.0\",\"0.1\",\"-0.1\",\"-1.3\",\"1.2\"],\n        [\"600\",\"1502\",\"1\",\"0.6\",\"37.2\",\"10.1\",\"6.4\",\"-6.1\",\"0.1\",\"-0.1\",\"-1.4\",\"1.3\"],\n        [\"650\",\"1494\",\"1\",\"0.6\",\"37.2\",\"9.4\",\"6.5\",\"-6.1\",\"0.1\",\"-0.1\",\"-1.5\",\"1.4\"],\n        [\"700\",\"1485\",\"2\",\"0.6\",\"37.1\",\"8.7\",\"6.5\",\"-6.2\",\"0.1\",\"-0.1\",\"-1.6\",\"1.5\"],\n        [\"750\",\"1477\",\"2\",\"0.6\",\"37.1\",\"8.2\",\"6.6\",\"-6.2\",\"0.1\",\"-0.1\",\"-1.7\",\"1.6\"],\n        [\"800\",\"1468\",\"2\",\"0.6\",\"37.0\",\"7.7\",\"6.7\",\"-6.3\",\"0.1\",\"-0.1\",\"-1.8\",\"1.8\"],\n        [\"850\",\"1460\",\"2\",\"0.6\",\"37.0\",\"7.2\",\"6.7\",\"-6.3\",\"0.1\",\"-0.1\",\"-2.0\",\"1.9\"],\n        [\"900\",\"1451\",\"2\",\"0.6\",\"37.0\",\"6.8\",\"6.8\",\"-6.4\",\"0.1\",\"-0.1\",\"-2.1\",\"2.0\"],\n        [\"950\",\"1443\",\"2\",\"0.6\",\"36.9\",\"6.5\",\"6.9\",\"-6.4\",\"0.1\",\"-0.1\",\"-2.2\",\"2.1\"],\n        [\"1000\",\"1434\",\"2\",\"0.6\",\"36.9\",\"6.2\",\"6.9\",\"-6.5\",\"0.1\",\"-0.1\",\"-2.3\",\"2.2\"],\n        [\"1050\",\"1425\",\"2\",\"0.6\",\"36.8\",\"5.9\",\"7.0\",\"-6.6\",\"0.1\",\"-0.2\",\"-2.5\",\"2.3\"],\n        [\"1100\",\"1417\",\"3\",\"0.6\",\"36.8\",\"5.6\",\"7.1\",\"-6.6\",\"0.1\",\"-0.2\",\"-2.6\",\"2.4\"],\n        [\"1150\",\"1408\",\"3\",\"0.6\",\"36.7\",\"5.4\",\"7.1\",\"-6.7\",\"0.2\",\"-0.2\",\"-2.7\",\"2.5\"],\n        [\"1200\",\"1399\",\"3\",\"0.6\",\"36.6\",\"5.2\",\"7.2\",\"-6.7\",\"0.2\",\"-0.2\",\"-2.8\",\"2.7\"],\n        [\"1250\",\"1390\",\"3\",\"0.6\",\"36.6\",\"5.0\",\"7.3\",\"-6.8\",\"0.2\",\"-0.2\",\"-2.9\",\"2.8\"],\n        [\"1300\",\"1381\",\"3\",\"0.6\",\"36.5\",\"4.8\",\"7.4\",\"-6.9\",\"0.2\",\"-0.2\",\"-3.0\",\"2.9\"],\n        [\"1350\",\"1372\",\"3\",\"0.6\",\"36.4\",\"4.6\",\"7.4\",\"-6.9\",\"0.2\",\"-0.2\",\"-3.2\",\"3.0\"],\n        [\"1400\",\"1362\",\"4\",\"0.6\",\"36.4\",\"4.4\",\"7.5\",\"-7.0\",\"0.2\",\"-0.2\",\"-3.3\",\"3.1\"],\n        [\"1450\",\"1353\",\"4\",\"0.6\",\"36.3\",\"4.3\",\"7.6\",\"-7.1\",\"0.2\",\"-0.2\",\"-3.4\",\"3.2\"],\n        [\"1500\",\"1344\",\"4\",\"0.6\",\"36.2\",\"4.2\",\"7.7\",\"-7.1\",\"0.2\",\"-0.2\",\"-3.5\",\"3.4\"],\n        [\"1550\",\"1334\",\"4\",\"0.6\",\"36.1\",\"4.0\",\"7.7\",\"-7.2\",\"0.2\",\"-0.2\",\"-3.7\",\"3.5\"],\n        [\"1600\",\"1324\",\"4\",\"0.6\",\"36.0\",\"3.9\",\"7.8\",\"-7.3\",\"0.2\",\"-0.2\",\"-3.8\",\"3.6\"],\n        [\"1650\",\"1314\",\"4\",\"0.7\",\"35.9\",\"3.8\",\"7.9\",\"-7.3\",\"0.2\",\"-0.2\",\"-3.9\",\"3.7\"],\n        [\"1700\",\"1304\",\"5\",\"0.7\",\"35.8\",\"3.7\",\"7.9\",\"-7.4\",\"0.2\",\"-0.2\",\"-4.0\",\"3.8\"],\n        [\"1750\",\"1294\",\"5\",\"0.7\",\"35.7\",\"3.6\",\"8.0\",\"-7.5\",\"0.2\",\"-0.2\",\"-4.2\",\"3.9\"],\n        [\"1800\",\"1284\",\"5\",\"0.7\",\"35.6\",\"3.5\",\"8.1\",\"-7.6\",\"0.2\",\"-0.3\",\"-4.3\",\"4.0\"],\n        [\"1850\",\"1274\",\"5\",\"0.7\",\"35.5\",\"3.4\",\"8.2\",\"-7.6\",\"0.2\",\"-0.3\",\"-4.4\",\"4.2\"],\n        [\"1900\",\"1263\",\"6\",\"0.7\",\"35.4\",\"3.3\",\"8.2\",\"-7.7\",\"0.2\",\"-0.3\",\"-4.5\",\"4.3\"],\n        [\"1950\",\"1253\",\"6\",\"0.7\",\"35.2\",\"3.2\",\"8.3\",\"-7.8\",\"0.2\",\"-0.3\",\"-4.7\",\"4.4\"],\n        [\"2000\",\"1242\",\"6\",\"0.7\",\"35.1\",\"3.1\",\"8.4\",\"-7.8\",\"0.3\",\"-0.3\",\"-4.8\",\"4.5\"],\n        [\"2050\",\"1231\",\"7\",\"0.7\",\"35.0\",\"3.0\",\"8.4\",\"-7.9\",\"0.3\",\"-0.3\",\"-4.9\",\"4.7\"],\n        [\"2100\",\"1219\",\"7\",\"0.7\",\"34.8\",\"2.9\",\"8.5\",\"-8.0\",\"0.3\",\"-0.3\",\"-5.0\",\"4.8\"],\n        [\"2150\",\"1208\",\"7\",\"0.7\",\"34.7\",\"2.9\",\"8.5\",\"-8.0\",\"0.3\",\"-0.3\",\"-5.2\",\"4.9\"],\n        [\"2200\",\"1196\",\"8\",\"0.7\",\"34.5\",\"2.8\",\"8.6\",\"-8.1\",\"0.3\",\"-0.3\",\"-5.3\",\"5.0\"],\n        [\"2250\",\"1184\",\"8\",\"0.7\",\"34.3\",\"2.7\",\"8.7\",\"-8.2\",\"0.3\",\"-0.3\",\"-5.4\",\"5.1\"],\n        [\"2300\",\"1171\",\"9\",\"0.8\",\"34.2\",\"2.7\",\"8.7\",\"-8.2\",\"0.3\",\"-0.3\",\"-5.5\",\"5.2\"],\n        [\"2350\",\"1158\",\"9\",\"0.8\",\"34.0\",\"2.6\",\"8.8\",\"-8.3\",\"0.3\",\"-0.3\",\"-5.7\",\"5.4\"],\n        [\"2400\",\"1145\",\"10\",\"0.8\",\"33.8\",\"2.5\",\"8.8\",\"-8.3\",\"0.3\",\"-0.3\",\"-5.8\",\"5.5\"],\n        [\"2450\",\"1132\",\"10\",\"0.8\",\"33.6\",\"2.5\",\"8.9\",\"-8.4\",\"0.3\",\"-0.3\",\"-5.9\",\"5.6\"],\n        [\"2500\",\"1118\",\"11\",\"0.8\",\"33.3\",\"2.4\",\"8.9\",\"-8.4\",\"0.3\",\"-0.3\",\"-6.0\",\"5.7\"],\n        [\"2550\",\"1103\",\"12\",\"0.8\",\"33.1\",\"2.4\",\"9.0\",\"-8.5\",\"0.3\",\"-0.3\",\"-6.1\",\"5.8\"],\n        [\"2600\",\"1088\",\"13\",\"0.9\",\"32.8\",\"2.3\",\"9.0\",\"-8.5\",\"0.4\",\"-0.3\",\"-6.2\",\"5.9\"],\n        [\"2650\",\"1072\",\"14\",\"0.9\",\"32.6\",\"2.2\",\"9.0\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.4\",\"6.0\"],\n        [\"2700\",\"1056\",\"15\",\"0.9\",\"32.3\",\"2.2\",\"9.0\",\"-8.6\",\"0.3\",\"-0.4\",\"-6.5\",\"6.1\"],\n        [\"2750\",\"1038\",\"16\",\"1.0\",\"31.9\",\"2.1\",\"9.1\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.6\",\"6.3\"],\n        [\"2800\",\"1020\",\"18\",\"1.0\",\"31.6\",\"2.1\",\"9.1\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.7\",\"6.4\"],\n        [\"2850\",\"1000\",\"20\",\"1.1\",\"31.2\",\"2.0\",\"9.1\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.8\",\"6.5\"],\n        [\"2900\",\"978\",\"22\",\"1.1\",\"30.8\",\"1.9\",\"9.0\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.9\",\"6.5\"],\n        [\"2950\",\"954\",\"26\",\"1.2\",\"30.3\",\"1.9\",\"9.0\",\"-8.6\",\"0.4\",\"-0.4\",\"-7.0\",\"6.6\"],\n        [\"3000\",\"927\",\"31\",\"1.4\",\"29.7\",\"1.8\",\"8.9\",\"-8.5\",\"0.4\",\"-0.4\",\"-7.1\",\"6.7\"],\n        [\"3050\",\"894\",\"38\",\"1.6\",\"29.0\",\"1.7\",\"8.8\",\"-8.4\",\"0.4\",\"-0.4\",\"-7.2\",\"6.8\"],\n        [\"3100\",\"849\",\"54\",\"2.0\",\"27.9\",\"1.6\",\"8.5\",\"-8.3\",\"0.4\",\"-0.4\",\"-7.2\",\"6.8\"]\n        ]\n    };\ncase ((abs(_muzzleVelocity - 70) < 0.00001) && {(abs(_airFriction - 0) < 0.00001)}): {\n        [\n        [\"100\",\"1497\",\"9\",\"1.3\",\"14.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"150\",\"1445\",\"14\",\"1.3\",\"14.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"200\",\"1390\",\"19\",\"1.4\",\"14.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"250\",\"1333\",\"26\",\"1.4\",\"13.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"300\",\"1272\",\"34\",\"1.5\",\"13.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"350\",\"1204\",\"45\",\"1.6\",\"13.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"400\",\"1127\",\"61\",\"1.8\",\"12.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"450\",\"1028\",\"91\",\"2.1\",\"12.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"]\n        ]\n    };\ncase ((abs(_muzzleVelocity - 140) < 0.00001) && {(abs(_airFriction - 0) < 0.00001)}): {\n        [\n        [\"150\",\"1562\",\"1\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"200\",\"1549\",\"1\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"250\",\"1536\",\"2\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"300\",\"1523\",\"2\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"350\",\"1510\",\"2\",\"0.7\",\"28.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"400\",\"1497\",\"3\",\"0.7\",\"28.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"450\",\"1484\",\"3\",\"0.7\",\"28.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"500\",\"1471\",\"3\",\"0.7\",\"28.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"550\",\"1458\",\"4\",\"0.7\",\"28.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"600\",\"1445\",\"4\",\"0.7\",\"28.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"650\",\"1431\",\"4\",\"0.7\",\"28.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"700\",\"1418\",\"5\",\"0.7\",\"28.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"750\",\"1404\",\"5\",\"0.7\",\"28.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"800\",\"1390\",\"6\",\"0.7\",\"27.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"850\",\"1376\",\"6\",\"0.7\",\"27.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"900\",\"1362\",\"6\",\"0.8\",\"27.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"950\",\"1348\",\"7\",\"0.8\",\"27.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1000\",\"1333\",\"7\",\"0.8\",\"27.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1050\",\"1318\",\"8\",\"0.8\",\"27.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1100\",\"1303\",\"9\",\"0.8\",\"27.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1150\",\"1288\",\"9\",\"0.8\",\"27.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1200\",\"1272\",\"10\",\"0.8\",\"27.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1250\",\"1256\",\"11\",\"0.8\",\"26.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1300\",\"1239\",\"12\",\"0.8\",\"26.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1350\",\"1222\",\"13\",\"0.9\",\"26.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1400\",\"1205\",\"13\",\"0.9\",\"26.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1450\",\"1187\",\"15\",\"0.9\",\"26.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1500\",\"1168\",\"16\",\"0.9\",\"26.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1550\",\"1148\",\"18\",\"1.0\",\"25.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1600\",\"1127\",\"19\",\"1.0\",\"25.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1650\",\"1105\",\"21\",\"1.1\",\"25.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1700\",\"1082\",\"24\",\"1.1\",\"24.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1750\",\"1057\",\"27\",\"1.2\",\"24.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1800\",\"1029\",\"31\",\"1.3\",\"24.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1850\",\"997\",\"37\",\"1.4\",\"23.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1900\",\"960\",\"46\",\"1.6\",\"23.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1950\",\"912\",\"63\",\"1.9\",\"22.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"]\n        ]\n    };\ncase ((abs(_muzzleVelocity - 200) < 0.00001) && {(abs(_airFriction - 0) < 0.00001)}): {\n        [\n        [\"300\",\"1563\",\"0\",\"0.5\",\"40.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"350\",\"1556\",\"1\",\"0.5\",\"40.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"400\",\"1550\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"450\",\"1544\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"500\",\"1537\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"550\",\"1531\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"600\",\"1525\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"650\",\"1519\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"700\",\"1512\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"750\",\"1506\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"800\",\"1499\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"850\",\"1493\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"900\",\"1487\",\"1\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"950\",\"1480\",\"1\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1000\",\"1474\",\"2\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1050\",\"1467\",\"2\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1100\",\"1461\",\"2\",\"0.5\",\"40.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1150\",\"1454\",\"2\",\"0.5\",\"40.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1200\",\"1448\",\"2\",\"0.5\",\"40.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1250\",\"1441\",\"2\",\"0.5\",\"40.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1300\",\"1435\",\"2\",\"0.5\",\"40.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1350\",\"1428\",\"2\",\"0.5\",\"40.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1400\",\"1422\",\"2\",\"0.5\",\"40.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1450\",\"1415\",\"2\",\"0.5\",\"40.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1500\",\"1408\",\"2\",\"0.5\",\"40.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1550\",\"1402\",\"3\",\"0.5\",\"40.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1600\",\"1395\",\"3\",\"0.5\",\"40.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1650\",\"1388\",\"3\",\"0.5\",\"39.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1700\",\"1381\",\"3\",\"0.5\",\"39.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1750\",\"1374\",\"3\",\"0.5\",\"39.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1800\",\"1367\",\"3\",\"0.5\",\"39.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1850\",\"1360\",\"3\",\"0.5\",\"39.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1900\",\"1353\",\"3\",\"0.5\",\"39.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"1950\",\"1346\",\"4\",\"0.5\",\"39.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2000\",\"1339\",\"4\",\"0.5\",\"39.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2050\",\"1332\",\"4\",\"0.5\",\"39.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2100\",\"1325\",\"4\",\"0.6\",\"39.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2150\",\"1317\",\"4\",\"0.6\",\"39.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2200\",\"1310\",\"4\",\"0.6\",\"39.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2250\",\"1302\",\"4\",\"0.6\",\"39.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2300\",\"1295\",\"5\",\"0.6\",\"39.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2350\",\"1287\",\"5\",\"0.6\",\"38.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2400\",\"1280\",\"5\",\"0.6\",\"38.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2450\",\"1272\",\"5\",\"0.6\",\"38.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2500\",\"1264\",\"5\",\"0.6\",\"38.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2550\",\"1256\",\"5\",\"0.6\",\"38.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2600\",\"1248\",\"6\",\"0.6\",\"38.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2650\",\"1240\",\"6\",\"0.6\",\"38.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2700\",\"1232\",\"6\",\"0.6\",\"38.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2750\",\"1223\",\"6\",\"0.6\",\"38.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2800\",\"1215\",\"7\",\"0.6\",\"37.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2850\",\"1206\",\"7\",\"0.6\",\"37.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2900\",\"1197\",\"7\",\"0.6\",\"37.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"2950\",\"1188\",\"7\",\"0.7\",\"37.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3000\",\"1179\",\"8\",\"0.7\",\"37.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3050\",\"1170\",\"8\",\"0.7\",\"37.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3100\",\"1160\",\"8\",\"0.7\",\"37.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3150\",\"1151\",\"9\",\"0.7\",\"36.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3200\",\"1141\",\"9\",\"0.7\",\"36.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3250\",\"1131\",\"10\",\"0.7\",\"36.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3300\",\"1120\",\"10\",\"0.7\",\"36.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3350\",\"1109\",\"11\",\"0.8\",\"36.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3400\",\"1098\",\"11\",\"0.8\",\"35.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3450\",\"1087\",\"12\",\"0.8\",\"35.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3500\",\"1075\",\"13\",\"0.8\",\"35.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3550\",\"1062\",\"14\",\"0.8\",\"35.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3600\",\"1049\",\"15\",\"0.9\",\"35.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3650\",\"1036\",\"16\",\"0.9\",\"34.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3700\",\"1021\",\"17\",\"0.9\",\"34.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3750\",\"1006\",\"19\",\"1.0\",\"34.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3800\",\"990\",\"21\",\"1.1\",\"33.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3850\",\"971\",\"24\",\"1.1\",\"33.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3900\",\"952\",\"27\",\"1.2\",\"32.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"3950\",\"929\",\"32\",\"1.4\",\"32.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"4000\",\"900\",\"40\",\"1.6\",\"31.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\n        [\"4050\",\"861\",\"56\",\"2.1\",\"30.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"]\n        ]\n    };\n    default {\n        ERROR(\"MuzzleVelocity not found in LUT\");\n        []\n    };\n};\n",
        "functionName": "ace_mk6mortar_fnc_rangeTablePreCalculatedValues"
      },
      {
        "fileName": "fnc_toggleMils.sqf",
        "content": "/*\n * Author: PabstMirror\n * Toggles the mortart to show mils or degrees\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Player <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [mortar,bob] call ace_mk6mortar_fnc_toggleMils;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_mortarVeh\", \"_unit\"];\n\nprivate _currentSetting = _mortarVeh getVariable [QGVAR(useMils), true];\n_mortarVeh setVariable [QGVAR(useMils), (!_currentSetting)];\n",
        "functionName": "ace_mk6mortar_fnc_toggleMils"
      },
      {
        "fileName": "fnc_turretDisplayLoaded.sqf",
        "content": "/*\n * Author: PabstMirror\n * Called when the mk6's in game UI is loaded.  Hides rangefinder data if it is disabled.\n *\n * Arguments:\n * 0: Display <DISPLAY>\n * 1: Type <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [rsc,\"Mk6Mortar\"] call ace_mk6mortar_fnc_turretDisplayLoaded\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_display\", \"_rscType\"];\nTRACE_2(\"params\",_display,_rscType);\n\nif (_rscType != \"Mk6Mortar\") exitWith {};\nif (isNull _display) exitWith {};\n\n#define CTRL_CA_OPTICSPITCH (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_OPTICSPITCH\")\n#define CTRL_CA_OPTICSZOOM (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_OPTICSZOOM\")\n#define CTRL_CA_SOLUTION_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_SOLUTION_TEXT\")\n#define CTRL_CA_DISTANCE_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_DISTANCE_TEXT\")\n#define CTRL_CA_DISTANCE (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_DISTANCE\")\n#define CTRL_CA_TIME_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_TIME_TEXT\")\n#define CTRL_CA_TIME (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_TIME\")\n#define CTRL_CA_ELEV_NEED_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_ELEV_NEED_TEXT\")\n#define CTRL_CA_RANGEELEMENTS_GROUP (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_RangeElements_group\")\n\n#define CTRL_CA_HEADING (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_Heading\")\n#define CTRL_CA_ELEV (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_ELEV\")\n#define CTRL_CA_ELEV_NEED (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_ELEV_NEED\")\n\nprivate _fnc_hideControl = {\n    params [\"_path\", \"_hideCtrl\"];\n    private _idc = getNumber (_path >> \"IDC\");\n    private _pos = [];\n    if (_hideCtrl) then {\n        _pos = [-9,-9,0,0];\n    } else {\n        {\n            if (isNumber (_path >> _x)) then {\n                _pos pushBack (getNumber (_path >> _x));\n            } else {\n                _pos pushBack (call compile (getText (_path >> _x)));\n            };\n        } forEach [\"x\", \"y\", \"w\", \"h\"];\n    };\n    (_display displayCtrl _idc) ctrlSetPosition _pos;\n    (_display displayCtrl _idc) ctrlCommit 0;\n};\n\n{\n    [_x, (!GVAR(allowComputerRangefinder))] call _fnc_hideControl;\n} forEach [CTRL_CA_OPTICSPITCH, CTRL_CA_OPTICSZOOM, CTRL_CA_SOLUTION_TEXT, CTRL_CA_DISTANCE_TEXT, CTRL_CA_DISTANCE, CTRL_CA_TIME_TEXT, CTRL_CA_TIME, CTRL_CA_ELEV_NEED_TEXT, CTRL_CA_RANGEELEMENTS_GROUP];\n\n//Always hide these, handled by the mil convertions PFEH in handlePlayerVehChanged\n[CTRL_CA_HEADING, true] call _fnc_hideControl;\n[CTRL_CA_ELEV, true] call _fnc_hideControl;\n[CTRL_CA_ELEV_NEED, true] call _fnc_hideControl;\n",
        "functionName": "ace_mk6mortar_fnc_turretDisplayLoaded"
      },
      {
        "fileName": "fnc_unloadMagazine.sqf",
        "content": "/*\n * Author: Grey\n *\n * Unload current magazine from static weapon\n *\n * Arguments:\n * 0: static <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_target, _player] call ace_mk6mortar_fnc_unloadMagazine\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_static\",\"_unit\"];\n\n//Get weapon & magazine information about static weapon\nprivate _currentMagazine = (magazinesAllTurrets _static) select 1;\nprivate _currentMagazineClass = _currentMagazine select 0;\nprivate _ammoCount = _currentMagazine select 2;\n\n// Try to add the round to player inventory, otherwise place it on the ground near the player\nif (_ammoCount > 0) then {\n    if (_unit canAdd _currentMagazineClass) then {\n        _unit addMagazineGlobal _currentMagazineClass;\n    } else {\n        _pos = _unit modelToWorldVisual [0.5,0.5,0]; // Front right of player\n        _unit = createVehicle [\"WeaponHolder_Single_F\",_pos,[],0,\"NONE\"];\n        _unit addMagazineAmmoCargo [_currentMagazineClass, 1, _ammoCount];\n        _unit setPosATL _pos;\n    };\n    [QGVAR(removeMagazine), [_static, _currentMagazineClass]] call CBA_fnc_globalEvent;\n};\n",
        "functionName": "ace_mk6mortar_fnc_unloadMagazine"
      },
      {
        "fileName": "fnc_unloadMagazineTimer.sqf",
        "content": "/*\n * Author: Grey\n *\n * Unload current magazine from static weapon using a timer\n *\n * Arguments:\n * 0: static <OBJECT>\n * 1: unit <OBJECT>\n * 2: time to unload <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_target, _player, 5] call ace_mk6mortar_fnc_unloadMagazineTimer\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_static\",\"_unit\",\"_timeToUnload\"];\n\n//Move player into animation if player is standing\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\", 1] call EFUNC(common,doAnimation);\n};\n\n[_timeToUnload, [_static,_unit], {(_this select 0) call FUNC(unloadMagazine)}, {}, localize LSTRING(unloadingMortar)] call EFUNC(common,progressBar);\n",
        "functionName": "ace_mk6mortar_fnc_unloadMagazineTimer"
      }
    ]
  },
  {
    "component": "modules",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QEGVAR(common,initSettingsFromModules), {\n    // TODO This is a basic and limited implementation that mimics some of the functionality from the A3 module framework, but not all of it.\n    // We have to execute this in the postInit XEH because on object init, the parameters of the modules are not yet available. They are if we execute it at the start of postInit execution.\n\n    private _uniqueModulesHandled = [];\n    {\n        [_x] call {\n            params [\"_logic\"];\n            private _logicType = typeOf _logic;\n            _logic hideObject true;\n\n            if (_logic getVariable [QGVAR(initalized), false]) exitWith {};\n            private _config = (configFile >> \"CfgVehicles\" >> _logicType);\n            if !(isClass _config) exitWith {};\n\n            private _isGlobal = getNumber (_config >> \"isGlobal\") > 0;\n            private _isDisposable = getNumber (_config >> \"isDisposable\") > 0;\n            private _isPersistent = getNumber (_config >> \"isPersistent\") > 0 || getNumber (_config >> \"isGlobal\") > 1;\n            private _isSingular  = getNumber (_config >> \"isSingular\") > 0;\n            private _function = getText (_config >> \"function\");\n            if (isNil _function) then {\n                _function = compile _function;\n            } else {\n                _function = missionNamespace getVariable _function;\n            };\n            if (_isSingular && {_logicType in _uniqueModulesHandled}) then { //ToDo: should this be an exit?\n                WARNING_1(\"Module [%1] - More than 1 singular module placed\", _logicType);\n            };\n            if (_isSingular) then {_uniqueModulesHandled pushBack _logicType;};\n\n            if (_isGlobal || isServer) then {\n                [_logic, (synchronizedObjects _logic), true] call _function;\n            };\n\n            if !(_isPersistent) then {\n                _logic setVariable [QGVAR(initalized), true];\n            };\n\n            if (_isDisposable) then {\n                if (_isGlobal) then {WARNING_1(\"Deleting Global Module??? [%1]\",_logicType);};\n                deleteVehicle _logic;\n            };\n        };\n    } forEach GVAR(moduleInitCollection);\n\n    if (isServer) then {\n        GVAR(serverModulesRead) = true;\n        publicVariable QGVAR(serverModulesRead);\n    };\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(moduleInitCollection) = [];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: Glowbal\n * IV Treatment local callback\n *\n * Arguments:\n * 0: The logic object <OBJECT>\n *\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC] call ace_modules_fnc_moduleInit\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif ((_this select 0) isKindOf \"Module_F\") then {\n    GVAR(moduleInitCollection) pushBack (_this select 0);\n};\n",
        "functionName": "ace_modules_fnc_moduleInit"
      }
    ]
  },
  {
    "component": "movement",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "//by commy2\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"unit\", FUNC(handleVirtualMass)] call CBA_fnc_addPlayerEventHandler;\n[\"loadout\", FUNC(handleVirtualMass)] call CBA_fnc_addPlayerEventHandler;\n\n[\"ACE3 Movement\", QGVAR(climb), localize LSTRING(Climb), {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if (ACE_player != (vehicle ACE_player)) exitWith {false};\n\n    // Statement\n    [ACE_player] call FUNC(climb);\n    true\n},\n{false},\n[47, [false, true, false]], false] call CBA_fnc_addKeybind; //DIK_V + CTRL//STRG\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addLoadToUnitContainer.sqf",
        "content": "/*\n * Author: commy2\n * Add (negative numbers to subtract) a virtual mass to a units container.\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: The Container <OBJECT>\n * 2: The Virtual Load <NUMBER>\n *\n * Return Value:\n * Success? <BOOLEAN>\n *\n * Example:\n * [bob, box, 5] call ace_movement_fnc_addLoadToUnitContainer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_container\", objNull, [objNull]], [\"_virtualLoadToAdd\", 0, [0]]];\n\nif !(_container in [\n    _unit,\n    uniformContainer _unit,\n    vestContainer _unit,\n    backpackContainer _unit\n]) exitWith {false};\n\nprivate _virtualLoad = (_container getVariable [QGVAR(vLoad), 0]) + _virtualLoadToAdd;\n_container setVariable [QGVAR(vLoad), _virtualLoad, true];\n\n// update\n_unit call FUNC(handleVirtualMass);\n\ntrue\n",
        "functionName": "ace_movement_fnc_addLoadToUnitContainer"
      },
      {
        "fileName": "fnc_canClimb.sqf",
        "content": "/*\n * Author: commy2\n * Tests the the player can climb.\n *\n * Arguments:\n * 0: The Unit (usually the player) <OBJECT>\n *\n * Return Value:\n * The return value <BOOL>\n *\n * Example:\n * [player] call ace_movement_fnc_canClimb\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _pos = getPosASL _unit;\nprivate _dir = getDir _unit;\n\n_dir = [sin _dir, cos _dir, 0];\n\nprivate _checkPos0beg = _pos vectorAdd [0, 0, 0.9];\nprivate _checkPos0end = _checkPos0beg vectorAdd (_dir vectorMultiply 1.3);\n\nprivate _checkPos1beg = _pos vectorAdd [0, 0, 1.75];\nprivate _checkPos1end = _checkPos1beg vectorAdd (_dir vectorMultiply 1.3);\n\nprivate _checkPos2beg = _pos vectorAdd [0.3 * (_dir select 1), 0.3 * -(_dir select 0), 2.0];\nprivate _checkPos2end = _checkPos2beg vectorAdd (_dir vectorMultiply 1.3);\n\nprivate _checkPos3beg = _pos vectorAdd [-0.2 * (_dir select 1), -0.2 * -(_dir select 0), 2.0];\nprivate _checkPos3end = _checkPos3beg vectorAdd (_dir vectorMultiply 1.3);\n\nprivate _checkPos4beg = _pos vectorAdd [0.3 * (_dir select 1), 0.3 * -(_dir select 0), 1.5];\nprivate _checkPos4end = _checkPos4beg vectorAdd (_dir vectorMultiply 1.3);\n\nprivate _checkPos5beg = _pos vectorAdd [-0.2 * (_dir select 1), -0.2 * -(_dir select 0), 1.5];\nprivate _checkPos5end = _checkPos5beg vectorAdd (_dir vectorMultiply 1.3);\n\n#ifdef DEBUG_MODE_FULL\n    [{\n        params [\"_args\", \"_idPFH\"];\n\n        if (diag_tickTime > (_args select 0) + 5) exitWith {\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\n        };\n\n        drawLine3D [ASLToATL (_args select 1), ASLToATL (_args select 2), [0,1,0,1]];\n        drawLine3D [ASLToATL (_args select 3), ASLToATL (_args select 4), [1,0,0,1]];\n        drawLine3D [ASLToATL (_args select 5), ASLToATL (_args select 6), [1,0.5,0.5,1]];\n        drawLine3D [ASLToATL (_args select 7), ASLToATL (_args select 8), [1,0.5,0.5,1]];\n        drawLine3D [ASLToATL (_args select 9), ASLToATL (_args select 10), [1,0.5,0.5,1]];\n        drawLine3D [ASLToATL (_args select 11), ASLToATL (_args select 12), [1,0.5,0.5,1]];\n    }, 0, [ diag_tickTime,\n            _checkPos0beg, _checkPos0end,\n            _checkPos1beg, _checkPos1end,\n            _checkPos2beg, _checkPos2end,\n            _checkPos3beg, _checkPos3end,\n            _checkPos4beg, _checkPos4end,\n            _checkPos5beg, _checkPos5end\n    ]] call CBA_fnc_addPerFrameHandler;\n#endif\n\n      lineIntersects [_checkPos0beg, _checkPos0end]\n&& {!(lineIntersects [_checkPos1beg, _checkPos1end])}\n&& {!(lineIntersects [_checkPos2beg, _checkPos2end])}\n&& {!(lineIntersects [_checkPos3beg, _checkPos3end])}\n&& {!(lineIntersects [_checkPos4beg, _checkPos4end])}\n&& {!(lineIntersects [_checkPos5beg, _checkPos5end])}\n",
        "functionName": "ace_movement_fnc_canClimb"
      },
      {
        "fileName": "fnc_climb.sqf",
        "content": "/*\n * Author: commy2\n * Make the player climb over short walls.\n *\n * Arguments:\n * 0: The Unit (usually the player) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_movement_fnc_climb\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif !([_unit] call FUNC(canClimb)) exitWith {\n    [localize LSTRING(CanNotClimb)] call EFUNC(common,displayTextStructured);\n};\n\nif !(_unit getVariable [QGVAR(isClimbInit), false]) then {\n    _unit addEventHandler [\"AnimChanged\", {\n        if (local (_this select 0) && {_this select 1 == \"ACE_Climb\"}) then {\n            // abort climb animation\n            if !(_this call FUNC(canClimb)) then {\n                [_this select 0, \"AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\n            };\n        };\n    }];\n\n    _unit addEventHandler [\"AnimDone\", {\n        if (local (_this select 0) && {_this select 1 == \"ACE_Climb\"}) then {_this call FUNC(handleClimb)};\n    }];\n\n    _unit setVariable [QGVAR(isClimbInit), true];\n};\n\n[_unit] call EFUNC(common,fixLoweredRifleAnimation);\n[_unit, \"AmovPercMstpSnonWnonDnon\", 0] call EFUNC(common,doAnimation);\n[_unit, \"ACE_Climb\", 0] call EFUNC(common,doAnimation);\n",
        "functionName": "ace_movement_fnc_climb"
      },
      {
        "fileName": "fnc_getWeight.sqf",
        "content": "/*\n * Author: commy2\n * Returns the weight (from the loadAbs command) in lbs/kg (based on user option)\n *\n * Arguments:\n * 0: The Unit (usually the player) <OBJECT>\n *\n * Return Value:\n * The return value <NUMBER>\n *\n * Example:\n * [player] call ace_movement_fnc_getWeight\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _virtualLoad = 0;\n\n{\n    _virtualLoad = _virtualLoad + (_x getVariable [QGVAR(vLoad), 0]);\n} forEach [\n    _unit,\n    uniformContainer _unit,\n    vestContainer _unit,\n    backpackContainer _unit\n];\n\nprivate _weight = (loadAbs _unit + _virtualLoad) * 0.1;\n\nif (GVAR(useImperial)) then {\n    _weight = format [\"%1lb\", (round (_weight * 100)) / 100];\n} else {\n    _weight = format [\"%1kg\", (round (_weight * FACTOR_POUND_TO_KILOGRAMM * 100)) / 100];\n};\n\n_weight\n",
        "functionName": "ace_movement_fnc_getWeight"
      },
      {
        "fileName": "fnc_handleClimb.sqf",
        "content": "/*\n * Author: commy2\n * Handles the climb animation finishing.  Called from \"AnimDone\" event handler.\n *\n * Arguments:\n * 0: The Unit (usually the player) <OBJECT>\n * 1: The finisehd animation <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"ACE_climb\"] call ace_movement_fnc_handleClimb\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_anim\"];\n\nprivate _pos = _unit modelToWorldVisual (_unit selectionPosition \"camera\");\n\n[_unit, \"AmovPknlMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\n\n_pos = _pos vectorDiff (_unit selectionPosition \"camera\");\n\n_unit setPosASL (AGLtoASL _pos);\nTRACE_2(\"\",AGLtoASL _pos,getPosASL _unit);\n",
        "functionName": "ace_movement_fnc_handleClimb"
      },
      {
        "fileName": "fnc_handleVirtualMass.sqf",
        "content": "/*\n * Author: commy2\n * Recalculate the units loadCoef to emulate a mass added to uniform, vest or backpack.\n *\n * Arguments:\n * 0: The Unit (usually the player) <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_movement_fnc_handleVirtualMass\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (isNull _unit) exitWith {};\n\n// add sum of virtual loads\nprivate _virtualLoad = 0;\n\n{\n    _virtualLoad = _virtualLoad + (_x getVariable [QGVAR(vLoad), 0]);\n} forEach [\n    _unit,\n    uniformContainer _unit,\n    vestContainer _unit,\n    backpackContainer _unit\n];\n\n_unit setVariable [QGVAR(totalLoad), (loadAbs _unit + _virtualLoad)];\n\n// get absolute vanilla load\nprivate _absLoad = getNumber (configFile >> \"CfgInventoryGlobalVariable\" >> \"maxSoldierLoad\");\n\n// try to preserve other changes to the \"LoadCoef\" unitTrait\nprivate _loadCoef = _unit getVariable QGVAR(loadCoef);\n\nif (isNil \"_loadCoef\") then {\n    _loadCoef = _unit getUnitTrait \"loadCoef\";\n    _unit setVariable [QGVAR(loadCoef), _loadCoef, true];\n};\n\n// calc. new \"virtual\" loadCoef\nprivate _virtualLoadCoef = (1 + _virtualLoad / _absLoad) * _loadCoef;\n\n_unit setUnitTrait [\"loadCoef\", _virtualLoadCoef];\n",
        "functionName": "ace_movement_fnc_handleVirtualMass"
      },
      {
        "fileName": "fnc_inventoryDisplayLoad.sqf",
        "content": "/*\n * Author: commy2\n * Executed every time an inventory display is opened.\n *\n * Arguments:\n * 0: Inventory display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [DISPLAY] call ACE_movement_fnc_inventoryDisplayLoad\n *\n * Public: No\n */\n #include \"script_component.hpp\"\n\ndisableSerialization;\n\n[{\n    disableSerialization;\n    params [\"_dialog\"];\n\n    if (isNull _dialog) exitWith {\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    (_dialog displayCtrl 111) ctrlSetText format [\"%1 - %2 %3\", [ACE_player, false, true] call EFUNC(common,getName), localize LSTRING(Weight), [ACE_player] call FUNC(getWeight)];\n}, 0, _this select 0] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_movement_fnc_inventoryDisplayLoad"
      }
    ]
  },
  {
    "component": "mx2a",
    "files": [],
    "functions": []
  },
  {
    "component": "nametags",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2 and esteldunedain\n#include \"script_component.hpp\"\n\n[] call FUNC(initIsSpeaking);\n\nif (!hasInterface) exitWith {};\n\nGVAR(showNamesTime) = -10;\n\n// Add keybinds\n[\"ACE3 Common\", QGVAR(showNameTags), localize LSTRING(ShowNames),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {false};\n\n    // Statement\n    GVAR(showNamesTime) = CBA_missionTime;\n    // if (call FUNC(canShow)) then{ call FUNC(doShow); }; // This code doesn't work (canShow has a nil / has never worked??)\n    // Return false so it doesn't block other actions\n    false\n},\n{false},\n[29, [false, false, false]], false] call CBA_fnc_addKeybind; //LeftControl Key\n\n// Wait until the colors are defined before starting to draw the nametags\n[\"ace_settingsInitialized\", {\n    // Draw handle\n    call FUNC(updateSettings);\n}] call CBA_fnc_addEventHandler;\n\n// Change settings accordingly when they are changed\n[\"ace_settingChanged\", {\n    params [\"_name\"];\n    if (_name == QGVAR(showPlayerNames)) then {\n        call FUNC(updateSettings);\n    };\n    // Reset nametag flag cache on setting change:\n    ACE_player setVariable [QGVAR(flagsCache), nil];\n}] call CBA_fnc_addEventHandler;\n\n[\"cba_events_visionModeEvent\", {\n    // Reset nametag flag cache on vision mode change:\n    ACE_player setVariable [QGVAR(flagsCache), nil];\n}] call CBA_fnc_addEventHandler;\n\n// civilians don't use military ranks\n[\"CIV_F\", [\"\",\"\",\"\",\"\",\"\",\"\",\"\"]] call FUNC(setFactionRankIcons);\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canShow.sqf",
        "content": "/*\n * Author: aeroson\n * Checks if crew info can be shown.\n * Might be called several times a second.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Can show Crew Info <BOOL>\n *\n * Example:\n * call ace_nametags_fnc_canShow\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n((vehicle ACE_player) != ACE_player) &&\n{GVAR(ShowCrewInfo)} &&\n{!(vehicle ACE_player isKindOf \"ParachuteBase\")};\n",
        "functionName": "ace_nametags_fnc_canShow"
      },
      {
        "fileName": "fnc_doShow.sqf",
        "content": "/*\n * Author: aeroson\n * Shows the actual text and sets text the crew info.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_nametags_fnc_doShow\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n#include \"common.hpp\"\n\nprivate _player = ACE_player;\nprivate _vehicle = vehicle _player;\nprivate _type = typeOf _vehicle;\nprivate _config = configFile >> \"CfgVehicles\" >> _type;\nprivate _text = format[\"<t size='1.4'><img image='%1'></t> <t size='1.7' shadow='true'>%2</t><br/>\", getText(_config>>\"picture\"), getText (_config >> \"DisplayName\")];\n\nprivate _data = [_type] call FUNC(getVehicleData);\n\nprivate _isAir = _data select 0;\nprivate _data = _data select 1;\n\nprivate _turretUnits = _data apply {_vehicle turretUnit (_x select 0)};\nprivate _turretRoles = _data apply {_x select 1};\n\nprivate _roleType = CARGO;\nprivate _toShow = [];\n{\n    switch (_x) do {\n        case commander _vehicle: {\n            _roleType = COMMANDER;\n        };\n        case gunner _vehicle: {\n            _roleType = GUNNER;\n        };\n        case driver _vehicle: {\n            _roleType = if(_isAir) then { PILOT } else { DRIVER };\n        };\n        default {\n            _index = _turretUnits find _x;\n            if(_index !=-1 ) then {\n                _roleType = _turretRoles select _index;\n            } else {\n                _roleType = CARGO;\n            };\n        };\n    };\n    _toShow pushBack [_x, _roleType];\n} forEach crew _vehicle;\n\n_toShow = [\n    _toShow,\n    [],\n    {\n        _x select 1\n    },\n    \"ASCEND\",\n    {\n        _unit = _x select 0;\n        alive _unit\n    }\n] call BIS_fnc_sortBy;\n\nprivate _roleImages = ROLE_IMAGES;\n{\n    private _unit = _x select 0;\n    private _roleType = _x select 1;\n    _text = _text + format[\"<t size='1.5' shadow='true'>%1</t> <t size='1.3'><img image='%2'></t><br/>\", [_unit] call EFUNC(common,getName), _roleImages select _roleType];\n} forEach _toShow;\n\n(\"ACE_CrewInfo_CrewInfo\" call BIS_fnc_rscLayer) cutRsc [\"ACE_CrewInfo_dialog\", \"PLAIN\", 1, false];\n\nterminate (missionNamespace getVariable [QGVAR(hideCrewInfoHandle), scriptNull]);\nGVAR(hideCrewInfoHandle) = 0 spawn {\n    sleep 2;\n    (\"ACE_CrewInfo_CrewInfo\" call BIS_fnc_rscLayer) cutFadeOut 2;\n};\n\n[_text] call FUNC(setText);\n",
        "functionName": "ace_nametags_fnc_doShow"
      },
      {
        "fileName": "fnc_drawNameTagIcon.sqf",
        "content": "/*\n * Author: commy2, esteldunedain\n * Draw the nametag and rank icon.\n *\n * Arguments:\n * 0: Unit (Player) <OBJECT>\n * 1: Target <OBJECT>\n * 2: Alpha <NUMBER>\n * 4: Height offset <NUMBER>\n * 5: Draw name <BOOL>\n * 5: Draw rank <BOOL>\n * 6: Draw soundwave <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, bob, 0.5, height, true, true, true] call ace_nametags_fnc_drawNameTagIcon\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nTRACE_1(\"drawName:\", _this);\n\nparams [\"\", \"_target\", \"\", \"_heightOffset\"];\n\n_fnc_parameters = {\n    params [\"_player\", \"_target\", \"_alpha\", \"_heightOffset\", \"_drawName\", \"_drawRank\", \"_drawSoundwave\"];\n\n    //Set Icon:\n    private _icon = \"\";\n    private _size = 0;\n    if (_drawSoundwave) then {\n        _icon = format [QPATHTOF(UI\\soundwave%1.paa), floor random 10];\n        _size = 1;\n    } else {\n        if (_drawRank && {rank _target != \"\"}) then {\n            _icon = GVAR(factionRanks) getVariable (_target getVariable [QGVAR(faction), faction _target]);\n            if (!isNil \"_icon\") then {\n                _icon = _icon param [ALL_RANKS find rank _target, \"\"];\n            } else {\n                _icon = format [\"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\%1_gs.paa\", rank _target];\n            };\n            _size = 1;\n        };\n    };\n\n    //Set Text:\n    private _name = if (_drawName) then {\n        [_target, true, true] call EFUNC(common,getName)\n    } else {\n        \"\"\n    };\n\n    //Set Color:\n    private _color = [1, 1, 1, _alpha];\n    if ((group _target) != (group _player)) then {\n        _color = +GVAR(defaultNametagColor); //Make a copy, then multiply both alpha values (allows client to decrease alpha in settings)\n        _color set [3, (_color select 3) * _alpha];\n    } else {\n        _color = [[1, 1, 1, _alpha], [1, 0, 0, _alpha], [0, 1, 0, _alpha], [0, 0, 1, _alpha], [1, 1, 0, _alpha]] select (([\"MAIN\", \"RED\", \"GREEN\", \"BLUE\", \"YELLOW\"] find ([assignedTeam _target] param [0, \"MAIN\"])) max 0);\n    };\n\n    private _scale = [0.333, 0.5, 0.666, 0.83333, 1] select GVAR(tagSize);\n\n    [\n        _icon,\n        _color,\n        [],\n        (_size * _scale),\n        (_size * _scale),\n        0,\n        _name,\n        2,\n        (0.05 * _scale),\n        \"RobotoCondensed\"\n    ]\n};\n\nprivate _parameters = [_this, _fnc_parameters, _target, QGVAR(drawParameters), 0.1] call EFUNC(common,cachedCall);\n_parameters set [2, _target modelToWorldVisual ((_target selectionPosition \"pilot\") vectorAdd [0,0,(_heightOffset + .3)])];\n\n\ndrawIcon3D _parameters;\n",
        "functionName": "ace_nametags_fnc_drawNameTagIcon"
      },
      {
        "fileName": "fnc_getCachedFlags.sqf",
        "content": "/*\n * Author: <N/A>\n * Get's flags used for onDraw3D that can be cached\n *\n * Arguments:\n * None\n *\n * Return Value:\n * [_drawName,_drawRank,_enabledTagsNearby,_enabledTagsCursor,_maxDistance] <ARRAY>\n *\n * Example:\n * call ace_nametags_fnc_getCachedFlags\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Determine flags from current settings\nprivate _drawName = true;\nprivate _enabledTagsNearby = false;\nprivate _enabledTagsCursor = false;\n\nswitch (GVAR(showPlayerNames)) do {\n    case 0: {\n        // Player names Disabled [Note: this should be unreachable as the drawEH will be removed]\n        _drawName = false;\n        _enabledTagsNearby = (GVAR(showSoundWaves) == 2);\n    };\n    case 1: {\n        // Player names Enabled\n        _enabledTagsNearby = true;\n    };\n    case 2: {\n        // Player names Only cursor\n        _enabledTagsNearby = (GVAR(showSoundWaves) == 2);\n        _enabledTagsCursor = true;\n    };\n    case 3: {\n        // Player names Only Keypress\n        _enabledTagsNearby = GVAR(showSoundWaves) == 2; // non-cached: || _onKeyPressAlphaMax) > 0\n    };\n    case 4: {\n        // Player names Only Cursor and Keypress\n        _enabledTagsNearby = (GVAR(showSoundWaves) == 2);\n        // non-cached: _enabledTagsCursor = _onKeyPressAlphaMax > 0;\n    };\n    case 5: {\n        // Fade on border\n        _enabledTagsNearby = true;\n    };\n};\n\nprivate _ambientBrightness = ((([] call EFUNC(common,ambientBrightness)) + ([0, 0.4] select ((currentVisionMode ace_player) != 0))) min 1) max 0;\nprivate _maxDistance = _ambientBrightness * GVAR(PlayerNamesViewDistance);\n\n[_drawName, GVAR(showPlayerRanks),_enabledTagsNearby,_enabledTagsCursor,_maxDistance]\n",
        "functionName": "ace_nametags_fnc_getCachedFlags"
      },
      {
        "fileName": "fnc_getVehicleData.sqf",
        "content": "/*\n * Author: aeroson\n * Gathers and caches data needed by ace_nametags_fnc_doShow.\n * What really does make difference for the engine is simulation of CfgAmmo.\n * Priority of roles  is: driver/pilot, gunner, copilot, commander, FFV, cargo.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Data <ARRAY>\n * 0: Vehicle inherits from Air <BOOL>\n * 1: Categorized vehicle's turrets <ARRAY>\n *\n * Example:\n * call ace_nametags_fnc_updateSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n#include \"common.hpp\"\n\nparams [\"_type\"];\n\nprivate _varName = format [\"ACE_CrewInfo_Cache_%1\", _type];\nprivate _data = + (uiNamespace getVariable _varName);\n\nif (!isNil \"_data\") exitWith {_data};\n\n_data = [];\nprivate _isAir = _type isKindOf \"Air\";\n\nprivate _fnc_addTurretUnit = {\n    params [\"_config\", \"_path\"];\n    private _role = CARGO;\n\n    private _simulationEmpty = 0;\n    private _simulationLaserDesignate = 0;\n    private _simulationOther = 0;\n    {\n        {\n            private _magazine = configFile >> \"CfgMagazines\" >> _x;\n            private _ammo = configFile >> \"CfgAmmo\" >> getText (_magazine >> \"ammo\");\n            private _simulation = getText (_ammo >> \"simulation\");\n\n            if(_simulation==\"\") then {\n                _simulationEmpty = _simulationEmpty + 1;\n            } else {\n                if(_simulation==\"laserDesignate\") then {\n                    _simulationLaserDesignate = _simulationLaserDesignate + 1;\n                } else {\n                    _simulationOther = _simulationOther + 1;\n                };\n            };\n\n        } forEach getArray (configFile >> \"CfgWeapons\" >> _x >> \"magazines\");\n    } forEach getArray (_config >> \"weapons\");\n\n    if(_simulationOther>0) then {\n        _role = GUNNER;\n    };\n    if (_role == CARGO && {getNumber (_config >> \"isCopilot\") == 1}) then {\n        _role = COPILOT;\n    };\n    if (_role == CARGO && {_simulationLaserDesignate>0 || getNumber (_config >> \"primaryObserver\") == 1}) then {\n        _role = COMMANDER;\n    };\n    if (_role == CARGO && {getNumber (_config >> \"isPersonTurret\") == 1}) then {\n        _role = FFV;\n    };\n\n    _data pushBack [_path, _role];  \n};\n\n\nprivate _fnc_addTurret = {\n    params [\"_config\", \"_path\"];\n\n    _config = _config >> \"Turrets\";\n    private _count = count _config;\n\n    private _offset = 0;\n\n    for \"_index\" from 0 to (_count - 1) do {\n        private _turretPath = _path + [_index - _offset];\n        private _turretConfig = _config select _index;\n        if (isClass _turretConfig) then {           \n            [_turretConfig, _turretPath] call _fnc_addTurretUnit;\n            [_turretConfig, _turretPath] call _fnc_addTurret;\n        } else {\n            _offset = _offset + 1;\n        };\n    };\n};\n\n\n_config = configFile >> \"CfgVehicles\" >> _type;\n[_config, []] call _fnc_addTurret;\n\n_data = [_isAir, _data];\nuiNamespace setVariable [_varName, _data];\n\n_data\n",
        "functionName": "ace_nametags_fnc_getVehicleData"
      },
      {
        "fileName": "fnc_initIsSpeaking.sqf",
        "content": "/*\n * Author: Glowbal, PabstMirror\n * Starts up a PFEH to monitor the when players are talking.\n * Compatiblity with TFR/ACRE and Arma's VON\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_nametags_fnc_initIsSpeaking\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (isServer) then {\n    //If someone disconnects while speaking, reset their variable\n    addMissionEventHandler [\"HandleDisconnect\", {\n        params [\"_disconnectedPlayer\"];\n        if (_disconnectedPlayer getVariable [QGVAR(isSpeakingInGame), false]) then {\n            _disconnectedPlayer setVariable [QGVAR(isSpeakingInGame), false, true];\n        };\n    }];\n};\n\nif (!hasInterface) exitWith {};\n\n[\"unit\", {\n    //When player changes, make sure to reset old unit's variable\n    params [\"\", \"_oldUnit\"];\n    if ((!isNull _oldUnit) && {_oldUnit getVariable [QGVAR(isSpeakingInGame), false]}) then {\n        _oldUnit setVariable [QGVAR(isSpeakingInGame), false, true];\n    };\n}] call CBA_fnc_addPlayerEventHandler;\n\nif (isClass (configFile >> \"CfgPatches\" >> \"acre_api\")) then {\n    INFO(\"ACRE Detected.\");\n    DFUNC(isSpeaking) = {\n        params [\"_unit\"];\n        ([_unit] call acre_api_fnc_isSpeaking) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\n    };\n} else {\n    if (isClass (configFile >> \"CfgPatches\" >> \"task_force_radio\")) then {\n        INFO(\"TFR Detected.\");\n        DFUNC(isSpeaking) =     {\n            params [\"_unit\"];\n            (_unit getVariable [\"tf_isSpeaking\", false]) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\n        };\n    } else {\n        //No Radio Mod - Start a PFEH to watch the internal VON icon\n        //Note: class RscDisplayVoiceChat {idd = 55} - only present when talking\n\n        [{\n            private _oldSetting = ACE_player getVariable [QGVAR(isSpeakingInGame), false];\n            private _newSetting = (!(isNull findDisplay 55));\n            if (!(_oldSetting isEqualTo _newSetting)) then {\n                ACE_player setVariable [QGVAR(isSpeakingInGame), _newSetting, true];\n            };\n        } , 0.1, []] call CBA_fnc_addPerFrameHandler;\n\n        DFUNC(isSpeaking) = {\n            params [\"_unit\"];\n            (_unit getVariable [QGVAR(isSpeakingInGame), false]) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\n        };\n    };\n};\n",
        "functionName": "ace_nametags_fnc_initIsSpeaking"
      },
      {
        "fileName": "fnc_moduleNameTags.sqf",
        "content": "/*\n * Author: esteldunedain\n * Initializes the name tags module.\n *\n * Arguments:\n * Whatever the module provides.\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_nametags_fnc_moduleNameTags\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\nGVAR(Module) = true;\n\n[_logic, QGVAR(playerNamesViewDistance),  \"playerNamesViewDistance\"     ] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(showCursorTagForVehicles), \"showCursorTagForVehicles\"    ] call EFUNC(common,readSettingFromModule);\n\n// Do Not Force - read module setting only non-default is set due to using SCALAR\nif ((_logic getVariable \"showPlayerNames\") != -1) then {\n    [_logic, QGVAR(showPlayerNames),      \"showPlayerNames\"             ] call EFUNC(common,readSettingFromModule);\n};\nif ((_logic getVariable \"showNamesForAI\") != -1) then {\n    [_logic, QGVAR(showNamesForAI),      \"showNamesForAI\"             ] call EFUNC(common,readSettingFromModule);\n};\nif ((_logic getVariable \"showVehicleCrewInfo\") != -1) then {\n    [_logic, QGVAR(showVehicleCrewInfo),  \"showVehicleCrewInfo\"         ] call EFUNC(common,readSettingFromModule);\n};\n\nINFO(\"Nametags Module Initialized.\");\n",
        "functionName": "ace_nametags_fnc_moduleNameTags"
      },
      {
        "fileName": "fnc_onDraw3d.sqf",
        "content": "/*\n * Author: <N/A>\n * Draws names and icons.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_nametags_fnc_onDraw3d\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(GVAR(onDraw3d));\n\n// Don't show nametags in spectator or if RscDisplayMPInterrupt is open\nif ((isNull ACE_player) || {!alive ACE_player} || {!isNull (findDisplay 49)}) exitWith {};\n\nprivate _flags = [[], DFUNC(getCachedFlags), ACE_player, QGVAR(flagsCache), 2] call EFUNC(common,cachedCall);\n\n_flags params [\"_drawName\", \"_drawRank\", \"_enabledTagsNearby\", \"_enabledTagsCursor\", \"_maxDistance\"];\n\nprivate _onKeyPressAlphaMax = 1;\nif (GVAR(showPlayerNames) == 3) then {\n    _onKeyPressAlphaMax = 2 + (GVAR(showNamesTime) - CBA_missionTime);\n    _enabledTagsNearby = _enabledTagsNearby || {_onKeyPressAlphaMax > 0}\n};\nif (GVAR(showPlayerNames) == 4) then {\n    _onKeyPressAlphaMax = 2 + (GVAR(showNamesTime) - CBA_missionTime);\n    _enabledTagsCursor = _onKeyPressAlphaMax > 0;\n};\n\nprivate _camPosAGL = positionCameraToWorld [0, 0, 0];\nif !((_camPosAGL select 0) isEqualType 0) exitWith {}; // handle RHS / bugged vehicle slots\n\nprivate _camPosASL = AGLtoASL _camPosAGL;\n\n// Show nametag for the unit behind the cursor or its commander\nif (_enabledTagsCursor) then {\n    private _target = cursorTarget;\n    if !(_target isKindOf \"CAManBase\") then {\n        // When cursorTarget is on a vehicle show the nametag for the commander.\n        if !(_target in allUnitsUAV) then {\n            _target = effectiveCommander _target;\n        } else {\n            _target = objNull;\n        };\n    };\n    if (isNull _target) exitWith {};\n\n    if (_target != ACE_player &&\n        {(side group _target) == (side group ACE_player)} &&\n        {GVAR(showNamesForAI) || {[_target] call EFUNC(common,isPlayer)}} &&\n        {lineIntersectsSurfaces [_camPosASL, eyePos _target, ACE_player, _target] isEqualTo []} &&\n        {!isObjectHidden _target}) then {\n\n        private _distance = ACE_player distance _target;\n\n        private _drawSoundwave = (GVAR(showSoundWaves) > 0) && {[_target] call FUNC(isSpeaking)};\n        // Alpha:\n        // - base value determined by GVAR(playerNamesMaxAlpha)\n        // - decreases when _distance > _maxDistance\n        // - increases when the unit is speaking\n        // - it's clamped by the value of _onKeyPressAlphaMax\n        private _alpha = (((1 + ([0, 0.2] select _drawSoundwave) - 0.2 * (_distance - _maxDistance)) min 1) * GVAR(playerNamesMaxAlpha)) min _onKeyPressAlphaMax;\n\n        if (_alpha > 0) then {\n            [ACE_player, _target, _alpha, _distance * 0.026, _drawName, _drawRank, _drawSoundwave] call FUNC(drawNameTagIcon);\n        };\n    };\n};\n\n// Show nametags for nearby units\nif (_enabledTagsNearby) then {\n    // Find valid targets and cache them\n    private _targets = [[], {\n        private _nearMen = _camPosAGL nearObjects [\"CAManBase\", _maxDistance + 7];\n        _nearMen = _nearMen select {\n            _x != ACE_player &&\n            {(side group _x) == (side group ACE_player)} &&\n            {GVAR(showNamesForAI) || {[_x] call EFUNC(common,isPlayer)}} &&\n            {lineIntersectsSurfaces [_camPosASL, eyePos _x, ACE_player, _x] isEqualTo []} &&\n            {!isObjectHidden _x}\n        };\n        private _crewMen = [];\n        if (vehicle ACE_player != ACE_player) then {\n            _crewMen = (crew vehicle ACE_player) select {\n                _x != ACE_player &&\n                {(side group _x) == (side group ACE_player)} &&\n                {GVAR(showNamesForAI) || {[_x] call EFUNC(common,isPlayer)}} &&\n                {lineIntersectsSurfaces [_camPosASL, eyePos _x, ACE_player, _x, true, 1, \"GEOM\", \"NONE\"] isEqualTo []} &&\n                {!isObjectHidden _x}\n            };\n        };\n        (_nearMen + _crewMen)\n    }, missionNamespace, QGVAR(nearMen), 0.5] call EFUNC(common,cachedCall);\n\n    {\n        private _target = _x;\n\n        if !(isNull _target) then {\n            private _drawSoundwave = (GVAR(showSoundWaves) > 0) && {[_target] call FUNC(isSpeaking)};\n            if (_enabledTagsCursor && {!_drawSoundwave}) exitWith {}; // (Cursor Only && showSoundWaves==2) - quick exit\n\n            private _relPos = (visiblePositionASL _target) vectorDiff _camPosASL;\n            private _distance = vectorMagnitude _relPos;\n\n            // Fade on border\n            private _centerOffsetFactor = 1;\n            if (GVAR(showPlayerNames) == 5) then {\n                private _screenPos = worldToScreen (_target modelToWorld (_target selectionPosition \"head\"));\n                if !(_screenPos isEqualTo []) then {\n                    // Distance from center / half of screen width\n                    _centerOffsetFactor = 1 - ((_screenPos distance2D [0.5, 0.5]) / (safezoneW / 3));\n                } else {\n                    _centerOffsetFactor = 0;\n                };\n            };\n\n            private _alphaMax = _onKeyPressAlphaMax;\n            if ((GVAR(showSoundWaves) == 2) && _drawSoundwave) then {\n                _drawName = _drawSoundwave;\n                _drawRank = false;\n                _alphaMax = 1;\n            };\n            // Alpha:\n            // - base value determined by GVAR(playerNamesMaxAlpha)\n            // - decreases when _distance > _maxDistance\n            // - increases when the unit is speaking\n            // - it's clamped by the value of _onKeyPressAlphaMax unless soundwaves are forced on and the unit is talking\n            private _alpha = (((1 + ([0, 0.2] select _drawSoundwave) - 0.2 * (_distance - _maxDistance)) min 1) * GVAR(playerNamesMaxAlpha) * _centerOffsetFactor) min _alphaMax;\n\n            if (_alpha > 0) then {\n                [ACE_player, _target, _alpha, _distance * 0.026, _drawName, _drawRank, _drawSoundwave] call FUNC(drawNameTagIcon);\n            };\n        };\n        nil\n    } count _targets;\n};\n\nEND_COUNTER(GVAR(onDraw3d));\n",
        "functionName": "ace_nametags_fnc_onDraw3d"
      },
      {
        "fileName": "fnc_setFactionRankIcons.sqf",
        "content": "/*\n * Author: commy2\n * Sets a custom set of icons for a specified faction.\n *\n * Arguments:\n * 0: Faction <STRING>\n * 1: Rank Icons <ARRAY>\n *\n * Return Value:\n * Successful? <BOOLEAN>\n *\n * Example:\n * [\"BLU_F\", [\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\private_gs.paa\",\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\corporal_gs.paa\",\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\sergeant_gs.paa\",\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\lieutenant_gs.paa\",\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\captain_gs.paa\",\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\major_gs.paa\",\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\colonel_gs.paa\"\n * ]] call ace_nametags_fnc_setFactionRankIcons\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (isNil QGVAR(factionRanks)) then {\n    GVAR(factionRanks) = [] call CBA_fnc_createNamespace;\n};\n\nparams [[\"_faction\", \"\", [\"\"]], [\"_icons\", [], [[]], [7]]];\n\nif !(_faction != \"\" && {_icons isEqualTypeAll \"\"}) exitWith {false};\n\nGVAR(factionRanks) setVariable [_faction, _icons];\n\ntrue\n",
        "functionName": "ace_nametags_fnc_setFactionRankIcons"
      },
      {
        "fileName": "fnc_setText.sqf",
        "content": "/*\n * Author: aeroson\n * Sets the text on the dialog.\n *\n * Arguments:\n * 0: Text <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_nametags_fnc_setText\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define TextIDC 11123\n\nparams [\"_text\"];\n\ndisableSerialization;\n\nprivate _ctrl = (uiNamespace getVariable QGVAR(dialog)) displayCtrl TextIDC;\n_ctrl ctrlSetStructuredText parseText _text;\n_ctrl ctrlCommit 0;\n",
        "functionName": "ace_nametags_fnc_setText"
      },
      {
        "fileName": "fnc_updateSettings.sqf",
        "content": "/*\n * Author: Jonpas\n * Dynamically adds and removes Draw3D based on settings on run-time.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_nametags_fnc_updateSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (isNil QGVAR(drawHandler) && {GVAR(showPlayerNames) != 0}) then {\n    GVAR(drawHandler) = addMissionEventHandler [\"Draw3D\", {_this call FUNC(onDraw3d);}];\n} else {\n    if (!isNil QGVAR(drawHandler) && {GVAR(showPlayerNames) == 0}) then {\n        removeMissionEventHandler [\"Draw3D\", GVAR(drawHandler)];\n        GVAR(drawHandler) = nil;\n    };\n};\n",
        "functionName": "ace_nametags_fnc_updateSettings"
      }
    ]
  },
  {
    "component": "nightvision",
    "files": [
      {
        "fileName": "XEH_postInitClient.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(ppEffectBlur) = ppEffectCreate [\"dynamicBlur\", 1234];\nGVAR(ppEffectBlur) ppEffectForceInNVG true;\nGVAR(ppEffectBlur) ppEffectAdjust [0];\nGVAR(ppEffectBlur) ppEffectCommit 0;\n\nGVAR(ppEffectRadialBlur) = ppEffectCreate [\"radialBlur\", 1238];\nGVAR(ppEffectRadialBlur) ppEffectForceInNVG true;\nGVAR(ppEffectRadialBlur) ppEffectAdjust [0, 0, 0, 0];\nGVAR(ppEffectRadialBlur) ppEffectCommit 0;\n\nGVAR(ppEffectFilmGrain) = ppEffectCreate [\"FilmGrain\", 1235];\nGVAR(ppEffectFilmGrain) ppEffectAdjust [0.25, 2.5, 2.5, 2.5*0.3, 2.5*0.3, false];\nGVAR(ppEffectFilmGrain) ppEffectCommit 0;\n\nGVAR(ppEffectNVGBrightness) = ppEffectCreate [\"ColorCorrections\", 1236];\nGVAR(ppEffectNVGBrightness) ppEffectForceInNVG true;\nGVAR(ppEffectNVGBrightness) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\nGVAR(ppEffectNVGBrightness) ppEffectCommit 0;\n\nGVAR(ppEffectMuzzleFlash) = ppEffectCreate [\"ColorCorrections\", 1237];\nGVAR(ppEffectMuzzleFlash) ppEffectEnable true;\nGVAR(ppEffectMuzzleFlash) ppEffectForceInNVG true;\nGVAR(ppEffectMuzzleFlash) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\nGVAR(ppEffectMuzzleFlash) ppEffectCommit 0;\n\n// Setup the event handlers\n[\"loadout\", FUNC(updatePPEffects)] call CBA_fnc_addPlayerEventHandler;\n[\"visionMode\", FUNC(updatePPEffects)] call CBA_fnc_addPlayerEventHandler;\n[\"visionMode\", FUNC(onVisionModeChanged)] call CBA_fnc_addPlayerEventHandler;\n[\"cameraView\", FUNC(updatePPEffects)] call CBA_fnc_addPlayerEventHandler;\n[\"cameraView\", FUNC(onCameraViewChanged)] call CBA_fnc_addPlayerEventHandler;\n[\"vehicle\", FUNC(updatePPEffects)] call CBA_fnc_addPlayerEventHandler;\n[\"turret\", FUNC(updatePPEffects)] call CBA_fnc_addPlayerEventHandler;\n\n// Add keybinds\n[\"ACE3 Equipment\", QGVAR(IncreaseNVGBrightness), localize LSTRING(IncreaseNVGBrightness), {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotEscorting\", \"isNotInside\", \"isNotSitting\", \"isNotRefueling\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if ((currentVisionMode ACE_player != 1)) exitWith {false};\n\n    // Statement\n    [ACE_player, 1] call FUNC(changeNVGBrightness);\n    true\n}, {false}, [201, [false, false, true]], false] call CBA_fnc_addKeybind; //PageUp + ALT\n\n[\"ACE3 Equipment\", QGVAR(DecreaseNVGBrightness), localize LSTRING(DecreaseNVGBrightness), {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotEscorting\", \"isNotInside\", \"isNotSitting\", \"isNotRefueling\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if ((currentVisionMode ACE_player != 1)) exitWith {false};\n\n    // Statement\n    [ACE_player, -1] call FUNC(changeNVGBrightness);\n    true\n}, {false}, [209, [false, false, true]], false] call CBA_fnc_addKeybind; //PageDown + ALT\n\n// Register fire event handler\n[\"ace_firedPlayer\", DFUNC(blending)] call CBA_fnc_addEventHandler;\n[\"ace_firedPlayerVehicle\", DFUNC(blending)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_blending.sqf",
        "content": "/*\n * Author: commy2\n * Change the blending when the player fires??. Called from the unified fired EH only for the local player and his vehicle.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * Noneg\n *\n * Example:\n * [clientFiredBIS-XEH] call ace_nightvision_fnc_blending\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nprivate _player = ACE_player;\n\n//If we're not in NVG mode, or it's a grenade, exit\nif (currentVisionMode _player != 1 || {toLower _weapon in [\"throw\", \"put\"]}) exitWith {};\n\nprivate _silencer = _player weaponAccessories _weapon select 0;\n\nprivate _visibleFireCoef = 1;\nprivate _visibleFireTimeCoef = 1;\n\nif (_silencer != \"\") then {\n    _visibleFireCoef = getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"visibleFire\");\n    _visibleFireTimeCoef = getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"visibleFireTime\");\n};\n\nprivate _visibleFire = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"visibleFire\");\nprivate _visibleFireTime = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"visibleFireTime\");\n\nprivate _fnc_isTracer = {\n    if (getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"nvgOnly\") > 0) exitWith {false};\n\n    private _indexShot = (_player ammo _weapon) + 1;\n\n    private _lastRoundsTracer = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"lastRoundsTracer\");\n    if (_indexShot <= _lastRoundsTracer) exitWith {true};\n\n    private _tracersEvery = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"tracersEvery\");\n    if (_tracersEvery == 0) exitWith {false};\n\n    (_indexShot - _lastRoundsTracer) % _tracersEvery == 0\n};\n\nif (call _fnc_isTracer) then {\n    _visibleFire = _visibleFire + 2;\n    _visibleFireTime = _visibleFireTime + 2;\n};\n\nprivate _darkness = 1 - (call EFUNC(common,ambientBrightness));\nprivate _nvgBrightnessCoef = 1 + (_player getVariable [QGVAR(NVGBrightness), 0]) / 4;\n\n_visibleFire = _darkness * _visibleFireCoef * _visibleFire * _nvgBrightnessCoef / 10 min 1;\n_visibleFireTime = _darkness * _visibleFireTimeCoef * _visibleFireTime * _nvgBrightnessCoef / 10 min 0.5;\n\nTRACE_2(\"Player Shot, Adjusting NVG Effect\", _visibleFire, _visibleFireTime);\n\nGVAR(ppEffectMuzzleFlash) ppEffectAdjust [1, 1, _visibleFire, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\nGVAR(ppEffectMuzzleFlash) ppEffectCommit 0;\n\nGVAR(ppEffectMuzzleFlash) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\nGVAR(ppEffectMuzzleFlash) ppEffectCommit _visibleFireTime;\n",
        "functionName": "ace_nightvision_fnc_blending"
      },
      {
        "fileName": "fnc_changeNVGBrightness.sqf",
        "content": "/*\n * Author: commy2\n * Change the brightness of the unit's NVG\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n * 1: Change in brightness (1 or -1) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, 1] call ace_nightvision_fnc_changeNVGBrightness\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_changeInBrightness\"];\nTRACE_2(\"params\",_player,_changeInBrightness);\n\nif (!hasInterface) exitWith {};\n\nprivate _brightness = _player getVariable [QGVAR(NVGBrightness), 0];\n\n_brightness = ((round (10 * _brightness + _changeInBrightness) / 10) min 0.5) max -0.5;\n\n_player setVariable [QGVAR(NVGBrightness), _brightness, false];\n\nGVAR(ppEffectNVGBrightness) ppEffectAdjust [1, (_brightness + 1), 0, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\nGVAR(ppEffectNVGBrightness) ppEffectCommit 0;\n\n[format [(localize LSTRING(NVGBrightness)), (_brightness * 10)]] call EFUNC(common,displayTextStructured);\nplaySound \"ACE_Sound_Click\";\n",
        "functionName": "ace_nightvision_fnc_changeNVGBrightness"
      },
      {
        "fileName": "fnc_initModule.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Initializes the settings for the disable NVGs in sight module.\n *\n * Arguments:\n * 0: Module <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_module] call ace_nightvision_fnc_initModule\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_module\"];\n\n[_module, QGVAR(disableNVGsWithSights), \"disableNVGsWithSights\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_nightvision_fnc_initModule"
      },
      {
        "fileName": "fnc_onCameraViewChanged.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Disables/re-enables NVGs when the player starts/stops aiming down his sight.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: New camera view <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"GUNNER\"] call ace_nightvision_fnc_onCameraViewChanged\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_cameraView\"];\n\nif (GVAR(disableNVGsWithSights) && {(hmd _unit) != \"\"}) then {\n    if ((vehicle _unit == _unit)\n        || {isTurnedOut _unit}\n        || {!([_unit] call EFUNC(common,hasHatch))\n            && {[_unit] call EFUNC(common,getTurretIndex) in ([vehicle _unit] call EFUNC(common,getTurretsFFV))}\n           }) then {\n        if ((_cameraView == \"GUNNER\") && {currentVisionMode _unit == 1}) then {\n            _unit action [\"NVGogglesOff\", _unit];\n            _unit setVariable [QGVAR(reenableNVGs), true];\n        } else {\n            if (_unit getVariable [QGVAR(reenableNVGs), false] && {_cameraView != \"GUNNER\"}) then {\n                _unit action [\"NVGoggles\", _unit];\n                _unit setVariable [QGVAR(reenableNVGs), false];\n            };\n        };\n    };\n};\n",
        "functionName": "ace_nightvision_fnc_onCameraViewChanged"
      },
      {
        "fileName": "fnc_onVisionModeChanged.sqf",
        "content": "/*\n * Author: BaerMitUmlaut\n * Disables turning on NVGs while the player aims down his sight.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: New vision mode <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, 1] call ace_nightvision_fnc_onVisionModeChanged\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_visionMode\"];\n\nif (GVAR(disableNVGsWithSights) && {(hmd _unit) != \"\"}) then {\n    if ((vehicle _unit == _unit)\n        || {isTurnedOut _unit}\n        || {!([_unit] call EFUNC(common,hasHatch))\n            && {[_unit] call EFUNC(common,getTurretIndex) in ([vehicle _unit] call EFUNC(common,getTurretsFFV))}\n           }) then {\n        if ((cameraView == \"GUNNER\") && {_visionMode > 0}) then {\n            _unit action [\"NVGogglesOff\", _unit];\n        };\n    };\n};\n",
        "functionName": "ace_nightvision_fnc_onVisionModeChanged"
      },
      {
        "fileName": "fnc_updatePPEffects.sqf",
        "content": "/*\n * Author: commy2, PabstMirror and esteldunedain\n * Update the ppEffects everytime something changes\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [someEvent] call ace_nightvision_fnc_updatePPEffects\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\ndisableSerialization;\n\nparams [[\"_display\", displayNull]];\n\nif !(_display isEqualType displayNull) then {\n    _display = displayNull;\n};\n\nprivate _currentVehicle = vehicle ACE_player;\n\n// If the Zeus display is on or the player has no nightvision\nif (ctrlIDD _display == 312 || currentVisionMode ACE_player != 1) exitWith {\n    GVAR(ppEffectFilmGrain) ppEffectEnable false;\n    GVAR(ppEffectBlur) ppEffectEnable false;\n    GVAR(ppEffectRadialBlur) ppEffectEnable false;\n    GVAR(ppEffectNVGBrightness) ppEffectEnable false;\n};\n\n// The unit has nightvision\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _currentVehicle;\nprivate _hmd = hmd ACE_player;\nprivate _cameraView = cameraView;\nprivate _turret = [ACE_player] call EFUNC(common,getTurretIndex);\n\n\nprivate _fnc_isUsingHMD = {\n    if (_cameraView != \"GUNNER\") exitWith {true};  // asume hmd usage outside of gunner view\n\n    if (ACE_player == (driver _currentVehicle)) exitWith {\n        !(\"NVG\" in getArray (_config >> \"ViewOptics\" >> \"visionMode\"));\n    };\n\n    private _result = true;\n    private _turretConfig = [_config, _turret] call EFUNC(common,getTurretConfigPath);\n    private _turretConfigOpticsIn = _turretConfig >> \"OpticsIn\";\n\n    if (isClass _turretConfigOpticsIn) then {\n        for \"_index\" from 0 to (count _turretConfigOpticsIn - 1) do {\n            if (\"NVG\" in getArray (_turretConfigOpticsIn select _index >> \"visionMode\")) exitWith {_result = false};\n        };\n    } else {\n        //No OpticsIn usualy means RCWS, still need to test on more vehicles\n        _result = false;\n    };\n    _result\n};\n\nprivate _grainSetting = 0;\nprivate _blurSetting = 0;\nprivate _radBlurSetting = 0;\n\nif ((_currentVehicle == ACE_player) || _fnc_isUsingHMD) then {\n    _grainSetting = getNumber (configFile >> \"CfgWeapons\" >> _hmd >> \"ACE_NightVision_grain\");\n    _blurSetting = getNumber (configFile >> \"CfgWeapons\" >> _hmd >> \"ACE_NightVision_blur\");\n    _radBlurSetting = getNumber (configFile >> \"CfgWeapons\" >> _hmd >> \"ACE_NightVision_radBlur\");\n    TRACE_3(\"New NVG Settings From Player NVG\",_grainSetting,_blurSetting,_radBlurSetting)\n} else {\n    _grainSetting = _currentVehicle getVariable [\"ACE_NightVision_grain\", getNumber (_config >> \"ACE_NightVision_grain\")];\n    _blurSetting = _currentVehicle getVariable [\"ACE_NightVision_blur\", getNumber (_config >> \"ACE_NightVision_blur\")];\n    _radBlurSetting = _currentVehicle getVariable [\"ACE_NightVision_radBlur\", getNumber (_config >> \"ACE_NightVision_radBlur\")];\n    TRACE_3(\"New NVG Settings From Vehicle\",_grainSetting,_blurSetting,_radBlurSetting)\n};\n\n\n// Enable the effects\nGVAR(ppEffectFilmGrain) ppEffectEnable true;\nGVAR(ppEffectBlur) ppEffectEnable true;\nGVAR(ppEffectRadialBlur) ppEffectEnable true;\nGVAR(ppEffectNVGBrightness) ppEffectEnable true;\n\n// Configure effects parameters\nGVAR(ppEffectFilmGrain) ppEffectAdjust [0.25, 2.5, 2.5, _grainSetting, _grainSetting, false];\nGVAR(ppEffectFilmGrain) ppEffectCommit 0;\nGVAR(ppEffectBlur) ppEffectAdjust [_blurSetting];\nGVAR(ppEffectBlur) ppEffectCommit 0;\nGVAR(ppEffectRadialBlur) ppEffectAdjust [_radBlurSetting, _radBlurSetting, 0.2, 0.2];\nGVAR(ppEffectRadialBlur) ppEffectCommit 0;\n",
        "functionName": "ace_nightvision_fnc_updatePPEffects"
      }
    ]
  },
  {
    "component": "nlaw",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(isLockKeyDown) = false;\n\n// Degrees per second\nGVAR(yawChange) = 0;\nGVAR(pitchChange) = 0;\n\n// Add keybind\n[\"ACE3 Weapons\", QGVAR(trackTarget), localize LSTRING(trackTarget), {\n    call FUNC(keyDown);\n    false // Return false so it doesn't block the rest weapon action\n}, {\n    TRACE_1(\"lock key up\",GVAR(isLockKeyDown));\n    GVAR(isLockKeyDown) = false;\n    false\n}, [15, [false, false, false]], false] call CBA_fnc_addKeybind;  //Tab Key\n\n\n\n// Visual debuging, idealy used with a moving vehicle called \"testTarget\"\n#ifdef DRAW_NLAW_INFO\naddMissionEventHandler [\"Draw3d\", {\n    // GREEN - Draw an object called \"testTarget\"'s aim pos and 1 sec aimpos predicted by velocity\n    if ((!isNil \"testTarget\") && {!isNull testTarget}) then {\n        {\n            drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [0,1,0,1], ASLtoAGL ((aimPos testTarget) vectorAdd ((velocity testTarget) vectorMultiply _x)), 0.75, 0.75, 0, format [\"%1\", _x], 1, 0.025, \"TahomaB\"];\n        } forEach [0, 1, 2, 3];\n    };\n\n    // RED - If lock key is down, draw weapon dir and predicted path at various times\n    if (GVAR(yawChange) != 0) then {\n        {\n            private _viewASL = AGLtoASL positionCameraToWorld [0,0,0];\n            private _viewDir = ACE_player weaponDirection (currentWeapon ACE_player);\n            (_viewDir call CBA_fnc_vect2Polar) params [\"\", \"_yaw\", \"_pitch\"];\n            private _realYaw = _yaw + GVAR(yawChange) * _x;\n            private _realPitch = _pitch + GVAR(pitchChange) * _x;\n            private _returnTargetPos = _viewASL vectorAdd ([1000, _realYaw, _realPitch] call CBA_fnc_polar2vect);\n            drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [1,0,0,1], ASLtoAGL _returnTargetPos, 0.75, 0.75, 0, format [\"%1\", _x], 1, 0.025, \"TahomaB\"];\n        } forEach [0, 1, 2, 3];\n    };\n}];\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_attackProfile.sqf",
        "content": "/*\n * Author: PabstMirror\n * NLAW missile guidance attack profile.\n *\n * Arguments:\n * 0: Seeker Target PosASL <ARRAY>\n * 1: Guidance Arg Array <ARRAY>\n * 2: Attack Profile State <ARRAY>\n *\n * Return Value:\n * Missile Aim PosASL <ARRAY>\n *\n * Example:\n * [[1,2,3], [], []] call ace_nlaw_fnc_attackProfile\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_seekerTargetPos\", \"_args\", \"_attackProfileStateParams\"];\n_args params [\"_firedEH\", \"_launchParams\"];\n_launchParams params [\"\",\"_targetLaunchParams\", \"\", \"_attackProfile\"];\n_targetLaunchParams params [\"\", \"\", \"_launchPos\"];\n_firedEH params [\"\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n\n// Use seeker (if terminal)\nif (!(_seekerTargetPos isEqualTo [0,0,0])) exitWith {_seekerTargetPos};\n\n_attackProfileStateParams params [\"_startTime\", \"_startLOS\", \"_yawChange\", \"_pitchChange\"];\n(_startLOS call CBA_fnc_vect2Polar) params [\"\", \"_yaw\", \"_pitch\"];\n\nprivate _projectilePos = getPosASL _projectile;\nprivate _distanceFromLaunch = (_launchPos distance _projectilePos) + 10;\nprivate _flightTime = CBA_missionTime - _startTime;\n\nprivate _realYaw = _yaw + _yawChange * _flightTime;\nprivate _realPitch = _pitch + _pitchChange * _flightTime;\n\nprivate _returnTargetPos = _launchPos vectorAdd ([_distanceFromLaunch, _realYaw, _realPitch] call CBA_fnc_polar2vect);\n\nif (_attackProfile == QGVAR(overflyTopAttack)) then { // Add 2m height in OTA attack mode\n    _returnTargetPos = _returnTargetPos vectorAdd [0,0,2];\n};\n\n\n#ifdef DRAW_NLAW_INFO\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [1,0,1,1], ASLtoAGL _launchPos, 0.75, 0.75, 0, \"LAUNCH\", 1, 0.025, \"TahomaB\"];\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [0,1,1,1], ASLtoAGL (_launchPos vectorAdd (_startLOS vectorMultiply (_distanceFromLaunch + 50))), 0.75, 0.75, 0, \"Original LOS\", 1, 0.025, \"TahomaB\"];\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [1,1,0,1], ASLtoAGL (_launchPos vectorAdd ([_distanceFromLaunch + 50, _realYaw, _realPitch] call CBA_fnc_polar2vect)), 0.75, 0.75, 0, format [\"Predicted @%1sec\",(floor(_flightTime * 10)/10)], 1, 0.025, \"TahomaB\"];\ndrawLine3D [ASLtoAGL _launchPos, ASLtoAGL (_launchPos vectorAdd (_startLOS vectorMultiply (_distanceFromLaunch + 50))), [1,0,0,1]];\ndrawLine3D [ASLtoAGL _launchPos, ASLtoAGL (_launchPos vectorAdd ([_distanceFromLaunch + 50, _realYaw, _realPitch] call CBA_fnc_polar2vect)), [1,1,0,1]];\nprivate _test = lineIntersectsSurfaces [_launchPos, _launchPos vectorAdd (_startLOS vectorMultiply 3000), player, _projectile];\nif ((count _test) > 0) then {\n    private _posAGL = ASLtoAGL ((_test select 0) select 0);\n    drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [1,0,0,1], _posAGL, 0.75, 0.75, 0, \"Original Impact\", 1, 0.025, \"TahomaB\"];\n};\n#endif\n\n// TRACE_1(\"Adjusted target position\", _returnTargetPos);\n_returnTargetPos;\n",
        "functionName": "ace_nlaw_fnc_attackProfile"
      },
      {
        "fileName": "fnc_keyDown.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the track key being held down.\n * Tracks change in direction of weapon and computes angle change per second.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_nlaw_fnc_keyDown\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nTRACE_1(\"lock key down\",GVAR(isLockKeyDown));\n\nif (!alive ACE_player) exitWith {};\nif (!([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith))) exitWith {};\nif (!(ACE_player call CBA_fnc_canUseWeapon)) exitWith {};\nif ((getNumber (configFile >> \"CfgWeapons\" >> (currentWeapon ACE_player) >> QGVAR(enabled))) == 0) exitWith {};\nif (GVAR(isLockKeyDown)) exitWith {ERROR(\"already running?\");};\n\nGVAR(isLockKeyDown) = true;\nplaySound \"ACE_Sound_Click\";\n\n// Get starting weapon dir\n((ACE_player weaponDirection (currentWeapon ACE_player)) call CBA_fnc_vect2Polar) params [\"\", \"_yaw\", \"_pitch\"];\n\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [\"_lastTime\", \"_lastYaw\", \"_lastPitch\", \"_initPhase\"];\n\n    if ((!alive ACE_player) ||\n            {!([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith))} ||\n            {!GVAR(isLockKeyDown)} ||\n            {!(ACE_player call CBA_fnc_canUseWeapon)} ||\n            {(getNumber (configFile >> \"CfgWeapons\" >> (currentWeapon ACE_player) >> QGVAR(enabled))) == 0})\n    exitWith {\n        TRACE_1(\"ending track\",_pfID);\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n        playSound \"ACE_Sound_Click\";\n\n        [{ // reset gvars after a short delay\n            TRACE_1(\"reset vars\",_this);\n            GVAR(yawChange) = 0;\n            GVAR(pitchChange) = 0;\n        }, [], 0.5] call CBA_fnc_waitAndExecute;\n    };\n\n    private _deltaT = CBA_missionTime - _lastTime;\n    if (_deltaT == 0) exitWith {};\n    if (_initPhase && {_deltaT < 0.75}) exitWith {};\n\n    ((ACE_player weaponDirection (currentWeapon ACE_player)) call CBA_fnc_vect2Polar) params [\"\", \"_yaw\", \"_pitch\"];\n    private _yawChange = ([_yaw - _lastYaw] call CBA_fnc_simplifyAngle180) / _deltaT;\n    private _pitchChange = ([_pitch - _lastPitch] call CBA_fnc_simplifyAngle180) / _deltaT;\n\n    if (_initPhase) then { // initial value will use first 0.75 seconds of input\n        GVAR(yawChange) = _yawChange;\n        GVAR(pitchChange) = _pitchChange;\n        _args set [3, false];\n    } else {\n        // smoothing factor alpha - higher values will be more responsive to change, but also spike higher on jerky mouse movmeent\n        private _alpha = _deltaT / 3; \n        GVAR(yawChange) = (_yawChange * _alpha) + GVAR(yawChange) * (1 - _alpha);\n        GVAR(pitchChange) = (_pitchChange * _alpha) + GVAR(pitchChange) * (1 - _alpha);\n    };\n\n    _args set [0, CBA_missionTime];\n    _args set [1, _yaw];\n    _args set [2, _pitch];\n\n    #ifdef DEBUG_MODE_FULL\n    hintSilent format [\"Instantaneous\\nYaw: %1\\n Pitch: %2\\nGVAR\\nYaw: %3\\nPitch: %4\", _yawChange, _pitchChange, GVAR(yawChange), GVAR(pitchChange)];\n    #endif\n}, .25, [CBA_missionTime, _yaw, _pitch, true]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_nlaw_fnc_keyDown"
      },
      {
        "fileName": "fnc_onFired.sqf",
        "content": "/*\n * Author: PabstMirror\n * Sets up missile guidance state arrays (called from missileGuidance's onFired).\n *\n * Arguments:\n * Guidance Arg Array <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_nlaw_fnc_onFired\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_firedEH\", \"_launchParams\", \"_flightParams\", \"_seekerParams\", \"_stateParams\"];\n_firedEH params [\"_shooter\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n_launchParams params [\"\",\"_targetLaunchParams\",\"\",\"_attackProfile\"];\n_targetLaunchParams params [\"_target\"];\n_stateParams params [\"\", \"\", \"_attackProfileStateParams\"];\n\n// Reset _launchPos origin as projectile's height instead of player's foot\n_targetLaunchParams set [2, getPosASL _projectile];\n\n// Get state params:\nTRACE_3(\"start of attack profile\",_attackProfile,_shooter,vectorDir _projectile);\n\nprivate _firedLOS = _shooter weaponDirection (currentWeapon _shooter);\nprivate _yawChange = 0;\nprivate _pitchChange = 0;\n\nif (_shooter == ACE_player) then {\n    TRACE_2(\"isPlayer\",GVAR(yawChange),GVAR(pitchChange));\n    _yawChange = GVAR(yawChange);\n    _pitchChange = GVAR(pitchChange);\n    TRACE_1(\"los check\",_firedLOS call CBA_fnc_vect2Polar);\n} else {\n    if ((!isNil \"_target\") && {!isNull _target}) then {\n        _firedLOS = (getPosASL _projectile) vectorFromTo (aimPos _target);\n        (((eyePos _shooter) vectorFromTo (aimPos _target)) call CBA_fnc_vect2Polar) params [\"\", \"_startYaw\", \"_startPitch\"];\n        // Add some random error to AI's velocity prediction:\n        private _random = random [(_shooter skillFinal \"aimingAccuracy\") min 0.9, 1, 2-((_shooter skillFinal \"aimingAccuracy\") min 0.9)];\n        (((eyePos _shooter) vectorFromTo ((aimPos _target) vectorAdd ((velocity _target) vectorMultiply (_random)))) call CBA_fnc_vect2Polar) params [\"\", \"_predictedYaw\", \"_predictedPitch\"];\n        _yawChange = ([_predictedYaw - _startYaw] call CBA_fnc_simplifyAngle180);\n        _pitchChange = ([_predictedPitch - _startPitch] call CBA_fnc_simplifyAngle180);\n        TRACE_1(\"AI\",_target);\n    } else {\n        TRACE_1(\"AI - no target\",_target);\n    };\n};\n\n// Limit Max Deflection\n_yawChange = -10 max _yawChange min 10;\n_pitchChange = -10 max _pitchChange min 10;\n\nTRACE_3(\"attackProfileStateParams\",_firedLOS,_yawChange,_pitchChange);\n_attackProfileStateParams set [0, CBA_missionTime];\n_attackProfileStateParams set [1, _firedLOS];\n_attackProfileStateParams set [2, _yawChange];\n_attackProfileStateParams set [3, _pitchChange];\n",
        "functionName": "ace_nlaw_fnc_onFired"
      },
      {
        "fileName": "fnc_seeker.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the top down attack seeker for missile guidance.\n * Has a very short range (IR/Magnetic?) seeker that will trigger the shaped charge midair above the target.\n *\n * Arguments:\n * 1: Guidance Arg Array <ARRAY>\n * 2: Seeker State <ARRAY>\n *\n * Return Value:\n * Seeker Pos <ARRAY>\n *\n * Example:\n * [] call ace_nlaw_fnc_seeker\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"\", \"_args\", \"_seekerStateParams\"];\n_args params [\"_firedEH\", \"_launchParams\", \"\", \"_seekerParams\", \"_stateParams\"];\n_firedEH params [\"\",\"\",\"\",\"\",\"\",\"\",\"_projectile\"];\n_launchParams params [\"\", \"_targetLaunchParams\", \"\", \"_attackProfile\"];\n_targetLaunchParams params [\"\", \"\", \"_launchPos\"];\n\nif (_attackProfile == QGVAR(directAttack)) exitWith {[0,0,0]};\n\nprivate _projPos = getPosASL _projectile;\n\n// Arm seeker after 20 meters\nif ((_projPos distance _launchPos) >= 20) then {\n    scopeName \"targetScan\";\n    BEGIN_COUNTER(targetScan);\n\n    if (_seekerStateParams isEqualTo []) then {\n        TRACE_2(\"Seeker Armed\",_projPos distance _launchPos,diag_fps);\n        _seekerStateParams set [0, _projPos]; // Set _lastPos to current position\n    };\n\n    _seekerStateParams params [\"_lastPos\", \"_terminal\"];\n    if (_terminal) exitWith {};\n\n    private _vectorDir = _lastPos vectorFromTo _projPos;\n    private _frameDistance = _lastPos vectorDistance _projPos;\n\n    // Distance traveled depends on velocity and FPS - at 60fps it will be ~4m\n    // Step size will effect accuracy and performance costs\n    for \"_stepSize\" from 0 to _frameDistance step 0.5 do {\n        // This represents a position that the missile was at between the last frame and now\n        private _virtualPos = _lastPos vectorAdd (_vectorDir vectorMultiply _stepSize);\n        #ifdef DRAW_NLAW_INFO\n        drawLine3D [ASLtoAGL _virtualPos, ASLtoAGL (_virtualPos vectorAdd [0,0,-5]), [1,0,_stepSize/(_frameDistance max 0.1),1]];\n        #endif\n\n        // Limit scan to 5 meters directly down (shaped charge jet has a very limited range)\n        private _res = lineIntersectsSurfaces [_virtualPos, (_virtualPos vectorAdd [0,0,-5]), _projectile];\n        if (!(_res isEqualTo [])) then {\n            (_res select 0) params [\"_targetPos\", \"\", \"_target\"];\n            if ((_target isKindOf \"Tank\") || {_target isKindOf \"Car\"} || {_target isKindOf \"Air\"}) exitWith {\n                TRACE_3(\"Firing shaped charge down\",_target,_targetPos distance _virtualPos,_frameDistance);\n                TRACE_2(\"\",_target worldToModel (ASLtoAGL _virtualPos),boundingBoxReal _target);\n                _virtualPos = _virtualPos vectorAdd (_vectorDir vectorMultiply 1.25);\n\n                deleteVehicle _projectile;\n\n                // Damage and effects of missile exploding (timeToLive is 0 so should happen next frame)\n                private _explosion = \"ACE_NLAW_Explosion\" createVehicle _virtualPos;\n                _explosion setPosASL _virtualPos;\n\n                // Just damage from shaped charge\n                private _shapedCharage = \"ACE_NLAW_ShapedCharge\" createVehicle _virtualPos;\n                _shapedCharage setPosASL _virtualPos;\n                _shapedCharage setVectorDirAndUp [[0,0,-1], [1,0,0]];\n                _shapedCharage setVelocity [0,0,-300];\n\n                _seekerStateParams set [1, true];\n       \n                END_COUNTER(targetScan);\n                breakOut \"targetScan\";\n            };\n        };\n    };\n    _seekerStateParams set [0, _projPos];\n    END_COUNTER(targetScan);\n};\n\n// Exploded, return dummy value\nif (_seekerStateParams param [1, false]) exitWith {\n    [0,0,1]\n};\n\n// return:\n[0,0,0]\n",
        "functionName": "ace_nlaw_fnc_seeker"
      }
    ]
  },
  {
    "component": "noidle",
    "files": [],
    "functions": []
  },
  {
    "component": "noradio",
    "files": [
      {
        "fileName": "XEH_preInit.sqf",
        "content": "// By commy2\n#include \"script_component.hpp\"\n\nif (isServer) then {\n    // Unmute unit if that player disconnects\n    addMissionEventHandler [\"HandleDisconnect\", {\n        TRACE_1(\"re-enabling voice\",_this);\n        [_this select 0, \"isPlayer\"] call EFUNC(common,unmuteUnit);\n    }];\n};\n\nif (hasInterface) then {\n    // Mutes/unmutes units when the player changes\n    [\"unit\", {\n        if (!GVAR(enabled)) exitWith {};\n\n        params [\"_newPlayer\", \"_oldPlayer\"];\n        TRACE_2(\"player change\",_newPlayer,_oldPlayer);\n\n        // Mute the new player\n        [_newPlayer, \"isPlayer\"] call EFUNC(common,muteUnit);\n\n        // Unmute the old player\n        if (alive _oldPlayer) then {\n            [_oldPlayer, \"isPlayer\"] call EFUNC(common,unmuteUnit);\n        };\n    }, true] call CBA_fnc_addPlayerEventHandler;\n};\n\n[QGVAR(enabled), \"CHECKBOX\", [LSTRING(setting), LSTRING(setting_tooltip)], format [\"ACE %1\", localize ELSTRING(common,DisplayName)], true, true, {\n    params [\"_enabled\"];\n\n    if (_enabled) then {\n        [ACE_player, \"isPlayer\"] call EFUNC(common,muteUnit);\n    } else {\n        [ACE_player, \"isPlayer\"] call EFUNC(common,unmuteUnit);\n    };\n}] call CBA_settings_fnc_init;\n"
      }
    ],
    "functions": []
  },
  {
    "component": "norearm",
    "files": [],
    "functions": []
  },
  {
    "component": "optics",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(camera) = objNull;\n\n// save control for fired EH\n[\"ace_infoDisplayChanged\", {\n    TRACE_1(\"ace_infoDisplayChanged\",_this);\n    if (!isNull ((_this select 0) displayCtrl 1713001)) then {\n        uiNamespace setVariable [QGVAR(RscWeaponInfo2D), _this select 0];\n    };\n}] call CBA_fnc_addEventHandler;\n\n// camera has to be re-created every time another camera is created. Otherwise r2t is either black or transparent. @todo Add popular custom cameras to the event in ACE_common.\n[\"ace_activeCameraChanged\", {\n    params [\"\", \"_isfeatureCameraActive\"];\n    TRACE_1(\"ace_activeCameraChanged\",_isfeatureCameraActive);\n    if (!_isfeatureCameraActive) then {\n        // Destroy the camera, and it will be re-created in the onDrawScope2d helper\n        if (!isNull GVAR(camera)) then {\n            GVAR(camera) cameraEffect [\"TERMINATE\", \"BACK\"];\n            camDestroy GVAR(camera);\n            TRACE_1(\"destroying pip camera for restart\",GVAR(camera));\n        };\n    };\n}] call CBA_fnc_addEventHandler;\n\n// Register fire event handler\n[\"ace_firedPlayer\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_handleFired.sqf",
        "content": "/*\n * Author: Taosenai\n * Adapted By: KoffeinFlummi, commy2\n *\n * Animates the scope when firing. Called from the unified fired EH only for the local player.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_optics_fnc_handleFired\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n// IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\ndisableSerialization;\n\n// Check if compatible scope is used\nprivate _display = uiNamespace getVariable [QGVAR(RscWeaponInfo2D), displayNull];\n\nif (isNull _display) exitWith {};\n\n// Reduce the reticle movement as the player drops into lower, supported stances.\nprivate _recoilCoef = switch (true) do {\n    case (isWeaponDeployed _unit): {0.1};\n    case (isWeaponRested _unit): {0.4};\n    default {1};\n};\n\n// Constants which determine how the scope recoils\n\nprivate _recoilScope = _recoilCoef * linearConversion [0, 1, random 1, SCOPE_RECOIL_MIN, SCOPE_RECOIL_MAX, false];\n\nprivate _reticleShiftX = _recoilCoef * linearConversion [0, 1, random 1, RETICLE_SHIFT_X_MIN, RETICLE_SHIFT_X_MAX, false];\nprivate _reticleShiftY = _recoilCoef * linearConversion [0, 1, random 1, RETICLE_SHIFT_Y_MIN, RETICLE_SHIFT_Y_MAX, false];\n\nprivate _scopeShiftX = _recoilCoef * linearConversion [0, 1, random 1, SCOPE_SHIFT_X_MIN, SCOPE_SHIFT_X_MAX, false];\nprivate _scopeShiftY = _recoilCoef * linearConversion [0, 1, random 1, SCOPE_SHIFT_Y_MIN, SCOPE_SHIFT_Y_MAX, false];\n\n// Create and commit recoil effect\n\nprivate _sizeX = (0.75 + _recoilScope) / (getResolution select 5);\nprivate _sizeY = _sizeX * (4 / 3);\n\nprivate _positionReticle = [\n    safezoneX + 0.5 * safezoneW - 0.5 * (_sizeX + _reticleShiftX),\n    safezoneY + 0.5 * safezoneH - 0.5 * (_sizeY + _reticleShiftY),\n    _sizeX,\n    _sizeY\n];\n\n(_display displayCtrl 1713001) ctrlSetPosition _positionReticle;\n(_display displayCtrl 1713002) ctrlSetPosition _positionReticle;\n\nprivate _positionBody = [\n    safezoneX + 0.5 * safezoneW - 0.5 * (2 * _sizeX + _scopeShiftX),\n    safezoneY + 0.5 * safezoneH - 0.5 * (2 * _sizeY + _scopeShiftY),\n    2 * _sizeX,\n    2 * _sizeY\n];\n\n(_display displayCtrl 1713005) ctrlSetPosition _positionBody;\n(_display displayCtrl 1713006) ctrlSetPosition _positionBody;\n\n(_display displayCtrl 1713001) ctrlCommit 0;\n(_display displayCtrl 1713002) ctrlCommit 0;\n(_display displayCtrl 1713005) ctrlCommit 0;\n(_display displayCtrl 1713006) ctrlCommit 0;\n\n// Bring them all back\n_sizeX = 0.75 / (getResolution select 5);\n_sizeY = _sizeX * (4 / 3);\n\n_positionReticle = [\n    safezoneX + 0.5 * safezoneW - 0.5 * _sizeX,\n    safezoneY + 0.5 * safezoneH - 0.5 * _sizeY,\n    _sizeX,\n    _sizeY\n];\n\n(_display displayCtrl 1713001) ctrlSetPosition _positionReticle;\n(_display displayCtrl 1713002) ctrlSetPosition _positionReticle;\n\n_positionBody = [\n    safezoneX + 0.5 * safezoneW - 0.5 * 2 * _sizeX,\n    safezoneY + 0.5 * safezoneH - 0.5 * 2 * _sizeY,\n    2 * _sizeX,\n    2 * _sizeY\n];\n\n(_display displayCtrl 1713005) ctrlSetPosition _positionBody;\n(_display displayCtrl 1713006) ctrlSetPosition _positionBody;\n\n(_display displayCtrl 1713001) ctrlCommit RECENTER_TIME;\n(_display displayCtrl 1713002) ctrlCommit RECENTER_TIME;\n(_display displayCtrl 1713005) ctrlCommit RECENTER_TIME;\n(_display displayCtrl 1713006) ctrlCommit RECENTER_TIME;\n",
        "functionName": "ace_optics_fnc_handleFired"
      },
      {
        "fileName": "fnc_onDrawScope.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * 0: Display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [DISPLAY] call ace_optics_fnc_onDrawScope\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_display\"];\n\nprivate _control = _display displayCtrl 1713154;\n\nif (!ctrlShown (_display displayCtrl 154)) exitWith {\n    _control ctrlShow false;\n};\n\nprivate _sizeX = (call EFUNC(common,getZoom)) / 4;\nprivate _sizeY = _sizeX * safezoneW / safezoneH;\n\n_control ctrlSetPosition [\n    safezoneX + 0.5 * safezoneW - 0.5 * _sizeX,\n    safezoneY + 0.5 * safezoneH - 0.5 * _sizeY,\n    _sizeX,\n    _sizeY\n];\n\n_control ctrlCommit 0;\n_control ctrlShow true;\n",
        "functionName": "ace_optics_fnc_onDrawScope"
      },
      {
        "fileName": "fnc_onDrawScope2D.sqf",
        "content": "/*\n * Author: commy2\n * Helper function for updating the 2d and 3d scope controls\n * Called from a dummy map controls onDraw.\n *\n * Arguments:\n * 0: Display (RscInGameUI for a weapon) <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_RscWeapon_Arco's Display] call ace_optics_fnc_onDrawScope2D\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_display\"];\n\n// @todo, all weapon types\nprivate _optic = (primaryWeaponItems ACE_player) select 2;\nprivate _isPIP = (getText (configFile >> \"CfgWeapons\" >> _optic >> \"ItemInfo\" >> \"modelOptics\")) == QPATHTOF(models\\ace_optics_pip.p3d);\n\nif (_isPIP) then {\n    GVAR(pipLastFrame) = diag_frameno;\n    if (isNull GVAR(camera)) then {\n        if ((({_x != GVAR(camera)} count allMissionObjects \"camera\") > 0) || {!isNull curatorCamera}) exitWith {\n            TRACE_1(\"waiting for feature camera to end\",GVAR(camera));\n        };\n\n        // PiP technique by BadBenson\n        GVAR(camera) = \"camera\" camCreate positionCameraToWorld [0, 0, 0];\n        GVAR(camera) camSetFov 0.7;\n        GVAR(camera) camSetTarget ACE_player;\n        GVAR(camera) camCommit 1;\n\n        QGVAR(rendertarget0) setPiPEffect [0];\n        GVAR(camera) cameraEffect [\"INTERNAL\", \"BACK\", QGVAR(rendertarget0)];\n\n        TRACE_2(\"created new pip camera\",GVAR(camera),isNull GVAR(camera));\n\n        // Start a waitUntil to handle destruction after GVAR(pipLastFrame) is no longer updated\n        [{\n            (abs (diag_frameno - GVAR(pipLastFrame))) > 1\n        }, {\n            GVAR(camera) cameraEffect [\"TERMINATE\", \"BACK\"];\n            camDestroy GVAR(camera);\n            TRACE_2(\"destroyed pip camera\",GVAR(camera),isNull GVAR(camera));\n        }, []] call CBA_fnc_waitUntilAndExecute;\n    };\n};\n\n//If we are not zoomed into the actual scope (not collimator)\nif (!ctrlShown (_display displayCtrl 154)) exitWith {\n    (_display displayCtrl 1713001) ctrlShow false;\n    (_display displayCtrl 1713002) ctrlShow false;\n    (_display displayCtrl 1713005) ctrlShow false;\n    (_display displayCtrl 1713006) ctrlShow false;\n    (_display displayCtrl 1713010) ctrlShow false;\n    (_display displayCtrl 1713011) ctrlShow false;\n};\n\nif (_isPIP) then {\n    GVAR(camera) setPosATL positionCameraToWorld [0, 0, 0.4];\n    GVAR(camera) camPrepareTarget positionCameraToWorld [0, 0, 50];\n    GVAR(camera) camCommitPrepared 0;\n\n    // @todo, check if that needs to be done at all\n    if (cameraView == \"GUNNER\") then {\n        GVAR(camera) camsetFOV 0.7;\n        GVAR(camera) camcommit 0;\n    } else {\n        GVAR(camera) camsetFOV 0.01;\n        GVAR(camera) camcommit 0;\n    };\n};\n\n// Calculate lighting\nprivate _dayOpacity = call EFUNC(common,ambientBrightness);\nprivate _nightOpacity = [1, 0] select (_dayOpacity == 1);\n\n// Apply lighting and make layers visible\n(_display displayCtrl 1713001) ctrlSetTextColor [1, 1, 1, 1];\n(_display displayCtrl 1713002) ctrlSetTextColor [1, 1, 1, [0, 1] select (_dayOpacity < 0.5)];\n(_display displayCtrl 1713005) ctrlSetTextColor [1, 1, 1, _dayOpacity];\n(_display displayCtrl 1713006) ctrlSetTextColor [1, 1, 1, _nightOpacity];\n\n/*\n(_display displayCtrl 1713001) ctrlCommit 0;\n(_display displayCtrl 1713002) ctrlCommit 0;\n(_display displayCtrl 1713005) ctrlCommit 0;\n(_display displayCtrl 1713006) ctrlCommit 0;\n */\n\n(_display displayCtrl 1713001) ctrlShow true;\n(_display displayCtrl 1713002) ctrlShow true;\n(_display displayCtrl 1713005) ctrlShow true;\n(_display displayCtrl 1713006) ctrlShow true;\n(_display displayCtrl 1713010) ctrlShow _isPIP;\n(_display displayCtrl 1713011) ctrlShow _isPIP;\n",
        "functionName": "ace_optics_fnc_onDrawScope2D"
      }
    ]
  },
  {
    "component": "optionsmenu",
    "files": [
      {
        "fileName": "init_loadMainMenuBox.sqf",
        "content": "/*\n * Author: PabstMirror\n * Loads the version info HTML box from main menu\n *\n * Arguments:\n * 0: Display (from onMouseMoving) <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * onMouseMovingEvent execVM \"script_loadMainMenuBox.sqf\";\n *\n * Public: No\n */\n#include \"\\a3\\ui_f\\hpp\\defineResinclDesign.inc\"\n#include \"script_component.hpp\"\n\nparams [\"_display\"];\nprivate _controlsGroup = _display displayCtrl IDC_MAIN_INFO;\n\n//Need to load from profileNamespace because ace_settings might not be init if world = empty\nif (profileNamespace getVariable [QGVAR(showNewsOnMainMenu), true]) then {\n    _controlsGroup ctrlShow true;\n\n    private _fnc_onSetFocus = {\n        params [\"_control\"];\n        private _controlsGroup = ctrlParentControlsGroup _control;\n\n        (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BACKGROUND) ctrlSetTextColor [1,1,1,1];\n        (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BACKGROUND_ICON) ctrlSetTextColor [1,1,1,1];\n        (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_ICON) ctrlSetTextColor [0,0,0,1];\n    };\n\n    private _fnc_onKillFocus = {\n        params [\"_control\"];\n        private _controlsGroup = ctrlParentControlsGroup _control;\n\n        (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BACKGROUND) ctrlSetTextColor [0,0,0,0.75];\n        (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BACKGROUND_ICON) ctrlSetTextColor [0,0,0,0.75];\n        (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_ICON) ctrlSetTextColor [1,1,1,0.5];\n    };\n\n    (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BUTTON) ctrlAddEventHandler [\"MouseEnter\", _fnc_onSetFocus];\n    (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BUTTON) ctrlAddEventHandler [\"SetFocus\", _fnc_onSetFocus];\n    (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BUTTON) ctrlAddEventHandler [\"MouseExit\", _fnc_onKillFocus];\n    (_controlsGroup controlsGroupCtrl IDC_MAIN_INFO_BUTTON) ctrlAddEventHandler [\"KillFocus\", _fnc_onKillFocus];\n\n    private _versionStr = getText (configFile >> \"CfgPatches\" >> \"ace_main\" >> \"versionStr\") splitString \".\";\n    _versionStr resize 3; // MAJOR, MINOR, PATCH\n    _versionStr = _versionStr joinString \".\";\n\n    (_display displayCtrl IDC_MAIN_INFO_CURRENT_VERSION_INFO) ctrlSetText format [\"Version: %1\", _versionStr];\n    (_display displayCtrl IDC_MAIN_INFO_NEWEST_VERSION_INFO) htmlLoad \"https://ace3mod.com/version.html\";\n} else {\n    _controlsGroup ctrlShow false;\n};\n\n/*\nNote: switch version.html to simpler format and right align\n<h1 align=\"right\">Latest: {{site.ace.version.major}}.{{site.ace.version.minor}}.{{site.ace.version.patch}}</h1>\n*/\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nif (hasInterface) then {\n    [[format [\"ACE %1\", localize LSTRING(DumpDebug)], localize LSTRING(DumpDebugTooltip)], QGVAR(MainMenuHelperDumpDebug)] call CBA_fnc_addPauseMenuOption;\n    [[format [\"ACE %1\", localize LSTRING(headBugFix)], localize LSTRING(headBugFixTooltip)], QGVAR(MainMenuHelperHeadBugFix)] call CBA_fnc_addPauseMenuOption;\n};\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_debugDumpToClipboard.sqf",
        "content": "/*\n * Author: PabstMirror\n * Dumps debug info to clipboard.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ACE_optionsmenu_fnc_debugDumpToClipboard\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define MIN_ARRAY_SIZE 50\n\nprivate _outputText = {\n    diag_log text (_this select 0);\n    \"ace_clipboard\" callExtension ((_this select 0) + \"\n\");\n};\n\nprivate _text = format [\"~~~~~~~~~ACE Debug~~~~~~~~~\ntime = %1\n\n------Performance------\ndiag_fps = %2\ncount cba_common_waitAndExecArray = %3\ncount cba_common_waitUntilAndExecArray = %4\ncount cba_common_perFrameHandlerArray = %5 (max %6)\ncount diag_activeSQFScripts = %7\ncount diag_activeSQSScripts = %8\ncount diag_activeMissionFSMs = %9\",\ntime,\ndiag_fps,\ncount cba_common_waitAndExecArray,\ncount cba_common_waitUntilAndExecArray,\n{!isNil \"_x\"} count cba_common_perFrameHandlerArray, count cba_common_perFrameHandlerArray,\ncount diag_activeSQFScripts,\ncount diag_activeSQSScripts,\ncount diag_activeMissionFSMs];\n[_text] call _outputText;\n\n\n_text = format [\"\n------Player------\ntypeOf = %1\nanimationState = %2\",\nif (isNull ace_player) then {\"null\"} else {typeOf ace_player},\nif (isNull ace_player) then {\"null\"} else {animationState ace_player}];\n[_text] call _outputText;\n\n\n_text = format [\"\n------ACE Settings------\"];\n[_text] call _outputText;\n\n\n{\n    _var = missionNamespace getVariable [(_x select 0), \"ERROR: Not Defined\"];\n    _text = format [\"%1 - %2\", (_x select 0), _var];\n    [_text] call _outputText;\n} forEach EGVAR(common,settings);\n\n\n_text = format [\"\n------Array Info (count >= %1)------\", MIN_ARRAY_SIZE];\n[_text] call _outputText;\n\n\n{\n    _var = missionNamespace getVariable [_x, nil];\n    if(!isnil \"_var\" && {_var isEqualType []} && {(count _var) > MIN_ARRAY_SIZE}) then {\n        _text = format [\"%1 - ARRAY SIZE: %2\", _x, (count _var)];\n        [_text] call _outputText;\n    };\n} forEach (allVariables missionNamespace);\n\n{\n    private _unit = _x;\n    {\n        private _var = _unit getVariable [_x, nil];\n        if(!isnil \"_var\" && {_var isEqualType []} && {(count _var) > MIN_ARRAY_SIZE}) then {\n            _text = format [\"%1 on [%2] - ARRAY SIZE: %3\", _x, _unit, (count _var)];\n            [_text] call _outputText;\n        };\n    } forEach (allVariables _unit);\n} forEach allUnits;\n\n\"ace_clipboard\" callExtension \"--COMPLETE--\";\n",
        "functionName": "ace_optionsmenu_fnc_debugDumpToClipboard"
      }
    ]
  },
  {
    "component": "overheating",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by esteldunedain\n#include \"script_component.hpp\"\n\nif (hasInterface) then {\n    // Add keybinds\n    [\"ACE3 Weapons\", QGVAR(unjamWeapon), localize LSTRING(UnjamWeapon), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n\n        if !(GVAR(enabled) && {[ACE_player] call FUNC(canUnjam)}) exitWith {false};\n\n        // Statement\n        [ACE_player, currentMuzzle ACE_player, false] call FUNC(clearJam);\n        true\n    }, {false}, [19, [true, false, false]], false] call CBA_fnc_addKeybind; //SHIFT + R Key\n};\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"SettingsInitialized eh\", GVAR(enabled));\n    if (!GVAR(enabled)) exitWith {};\n\n    if (isServer) then {\n        GVAR(pseudoRandomList) = [];\n        // Construct a list of pseudo random 2D vectors\n        for \"_i\" from 0 to 30 do {\n            GVAR(pseudoRandomList) pushBack [-1 + random 2, -1 + random 2];\n        };\n        publicVariable QGVAR(pseudoRandomList);\n\n        // Keep track of the temperature of stored spare barrels\n        GVAR(storedSpareBarrels) = [] call CBA_fnc_hashCreate;\n\n        // Install event handlers for spare barrels\n        [QGVAR(sendSpareBarrelTemperatureHint), FUNC(sendSpareBarrelsTemperaturesHint)] call CBA_fnc_addEventHandler;\n        [QGVAR(loadCoolestSpareBarrel), FUNC(loadCoolestSpareBarrel)] call CBA_fnc_addEventHandler;\n\n        // Schedule cool down calculation of stored spare barrels\n        [] call FUNC(updateSpareBarrelsTemperaturesThread);\n    };\n\n    if !(hasInterface) exitWith {};\n\n    GVAR(cacheWeaponData) = call CBA_fnc_createNamespace;\n    GVAR(cacheAmmoData) = call CBA_fnc_createNamespace;\n    GVAR(cacheSilencerData) = call CBA_fnc_createNamespace;\n\n    //Add Take EH (for reload)\n    [\"CAManBase\", \"Take\", {_this call FUNC(handleTakeEH);}] call CBA_fnc_addClassEventHandler;\n\n    // Register fire event handler\n    [\"ace_firedPlayer\", DFUNC(firedEH)] call CBA_fnc_addEventHandler;\n    // Only add eh to non local players if dispersion is enabled\n    if (GVAR(overheatingDispersion)) then {\n        [\"ace_firedPlayerNonLocal\", DFUNC(firedEH)] call CBA_fnc_addEventHandler;\n    };\n\n    // Schedule cool down calculation of player weapons at (infrequent) regular intervals\n    [] call FUNC(updateTemperatureThread);\n\n    // Install event handler to display temp when a barrel was swapped\n    [QGVAR(showWeaponTemperature), DFUNC(displayTemperature)] call CBA_fnc_addEventHandler;\n    // Install event handler to initiate an assisted barrel swap\n    [QGVAR(initiateSwapBarrelAssisted), DFUNC(swapBarrel)] call CBA_fnc_addEventHandler;\n\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_calculateCooling.sqf",
        "content": "/*\n * Author: esteldunedain\n * Calculate the cooling down of a weapon over a time interval.\n *\n * Arguments:\n * 0: Initial temperature <NUMBER>\n * 1: Barrel mass <NUMBER>\n * 2: Time interval  <NUMBER>\n *\n * Return Value:\n * Final temperature <NUMBER>\n *\n * Example:\n * [_temperature, _barrelMass, _totalTime] call ace_overheating_fnc_calculateCooling\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_temperature\", \"_barrelMass\", \"_totalTime\"];\n\nif (_temperature < 1) exitWith {0};\n// If a long time passed since the last shot, there's no need to calculate anything; the weapon should be cool\nif (_totalTime > 1800) exitWith {0};\n\n//AR-15 (0.00570m bullet diameter) (barrel diameter usually 0.75\" or 0.008255m radius)\n//Steel Denisty = 7850 m^3 / kg\n//Area of a cylinder (2/r)*(Pi * r^3 + V) - for a 0.008255m radius barrel -> Area = 210(1/meters) * Volume\n//Adjusted volume for being hollowed out is ~1.1x\n//So Area = 210 * 1.1 * (mass / 7850) = mass * 0.029427 (for steel near that diameter)\n\nprivate _barrelSurface = _barrelMass * 0.029427;\n\nTRACE_4(\"cooling\",_temperature,_totalTime,_barrelMass,_barrelSurface);\n\nprivate _time = 0;\nwhile {true} do {\n    private _deltaTime = (_totalTime - _time) min 20;\n\n    _temperature = _temperature - (\n    // Convective cooling\n    25 * _barrelSurface * _temperature\n    // Radiative cooling\n    + 0.4 * 5.67e-8 * _barrelSurface *\n    ( (_temperature + 273.15)*(_temperature + 273.15)\n    * (_temperature + 273.15)*(_temperature + 273.15)\n    - 273.15 * 273.15 * 273.15 *273.15 )\n    ) * _deltaTime / (_barrelMass * 466);\n\n    if (_temperature < 1) exitWith {0};\n\n    if (isNil \"_temperature\") exitWith {\n        diag_log text format [\"[ACE] ERROR: _totalTime = %1; _time = %2; _deltaTime = %3;\", _totalTime, _time, _deltaTime];\n        0\n    };\n\n    _time = _time + _deltaTime;\n    if (_time >= _totalTime) exitWith { _temperature max 0 };\n};\n",
        "functionName": "ace_overheating_fnc_calculateCooling"
      },
      {
        "fileName": "fnc_canCheckSpareBarrelsTemperatures.sqf",
        "content": "/*\n * Author: Grey-Soldierman\n * Return true if player can check temperatures of spare barrels\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * Bool <BOOL>\n *\n * Example:\n * [bob] call ace_overheating_fnc_canCheckSpareBarrelsTemperatures\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\"];\n\n//Get the classname of the spare barrel for the weapon\nprivate _weaponBarrelClass = getText (configFile >> 'CfgWeapons' >> currentWeapon _player >> QGVAR(barrelClassname));\n//If the weapon has no defined classname then use the ACE one\nif(_weaponBarrelClass == \"\") then {\n    _weaponBarrelClass = \"ACE_SpareBarrel\";\n};\n//Check if the player has the barrel and the weapon can have its barrel swapped\nprivate _canCheckTemperature = GVAR(enabled) && {_weaponBarrelClass in magazines _player};\n\n_canCheckTemperature;\n",
        "functionName": "ace_overheating_fnc_canCheckSpareBarrelsTemperatures"
      },
      {
        "fileName": "fnc_canSwapBarrel.sqf",
        "content": "/*\n * Author: Grey-Soldierman\n * Return true if player can swap barrel\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * Bool <BOOL>\n *\n * Example:\n * [bob, \"weapon\"] call ace_overheating_fnc_canSwapBarrel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\",\"_weapon\"];\n\n//Check if weapon can have its barrel swapped. If not exit out of function\nif( !GVAR(enabled) && (getNumber (configFile >> 'CfgWeapons' >> _weapon >> QGVAR(allowSwapBarrel))) != 1) exitWith{false};\n\n//Get the classname of the spare barrel for the weapon\nprivate _weaponBarrelClass = getText (configFile >> 'CfgWeapons' >> _weapon >> QGVAR(barrelClassname));\n//If the weapon has no defined classname then use the ACE one\nif(_weaponBarrelClass == \"\") then {\n    _weaponBarrelClass = \"ACE_SpareBarrel\";\n};\n//If the player has the spare barrel then it can be swapped\n(_weaponBarrelClass in magazines _unit)\n",
        "functionName": "ace_overheating_fnc_canSwapBarrel"
      },
      {
        "fileName": "fnc_canUnjam.sqf",
        "content": "/*\n * Author: Commy2 and esteldunedain\n * Return true if the unit can unjam it's current weapon\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * Bool <BOOL>\n *\n * Example:\n * [bob] call ace_overheating_fnc_canUnjam\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"_unit\",_unit);\n\nprivate _jammedWeapons = _unit getVariable [QGVAR(jammedWeapons), []];\nif !(currentWeapon _unit in _jammedWeapons) exitWith {\n    false\n};\nif !([_unit] call CBA_fnc_canUseWeapon) exitWith {\n    false\n};\ntrue\n",
        "functionName": "ace_overheating_fnc_canUnjam"
      },
      {
        "fileName": "fnc_checkSpareBarrelsTemperatures.sqf",
        "content": "/*\n * Author: esteldunedain\n * Make the player check the temperature of his spare barrels\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_overheating_fnc_checkSpareBarrelsTemperature\n *\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\"];\n\n// Make the unit go kneeling\n[_player] call EFUNC(common,goKneeling);\n\n// Spawn a progress bar\n[\n    5.0,\n    [_player],\n    {\n        params [\"_args\", \"_elapsedTime\", \"_totalTime\", \"_errorCode\"];\n        _args params [\"_player\"];\n        // Time has enlapsed, ask the server to send the hint\n        [QGVAR(sendSpareBarrelTemperatureHint), [_player, _player]] call CBA_fnc_serverEvent;\n    },\n    {},\n    (localize LSTRING(CheckingSpareBarrelsTemperatures)),\n    {true},\n    [\"isNotInside\", \"isNotSitting\", \"isNotSwimming\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_overheating_fnc_checkSpareBarrelsTemperatures"
      },
      {
        "fileName": "fnc_checkTemperature.sqf",
        "content": "/*\n * Author: Commy2 and esteldunedain\n * Make the player check the temperature of his weapon\n *\n * Arguments:\n * 0: Unit checking <OBJECT>\n * 1: Unit that has the weapon <OBJECT>\n * 2: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, currentWeapon player] call ace_overheating_fnc_checkTemperature\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\n\n// Play animation and report temperature\nprivate _action = \"PutDown\";\nif (_assistant isEqualTo _gunner) then {\n    _action = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"ACE_checkTemperatureAction\");\n    if (_action == \"\") then {\n        _action = \"Gear\";\n    };\n};\n[_assistant, _action] call EFUNC(common,doGesture);\n\n// Waits a sec before displaying the temperature\n[FUNC(displayTemperature), [_gunner, _weapon], 1.0] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_overheating_fnc_checkTemperature"
      },
      {
        "fileName": "fnc_clearJam.sqf",
        "content": "/*\n * Author: Commy2\n * Make the unit clear the jam from a weapon\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Weapon <STRING>\n * 2: Skip anim? <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, currentWeapon player, false] call ace_overheating_fnc_clearJam\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\", [\"_skipAnim\", false]];\nTRACE_3(\"params\",_unit,_weapon,_skipAnim);\n\nprivate _jammedWeapons = _unit getVariable [QGVAR(jammedWeapons), []];\n\nif (_weapon in _jammedWeapons) then {\n    private _delay = 0;\n    if !(_skipAnim) then {\n        _delay = 2.5;\n        private _clearJamAction = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"ACE_clearJamAction\");\n\n        if (_clearJamAction == \"\") then {\n            _clearJamAction = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"reloadAction\");\n        };\n\n        [_unit, _clearJamAction, 1] call EFUNC(common,doGesture);\n        if (_weapon == primaryWeapon _unit) then {\n            playSound QGVAR(fixing_rifle);\n        } else {\n            if (_weapon == secondaryWeapon _unit) then {\n                playSound QGVAR(fixing_pistol);\n            };\n        };\n    };\n\n    // Check if the jam will be successfull\n    if (random 1 > GVAR(unJamFailChance)) then {\n        // Success\n        _jammedWeapons = _jammedWeapons - [_weapon];\n        _unit setVariable [QGVAR(jammedWeapons), _jammedWeapons];\n        if (_jammedWeapons isEqualTo []) then {\n            private _id = _unit getVariable [QGVAR(JammingActionID), -1];\n            [_unit, \"DefaultAction\", _id] call EFUNC(common,removeActionEventHandler);\n            _unit setVariable [QGVAR(JammingActionID), -1];\n        };\n        if (GVAR(DisplayTextOnJam)) then {\n            [{\n                [localize LSTRING(WeaponUnjammed)] call EFUNC(common,displayTextStructured);\n            }, [], _delay] call CBA_fnc_waitAndExecute;\n        };\n    } else {\n        // Failure\n        if (GVAR(DisplayTextOnJam)) then {\n            [{\n                [localize LSTRING(WeaponUnjamFailed)] call EFUNC(common,displayTextStructured);\n            }, [], _delay] call CBA_fnc_waitAndExecute;\n        };\n    };\n};\n",
        "functionName": "ace_overheating_fnc_clearJam"
      },
      {
        "fileName": "fnc_displayTemperature.sqf",
        "content": "/*\n * Author: Commy2 and esteldunedain\n * Displays the weapon temperature\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Values:\n * None\n *\n * Example:\n * [player, currentWeapon player] call ace_overheating_fnc_displayTemperature\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\nTRACE_2(\"params\",_unit,_weapon);\n\n// Get unit's weapon's temperature:\nprivate _tempVarName = format [QGVAR(%1_temp), _weapon];\nprivate _temperature = _unit getVariable [_tempVarName, 0];\n\nprivate _scaledTemperature = (_temperature / 1000) min 1;\n\nprivate _color = [\n    2 * (_scaledTemperature * 2 min 1) min 1,\n    2 * (1 - (_scaledTemperature * 2 min 1)) min 1,\n    00\n];\n\nprivate _count = round (12 * _scaledTemperature);\nprivate _string = \"\";\nfor \"_a\" from 1 to _count do {\n    _string = _string + \"|\";\n};\nprivate _text = [_string, _color] call EFUNC(common,stringToColoredText);\n\n_string = \"\";\nfor \"_a\" from (_count + 1) to 12 do {\n    _string = _string + \"|\";\n};\n\nTRACE_3(\"\",_temperature,_color,_string);\n\n_text = composeText [_text, [_string, [0.5, 0.5, 0.5]] call EFUNC(common,stringToColoredText)];\n\nprivate _picture = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\");\n\n[_text, _picture] call EFUNC(common,displayTextPicture);\n",
        "functionName": "ace_overheating_fnc_displayTemperature"
      },
      {
        "fileName": "fnc_firedEH.sqf",
        "content": "/*\n * Author: Commy2 and esteldunedain\n * Handle weapon fire. Called from the unified fired EH 1- always for the local player 2- and for non local players if dispersion is simulated.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_overheating_fnc_firedEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nBEGIN_COUNTER(firedEH);\n\nif ((_unit distance ACE_player) > 3000\n    || {(_muzzle != (primaryWeapon _unit)) && {_muzzle != (handgunWeapon _unit)}}) exitWith { // Only rifle or pistol muzzles (ignore grenades / GLs)\n    END_COUNTER(firedEH);\n};\n\n// Get current temperature from the unit variable\nprivate _temperature = _unit getVariable [format [QGVAR(%1_temp), _weapon], 0];\nprivate _scaledTemperature = linearConversion [0, 1000, _temperature, 0, 1, true];\n\nTRACE_2(\"Unit fired with temp:\",_unit,_temperature);\n\n// Get weapon data from cache:\n([_weapon] call FUNC(getWeaponData)) params [\"_dispersion\", \"_slowdownFactor\", \"_jamChance\"];\nTRACE_4(\"weapon data from cache\",_weapon,_dispersion,_slowdownFactor,_jamChance);\n\nif (_scaledTemperature > 0.1) then {\n    // Dispersion and bullet slow down\n    if (GVAR(overheatingDispersion)) then {\n        if (isNil QGVAR(pseudoRandomList)) exitWith {ERROR(\"No pseudoRandomList sync\");};\n\n        //Dispersion: 0 mils @ 0°C, 0.5 mils @ 333°C, 2.2 mils @ 666°C, 5 mils at 1000°C\n        _dispersion = _dispersion * 0.28125 * (_scaledTemperature^2);\n\n        _slowdownFactor = _slowdownFactor * linearConversion [0.666, 1, _scaledTemperature, 0, -0.1, true];\n\n        // Get the pseudo random values for dispersion from the remaining ammo count\n        (GVAR(pseudoRandomList) select ((_unit ammo _weapon) mod (count GVAR(pseudoRandomList)))) params [\"_dispersionX\", \"_dispersionY\"];\n\n        TRACE_4(\"change\",_dispersion,_slowdownFactor,_dispersionX,_dispersionY);\n\n        TRACE_PROJECTILE_INFO(_projectile);\n        [_projectile, _dispersionX * _dispersion, _dispersionY * _dispersion, _slowdownFactor * vectorMagnitude (velocity _projectile)] call EFUNC(common,changeProjectileDirection);\n        TRACE_PROJECTILE_INFO(_projectile);\n    };\n    \n    // Particle Effects\n    if (GVAR(showParticleEffects)\n        && {GVAR(showParticleEffectsForEveryone) || {_unit == ACE_player} || {_unit distance ACE_player <= 20}}\n        && {CBA_missionTime > (_unit getVariable [QGVAR(lastDrop), -1000]) + 0.40}) then {\n        \n        _unit setVariable [QGVAR(lastDrop), CBA_missionTime];\n\n        private _direction = (_unit weaponDirection _weapon) vectorMultiply 0.25;\n        private _position = (position _projectile) vectorAdd (_direction vectorMultiply (4*(random 0.30)));\n\n        // Refract SFX, beginning at temp 100°C and maxs out at 500°C\n        private _intensity = linearConversion [0.1, 0.5, _scaledTemperature, 0, 1, true];\n        TRACE_3(\"refract\",_direction,_position,_intensity);\n        if (_intensity > 0) then {\n            drop [\n            \"\\A3\\data_f\\ParticleEffects\\Universal\\Refract\", \"\", \"Billboard\", 10, 2, _position, _direction, 0, 1.2, 1.0,\n            0.1, [0.10,0.25], [[0.6,0.6,0.6,0.3 * _intensity],[0.2,0.2,0.2,0.05 * _intensity]], [0,1], 0.1, 0.05, \"\", \"\", \"\"];\n        };\n        // Smoke SFX, beginning at temp 150°C\n        private _intensity = linearConversion [0.15, 1, _scaledTemperature, 0, 1, true];\n        TRACE_3(\"smoke\",_direction,_position,_intensity);\n        if (_intensity > 0) then {\n            drop [\n            [\"\\A3\\data_f\\ParticleEffects\\Universal\\Universal\", 16, 12, 1, 16], \"\", \"Billboard\", 10, 1.2, _position,\n            [0,0,0.15], 100 + random 80, 1.275, 1, 0.025, [0.15,0.43], [[0.6,0.6,0.6,0.5 * _intensity],[0.2,0.2,0.2,0.15 * _intensity]],\n            [0,1], 1, 0.04, \"\", \"\", \"\"];\n        };\n    };\n};\n\n// ------  LOCAL PLAYER ONLY ------------\n// Only compute jamming for the local player\nif (_unit != ACE_player) exitWith {END_COUNTER(firedEH);};\n\n// Compute new temperature once every 3 bullets\nif ((_unit ammo _weapon) % 3 == 0) then {\n    _this call FUNC(overheat);\n};\n\nprivate _value = 5 * _scaledTemperature;\nprivate _array = [0.5, 1, 2, 8, 20, 150];\n_jamChance = _jamChance * linearConversion [0, 1, _value % 1, _array select floor _value, _array select ceil _value];\n\nTRACE_3(\"check for random jam\",_unit,_weapon,_jamChance);\n\nprivate _randomNumber = random 1;\n\n// Fail early if we know that we won't have a malfunction regardless of the ground type.\nif (_randomNumber < _jamChance * 2) then {\n    if (_randomNumber > _jamChance) then {\n        // Increase jam chance on dusty grounds if prone (and at ground level)\n        if ((stance _unit == \"PRONE\") && {((getPosATL _unit) select 2) < 1}) then {\n            private _surface = configFile >> \"CfgSurfaces\" >> ((surfaceType getPosASL _unit) select [1]);\n            if (isClass _surface) then {\n                TRACE_1(\"dust\",getNumber (_surface >> \"dust\"));\n                _jamChance = _jamChance + (getNumber (_surface >> \"dust\")) * _jamChance;\n            };\n        };\n    };\n    if (_randomNumber < _jamChance) then {\n        [_unit, _weapon] call FUNC(jamWeapon);\n    };\n};\n\nEND_COUNTER(firedEH);\n",
        "functionName": "ace_overheating_fnc_firedEH"
      },
      {
        "fileName": "fnc_getWeaponData.sqf",
        "content": "/*\n * Author: PabstMirror and esteldunedain\n * Get weapon data with caching\n *\n * Arguments:\n * 0: weapon type <STRING>\n *\n * Return Value:\n * 0: dispresion <NUMBER>\n * 1: slowdownFactor <NUMBER>\n * 2: jamChance <NUMBER>\n *\n * Example:\n * [\"gun\"] call ace_overheating_fnc_getWeaponData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_weapon\"];\n\n// Look in the cache first\nprivate _weaponData = GVAR(cacheWeaponData) getVariable _weapon;\nif (!isNil \"_weaponData\") exitWith {_weaponData};\n\n// Search the config\n// The old and new properties have the same name for dispersion, so read whichever is closer to the children\nprivate _property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(dispersion);\nprivate _dispersion = if (isNumber _property) then {\n    getNumber _property;\n} else {\n    if (isArray _property) then {\n        // Map old array property to new number property\n        ((getArray _property) select 3) / 0.004;\n    } else {\n        1;\n    };\n};\n\n// The old and new properties have the same name for slowdownFactor, so read whichever is closer to the children\n_property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(slowdownFactor);\nprivate _slowdownFactor = if (isNumber _property) then {\n    getNumber _property;\n} else {\n    if (isArray _property) then {\n        // Map old array property to new number property\n        ((getArray _property) select 3) / 0.9;\n    } else {\n        1;\n    };\n};\n\n// For jam chance, try reading the legacy property first (ace_overheating_jamChance).\nprivate _jamChance = 1 / 3000;\n_property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(JamChance);\n// If it exists read it, as the weapon is probably third party and not updated to the new properties\nif (isArray _property) then {\n    // Map old array property to new number property\n    _jamChance = (getArray _property) select 1;\n} else {\n    // No legacy property was found, look for the new one\n    _property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(mrbs);\n    if (isNumber _property) then {\n        _jamChance = 1 / getNumber _property;\n    };\n};\n\n// Cache the values\n_weaponData = [_dispersion, _slowdownFactor, _jamChance];\nTRACE_2(\"building cache\",_weapon,_weaponData);\nGVAR(cacheWeaponData) setVariable [_weapon, _weaponData];\n\n_weaponData\n",
        "functionName": "ace_overheating_fnc_getWeaponData"
      },
      {
        "fileName": "fnc_handleTakeEH.sqf",
        "content": "/*\n * Author: Commy2\n * Handle \"take\" event\n * I think it fixs jams when manually dragging a new magazine in from player's inventory\n *\n * Arguments:\n * 0: unit - Object the event handler is assigned to <OBJECT>\n * 1: container <OBJECT>\n * 2: item <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, thing, \"thing\"] call ace_overheating_fnc_handleTakeEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif !(GVAR(unJamOnreload)) exitWith {};\n\nparams [\"_unit\", \"_container\", \"_item\"];\nTRACE_3(\"params\",_unit,_container,_item);\n\nif ((_unit == ACE_player)\n        && {_container in [uniformContainer _unit, vestContainer _unit, backpackContainer _unit]}\n        && {_item == currentMagazine _unit}) then { //Todo: should this be any valid magazine for any jammed gun?\n\n    TRACE_1(\"clearing jam\",currentWeapon _unit);\n    [_unit, currentWeapon _unit, true] call FUNC(clearJam)\n\n};\n",
        "functionName": "ace_overheating_fnc_handleTakeEH"
      },
      {
        "fileName": "fnc_jamWeapon.sqf",
        "content": "/*\n * Author: Commy2, based on KK_fnc_playerWeaponMulfunction from KillzoneKid\n * Jam the weapon\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, currentWeapon player] call ace_overheating_fnc_jamWeapon\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\nTRACE_2(\"params\",_unit,_weapon);\n\n// don't jam a weapon with no rounds left\nprivate _ammo = _unit ammo _weapon;\nif (_ammo == 0) exitWith {};\n\nprivate _jammedWeapons = _unit getVariable [QGVAR(jammedWeapons), []];\n_jammedWeapons pushBack _weapon;\n\n_unit setVariable [QGVAR(jammedWeapons), _jammedWeapons];\n\n\n\n// Stop current burst\nif (_ammo > 0) then {\n    _unit setAmmo [_weapon, 0];\n    // this is to re-activate the 'DefaultAction', so you can jam a weapon while full auto shootin\n    [{\n        params [\"_unit\", \"_weapon\", \"_ammo\"];\n        _unit setAmmo [_weapon, _ammo];\n    }, [_unit, _weapon, _ammo]] call CBA_fnc_execNextFrame;\n};\n\n// only display the hint once, after you try to shoot an already jammed weapon\nGVAR(knowAboutJam) = false;\n\n[\"ace_weaponJammed\", [_unit,_weapon]] call CBA_fnc_localEvent;\n\n\nif (_unit getVariable [QGVAR(JammingActionID), -1] == -1) then {\n\n    private _condition = {\n        [_this select 1] call CBA_fnc_canUseWeapon\n        && {currentMuzzle (_this select 1) in ((_this select 1) getVariable [QGVAR(jammedWeapons), []])}\n        && {!(currentMuzzle (_this select 1) in ((_this select 1) getVariable [QEGVAR(safemode,safedWeapons), []]))}\n    };\n\n    private _statement = {\n        playSound3D [\"a3\\sounds_f\\weapons\\Other\\dry9.wss\", _this select 0];\n\n        if (!(missionNamespace getVariable [QGVAR(knowAboutJam), false]) && {(_this select 1) ammo currentWeapon (_this select 1) > 0} && {GVAR(DisplayTextOnJam)}) then {\n            [localize LSTRING(WeaponJammed)] call EFUNC(common,displayTextStructured);\n            GVAR(knowAboutJam) = true;\n        };\n    };\n\n    private _id = [_unit, \"DefaultAction\", _condition, _statement] call EFUNC(common,addActionEventHandler);\n\n    _unit setVariable [QGVAR(JammingActionID), _id];\n};\n",
        "functionName": "ace_overheating_fnc_jamWeapon"
      },
      {
        "fileName": "fnc_loadCoolestSpareBarrel.sqf",
        "content": "/*\n * Author: esteldunedain\n * Collect the temperature of all the spare barrels a unit has and load the\n * coolest on the unit weapon. Runs on the server.\n *\n * Arguments:\n * 0: Unit that has the spare barrels <OBJECT>\n * 1: Unit that has the weapon <OBJECT>\n * 2: Weapon <STRING>\n * 3: Weapon temp before switching <NUMBER>\n * 4: Mass of the removed barrel <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, bob, \"weapon\",5, 2] call ace_overheating_fnc_loadCoolestSpareBarrel\n *\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_assistant\", \"_gunner\", \"_weapon\", \"_weaponTemp\", \"_barrelMass\"];\nTRACE_5(\"loadCoolestSpareBarrel1\",_assistant,_gunner,_weapon,_weaponTemp,_barrelMass);\nprivate _weaponBarrelClass = getText (configFile >> 'CfgWeapons' >> _weapon >> QGVAR(barrelClassname));\n//If the weapon has no defined classname then use the ACE one\nif(_weaponBarrelClass == \"\") then {\n    _weaponBarrelClass = \"ACE_SpareBarrel\";\n};\n// Find all spare barrel the player has\nprivate _allBarrels = [_assistant, _weaponBarrelClass] call CBA_fnc_getMagazineIndex;\nTRACE_1(\"_allBarrels\",_allBarrels);\nif ((count _allBarrels) < 1) exitWith {};\n\n// Determine which on is coolest\nprivate _coolestTemp = 10000;\nprivate _coolestMag = _allBarrels select 0;\n{\n    private _temp = 0;\n    if ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashHasKey) then {\n        _temp = ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashGet) select 0;\n    };\n    TRACE_2(\"loadCoolestSpareBarrel4\",_x,_temp);\n    if (_temp < _coolestTemp) then {\n        _coolestTemp = _temp;\n        _coolestMag = _x;\n    };\n} forEach _allBarrels;\nTRACE_3(\"loadCoolestSpareBarrel5\",_coolestTemp,_coolestMag,_weaponTemp);\n\n// The new weapon temperature is similar to the coolest barrel\n// Publish the new temperature value\n_gunner setVariable [format [QGVAR(%1_temp), _weapon], _coolestTemp, true];\n\n// Heat up the coolest barrel to the former weapon temperature\n[GVAR(storedSpareBarrels), _coolestMag, [_weaponTemp, CBA_missionTime, _barrelMass]] call CBA_fnc_hashSet;\n\n// Send an event so the machines of the assistant and gunner can show the hint\n[QGVAR(showWeaponTemperature), [_gunner, _weapon], [_assistant, _gunner]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_overheating_fnc_loadCoolestSpareBarrel"
      },
      {
        "fileName": "fnc_overheat.sqf",
        "content": "/*\n * Author: Commy2 and esteldunedain\n * Handle weapon fire, heat up the weapon\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n * 3: Muzzle <STRING>\n * 4: Ammo <STRING>\n * 5: Magazine <STRING>\n * 6: Projectile <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"weapon\", \"muzzle\", \"ammo\", \"magazine\", bullet] call ace_overheating_fnc_overheat\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\", \"\", \"\", \"_ammo\", \"\", \"_projectile\"];\nTRACE_4(\"params\",_unit,_weapon,_ammo,_projectile);\n\nBEGIN_COUNTER(overheat);\n\n// Get bullet parameters\nprivate _energyIncrement = GVAR(cacheAmmoData) getVariable _ammo;\nif (isNil \"_energyIncrement\") then {\n    _bulletMass = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ACE_BulletMass\");\n    if (_bulletMass == 0) then {\n        // If the bullet mass is not configured, estimate it\n        _bulletMass = 3.4334 + 0.5171 * (getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"hit\") + getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"caliber\"));\n    };\n    \n    // Projectile motion is roughly equal to Barrel heat\n    // Ref: https://en.wikipedia.org/wiki/Physics_of_firearms\n    // Muzzle Engergy = 1/2 * m * v^2 = (1/2 * 0.001 g/kg * bulletMass (grams) * v^2)\n    // Multiple by 3 becase we only calc every 3rd bullet: (3 * 1/2 * 0.001) = 0.0015\n    private _energyIncrement = 0.0015 * _bulletMass * (vectorMagnitudeSqr velocity _projectile);\n\n    GVAR(cacheAmmoData) setVariable [_ammo, _energyIncrement];\n};\n\n// Increase overheating depending on how obstrusive is the current supressor,\n// if any. Typical arma supressors have visibleFire=0.5 and audibleFire=0.3,\n// so they produce x2.1 overheating\nprivate _silencer = switch (_weapon) do {\n    case (primaryWeapon _unit) : {(primaryWeaponItems _unit) select 0};\n    case (handgunWeapon _unit) : {(handgunItems _unit) select 0};\n    default {\"\"};\n};\nif (_silencer != \"\") then {\n    private _silencerCoef = GVAR(cacheSilencerData) getVariable _silencer;\n    if (isNil \"_silencerCoef\") then {\n        _silencerCoef = 1 +\n                        (1 - getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"audibleFire\")) +\n                        (1 - getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"visibleFire\"));\n        GVAR(cacheSilencerData) setVariable [_silencer, _silencerCoef];\n    };\n    _energyIncrement = _energyIncrement * _silencerCoef;\n};\n\nTRACE_1(\"heat\",_energyIncrement);\n\n[_unit, _weapon, _energyIncrement] call FUNC(updateTemperature);\n\nEND_COUNTER(overheat);\n",
        "functionName": "ace_overheating_fnc_overheat"
      },
      {
        "fileName": "fnc_sendSpareBarrelsTemperaturesHint.sqf",
        "content": "/*\n * Author: esteldunedain\n * Collect the temperature of all the spare barrels a unit has and send a hint\n * to a client. Runs on the server.\n *\n * Arguments:\n * 0: Target unit of the hint <OBJECT>\n * 1: Unit that has the spare barrels <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"bob\"] call ace_overheating_fnc_sendSpareBarrelsIsTemperaturesHint\n *\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\",\"_unit\"];\n\n// Find all spare barrel the player has\nTRACE_2(\"sendSpareBarrelsTemperatureHunt\",_player,_unit);\n//Get the weapon of the target unit\nprivate _weapon = currentWeapon _player;\n//Get the classname of the spare barrel of that weapon\nprivate _weaponBarrelClass = getText (configFile >> 'CfgWeapons' >> _weapon >> QGVAR(barrelClassname));\n//If the weapon has no defined classname then use the ACE one\nif(_weaponBarrelClass == \"\") then {\n    _weaponBarrelClass = \"ACE_SpareBarrel\";\n};\nprivate _allBarrels = [_unit, _weaponBarrelClass] call CBA_fnc_getMagazineIndex;\nTRACE_1(\"_allBarrels\",_allBarrels);\nif ((count _allBarrels) < 1) exitWith {};\n\n// Determine the temp of each barrel\nprivate _temps = [];\n{\n    private _temp = 0;\n    if ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashHasKey) then {\n        _temp = ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashGet) select 0;\n    };\n    _temps pushBack _temp;\n} forEach _allBarrels;\nTRACE_1(\"_temps\",_temps);\n\n// Count cool\nprivate _countCool = {_x < 20} count _temps;\nprivate _countWarm = {(_x >= 20) && (_x < 100)} count _temps;\nprivate _countHot = {(_x >= 100) && (_x < 200)} count _temps;\nprivate _countVeryHot = {(_x >= 200) && (_x < 600)} count _temps;\nprivate _countExtremelyHot = {_x >= 600} count _temps;\nprivate _output = [\"%1 %2%3%4 %5%6%7 %8%9%10 %11%12%13 %14\"];\nprivate _size = 1.0;\nif (_countCool > 0) then {\n    _output pushBack _countCool;\n    _output pushBack LSTRING(BarrelCool);\n    _output pushBack \"<br/>\";\n    _size = _size + 0.5;\n};\nif (_countWarm > 0) then {\n    _output pushBack _countWarm;\n    _output pushBack LSTRING(BarrelWarm);\n    _output pushBack \"<br/>\";\n    _size = _size + 0.5;\n};\nif (_countHot > 0) then {\n    _output pushBack _countHot;\n    _output pushBack LSTRING(BarrelHot);\n    _output pushBack \"<br/>\";\n    _size = _size + 0.5;\n};\nif (_countVeryHot > 0) then {\n    _output pushBack _countVeryHot;\n    _output pushBack LSTRING(BarrelVeryHot);\n    _output pushBack \"<br/>\";\n    _size = _size + 0.5;\n};\nif (_countExtremelyHot > 0) then {\n    _output pushBack _countExtremelyHot;\n    _output pushBack LSTRING(BarrelExtremelyHot);\n    _size = _size + 0.5;\n};\n\nTRACE_1(\"_output\",_output);\n[QEGVAR(common,displayTextStructured), [_output, _size, _player], [_player]] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_overheating_fnc_sendSpareBarrelsTemperaturesHint"
      },
      {
        "fileName": "fnc_swapBarrel.sqf",
        "content": "/*\n * Author: Commy2\n * Make a unit start swapping it's barrel\n *\n * Arguments:\n * 0: Unit initiating the action <OBJECT>\n * 1: Unit that has the weapon <OBJECT>\n * 2: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorTarget, player, currentWeapon player] call ace_overheating_fnc_swapBarrel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\n\n// Make the standing player kneel down\nif (stance _gunner != \"PRONE\") then {\n    [_gunner, \"amovpknlmstpsraswrfldnon\", 1] call EFUNC(common,doAnimation);\n};\n\n// Barrel dismount gesture\n[_gunner, QGVAR(GestureDismountMuzzle)] call EFUNC(common,doGesture);\nplaySound \"ACE_BarrelSwap\";\n\nprivate _duration = 3.0;\nif (_assistant isEqualTo _gunner) then {\n    _duration = 5.0;\n};\n\n[_duration, [_assistant,_gunner,_weapon], {(_this select 0) call FUNC(swapBarrelCallback)}, {}, localize LSTRING(SwappingBarrel), nil, [\"isNotInside\", \"isNotSitting\", \"isNotSwimming\"]] call EFUNC(common,progressBar);\n",
        "functionName": "ace_overheating_fnc_swapBarrel"
      },
      {
        "fileName": "fnc_swapBarrelAssistant.sqf",
        "content": "/*\n * Author: esteldunedain, Commy2\n * Make a unit start swapping the barrel of another unit\n *\n * Arguments:\n * 0: Unit initiating the action <OBJECT>\n * 1: Unit that has the weapon <OBJECT>\n * 2: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorTarget, currentWeapon cursorTarget] call ace_overheating_fnc_swapBarrelAssistant\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\n\n// Make the standing player kneel down\nif (stance _assistant != \"PRONE\") then {\n    [_assistant, \"amovpknlmstpsraswrfldnon\", 1] call EFUNC(common,doAnimation);\n};\n\n// Barrel dismount gesture\nplaySound \"ACE_BarrelSwap\";\n\n[3, [_assistant, _gunner, _weapon], {}, {}, localize LSTRING(SwappingBarrel), nil, [\"isNotInside\", \"isNotSitting\", \"isNotSwimming\"]] call EFUNC(common,progressBar);\n\n[QGVAR(initiateSwapBarrelAssisted), [_assistant, _gunner, _weapon], _gunner] call CBA_fnc_targetEvent;\n",
        "functionName": "ace_overheating_fnc_swapBarrelAssistant"
      },
      {
        "fileName": "fnc_swapBarrelCallback.sqf",
        "content": "/*\n * Author: Commy2, esteldunedain\n * Swap barrel callback\n *\n * Arguments:\n * 0: Unit initiating the action <OBJECT>\n * 1: Unit that has the weapon <OBJECT>\n * 2: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, currentWeapon player] call ace_overheating_fnc_swapBarrelCallback\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\n\nif (_assistant isEqualTo _gunner) then {\n    // Barrel mount gesture\n    [_gunner, QGVAR(GestureMountMuzzle)] call EFUNC(common,doGesture);\n    playSound \"ACE_BarrelSwap\";\n};\n\n// don't consume the barrel, but rotate through them.\n[localize LSTRING(SwappedBarrel), QPATHTOF(UI\\spare_barrel_ca.paa)] call EFUNC(common,displayTextPicture);\n\nprivate _temp = _gunner getVariable [format [QGVAR(%1_temp), _weapon], 0];\nprivate _barrelMass = METAL_MASS_RATIO * (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"WeaponSlotsInfo\" >> \"mass\") / 22.0) max 1.0;\n\n// Instruct the server to load the coolest spare barrel into the weapon and\n// store the removed barrel with the former weapon temperature. The server\n// also updates the current weapon temperature to match that of the new\n// loaded barrel.\n[QGVAR(loadCoolestSpareBarrel), [_assistant, _gunner, _weapon, _temp, _barrelMass]] call CBA_fnc_serverEvent;\n\n// Store the update time\n_gunner setVariable [format [QGVAR(%1_time), _weapon], CBA_missionTime];\n",
        "functionName": "ace_overheating_fnc_swapBarrelCallback"
      },
      {
        "fileName": "fnc_updateSpareBarrelsTemperaturesThread.sqf",
        "content": "/*\n * Author: esteldunedain\n * Calculate cooldown of all the stored spare barrels.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_overheating_fnc_updateSpareBarrelsTemperaturesThread\n *\n * Public: No\n */\n// #define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nprivate _pairs = [];\nTRACE_1(\"updateSpareBarrelsTemperaturesThread1\",GVAR(storedSpareBarrels));\n[GVAR(storedSpareBarrels), {\n    //IGNORE_PRIVATE_WARNING [\"_key\", \"_value\"];\n    _pairs pushBack [_key, _value];\n}] call CBA_fnc_hashEachPair;\nTRACE_1(\"updateSpareBarrelsTemperaturesThread2\",_pairs);\n{\n    _x params [\"_barrelMagazineID\",\"_value\"];\n    _value params [\"_initialTemp\",\"_initialTime\", \"_barrelMass\"];\n\n    // Calculate cooling\n    private _finalTemp = [_initialTemp, _barrelMass, CBA_missionTime - _initialTime] call FUNC(calculateCooling);\n    TRACE_4(\"updateSpareBarrelsTemperaturesThread3\",_barrelMagazineID,_initialTemp,_finalTemp,_barrelMass);\n    if (_finalTemp < 5) then {\n        // The barrel is cool enough to keep calculating. Remove it from the hash\n        [GVAR(storedSpareBarrels), _barrelMagazineID] call CBA_fnc_hashRem;\n    } else {\n        // Store the new temp\n        [GVAR(storedSpareBarrels), _barrelMagazineID, [_finalTemp, CBA_missionTime, _barrelMass]] call CBA_fnc_hashSet;\n    };\n} forEach _pairs;\n\n// Schedule for execution again after 10 seconds\n[DFUNC(updateSpareBarrelsTemperaturesThread), [], 10] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_overheating_fnc_updateSpareBarrelsTemperaturesThread"
      },
      {
        "fileName": "fnc_updateTemperature.sqf",
        "content": "/*\n * Author: esteldunedain\n * Update temperature of a weapon.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n * 2: Heat increment (J) <NUMBER>\n *\n * Return Value:\n * Current temperature <NUMBER>\n *\n * Example:\n * [player, currentWeapon player, 2000] call ace_overheating_fnc_updateTemperature\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\", \"_heatIncrement\"];\nTRACE_3(\"params\",_unit,_weapon,_heatIncrement);\n\n// get old values\n// each weapon has it's own variable. Can't store the temperature in the weapon since they are not objects unfortunately.\nprivate _tempVarName = format [QGVAR(%1_temp), _weapon];\nprivate _timeVarName = format [QGVAR(%1_time), _weapon];\nprivate _temperature = _unit getVariable [_tempVarName, 0];\nprivate _lastTime = _unit getVariable [_timeVarName, 0];\n\nprivate _barrelMass = METAL_MASS_RATIO * (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"WeaponSlotsInfo\" >> \"mass\") / 22.0) max 1.0;\n\n// Calculate cooling\n_temperature = [_temperature, _barrelMass, CBA_missionTime - _lastTime] call FUNC(calculateCooling);\n\nTRACE_1(\"cooledTo\",_temperature);\n// Calculate heating\n// Steel Heat Capacity = 466 J/(Kg.K)\n_temperature = _temperature + _heatIncrement / (_barrelMass * 466);\n\n// Publish the temperature variable\n[_unit, _tempVarName, _temperature, TEMP_TOLERANCE] call EFUNC(common,setApproximateVariablePublic);\n// Store the update time locally\n_unit setVariable [_timeVarName, CBA_missionTime];\n\n_temperature\n",
        "functionName": "ace_overheating_fnc_updateTemperature"
      },
      {
        "fileName": "fnc_updateTemperatureThread.sqf",
        "content": "/*\n * Author: esteldunedain\n * Update cooldown calculation of all player weapons at regular intervals.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_overheating_fnc_updateTemperatureThread\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _currentWeapon = currentWeapon ACE_player;\nif ((_currentWeapon != \"\") && {_currentWeapon == primaryWeapon ACE_player || {_currentWeapon == handgunWeapon ACE_player}}) then {\n    [ACE_player, _currentWeapon, 0] call FUNC(updateTemperature);\n};\n\n// Schedule for execution again after 5 seconds\n[DFUNC(updateTemperatureThread), [], 5] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_overheating_fnc_updateTemperatureThread"
      }
    ]
  },
  {
    "component": "overpressure",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"settingsInit eh\",GVAR(distanceCoefficient));\n    if (GVAR(distanceCoefficient) <= 0) exitWith {};\n\n    [\"ace_overpressure\", LINKFUNC(overpressureDamage)] call CBA_fnc_addEventHandler;\n\n    // Register fire event handler\n    [\"ace_firedPlayer\", LINKFUNC(firedEHBB)] call CBA_fnc_addEventHandler;\n    [\"ace_firedPlayerVehicle\", LINKFUNC(firedEHOP)] call CBA_fnc_addEventHandler;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_cacheOverPressureValues.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Cache the shot data for a given weapon/mag/ammo combination.\n * Will use the config that has the highest priority.\n *\n * Arguments:\n * 0: Weapon <STRING>\n * 1: Magazine <STRING>\n * 2: Ammo <STRING>\n *\n * Return Value:\n * Shot Config <ARRAY>:\n *  0: Angle <Number>\n *  1: Range <Number>\n *  2: Damage <Number>\n *\n * Example: \n * [\"cannon_125mm\",\"Sh_125mm_APFSDS_T_Green\",\"24Rnd_125mm_APFSDS_T_Green\"] call ace_overpressure_fnc_cacheOverPressureValues\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_weapon\", \"_ammo\", \"_magazine\"];\nTRACE_3(\"Parameter\",_weapon,_magazine,_ammo);\n\n// get Priority Array from Config\nprivate _array = [\n    getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(priority)),\n    getNumber (configFile >> \"CfgMagazines\" >> _magazine >> QGVAR(priority)),\n    getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(priority))\n];\n\n(_array call CBA_fnc_findMax) params [\"\", [\"_indexOfMaxPriority\", 0, [0]]];\n\nTRACE_2(\"Priority Array\",_array,_indexOfMaxPriority);\n\n// create the Config entry Point\nprivate _config = [\n    (configFile >> \"CfgWeapons\" >> _weapon),\n    (configFile >> \"CfgMagazines\" >> _magazine),\n    (configFile >> \"CfgAmmo\" >> _ammo)\n] select _indexOfMaxPriority;\nTRACE_1(\"ConfigPath\",_config);\n\n// get the Variables out of the Configes and create a array with then\nprivate _return = [\n    (getNumber (_config >> QGVAR(angle))),\n    (getNumber (_config >> QGVAR(range))) * GVAR(distanceCoefficient),\n    (getNumber (_config >> QGVAR(damage)))\n];\n\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\nmissionNameSpace setVariable [_varName, _return];\nTRACE_2(\"Return\",_varName,_return);\n\n_return\n",
        "functionName": "ace_overpressure_fnc_cacheOverPressureValues"
      },
      {
        "fileName": "fnc_firedEHBB.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Handle fire of local launchers. Called from the unified fired EH only for the local player.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"launch_RPG32_F\", \"launch_RPG32_F\", \"Single\", \"R_PG32V_F\", \"RPG32_F\", projectile] call ace_overpressure_fnc_firedEHBB;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\n// Bake variable name and check if the variable exists, call the caching function otherwise\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\nprivate _var = if (isNil _varName) then {\n    [_weapon, _ammo, _magazine] call FUNC(cacheOverPressureValues);\n} else {\n    missionNameSpace getVariable _varName;\n};\n_var params [\"_backblastAngle\",\"_backblastRange\",\"_backblastDamage\"];\nTRACE_3(\"cache\",_backblastAngle,_backblastRange,_backblastDamage);\n\nif (_backblastDamage <= 0) exitWith {};\n\nprivate _position = getPosASL _projectile;\nprivate _direction = [0, 0, 0] vectorDiff (vectorDir _projectile);\n\n// Damage to others\nprivate _affected = (ASLtoAGL _position) nearEntities [\"CAManBase\", _backblastRange];\n\n// Let each client handle their own affected units\n[\"ace_overpressure\", [_unit, _position, _direction, _weapon, _magazine, _ammo], _affected] call CBA_fnc_targetEvent;\n\n// Damage to the firer\nprivate _distance = 2 * ([_position, _direction, _backblastRange, _unit] call FUNC(getDistance));\n\nTRACE_1(\"Distance\",_distance);\n\nif (_distance < _backblastRange) then {\n    private _alpha = sqrt (1 - _distance / _backblastRange);\n    private _beta = sqrt 0.5;\n\n    private _damage = _alpha * _beta * _backblastDamage;\n    [_damage * 100] call BIS_fnc_bloodEffect;\n\n    if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") && {([_unit] call EFUNC(medical,hasMedicalEnabled))}) then {\n        [_unit, _damage, \"body\", \"backblast\"] call EFUNC(medical,addDamageToUnit);\n    } else {\n        _unit setDamage (damage _unit + _damage);\n    };\n};\n\n// Draw debug lines\n#ifdef DEBUG_MODE_FULL\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _backblastRange),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n\n    private _ref = _direction call EFUNC(common,createOrthonormalReference);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorAdd ((_ref select 1) vectorMultiply _backblastRange * tan _backblastAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorDiff ((_ref select 1) vectorMultiply _backblastRange * tan _backblastAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorAdd ((_ref select 2) vectorMultiply _backblastRange * tan _backblastAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorDiff ((_ref select 2) vectorMultiply _backblastRange * tan _backblastAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply ((_distance/2) min _backblastRange)),\n        [1,0,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n#endif\n",
        "functionName": "ace_overpressure_fnc_firedEHBB"
      },
      {
        "fileName": "fnc_firedEHOP.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Handle fire of Vehicle Weapons. Called from the unified fired EH only for the local player vehicle.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [tank, \"cannon_125mm\", \"cannon_125mm\", \"player\", \"Sh_125mm_APFSDS_T_Green\", \"24Rnd_125mm_APFSDS_T_Green\", projectile] call ace_overpressure_fnc_firedEHOP\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\n// Bake variable name and check if the variable exists, call the caching function otherwise\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\nprivate _var = if (isNil _varName) then {\n    [_weapon, _ammo, _magazine] call FUNC(cacheOverPressureValues);\n} else {\n    missionNameSpace getVariable _varName;\n};\n_var params [\"_dangerZoneAngle\",\"_dangerZoneRange\",\"_dangerZoneDamage\"];\nTRACE_3(\"cache\",_dangerZoneAngle,_dangerZoneRange,_dangerZoneDamage);\n\nif (_dangerZoneDamage <= 0) exitWith {};\n\n\n\n// The weapon produces overpressure, calculate\nprivate _position = getPosASL _projectile;\nprivate _direction = vectorDir _projectile;\n\n// Damage to others\nprivate _affected = (ASLtoAGL _position) nearEntities [\"CAManBase\", _dangerZoneRange];\n\n// Let each client handle their own affected units\n[\"ace_overpressure\", [_unit, _position, _direction, _weapon, _magazine, _ammo], _affected] call CBA_fnc_targetEvent;\n\n// Draw debug lines\n#ifdef DEBUG_MODE_FULL\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange),\n        [1,0,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n\n    private _ref = _direction call EFUNC(common,createOrthonormalReference);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorAdd ((_ref select 1) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorDiff ((_ref select 1) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorAdd ((_ref select 2) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n    [   _position,\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorDiff ((_ref select 2) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\n        [1,1,0,1]\n    ] call EFUNC(common,addLineToDebugDraw);\n\n#endif\n",
        "functionName": "ace_overpressure_fnc_firedEHOP"
      },
      {
        "fileName": "fnc_getDistance.sqf",
        "content": "/*\n * Author: commy2 and esteldunedain\n * Calculate the distance to the first intersection of a line\n *\n * Arguments:\n * 0: Pos ASL of origin <ARRAY>\n * 1: Direction <ARRAY>\n * 2: Max distance to search <NUMBER>\n * 3: Shooter <OBJECT>\n *\n * Return Value:\n * Distance to intersection (999 if distance is greater than max) <NUMBER>\n *\n * Example:\n * [[1823.41,5729.05,6.66627], [-0.953255,0.109689,-0.281554], 15, ace_player] call ace_overpressure_fnc_getDistance\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_posASL\", \"_direction\", \"_maxDistance\", \"_shooter\"];\nTRACE_4(\"params\",_posASL,_direction,_maxDistance, _shooter);\n\nprivate _intersections = lineIntersectsSurfaces [_posASL, _posASL vectorAdd (_direction vectorMultiply _maxDistance), _shooter, objNull, true, 99];\n\nTRACE_1(\"lineIntersectsSurfaces\",_intersections);\n\nprivate _distance = 999;\n\n{\n    _x params [\"_intersectPosASL\", \"_surfaceNormal\", \"_intersectObject\"];\n    TRACE_3(\"Intersect\",_intersectPosASL,_surfaceNormal,_intersectObject);\n\n    //Hit something solid that can reflect - (Static covers Building)  [Need to manually filter out _shoot for FFV shots]\n    if ((isNull _intersectObject) || {(_intersectObject != _shooter) && {(_intersectObject isKindOf \"Static\") || {_intersectObject isKindOf \"AllVehicles\"}}}) exitWith {\n        _distance = _posASL vectorDistance _intersectPosASL;\n        TRACE_3(\"hit solid object\",_distance,_intersectObject,typeOf _intersectObject);\n\n        if (isNull _intersectObject) then {  //Terrain:\n            // Calculate the angle between the terrain and the back blast direction\n            private _angle = 90 - acos (- (_surfaceNormal vectorDotProduct _direction));\n            TRACE_3(\"Terrain Intersect\",_surfaceNormal,_direction,_angle);\n            // Angles is below 25deg, no backblast at all\n            if (_angle < 25) exitWith {_distance = 999};\n            // Angles is below 45deg the distance is increased according to the difference\n            if (_angle < 45) exitWith {_distance = _distance * (5 - 4 * sqrt ((_angle - 25)/20))};\n            // Angles above 45degcreate full backblast\n        };\n    };\n} forEach _intersections;\n\n_distance\n",
        "functionName": "ace_overpressure_fnc_getDistance"
      },
      {
        "fileName": "fnc_overpressureDamage.sqf",
        "content": "/*\n * Author: commy2 and esteldunedain\n * Calculate and apply backblast damage to potentially affected local units\n * Handles the \"overpressure\" event.\n *\n * Arguments:\n * 0: Unit that fired <OBJECT>\n * 1: Pos ASL of the projectile <ARRAY>\n * 2: Direction of the projectile (reversed for launcher backblast) <ARRAY>\n * 3: Weapon fired <STRING>\n * 4: Magazine <STRING>\n * 5: Ammo <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [tank, [1727.57,5786.15,7.24899], [-0.982474,-0.185998,-0.0122501], \"cannon_125mm\", \"24Rnd_125mm_APFSDS_T_Green\", \"Sh_125mm_APFSDS_T_Green\"] call ace_overpressure_fnc_overpressureDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_firer\", \"_posASL\", \"_direction\", \"_weapon\", \"_magazine\", \"_ammo\"];\n\n// Bake variable name and check if the variable exists, call the caching function otherwise\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\nprivate _var = if (isNil _varName) then {\n    [_weapon, _ammo, _magazine] call FUNC(cacheOverPressureValues);\n} else {\n    missionNameSpace getVariable _varName;\n};\n_var params [\"_overpressureAngle\",\"_overpressureRange\",\"_overpressureDamage\"];\nTRACE_3(\"cache\",_overpressureAngle,_overpressureRange,_overpressureDamage);\n\n{\n    if (local _x && {_x != _firer} && {vehicle _x == _x}) then {\n        private _targetPositionASL = eyePos _x;\n        private _relativePosition = _targetPositionASL vectorDiff _posASL;\n        private _axisDistance = _relativePosition vectorDotProduct _direction;\n        private _distance = vectorMagnitude _relativePosition;\n        private _angle = acos (_axisDistance / _distance);\n\n        private _line = [_posASL, _targetPositionASL, _firer, _x];\n        private _line2 = [_posASL, _targetPositionASL];\n        TRACE_4(\"Affected:\",_x,_axisDistance,_distance,_angle);\n\n        if (_angle < _overpressureAngle && {_distance < _overpressureRange} && {!lineIntersects _line} && {!terrainIntersectASL _line2}) then {\n\n            private _alpha = sqrt (1 - _distance / _overpressureRange);\n            private _beta = sqrt (1 - _angle / _overpressureAngle);\n\n            private _damage = _alpha * _beta * _overpressureDamage;\n            TRACE_1(\"\",_damage);\n\n            // If the target is the ACE_player\n            if (_x == ACE_player) then {[_damage * 100] call BIS_fnc_bloodEffect};\n\n            if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") && {([_x] call EFUNC(medical,hasMedicalEnabled))}) then {\n                [_x, _damage, \"body\", \"backblast\"] call EFUNC(medical,addDamageToUnit);\n            } else {\n                _x setDamage (damage _x + _damage);\n            };\n\n            #ifdef DEBUG_MODE_FULL\n            //Shows damage lines in green\n            [   _posASL,\n            _targetPositionASL,\n            [0,1,0,1]\n            ] call EFUNC(common,addLineToDebugDraw);\n            #endif\n        };\n    };\n} forEach ((ASLtoAGL _posASL) nearEntities [\"CAManBase\", _overpressureRange]);\n",
        "functionName": "ace_overpressure_fnc_overpressureDamage"
      }
    ]
  },
  {
    "component": "parachute",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Initialises the parachute system.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ACE3 Equipment\", QGVAR(showAltimeter), localize LSTRING(showAltimeter), {\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotEscorting\", \"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    if (!('ACE_Altimeter' in assignedItems ace_player)) exitWith {false};\n    if (!(missionNamespace getVariable [QGVAR(AltimeterActive), false])) then {\n        [ACE_player] call FUNC(showAltimeter);\n    } else {\n        call FUNC(hideAltimeter);\n    };\n    true\n}, {false}, [24, [false, false, false]], false] call CBA_fnc_addKeybind;\n\nGVAR(PFH) = false;\n[\"vehicle\",{\n    if (!GVAR(PFH) && {(vehicle ACE_player) isKindOf \"ParachuteBase\"}) then {\n        GVAR(PFH) = true;\n        [FUNC(onEachFrame), 0.1, []] call CALLSTACK(CBA_fnc_addPerFrameHandler);\n    };\n}] call CBA_fnc_addPlayerEventHandler;\n\n// don't show speed and height when in expert mode\n[\"ace_infoDisplayChanged\", {_this call FUNC(handleInfoDisplayChanged)}] call CBA_fnc_addEventHandler;\n\n[\"loadout\", FUNC(storeParachute)] call CBA_fnc_addPlayerEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Initialises the parachute system.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_checkCutParachute.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Reset the parachute system.\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * Boolean <BOOL>\n *\n * Example:\n * [player] call FUNC(checkCutParachute);\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\"];\n(vehicle _unit isKindOf 'ParachuteBase' && !(_unit getVariable [QGVAR(chuteIsCut),false]) && (_unit getVariable [QGVAR(hasReserve),false]))\n",
        "functionName": "ace_parachute_fnc_checkCutParachute"
      },
      {
        "fileName": "fnc_cutParachute.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Cut Parachute and delete Old\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call FUNC(cutParachute);\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_unit\"];\nprivate _vehicle = vehicle _unit;\n_unit action [\"GetOut\", _vehicle];\ndeleteVehicle _vehicle;\n_unit setVariable [QGVAR(chuteIsCut), true, true];\n",
        "functionName": "ace_parachute_fnc_cutParachute"
      },
      {
        "fileName": "fnc_doLanding.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Performs the landing animation fix\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ACE_Parachute_fnc_doLanding;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nGVAR(PFH) = false;\n\n[_unit, \"AmovPercMevaSrasWrflDf_AmovPknlMstpSrasWrflDnon\", 2] call EFUNC(common,doAnimation);\n\n_unit setVariable [QGVAR(chuteIsCut), false, true];\n\n[{\n    (_this select 0) params [\"_time\", \"_unit\"];\n\n    if (CBA_missionTime > _time + 1) then {\n        [_unit, \"Crouch\"] call EFUNC(common,doGesture);\n        [_this select 1] call CALLSTACK(CBA_fnc_removePerFrameHandler);\n    };\n}, 1, [CBA_missionTime, _unit]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\n",
        "functionName": "ace_parachute_fnc_doLanding"
      },
      {
        "fileName": "fnc_handleInfoDisplayChanged.sqf",
        "content": "/*\n * Author: commy2\n * Hides the height and velocity display while freefalling or parachuting on higher difficulties.\n *\n * Arguments:\n * Stuff from infoDisplayChanged eventhandler. <UNKNOWN>\n *\n * Return Value:\n * None\n *\n * Example:\n * [?] call ACE_parachute_fnc_handleInfoDisplayChanged\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_dialog\", \"_type\"];\n\n// don't do anything in noob mode\nif (cadetMode) exitWith {};\n\nswitch (_type) do {\n    case (\"Parachute\"): {\n        {\n            (_dialog displayCtrl _x) ctrlShow false;\n        } forEach [121, 122, 1004, 1005, 1006, 1014];\n    };\n\n    case (\"Soldier\"): {\n        {\n            private _control = (_dialog displayCtrl _x);\n\n            // these reset ctrlShow every frame by the engine. Set height/width to 0 as work around.\n            _control ctrlSetPosition [0,0,0,0];\n            _control ctrlCommit 0;\n        } forEach [380, 382];\n    };\n};\nnil // switch might return true if no case was found. Just to make sure the return value matches\n",
        "functionName": "ace_parachute_fnc_handleInfoDisplayChanged"
      },
      {
        "fileName": "fnc_handleRespawn.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Reset the parachute system.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_parachute_fnc_handleRespawn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nACE_player setVariable [QGVAR(chuteIsCut), false];\n",
        "functionName": "ace_parachute_fnc_handleRespawn"
      },
      {
        "fileName": "fnc_hideAltimeter.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Removes the altimeter from the screen.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_Parachute_fnc_hideAltimeter\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nGVAR(AltimeterActive) = false;\n([\"ACE_Altimeter\"] call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\",0,true];\n",
        "functionName": "ace_parachute_fnc_hideAltimeter"
      },
      {
        "fileName": "fnc_onEachFrame.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Checks whether the unit should preform landing.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ACE_Parachute_fnc_onEachFrame;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nprivate _player = ACE_player;\nif (!GVAR(PFH)) exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);};\nif (isNull _player) exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);GVAR(PFH) = false;};\nif !((vehicle _player) isKindOf \"ParachuteBase\") exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);GVAR(PFH) = false;};\nif (isTouchingGround _player) exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);GVAR(PFH) = false;};\n\nprivate _pos = getPosASL (vehicle _player);\n\nif ((lineIntersects [_pos, _pos vectorAdd [0,0,-0.5], vehicle _player, _player]) || {((ASLtoATL _pos) select 2) < 0.75}) then {\n    [(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);\n    GVAR(PFH) = false;\n// I believe this will not work for Zeus units.\n    deleteVehicle (vehicle _player);\n    [_player] call FUNC(doLanding);\n};\n",
        "functionName": "ace_parachute_fnc_onEachFrame"
      },
      {
        "fileName": "fnc_showAltimeter.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet\n * Displays the altimeter on screen.\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ACE_Parachute_fnc_showAltimeter\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n([\"ACE_Altimeter\"] call BIS_fnc_rscLayer) cutRsc [\"ACE_Altimeter\", \"PLAIN\", 0, true];\nif (isNull (uiNamespace getVariable [\"ACE_Altimeter\", displayNull])) exitWith {};\n\nGVAR(AltimeterActive) = true;\n\n[{\n    if (!GVAR(AltimeterActive)) exitWith {[_this select 1] call CALLSTACK(CBA_fnc_removePerFrameEventHandler)};\n    disableSerialization;\n    (_this select 0) params [\"_display\", \"_unit\", \"_oldHeight\", \"_prevTime\"];\n    if !(\"ACE_Altimeter\" in assignedItems _unit) exitWith {[_this select 1] call CALLSTACK(CBA_fnc_removePerFrameEventHandler); call FUNC(hideAltimeter)};\n\n    private _HeightText = _display displayCtrl 1100;\n    private _DecendRate = _display displayCtrl 1000;\n    private _TimeText = _display displayCtrl 1001;\n    private _hour = floor daytime;\n    private _minute = floor ((daytime - _hour) * 60);\n\n    private _height = ((getPosASL _unit) select 2) + EGVAR(common,mapAltitude);\n    private _curTime = CBA_missionTime;\n    private _timeDiff = _curTime - _prevTime;\n    private _descentRate = if(_timeDiff > 0) then {floor((_oldHeight - _height) / _timeDiff)} else {0};\n\n    _TimeText ctrlSetText (format [\"%1:%2\",[_hour, 2] call EFUNC(common,numberToDigitsString),[_minute, 2] call EFUNC(common,numberToDigitsString)]);\n    _HeightText ctrlSetText (format [\"%1\", floor(_height)]);\n    _DecendRate ctrlSetText (format [\"%1\", _descentRate max 0]);\n\n    (_this select 0) set [2, _height];\n    (_this select 0) set [3, _curTime];\n}, 0.2, [uiNamespace getVariable [\"ACE_Altimeter\", displayNull], _unit,floor ((getPosASL _unit) select 2), CBA_missionTime]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\n",
        "functionName": "ace_parachute_fnc_showAltimeter"
      },
      {
        "fileName": "fnc_storeParachute.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Add the Reserve Parachute to Units or Save Backpack if is a Parachute in Unit\n *\n * Arguments:\n * None\n *\n * Return Value:\n * 0: Unit <OBJECT>\n *\n * Example:\n * call ace_parachute_fnc_storeParachute\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nprivate _backpack = backpack _unit;\n\nif ((vehicle _unit) isKindOf \"ParachuteBase\" && {backpack _unit == \"\"} && {!(_unit getVariable [QGVAR(chuteIsCut),false])} && {_unit getVariable [QGVAR(hasReserve),false]}) then {\n    _unit addBackpackGlobal (_unit getVariable[QGVAR(backpackClass),\"ACE_NonSteerableParachute\"]);\n} else {\n    if ((getNumber(configFile >> \"CfgVehicles\" >> _backpack >> \"ace_hasReserveParachute\")) == 1) then {\n        _unit setVariable[QGVAR(backpackClass),getText(configFile >> \"CfgVehicles\" >> _backpack >> \"ace_reserveParachute\"),true];\n    };\n    if (!(_unit getVariable [QGVAR(chuteIsCut),false]) && {!(animationState _unit == 'para_pilot')}) then {\n        _unit setVariable [QGVAR(hasReserve),[false,true] select (getNumber(configFile >> \"CfgVehicles\" >> _backpack >> \"ace_hasReserveParachute\")),true];\n    };\n};\n",
        "functionName": "ace_parachute_fnc_storeParachute"
      }
    ]
  },
  {
    "component": "pylons",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_settingsInitialized\", {\n    if (!GVAR(enabled)) exitWith {};\n\n    private _filter = \"isClass (_x >> 'Components' >> 'TransportPylonsComponent') && {(getNumber (_x >> 'scope')) > 0}\";\n    GVAR(aircraftWithPylons) = (_filter configClasses (configFile >> \"CfgVehicles\")) apply {configName _x};\n    {\n        [_x, \"init\", {\n            params [\"_aircraft\"];\n\n            private _loadoutAction = [\n                QGVAR(loadoutAction),\n                localize LSTRING(ConfigurePylons),\n                \"\",\n                {[_target] call FUNC(showDialog)},\n                {\n                    private _vehicles = nearestObjects [_target, [\"Air\", \"LandVehicle\", \"Slingload_base_F\", \"ReammoBox_F\"], GVAR(searchDistance) + 10];\n                    private _filter = [\"transportAmmo\", QEGVAR(rearm,defaultSupply)] select ([\"ace_rearm\"] call EFUNC(common,isModLoaded));\n                    private _rearmVehicles = {(getNumber (configFile >> \"CfgVehicles\" >> typeOf _x >> _filter)) > 0} count _vehicles;\n\n                    (_rearmVehicles > 0 && {[ace_player, _target] call FUNC(canConfigurePylons)})\n                }\n            ] call EFUNC(interact_menu,createAction);\n\n            [_aircraft, 0, [\"ACE_MainActions\"], _loadoutAction] call EFUNC(interact_menu,addActionToObject);\n        }, false, [], true] call CBA_fnc_addClassEventHandler;\n    } forEach GVAR(aircraftWithPylons);\n\n    [QGVAR(setPylonLoadOutEvent), {\n        params [\"_aircraft\", \"_pylonIndex\", \"_pylon\", \"_turret\"];\n        _aircraft setPylonLoadOut [_pylonIndex, _pylon, false, _turret];\n    }] call CBA_fnc_addEventHandler;\n\n    [QGVAR(setAmmoOnPylonEvent), {\n        params [\"_aircraft\", \"_pylonIndex\", \"_count\"];\n        _aircraft setAmmoOnPylon [_pylonIndex, _count];\n    }] call CBA_fnc_addEventHandler;\n\n    if (isServer) then {\n        GVAR(currentAircraftNamespace) = true call CBA_fnc_createNamespace;\n        publicVariable QGVAR(currentAircraftNamespace);\n\n        addMissionEventHandler [\"HandleDisconnect\", LINKFUNC(handleDisconnect)];\n    };\n\n    GVAR(searchDistanceSqr) = GVAR(searchDistance) ^ 2;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canConfigurePylons.sqf",
        "content": "/*\n * Author: 654wak654\n * Checks if given unit can access the pylon configuration dialog for the given aircraft.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Aircraft <OBJECT>\n *\n * Return Value:\n * Unit can configure the aircraft's pylons <BOOL>\n *\n * Example:\n * [ace_player, cursorObject] call ace_pylons_fnc_canConfigurePylons\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_aircraft\"];\n\nif (GVAR(requireEngineer) && {!([_unit] call EFUNC(common,isEngineer))}) exitWith {false};\n\nif (GVAR(requireToolkit) && {!([_unit, \"ToolKit\"] call EFUNC(common,hasItem))}) exitWith {false};\n\nif ((_unit distanceSqr _aircraft) > GVAR(searchDistanceSqr)) exitWith {false};\n\n[_unit, _aircraft] call EFUNC(common,canInteractWith)\n",
        "functionName": "ace_pylons_fnc_canConfigurePylons"
      },
      {
        "fileName": "fnc_configurePylons.sqf",
        "content": "/*\n * Author: 654wak654\n * Recursively shows the progress bar for each configured pylon.\n *\n * Arguments:\n * 0: Indexes of pylons to configure <ARRAY>\n * 1: Current index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_pylonsToConfigure, 0] call ace_pylons_fnc_configurePylons\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_pylonsToConfigure\", \"_currentPylon\"];\n\nif (_currentPylon == count _pylonsToConfigure) exitWith {};\n\n// TODO: Animation and sound\n[\n    [GVAR(timePerPylon), 0] select GVAR(isCurator),\n    _this,\n    {\n        (_this select 0) params [\"_pylonsToConfigure\", \"_currentPylon\"];\n        private _pylonIndex = _pylonsToConfigure select _currentPylon;\n\n        // Remove the weapon of current pylon from aircraft IF weapon is only on this pylon\n        private _currentPylonMagazine = (getPylonMagazines GVAR(currentAircraft)) select _pylonIndex;\n        if (_currentPylonMagazine != \"\") then {\n            private _allPylonWeapons = (getPylonMagazines GVAR(currentAircraft)) apply {\n                getText (configFile >> \"CfgMagazines\" >> _x >> \"pylonWeapon\")\n            };\n            private _pylonWeapon = _allPylonWeapons select _pylonIndex;\n            if (({_x == _pylonWeapon} count _allPylonWeapons) == 1) then {\n                GVAR(currentAircraft) removeWeaponGlobal _pylonWeapon;\n            };\n        };\n\n        private _combo = GVAR(comboBoxes) select _pylonIndex select 0;\n        private _pylonMagazine = _combo lbData (lbCurSel _combo);\n        private _turret = (GVAR(comboBoxes) select _pylonIndex select 2) getVariable [QGVAR(turret), []];\n        if (_turret isEqualTo [-1]) then {_turret = [];};\n\n        [\n            QGVAR(setPylonLoadOutEvent),\n            [GVAR(currentAircraft), _pylonIndex + 1, _pylonMagazine, _turret]\n        ] call CBA_fnc_globalEvent;\n\n        private _count = if (GVAR(rearmNewPylons) || {GVAR(isCurator)}) then {\n            getNumber (configFile >> \"CfgMagazines\" >> _pylonMagazine >> \"count\")\n        } else {\n            0\n        };\n\n        [\n            QGVAR(setAmmoOnPylonEvent),\n            [GVAR(currentAircraft), _pylonIndex + 1, _count],\n            GVAR(currentAircraft)\n        ] call CBA_fnc_targetEvent;\n\n        [_pylonsToConfigure, _currentPylon + 1] call FUNC(configurePylons);\n    },\n    {\n        (_this select 0) params [\"\", \"_currentPylon\"];\n        [format [localize LSTRING(Stopped), _currentPylon + 1], false, 5] call EFUNC(common,displayText);\n    },\n    format [localize LSTRING(ReplacingPylon), _currentPylon + 1, count _pylonsToConfigure],\n    {GVAR(isCurator) || {(ace_player distanceSqr GVAR(currentAircraft)) <= GVAR(searchDistanceSqr)}},\n    [\"isNotInZeus\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_pylons_fnc_configurePylons"
      },
      {
        "fileName": "fnc_handleDisconnect.sqf",
        "content": "/*\n * Author: 654wak654\n * Cleans up pylons on client disconnect.\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_pylons_fnc_handleDisconnect\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"\", \"_uid\"];\n\nprivate _aircraft = GVAR(currentAircraftNamespace) getVariable [\"_uid\", objNull];\nif (!isNull _aircraft) then {\n    _aircraft setVariable [QGVAR(currentUser), objNull, true];\n\n    GVAR(currentAircraftNamespace) setVariable [_uid, nil, true]; // Remove var from namespace, no need to keep objNull\n};\n",
        "functionName": "ace_pylons_fnc_handleDisconnect"
      },
      {
        "fileName": "fnc_onButtonApply.sqf",
        "content": "/*\n * Author: 654wak654\n * Starts the pylon configuration.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_pylons_fnc_onButtonApply\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Check for FRIES change\nprivate _checkbox = CONTROL(ID_DIALOG) ID_CHECKBOX_FRIES;\nif (ctrlShown _checkbox && {!((cbChecked _checkbox) isEqualTo (_checkbox getVariable QGVAR(originalState)))}) then {\n    if (cbChecked _checkbox) then {\n        [GVAR(currentAircraft)] call EFUNC(fastroping,equipFRIES);\n    } else {\n        [GVAR(currentAircraft)] call EFUNC(fastroping,cutRopes);\n        private _fries = GVAR(currentAircraft) getVariable [QEGVAR(fastroping,FRIES), objNull];\n        deleteVehicle _fries;\n    };\n    _checkbox setVariable [QGVAR(originalState), cbChecked _checkbox];\n};\n\nprivate _pylonsToConfigure = [];\n{\n    // Pick combo boxes where current selection doesn't match original selection\n    if ((lbCurSel (_x select 0)) != (_x select 3)) then {\n        _pylonsToConfigure pushBack _forEachIndex;\n    };\n} forEach GVAR(comboBoxes);\n\nif (_pylonsToConfigure isEqualTo []) exitWith {};\n\n[_pylonsToConfigure, 0] call FUNC(configurePylons);\n\n// As a zeus you expect module dialogs to close once you click apply\nif (GVAR(isCurator)) then {\n    call FUNC(onButtonClose);\n};\n",
        "functionName": "ace_pylons_fnc_onButtonApply"
      },
      {
        "fileName": "fnc_onButtonClose.sqf",
        "content": "/*\n * Author: 654wak654\n * Handles the closing of the dialog.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_pylons_fnc_onButtonClose\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nGVAR(currentAircraft) setVariable [QGVAR(currentUser), objNull, true];\nGVAR(currentAircraftNamespace) setVariable [getPlayerUID ace_player, nil, true]; // Remove var from namespace, no need to keep objNull\ncloseDialog 2;\n",
        "functionName": "ace_pylons_fnc_onButtonClose"
      },
      {
        "fileName": "fnc_onButtonDelete.sqf",
        "content": "/*\n * Author: 654wak654\n * Deletes the selected pylon configuration from profileNamespace.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_pylons_fnc_onButtonDelete\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _loadoutName = lbText [ID_LIST_LOADOUTS, lbCurSel ID_LIST_LOADOUTS];\n\nlbDelete [ID_LIST_LOADOUTS, lbCurSel ID_LIST_LOADOUTS];\n\nprivate _aircraftLoadouts = profileNamespace getVariable [QGVAR(aircraftLoadouts), []];\nprivate _index = {\n    if ((_x select 0) isEqualTo _loadoutName && {(_x select 3) isEqualTo typeOf GVAR(currentAircraft)}) exitWith {\n        _forEachIndex\n    };\n} forEach _aircraftLoadouts;\n_aircraftLoadouts deleteAt _index;\nprofileNamespace setVariable [QGVAR(aircraftLoadouts), _aircraftLoadouts];\n",
        "functionName": "ace_pylons_fnc_onButtonDelete"
      },
      {
        "fileName": "fnc_onButtonLoad.sqf",
        "content": "/*\n * Author: 654wak654\n * Loads selected pylon configuration from either config or profileNamespace.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_pylons_fnc_onButtonLoad\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n[false] call FUNC(onPylonMirror);\n(CONTROL(ID_DIALOG) ID_CHECKBOX_MIRROR) cbSetChecked false;\n\nprivate _loadoutName = ctrlText ID_EDIT_LOADOUTNAME;\nprivate _fnc_setSelections = {\n    params [\"_mags\", \"_turrets\"];\n\n    {\n        _x params [\"_combo\", \"_mirroredIndex\", \"_button\"];\n\n        private _index = 0;\n        for \"_i\" from 1 to ((lbSize _combo) - 1) do {\n            if ((_combo lbData _i) == (_mags param [_forEachIndex, \"\"])) exitWith {\n                _index = _i;\n            };\n        };\n        _combo lbSetCurSel _index;\n\n        [_button, false, _turrets select _forEachIndex] call FUNC(onButtonTurret);\n    } forEach GVAR(comboBoxes);\n};\n\nprivate _pylonComponent = configFile >> \"CfgVehicles\" >> typeOf GVAR(currentAircraft) >> \"Components\" >> \"TransportPylonsComponent\";\nprivate _loadoutFound = {\n    if (getText (_x >> \"displayName\") isEqualTo _loadoutName) exitWith {\n        // Get default turrets from config\n        private _turrets = (\"true\" configClasses (_pylonComponent >> \"Pylons\")) apply {getArray (_x >> \"turret\")};\n        [getArray (_x >> \"attachment\"), _turrets] call _fnc_setSelections;\n        true\n    };\n    false\n} forEach (\"true\" configClasses (_pylonComponent >> \"Presets\"));\n\nif (_loadoutFound) exitWith {};\n\nprivate _aircraftLoadouts = profileNamespace getVariable [QGVAR(aircraftLoadouts), []];\n{\n    if ((_x select 0) isEqualTo _loadoutName && {(_x select 3) isEqualTo typeOf GVAR(currentAircraft)}) exitWith {\n        [_x select 1, _x select 2] call _fnc_setSelections;\n    };\n} forEach _aircraftLoadouts;\n",
        "functionName": "ace_pylons_fnc_onButtonLoad"
      },
      {
        "fileName": "fnc_onButtonSave.sqf",
        "content": "/*\n * Author: 654wak654\n * Saves the selected pylon configuration to profileNamespace.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_pylons_fnc_onButtonSave\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _loadoutName = ctrlText ID_EDIT_LOADOUTNAME;\nprivate _aircraftLoadouts = profileNamespace getVariable [QGVAR(aircraftLoadouts), []];\nprivate _loadoutPylons = GVAR(comboBoxes) apply {(_x select 0) lbData (lbCurSel (_x select 0))};\nprivate _turretOwners = GVAR(comboBoxes) apply {(_x select 2) getVariable [QGVAR(turret), [-1]]};\n\nprivate _found = false;\n{\n    if ((_x select 0) isEqualTo _loadoutName && {(_x select 2) isEqualTo typeOf GVAR(currentAircraft)}) exitWith {\n        _aircraftLoadouts set [_forEachIndex, [_loadoutName, _loadoutPylons, _turretOwners, typeOf GVAR(currentAircraft)]];\n        _found = true;\n    };\n} forEach _aircraftLoadouts;\n\nif (!_found) then {\n    private _index = lbAdd [ID_LIST_LOADOUTS, _loadoutName];\n    lbSetCurSel [ID_LIST_LOADOUTS, _index];\n    _aircraftLoadouts pushBack [_loadoutName, _loadoutPylons, _turretOwners, typeOf GVAR(currentAircraft)];\n};\n\nprofileNamespace setVariable [QGVAR(aircraftLoadouts), _aircraftLoadouts];\n",
        "functionName": "ace_pylons_fnc_onButtonSave"
      },
      {
        "fileName": "fnc_onButtonTurret.sqf",
        "content": "/*\n * Author: 654wak654\n * Handles init and click events of turret switch buttons.\n *\n * Arguments:\n * 0: Button <CONTROL>\n * 1: Should switch icons <BOOL>\n * 2: Turret path <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_button, true, []] call ace_pylons_fnc_onButtonTurret\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ctrl\", \"_switch\", \"_turret\"];\n\nif (_switch) then {\n    _turret = [[0], [-1]] select ((_ctrl getVariable QGVAR(turret)) isEqualTo [0]);\n\n    {\n        _x params [\"\", \"_mirroredIndex\", \"_button\"];\n        if (_ctrl == _button) exitWith {\n            if (_mirroredIndex == -1) then {\n                private _indexOf = _forEachIndex;\n                {\n                    _x params [\"\", \"_mirroredIndex\", \"_button\"];\n                    if (_mirroredIndex == _indexOf && {!ctrlEnabled _button}) exitWith {\n                        [_button, false, _turret] call FUNC(onButtonTurret);\n                    };\n                } forEach GVAR(comboBoxes);\n            };\n        };\n    } forEach GVAR(comboBoxes);\n};\n_ctrl setVariable [QGVAR(turret), _turret];\n\nif (_turret isEqualTo [-1]) then {\n    _ctrl ctrlSetText \"a3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_driver_ca.paa\";\n    _ctrl ctrlSetTooltip localize \"str_driver\";\n} else {\n    _ctrl ctrlSetText \"a3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_gunner_ca.paa\";\n    _ctrl ctrlSetTooltip localize \"str_gunner\";\n};\n",
        "functionName": "ace_pylons_fnc_onButtonTurret"
      },
      {
        "fileName": "fnc_onComboSelChange.sqf",
        "content": "/*\n * Author: 654wak654\n * Handles various UI changes when a combobox' selection changes.\n *\n * Arguments:\n * 0: Combobox <CONTROL>\n * 1: Selected index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_combo, 5] call ace_pylons_fnc_onComboSelChange\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ctrl\", \"_index\"];\n\n{\n    _x params [\"_combo\", \"_mirroredIndex\", \"\", \"_originalIndex\"];\n    if (_ctrl == _combo) exitWith {\n        if (_mirroredIndex == -1) then {\n            private _indexOf = _forEachIndex;\n            {\n                _x params [\"_combo\", \"_mirroredIndex\"];\n                if (_mirroredIndex == _indexOf && {!ctrlEnabled _combo}) exitWith {\n                    _combo lbSetCurSel _index;\n                };\n            } forEach GVAR(comboBoxes);\n        };\n        if !(GVAR(rearmNewPylons) || {GVAR(isCurator)}) then {\n            private _color = [[0.5, 0.05, 0.05, 1], [0.05, 0.05, 0.05, 1]] select (_index == _originalIndex);\n            _combo ctrlSetBackgroundColor _color;\n        };\n    };\n} forEach GVAR(comboBoxes);\n",
        "functionName": "ace_pylons_fnc_onComboSelChange"
      },
      {
        "fileName": "fnc_onNameChange.sqf",
        "content": "/*\n * Author: 654wak654\n * Called when current loadout name is changed.\n * Prevents default presets from gettings deleted / overwritten.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_pylons_fnc_onNameChange\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif ((ctrlText ID_EDIT_LOADOUTNAME) in GVAR(defaultLoadoutNames)) then {\n    ctrlEnable [ID_BUTTON_SAVE, false];\n    ctrlEnable [ID_BUTTON_DELETE, false];\n} else {\n    ctrlEnable [ID_BUTTON_SAVE, true];\n    ctrlEnable [ID_BUTTON_DELETE, true];\n};\n",
        "functionName": "ace_pylons_fnc_onNameChange"
      },
      {
        "fileName": "fnc_onPylonMirror.sqf",
        "content": "/*\n * Author: 654wak654\n * Called when the \"mirror\" checkbox on the loadout dialog is checked.\n * Changes the comboboxes and buttons to be mirrored / normal.\n *\n * Arguments:\n * 0: Checked status <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [false] call ace_pylons_fnc_onPylonMirror\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_checked\"];\n\nif (_checked) then {\n    {\n        _x params [\"_combo\", \"_mirroredIndex\", \"_button\"];\n\n        if (_mirroredIndex != -1) then {\n            private _selection = lbCurSel ((GVAR(comboBoxes) select _mirroredIndex) select 0);\n            _combo lbSetCurSel _selection;\n            _combo ctrlEnable false;\n\n            private _mirroredButton = (GVAR(comboBoxes) select _mirroredIndex) select 2;\n            private _turret = _mirroredButton getVariable [QGVAR(turret), [-1]];\n            [_button, false, _turret] call FUNC(onButtonTurret);\n            _button ctrlEnable false;\n        };\n    } forEach GVAR(comboBoxes);\n} else {\n    {\n        (_x select 0) ctrlEnable true;\n        (_x select 2) ctrlEnable true;\n    } forEach GVAR(comboBoxes);\n};\n",
        "functionName": "ace_pylons_fnc_onPylonMirror"
      },
      {
        "fileName": "fnc_showDialog.sqf",
        "content": "/*\n* Author: 654wak654\n* Shows the aircraft loadout dialog for given aircraft.\n*\n* Arguments:\n* 0: Aircraft <OBJECT>\n* 1: Is curator. Disables time and resource requirements. <BOOL> (default: false)\n*\n* Return Value:\n* None\n*\n* Example:\n* [vehicle ace_player] call ace_pylons_fnc_showDialog\n*\n* Public: Yes\n*/\n#include \"script_component.hpp\"\n\nparams [\"_aircraft\", [\"_isCurator\", false]];\n\nif (!GVAR(enabled) || {!(typeOf _aircraft in GVAR(aircraftWithPylons))}) exitWith {};\n\nprivate _currentUser = _aircraft getVariable [QGVAR(currentUser), objNull];\nif (!isNull _currentUser) exitWith {\n    [format [localize LSTRING(InUse), name _currentUser], false, 5] call EFUNC(common,displayText);\n};\n_aircraft setVariable [QGVAR(currentUser), ace_player, true];\nGVAR(currentAircraftNamespace) setVariable [getPlayerUID ace_player, _aircraft, true];\n\nGVAR(isCurator) = _isCurator;\nGVAR(currentAircraft) = _aircraft;\n\ncreateDialog QGVAR(DialogLoadout);\nprivate _display = DISPLAY(ID_DIALOG);\n_display displayAddEventHandler [\"Unload\", LINKFUNC(onButtonClose)];\n\nif (GVAR(rearmNewPylons) || {_isCurator}) then {\n    ctrlShow [ID_TEXT_BANNER, false];\n};\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _aircraft;\nprivate _pylonComponent = _config >> \"Components\" >> \"TransportPylonsComponent\";\n\nctrlSetText [ID_PICTURE_AIRCRAFT, getText (_pylonComponent >> \"uiPicture\")];\n\nprivate _hasFRIES = getNumber (_config >> QEGVAR(fastroping,enabled));\nif ([\"ace_fastroping\"] call EFUNC(common,isModLoaded) && {_hasFRIES > 1}) then {\n    private _checkbox = _display displayCtrl ID_CHECKBOX_FRIES;\n    private _fries = _aircraft getVariable [QEGVAR(fastroping,FRIES), objNull];\n    _checkbox cbSetChecked (!isNull _fries);\n    _checkbox setVariable [QGVAR(originalState), !isNull _fries];\n} else {\n    ctrlShow [ID_CHECKBOX_FRIES, false];\n    ctrlShow [ID_TEXT_FRIES, false];\n};\n\nGVAR(comboBoxes) = [];\n{\n    private _combo = _display ctrlCreate [QGVAR(CtrlCombo), -1];\n    private _picturePos = ctrlPosition (_display displayCtrl ID_PICTURE_AIRCRAFT);\n    private _uiPos = getArray (_x >> \"UIposition\");\n    MAP(_uiPos,if (_x isEqualType 0) then {_x} else {call compile _x}); // Handle string positions\n    _combo ctrlSetPosition [\n        (_picturePos select 0) + (_uiPos select 0),\n        (_picturePos select 1) + (_uiPos select 1),\n        0.1 * safezoneW,\n        0.028 * safezoneH\n    ];\n    _combo ctrlCommit 0;\n\n    _combo lbAdd localize LSTRING(Empty);\n    _combo lbSetData [0, \"\"];\n\n    private _mag = (getPylonMagazines _aircraft) select _forEachIndex;\n    private _mags = _aircraft getCompatiblePylonMagazines (_forEachIndex + 1);\n    private _index = 0;\n    {\n        _combo lbAdd getText (configFile >> \"CfgMagazines\" >> _x >> \"displayName\");\n        _combo lbSetData [_forEachIndex + 1, _x];\n\n        if (_x == _mag) then {\n            _index = _forEachIndex + 1;\n        };\n    } forEach _mags;\n    _combo lbSetCurSel _index;\n    _combo ctrlAddEventHandler [\"LBSelChanged\", LINKFUNC(onComboSelChange)];\n    // TODO: Allow pylon priority selection?\n\n    private _mirroredIndex = getNumber (_x >> \"mirroredMissilePos\");\n\n    private _button = controlNull;\n    if (count allTurrets [_aircraft, false] > 0) then {\n        _button = _display ctrlCreate [\"ctrlButtonPictureKeepAspect\", -1];\n        private _turret = [_aircraft, _forEachIndex] call EFUNC(common,getPylonTurret);\n        [_button, false, _turret] call FUNC(onButtonTurret);\n        _button ctrlAddEventHandler [\"ButtonClick\", {[_this select 0, true, []] call FUNC(onButtonTurret)}];\n        _button ctrlSetPosition [\n            (_picturePos select 0) + (_uiPos select 0) - (0.0165 * safezoneW),\n            (_picturePos select 1) + (_uiPos select 1),\n            0.0165 * safezoneW,\n            0.028 * safezoneH\n        ];\n        _button ctrlCommit 0;\n    };\n\n    GVAR(comboBoxes) pushBack [_combo, _mirroredIndex - 1, _button, _index];\n} forEach (\"true\" configClasses (_pylonComponent >> \"Pylons\"));\n\nGVAR(defaultLoadoutNames) = [];\n{\n    lbAdd [ID_LIST_LOADOUTS, getText (_x >> \"displayName\")];\n    lbSetPicture [ID_LIST_LOADOUTS, _forEachIndex, \"a3\\data_f_jets\\logos\\jets_logo_small_ca.paa\"];\n\n    GVAR(defaultLoadoutNames) pushBack getText (_x >> \"displayName\");\n} forEach (\"true\" configClasses (_pylonComponent >> \"Presets\"));\n\n{\n    if ((_x select 3) == typeOf _aircraft) then {\n        lbAdd [ID_LIST_LOADOUTS, _x select 0];\n    };\n} forEach (profileNamespace getVariable [QGVAR(aircraftLoadouts), []]);\n\nprivate _displayName = getText (_config >> \"displayName\");\nctrlSetText [ID_TEXT_LISTTITLE, format [localize LSTRING(LoadoutsFor), _displayName]];\n\nprivate _list = _display displayCtrl ID_LIST_LOADOUTS;\n_list ctrlAddEventHandler [\"LBSelChanged\", {\n    params [\"_ctrl\"];\n\n    ctrlSetText [ID_EDIT_LOADOUTNAME, _ctrl lbText (lbCurSel _ctrl)];\n    call FUNC(onNameChange);\n}];\n\nprivate _edit = _display displayCtrl ID_EDIT_LOADOUTNAME;\n_edit ctrlAddEventHandler [\"KeyUp\", LINKFUNC(onNameChange)];\n_edit ctrlAddEventHandler [\"KeyDown\", LINKFUNC(onNameChange)];\n\nprivate _checkbox = _display displayCtrl ID_CHECKBOX_MIRROR;\n_checkbox ctrlAddEventHandler [\"CheckedChanged\", {[(_this select 1) == 1] call FUNC(onPylonMirror)}];\n\nif (!GVAR(isCurator)) then {\n    [{\n        isNull (GVAR(currentAircraft) getVariable [QGVAR(currentUser), objNull]) ||\n        {(ace_player distanceSqr GVAR(currentAircraft)) > GVAR(searchDistanceSqr)}\n    }, {\n        [localize LSTRING(TooFar), false, 5] call EFUNC(common,displayText);\n        call FUNC(onButtonClose);\n    }] call CBA_fnc_waitUntilAndExecute;\n};\n",
        "functionName": "ace_pylons_fnc_showDialog"
      }
    ]
  },
  {
    "component": "quickmount",
    "files": [
      {
        "fileName": "XEH_postInitClient.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ACE3 Movement\", QGVAR(mount), [localize LSTRING(KeybindName), localize LSTRING(KeybindDescription)], \"\", {\n    if (!dialog) then {\n        call FUNC(getInNearest);\n    };\n    false\n}] call CBA_fnc_addKeybind;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_getInNearest.sqf",
        "content": "/*\n * Author: Kingsley\n * Mount the player in the vehicle they are directly looking at based on their distance.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_quickmount_fnc_getInNearest;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!GVAR(enabled) ||\n    {isNull ACE_player} ||\n    {vehicle ACE_player != ACE_player} ||\n    {!alive ACE_player} ||\n    {ACE_player getVariable [\"ace_unconscious\", false]}\n) exitWith {};\n\nprivate _start = AGLtoASL (ACE_player modelToWorldVisual (ACE_player selectionPosition \"pilot\"));\nprivate _end = (_start vectorAdd (getCameraViewDirection ACE_player vectorMultiply GVAR(distance)));\nprivate _objects = lineIntersectsSurfaces [_start, _end, ACE_player];\nprivate _target = (_objects param [0, []]) param [2, objNull];\n\nif (locked _target in [2,3]) exitWith {\n    [localize LSTRING(VehicleLocked)] call EFUNC(common,displayTextStructured);\n    true\n};\n\nTRACE_1(\"\",_target);\n\nif (!isNull _target &&\n        {alive _target} &&\n        {{_target isKindOf _x} count [\"Air\",\"LandVehicle\",\"Ship\",\"StaticMortar\"] > 0} &&\n        {([ACE_player, _target] call EFUNC(common,canInteractWith))} &&\n        {speed _target <= GVAR(speed)}\n        ) then {\n\n\n    if (GVAR(priority) > 3 || GVAR(priority) < 0) then {\n        GVAR(priority) = 0;\n    };\n\n    private _seats = [\"Driver\", \"Gunner\", \"Commander\", \"Cargo\"];\n    private _sortedSeats = [_seats select GVAR(priority)];\n    _seats deleteAt GVAR(priority);\n    _sortedSeats append _seats;\n\n\n    private _hasAction = false;\n    scopeName \"SearchForSeat\";\n    {\n        private _desiredRole = _x;\n        {\n            _x params [\"_unit\", \"_role\", \"_cargoIndex\", \"_turretPath\"];\n            if ((isNull _unit) || {!alive _unit}) then {\n                private _effectiveRole = toLower _role;\n\n                if ((_effectiveRole in [\"driver\", \"gunner\"]) && {unitIsUAV _target}) exitWith {}; // Ignoring UAV Driver/Gunner\n                if ((_effectiveRole == \"driver\") && {(getNumber (([_target] call CBA_fnc_getObjectConfig) >> \"hasDriver\")) == 0}) exitWith {}; // Ignoring Non Driver (static weapons)\n\n                // Seats can be locked independently of the main vehicle\n                if ((_role == \"driver\") && {lockedDriver _target}) exitWith {TRACE_1(\"lockedDriver\",_x);};\n                if ((_cargoIndex >= 0) && {_target lockedCargo _cargoIndex}) exitWith {TRACE_1(\"lockedCargo\",_x);};\n                if ((!(_turretPath isEqualTo [])) && {_target lockedTurret _turretPath}) exitWith {TRACE_1(\"lockedTurret\",_x);};\n\n                if (_effectiveRole == \"turret\") then {\n                    if ((getNumber (([_target, _turretPath] call CBA_fnc_getTurret) >> \"isCopilot\")) == 1) exitWith {\n                        _effectiveRole = \"driver\";\n                    };\n                    if (_cargoIndex < 0) exitWith {\n                        _effectiveRole = \"gunner\"; // door gunners / 2nd turret\n                    };\n                    _effectiveRole = \"cargo\"; // probably a FFV\n                };\n                TRACE_2(\"\",_effectiveRole,_x);\n                if (_effectiveRole != _desiredRole) exitWith {};\n\n                if (!(_turretPath isEqualTo [])) then {\n                     // Using GetInTurret seems to solve problems with incorrect GetInEH params when gunner/commander\n                    ACE_player action [\"GetInTurret\", _target, _turretPath];\n                    TRACE_3(\"Geting In Turret\",_x,_role,_turretPath);\n                } else {\n                    if (_cargoIndex > -1) then {\n                        // GetInCargo expects the index of the seat in the \"cargo\" array from fullCrew\n                        // See description: https://community.bistudio.com/wiki/fullCrew\n                        private _cargoActionIndex = -1;\n                        {\n                            if ((_x select 2) == _cargoIndex) exitWith {_cargoActionIndex = _forEachIndex};\n                        } forEach (fullCrew [_target, \"cargo\", true]);\n                        \n                        ACE_player action [\"GetInCargo\", _target, _cargoActionIndex];\n                        TRACE_4(\"Geting In Cargo\",_x,_role,_cargoActionIndex,_cargoIndex);\n                    } else {\n                        ACE_player action [\"GetIn\" + _role, _target];\n                        TRACE_2(\"Geting In\",_x,_role);\n                    };\n                };\n\n                _hasAction = true;\n                breakTo \"SearchForSeat\";\n            };\n        } forEach (fullCrew [_target, \"\", true]);\n    } forEach _sortedSeats;\n\n    if (!_hasAction) then {\n        TRACE_1(\"no empty seats\",_hasAction);\n        [localize LSTRING(VehicleFull)] call EFUNC(common,displayTextStructured);\n    };\n};\n\ntrue\n",
        "functionName": "ace_quickmount_fnc_getInNearest"
      },
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: Kingsley\n * Initializes the quick-mount module.\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: Units <ARRAY> (Unused)\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!isServer) exitWith {};\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(distance), \"distance\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(speed), \"speed\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_quickmount_fnc_moduleInit"
      }
    ]
  },
  {
    "component": "rangecard",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "[\"ACE3 Equipment\", QGVAR(RangeCardDialogKey), localize \"STR_ACE_RangeCard_RangeCardDialogKey\",\n{\n    // Conditions: canInteract, canShow\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        if (GVAR(RangeCardOpened)) exitWith {\n        closeDialog 0;\n        false\n    };    \n    if !(call FUNC(canShow)) exitWith {false};\n    // Statement\n    false call FUNC(openRangeCard);\n    true\n},\n{false},\n[0, [false, false, false]], false, 0] call CBA_fnc_addKeybind; // (empty default key)\n\n[\"ACE3 Equipment\", QGVAR(RangeCardCopyDialogKey), localize \"STR_ACE_RangeCard_RangeCardCopyDialogKey\",\n{\n    // Conditions: canInteract, canShowCopy\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    if (GVAR(RangeCardOpened)) exitWith {\n        closeDialog 0;\n        false\n    };\n    if !(call FUNC(canShowCopy)) exitWith {false};\n    // Statement\n    true call FUNC(openRangeCard);\n    true\n},\n{false},\n[0, [false, false, false]], false, 0] call CBA_fnc_addKeybind; // (empty default key)"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"initKeybinds.sqf\"\n\nGVAR(RangeCardOpened) = false;\n\nGVAR(controls) = [];\n\nGVAR(zeroRange) = 100;\nGVAR(boreHeight) = 3.81;\nGVAR(ammoClass) = \"B_65x39_Caseless\";\nGVAR(magazineClass) = \"30Rnd_65x39_caseless_mag\";\nGVAR(weaponClass) = \"arifle_MXM_F\";\n\nGVAR(zeroRangeCopy) = 100;\nGVAR(boreHeightCopy) = 3.81;\nGVAR(ammoClassCopy) = \"\";//\"ACE_762x51_Ball_M118LR\";\nGVAR(magazineClassCopy) = \"\";//\"ACE_20Rnd_762x51_M118LR_Mag\";\nGVAR(weaponClassCopy) = \"\";//srifle_DMR_06_olive_F\";\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_calculateRangeCard.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the range card data\n *\n * Arguments:\n * 0: Scope base angle <NUMBER>\n * 1: Bore height <NUMBER>\n * 2: air friction <NUMBER>\n * 3: muzzle velocity <NUMBER>\n * 4: temperature <NUMBER>\n * 5: barometric pressure <NUMBER>\n * 6: relative humidity <NUMBER>\n * 7: simulation steps <NUMBER>\n * 8: wind speed <NUMBER>\n * 9: target speed <NUMBER>\n * 10: target range <NUMBER>\n * 11: ballistic coefficient <NUMBER>\n * 12: drag model <NUMBER>\n * 13: atmosphere model <STRING>\n * 14: transonicStabilityCoef <NUMBER>\n * 15: Range Card Slot <NUMBER>\n * 16: Use advanced ballistics config? <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 ,14, 15, 16, true] call ace_rangecard_fnc_calculateRangeCard\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\n    \"_scopeBaseAngle\", \"_boreHeight\", \"_airFriction\", \"_muzzleVelocity\",\n    \"_temperature\", \"_barometricPressure\", \"_relativeHumidity\", \"_simSteps\",\n    \"_windSpeed\", \"_targetSpeed\", \"_targetRange\", \"_bc\", \"_dragModel\", \"_atmosphereModel\",\n    \"_transonicStabilityCoef\", \"_rangeCardSlot\", \"_useABConfig\"\n];\n\nGVAR(rangeCardDataMVs) set [_rangeCardSlot, format[\" %1\", round(_muzzleVelocity)]];\n\nprivate _tx = 0;\nprivate _tz = 0;\nprivate _lastBulletPos = [0, 0, 0];\nprivate _bulletPos = [0, 0, 0];\nprivate _bulletVelocity = [0, 0, 0];\nprivate _bulletAccel = [0, 0, 0];\nprivate _bulletSpeed = 0;\nprivate _gravity = [0, sin(_scopeBaseAngle) * -GRAVITY, cos(_scopeBaseAngle) * -GRAVITY];\nprivate _deltaT = 1 / _simSteps;\nprivate _speedOfSound = 0;\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    _speedOfSound = _temperature call EFUNC(weather,calculateSpeedOfSound);\n};\n\nprivate _elevation = 0;\nprivate _windage = 0;\nprivate _lead = 0;\nprivate _TOF = 0;\nprivate _trueVelocity = [0, 0, 0];\nprivate _trueSpeed = 0;\n\nprivate _n = 0;\nprivate _range = 0;\n\nif (_useABConfig) then {\n    _bc = parseNumber((\"ace_advanced_ballistics\" callExtension format[\"atmosphericCorrection:%1:%2:%3:%4:%5\", _bc, _temperature, _barometricPressure, _relativeHumidity, _atmosphereModel]));\n};\n\nprivate _airFrictionCoef = 1;\nif (!_useABConfig && (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) then {\n    private _airDensity = [_temperature, _barometricPressure, _relativeHumidity] call EFUNC(weather,calculateAirDensity);\n    _airFrictionCoef = _airDensity / 1.22498;\n};\n\nprivate _speedTotal = 0;\nprivate _stepsTotal = 0;\nprivate _speedAverage = 0;\n\n_bulletPos set [0, 0];\n_bulletPos set [1, 0];\n_bulletPos set [2, -(_boreHeight / 100)];\n\n_bulletVelocity set [0, 0];\n_bulletVelocity set [1, Cos(_scopeBaseAngle) * _muzzleVelocity];\n_bulletVelocity set [2, Sin(_scopeBaseAngle) * _muzzleVelocity];\n\nwhile {_TOF < 6 && (_bulletPos select 1) < _targetRange} do {\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\n\n    _speedTotal = _speedTotal + _bulletSpeed;\n    _stepsTotal = _stepsTotal + 1;\n    _speedAverage = (_speedTotal / _stepsTotal);\n\n    if (_transonicStabilityCoef < 1.0 && _speedAverage > 450 && _bulletSpeed < _speedOfSound) exitWith {};\n\n    _trueVelocity = _bulletVelocity vectorDiff [-_windSpeed, 0, 0];\n    _trueSpeed = vectorMagnitude _trueVelocity;\n\n    if (_useABConfig) then {\n        private _drag = parseNumber((\"ace_advanced_ballistics\" callExtension format[\"retard:%1:%2:%3:%4\", _dragModel, _bc, _trueSpeed, _temperature]));\n        _bulletAccel = (vectorNormalized _trueVelocity) vectorMultiply (-1 * _drag);\n    } else {\n        _bulletAccel = _trueVelocity vectorMultiply (_trueSpeed * _airFriction * _airFrictionCoef);\n    };\n\n    _bulletAccel = _bulletAccel vectorAdd _gravity;\n\n    _lastBulletPos = _bulletPos;\n    _bulletPos = _bulletPos vectorAdd (_bulletVelocity vectorMultiply (_deltaT * 0.5));\n    _bulletVelocity = _bulletVelocity vectorAdd (_bulletAccel vectorMultiply _deltaT);\n    _bulletPos = _bulletPos vectorAdd (_bulletVelocity vectorMultiply (_deltaT * 0.5));\n\n    if (atan((_bulletPos select 2) / (abs(_bulletPos select 1) + 1)) < -2.254) exitWith {};\n\n    _TOF = _TOF + _deltaT;\n\n    _range = GVAR(rangeCardStartRange) + _n * GVAR(rangeCardIncrement);\n    if ((_bulletPos select 1) >= _range && _range <= GVAR(rangeCardEndRange)) then {\n        if (_range != 0) then {\n            _tx = (_lastBulletPos select 0) + (_range - (_lastBulletPos select 1)) * ((_bulletPos select 0) - (_lastBulletPos select 0)) / ((_bulletPos select 1) - (_lastBulletPos select 1));\n            _tz = (_lastBulletPos select 2) + (_range - (_lastBulletPos select 1)) * ((_bulletPos select 2) - (_lastBulletPos select 2)) / ((_bulletPos select 1) - (_lastBulletPos select 1));\n            _elevation = - atan(_tz / _range);\n            _windage = - atan(_tx / _range);\n            _lead = (_targetSpeed * _TOF) / (Tan(MRAD_TO_DEG(1)) * _range);\n        };\n\n        private _elevationString = Str(round(-DEG_TO_MRAD(_elevation) * 10) / 10);\n        if (_elevationString == \"0\") then {\n            _elevationString = \"-0.0\";\n        };\n        if (_elevationString find \".\" == -1) then {\n            _elevationString = _elevationString + \".0\";\n        };\n        private _windageString = Str(round(DEG_TO_MRAD(_windage) * 10) / 10);\n        if (_windageString find \".\" == -1) then {\n            _windageString = _windageString + \".0\";\n        };\n        private _leadString = Str(round(_lead * 10) / 10);\n        if (_leadString find \".\" == -1) then {\n            _leadString = _leadString + \".0\";\n        };\n        (GVAR(rangeCardDataElevation) select _rangeCardSlot) set [_n, _elevationString];\n        (GVAR(rangeCardDataWindage) select _rangeCardSlot) set [_n, _windageString];\n        (GVAR(rangeCardDataLead) select _rangeCardSlot) set [_n, _leadString];\n        _n = _n + 1;\n    };\n};\n",
        "functionName": "ace_rangecard_fnc_calculateRangeCard"
      },
      {
        "fileName": "fnc_canCopy.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Checks if the target has a copyable range card\n *\n * Arguments:\n * unit <OBJECT>\n *\n * Return Value:\n * canShow <BOOL>\n *\n * Example:\n * [bob] call ace_rangecard_fnc_canCopy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n((primaryWeapon _this) != \"\" && [_this] call EFUNC(common,isPlayer) && [_this, \"ACE_RangeCard\"] call EFUNC(common,hasItem))\n",
        "functionName": "ace_rangecard_fnc_canCopy"
      },
      {
        "fileName": "fnc_canShow.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Tests if the Range Card can be shown\n *\n * Arguments:\n * Nothing\n *\n * Return Value:\n * canShow <BOOL>\n *\n * Example:\n * [] call ace_rangecard_fnc_canShow\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(GVAR(ammoClass) != \"\" && GVAR(magazineClass) != \"\" && GVAR(weaponClass) != \"\" && !GVAR(RangeCardOpened) && (\"ACE_RangeCard\" in (uniformItems ACE_player)) || (\"ACE_RangeCard\" in (vestItems ACE_player)))\n",
        "functionName": "ace_rangecard_fnc_canShow"
      },
      {
        "fileName": "fnc_canShowCopy.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Tests if the Range Card copy can be shown\n *\n * Arguments:\n * Nothing\n *\n * Return Value:\n * canShow <BOOL>\n *\n * Example:\n * [] call ace_rangecard_fnc_canShowCopy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(GVAR(ammoClassCopy) != \"\" && GVAR(magazineClassCopy) != \"\" && GVAR(weaponClassCopy) != \"\" && !GVAR(RangeCardOpened) && (\"ACE_RangeCard\" in (uniformItems ACE_player)) || (\"ACE_RangeCard\" in (vestItems ACE_player)))\n",
        "functionName": "ace_rangecard_fnc_canShowCopy"
      },
      {
        "fileName": "fnc_onCloseDialog.sqf",
        "content": "/*\n * Author: joko // Jonas\n * Add the Reserve Parachute to Units or Save Backpack if is a Parachute in Unit\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nuiNamespace setVariable ['RangleCard_Display', nil];\nGVAR(RangeCardOpened) = false;\n",
        "functionName": "ace_rangecard_fnc_onCloseDialog"
      },
      {
        "fileName": "fnc_openRangeCard.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Opens the range card dialog\n *\n * Arguments:\n * Open copy? <BOOLEAN>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_rangecard_fnc_openRangeCard\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(RangeCardOpened)) exitWith {};\n\nif (_this) then {\n    if (GVAR(ammoClassCopy) != \"\" && GVAR(magazineClassCopy) != \"\" && GVAR(weaponClassCopy) != \"\") then {\n        GVAR(RangeCardOpened) = true;\n\n        createDialog \"ACE_RangeCard_Dialog\";\n\n        [GVAR(zeroRangeCopy), GVAR(boreHeightCopy), GVAR(ammoClassCopy), GVAR(magazineClassCopy), GVAR(weaponClassCopy)] call FUNC(updateRangeCard);\n    };\n} else {\n    if (ACE_player call FUNC(updateClassNames)) then {\n        GVAR(RangeCardOpened) = true;\n\n        createDialog \"ACE_RangeCard_Dialog\";\n\n        [GVAR(zeroRange), GVAR(boreHeight), GVAR(ammoClass), GVAR(magazineClass), GVAR(weaponClass)] call FUNC(updateRangeCard);\n    };\n};\n",
        "functionName": "ace_rangecard_fnc_openRangeCard"
      },
      {
        "fileName": "fnc_updateClassNames.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Updates the ammo and weapon class names\n *\n * Arguments:\n * unit <OBJECT>\n *\n * Return Value:\n * Update successful? <BOOLEAN>\n *\n * Example:\n * unit call ace_rangecard_fnc_updateClassNames\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _unit = _this;\n\nprivate _ammoClass = \"\";\nprivate _magazineClass = \"\";\nprivate _weaponClass = primaryWeapon _unit;\n\nif (_weaponClass == \"\") exitWith { (GVAR(ammoClass) != \"\" && GVAR(magazineClass) != \"\" && GVAR(weaponClass) != \"\") };\n\n{\n    private _ammo = getText (configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\n    private _ammoConfig = (configFile >> \"CfgAmmo\" >> _ammo);\n    private _parentClasses = [_ammoConfig, true] call BIS_fnc_returnParents;\n    if (\"BulletBase\" in _parentClasses) exitWith {\n        _ammoClass = _ammo;\n        _magazineClass = _x;\n    };\n} forEach (primaryWeaponMagazine _unit);\n\nif (_ammoClass == \"\") exitWith { (GVAR(ammoClass) != \"\" && GVAR(magazineClass) != \"\" && GVAR(weaponClass) != \"\") };\n\nif (_unit == ACE_player) then {\n    GVAR(zeroRange)     = [_unit] call EFUNC(scopes,getCurrentZeroRange);\n    GVAR(boreHeight)    = [_unit, 0] call EFUNC(scopes,getBoreHeight);\n    GVAR(ammoClass)     = _ammoClass;\n    GVAR(magazineClass) = _magazineClass;\n    GVAR(weaponClass)   = _weaponClass;\n} else {\n    GVAR(zeroRangeCopy)     = [_unit] call EFUNC(scopes,getCurrentZeroRange);\n    GVAR(boreHeightCopy)    = [_unit, 0] call EFUNC(scopes,getBoreHeight);\n    GVAR(ammoClassCopy)     = _ammoClass;\n    GVAR(magazineClassCopy) = _magazineClass;\n    GVAR(weaponClassCopy)   = _weaponClass;\n};\n\ntrue\n",
        "functionName": "ace_rangecard_fnc_updateClassNames"
      },
      {
        "fileName": "fnc_updateRangeCard.sqf",
        "content": "/*\n * Authors: Ruthberg\n * Updates the range card data\n *\n * Arguments:\n * 0: zero range <NUMBER>\n * 1: bore height <NUMBER>\n * 2: ammo class <STRING>\n * 3: magazine class <STRING>\n * 4: weapon class <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1, 2, \"ammo\", \"magazine\", \"weapon\"] call ace_rangecard_fnc_openRangeCard\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n#define __dsp (uiNamespace getVariable \"RangleCard_Display\")\n\n\nparams [\"_zeroRange\", \"_boreHeight\", \"_ammoClass\", \"_magazineClass\", \"_weaponClass\"];\n\nif (_ammoClass == \"\" || _magazineClass == \"\" || _weaponClass == \"\") exitWith {};\n\n{\n    ctrlDelete _x;\n} forEach GVAR(controls);\nGVAR(controls) = [];\n\nfor \"_row\" from 0 to 49 do {\n    private _offset = if (_row < 5) then {0} else {0.003};\n    private _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 790000 + _row]);\n    _control ctrlSetPosition [safeZoneX + 0.183, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.062, 0.025];\n    if (_row in [0, 8, 18, 28, 38, 48]) then {\n        _control ctrlSetTextColor [1, 1, 1, 1];\n    } else {\n        _control ctrlSetTextColor [0, 0, 0, 1];\n    };\n    _control ctrlCommit 0;\n    _control ctrlSetText Str(100 + _row * 50);\n    GVAR(controls) pushBack _control;\n};\nfor \"_column\" from 0 to 8 do {\n    for \"_row\" from 0 to 49 do {\n        private _offset = if (_row < 5) then {0} else {0.003};\n        private _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 90000 + _column * 100 + _row]);\n        _control ctrlSetPosition [safeZoneX + 0.249 + _column * 0.055, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.052, 0.025];\n        _control ctrlCommit 0;\n        _control ctrlSetText \"-0.0\";\n        GVAR(controls) pushBack _control;\n    };\n};\nfor \"_column\" from 0 to 2 do {\n    for \"_row\" from 0 to 49 do {\n        private _offset = if (_row < 5) then {0} else {0.003};\n        private _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 90000 + (9 +_column) * 100 + _row]);\n        _control ctrlSetPosition [safeZoneX + 0.743 + _column * 0.049, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.047, 0.025];\n        _control ctrlCommit 0;\n        _control ctrlSetText \"-0.0\";\n        GVAR(controls) pushBack _control;\n    };\n};\nfor \"_column\" from 0 to 2 do {\n    for \"_row\" from 0 to 49 do {\n        private _offset = if (_row < 5) then {0} else {0.003};\n        private _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 90000 + (12 +_column) * 100 + _row]);\n        _control ctrlSetPosition [safeZoneX + 0.892 + _column * 0.049, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.047, 0.025];\n        _control ctrlCommit 0;\n        _control ctrlSetText \"-0.0\";\n        GVAR(controls) pushBack _control;\n    };\n};\n\nlnbClear 770100;\nlnbClear 770200;\nlnbClear 770300;\nlnbClear 770400;\n\nGVAR(rangeCardDataElevation) = [[], [], [], [], [], [], [], [], []];\nGVAR(rangeCardDataWindage) = [[], [], [], [], [], [], [], [], []];\nGVAR(rangeCardDataLead) = [[], [], [], [], [], [], [], [], []];\nGVAR(rangeCardDataMVs) = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nGVAR(lastValidRow) = [];\n\nGVAR(currentUnit) = 2;\nGVAR(rangeCardStartRange) = 100;\nGVAR(rangeCardIncrement) = 50;\nGVAR(rangeCardEndRange) = GVAR(rangeCardStartRange) + 49 * GVAR(rangeCardIncrement);\n\nprivate _ammoConfig = _ammoClass call EFUNC(advanced_ballistics,readAmmoDataFromConfig);\nprivate _weaponConfig = _weaponClass call EFUNC(advanced_ballistics,readWeaponDataFromConfig);\nprivate _airFriction = _ammoConfig select 0;\nprivate _barrelTwist = _weaponConfig select 0;\nprivate _barrelLength = _weaponConfig select 2;\nprivate _muzzleVelocity = 0;\n\nprivate _bc = 0;\nif (count (_ammoConfig select 6) > 0) then {\n    _bc = (_ammoConfig select 6) select 0;\n};\nprivate _transonicStabilityCoef = _ammoConfig select 4;\nprivate _dragModel = _ammoConfig select 5;\nprivate _atmosphereModel = _ammoConfig select 8;\n\nprivate _useABConfig = (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]);\nif (_bc == 0) then {\n    _useABConfig = false;\n};\n\nif (_barrelLength > 0 && _useABConfig) then {\n    _muzzleVelocity = [_barrelLength, _ammoConfig select 10, _ammoConfig select 11, 0] call EFUNC(advanced_ballistics,calculateBarrelLengthVelocityShift);\n} else {\n    private _initSpeed     = getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"initSpeed\");\n    private _initSpeedCoef = getNumber (configFile >> \"CfgWeapons\" >> _weaponClass >> \"initSpeed\");\n    if (_initSpeedCoef < 0) then {\n        _initSpeed = _initSpeed * -_initSpeedCoef;\n    };\n    if (_initSpeedCoef > 0) then {\n        _initSpeed = _initSpeedCoef;\n    };\n    _muzzleVelocity = _initSpeed;\n};\n\nctrlSetText [770000, format[\"%1'' - %2 gr (%3)\", round((_ammoConfig select 1) * 39.3700787) / 1000, round((_ammoConfig select 3) * 15.4323584), _ammoClass]];\nif (_barrelLength > 0) then {\n    if (_useABConfig && _barrelTwist > 0) then {\n        ctrlSetText [770002, format[\"Barrel: %1'' 1:%2'' twist\", round(2 * _barrelLength * 0.0393700787) / 2, round(_barrelTwist * 0.0393700787)]];\n    } else {\n        ctrlSetText [770002, format[\"Barrel: %1''\", round(2 * _barrelLength * 0.0393700787) / 2]];\n    };\n};\n\nlnbAddRow [770100, [\"4mps Wind(MRADs)\", \"1mps LEAD(MRADs)\"]];\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    lnbAddRow [770100, [\"Air/Ammo Temp\", \"Air/Ammo Temp\"]];\n\n    lnbAddRow [770200, [\"-15°C\", \" -5°C\", \"  5°C\", \" 10°C\", \" 15°C\", \" 20°C\", \" 25°C\", \" 30°C\", \" 35°C\"]];\n    lnbAddRow [770300, [\"-15°C\", \" 10°C\", \" 35°C\", \"-15°C\", \" 10°C\", \" 35°C\"]];\n};\n\nctrlSetText [77003, format[\"%1m ZERO\", round(_zeroRange)]];\n\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n    ctrlSetText [770001, format[\"Drop Tables for B.P.: %1mb; Corrected for MVV at Air/Ammo Temperatures -15-35 °C\", round(EGVAR(scopes,zeroReferenceBarometricPressure) * 100) / 100]];\n    ctrlSetText [77004 , format[\"B.P.: %1mb\", round(EGVAR(scopes,zeroReferenceBarometricPressure) * 100) / 100]];\n} else {\n    ctrlSetText [770001, \"\"];\n    ctrlSetText [77004 , \"\"];\n};\n\nprivate _cacheEntry = missionNamespace getVariable format[QGVAR(%1_%2_%3_%4_%5), _zeroRange, _boreHeight, _ammoClass, _weaponClass, missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]];\nif (isNil {_cacheEntry}) then {\n    private _scopeBaseAngle = if (!_useABConfig) then {\n        private _zeroAngle = \"ace_advanced_ballistics\" callExtension format [\"calcZero:%1:%2:%3:%4\", _zeroRange, _muzzleVelocity, _airFriction, _boreHeight];\n        (parseNumber _zeroAngle)\n    } else {\n        private _zeroAngle = \"ace_advanced_ballistics\" callExtension format [\"calcZeroAB:%1:%2:%3:%4:%5:%6:%7:%8:%9\", _zeroRange, _muzzleVelocity, _boreHeight, EGVAR(scopes,zeroReferenceTemperature), EGVAR(scopes,zeroReferenceBarometricPressure), EGVAR(scopes,zeroReferenceHumidity), _bc, _dragModel, _atmosphereModel];\n        (parseNumber _zeroAngle)\n    };\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false] && missionNamespace getVariable [QEGVAR(advanced_ballistics,ammoTemperatureEnabled), false]) then {\n        {\n            private _mvShift = [_ammoConfig select 9, _x] call EFUNC(advanced_ballistics,calculateAmmoTemperatureVelocityShift);\n            private _mv = _muzzleVelocity + _mvShift;\n\n            [_scopeBaseAngle,_boreHeight,_airFriction,_mv,_x,EGVAR(scopes,zeroReferenceBarometricPressure),EGVAR(scopes,zeroReferenceHumidity),200,4,1,GVAR(rangeCardEndRange),_bc,_dragModel,_atmosphereModel,_transonicStabilityCoef,_forEachIndex,_useABConfig] call FUNC(calculateRangeCard);\n        } forEach [-15, -5, 5, 10, 15, 20, 25, 30, 35];\n    } else {\n        [_scopeBaseAngle,_boreHeight,_airFriction,_muzzleVelocity,15,EGVAR(scopes,zeroReferenceBarometricPressure),EGVAR(scopes,zeroReferenceHumidity),200,4,1,GVAR(rangeCardEndRange),_bc,_dragModel,_atmosphereModel,_transonicStabilityCoef,3,_useABConfig] call FUNC(calculateRangeCard);\n    };\n\n    for \"_i\" from 0 to 9 do {\n        GVAR(lastValidRow) pushBack count (GVAR(rangeCardDataElevation) select _i);\n        while {count (GVAR(rangeCardDataElevation) select _i) < 50} do {\n            if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n                (GVAR(rangeCardDataElevation) select _i) pushBack \"###\";\n                (GVAR(rangeCardDataWindage) select _i) pushBack \"##\";\n                (GVAR(rangeCardDataLead) select _i) pushBack \"##\";\n            } else {\n                (GVAR(rangeCardDataElevation) select _i) pushBack \"\";\n                (GVAR(rangeCardDataWindage) select _i) pushBack \"\";\n                (GVAR(rangeCardDataLead) select _i) pushBack \"\";\n            };\n        };\n    };\n\n    missionNamespace setVariable [format[QGVAR(%1_%2_%3_%4_%5), _zeroRange, _boreHeight, _ammoClass, _weaponClass, missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]], [GVAR(rangeCardDataElevation), GVAR(rangeCardDataWindage), GVAR(rangeCardDataLead), GVAR(rangeCardDataMVs), GVAR(lastValidRow)]];\n} else {\n    GVAR(rangeCardDataElevation) = _cacheEntry select 0;\n    GVAR(rangeCardDataWindage)   = _cacheEntry select 1;\n    GVAR(rangeCardDataLead)      = _cacheEntry select 2;\n    GVAR(rangeCardDataMVs)       = _cacheEntry select 3;\n    GVAR(lastValidRow)           = _cacheEntry select 4;\n};\n\nlnbAddRow [770200, GVAR(rangeCardDataMVs)];\n\nfor \"_column\" from 0 to 8 do {\n    for \"_row\" from 0 to 49 do {\n        private _control = (__dsp displayCtrl (90000 + _column * 100 + _row));\n        _control ctrlSetText ((GVAR(rangeCardDataElevation) select _column) select _row);\n        if (_row >= (GVAR(lastValidRow) select _column)) then {\n            _control ctrlSetTextColor [0, 0, 0, 0.6];\n        } else {\n            _control ctrlSetTextColor [0, 0, 0, 1.0];\n        };\n        _control ctrlCommit 0;\n    };\n};\n{\n    for \"_row\" from 0 to 49 do {\n        private _control = (__dsp displayCtrl (90000 + (9 + _forEachIndex) * 100 + _row));\n        _control ctrlSetText ((GVAR(rangeCardDataWindage) select _x) select _row);\n        if (_row >= (GVAR(lastValidRow) select _x)) then {\n            _control ctrlSetTextColor [0, 0, 0, 0.6];\n        } else {\n            _control ctrlSetTextColor [0, 0, 0, 1.0];\n        };\n        _control ctrlCommit 0;\n    };\n} forEach [0, 3, 8];\n\n{\n    for \"_row\" from 0 to 49 do {\n        private _control = (__dsp displayCtrl (90000 + (12 + _forEachIndex) * 100 + _row));\n        _control ctrlSetText ((GVAR(rangeCardDataLead) select _x) select _row);\n        if (_row >= (GVAR(lastValidRow) select _x)) then {\n            _control ctrlSetTextColor [0, 0, 0, 0.6];\n        } else {\n            _control ctrlSetTextColor [0, 0, 0, 1.0];\n        };\n        _control ctrlCommit 0;\n    };\n} forEach [0, 3, 8];\n\nctrlSetText [770020, \"For best results keep ammunition at ambient air temperature. Tables calculated for the above listed barrel\"];\nctrlSetText [770021, format[\"and load with optic mounted %1'' above line of bore.\", round((_boreHeight / 2.54) * 10) / 10]];\n",
        "functionName": "ace_rangecard_fnc_updateRangeCard"
      }
    ]
  },
  {
    "component": "realisticnames",
    "files": [
      {
        "fileName": "dev_dumpPylon.sqf",
        "content": "// [] execVM \"z\\ace\\addons\\realisticnames\\dev_dumpPylon.sqf\";\n\nprivate _justLog = true;\n\ndiag_log text format [\"[Dumping Pylons] --------------------\"];\nprivate _magazines = configProperties [configFile >> \"CfgMagazines\", \"isClass _x\", true];\n{\n    private _pylonWeapon = getText (_x >> \"pylonWeapon\");\n    if (_pylonWeapon != \"\") then {\n        private _weaponConfig = configFile >> \"CfgWeapons\" >> _pylonWeapon;\n        private _weaponName = getText (_weaponConfig >> \"displayName\");\n        private _inherit = (configProperties [_x, \"configName _x == 'displayName'\", false]) isEqualTo [];\n        private _pylonMagName = getText (_x >> \"displayName\");\n        if (_justLog) then {\n            if (!_inherit) then {\n                diag_log text format [\"%1: [%2 vs %3]\", configName _x, _pylonMagName, _weaponName];\n            } else {\n                diag_log text format [\"  -  %1: [%2 vs %3]\", configName _x, _pylonMagName, _weaponName];\n            };\n        } else {\n            if (!_inherit) then {\n                diag_log text format ['class %1;', configName inheritsFrom _x];\n                diag_log text format ['class %1: %2 {', configName _x, configName inheritsFrom _x];\n                diag_log text format ['displayName = \"%1\"; [vanilla: %2 - %3]', _weaponName, _pylonMagName, _pylonWeapon];\n                diag_log text format ['};', configName _x, configName inheritsFrom _x, _weaponName, _pylonMagName];\n            };\n        };\n    };\n} forEach _magazines;\n"
      }
    ],
    "functions": []
  },
  {
    "component": "realisticweights",
    "files": [],
    "functions": []
  },
  {
    "component": "rearm",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nGVAR(hardpointGroupsCache) = [] call CBA_fnc_createNamespace;\nGVAR(configTypesAdded) = [];\n[\"ace_settingsInitialized\", {\n    TRACE_2(\"settingsInit\",GVAR(level),GVAR(supply));\n    [\"LandVehicle\", \"Init\", {_this call FUNC(initSupplyVehicle)}, true, [\"StaticWeapon\"], true] call CBA_fnc_addClassEventHandler;\n    [\"ReammoBox_F\", \"Init\", {_this call FUNC(initSupplyVehicle)}, true, [], true] call CBA_fnc_addClassEventHandler;\n}] call CBA_fnc_addEventHandler;\n\n[\"ace_unconscious\", LINKFUNC(handleUnconscious)] call CBA_fnc_addEventHandler;\n[\"vehicle\", {\n    params [\"_unit\"];\n    [_unit] call FUNC(dropAmmo);\n}] call CBA_fnc_addPlayerEventHandler;\n\nif (isServer) then {\n    addMissionEventHandler [\"HandleDisconnect\", {params [\"_unit\"]; [_unit] call FUNC(dropAmmo)}];\n};\n\n[QGVAR(makeDummyEH), LINKFUNC(makeDummy)] call CBA_fnc_addEventHandler;\n[QGVAR(rearmEntireVehicleSuccessEH), LINKFUNC(rearmEntireVehicleSuccess)] call CBA_fnc_addEventHandler;\n[QGVAR(rearmEntireVehicleSuccessLocalEH), LINKFUNC(rearmEntireVehicleSuccessLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(rearmSuccessEH), LINKFUNC(rearmSuccess)] call CBA_fnc_addEventHandler;\n[QGVAR(rearmSuccessLocalEH), LINKFUNC(rearmSuccessLocal)] call CBA_fnc_addEventHandler;\n\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addMagazineToSupply.sqf",
        "content": "/*\n * Author: GitHawk\n * Adds magazines to the supply. [Global Effects]\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Magazine Classname <STRING>\n * 2: Only partial <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, \"32Rnd_155mm_Mo_shells\"] call ace_rearm_fnc_addMagazineToSupply\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif !(EGVAR(common,settingsInitFinished)) exitWith { // only run this after the settings are initialized\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(addMagazineToSupply), _this];\n};\n\nparams [[\"_truck\", objNull, [objNull]], [\"_magazineClass\", \"\", [\"\"]], [\"_partial\", false, [false]]];\nTRACE_3(\"addMagazineToSupply\",_truck,_magazineClass,_partial);\n\nif (GVAR(supply) == 0) exitWith {WARNING(\"supply setting is set to unlimited\");};\n\nif (isNull _truck || {_magazineClass isEqualTo \"\"}) exitWith {};\n\n([_magazineClass] call FUNC(getCaliber)) params [\"_cal\", \"_idx\"];\n\n// With limited supply, we add the caliber to the supply count\nif (GVAR(supply) == 1) then {\n    private _supply = [_truck] call FUNC(getSupplyCount);\n    private _amountToAdd = if (!_partial || {GVAR(level) == 1}) then {\n        _cal\n    } else {\n        private _magazinePart = ((REARM_COUNT select _idx) / (getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\"))) min 1;\n        _cal * _magazinePart\n    };\n    TRACE_1(\"Adding\",_amountToAdd);\n    [_truck, (_supply + _amountToAdd)] call FUNC(setSupplyCount);\n};\n\n// With magazine specific supply, we add or update the magazineSupply array\nif (GVAR(supply) == 2) then {\n    private _magazineSupply = _truck getVariable [QGVAR(magazineSupply), []];\n    private _magazineIdx = -1;\n    {\n        _x params [\"_magazine\", \"_rounds\"];\n        if ((_magazine isEqualTo _magazineClass)) exitWith {\n            _magazineIdx = _forEachIndex;\n        };\n    } forEach _magazineSupply;\n\n    private _roundsPerTransaction = getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\");\n    if (_partial) then {\n        _roundsPerTransaction = _roundsPerTransaction min (REARM_COUNT select _idx);\n    };\n    if (_magazineIdx == -1) then {\n        if (_magazineSupply isEqualTo []) then {\n            _magazineSupply = [[_magazineClass, _roundsPerTransaction]];\n        } else {\n            _magazineSupply append [[_magazineClass, _roundsPerTransaction]];\n        }\n    } else {\n        (_magazineSupply select _magazineIdx) params [\"\", \"_rounds\"];\n        _magazineSupply set [_magazineIdx, [_magazineClass, (_rounds + _roundsPerTransaction)]];\n    };\n    _truck setVariable [QGVAR(magazineSupply), _magazineSupply, true];\n};\n",
        "functionName": "ace_rearm_fnc_addMagazineToSupply"
      },
      {
        "fileName": "fnc_addRearmActions.sqf",
        "content": "/*\n * Author: GitHawk\n * Show the resupplyable ammunition of all surrounding vehicles.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n *\n * Return Value:\n * ChildActions <ARRAY>\n *\n * Example:\n * [tank] call ace_rearm_fnc_addRearmActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\"];\n\nprivate _vehicles = nearestObjects [_truck, [\"AllVehicles\"], 20];\n_vehicles = _vehicles select {(_x != _truck) && {!(_x isKindOf \"CAManBase\")} && {!(_x getVariable [QGVAR(disabled), false])}};\n\nprivate _vehicleActions = [];\n{\n    private _vehicle = _x;\n    \n    // Array of magazines that can be rearmed in the vehicle\n    private _needRearmMags = ([_vehicle] call FUNC(getNeedRearmMagazines)) apply {_x select 0};\n    \n    // _needRearmMags without duplicates\n    private _magazineHelper = _needRearmMags arrayIntersect _needRearmMags;\n\n    _magazineHelper = _magazineHelper select {[_truck, _x] call FUNC(hasEnoughSupply)};\n    TRACE_2(\"can add\",_x,_magazineHelper);\n    \n    if (!(_magazineHelper isEqualTo [])) then {\n        private _icon = getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"Icon\");\n        if !((_icon select [0, 1]) == \"\\\") then {\n            _icon = \"\";\n        };\n        if (GVAR(level) == 0) then {\n            // [Level 0] adds a single action to rearm the entire vic\n            private _action = [\n                _vehicle,\n                getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\"),\n                _icon,\n                {_this call FUNC(rearmEntireVehicle)},\n                {true},\n                {},\n                _vehicle\n            ] call EFUNC(interact_menu,createAction);\n            _vehicleActions pushBack [_action, [], _truck];\n        } else {\n            // [Level 1,2] - Add actions for each magazine\n            private _actions = [];\n            {\n                private _action = [\n                    _x,\n                    getText(configFile >> \"CfgMagazines\" >> _x >> \"displayName\"),\n                    getText(configFile >> \"CfgMagazines\" >> _x >> \"picture\"),\n                    {_this call FUNC(takeAmmo)},\n                    {true},\n                    {},\n                    [_x, _vehicle]\n                ] call EFUNC(interact_menu,createAction);\n\n                _actions pushBack [_action, [], _truck];\n            } forEach _magazineHelper;\n\n            private _action = [\n                _vehicle,\n                getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\"),\n                _icon,\n                {},\n                {true},\n                {},\n                []\n            ] call EFUNC(interact_menu,createAction);\n            \n            _vehicleActions pushBack [_action, _actions, _truck];\n        };\n    };\n} forEach _vehicles;\n\n_vehicleActions\n",
        "functionName": "ace_rearm_fnc_addRearmActions"
      },
      {
        "fileName": "fnc_addVehicleMagazinesToSupply.sqf",
        "content": "/*\n * Author: GitHawk\n * Adds all magazines of a vehicle to the supply.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Vehicle object or Vehicle class <OBJECT><STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, tank] call ace_rearm_fnc_addVehicleMagazinesToSupply\n * [ammo_truck, \"B_MBT_01_arty_F\"] call ace_rearm_fnc_addVehicleMagazinesToSupply\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif !(EGVAR(common,settingsInitFinished)) exitWith { // only run this after the settings are initialized\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(addVehicleMagazinesToSupply), _this];\n};\n\nparams [[\"_truck\", objNull, [objNull]], [\"_vehicle\", objNull, [objNull, \"\"]]];\nTRACE_2(\"addVehicleMagazinesToSupply\",_truck,_vehicle);\n\nif (isNull _truck) exitWith {};\nif (_vehicle isEqualType objNull) then {_vehicle = typeOf _vehicle};\nif (_vehicle == \"\") exitWith {\n    ERROR_1(\"VehicleType [%1] is empty in ace_rearm_fnc_addVehicleMagazinesToSupply\",_string);\n};\nprivate _turrets = [_vehicle] call FUNC(getAllRearmTurrets);\n{\n    private _turretPath = _x;\n    private _magazines = [_vehicle, _turretPath] call FUNC(getTurretConfigMagazines);\n    TRACE_2(\"\",_turretPath,_magazines);\n    {\n        [_truck, _x] call FUNC(addMagazineToSupply);\n        false\n    } count _magazines;\n    false\n} count _turrets;\n\n// 1.70 pylons\nprivate _pylonConfigs = configProperties [configFile >> \"CfgVehicles\" >> _vehicle >> \"Components\" >> \"TransportPylonsComponent\" >> \"Pylons\", \"isClass _x\"];\n{\n    private _defaultMag = getText (_x >> \"attachment\");\n    TRACE_3(\"\",_defaultMag,configName _x,_forEachIndex);\n    [_truck, _defaultMag] call FUNC(addMagazineToSupply);\n} forEach _pylonConfigs;\n",
        "functionName": "ace_rearm_fnc_addVehicleMagazinesToSupply"
      },
      {
        "fileName": "fnc_canReadSupplyCounter.sqf",
        "content": "/*\n * Author: GitHawk\n * Checks if unit can read supply counter. [Only for GVAR(supply) > 0]\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * Can read supply counter <BOOL>\n *\n * Example:\n * [ammo_truck, player] call ace_rearm_fnc_canReadSupplyCounter\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_unit\"];\n\n(alive _unit)\n&& {_unit isKindOf \"CAManBase\"}\n&& {local _unit}\n&& {alive _truck}\n&& {(_truck distance _unit) < REARM_ACTION_DISTANCE}\n&& {GVAR(supply) > 0}\n&& {[_unit, _truck, [\"IsNotInside\"]] call EFUNC(common,canInteractWith)} // manually added actions need this\n\n",
        "functionName": "ace_rearm_fnc_canReadSupplyCounter"
      },
      {
        "fileName": "fnc_canRearm.sqf",
        "content": "/*\n * Author: GitHawk, Jonpas\n * Check if a unit can rearm.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * Can Rearm <BOOL>\n *\n * Example:\n * [tank, player] call ace_rearm_fnc_canRearm\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_unit\"];\n\nif (!alive _vehicle) exitWith {false};\nif (GVAR(level) == 0 || {isNull _unit} || {!(_unit isKindOf \"CAManBase\")} || {!local _unit} || {_vehicle distance _unit > REARM_ACTION_DISTANCE} || {_vehicle getVariable [QGVAR(disabled), false]}) exitWith {false};\n\nprivate _dummy = _unit getVariable [QGVAR(dummy), objNull];\nif (isNull _dummy) exitwith {false};\nprivate _magazineClass = _dummy getVariable QGVAR(magazineClass);\nif (isNil \"_magazineClass\") exitWith {false};\n\nprivate _needRearmMags = [_vehicle] call FUNC(getNeedRearmMagazines);\n\n// Testing if vehicle needs rearm on any magazines of class _magazineClass\nprivate _needsRearm = ({(_x select 0) isEqualTo _magazineClass} count _needRearmMags) > 0;\n\n_needsRearm\n",
        "functionName": "ace_rearm_fnc_canRearm"
      },
      {
        "fileName": "fnc_canStoreAmmo.sqf",
        "content": "/*\n * Author: GitHawk\n * Check if a unit can store ammo in an ammo truck.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * Can Store Ammo <BOOL>\n *\n * Example:\n * [ammo_truck, player] call ace_rearm_fnc_canStoreAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_unit\"];\n   \n(alive _unit)\n&& {_unit isKindOf \"CAManBase\"}\n&& {local _unit}\n&& {!isNull (_unit getVariable [QGVAR(dummy), objNull])}\n&& {alive _truck}\n&& {(_truck distance _unit) < REARM_ACTION_DISTANCE}\n&& {[_unit, _truck, [\"IsNotInside\"]] call EFUNC(common,canInteractWith)} // manually added actions need this\n",
        "functionName": "ace_rearm_fnc_canStoreAmmo"
      },
      {
        "fileName": "fnc_canTakeAmmo.sqf",
        "content": "/*\n * Author: GitHawk\n * Check if a unit can pick up ammo.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * Can Pick Up Ammo <BOOL>\n *\n * Example:\n * [ammo_truck, player] call ace_rearm_fnc_canTakeAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_unit\"];\n\n(alive _unit)\n&& {_unit isKindOf \"CAManBase\"}\n&& {local _unit}\n&& {alive _truck}\n&& {(_truck distance _unit) < REARM_ACTION_DISTANCE}\n&& {isNull (_unit getVariable [QGVAR(dummy), objNull])}\n&& {[_unit, _truck, [\"IsNotInside\"]] call EFUNC(common,canInteractWith)} // manually added actions need this\n",
        "functionName": "ace_rearm_fnc_canTakeAmmo"
      },
      {
        "fileName": "fnc_createDummy.sqf",
        "content": "/*\n * Author: GitHawk\n * Creates a carryable ammunition dummy object.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Magazine Classname <STRING>\n *\n * Return Value:\n * Created Dummy <OBJECT>\n *\n * Example:\n * [player, \"500Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_createDummy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_magazineClass\"];\n\nprivate _ammo = getText (configFile >> \"CfgMagazines\" >> _magazineClass >> \"ammo\");\nprivate _dummyName = getText (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(dummy));\nprivate _dummy = objNull;\nif !(_dummyName == \"\") then {\n    _dummy = _dummyName createVehicle (position _unit);\n} else {\n    _dummy = QGVAR(defaultCarriedObject) createVehicle (position _unit);\n};\n_dummy allowDamage false;\n_dummy setVariable [QGVAR(magazineClass), _magazineClass, true];\n\nTRACE_4(\"createdDummy\",_unit,_magazineClass,_dummyName,_dummy);\n\n_dummy\n",
        "functionName": "ace_rearm_fnc_createDummy"
      },
      {
        "fileName": "fnc_disable.sqf",
        "content": "/*\n * Author: GitHawk\n * Disables being able to rearm a vehicle's turrets. [Global Effects]\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Disable <BOOL>(optional)\n *\n * Return Value:\n * None\n *\n * Example:\n * [tank] call ace_rearm_fnc_disable\n * [tank, false] call ace_rearm_fnc_disable\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\n    [\"_vehicle\", objNull, [objNull]],\n    [\"_disable\", true, [true]]\n];\n\n_vehicle setVariable [QGVAR(disabled), _disable, true];\n",
        "functionName": "ace_rearm_fnc_disable"
      },
      {
        "fileName": "fnc_dropAmmo.sqf",
        "content": "/*\n * Author: GitHawk\n * Drops a magazine, optionally deletes it and optionally unholsters the wepaon.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Delete dummy object <BOOL>(optional)\n * 2: Unholster Weapon <BOOL>(optional)\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, true, true] call ace_rearm_fnc_dropAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\n    \"_unit\",\n    [\"_delete\", false],\n    [\"_unholster\", true]\n];\n\nprivate _dummy = _unit getVariable [QGVAR(dummy), objNull];\nif !(isNull _dummy) then {\n    detach _dummy;\n    if (_delete) then {\n        deleteVehicle _dummy;\n    } else {\n        _dummy setVelocity [0,0,-0.1];\n    };\n    _unit setVariable [QGVAR(dummy), objNull];\n};\nprivate _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\nif (_actionID != -1) then {\n    _unit removeAction _actionID;\n    _unit setVariable [QGVAR(ReleaseActionID), nil];\n};\n[_unit, \"forceWalk\", QGVAR(vehRearm), false] call EFUNC(common,statusEffect_set);\n\nif (_unholster) then {\n    REARM_UNHOLSTER_WEAPON\n};\n",
        "functionName": "ace_rearm_fnc_dropAmmo"
      },
      {
        "fileName": "fnc_getAllRearmTurrets.sqf",
        "content": "/*\n * Author: Tuupertunut\n * Returns all turrets in a vehicle.\n *\n * BIS command \"allTurrets\" does not return the driver turret at the time of writing (2017-07-16).\n * This function just adds driver turret to the array returned by \"allTurrets\".\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Turret paths <ARRAY>\n *\n * Example:\n * [vehicle] call ace_rearm_fnc_getAllRearmTurrets\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _turrets = allTurrets _vehicle;\n\n// Adding the driver turret \"[-1]\".\n_turrets pushBack [-1];\n\n_turrets\n",
        "functionName": "ace_rearm_fnc_getAllRearmTurrets"
      },
      {
        "fileName": "fnc_getCaliber.sqf",
        "content": "/*\n * Author: GitHawk\n * Get the caliber of the ammo in a magazine and return its parameters.\n *\n * Arguments:\n * 0: Magazine Classname <STRING>\n *\n * Return Value:\n * 0: Caliber information <ARRAY>\n *   0: Rounded caliber <NUMBER>\n *   1: Caliber index <NUMBER>\n *\n * Example:\n * [\"500Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_getCaliber\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\n    [\"_magazineClass\", \"\"]\n];\n\nif (_magazineClass isEqualTo \"\") exitWith {[8, 2]};\n\nprivate _ammo = getText (configFile >> \"CfgMagazines\" >> _magazineClass >> \"ammo\");\nprivate _tmpCal = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ace_caliber\");\nprivate _cal = 8;\nif (_tmpCal > 0) then {\n    _cal = _tmpCal;\n} else {\n    _tmpCal = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(caliber));\n    if (_tmpCal > 0) then {\n        _cal = _tmpCal;\n    } else {\n        diag_log format [\"[ACE] ERROR: Undefined Ammo [%1 : %2]\", _ammo, inheritsFrom (configFile >> \"CfgAmmo\" >> _ammo)];\n        if (_ammo isKindOf \"BulletBase\") then {\n            _cal = 8;\n        } else {\n            _cal = 100;\n        };\n    };\n};\n_cal = round _cal;\nprivate _idx = REARM_CALIBERS find _cal;\nif (_idx == -1 ) then {\n    _idx = 2;\n};\n\n[_cal, _idx]\n",
        "functionName": "ace_rearm_fnc_getCaliber"
      },
      {
        "fileName": "fnc_getHardpointMagazines.sqf",
        "content": "/*\n * Author: PabstMirror\n * Gets possible magazines that can be added to a pylon.\n *\n * Arguments:\n * 0: Pylon config <CONFIG>\n *\n * Return Value:\n * Magazines <ARRAY>\n *\n * Example:\n * [config] call ace_rearm_fnc_getHardpointMagazines\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nACE_DEPRECATED(QFUNC(getHardpointMagazines),\"3.12.0\",\"getCompatiblePylonMagazines\");\n\nparams [\"_pylonConfig\"];\n\nprivate _return = GVAR(hardpointGroupsCache) getVariable (str _pylonConfig);\nif (isNil \"_return\") then {\n    _return = [];\n    private _hardpoints = (getArray (_pylonConfig >> \"hardpoints\")) apply {toLower _x};\n    private _maxWeight = if (isNumber (_pylonConfig >> \"maxWeight\")) then {getNumber (_pylonConfig >> \"maxWeight\")} else {1e5};\n    private _mags = configProperties [configFile >> \"CfgMagazines\", \"(isClass _x) && {isArray (_x >> 'hardpoints')}\"];\n    {\n        if ((getNumber (_x >> \"mass\")) < _maxWeight) then {\n            private _magHardpoints = (getArray (_x >> \"hardpoints\")) apply {toLower _x};\n            if (!((_hardpoints arrayIntersect _magHardpoints) isEqualTo [])) then {\n                _return pushBack configName _x;\n            };\n        };\n    } forEach _mags;\n    if ((str _pylonConfig) != \"\") then {\n        GVAR(hardpointGroupsCache) setVariable [(str _pylonConfig), _return];\n    };\n};\n\n_return;\n",
        "functionName": "ace_rearm_fnc_getHardpointMagazines"
      },
      {
        "fileName": "fnc_getMaxMagazines.sqf",
        "content": "/*\n * Author: GitHawk, Jonpas\n * Calculates the maximum number of magazines a turret can hold according to config.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret Path <ARRAY>\n * 2: Magazine Classname <STRING>\n *\n * Return Value:\n * Number of magazines on the turret path <NUMBER>\n *\n * Example:\n * [vehicle, [0], \"500Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_getMaxMagazines\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_turretPath\", \"_magazineClass\"];\n\nprivate _count = {_x == _magazineClass} count ([_vehicle, _turretPath] call FUNC(getTurretConfigMagazines));\n_count\n",
        "functionName": "ace_rearm_fnc_getMaxMagazines"
      },
      {
        "fileName": "fnc_getNeedRearmMagazines.sqf",
        "content": "/*\n * Author: Tuupertunut\n * Returns information about every magazine that can be rearmed in the vehicle. Multiple mags of\n * same class in the same turret are grouped together for practical reasons.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Magazine info <ARRAY of ARRAYs>\n * Child arrays:\n *   0: Magazine class <STRING>\n *   1: Turret path <ARRAY>\n *   2: Is pylon magazine <BOOLEAN>\n *   3: Pylon index (-1 if not pylon) <NUMBER>\n *   4: Max magazines <NUMBER>\n *   5: Current magazines <NUMBER>\n *   6: Max rounds per magazine <NUMBER>\n *   7: Current rounds in magazines <ARRAY of NUMBERs>\n *\n * Example:\n * [tank] call ace_rearm_fnc_getNeedRearmMagazines\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _magazineInfo = [];\n\n// 1.70 pylons\nprivate _pylonConfigs = configProperties [configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"Components\" >> \"TransportPylonsComponent\" >> \"Pylons\", \"isClass _x\"];\n{\n    private _pylonConfig = _x;\n    \n    // Strangely, a 1-based index.\n    private _pylonIndex = _forEachIndex + 1;\n    \n    // Retrieving pylon magazine by index. If the pylon is empty, it is marked with \"\".\n    private _pylonMagazine = (getPylonMagazines _vehicle) select (_pylonIndex - 1);\n    \n    // Only care about pylons that have a magazine.\n    if (!(_pylonMagazine isEqualTo \"\")) then {\n    \n        private _maxRounds = getNumber (configFile >> \"CfgMagazines\" >> _pylonMagazine >> \"count\");\n        private _currentRounds = _vehicle ammoOnPylon _pylonIndex;\n        \n        if (_currentRounds < _maxRounds) then {\n            // getPylonTurret expects 0 based index, and returns driver turret as [-1]\n            private _pylonTurret = [_vehicle, (_pylonIndex - 1)] call EFUNC(common,getPylonTurret);\n\n            _magazineInfo pushBack [_pylonMagazine, _pylonTurret, true, _pylonIndex, 1, 1, _maxRounds, [_currentRounds]];\n        };\n    };\n} forEach _pylonConfigs;\n\nprivate _turrets = [_vehicle] call FUNC(getAllRearmTurrets);\n{\n    private _turretPath = _x;\n    private _magazines = [_vehicle, _turretPath] call FUNC(getTurretConfigMagazines);\n\n    // _magazines without duplicates\n    private _magazineClasses = _magazines arrayIntersect _magazines;\n    \n    {\n        private _magazineClass = _x;\n        \n        private _maxMagazines = [_vehicle, _turretPath, _magazineClass] call FUNC(getMaxMagazines);\n        private _maxRoundsPerMag = getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\");\n        \n        /* Array of ammo counts in every magazine. Example: [200, 200, 152] means 2 mags with 200\n         * rounds and 1 mag with 152 rounds. */\n        private _currentRounds = [_vehicle, _turretPath, _magazineClass] call FUNC(getTurretMagazineAmmo);\n        private _currentMagazines = count _currentRounds;\n\n        /* If there is space for new magazines or if some magazines are not full, add the magazine\n         * type to _magazineInfo. */\n        if ((_currentMagazines < _maxMagazines) || {({_x < _maxRoundsPerMag} count _currentRounds) > 0}) then {\n            _magazineInfo pushBack [_magazineClass, _turretPath, false, -1, _maxMagazines, _currentMagazines, _maxRoundsPerMag, _currentRounds];\n        };\n        \n    } forEach _magazineClasses;\n} forEach _turrets;\n\nTRACE_2(\"getNeedRearmMagazines\",_vehicle,_magazineInfo);\n_magazineInfo\n",
        "functionName": "ace_rearm_fnc_getNeedRearmMagazines"
      },
      {
        "fileName": "fnc_getSupplyCount.sqf",
        "content": "/*\n * Author: GitHawk\n * Get the supply count.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n *\n * Return Value:\n * Supply count <NUMBER>\n *\n * Example:\n * [ammo_truck] call ace_rearm_fnc_getSupplyCount\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_truck\", objNull, [objNull]]];\n\nif (GVAR(supply) != 1) exitWith {\n    WARNING(\"supply setting is not set to limited\"); // func shouldn't have been called\n    -1\n};\n\nprivate _supply = _truck getVariable QGVAR(currentSupply);\n\nif (isNil \"_supply\") then {\n    if (isNumber (configFile >> \"CfgVehicles\" >> typeOf _truck >> QGVAR(defaultSupply))) then {\n        _supply = getNumber (configFile >> \"CfgVehicles\" >> typeOf _truck >> QGVAR(defaultSupply));\n    } else {\n        _supply = 1200;\n    };\n    if (_supply > 0) then {\n        _truck setVariable [QGVAR(currentSupply), _supply, true];\n    };\n};\n\n_supply\n",
        "functionName": "ace_rearm_fnc_getSupplyCount"
      },
      {
        "fileName": "fnc_getTurretConfigMagazines.sqf",
        "content": "/*\n * Author: GitHawk, Jonpas\n * Returns all magazines a turret of a vehicle object can hold according to config.\n *\n * Arguments:\n * 0: Vehicle object or typeOf <OBJECT><STRING>\n * 1: Turret Path <ARRAY>\n *\n * Return Value:\n * Magazine classes in TurretPath <ARRAY>\n *\n * Example:\n * [vehicle, [0]] call ace_rearm_fnc_getTurretConfigMagazines\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ngetArray ((_this call CBA_fnc_getTurret) >> \"magazines\")\n",
        "functionName": "ace_rearm_fnc_getTurretConfigMagazines"
      },
      {
        "fileName": "fnc_getTurretMagazineAmmo.sqf",
        "content": "/*\n * Author: Tuupertunut\n * Returns the current ammo counts in all magazines of given class in turret.\n *\n * BIS command \"magazineTurretAmmo\" is broken at the time of writing (2017-06-24)\n * (https://feedback.bistudio.com/T79689). This function is intended as a workaround for it,\n * extracting the data from the array returned by \"magazinesAllTurrets\".\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret Path <ARRAY>\n * 2: Magazine Classname <STRING>\n *\n * Return Value:\n * Current ammo counts in magazines. <ARRAY of NUMBERs>\n *\n * Example:\n * [vehicle, [0], \"200Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_getTurretMagazineAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_turretPath\", \"_magazineClass\"];\n\nprivate _ammo = magazinesAllTurrets _vehicle select {(_x select 0) isEqualTo _magazineClass && {(_x select 1) isEqualTo _turretPath}} apply {_x select 2};\n_ammo\n",
        "functionName": "ace_rearm_fnc_getTurretMagazineAmmo"
      },
      {
        "fileName": "fnc_grabAmmo.sqf",
        "content": "/*\n * Author: GitHawk\n * Grabs an dummy ammo.\n *\n * Arguments:\n * 0: Ammo Dummy <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [dummy, player] call ace_rearm_fnc_grabAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_dummy\", \"_unit\"];\n\nREARM_HOLSTER_WEAPON;\n[_unit, \"forceWalk\", QGVAR(vehRearm), true] call EFUNC(common,statusEffect_set);\n\n[\n    TIME_PROGRESSBAR(5),\n    [_dummy, _unit],\n    {\n        params [\"_args\"];\n        _args params [\"_dummy\", \"_unit\"];\n        [_dummy, _unit] call FUNC(pickUpAmmo);\n\n        private _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\n        if (_actionID != -1) then {\n            _unit removeAction _actionID;\n        };\n        _actionID = _unit addAction [\n            format [\"<t color='#FF0000'>%1</t>\", localize ELSTRING(dragging,Drop)],\n            '(_this select 0) call FUNC(dropAmmo)',\n            nil,\n            20,\n            false,\n            true,\n            \"\",\n            '!isNull (_target getVariable [QGVAR(dummy), objNull])'\n        ];\n        _unit setVariable [QGVAR(ReleaseActionID), _actionID];\n    },\n    \"\",\n    localize LSTRING(GrabAction),\n    {true},\n    [\"isnotinside\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_rearm_fnc_grabAmmo"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: GitHawk, Jonpas\n * Handles medical on set dead event.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit] call ace_rearm_fnc_handleKilled\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!local _unit) exitWith {};\n\n_unit setVariable [QGVAR(selectedWeaponOnRearm), nil];\n[_unit, false, false] call FUNC(dropAmmo);\n",
        "functionName": "ace_rearm_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handleRespawn.sqf",
        "content": "/*\n * Author: unknown\n * Called when a unit is Respawned\n *\n * Arguments:\n * 0: The Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ACE_rearm_fnc_handleRespawn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nif !(local _unit) exitWith {};\n\n_unit setVariable [QGVAR(selectedWeaponOnRearm), nil];\n_unit setVariable [QGVAR(carriedMagazine), nil];\nprivate _dummy = _unit getVariable [QGVAR(dummy), objNull];\nif !(isNull _dummy) then {\n    detach _dummy;\n    deleteVehicle _dummy;\n};\n_unit setVariable [QGVAR(dummy), nil];\n",
        "functionName": "ace_rearm_fnc_handleRespawn"
      },
      {
        "fileName": "fnc_handleUnconscious.sqf",
        "content": "/*\n * Author: GitHawk, Jonpas\n * Handles medical on unconscious event.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Is Unconscious <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit] call ace_rearm_fnc_handleUnconscious\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_isUnconscious\"];\n\nif (!local _unit || {!_isUnconscious}) exitWith {};\n\n[_unit, false, false] call FUNC(dropAmmo);\n",
        "functionName": "ace_rearm_fnc_handleUnconscious"
      },
      {
        "fileName": "fnc_hasEnoughSupply.sqf",
        "content": "/*\n* Author: GitHawk\n* Check whether enough supply is left to take the magazine.\n*\n* Arguments:\n* 0: Ammo Truck <OBJECT>\n* 1: Magazine Classname <STRING>\n*\n* Return Value:\n* Enough supply <BOOL>\n*\n* Example:\n* [ammo_truck, \"500Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_hasEnoughSupply\n*\n* Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_magazineClass\"];\n\n// With infinite supply, there is always enough\nif (GVAR(supply) == 0) exitWith {true};\n\n\n// With limited supply, we need to check supply\nif (GVAR(supply) == 1) exitWith {\n    private _supply = [_truck] call FUNC(getSupplyCount);\n    ([_magazineClass] call FUNC(getCaliber)) params [\"_cal\", \"_idx\"];\n\n    // With caliber based rearming, we only need partial supply\n    if (GVAR(level) == 2) exitWith {\n        // If REARM_COUNT is bigger than the magazine size, we might get a bigger number than 1\n        private _magazinePart = ((REARM_COUNT select _idx) / (getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\"))) min 1;\n        (_cal * _magazinePart <= _supply)\n    };\n    (_cal <= _supply)\n};\n\n\n// With magazine specific supply, we need to check stored magazines\nif (GVAR(supply) == 2) exitWith {\n    private _magazineSupply = _truck getVariable [QGVAR(magazineSupply), []];\n    private _magazinePresent = false;\n    {\n        _x params [\"_magazine\", \"_rounds\"];\n        if ((_magazine isEqualTo _magazineClass) && (_rounds > 0)) exitWith {_magazinePresent = true; };\n        false\n    } count _magazineSupply;\n    _magazinePresent\n};\n",
        "functionName": "ace_rearm_fnc_hasEnoughSupply"
      },
      {
        "fileName": "fnc_initSupplyVehicle.sqf",
        "content": "/*\n * Author: Githawk, PabstMirror\n * Adds rearm supply actions to a vehicle or ammo container.\n *\n * Arguments:\n * 0: Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammoTruck] call ace_rearm_fnc_initSupplyVehicle;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {}; // For now we just add actions, so no need non-clients\n\nparams [\"_vehicle\"];\nprivate _typeOf = typeOf _vehicle;\nTRACE_2(\"initSupplyVehicle\",_vehicle,_typeOf);\n\nif (!alive _vehicle) exitWith {};\n\nprivate _configSupply = getNumber (configFile >> \"CfgVehicles\" >> _typeOf >> QGVAR(defaultSupply));\nprivate _isSupplyVehicle = _vehicle getVariable [QGVAR(isSupplyVehicle), false];\nprivate _oldRearmConfig = isClass (configFile >> \"CfgVehicles\" >> _typeOf >> \"ACE_Actions\" >> \"ACE_MainActions\" >> QGVAR(takeAmmo));\nTRACE_3(\"\",_configSupply,_isSupplyVehicle,_oldRearmConfig);\n\nif ((_configSupply <= 0) && {!_isSupplyVehicle} && {!_oldRearmConfig}) exitWith {}; // Ignore if not enabled\nif ((_oldRearmConfig || {_configSupply > 0}) && {_typeOf in GVAR(configTypesAdded)}) exitWith {}; // Only add class actions once\nif (_oldRearmConfig || {_configSupply > 0}) then {GVAR(configTypesAdded) pushBack _typeOf};\n\n\nprivate _actionReadSupplyCounter = [ // GVAR(supply) > 0\n    QGVAR(ReadSupplyCounter),\n    localize LSTRING(ReadSupplyCounter), // Check remaining ammunition\n    QPATHTOF(ui\\icon_rearm_interact.paa),\n    {_this call FUNC(readSupplyCounter)},\n    {_this call FUNC(canReadSupplyCounter)}\n] call EFUNC(interact_menu,createAction);\n\nprivate _actionTakeAmmo = [\n    QGVAR(takeAmmo),\n    localize ([LSTRING(Rearm), LSTRING(TakeAmmo)] select (GVAR(level) > 0)),\n    QPATHTOF(ui\\icon_rearm_interact.paa),\n    {},\n    {_this call FUNC(canTakeAmmo)},\n    {_this call FUNC(addRearmActions)}\n] call EFUNC(interact_menu,createAction);\n\nprivate _actionStoreAmmo = [\n    QGVAR(StoreAmmo),\n    localize LSTRING(StoreAmmo), // \"Store ammo\"\n    QPATHTOF(ui\\icon_rearm_interact.paa),\n    {_this call FUNC(storeAmmo)},\n    {_this call FUNC(canStoreAmmo)}\n] call EFUNC(interact_menu,createAction);\n\nif (_oldRearmConfig || {_configSupply > 0}) then {\n    TRACE_1(\"Adding Class Actions\",_typeOf);\n    [_typeOf, 0, [\"ACE_MainActions\"], _actionReadSupplyCounter] call EFUNC(interact_menu,addActionToClass);\n    if (!_oldRearmConfig) then {\n        [_typeOf, 0, [\"ACE_MainActions\"], _actionTakeAmmo] call EFUNC(interact_menu,addActionToClass);\n        [_typeOf, 0, [\"ACE_MainActions\"], _actionStoreAmmo] call EFUNC(interact_menu,addActionToClass);\n    } else {\n        WARNING_1(\"Actions already present on [%1].  Old Compat PBO?\",_typeOf);\n    };\n} else {\n    TRACE_1(\"Adding Object Actions\",_typeOf);\n    [_vehicle, 0, [\"ACE_MainActions\"], _actionReadSupplyCounter] call EFUNC(interact_menu,addActionToObject);\n    [_vehicle, 0, [\"ACE_MainActions\"], _actionTakeAmmo] call EFUNC(interact_menu,addActionToObject);\n    [_vehicle, 0, [\"ACE_MainActions\"], _actionStoreAmmo] call EFUNC(interact_menu,addActionToObject);\n};\n\n",
        "functionName": "ace_rearm_fnc_initSupplyVehicle"
      },
      {
        "fileName": "fnc_makeDummy.sqf",
        "content": "/*\n * Author: GitHawk\n * Make a dummy object by disabling collision and turning it.\n *\n * Arguments:\n * 0: Object <OBJECT>\n * 1: Vector dirAndUp <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [dummy, [[1,0,0],[0,0,1]]] call ace_rearm_fnc_makeDummy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_obj\", \"_dirAndUp\"];\n\n_obj setVectorDirAndUp _dirAndUp;\n_obj allowDamage false;\nACE_player disableCollisionWith _obj;\n",
        "functionName": "ace_rearm_fnc_makeDummy"
      },
      {
        "fileName": "fnc_moduleRearmSettings.sqf",
        "content": "/*\n * Author: GitHawk\n * Module for adjusting the rearm settings.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * function = \"ace_rearm_fnc_moduleRearmSettings\"\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\n    \"_logic\",\n    \"\",\n    [\"_activated\", false, [false]]\n];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(level), \"level\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(supply), \"supply\"] call EFUNC(common,readSettingFromModule);\n\nINFO_2(\"Module Initialized [level: %1][supply: %2]\",GVAR(level),GVAR(supply));\n",
        "functionName": "ace_rearm_fnc_moduleRearmSettings"
      },
      {
        "fileName": "fnc_pickUpAmmo.sqf",
        "content": "/*\n * Author: GitHawk\n * Starts progress bar for picking up a specific kind of magazine from the ground.\n *\n * Arguments:\n * 0: Ammo Dummy <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [target, player] call ace_rearm_fnc_pickUpAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_dummy\", \"_unit\"];\n\nprivate _attachedDummy = _unit getVariable [QGVAR(dummy), objNull];\nif !(isNull _attachedDummy) exitWith {};\n\n_dummy attachTo [_unit, [0,1,0], \"pelvis\"];\n\nprivate _nearUnits = _unit nearObjects [\"CAManBase\", 100];\n// disableCollisionWith damage with the nearby units:\n[QGVAR(makeDummyEH), [_dummy, [[-1,0,0],[0,0,1]]], _nearUnits] call CBA_fnc_targetEvent;\n\n_unit setVariable [QGVAR(dummy), _dummy];\n",
        "functionName": "ace_rearm_fnc_pickUpAmmo"
      },
      {
        "fileName": "fnc_readSupplyCounter.sqf",
        "content": "/*\n * Author: GitHawk\n * Get the remaining ammunition amount.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, player] call ace_rearm_fnc_readSupplyCounter\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_unit\"];\nTRACE_2(\"readSupplyCounter\",_truck,_unit);\n\nif (GVAR(supply) == 0) exitWith {WARNING(\"Supply is unlimited\");};\n\nif (GVAR(supply) == 1) then {\n    [\n        TIME_PROGRESSBAR(5),\n        [_unit, _truck, [_truck] call FUNC(getSupplyCount)],\n        {\n            params [\"_args\"];\n            _args params [[\"_unit\", objNull, [objNull]], [\"_truck\", objNull, [objNull]], [\"_supplyCount\", 0, [0]]];\n            if (_supplyCount > 0 ) then {\n                [[LSTRING(Hint_RemainingSupplyPoints), _supplyCount], 2, _unit] call EFUNC(common,displayTextStructured);\n            } else {\n                [LSTRING(Hint_Empty), 2, _unit] call EFUNC(common,displayTextStructured);\n            };\n            true\n        },\n        {true},\n        localize LSTRING(ReadSupplyCounterAction),\n        {true},\n        [\"isnotinside\"]\n    ] call EFUNC(common,progressBar);\n} else {\n    [\n        TIME_PROGRESSBAR(5),\n        [_unit, _truck],\n        {\n            params [\"_args\"];\n            _args params [[\"_unit\", objNull, [objNull]], [\"_truck\", objNull, [objNull]]];\n            private _supply = 1.5;\n            private _numChars = count (localize LSTRING(Hint_RemainingAmmo));\n            private _text = \"\";\n            private _magazines = _truck getVariable QGVAR(magazineSupply);\n            if !(isNil \"_magazines\") then {\n                {\n                    _x params [\"_magazineClass\", \"_rounds\"];\n                    private _line = format [\"%1: %2\",  getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"), _rounds];\n                    _numChars = _numChars max (count _line);\n                    _text = format [\"%1<br/>%2\", _text, _line];\n                    _supply = _supply + 0.5;\n                    false\n                } count _magazines;\n            };\n            if (_supply > 1.5) then {\n                [[LSTRING(Hint_RemainingAmmo), _text], _supply, _unit, (_numChars/2.9)] call EFUNC(common,displayTextStructured);\n            } else {\n                [LSTRING(Hint_Empty), 2, _unit] call EFUNC(common,displayTextStructured);\n            };\n            true\n        },\n        {true},\n        localize LSTRING(ReadSupplyCounterAction),\n        {true},\n        [\"isnotinside\"]\n    ] call EFUNC(common,progressBar);\n};\n",
        "functionName": "ace_rearm_fnc_readSupplyCounter"
      },
      {
        "fileName": "fnc_rearm.sqf",
        "content": "/*\n * Author: GitHawk\n * Starts progress bar for rearming a vehicle.\n *\n * Arguments:\n * 0: Target Vehicle <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [tank, player] call ace_rearm_fnc_rearm\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_unit\"];\nTRACE_2(\"rearm\",_target,_unit);\n\nprivate _attachedDummy = _unit getVariable [QGVAR(dummy), objNull];\nif (isNull _attachedDummy) exitwith {ERROR_1(\"attachedDummy null\",_attachedDummy);};\nprivate _magazineClass = _attachedDummy getVariable QGVAR(magazineClass);\nif (isNil \"_magazineClass\") exitWith {ERROR_1(\"magazineClass nil\",_attachedDummy);};\n\n([_magazineClass] call FUNC(getCaliber)) params [\"_cal\", \"_idx\"];\n\n// Get magazines that can be rearmed\nprivate _needRearmMags = [_target] call FUNC(getNeedRearmMagazines);\nprivate _needRearmMagsOfClass = _needRearmMags select {(_x select 0) isEqualTo _magazineClass};\n\n// Exit if no magazines need rearming\nif ((count _needRearmMagsOfClass) == 0) exitWith {ERROR_2(\"Could not find turret for %1 in %2\",_magazineClass,typeOf _target);};\n\nprivate _currentRearmableMag = _needRearmMagsOfClass select 0;\n_currentRearmableMag params [\"\", \"_turretPath\", \"\", \"_pylon\", \"\", \"_magazineCount\"];\n\nprivate _magazineDisplayName =  getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\");\nif (_magazineDisplayName == \"\") then {\n    _magazineDisplayName = _magazineClass;\n    ERROR_1(\"Magazine is missing display name [%1]\",_magazineClass);\n};\n\n[\n    TIME_PROGRESSBAR(REARM_DURATION_REARM select _idx),\n    [_target, _unit, _turretPath, _magazineCount, _magazineClass, (REARM_COUNT select _idx), _pylon],\n    {(_this select 0) call FUNC(rearmSuccess)},\n    \"\",\n    format [localize LSTRING(RearmAction), getText(configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"displayName\"), _magazineDisplayName],\n    {\n        param [0] params [\"_target\", \"_unit\"];\n        (_unit distanceSqr _target) <= REARM_ACTION_DISTANCE_SQR\n    },\n    [\"isnotinside\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_rearm_fnc_rearm"
      },
      {
        "fileName": "fnc_rearmEntireVehicle.sqf",
        "content": "/*\n * Author: GitHawk\n * Starts progress bar for rearming an entire vehicle.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Unit <OBJECT>\n * 2: Vehicle to be armed <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, player, tank] call ace_rearm_fnc_rearmEntireVehicle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_player\", \"_vehicle\"];\n\n[\n    TIME_PROGRESSBAR(10),\n    [_truck, _player, _vehicle],\n    FUNC(rearmEntireVehicleSuccess),\n    \"\",\n    format [localize LSTRING(BasicRearmAction), getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")],\n    {\n        param [0] params [\"\", \"_player\", \"_vehicle\"];\n        (_player distanceSqr _vehicle) <= REARM_ACTION_DISTANCE_SQR\n    },\n    [\"isnotinside\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_rearm_fnc_rearmEntireVehicle"
      },
      {
        "fileName": "fnc_rearmEntireVehicleSuccess.sqf",
        "content": "/*\n * Author: GitHawk\n * Rearm an entire vehicle.\n *\n * Arguments:\n * 0: Rearm information <ARRAY>\n *   0: Ammo Truck <OBJECT>\n *   1: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[ammo_truck, tank]] call ace_rearm_fnc_rearmEntireVehicleSuccess\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\"];\n_args params [\"_truck\", \"_vehicle\"];\nTRACE_2(\"rearmEntireVehicleSuccess\",_truck,_vehicle);\n\nif (isServer) then {\n    private _turrets = [_vehicle] call FUNC(getAllRearmTurrets);\n    {\n        private _turretOwnerID = _vehicle turretOwner _x;\n        if (_turretOwnerID == 0) then {\n            [QGVAR(rearmEntireVehicleSuccessLocalEH), [_truck, _vehicle, _x], [_vehicle]] call CBA_fnc_targetEvent;\n        } else {\n            [QGVAR(rearmEntireVehicleSuccessLocalEH), [_truck, _vehicle, _x], _turretOwnerID] call CBA_fnc_ownerEvent;\n        };\n        false\n    } count _turrets;\n} else {\n    [QGVAR(rearmEntireVehicleSuccessEH), _this] call CBA_fnc_serverEvent;\n};\n",
        "functionName": "ace_rearm_fnc_rearmEntireVehicleSuccess"
      },
      {
        "fileName": "fnc_rearmEntireVehicleSuccessLocal.sqf",
        "content": "/*\n * Author: Tuupertunut\n * Rearm an entire turret locally.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: TurretPath <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, tank, [0]] call ace_rearm_fnc_rearmEntireVehicleSuccessLocal\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_vehicle\", \"_turretPath\"];\nTRACE_3(\"rearmEntireVehicleSuccessLocal\",_truck,_vehicle,_turretPath);\n\n// Fetching all rearmable magazines in this turret\nprivate _magazines = ([_vehicle] call FUNC(getNeedRearmMagazines)) select {(_x select 1) isEqualTo _turretPath};\n{\n    _x params [\"_magazineClass\", \"_magTurretPath\", \"_isPylonMag\", \"_pylonIndex\", \"_maxMagazines\", \"_currentMagazines\", \"_maxRoundsPerMag\", \"_currentRounds\"];\n    \n    // Array of planned ammo counts in every magazine after the rearm is complete\n    private _plannedRounds = +_currentRounds;\n    \n    // Trying to fill all existing magazines.\n    {\n        if (_x < _maxRoundsPerMag) then {\n            if ((GVAR(supply) == 0) || {[_truck, _magazineClass, (_maxRoundsPerMag - _x)] call FUNC(removeMagazineFromSupply)}) then {\n                _plannedRounds set [_forEachIndex, _maxRoundsPerMag];\n            };\n        };\n    } forEach _currentRounds;\n    \n    // Trying to add new full magazines, if there is space left.\n    if (_currentMagazines < _maxMagazines) then {\n        for \"_idx\" from 1 to (_maxMagazines - _currentMagazines) do {\n            if ((GVAR(supply) == 0) || {[_truck, _magazineClass, _maxRoundsPerMag] call FUNC(removeMagazineFromSupply)}) then {\n                _plannedRounds pushBack _maxRoundsPerMag;\n            };\n        };\n    };\n    \n    TRACE_2(\"rearming\",_x,_plannedRounds);\n    \n    // Updating new ammo counts to vehicle.\n    if (_isPylonMag) then {\n        _vehicle setAmmoOnPylon [_pylonIndex, (_plannedRounds select 0)];\n    } else {\n        [_vehicle, _magTurretPath, _magazineClass, _plannedRounds] call FUNC(setTurretMagazineAmmo);\n    };\n} forEach _magazines;\n\n",
        "functionName": "ace_rearm_fnc_rearmEntireVehicleSuccessLocal"
      },
      {
        "fileName": "fnc_rearmSuccess.sqf",
        "content": "/*\n * Author: GitHawk\n * Rearms a vehicle, after progress bar finishes, pass args to machine where turret is local.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Unit <OBJECT>\n * 2: Turret Path <ARRAY>\n * 3: Number of magazines <NUMBER>\n * 4: Magazine Classname <STRING>\n * 5: Number of rounds <NUMBER>\n * 6: Pylon Index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle, player, [-1], 2, \"5000Rnd_762x51_Belt\", 500, -1] call ace_rearm_fnc_rearmSuccess\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_unit\", \"_turretPath\", \"_numMagazines\", \"_magazineClass\", \"_numRounds\", \"_pylon\"];\nTRACE_7(\"rearmSuccess\",_vehicle,_unit,_turretPath,_numMagazines,_magazineClass,_numRounds,_pylon);\n\nif (local _unit) then {\n    [_unit, true, true] call FUNC(dropAmmo);\n};\n\nif (!alive _vehicle) exitWith {WARNING(\"vehicle dead/null\");};\n\nif (isServer) then {\n    private _turretOwnerID = _vehicle turretOwner _turretPath;\n    if (_turretOwnerID == 0) then {\n        [QGVAR(rearmSuccessLocalEH), _this, [_vehicle]] call CBA_fnc_targetEvent;\n    } else {\n        [QGVAR(rearmSuccessLocalEH), _this, _turretOwnerID] call CBA_fnc_ownerEvent;\n    };\n} else {\n    [QGVAR(rearmSuccessEH), _this] call CBA_fnc_serverEvent;\n};\n",
        "functionName": "ace_rearm_fnc_rearmSuccess"
      },
      {
        "fileName": "fnc_rearmSuccessLocal.sqf",
        "content": "/*\n * Author: GitHawk\n * Rearms a vehicle on the turret owner.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Unit <OBJECT>\n * 2: Turret Path <ARRAY>\n * 3: Number of magazines <NUMBER>\n * 4: Magazine Classname <STRING>\n * 5: Number of rounds <NUMBER>\n * 6: Pylon Index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle, player, [-1], 2, \"5000Rnd_762x51_Belt\", 500, \"\"] call ace_rearm_fnc_rearmSuccessLocal\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_unit\", \"_turretPath\", \"_numMagazines\", \"_magazineClass\", \"_numRounds\", \"_pylon\"];\nTRACE_7(\"rearmSuccessLocal\",_vehicle,_unit,_turretPath,_numMagazines,_magazineClass,_numRounds,_pylon);\n\nprivate _rounds = getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\");\n\nif (_pylon > 0) exitWith {\n    if (_turretPath isEqualTo [-1]) then {_turretPath = [];}; // Convert back to pylon turret format\n    private _currentCount = _vehicle ammoOnPylon _pylon;\n    private _newCount = ((_currentCount max 0) + _numRounds) min _rounds;\n    TRACE_2(\"\",_pylon,_magazineClass,_newCount);\n    _vehicle setPylonLoadOut [_pylon, _magazineClass, false, _turretPath];\n    _vehicle setAmmoOnPylon [_pylon, _newCount];\n};\n\nprivate _currentRounds = 0;\nprivate _maxMagazines = [_vehicle, _turretPath, _magazineClass] call FUNC(getMaxMagazines);\n\nif (_maxMagazines == 1) then {\n    private _currentMagazines = { _x == _magazineClass } count (_vehicle magazinesTurret _turretPath);\n    if (_currentMagazines == 0 && {!(_turretPath isEqualTo [-1])}) then {\n        // Driver gun will always retain it's magazines\n        _vehicle addMagazineTurret [_magazineClass, _turretPath];\n        _vehicle setMagazineTurretAmmo [_magazineClass, 0, _turretPath];\n    };\n    if (GVAR(level) == 1) then {\n        // Fill magazine completely\n        _vehicle setMagazineTurretAmmo [_magazineClass, _rounds, _turretPath];\n        [QEGVAR(common,displayTextStructured), [[LSTRING(Hint_RearmedTriple), _rounds,\n            getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\n            getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")], 3, _unit], [_unit]] call CBA_fnc_targetEvent;\n    } else {\n        // Fill only at most _numRounds\n        _vehicle setMagazineTurretAmmo [_magazineClass, ((_vehicle magazineTurretAmmo [_magazineClass, _turretPath]) + _numRounds) min _rounds, _turretPath];\n        [QEGVAR(common,displayTextStructured), [[LSTRING(Hint_RearmedTriple), _numRounds,\n            getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\n            getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")], 3, _unit], [_unit]] call CBA_fnc_targetEvent;\n    };\n} else {\n    for \"_idx\" from 1 to (_maxMagazines+1) do {\n        _currentRounds = _vehicle magazineTurretAmmo [_magazineClass, _turretPath];\n        if (_currentRounds > 0 || {_idx == (_maxMagazines+1)}) exitWith {\n            if (_idx == (_maxMagazines+1) && {!(_turretPath isEqualTo [-1])}) then {\n                _vehicle addMagazineTurret [_magazineClass, _turretPath];\n            };\n            if (GVAR(level) == 2) then {\n                //hint format [\"Target: %1\\nTurretPath: %2\\nNumMagazines: %3\\nMaxMagazines %4\\nMagazine: %5\\nNumRounds: %6\\nMagazine: %7\", _vehicle, _turretPath, _numMagazines, _maxMagazines, _currentRounds, _numRounds, _magazineClass];\n                // Fill only at most _numRounds\n                if ((_currentRounds + _numRounds) > _rounds) then {\n                    _vehicle setMagazineTurretAmmo [_magazineClass, _rounds, _turretPath];\n                    if (_numMagazines  < _maxMagazines) then {\n                        _vehicle addMagazineTurret [_magazineClass, _turretPath];\n                        _vehicle setMagazineTurretAmmo [_magazineClass, _currentRounds + _numRounds - _rounds, _turretPath];\n                    };\n                } else {\n                    _vehicle setMagazineTurretAmmo [_magazineClass, _currentRounds + _numRounds, _turretPath];\n                };\n                [QEGVAR(common,displayTextStructured), [[LSTRING(Hint_RearmedTriple), _numRounds,\n                    getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\n                    getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")], 3, _unit], [_unit]] call CBA_fnc_targetEvent;\n            } else {\n                // Fill current magazine completely and fill next magazine partially\n                _vehicle setMagazineTurretAmmo [_magazineClass, _rounds, _turretPath];\n                if (_numMagazines  < _maxMagazines) then {\n                    _vehicle addMagazineTurret [_magazineClass, _turretPath];\n                    _vehicle setMagazineTurretAmmo [_magazineClass, _currentRounds, _turretPath];\n                };\n                [QEGVAR(common,displayTextStructured), [[LSTRING(Hint_RearmedTriple), _rounds,\n                    getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\n                    getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")], 3, _unit], [_unit]] call CBA_fnc_targetEvent;\n            };\n        };\n        _vehicle removeMagazineTurret [_magazineClass, _turretPath];\n        _numMagazines = _numMagazines - 1;\n    };\n};\n",
        "functionName": "ace_rearm_fnc_rearmSuccessLocal"
      },
      {
        "fileName": "fnc_removeMagazineFromSupply.sqf",
        "content": "/*\n * Author: GitHawk\n * Removes a magazine from the supply.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Magazine Classname <STRING>\n * 2: Number of Rounds to withdraw <NUMBER> (default: -1)\n *\n * Return Value:\n * Magazine was removed <BOOL>\n *\n * Example:\n * [ammo_truck, \"500Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_removeMagazineFromSupply\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_truck\", objNull, [objNull]], [\"_magazineClass\", \"\", [\"\"]], [\"_numRounds\", -1, [0]]];\nTRACE_3(\"removeMagazineFromSupply\",_truck,_magazineClass,_numRounds);\n\nif (isNull _truck || {_magazineClass isEqualTo \"\"}) exitWith {false};\n\nprivate _return = false;\n([_magazineClass] call FUNC(getCaliber)) params [\"_cal\", \"_idx\"];\n\nif (GVAR(supply) == 0) then {\n    WARNING(\"supply setting is set to unlimited\"); // func shouldn't have been called\n    _return = true;\n};\n\nif (GVAR(supply) == 1) then {\n    private _supply = [_truck] call FUNC(getSupplyCount);\n    if (GVAR(level) == 2) then {\n        // Remove partial magazine supply count\n        private _rearmAmount = (REARM_COUNT select _idx);\n        if (_numRounds > 0) then {\n            _rearmAmount = _numRounds;\n        };\n        private _magazinePart = (_rearmAmount / (getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\"))) min 1;\n        if (_supply >= (_cal * _magazinePart)) then {\n            [_truck, (_supply - (_cal * _magazinePart))] call FUNC(setSupplyCount);\n            _return = true;\n        };\n    } else {\n        // Remove entire magazine supply count\n        if (_supply >= _cal) then {\n            [_truck, (_supply - _cal)] call FUNC(setSupplyCount);\n            _return = true;\n        };\n    };\n};\n\nif (GVAR(supply) == 2) then {\n    private _magazineSupply = _truck getVariable [QGVAR(magazineSupply), []];\n    private _magazineIdx = -1;\n    {\n        _x params [\"_magazine\"];\n        if ((_magazine isEqualTo _magazineClass)) exitWith {\n            _magazineIdx = _forEachIndex;\n        };\n    } forEach _magazineSupply;\n    if (_magazineIdx == -1) exitWith {false};\n\n    (_magazineSupply select _magazineIdx) params [\"\", \"_rounds\"];\n\n    private _configRounds = getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\");\n    if (GVAR(level) == 2) then {\n        // With caliber based rearming, we need to remove the correct amount\n        private _rearmAmount = (REARM_COUNT select _idx);\n        if (_numRounds > 0) then {\n            if (_numRounds > _rearmAmount) then {\n                _rearmAmount = ceil (_numRounds / _rearmAmount);\n            };\n        };\n        private _roundsPerTransaction = _rearmAmount min _configRounds;\n        if (_rounds >= _roundsPerTransaction) then {\n            _magazineSupply set [_magazineIdx, [_magazineClass, (_rounds - _roundsPerTransaction)]];\n            _truck setVariable [QGVAR(magazineSupply), _magazineSupply, true];\n            _return = true;\n        };\n    } else {\n        // Remove entire magazine\n        if (_rounds >= _configRounds) then {\n            _magazineSupply set [_magazineIdx, [_magazineClass, (_rounds - _configRounds)]];\n            _truck setVariable [QGVAR(magazineSupply), _magazineSupply, true];\n            _return = true;\n        };\n    };\n};\n_return\n",
        "functionName": "ace_rearm_fnc_removeMagazineFromSupply"
      },
      {
        "fileName": "fnc_setSupplyCount.sqf",
        "content": "/*\n * Author: GitHawk\n * Sets the supply count. [Global Effects]\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Supply Count <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, 1000] call ace_rearm_fnc_setSupplyCount\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif !(EGVAR(common,settingsInitFinished)) exitWith { // only run this after the settings are initialized\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(setSupplyCount), _this];\n};\n\nparams [[\"_truck\", objNull, [objNull]], [\"_supply\", 0, [0]]];\n\nif (GVAR(supply) != 1) exitWith {WARNING(\"supply setting is not set to limited\");};\nif (isNull _truck) exitWith {WARNING_1(\"Truck is null [%1]\",_truck);};\n\n_truck setVariable [QGVAR(currentSupply), (_supply max 0), true];\n",
        "functionName": "ace_rearm_fnc_setSupplyCount"
      },
      {
        "fileName": "fnc_setTurretMagazineAmmo.sqf",
        "content": "/*\n * Author: Tuupertunut\n * Sets the ammo counts of all magazines of given class in turret.\n *\n * BIS command \"setMagazineTurretAmmo\" is broken at the time of writing (2017-06-24)\n * (https://feedback.bistudio.com/T79689). This function is intended as a workaround for it. All\n * magazines are removed and then added again with updated ammo counts.\n * Note: As an unintended side effect, the turret reloads after running this function.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Turret Path <ARRAY>\n * 2: Magazine Classname <STRING>\n * 3: Ammo Counts in Magazines <ARRAY of NUMBERs>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle, [0], \"200Rnd_127x99_mag_Tracer_Red\", [200, 152]] call ace_rearm_fnc_setTurretMagazineAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_turretPath\", \"_magazineClass\", \"_ammoCounts\"];\n\n// Checking if a magazine of given class is currently loaded in any weapon.\nprivate _magLoadedInWeapon = false;\nprivate _loadedWeapon = \"\";\n{\n    private _currentlyLoadedMag = (weaponState [_vehicle, _turretPath, _x]) select 3;\n    \n    if (_currentlyLoadedMag isEqualTo _magazineClass) exitWith {\n        _magLoadedInWeapon = true;\n        _loadedWeapon = _x;\n    };\n} forEach (_vehicle weaponsTurret _turretPath);\n\n\nif (!_magLoadedInWeapon) then {\n    /* The easy case:\n     * The magazine class was not loaded, so we can just remove those magazines and\n     * add them back with updated ammo counts. */\n\n    _vehicle removeMagazinesTurret [_magazineClass, _turretPath];\n    {\n        _vehicle addMagazineTurret [_magazineClass, _turretPath, _x];\n    } forEach _ammoCounts;\n    \n} else {\n    /* Special hack case:\n     * The magazine class was loaded into a weapon. If the weapon has more than one type of\n     * magazine (e.g. AP and HEAT in a cannon), then removing all magazines would trigger the\n     * weapon to load a different magazine type. For example, removing the HEAT shells while HEAT\n     * is loaded makes the cannon switch to AP.\n     * \n     * To prevent that, we must remove all magazines that would fit into the weapon and then add\n     * them back with the magazine-to-be-loaded being the first. */\n\n    private _allowedMagClassesInWeapon = getArray (configFile >> \"CfgWeapons\" >> _loadedWeapon >> \"magazines\");\n    \n    /* Current ammo counts of all allowed magazine classes in weapon.\n     * Example: [[\"8Rnd_82mm_Mo_shells\", [8, 8, 2]], [\"8Rnd_82mm_Mo_Flare_white\", [7]]] */\n    private _ammoCountsByMagClass = _allowedMagClassesInWeapon apply {[_x, ([_vehicle, _turretPath, _x] call FUNC(getTurretMagazineAmmo))]};\n    \n    // Removing all magazines that fit into the weapon.\n    {\n        _vehicle removeMagazinesTurret [_x, _turretPath];\n    } forEach _allowedMagClassesInWeapon;\n    \n    // Adding the mags of the given class first with updated ammo counts.\n    {\n        _vehicle addMagazineTurret [_magazineClass, _turretPath, _x];\n    } forEach _ammoCounts;\n    \n    // Adding back all other magazines with their original ammo counts.\n    {\n        _x params [\"_loopMagClass\", \"_loopAmmoCounts\"];\n        \n        if (!(_loopMagClass isEqualTo _magazineClass)) then {\n            {\n                _vehicle addMagazineTurret [_loopMagClass, _turretPath, _x];\n            } forEach _loopAmmoCounts;\n        };\n    } forEach _ammoCountsByMagClass;\n};\n\nTRACE_5(\"setTurretMagazineAmmo\",_vehicle,_turretPath,_magazineClass,_ammoCounts,_loadedWeapon);\n",
        "functionName": "ace_rearm_fnc_setTurretMagazineAmmo"
      },
      {
        "fileName": "fnc_storeAmmo.sqf",
        "content": "/*\n * Author: GitHawk\n * Stores ammo in an ammo truck.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, player] call ace_rearm_fnc_storeAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_unit\"];\n\nprivate _attachedDummy = _unit getVariable [QGVAR(dummy), objNull];\nif (isNull _attachedDummy) exitwith {};\n\n[\n    TIME_PROGRESSBAR(5),\n    [_unit, _truck, _attachedDummy],\n    {\n        params [\"_args\"];\n        _args params [\"_unit\", \"_truck\", \"_attachedDummy\"];\n        [_truck, (_attachedDummy getVariable [QGVAR(magazineClass), \"\"]), true] call FUNC(addMagazineToSupply);\n        [_unit, true, true] call FUNC(dropAmmo);\n    },\n    \"\",\n    format [localize LSTRING(StoreAmmoAction), getText(configFile >> \"CfgMagazines\" >> (_attachedDummy getVariable QGVAR(magazineClass)) >> \"displayName\"), getText(configFile >> \"CfgVehicles\" >> (typeOf _truck) >> \"displayName\")],\n    {true},\n    [\"isnotinside\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_rearm_fnc_storeAmmo"
      },
      {
        "fileName": "fnc_takeAmmo.sqf",
        "content": "/*\n * Author: GitHawk\n * Starts progress bar for picking up a specific kind of magazine from an ammo truck.\n *\n * Arguments:\n * 0: Ammo Truck <OBJECT>\n * 1: Unit <OBJECT>\n * 2: Params <ARRAY>\n *   0: Magazine Classname <STRING>\n *   1: Vehicle to be armed <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ammo_truck, player, [\"500Rnd_127x99_mag_Tracer_Red\", tank]] call ace_rearm_fnc_takeAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_truck\", \"_unit\", \"_args\"];\n_args params [\"_magazineClass\", \"_vehicle\"];\nTRACE_5(\"takeAmmo\",_truck,_unit,_args,_magazineClass,_vehicle);\n\n([_magazineClass] call FUNC(getCaliber)) params [\"_cal\", \"_idx\"];\n\nREARM_HOLSTER_WEAPON;\n\n[\n    TIME_PROGRESSBAR(REARM_DURATION_TAKE select _idx),\n    [_unit, _magazineClass, _truck],\n    FUNC(takeSuccess),\n    \"\",\n    format [localize LSTRING(TakeAction), getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"), getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")],\n    {true},\n    [\"isnotinside\"]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_rearm_fnc_takeAmmo"
      },
      {
        "fileName": "fnc_takeSuccess.sqf",
        "content": "/*\n * Author: GitHawk\n * Takes a magazine from an ammo truck.\n *\n * Arguments:\n * 0: Params <ARRAY>\n *   0: Unit <OBJECT>\n *   1: Magazine Classname <STRING>\n *   2: Ammo Truck <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[player, \"500Rnd_127x99_mag_Tracer_Red\"]] call ace_rearm_fnc_takeSuccess\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\"];\n_args params [\"_unit\", \"_magazineClass\", \"_truck\"];\nTRACE_3(\"takeSuccess\",_unit,_magazineClass,_truck);\n\nprivate _success = true;\nif (GVAR(supply) > 0) then {\n    _success = [_truck, _magazineClass] call FUNC(removeMagazineFromSupply);\n};\nif !(_success) exitWith {WARNING_2(\"takeSuccess failed to take [%1] from [%2]\",_magazineClass,_truck);};\n\n[_unit, \"forceWalk\", QGVAR(vehRearm), true] call EFUNC(common,statusEffect_set);\nprivate _dummy = [_unit, _magazineClass] call FUNC(createDummy);\n[_dummy, _unit] call FUNC(pickUpAmmo);\n\nprivate _actionID = _unit addAction [\n    format [\"<t color='#FF0000'>%1</t>\", localize ELSTRING(dragging,Drop)],\n    '(_this select 0) call FUNC(dropAmmo)',\n    nil,\n    20,\n    false,\n    true,\n    \"\",\n    '!isNull (_target getVariable [QGVAR(dummy), objNull])'\n];\n_unit setVariable [QGVAR(ReleaseActionID), _actionID];\n",
        "functionName": "ace_rearm_fnc_takeSuccess"
      }
    ]
  },
  {
    "component": "recoil",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n// Register fire event handler\n[\"ace_firedPlayer\", DFUNC(camShake)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_camshake.sqf",
        "content": "/*\n * Author: Orginal by Ryan Schultz, edited by KoffeinFlummi, commy2\n * Adds camera shake when firing. Called from the unified fired EH only for the local player.\n * From TMR: Small Arms\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, (currentWeapon player), (currentMuzzle player)] call ace_recoil_fnc_camShake;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\n#define BASE_POWER 0.40\n#define BASE_TIME 0.19\n#define BASE_FREQ 13\n#define RECOIL_COEF 40\n\nif (toLower _weapon in [\"throw\", \"put\"]) exitWith {};\n\nprivate _powerMod = ([0, -0.1, -0.1, 0, -0.2] select ([\"STAND\", \"CROUCH\", \"PRONE\", \"UNDEFINED\", \"\"] find stance _unit)) + ([0, -1, 0, -1] select ([\"INTERNAL\", \"EXTERNAL\", \"GUNNER\", \"GROUP\"] find cameraView));\n\n// to get camshake read kickback\nprivate _recoil = missionNamespace getVariable format [QGVAR(%1-%2), _weapon, _muzzle];\n\nif (isNil \"_recoil\") then {\n    private _config = configFile >> \"CfgWeapons\" >> _weapon;\n\n    if (_muzzle == _weapon) then {\n        _recoil = getText (_config >> \"recoil\")\n    } else {\n        _recoil = getText (_config >> _muzzle >> \"recoil\")\n    };\n\n    if (isClass (configFile >> \"CfgRecoils\" >> _recoil)) then {\n        _recoil = getArray (configFile >> \"CfgRecoils\" >> _recoil >> \"kickBack\");\n        if (count _recoil < 2) then {\n            _recoil = [0, 0];\n        };\n    } else {\n        _recoil = [0, 0];\n    };\n\n    TRACE_3(\"Caching Recoil config\",_weapon,_muzzle,_recoil);\n\n    // parse numbers\n    _recoil set [0, call compile format [\"%1\", _recoil select 0]];\n    _recoil set [1, call compile format [\"%1\", _recoil select 1]];\n\n    missionNamespace setVariable [format [QGVAR(%1-%2), _weapon, _muzzle], _recoil];\n};\n\nprivate _powerCoef = RECOIL_COEF * linearConversion [0, 1, random 1, _recoil select 0, _recoil select 1, false];\n\nif (isWeaponRested _unit) then {_powerMod = _powerMod - 0.07};\nif (isWeaponDeployed _unit) then {_powerMod = _powerMod - 0.11};\n\nprivate _camshake = [\n    _powerCoef * (BASE_POWER + _powerMod) max 0,\n    BASE_TIME,\n    BASE_FREQ\n];\n\nTRACE_4(\"addCamShake\",_recoil,_powerCoef,_powerMod,_camshake);\\\n\naddCamShake _camshake;\n",
        "functionName": "ace_recoil_fnc_camshake"
      }
    ]
  },
  {
    "component": "refuel",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (isServer) then {\n    addMissionEventHandler [\"HandleDisconnect\", LINKFUNC(handleDisconnect)];\n};\n\n[QGVAR(initSource), LINKFUNC(initSource)] call CBA_fnc_addEventHandler;\n\nif (!hasInterface) exitWith {};\n\n[\"isNotRefueling\", {!((_this select 0) getVariable [QGVAR(isRefueling), false])}] call EFUNC(common,addCanInteractWithCondition);\n\n[\"MouseButtonDown\", LINKFUNC(onMouseButtonDown)] call CBA_fnc_addDisplayHandler;\n\nGVAR(mainAction) = [\n    QGVAR(Refuel),\n    localize LSTRING(Refuel),\n    QPATHTOF(ui\\icon_refuel_interact.paa),\n    {},\n    {\n        alive _target\n        && {[_player, _target, [INTERACT_EXCEPTIONS]] call EFUNC(common,canInteractWith)}\n        && {REFUEL_DISABLED_FUEL != [_target] call FUNC(getFuel)}\n    },\n    {}, [], [0,0,0],\n    REFUEL_ACTION_DISTANCE\n] call EFUNC(interact_menu,createAction);\n\nGVAR(actions) = [\n    [QGVAR(TakeNozzle),\n        localize LSTRING(TakeNozzle),\n        QPATHTOF(ui\\icon_refuel_interact.paa),\n        {[_player, _target] call FUNC(TakeNozzle)},\n        {[_player, _target] call FUNC(canTakeNozzle)},\n        {}, [], [0,0,0],\n        REFUEL_ACTION_DISTANCE\n    ] call EFUNC(interact_menu,createAction),\n    [QGVAR(CheckFuelCounter),\n        localize LSTRING(CheckFuelCounter),\n        QPATHTOF(ui\\icon_refuel_interact.paa),\n        {[_player, _target] call FUNC(readFuelCounter)},\n        {true},\n        {}, [], [0,0,0],\n        REFUEL_ACTION_DISTANCE\n    ] call EFUNC(interact_menu,createAction),\n    [QGVAR(CheckFuel),\n        localize LSTRING(CheckFuel),\n        QPATHTOF(ui\\icon_refuel_interact.paa),\n        {[_player, _target] call FUNC(checkFuel)},\n        {[_player, _target] call FUNC(canCheckFuel)},\n        {}, [], [0,0,0],\n        REFUEL_ACTION_DISTANCE\n    ] call EFUNC(interact_menu,createAction),\n    [QGVAR(Return),\n        localize LSTRING(Return),\n        QPATHTOF(ui\\icon_refuel_interact.paa),\n        {[_player, _target] call FUNC(returnNozzle)},\n        {[_player, _target] call FUNC(canReturnNozzle)},\n        {}, [], [0,0,0],\n        REFUEL_ACTION_DISTANCE\n    ] call EFUNC(interact_menu,createAction)\n];\n\n// init menu for config refuel vehicles\nprivate _sourceClasses = [];\n{\n    private _fuelCargo = getNumber (_x >> QGVAR(fuelCargo));\n    if (_fuelCargo > 0 || {_fuelCargo == REFUEL_INFINITE_FUEL}) then {\n        private _sourceClass = configName _x;\n        if (isClass (_x >> \"ACE_Actions\" >> \"ACE_MainActions\" >> QGVAR(Refuel))) exitWith {\n            if (!isClass (inheritsFrom _x >> \"ACE_Actions\" >> \"ACE_MainActions\" >> QGVAR(Refuel))) then {\n                ACE_DEPRECATED(FORMAT_1(QUOTE(GVAR(Refuel) interaction menu in %1),_sourceClass),\"3.13.0\",QUOTE(GVAR(fuelCargo) config value));\n            };\n        };\n        // check if we can use actions with inheritance\n        if (\n            !isText (_x >> \"EventHandlers\" >> \"CBA_Extended_EventHandlers\" >> \"init\") // addActionToClass relies on XEH init\n            || {configName _x isKindOf \"Static\"} // CBA_fnc_addClassEventHandler doesn't support \"Static\" class\n        ) then {\n            if (2 == getNumber (_x >> \"scope\")) then {\n                [_sourceClass, 0, [\"ACE_MainActions\"], GVAR(mainAction)] call EFUNC(interact_menu,addActionToClass);\n                {\n                    [_sourceClass, 0, [\"ACE_MainActions\", QGVAR(Refuel)], _x] call EFUNC(interact_menu,addActionToClass);\n                } forEach GVAR(actions);\n                TRACE_1(\"add menu to static\",_sourceClass);\n            };\n        } else {\n            if (0 == {_sourceClass isKindOf _x} count _sourceClasses) then {\n                _sourceClasses pushBack _sourceClass;\n                [_sourceClass, 0, [\"ACE_MainActions\"], GVAR(mainAction), true] call EFUNC(interact_menu,addActionToClass);\n                {\n                    [_sourceClass, 0, [\"ACE_MainActions\", QGVAR(Refuel)], _x, true] call EFUNC(interact_menu,addActionToClass);\n                } forEach GVAR(actions);\n                TRACE_1(\"add menu to dynamic\",_sourceClass);\n            };\n        };\n    };\n} forEach ('true' configClasses (configFile >> \"CfgVehicles\"));\n\n\n#ifdef DRAW_HOOKS_POS\naddMissionEventHandler [\"Draw3D\", {\n    private _source = cursorObject;\n    private _cfgPos = getArray (configFile >> \"CfgVehicles\" >> typeOf _source >> QGVAR(hooks));\n    private _dynPos = _source getVariable [QGVAR(hooks), []];\n    {\n        drawIcon3D [\"\\a3\\ui_f\\data\\gui\\cfg\\hints\\icon_text\\group_1_ca.paa\", [1,1,1,1], _source modelToWorldVisual _x, 1, 1, 0, format [\"Hook %1\", _forEachIndex]];\n    } forEach ([_dynPos, _cfgPos] select (_dynPos isEqualTo []));\n}];\n#endif\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canCheckFuel.sqf",
        "content": "/*\n * Author: Jonpas, GitHawk\n * Checks if unit can check fuel.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fuel Source <OBJECT>\n *\n * Return Value:\n * Can Check Fuel <BOOL>\n *\n * Example:\n * [player, truck] call ace_refuel_fnc_canCheckFuel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_source\", objNull, [objNull]]];\n\n!(isNull _unit ||\n    {!(_unit isKindOf \"CAManBase\")} ||\n    {!local _unit} ||\n    {!alive _source} ||\n    {([_unit, _source] call EFUNC(interaction,getInteractionDistance)) > REFUEL_ACTION_DISTANCE} ||\n    {(_source call FUNC(getFuel) == REFUEL_INFINITE_FUEL)})\n",
        "functionName": "ace_refuel_fnc_canCheckFuel"
      },
      {
        "fileName": "fnc_canDisconnect.sqf",
        "content": "/*\n * Author: GitHawk\n * Check if a unit can disconnect a fuel nozzle\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Nozzle <OBJECT>\n *\n * Return Value:\n * Can disconnect <BOOL>\n *\n * Example:\n * [player, nozzle] call ace_refuel_fnc_canDisconnect\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\n\nif (isNull _unit ||\n    {isNull _nozzle} ||\n    {!(_unit isKindOf \"CAManBase\")} ||\n    {!local _unit} ||\n    {!isNull (_unit getVariable [QGVAR(nozzle), objNull])} ||\n    {(_nozzle distance _unit) > REFUEL_ACTION_DISTANCE}) exitWith {false};\n\nprivate _sink = _nozzle getVariable [QGVAR(sink), objNull];\n!((isNull _sink) || {_nozzle getVariable [QGVAR(isRefueling), false]})\n",
        "functionName": "ace_refuel_fnc_canDisconnect"
      },
      {
        "fileName": "fnc_canReturnNozzle.sqf",
        "content": "/*\n * Author: GitHawk\n * Check if a unit can return a fuel nozzle\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fuel Source <OBJECT>\n *\n * Return Value:\n * Can Return Nozzle <BOOL>\n *\n * Example:\n * [player, fuelTruck] call ace_refuel_fnc_canReturnNozzle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_source\", objNull, [objNull]]];\n\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\n\n(!isNull _nozzle) &&\n{([_unit, _source] call EFUNC(interaction,getInteractionDistance)) < REFUEL_ACTION_DISTANCE} &&\n{_source == (_nozzle getVariable [QGVAR(source), objNull])}\n",
        "functionName": "ace_refuel_fnc_canReturnNozzle"
      },
      {
        "fileName": "fnc_canTakeNozzle.sqf",
        "content": "/*\n * Author: GitHawk\n * Check if a unit can take a fuel nozzle\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fuel Source or Nozzle <OBJECT>\n *\n * Return Value:\n * Can connect <BOOL>\n *\n * Example:\n * [player, nozzle] call ace_refuel_fnc_canTakeNozzle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_object\", objNull, [objNull]]];\n\nif (isNull _unit ||\n    {!(_unit isKindOf \"CAManBase\")} ||\n    {!local _unit} ||\n    {!alive _object} ||\n    {!isNull (_unit getVariable [QGVAR(nozzle), objNull])} ||\n    {typeOf _object == QGVAR(fuelNozzle) && {!isNull (attachedTo _object)}} || // Not carried by someone else\n    {([_unit, _object] call EFUNC(interaction,getInteractionDistance)) > REFUEL_ACTION_DISTANCE}) exitWith {false};\n\n!(_object getVariable [QGVAR(isConnected), false]) && {!(_unit getVariable [QGVAR(isRefueling), false])}\n",
        "functionName": "ace_refuel_fnc_canTakeNozzle"
      },
      {
        "fileName": "fnc_canTurnOff.sqf",
        "content": "/*\n * Author: GitHawk\n * Check if a unit can turn off a fuel nozzle\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Nozzle <OBJECT>\n *\n * Return Value:\n * Can turn off <BOOL>\n *\n * Example:\n * [player, nozzle] call ace_refuel_fnc_canTurnOff\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\n\nif (isNull _unit  ||\n    {isNull _nozzle} ||\n    {!(_unit isKindOf \"CAManBase\")} ||\n    {!local _unit} ||\n    {(_nozzle distance _unit) > REFUEL_ACTION_DISTANCE}) exitWith {false};\n\n(_nozzle getVariable [QGVAR(isRefueling), false])\n",
        "functionName": "ace_refuel_fnc_canTurnOff"
      },
      {
        "fileName": "fnc_canTurnOn.sqf",
        "content": "/*\n * Author: GitHawk\n * Check if a unit can turn on a fuel nozzle\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Nozzle <OBJECT>\n *\n * Return Value:\n * Can turn on <BOOL>\n *\n * Example:\n * [player, nozzle] call ace_refuel_fnc_canTurnOn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\n\nif (isNull _unit  ||\n    {isNull _nozzle} ||\n    {!(_unit isKindOf \"CAManBase\")} ||\n    {!local _unit} ||\n    {(_nozzle distance _unit) > REFUEL_ACTION_DISTANCE}) exitWith {false};\n\n!(_nozzle getVariable [QGVAR(isRefueling), false]) &&\n    {[_nozzle getVariable QGVAR(source)] call FUNC(getFuel) != 0} &&\n    {!isNull (_nozzle getVariable [QGVAR(sink), objNull])} &&\n    {(fuel (_nozzle getVariable QGVAR(sink))) < 1}\n",
        "functionName": "ace_refuel_fnc_canTurnOn"
      },
      {
        "fileName": "fnc_checkFuel.sqf",
        "content": "/*\n * Author: GitHawk\n * Get the remaining fuel amount\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fuel Source <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, fuelTruck] call ace_refuel_fnc_checkFuel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_source\", objNull, [objNull]]];\n\nprivate _fuel = [_source] call FUNC(getFuel);\n\n[\n    TIME_PROGRESSBAR(REFUEL_PROGRESS_DURATION * 2),\n    [_unit, _source, _fuel],\n    {\n        params [\"_args\"];\n        _args params [[\"_unit\", objNull, [objNull]], [\"_source\", objNull, [objNull]], [\"_fuel\", 0, [0]]];\n        if (_fuel > 0 ) then {\n            [QEGVAR(common,displayTextStructured), [[LSTRING(Hint_RemainingFuel), _fuel], 2, _unit], _unit] call CBA_fnc_targetEvent;\n        } else {\n            [QEGVAR(common,displayTextStructured), [LSTRING(Hint_Empty), 2, _unit], _unit] call CBA_fnc_targetEvent;\n        };\n        true\n    },\n    {true},\n    localize LSTRING(CheckFuelAction),\n    {true},\n    [INTERACT_EXCEPTIONS]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_refuel_fnc_checkFuel"
      },
      {
        "fileName": "fnc_connectNozzleAction.sqf",
        "content": "/*\n * Author: GitHawk et.al.\n * Calculates a connection for refueling.\n * With code from ace_attach\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: Visual Position ASL <ARRAY>\n * 3: Nozzle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, tank, [0,0,0], nozzle] call ace_refuel_fnc_connectNozzleAction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_sink\", objNull, [objNull]], [\"_startingPosASL\", [0,0,0], [[]], 3], [\"_nozzle\", objNull, [objNull]]];\n\n\nprivate _bestPosASL = [];\nprivate _bestPosDistance = 1e99;\nprivate _viewPos = _startingPosASL vectorAdd (((positionCameraToWorld [0,0,0]) vectorFromTo (positionCameraToWorld [0,0,1])) vectorMultiply 3);\nprivate _modelVector = _startingPosASL vectorFromTo (AGLtoASL (_sink modelToWorld [0,0,0]));\nprivate _modelVectorLow = _startingPosASL vectorFromTo (AGLtoASL (_sink modelToWorld [0,0,-1]));\n\n{\n    private _endPosASL = _x;\n    // [_startingPosASL, _endPosASL, [1,0,0,1]] call EFUNC(common,addLineToDebugDraw); // Debug scan lines\n    private _intersections = lineIntersectsSurfaces [_startingPosASL, _endPosASL, _unit];\n    {\n        _x params [\"_intersectPosASL\", \"\", \"_intersectObject\"];\n        if (_intersectObject == _sink) then {\n            private _distance = _startingPosASL distance _intersectPosASL;\n            if (_distance < _bestPosDistance) then {\n                _bestPosDistance = _distance;\n                _bestPosASL = _intersectPosASL;\n            };\n        };\n    } forEach _intersections;\n} forEach [\n    // Shoot rays towards player's view angle and see which spot is closest\n    _startingPosASL vectorAdd (((positionCameraToWorld [0,0,0]) vectorFromTo (positionCameraToWorld [0,0,1])) vectorMultiply 3),\n    _startingPosASL vectorAdd (((positionCameraToWorld [0,0,0]) vectorFromTo (positionCameraToWorld [-0.25,0,1])) vectorMultiply 3),\n    _startingPosASL vectorAdd (((positionCameraToWorld [0,0,0]) vectorFromTo (positionCameraToWorld [0.25,0,1])) vectorMultiply 3),\n    _startingPosASL vectorAdd (((positionCameraToWorld [0,0,0]) vectorFromTo (positionCameraToWorld [0,-0.25,1])) vectorMultiply 3),\n    _startingPosASL vectorAdd (((positionCameraToWorld [0,0,0]) vectorFromTo (positionCameraToWorld [-0.25,-0.25,1])) vectorMultiply 3),\n    _startingPosASL vectorAdd (((positionCameraToWorld [0,0,0]) vectorFromTo (positionCameraToWorld [0.25,-0.25,1])) vectorMultiply 3),\n    AGLtoASL (_sink modelToWorld [0,0,0]), // Try old method of just using model center\n    AGLtoASL (_sink modelToWorld [0,0,-0.5])\n];\n\n//Checks (too close to center or can't attach)\nif (_bestPosASL isEqualTo []) exitWith {\n    [localize LSTRING(Failed)] call EFUNC(common,displayTextStructured);\n};\n\n//Move it out slightly, for visibility sake (better to look a little funny than be embedded//sunk in the hull and be useless)\n_bestPosASL = _bestPosASL vectorAdd ((_bestPosASL vectorFromTo _startingPosASL) vectorMultiply 0.05);\n\nprivate _attachPosModel = _sink worldToModel (ASLtoAGL _bestPosASL);\n\n[\n    TIME_PROGRESSBAR(REFUEL_PROGRESS_DURATION),\n    [_unit, _nozzle, _sink, _attachPosModel],\n    {\n        params [\"_args\"];\n        _args params [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_sink\", objNull, [objNull]], [\"_endPosTestOffset\", [0,0,0], [[]], 3]];\n        _unit setVariable [QGVAR(nozzle), nil, true];\n        _unit setVariable [QGVAR(isRefueling), false];\n\n        detach _nozzle;\n        _nozzle attachTo [_sink, _endPosTestOffset];\n        _endPosTestOffset params [\"_x\", \"_y\"];\n        private _bb = boundingBoxReal _sink;\n        _bb params [\"_ll\", \"_rr\"];\n        _ll set [2, 0];\n        _rr set [2, 0];\n        _ll params [\"_x1\", \"_y1\"];\n        _rr params [\"_x2\", \"_y2\"];\n        private _c1 = _ll vectorCos _endPosTestOffset;\n        private _c2 = _ll vectorCos [_x1, _y2, 0];\n        private _cn = (_ll vectorCrossProduct [0, 0, 1]) vectorCos _endPosTestOffset;\n        private _dirAndUp = [[1, 0, 0],[0, 0, 1]];\n        if (_c1 > _c2 && (_cn > 0)) then {\n            _dirAndUp = [[1, 0, 0.8],[0, 0, 1]];\n        } else {\n            _c1 = [_x1, _y2, 0] vectorCos _endPosTestOffset;\n            _c2 = [_x1, _y2, 0] vectorCos _rr;\n            _cn = ([_x1, _y2, 0] vectorCrossProduct [0, 0, 1]) vectorCos _endPosTestOffset;\n            if (_c1 > _c2 && (_cn > 0)) then {\n                _dirAndUp = [[0, -1, 0.8],[0, 0, 1]];\n            } else {\n                _c1 = _rr vectorCos _endPosTestOffset;\n                _c2 = _rr vectorCos [_x2, _y1, 0];\n                _cn = (_rr vectorCrossProduct [0, 0, 1]) vectorCos _endPosTestOffset;\n                if (_c1 > _c2 && (_cn > 0)) then {\n                    _dirAndUp = [[-1, 0, 0.8],[0, 0, 1]];\n                } else {\n                    _dirAndUp = [[0, 1, 0.8],[0, 0, 1]];\n                };\n            };\n        };\n        [QEGVAR(common,setVectorDirAndUp), [_nozzle, _dirAndUp], _nozzle] call CBA_fnc_targetEvent;\n        if (_nozzle isKindOf \"Land_CanisterFuel_F\") then { _nozzle setVariable [QEGVAR(cargo,canLoad), false, true]; };\n        _nozzle setVariable [QGVAR(sink), _sink, true];\n        _nozzle setVariable [QGVAR(isConnected), true, true];\n        _sink setVariable [QGVAR(nozzle), _nozzle, true];\n\n        _source = _nozzle getVariable QGVAR(source);\n        private _fuel = [_source] call FUNC(getFuel);\n        if (_fuel == REFUEL_INFINITE_FUEL) then {\n            _source setVariable [QGVAR(fuelCounter), 0, true];\n        } else {\n            _source setVariable [QGVAR(fuelCounter), _fuel, true];\n        };\n\n        [_unit, _sink, _nozzle, _endPosTestOffset] call FUNC(refuel);\n\n        if ([_unit, _nozzle] call FUNC(canTurnOn)) then {\n            _unit setVariable [QGVAR(tempFuel), nil];\n            [_unit, _nozzle] call FUNC(turnOn);\n        } else {\n            [LSTRING(CouldNotTurnOn)] call EFUNC(common,displayText);\n        };\n    },\n    \"\",\n    localize LSTRING(ConnectAction),\n    {true},\n    [INTERACT_EXCEPTIONS]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_refuel_fnc_connectNozzleAction"
      },
      {
        "fileName": "fnc_disconnect.sqf",
        "content": "/*\n * Author: GitHawk\n * Disconnect a fuel nozzle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Nozzle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, nozzle] call ace_refuel_fnc_disconnect\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\n\nprivate _sink = _nozzle getVariable [QGVAR(sink), objNull];\nif (isNull _sink) exitWith {};\n\n_sink setVariable [QGVAR(nozzle), nil, true];\nif (_nozzle isKindOf \"Land_CanisterFuel_F\") then { _nozzle setVariable [QEGVAR(cargo,canLoad), true, true]; };\n_nozzle setVariable [QGVAR(sink), nil, true];\n_nozzle setVariable [QGVAR(isConnected), false, true];\n[objNull, _nozzle, true] call FUNC(dropNozzle);\n\n[_unit, _nozzle] call FUNC(takeNozzle);\n",
        "functionName": "ace_refuel_fnc_disconnect"
      },
      {
        "fileName": "fnc_dropNozzle.sqf",
        "content": "/*\n * Author: GitHawk\n * Detaches the fuel nozzle, drops it and removes player variables.\n *\n * Arguments:\n * 0: Unit <OBJECT> (optional)\n * 1: Nozzle <OBJECT>\n * 2: Disconnect Only <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player,  nozzle, false] call ace_refuel_fnc_dropNozzle\n * [objNull, nozzle, false] call ace_refuel_fnc_dropNozzle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_disconnectOnly\", false, [false]]];\nTRACE_3(\"dropNozzle\",_unit,_nozzle,_disconnectOnly);\n\ndetach _nozzle;\n_nozzle setVariable [QGVAR(isRefueling), false, true];\n\nif (_disconnectOnly) exitWith {};\n_nozzle setVelocity [0, 0, 0];\n\nprivate _groundPosition = getPosASL _nozzle;\nprivate _posA = (getPosASL _nozzle) vectorAdd [0,0,0.05];\nprivate _posB = (getPosASL _nozzle) vectorAdd [0,0,-1000];\nprivate _intersections = lineIntersectsSurfaces [_posA, _posB, _unit, _nozzle, true, 1, \"GEOM\"];\nTRACE_1(\"\",_intersections);\nif (_intersections isEqualTo []) then {\n    _groundPosition set [2, (getTerrainHeightASL _groundPosition) + 0.005];\n} else {\n    _groundPosition = ((_intersections select 0) select 0) vectorAdd [0,0,0.005];\n};\n_nozzle setPosASL _groundPosition;\nTRACE_1(\"finalPos\",getPosATL _nozzle);\n\nif (isNull _unit) exitWith {};\n_unit setVariable [QGVAR(isRefueling), false];\n_unit setVariable [QGVAR(nozzle), objNull, true];\n",
        "functionName": "ace_refuel_fnc_dropNozzle"
      },
      {
        "fileName": "fnc_getFuel.sqf",
        "content": "/*\n * Author: GitHawk, Jonpas\n * Get the remaining fuel amount.\n *\n * Arguments:\n * 0: Fuel Source <OBJECT>\n *\n * Return Value:\n * Fuel left (in liters) <NUMBER>\n *\n * Example:\n * [fuelTruck] call ace_refuel_fnc_getFuel\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_source\", objNull, [objNull]]];\n\nif (isNull _source) exitWith {0};\n\nprivate _fuel = _source getVariable QGVAR(currentFuelCargo);\n\nif (isNil \"_fuel\") then {\n    _fuel = getNumber (configFile >> \"CfgVehicles\" >> typeOf _source >> QGVAR(fuelCargo));\n    _source setVariable [QGVAR(currentFuelCargo), _fuel, true];\n};\n\n_fuel\n",
        "functionName": "ace_refuel_fnc_getFuel"
      },
      {
        "fileName": "fnc_handleDisconnect.sqf",
        "content": "/*\n * Author: GitHawk\n * Cleans up refuel on client disconnect.\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_refuel_fnc_handleDisconnect\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]]];\nTRACE_1(\"disconnect\",_unit);\n\nif (isNull _unit) exitWith {};\n\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\nif (isNull _nozzle) exitWith {};\n\n[_unit, _nozzle] call FUNC(dropNozzle);\n[_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set);\n",
        "functionName": "ace_refuel_fnc_handleDisconnect"
      },
      {
        "fileName": "fnc_handleRespawn.sqf",
        "content": "/*\n * Author: Dystopian\n * Clean variables on unit respawn.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_refuel_fnc_handleRespawn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"respawn\",_unit);\n\nif (isNull (_unit getVariable [QGVAR(nozzle), objNull])) exitWith {};\n\n_unit setVariable [QGVAR(selectedWeaponOnRefuel), nil];\n_unit setVariable [QGVAR(isRefueling), false];\n_unit setVariable [QGVAR(nozzle), nil, true];\n_unit setVariable [QGVAR(hint), nil];\n",
        "functionName": "ace_refuel_fnc_handleRespawn"
      },
      {
        "fileName": "fnc_initSource.sqf",
        "content": "/*\n * Author: Dystopian\n * Adds refuel menu to object.\n *\n * Arguments:\n * 0: Source <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorObject] call ace_refuel_fnc_initSource\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nparams [\"_source\"];\nTRACE_2(\"init\",_source,typeOf _source);\n\n[_source, 0, [\"ACE_MainActions\"], GVAR(mainAction)] call EFUNC(interact_menu,addActionToObject);\n{\n    [_source, 0, [\"ACE_MainActions\", QGVAR(Refuel)], _x] call EFUNC(interact_menu,addActionToObject);\n} forEach GVAR(actions);\n",
        "functionName": "ace_refuel_fnc_initSource"
      },
      {
        "fileName": "fnc_makeJerryCan.sqf",
        "content": "/*\n * Author: GitHawk\n * Makes an object into a jerry can.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Fuel amount (in liters) <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [can] call ace_refuel_fnc_makeJerryCan\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_target\", objNull, [objNull]], [\"_fuelAmount\", 20, [0]]];\n\nif (isNull _target ||\n    {_target isKindOf \"AllVehicles\"} ||\n    {_target getVariable [QGVAR(jerryCan), false]}) exitWith {};\n\nif (isServer) then {\n    [_target, _fuelAmount] call FUNC(setFuel);  // has global effects\n};\n_target setVariable [QGVAR(jerryCan), true];\n_target setVariable [QGVAR(source), _target];\n\n// Main Action\nprivate _action = [QGVAR(Refuel),\n    localize LSTRING(Refuel),\n    QPATHTOF(ui\\icon_refuel_interact.paa),\n    {},\n    {true},\n    {},\n    [],\n    [0, 0, 0],\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\n[_target, 0, [\"ACE_MainActions\"], _action] call EFUNC(interact_menu,addActionToObject);\n\n// Add pickup\n_action = [QGVAR(PickUpNozzle),\n    localize LSTRING(TakeNozzle),\n    QPATHTOF(ui\\icon_refuel_interact.paa),\n    {[_player, _target] call FUNC(takeNozzle)},\n    {[_player, _target] call FUNC(canTakeNozzle)},\n    {},\n    [],\n    [0, 0, 0],\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\n[_target, 0, [\"ACE_MainActions\", QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\n\n// Add turnOn\n_action = [QGVAR(TurnOn),\n    localize LSTRING(TurnOn),\n    QPATHTOF(ui\\icon_refuel_interact.paa),\n    {[_player, _target] call FUNC(turnOn)},\n    {[_player, _target] call FUNC(canTurnOn)},\n    {},\n    [],\n    [0, 0, 0],\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\n[_target, 0, [\"ACE_MainActions\", QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\n\n// Add turnOff\n_action = [QGVAR(TurnOff),\n    localize LSTRING(TurnOff),\n    QPATHTOF(ui\\icon_refuel_interact.paa),\n    {[_player, _target] call FUNC(turnOff)},\n    {[_player, _target] call FUNC(canTurnOff)},\n    {},\n    [],\n    [0, 0, 0],\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\n[_target, 0, [\"ACE_MainActions\", QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\n\n// Add disconnect\n_action = [QGVAR(Disconnect),\n    localize LSTRING(Disconnect),\n    QPATHTOF(ui\\icon_refuel_interact.paa),\n    {[_player, _target] call FUNC(disconnect)},\n    {[_player, _target] call FUNC(canDisconnect)},\n    {},\n    [],\n    [0, 0, 0],\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\n[_target, 0, [\"ACE_MainActions\", QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\n",
        "functionName": "ace_refuel_fnc_makeJerryCan"
      },
      {
        "fileName": "fnc_makeSource.sqf",
        "content": "/*\n * Author: Dystopian\n * Makes an object into a refuel source.\n * Run on server only.\n *\n * Arguments:\n * 0: Fuel Source <OBJECT>\n * 1: Fuel amount (in liters) <NUMBER> (default: 0)\n * 2: Hooks positions <ARRAY> (default: [[0,0,0]])\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorObject, 100] call ace_refuel_fnc_makeSource\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!isServer) exitWith {};\n\n// Only run this after the settings are initialized\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(makeSource), _this];\n};\n\nparams [\n    [\"_source\", objNull, [objNull]],\n    [\"_fuelCargo\", 0, [0]],\n    [\"_hooks\", nil, [[]]]\n];\nTRACE_3(\"makeSource\",_source,_fuelCargo,_hooks);\n\nprivate _fuelCargoConfig = getNumber (configFile >> \"CfgVehicles\" >> typeOf _source >> QGVAR(fuelCargo));\n\nif (\n    isNull _source\n    || {_fuelCargo < 0 && {!(_fuelCargo in [REFUEL_INFINITE_FUEL, REFUEL_DISABLED_FUEL])}}\n    || {_fuelCargo != 0 && {_fuelCargo == _fuelCargoConfig}}\n) exitWith {};\n\n[_source, _fuelCargo] call FUNC(setFuel);\n\nif (_fuelCargo == REFUEL_DISABLED_FUEL) exitWith {};\n\nif (\n    !isNil \"_hooks\"\n    && {_hooks isEqualTypeAll []}\n    && {0 == {!(_x isEqualTypeParams [0,0,0]) || {3 < count _x}} count _hooks}\n) then {\n    _source setVariable [QGVAR(hooks), _hooks, true];\n};\n\n// check if menu already exists\nif (_fuelCargoConfig != 0 || {!isNil {_source getVariable QGVAR(initSource_jipID)}}) exitWith {};\n\nprivate _jipID = [QGVAR(initSource), [_source]] call CBA_fnc_globalEventJIP;\n[_jipID, _source] call CBA_fnc_removeGlobalEventJIP;\n_source setVariable [QGVAR(initSource_jipID), _jipID];\n",
        "functionName": "ace_refuel_fnc_makeSource"
      },
      {
        "fileName": "fnc_moduleRefuelSettings.sqf",
        "content": "/*\n * Author: GitHawk\n * Module for adjusting the refuel settings.\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_refuel_fnc_moduleRefuelSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", [\"_activated\", false, [false]]];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(rate), \"rate\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(hoseLength), \"hoseLength\"] call EFUNC(common,readSettingFromModule);\n\nINFO_2(\"Refuel Module Initialized with flow rate: %1 - hoseLength: %2\",GVAR(rate), GVAR(hoseLength))\n",
        "functionName": "ace_refuel_fnc_moduleRefuelSettings"
      },
      {
        "fileName": "fnc_onMouseButtonDown.sqf",
        "content": "/*\n * Author: Dystopian\n * Mouse button down event.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_refuel_fnc_onMouseButtonDown\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _button = _this select 1;\nprivate _unit = ACE_player;\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\n\nif (_button > 1 || {isNull _nozzle}) exitWith {};\n\ngetCursorObjectParams params [\"_cursorObject\", \"\", \"_distance\"];\n\n// RMB\nif (_button == 1) exitWith {\n    if (\n        !isNull _cursorObject\n        && {_distance < REFUEL_NOZZLE_ACTION_DISTANCE}\n        && {[_unit, _cursorObject] call FUNC(canReturnNozzle)}\n    ) then {\n        [_unit, _cursorObject] call FUNC(returnNozzle);\n    } else {\n        [_unit, _nozzle] call FUNC(dropNozzle);\n    };\n};\n\n// LMB\n// code from attach, don't know what it is\nprivate _virtualPosASL = (eyePos _unit) vectorAdd (positionCameraToWorld [0,0,0.6]) vectorDiff (positionCameraToWorld [0,0,0]);\nif (cameraView == \"EXTERNAL\") then {\n    _virtualPosASL = _virtualPosASL vectorAdd ((positionCameraToWorld [0.3,0,0]) vectorDiff (positionCameraToWorld [0,0,0]));\n};\nif (\n    !isNull _cursorObject\n    && {_distance < REFUEL_NOZZLE_ACTION_DISTANCE}\n    && {1 == getNumber (configFile >> \"CfgVehicles\" >> (typeOf _cursorObject) >> QGVAR(canReceive))}\n    && {isNull (_cursorObject getVariable [QGVAR(nozzle), objNull])}\n    && {!lineIntersects [eyePos _unit, _virtualPosASL, _unit]}\n) then {\n    [_unit, _cursorObject, _virtualPosASL, _nozzle] call FUNC(connectNozzleAction);\n};\n",
        "functionName": "ace_refuel_fnc_onMouseButtonDown"
      },
      {
        "fileName": "fnc_readFuelCounter.sqf",
        "content": "/*\n * Author: GitHawk\n * Reads the fuel counter.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fuel Source <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, fuelTruck] call ace_refuel_fnc_readFuelCounter\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_source\", objNull, [objNull]]];\n\nprivate _currentFuel = [_source] call FUNC(getFuel);\nprivate _fuelCounter = if (_currentFuel == REFUEL_INFINITE_FUEL) then {\n    _source getVariable [QGVAR(fuelCounter), 0]\n} else {\n    (_source getVariable [QGVAR(fuelCounter), _currentFuel]) - _currentFuel\n};\n\nprivate _fuelCounter = 0.01 * round (100 * _fuelCounter);\n[[LSTRING(Hint_FuelCounter), _fuelCounter], 1.5, _unit] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_refuel_fnc_readFuelCounter"
      },
      {
        "fileName": "fnc_refuel.sqf",
        "content": "/*\n * Author: GitHawk\n * Refuels the vehicle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: Nozzle <OBJECT>\n * 3: Connection Point <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, nozzle, [2, 1, 5]] call ace_refuel_fnc_refuel\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_sink\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_connectToPoint\", [0,0,0], [[]], 3]];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _sink;\n\nprivate _rate =  getNumber (_config >> QGVAR(flowRate)) * GVAR(rate);\nprivate _maxFuel = getNumber (_config >> QGVAR(fuelCapacity));\n\n// Fall back to vanilla fuelCapacity value (only air and sea vehicles don't have this defined by default by us)\n// Air and sea vehicles have that value properly defined in liters, unlike ground vehicles which is is formula of (range * tested factor) - different fuel consumption system than ground vehicles\nif (_maxFuel == 0) then {\n    _maxFuel = getNumber (_config >> \"fuelCapacity\");\n};\n\n[{\n    params [\"_args\", \"_pfID\"];\n    _args params [[\"_source\", objNull, [objNull]], [\"_sink\", objNull, [objNull]], [\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_rate\", 1, [0]], [\"_startFuel\", 0, [0]], [\"_maxFuel\", 0, [0]], [\"_connectFromPoint\", [0,0,0], [[]], 3], [\"_connectToPoint\", [0,0,0], [[]], 3]];\n\n    if !(_nozzle getVariable [QGVAR(isConnected), false]) exitWith {\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    };\n\n    if (!alive _source || {!alive _sink}) exitWith {\n        [objNull, _nozzle] call FUNC(dropNozzle);\n        _nozzle setVariable [QGVAR(isConnected), false, true];\n        if (_nozzle isKindOf \"Land_CanisterFuel_F\") then { _nozzle setVariable [QEGVAR(cargo,canLoad), true, true]; };\n        _nozzle setVariable [QGVAR(sink), nil, true];\n        _sink setVariable [QGVAR(nozzle), nil, true];\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    };\n    private _hoseLength = _source getVariable [QGVAR(hoseLength), GVAR(hoseLength)];\n    private _tooFar = ((_sink modelToWorld _connectToPoint) distance (_source modelToWorld _connectFromPoint)) > (_hoseLength - 2);\n    if (_tooFar && {!(_nozzle getVariable [QGVAR(jerryCan), false])}) exitWith {\n        [LSTRING(Hint_TooFar), 2, _unit] call EFUNC(common,displayTextStructured);\n\n        [objNull, _nozzle] call FUNC(dropNozzle);\n        _nozzle setVariable [QGVAR(isConnected), false, true];\n        if (_nozzle isKindOf \"Land_CanisterFuel_F\") then { _nozzle setVariable [QEGVAR(cargo,canLoad), true, true]; };\n        _nozzle setVariable [QGVAR(sink), nil, true];\n        _sink setVariable [QGVAR(nozzle), nil, true];\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    };\n\n    private _finished = false;\n    private _fueling = _nozzle getVariable [QGVAR(isRefueling), false];\n    if (_fueling) then {\n        private _fuelInSource = [_source] call FUNC(getFuel);\n        if (_fuelInSource == 0) exitWith {\n            [LSTRING(Hint_SourceEmpty), 2, _unit] call EFUNC(common,displayTextStructured);\n            _nozzle setVariable [QGVAR(lastTickMissionTime), nil];\n            _nozzle setVariable [QGVAR(isRefueling), false, true];\n        };\n\n        // Calculate rate using mission time to take time acceleration and pause into account\n        private _rateTime = _rate * (CBA_missionTime - (_nozzle getVariable [QGVAR(lastTickMissionTime), CBA_missionTime]));\n        _nozzle setVariable [QGVAR(lastTickMissionTime), CBA_missionTime];\n\n        if !(_fuelInSource == REFUEL_INFINITE_FUEL) then {\n            _fuelInSource = _fuelInSource - _rateTime;\n        } else {\n            _source setVariable [QGVAR(fuelCounter), (_source getVariable [QGVAR(fuelCounter), 0]) + _rateTime, true];\n        };\n        if (_fuelInSource < 0 && {_fuelInSource > REFUEL_INFINITE_FUEL}) then {\n            _fuelInSource = 0;\n            _finished = true;\n            [LSTRING(Hint_SourceEmpty), 2, _unit] call EFUNC(common,displayTextStructured);\n        };\n\n        private _fuelInSink = (_unit getVariable [QGVAR(tempFuel), _startFuel])  + ( _rateTime / _maxFuel);\n        if (_fuelInSink > 1) then {\n            _fuelInSink = 1;\n            _finished = true;\n            [LSTRING(Hint_Completed), 2, _unit] call EFUNC(common,displayTextStructured);\n        };\n        _unit setVariable [QGVAR(tempFuel), _fuelInSink];\n\n        [QEGVAR(common,setFuel), [_sink, _fuelInSink], _sink] call CBA_fnc_targetEvent;\n        [_source, _fuelInSource] call FUNC(setFuel);\n    } else {\n        _unit setVariable [QGVAR(tempFuel), fuel _sink];\n    };\n\n    if (_finished) exitWith {\n        _nozzle setVariable [QGVAR(lastTickMissionTime), nil];\n        _nozzle setVariable [QGVAR(isRefueling), false, true];\n    };\n}, 1, [\n    _nozzle getVariable QGVAR(source),\n    _sink,\n    _unit,\n    _nozzle,\n    _rate,\n    fuel _sink,\n    _maxFuel,\n    _nozzle getVariable [QGVAR(attachPos), [0,0,0]],\n    _connectToPoint\n]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_refuel_fnc_refuel"
      },
      {
        "fileName": "fnc_returnNozzle.sqf",
        "content": "/*\n * Author: GitHawk, Jonpas\n * Returns the nozzle back to source vehicle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fuel Source <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, fuelTruck] call ace_refuel_fnc_returnNozzle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_source\", objNull, [objNull]]];\n\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\n\nif (isNull _nozzle || {_source != _nozzle getVariable QGVAR(source)}) exitWith {};\n\n[\n    TIME_PROGRESSBAR(REFUEL_PROGRESS_DURATION),\n    [_unit, _nozzle, _source],\n    {\n        params [\"_args\"];\n        _args params [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_source\", objNull, [objNull]]];\n        _unit setVariable [QGVAR(nozzle), nil, true];\n        detach _nozzle;\n        _unit setVariable [QGVAR(isRefueling), false];\n\n        _source setVariable [QGVAR(isConnected), false, true];\n        _source setVariable [QGVAR(ownedNozzle), nil, true];\n        private _rope = _nozzle getVariable [QGVAR(rope), objNull];\n        if !(isNull _rope) then {\n            ropeDestroy _rope;\n        };\n        private _helper = _nozzle getVariable [QGVAR(helper), objNull];\n        if !(isNull _helper) then {\n            deleteVehicle _helper;\n        };\n        deleteVehicle _nozzle;\n\n        [_source, \"blockEngine\", \"ACE_Refuel\", false] call EFUNC(common,statusEffect_set);\n    },\n    \"\",\n    localize LSTRING(ReturnAction),\n    {true},\n    [INTERACT_EXCEPTIONS]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_refuel_fnc_returnNozzle"
      },
      {
        "fileName": "fnc_setFuel.sqf",
        "content": "/*\n * Author: GitHawk\n * Set the remaining fuel amount.\n *\n * Arguments:\n * 0: Fuel Source <OBJECT>\n * 1: Amount (in liters)<NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [fuelTruck, 42] call ace_refuel_fnc_setFuel\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [[\"_source\", objNull, [objNull]], [\"_fuel\", nil, [0]]];\n\nif (isNull _source ||\n    {isNil \"_fuel\"}) exitWith {};\n\n_source setVariable [QGVAR(currentFuelCargo), _fuel, true];\n",
        "functionName": "ace_refuel_fnc_setFuel"
      },
      {
        "fileName": "fnc_startNozzleInHandsPFH.sqf",
        "content": "/*\n * Author: Dystopian\n * PFH while nozzle is in hands.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Nozzle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, nozzle] call ace_refuel_fnc_startNozzleInHandsPFH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define DROP_NOZZLE [_unit, _nozzle] call FUNC(dropNozzle);\n#define UNHOLSTER_WEAPON \\\n    _unit selectWeapon (_unit getVariable QGVAR(selectedWeaponOnRefuel)); \\\n    _unit setVariable [QGVAR(selectedWeaponOnRefuel), nil];\n#define END_PFH \\\n    _unit setVariable [QGVAR(hint), nil]; \\\n    call EFUNC(interaction,hideMouseHint); \\\n    [_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set); \\\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n\nparams [\"_unit\", \"_nozzle\"];\nTRACE_2(\"start\",_unit,_nozzle);\n\n[{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_unit\", \"_nozzle\"];\n\n    if !(\n        alive _unit\n        && {\"\" isEqualTo currentWeapon _unit || {_unit call EFUNC(common,isSwimming)}}\n        && {[_unit, objNull, [INTERACT_EXCEPTIONS, \"notOnMap\"]] call EFUNC(common,canInteractWith)}\n        && {!(\"unconscious\" isEqualTo toLower animationState _unit)}\n        && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\n    ) exitWith {\n        TRACE_3(\"stop dead/weapon/interact/uncon\",_unit,alive _unit,currentWeapon _unit);\n        DROP_NOZZLE\n        _unit setVariable [QGVAR(selectedWeaponOnRefuel), nil];\n        END_PFH\n    };\n\n    // check drop from external events\n    if (isNull (_unit getVariable [QGVAR(nozzle), objNull])) exitWith {\n        TRACE_2(\"stop drop\",_unit,_nozzle);\n        UNHOLSTER_WEAPON\n        END_PFH\n    };\n\n    private _source = _nozzle getVariable [QGVAR(source), objNull];\n    if !(alive _source) exitWith {\n        TRACE_3(\"stop source\",_unit,_nozzle,_source);\n        DROP_NOZZLE\n        private _rope = _nozzle getVariable [QGVAR(rope), objNull];\n        if !(isNull _rope) then {\n            ropeDestroy _rope;\n        };\n        private _helper = _nozzle getVariable [QGVAR(helper), objNull];\n        if !(isNull _helper) then {\n            deleteVehicle _helper;\n        };\n        deleteVehicle _nozzle;\n        UNHOLSTER_WEAPON\n        END_PFH\n    };\n\n    if !(_unit == vehicle _unit && {_unit isEqualTo ACE_player}) exitWith {\n        TRACE_1(\"stop vehicle/player\",_unit,vehicle _unit);\n        DROP_NOZZLE\n        UNHOLSTER_WEAPON\n        END_PFH\n    };\n\n    // check hoseLength < distance\n    if (\n        !(_nozzle getVariable [QGVAR(jerryCan), false])\n        && {((_source getVariable [QGVAR(hoseLength), GVAR(hoseLength)]) - 2) < _unit distance (_source modelToWorld (_nozzle getVariable QGVAR(attachPos)))}\n    ) exitWith {\n        TRACE_1(\"stop length\",_unit);\n        DROP_NOZZLE\n        UNHOLSTER_WEAPON\n        END_PFH\n        [LSTRING(Hint_TooFar), 2, _unit] call EFUNC(common,displayTextStructured);\n    };\n\n    private _hintLMB = \"\";\n    private _hintRMB = localize ELSTRING(dragging,Drop);\n\n    getCursorObjectParams params [\"_cursorObject\", \"\", \"_distance\"];\n    if (!isNull _cursorObject && {_distance < REFUEL_NOZZLE_ACTION_DISTANCE}) then {\n        if (\n            1 == getNumber (configFile >> \"CfgVehicles\" >> (typeOf _cursorObject) >> QGVAR(canReceive))\n            && {isNull (_cursorObject getVariable [QGVAR(nozzle), objNull])}\n        ) then {\n            _hintLMB = localize LSTRING(Connect);\n        };\n        if ([_unit, _cursorObject] call FUNC(canReturnNozzle)) then {\n            _hintRMB = localize LSTRING(Return);\n        };\n    };\n\n    private _hint = [_hintLMB, _hintRMB];\n    if !(_hint isEqualTo (_unit getVariable [QGVAR(hint), []])) then {\n        _unit setVariable [QGVAR(hint), _hint];\n        _hint call EFUNC(interaction,showMouseHint);\n    };\n}, 0, [_unit, _nozzle]] call cba_fnc_addPerFrameHandler;\n",
        "functionName": "ace_refuel_fnc_startNozzleInHandsPFH"
      },
      {
        "fileName": "fnc_takeNozzle.sqf",
        "content": "/*\n * Author: GitHawk\n * Take a fuel nozzle either from a fuel truck/station or from the ground.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fuel Source or Nozzle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, cursorObject] call ace_refuel_fnc_takeNozzle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\n    [\"_unit\", objNull, [objNull]],\n    [\"_object\", objNull, [objNull]]\n];\n\n[\n    TIME_PROGRESSBAR(REFUEL_PROGRESS_DURATION),\n    [_unit, _object],\n    {\n        params [\"_args\"];\n        _args params [\"_unit\", \"_object\"];\n\n        if !([_unit, _object] call FUNC(canTakeNozzle)) exitWith {};\n\n        private _source = _object;\n        private _nozzle = _object;\n        if (typeOf _object isEqualTo QGVAR(fuelNozzle) || {_object getVariable [QGVAR(jerryCan), false]}) then { // func is called on muzzle either connected or on ground\n            _source = _nozzle getVariable QGVAR(source);\n            if (_nozzle getVariable [QGVAR(jerryCan), false]) then {\n                _nozzle attachTo [_unit, [0,1,0], \"pelvis\"];\n            } else {\n                _nozzle attachTo [_unit, [-0.02,0.05,-0.12], \"righthandmiddle1\"];\n            };\n        } else { // func is called on fuel truck\n            _nozzle = QGVAR(fuelNozzle) createVehicle [0,0,0];\n            _nozzle attachTo [_unit, [-0.02,0.05,-0.12], \"righthandmiddle1\"];\n\n            private _ropeTarget = _source;\n            if !(_source isKindOf \"AllVehicles\") then {\n                private _helper = QGVAR(helper) createVehicle [0,0,0];\n                [QEGVAR(common,hideObjectGlobal), [_helper, true]] call CBA_fnc_serverEvent;\n                if ((getText (configFile >> \"CfgVehicles\" >> typeOf _source >> \"simulation\")) isEqualTo \"thingX\") then {\n                    _helper attachTo [_source, [0,0,0]];\n                } else {\n                    _helper setPosWorld (getPosWorld _source);\n                    _helper setDir (getDir _source);\n                    _helper setVectorUp (vectorUp _source);\n                };\n                _nozzle setVariable [QGVAR(helper), _helper, true];\n                _ropeTarget = _helper;\n            };\n            private _attachPos = _source getVariable [QGVAR(hooks), getArray (configFile >> \"CfgVehicles\" >> typeOf _source >> QGVAR(hooks))];\n            if (_attachPos isEqualTo []) then {\n                _attachPos = [[0,0,0]];\n            };\n            if (count _attachPos == 1) then {\n                _attachPos = _attachPos select 0;\n            } else {\n                // select closest hook\n                private _hookDistances = _attachPos apply {_unit distance (_source modelToWorld _x)};\n                _attachPos = _attachPos select (_hookDistances find selectMin _hookDistances);\n            };\n            private _hoseLength = _source getVariable [QGVAR(hoseLength), GVAR(hoseLength)];\n            private _rope = ropeCreate [_ropeTarget, _attachPos, _nozzle, [0, -0.20, 0.12], _hoseLength];\n            _nozzle setVariable [QGVAR(rope), _rope, true];\n            _nozzle setVariable [QGVAR(attachPos), _attachPos, true];\n            _nozzle setVariable [QGVAR(source), _source, true];\n\n            [_source, \"blockEngine\", \"ACE_Refuel\", true] call EFUNC(common,statusEffect_set);\n            _source setVariable [QGVAR(isConnected), true, true];\n            _source setVariable [QGVAR(ownedNozzle), _nozzle, true];\n        };\n\n        _unit setVariable [QGVAR(nozzle), _nozzle, true];\n        _unit setVariable [QGVAR(isRefueling), true];\n\n        // holster weapon\n        _unit setVariable [QGVAR(selectedWeaponOnRefuel), currentWeapon _unit];\n        _unit call EFUNC(common,fixLoweredRifleAnimation);\n        _unit action [\"SwitchWeapon\", _unit, _unit, 299];\n\n        [_unit, \"forceWalk\", \"ACE_refuel\", true] call EFUNC(common,statusEffect_set);\n\n        [_unit, _nozzle] call FUNC(startNozzleInHandsPFH);\n    },\n    {},\n    localize LSTRING(TakeNozzleAction),\n    {true},\n    [INTERACT_EXCEPTIONS_REFUELING]\n] call EFUNC(common,progressBar);\n",
        "functionName": "ace_refuel_fnc_takeNozzle"
      },
      {
        "fileName": "fnc_turnOff.sqf",
        "content": "/*\n * Author: GitHawk\n * Turn off a fuel nozzle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Nozzle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [nozzle] call ace_refuel_fnc_turnOff\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\n\n_nozzle setVariable [QGVAR(lastTickMissionTime), nil];\n_nozzle setVariable [QGVAR(isRefueling), false, true];\n[LSTRING(Hint_Stopped), 1.5, _unit] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_refuel_fnc_turnOff"
      },
      {
        "fileName": "fnc_turnOn.sqf",
        "content": "/*\n * Author: GitHawk\n * Turn on a fuel nozzle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Nozzle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, nozzle] call ace_refuel_fnc_turnOn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\n\n_nozzle setVariable [QGVAR(lastTickMissionTime), CBA_missionTime];\n_nozzle setVariable [QGVAR(isRefueling), true, true];\n[LSTRING(Hint_Started), 1.5, _unit] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_refuel_fnc_turnOn"
      }
    ]
  },
  {
    "component": "reload",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by esteldunedain\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n// Add keybinds\n[\"ACE3 Weapons\", QGVAR(checkAmmo), localize LSTRING(checkAmmo), {\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, [\"isNotInside\", \"isNotSwimming\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(ACE_player call CBA_fnc_canUseWeapon || {(vehicle ACE_player) isKindOf \"StaticWeapon\"}) exitWith {false};\n\n    // Statement\n    [ACE_player] call FUNC(checkAmmo);\n    true\n}, {false}, [19, [false, true, false]], false] call CBA_fnc_addKeybind;\n\n[QGVAR(syncAmmo), {\n    //To propagate the setAmmo change, do it on all clients\n    params [\"_unit\", \"_weapon\", \"_ammo\"];\n    TRACE_3(\"syncAmmo EH\",_unit,_weapon,_ammo);\n\n    _unit setAmmo [_weapon, _ammo];\n}] call CBA_fnc_addEventHandler;\n\n// Listen for attempts to link ammo\n[QGVAR(ammoLinked), {\n    params [\"_receiver\", \"_giver\", \"_magazine\"];\n\n    private _magazineType = currentMagazine _receiver;\n    private _magazineCfg = configFile >> \"CfgMagazines\" >> _magazineType;\n\n    // Return the magazine if it's the wrong type\n    if (_magazineType != (_magazine select 0)) exitWith {\n        [QGVAR(ammoReturned), [_giver,_receiver,_magazine], [_giver]] call CBA_fnc_targetEvent;\n    };\n\n    private _ammoCount = _receiver ammo currentWeapon _receiver;\n    private _ammoMissing = getNumber (_magazineCfg >> \"count\") - _ammoCount;\n\n    // Return the magazine if the belt is full or empty\n    if ((_ammoCount == 0)  || _ammoMissing == 0) exitWith {\n        [QGVAR(ammoReturned), [_giver,_receiver,_magazine], [_giver]] call CBA_fnc_targetEvent;\n    };\n\n    // Add the ammo\n    private _ammoAdded = _ammoMissing min (_magazine select 1);\n    [QGVAR(syncAmmo), [_receiver, currentWeapon _receiver, _ammoCount + _ammoAdded]] call CBA_fnc_globalEvent;\n\n    if ((_magazine select 1) - _ammoAdded > 0) then {\n        [QGVAR(ammoReturned), [_giver, _receiver, [_magazineType, (_magazine select 1) - _ammoAdded]], [_giver]] call CBA_fnc_targetEvent;\n    };\n}] call CBA_fnc_addEventHandler;\n\n// Listen for returned magazines\n[QGVAR(ammoReturned), {\n    params [\"_receiver\", \"\", \"_magazine\"];\n    TRACE_2(\"ammoReturned EH\",_receiver,_magazine);\n\n    _receiver addMagazine _magazine;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canCheckAmmo.sqf",
        "content": "/*\n * Author: CAA-Picard\n * Check if the player can check the ammo of the target.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Can link belt<BOOL> \n *\n * Example:\n * [player, bob] call ace_reload_fnc_canCheckAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"_target\"];\n\n// Return true for static weapons if they have been fired once, @todo 1.40 this work-around doesn't work anymore\nif (_target isKindOf \"StaticWeapon\") exitWith {\n    if (currentMagazine _target != \"\") exitWith {true};\n\n    // no check ammo action on destroyed static weapons\n    if (!alive _target) exitWith {false};\n\n    private _found = false;\n\n    {\n        if (_x select 2) exitWith {\n            _found = true;\n        };\n        false\n    } count magazinesAmmoFull _target;\n\n    _found\n};\n\n// Return false for all other vehicles\nif !(_target isKindOf \"CAManBase\") exitWith {false};\n\n// For men\nif (currentWeapon _target == \"\") exitWith {false};\n\n// Check if their current magazine is a belt\nif (getNumber (configFile >> \"CfgMagazines\" >> currentMagazine _target >> \"ACE_isBelt\") == 1) exitWith {true};\n\n// Check for rocket launchers\nif (currentWeapon _target == secondaryWeapon _target) exitWith {true};\n\nfalse\n",
        "functionName": "ace_reload_fnc_canCheckAmmo"
      },
      {
        "fileName": "fnc_checkAmmo.sqf",
        "content": "/*\n * Author: commy2 and esteldunedain\n * Count the ammo of the currently loaded magazine or count rifle grenades. Play animation and display message.\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target. Optional, if not suplied the player counts his personal or static weapon ammo <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ace_reload_fnc_checkAmmo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define COUNT_BARS 12\n\nparams [\"_unit\"];\n\nprivate _target = vehicle _unit;\n\nif (count _this > 1) then {\n    _target = _this select 1;\n} else {\n\n    // If the unit is on foot, count it's own ammo\n    if (_unit == _target) exitWith {};\n\n    // If it's mounted on a movile weapon, count it's own ammo\n    if !(_target isKindOf \"StaticWeapon\") then {\n        _target = _unit;\n    };\n};\n\nif (_unit == _target) then {\n    [_unit, \"Gear\", 1] call EFUNC(common,doGesture);\n};\n\n[FUNC(displayAmmo), [_target], 1, 0.1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_reload_fnc_checkAmmo"
      },
      {
        "fileName": "fnc_displayAmmo.sqf",
        "content": "/*\n * Author: commy2 and esteldunedain\n * Display the ammo of the currently loaded magazine of the target or count rifle grenades.\n *\n * Arguments:\n * 0: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_reload_fnc_displayAmmo\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n#define COUNT_BARS 12\n\nparams [\"_target\"];\n\nprivate _weapon = currentWeapon _target;\nprivate _muzzle = currentMuzzle _target;\nprivate _magazine = currentMagazine _target;\n\n// currentWeapon returns \"\" for static weapons before they are shot once\nif (_target isKindOf \"StaticWeapon\") then {\n    if (_weapon == \"\") then {\n        if (count (weapons _target) == 1) then {\n            _weapon = (weapons _target) select 0;\n            _muzzle = _weapon;\n        };\n    };\n\n    if (_magazine == \"\") then {\n        // Try to get magazine using magazinesAmmoFull\n        private _magazines = magazinesAmmoFull _target;\n\n        {\n            if (_x select 2) exitWith {\n                _magazine = _x select 0;\n            };\n        } forEach _magazines;\n    };\n};\n\nif (_magazine == \"\") exitWith {};\nif (_weapon == \"\") exitWith {};\nif (!( _muzzle isEqualType \"\")) then {_muzzle = _weapon};\n\nprivate _showNumber = false;\nprivate _ammo = 0;\nprivate _maxRounds = 1;\nprivate _count = 0;\n\n// not grenade launcher\nif (_muzzle == _weapon) then {\n    _maxRounds = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"count\") max 1;\n\n    _ammo = _target ammo _weapon;\n    if (_maxRounds >= COUNT_BARS) then {\n        _count = round (COUNT_BARS * _ammo / _maxRounds);\n\n        if (_ammo > 0) then {_count = _count max 1};\n        if (_ammo < _maxRounds) then {_count = _count min (COUNT_BARS - 1)};\n    } else {\n        _count = _ammo;\n    };\n\n    // grenade launcher\n} else {\n    _showNumber = true;\n\n    _count = if (_magazine != \"\") then {\n        {_x == _magazine} count (magazines _target + [_magazine])\n    } else {\n        {_x in getArray (configFile >> \"CfgWeapons\" >> _weapon >> _muzzle >> \"Magazines\")} count magazines _target\n    };\n};\n\nprivate _ammoBarsStructuredText = if (_showNumber) then {\n    parseText format [\"<t align='center' >%1x</t>\", _count]\n} else {\n    private _color = [((2 * (1 - _ammo / _maxRounds)) min 1), ((2 * _ammo / _maxRounds) min 1), 0];\n\n    private _string = \"\";\n    for \"_a\" from 1 to _count do {\n        _string = _string + \"|\";\n    };\n    private _text = [_string, _color] call EFUNC(common,stringToColoredText);\n\n    _string = \"\";\n    for \"_a\" from (_count + 1) to (_maxRounds min COUNT_BARS) do {\n        _string = _string + \"|\";\n    };\n\n    composeText [_text, [_string, [0.5, 0.5, 0.5]] call EFUNC(common,stringToColoredText)];\n};\n\n\nif (_target isKindOf \"StaticWeapon\") then {\n    //Vehicle mags (usualy) don't have pictures, so just show the text above ammo count\n    private _loadedName = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"displaynameshort\");\n    _loadedName = parseText format [\"<t align='center' >%1</t>\", _loadedName];\n    private _text = composeText [_loadedName, linebreak, _ammoBarsStructuredText];\n    [_text] call EFUNC(common,displayTextStructured);\n} else {\n    private _picture = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"picture\");\n    [_ammoBarsStructuredText, _picture] call EFUNC(common,displayTextPicture);\n};\n",
        "functionName": "ace_reload_fnc_displayAmmo"
      },
      {
        "fileName": "fnc_getAmmoToLinkBelt.sqf",
        "content": "/*\n * Author: esteldunedain, phyma\n * Check if the target has an MG equiped with belt system that the player can link\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * Maximum ammo of magazine (-1 on error) <NUMBER>\n *\n * Example:\n * [player, cursorObject] call ace_reload_fnc_getAmmoToLinkBelt;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\"];\n\nif (vehicle _target != _target) exitWith {-1};\n\nprivate _magazineType = currentMagazine _target;\nprivate _magazineCfg = configFile >> \"CfgMagazines\" >> _magazineType;\n\nif (getNumber (_magazineCfg >> \"ACE_isBelt\") == 0) exitWith {-1};\n\n// Check if the ammo is not empty or full\nprivate _ammoCount = _target ammo currentWeapon _target;\n\n// Exit if the belt is full or empty\nif (_ammoCount == 0 || getNumber (_magazineCfg >> \"count\") - _ammoCount == 0) exitWith {-1};\n\n// Check if the player has any of the same magazines\n// Calculate max ammo\nprivate _maxAmmo = 0;\n\n{\n    _maxAmmo = _maxAmmo max (_x select 1);\n} forEach (magazinesAmmo _player select {_x select 0 == _magazineType});\n\n_maxAmmo\n",
        "functionName": "ace_reload_fnc_getAmmoToLinkBelt"
      },
      {
        "fileName": "fnc_startLinkingBelt.sqf",
        "content": "/*\n * Author: esteldunedain\n * Start linking the belt\n *\n * Arguments:\n * 0: Player <OBJECT>\n * 1: Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ace_reload_fnc_startLinkingBelt\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_target\"];\n\nif (vehicle _target != _target) exitWith {false};\n\nprivate _magazineType = currentMagazine _target;\n\n\nprivate _maxAmmo = [_player, _target] call FUNC(getAmmoToLinkBelt);\n\n//if _maxAmmo is below 0 we quit\nif (_maxAmmo <= 0) exitWith {};\n\n// Condition to call each frame\nprivate _condition = {\n    (_this select 0) params [\"_player\", \"_target\"];\n    ([_player, _target, []] call EFUNC(common,canInteractWith)) && ((_player distance _target) < 3) && ((speed _target) < 1)\n};\n\nprivate _onFinish = {\n    (_this select 0) params [\"_player\", \"_target\", \"_magazine\"];\n\n    // Raise event on remote unit\n    [QGVAR(ammoLinked), [_target, _player, _magazine], [_target]] call CBA_fnc_targetEvent;\n};\n\nprivate _onFailure = {\n    (_this select 0) params [\"_player\", \"_target\", \"_magazine\"];\n    [_player, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\n\n    // Add back the magazine with the former ammo count\n    _player addMagazine _magazine;\n};\n\n[_player, \"PutDown\"] call EFUNC(common,doGesture);\n\n// Remove the magazine with maximum remaining ammo\n[_player, _magazineType, _maxAmmo] call EFUNC(common,removeSpecificMagazine);\n\n// Call progress bar\n[4, [_player, _target, [_magazineType, _maxAmmo]], _onFinish, _onFailure, (localize LSTRING(LinkingBelt)), _condition, [\"isNotInside\"]] call EFUNC(common,progressBar);\n",
        "functionName": "ace_reload_fnc_startLinkingBelt"
      }
    ]
  },
  {
    "component": "reloadlaunchers",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\n[QGVAR(reloadLauncher), {_this call DFUNC(reloadLauncher)}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addMissileReloadActions.sqf",
        "content": "/*\n * Author: commy2\n * Create one action per reloadable missile\n *\n * Arguments:\n * 1: Target <OBJECT>\n * 0: Player <OBJECT>\n *\n * Return Value:\n * Children actions <ARRAY>\n *\n * Example:\n * [bob, kevin] call ace_reloadlaunchers_fnc_addMissileReloadActions\n *\n * Public: No\n *\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_unit\"];\nTRACE_2(\"params\",_target,_unit);\n\n//Fast exit for common case:\nprivate _weapon = secondaryWeapon _target;\nif ((_weapon == \"\") || {(getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(enabled))) == 0}) exitWith {\n    TRACE_1(\"weapon not supported\",_weapon);\n    []\n};\n\nprivate _actions = [];\n\nprivate _loadableMissiles = [_unit, _weapon] call FUNC(getLoadableMissiles);\nTRACE_2(\"\",_weapon,_loadableMissiles);\n\n{\n    private _name = format [QGVAR(Missile_%1), _x];\n    private _displayName = format [localize LSTRING(LoadMagazine), getText (configFile >> \"CfgMagazines\" >> _x >> \"displayName\")];\n\n    private _statement = {\n        (_this select 2) call DFUNC(load);\n    };\n\n    private _condition = {\n        (_this select 2) call DFUNC(canLoad)\n    };\n\n    private _action = [_name, _displayName, \"\", _statement, _condition, {}, [_unit, _target, _weapon, _x], \"\", 4] call EFUNC(interact_menu,createAction);\n\n    _actions pushBack [_action, [], _unit];\n} forEach _loadableMissiles;\n\nTRACE_1(\"return\",_actions);\n_actions\n",
        "functionName": "ace_reloadlaunchers_fnc_addMissileReloadActions"
      },
      {
        "fileName": "fnc_canLoad.sqf",
        "content": "/*\n * Author: commy2\n * Check of the unit can reload the launcher of target unit.\n *\n * Arguments:\n * 0: Unit to do the reloading <OBJECT>\n * 1: Unit eqipped with launcher <OBJECT>\n * 2: weapon name <STRING>\n * 3: missile name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"weapon\", \"missile\"] call ace_reloadlaunchers_fnc_canLoad\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_weapon\", \"_magazine\"];\nTRACE_4(\"params\",_unit,_target,_weapon,_magazine);\n\nif (!alive _target) exitWith {false};\nif (vehicle _target != _target) exitWith {false};\nif !([_unit, _target, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n// target is awake\nif (_target getVariable [\"ACE_isUnconscious\", false]) exitWith {false};\n\n// has secondary weapon equipped\nif !(_weapon in weapons _target) exitWith {false};\n\n// check if the target really needs to be reloaded\nif (count secondaryWeaponMagazine _target > 0) exitWith {false};\n\n// check if the launcher is compatible\nif (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(enabled)) == 0) exitWith {false};\n\n// check if the magazine compatible with targets launcher\n_magazine in ([_unit, _weapon] call FUNC(getLoadableMissiles))\n",
        "functionName": "ace_reloadlaunchers_fnc_canLoad"
      },
      {
        "fileName": "fnc_getLoadableMissiles.sqf",
        "content": "/*\n * Author: commy2\n * Return all magazine types from reloaders inventory that are compatible with given weapon.\n *\n * Arguments:\n * 0: Unit to to the reload <OBJECT>\n * 1: A launcher <OBJECT>\n *\n * Return Value:\n * Reloable magazines <ARRAY>\n *\n * Example:\n * [bob, launcher] call ace_reloadlaunchers_fnc_getLoadableMissiles\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\nTRACE_2(\"params\",_unit,_weapon);\n\n// get available magazines of reloader, Note: \"magazines\" does not include currently loaded magazines\nprivate _magazines = magazines _unit;\n\n// case sensitvity\n_magazines = _magazines apply {toLower _x};\n\n// get reloaders magazine types compatible with targets launcher. No duplicates.\ngetArray (configFile >> \"CfgWeapons\" >> _weapon >> \"magazines\") select {toLower _x in _magazines} // return\n",
        "functionName": "ace_reloadlaunchers_fnc_getLoadableMissiles"
      },
      {
        "fileName": "fnc_load.sqf",
        "content": "/*\n * Author: commy2\n * Reload a launcher\n *\n * Arguments:\n * 0: Unit with magazine <OBJECT>\n * 1: Unit with launcher <OBJECT>\n * 2: weapon name <STRING>\n * 3: missile name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"weapon\", \"missile\"] call ace_reloadlaunchers_fnc_load\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_weapon\", \"_magazine\"];\nTRACE_4(\"params\",_unit,_target,_weapon,_magazine);\n\nprivate _reloadTime = if (isNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(buddyReloadTime))) then {\n    getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(buddyReloadTime))\n} else {\n    2.5\n};\n\n// do animation\n[_unit] call EFUNC(common,goKneeling);\n\n// show progress bar\n\nprivate _onSuccess =  {\n    (_this select 0 select 0) removeMagazine (_this select 0 select 3);\n    [QGVAR(reloadLauncher), _this select 0, _this select 0 select 1] call CBA_fnc_targetEvent;\n\n    [localize LSTRING(LauncherLoaded)] call DEFUNC(common,displayTextStructured);\n};\n\nprivate _onFailure = {\n    [localize ELSTRING(common,ActionAborted)] call DEFUNC(common,displayTextStructured);\n};\n\nprivate _condition = {\n    (_this select 0) call DFUNC(canLoad) && {(_this select 0 select 0) distance (_this select 0 select 1) < 4}\n};\n\n[_reloadTime, [_unit, _target, _weapon, _magazine], _onSuccess, _onFailure, localize LSTRING(LoadingLauncher), _condition, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,progressBar);\n",
        "functionName": "ace_reloadlaunchers_fnc_load"
      },
      {
        "fileName": "fnc_reloadLauncher.sqf",
        "content": "/*\n * Author: commy2\n * Reload a launcher\n *\n * Arguments:\n * 0: Unit to do the reloading <OBJECT>\n * 1: Target to rload <OBJECT>\n * 2: weapon name <STRING>\n * 3: missile name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin, \"weapon\", \"missile\"] call ace_reloadlaunchers_fnc_realoadLauncher\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\",\"_target\",\"_weapon\",\"_magazine\"];\nTRACE_4(\"params\",_unit,_target,_weapon,_magazine);\n\n_target selectWeapon _weapon;\n\nif (currentWeapon _target != _weapon) exitWith {};\nif (currentMagazine _target != \"\") exitWith {};\n\n// command is wip, reload time for launchers is not intended.\n_target addWeaponItem [_weapon, _magazine];\n",
        "functionName": "ace_reloadlaunchers_fnc_reloadLauncher"
      }
    ]
  },
  {
    "component": "repair",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[QGVAR(setVehicleDamage), {_this call FUNC(setDamage)}] call CBA_fnc_addEventHandler;\n[QGVAR(setVehicleHitPointDamage), {_this call FUNC(setHitPointDamage)}] call CBA_fnc_addEventHandler;\n\n// wheels\n[QGVAR(setWheelHitPointDamage), {(_this select 0) setHitPointDamage [_this select 1, _this select 2]}] call CBA_fnc_addEventHandler;\n\nif (isServer) then {\n    [\"ace_settingsInitialized\", {\n        TRACE_1(\"ace_settingsInitialized eh\", GVAR(addSpareParts));\n        if (!GVAR(addSpareParts)) exitWith {};\n        if (!([\"ace_cargo\"] call EFUNC(common,isModLoaded))) exitWith {};\n\n        [\"Car\", \"Init\", {[_this select 0, 1, \"ACE_Wheel\"] call FUNC(addSpareParts)}, true, [], true] call CBA_fnc_addClassEventHandler;\n        [\"Tank\", \"Init\", {[_this select 0, 1, \"ACE_Track\"] call FUNC(addSpareParts)}, true, [], true] call CBA_fnc_addClassEventHandler;\n    }] call CBA_fnc_addEventHandler;\n};\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n[\"ACE_RepairItem_Base\", \"killed\", {\n    params [\"_object\"];\n\n    [{deleteVehicle _this}, _object, 5] call CBA_fnc_waitAndExecute;\n}] call CBA_fnc_addClassEventHandler;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addRepairActions.sqf",
        "content": "/*\n * Author: commy2, SilentSpike\n * Checks if the vehicles class already has the actions initialized, otherwise add all available repair options. Calleed from init EH.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle] call ace_repair_fnc_addRepairActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nparams [\"_vehicle\"];\nTRACE_2(\"params\", _vehicle,typeOf _vehicle);\n\nprivate _type = typeOf _vehicle;\n\nprivate _initializedClasses = GETMVAR(GVAR(initializedClasses),[]);\n\n// do nothing if the class is already initialized\nif (_type in _initializedClasses) exitWith {};\n\n// get all hitpoints and selections\n(getAllHitPointsDamage _vehicle) params [[\"_hitPoints\", []], [\"_hitSelections\", []]];\n\n// get hitpoints of wheels with their selections\n([_vehicle] call FUNC(getWheelHitPointsWithSelections)) params [\"_wheelHitPoints\", \"_wheelHitSelections\"];\n\nprivate _hitPointsAddedNames = [];\nprivate _hitPointsAddedStrings = [];\nprivate _hitPointsAddedAmount = [];\nprivate _processedHitpoints = [];\nprivate _icon = QPATHTOF(ui\\repair_0_ca.paa);\n\n{\n    private _selection = _x;\n    private _hitpoint = _hitPoints select _forEachIndex;\n\n    if (_selection in _wheelHitSelections) then {\n        // Wheels should always be unique\n        if (_hitpoint in _processedHitpoints) exitWith {TRACE_3(\"Duplicate Wheel\",_hitpoint,_forEachIndex,_selection);};\n\n        private _position = compile format [\"_target selectionPosition ['%1', 'HitPoints'];\", _selection];\n\n        TRACE_3(\"Adding Wheel Actions\",_hitpoint,_forEachIndex,_selection);\n\n        // An action to remove the wheel is required\n        private _name = format [\"Remove_%1_%2\", _forEachIndex, _hitpoint];\n        private _text = localize LSTRING(RemoveWheel);\n        private _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"RemoveWheel\"] call DFUNC(canRepair)};\n        private _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"RemoveWheel\"] call DFUNC(repair)};\n        private _action = [_name, _text, _icon, _statement, _condition, {}, [_hitpoint], _position, 2, nil, FUNC(modifySelectionInteraction)] call EFUNC(interact_menu,createAction);\n        [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\n\n        // An action to replace the wheel is required\n        _name = format [\"Replace_%1_%2\", _forEachIndex, _hitpoint];\n        _text = localize LSTRING(ReplaceWheel);\n        _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"ReplaceWheel\"] call DFUNC(canRepair)};\n        _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"ReplaceWheel\"] call DFUNC(repair)};\n        _action = [_name, _text, _icon, _statement, _condition, {}, [_hitpoint], _position, 2] call EFUNC(interact_menu,createAction);\n        [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\n    } else {\n        //Skip glass hitpoints\n        if (((toLower _hitPoint) find \"glass\") != -1) exitWith {\n            TRACE_3(\"Skipping Glass\",_hitpoint,_forEachIndex,_selection);\n        };\n        // Empty selections don't exist\n        // Empty hitpoints don't contain enough information\n        if (_selection isEqualTo \"\") exitWith { TRACE_3(\"Selection Empty\",_hitpoint,_forEachIndex,_selection); };\n        if (_hitpoint isEqualTo \"\") exitWith { TRACE_3(\"Hitpoint Empty\",_hitpoint,_forEachIndex,_selection); };\n        //Depends hitpoints shouldn't be modified directly (will be normalized)\n        // Biki: Clearing 'depends' in case of inheritance cannot be an empty string (rpt warnings), but rather a \"0\" value.\n        if (!((getText (configFile >> \"CfgVehicles\" >> _type >> \"HitPoints\" >> _hitpoint >> \"depends\")) in [\"\", \"0\"])) exitWith {\n            TRACE_3(\"Skip Depends\",_hitpoint,_forEachIndex,_selection);\n        };\n\n        // Associated hitpoints can be grouped via config to produce a single repair action\n        private _groupsConfig = configFile >> \"CfgVehicles\" >> _type >> QGVAR(hitpointGroups);\n        private _childHitPoint = false;\n        if (isArray _groupsConfig) then {\n            {\n                {\n                    if (_hitpoint == _x) exitWith {\n                        _childHitPoint = true;\n                    };\n                } forEach (_x select 1);\n            } forEach (getArray _groupsConfig);\n        };\n        // If the current selection is associated with a child hitpoint, then skip\n        if (_childHitPoint) exitWith { TRACE_3(\"childHitpoint\",_hitpoint,_forEachIndex,_selection); };\n\n        // Find the action position\n        private _position = compile format [\"_target selectionPosition ['%1', 'HitPoints'];\", _selection];\n\n        // Custom position can be defined via config for associated hitpoint\n        private _positionsConfig = configFile >> \"CfgVehicles\" >> _type >> QGVAR(hitpointPositions);\n        if (isArray _positionsConfig) then {\n            {\n                _x params [\"_hit\", \"_pos\"];\n                if (_hitpoint == _hit) exitWith {\n                    if (_pos isEqualType []) exitWith {\n                        _position = _pos; // Position in model space\n                    };\n                    if (_pos isEqualType \"\") exitWith {\n                        _position = compile format [\"_target selectionPosition ['%1', 'HitPoints'];\", _pos];\n                    };\n                    ERROR_3(\"Invalid custom position %1 of hitpoint %2 in vehicle %3.\",_position,_hitpoint,_type);\n                };\n            } forEach (getArray _positionsConfig);\n        };\n\n        // Prepair the repair action\n        private _name = format [\"Repair_%1_%2\", _forEachIndex, _selection];\n\n        // Find localized string and track those added for numerization\n        ([_hitpoint, \"%1\", _hitpoint, [_hitPointsAddedNames, _hitPointsAddedStrings, _hitPointsAddedAmount]] call FUNC(getHitPointString)) params [\"_text\", \"_trackArray\"];\n        _hitPointsAddedNames = _trackArray select 0;\n        _hitPointsAddedStrings = _trackArray select 1;\n        _hitPointsAddedAmount = _trackArray select 2;\n\n        if (_hitpoint in TRACK_HITPOINTS) then {\n            // Tracks should always be unique\n            if (_hitpoint in _processedHitpoints) exitWith {TRACE_3(\"Duplicate Track\",_hitpoint,_forEachIndex,_selection);};\n            if (_hitpoint == \"HitLTrack\") then {\n                _position = compile format [\"private _return = _target selectionPosition ['%1', 'HitPoints']; _return set [1, 0]; _return\", _selection];\n            } else {\n                _position = compile format [\"private _return = _target selectionPosition ['%1', 'HitPoints']; _return set [1, 0]; _return\", _selection];\n            };\n            TRACE_4(\"Adding RepairTrack\",_hitpoint,_forEachIndex,_selection,_text);\n            private _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"RepairTrack\"] call DFUNC(canRepair)};\n            private _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"RepairTrack\"] call DFUNC(repair)};\n            private _action = [_name, _text, _icon, _statement, _condition, {}, [_hitpoint], _position, 4] call EFUNC(interact_menu,createAction);\n            [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\n        } else {\n            TRACE_4(\"Adding MiscRepair\",_hitpoint,_forEachIndex,_selection,_text);\n            private _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"MiscRepair\"] call DFUNC(canRepair)};\n            private _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"MiscRepair\"] call DFUNC(repair)};\n            private _action = [_name, _text, _icon, _statement, _condition, {}, [_forEachIndex], _position, 5] call EFUNC(interact_menu,createAction);\n            // Put inside main actions if no other position was found above\n            if (_position isEqualTo [0,0,0]) then {\n                [_type, 0, [\"ACE_MainActions\", QGVAR(Repair)], _action] call EFUNC(interact_menu,addActionToClass);\n            } else {\n                [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\n            };\n        };\n\n        _processedHitPoints pushBack _hitPoint;\n    };\n} forEach _hitSelections;\n\nprivate _condition = {[_this select 1, _this select 0, \"\", \"fullRepair\"] call DFUNC(canRepair)};\nprivate _statement = {[_this select 1, _this select 0, \"\", \"fullRepair\"] call DFUNC(repair)};\nprivate _action = [QGVAR(fullRepair), localize LSTRING(fullRepair), _icon, _statement, _condition, {}, [], \"\", 4] call EFUNC(interact_menu,createAction);\n[_type, 0, [\"ACE_MainActions\", QGVAR(Repair)], _action] call EFUNC(interact_menu,addActionToClass);\n\n// set class as initialized\n_initializedClasses pushBack _type;\n\nSETMVAR(GVAR(initializedClasses),_initializedClasses);\n",
        "functionName": "ace_repair_fnc_addRepairActions"
      },
      {
        "fileName": "fnc_addSpareParts.sqf",
        "content": "/*\n * Author: Jonpas\n * Adds spare parts to the vehicle. Before SettingsInitialized only collect for later execution.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Amount <NUMBER> (default: 1)\n * 2: Spare Part Classname <STRING> (default: \"\")\n * 3: Force (add even if setting is disabled) <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle] call ace_repair_fnc_addSpareParts\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", [\"_amount\", 1], [\"_part\", \"\"], [\"_force\", false]];\nTRACE_2(\"params\",_vehicle,_amount);\n\n// Exit if ace_cargo is not loaded or no part supplied\nif (!([\"ace_cargo\"] call EFUNC(common,isModLoaded)) || {_part == \"\"}) exitWith {};\n\n// Collect until SettingsInitialized\nif (!EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(addSpareParts), _this];\n};\n\n// Exit if not forced and add spare parts is disabled (after settings initted to make sure it really is)\nif (!_force && !GVAR(addSpareParts)) exitWith {};\n\n// Load\n[{\n    [\"ace_addCargo\", _this] call CBA_fnc_localEvent;\n}, [_part, _vehicle, _amount]] call CBA_fnc_execNextFrame;\n",
        "functionName": "ace_repair_fnc_addSpareParts"
      },
      {
        "fileName": "fnc_canMiscRepair.sqf",
        "content": "/*\n * Author: Jonpas\n * Check if misc repair action can be done, called from callbackSuccess.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint INDEX <NUMBER>\n *\n * Return Value:\n * Can Misc Repair <BOOL>\n *\n * Example:\n * [unit, vehicle, 5] call ace_repair_fnc_canMiscRepair\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_hitPointIndex\"];\n\n(getAllHitPointsDamage _target) params [\"_allHitPoints\", \"\", \"_allHitPointDamages\"];\n\nif !([_caller, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotSwimming\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n// Get hitpoint groups if available\nprivate _hitpointGroupConfig = configFile >> \"CfgVehicles\" >> typeOf _target >> QGVAR(hitpointGroups);\nprivate _hitpointGroup = [];\nif (isArray _hitpointGroupConfig) then {\n    private _hitPointClassname = _allHitPoints select _hitPointIndex;\n\n    // Retrieve hitpoint subgroup if current hitpoint is main hitpoint of a group\n    {\n        _x params [\"_masterHitpoint\", \"_subHitArray\"];\n        // Exit using found hitpoint group if this hitpoint is leader of any\n        if (_masterHitpoint == _hitPointClassname) exitWith {\n            {\n                private _subHitIndex = _allHitPoints find _x;\n                if (_subHitIndex == -1) then {\n                    ERROR(\"Hitpoint Not Found\");\n                } else {\n                    _hitpointGroup pushBack _subHitIndex;\n                };\n            } forEach _subHitArray;\n        };\n    } forEach (getArray _hitpointGroupConfig);\n};\n\n// Add current hitpoint to the group\n_hitpointGroup pushBack _hitPointIndex;\n\n// Get post repair damage\nprivate _postRepairDamage = [_caller] call FUNC(getPostRepairDamage);\n\n// Return true if damage can be repaired on any hitpoint in the group, else false\nprivate _return = false;\n{\n    if ((_allHitPointDamages select _x) > _postRepairDamage) exitWith {\n        _return = true;\n    };\n} forEach _hitpointGroup;\n\n_return\n",
        "functionName": "ace_repair_fnc_canMiscRepair"
      },
      {
        "fileName": "fnc_canRemove.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit can remove given wheel/track of the vehicle.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n *\n * Return Value:\n * Can Remove <BOOL>\n *\n * Example:\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canRemove\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\nTRACE_3(\"params\",_unit,_target,_hitPoint);\n\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\nalive _target && {_target getHitPointDamage _hitPoint < 1}\n",
        "functionName": "ace_repair_fnc_canRemove"
      },
      {
        "fileName": "fnc_canRepair.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if the repair action can be performed.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\n * 3: Repair Action Classname <STRING>\n *\n * Return Value:\n * Can Repair <BOOL>\n *\n * Example:\n * [player, car, \"HitHull\", \"MiscRepair\"] call ace_repair_fnc_canRepair\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_hitPoint\", \"_className\"];\nTRACE_4(\"params\",_caller,_target,_hitPoint,_className);\n\nprivate _config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\nif !(isClass _config) exitWith {false}; // or go for a default?\n\n// if(isEngineOn _target) exitWith {false}; // Ignore here so action shows, then exit and show warning when selected #3348\n\nprivate _engineerRequired = if (isNumber (_config >> \"requiredEngineer\")) then {\n    getNumber (_config >> \"requiredEngineer\");\n} else {\n    // Check for required class\n    if (isText (_config >> \"requiredEngineer\")) exitWith {\n        missionNamespace getVariable [(getText (_config >> \"requiredEngineer\")), 0];\n    };\n    0;\n};\nif !([_caller, _engineerRequired] call FUNC(isEngineer)) exitWith {false};\n\n//Items can be an array of required items or a string to a ACE_Setting array\nprivate _items = if (isArray (_config >> \"items\")) then {\n    getArray (_config >> \"items\");\n} else {\n    private _settingName = getText (_config >> \"items\");\n    private _settingItemsArray = getArray (configFile >> \"ACE_Settings\" >> _settingName >> \"_values\");\n    if ((isNil _settingName) || {(missionNamespace getVariable _settingName) >= (count _settingItemsArray)}) exitWith {\n        ERROR(\"bad setting\"); [\"BAD\"]\n    };\n    _settingItemsArray select (missionNamespace getVariable _settingName);\n};\nif (count _items > 0 && {!([_caller, _items] call FUNC(hasItems))}) exitWith {false};\n\nprivate _return = true;\nif (getText (_config >> \"condition\") != \"\") then {\n    private _condition = getText (_config >> \"condition\");\n    if (isNil _condition) then {\n        _condition = compile _condition;\n    } else {\n        _condition = missionNamespace getVariable _condition;\n    };\n    if (_condition isEqualType false) then {\n        _return = _condition;\n    } else {\n        _return = [_caller, _target, _hitPoint, _className] call _condition;\n    };\n};\n\nif (!_return) exitWith {false};\n\n// private _vehicleStateCondition = if (isText(_config >> \"vehicleStateCondition\")) then {\n    // missionNamespace getVariable [getText(_config >> \"vehicleStateCondition\"), 0]\n// } else {\n    // getNumber(_config >> \"vehicleStateCondition\")\n// };\n// if (_vehicleStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitWith {false};\n\nprivate _repairLocations = getArray (_config >> \"repairLocations\");\nif (!(\"All\" in _repairLocations)) then {\n    private _repairFacility = {([_caller] call FUNC(isInRepairFacility)) || ([_target] call FUNC(isInRepairFacility))};\n    private _repairVeh = {([_caller] call FUNC(isNearRepairVehicle)) || ([_target] call FUNC(isNearRepairVehicle))};\n    {\n        if (_x == \"field\") exitWith {_return = true;};\n        if (_x == \"RepairFacility\" && _repairFacility) exitWith {_return = true;};\n        if (_x == \"RepairVehicle\" && _repairVeh) exitWith {_return = true;};\n        if !(isNil _x) exitWith {\n            private _val = missionNamespace getVariable _x;\n            if (_val isEqualType 0) then {\n                _return = switch (_val) do {\n                    case 0: {true}; //useAnywhere\n                    case 1: {call _repairVeh}; //repairVehicleOnly\n                    case 2: {call _repairFacility}; //repairFacilityOnly\n                    case 3: {(call _repairFacility) || {call _repairVeh}}; //vehicleAndFacility\n                    default {false}; //Disabled\n                };\n            };\n        };\n    } forEach _repairLocations;\n};\nif (!_return) exitWith {false};\n\n//Check that there are required objects nearby\nprivate _requiredObjects = getArray (_config >> \"claimObjects\");\nif (!(_requiredObjects isEqualTo [])) then {\n    private _objectsAvailable = [_caller, 5, _requiredObjects] call FUNC(getClaimObjects);\n    if (_objectsAvailable isEqualTo []) then {\n            TRACE_2(\"Missing Required Objects\",_requiredObjects,_objectsAvailable);\n        _return = false\n    };\n};\n\n_return && {alive _target};\n",
        "functionName": "ace_repair_fnc_canRepair"
      },
      {
        "fileName": "fnc_canRepairTrack.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit can replace given track of the vehicle.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canRepairTrack\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\nTRACE_3(\"params\",_unit,_target,_hitPoint);\n\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n//check for a near track is handled by claimObjects[] config\n\n(_target getHitPointDamage _hitPoint > 0)\n",
        "functionName": "ace_repair_fnc_canRepairTrack"
      },
      {
        "fileName": "fnc_canReplaceTrack.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit can replace given track of the vehicle.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canReplaceTrack\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\nTRACE_3(\"params\",_unit,_target,_hitPoint);\n\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n//check for a near track object is handled by claimObjects[] config\n\n(_target getHitPointDamage _hitPoint >= 1)\n",
        "functionName": "ace_repair_fnc_canReplaceTrack"
      },
      {
        "fileName": "fnc_canReplaceWheel.sqf",
        "content": "/*\n * Author: commy2\n * Check if the unit can replace given wheel of the vehicle.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canReplaceWheel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\nTRACE_3(\"params\",_unit,_target,_hitPoint);\n\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n//check for GVAR(engineerSetting_Wheel) is handeled by requiredEngineer config\n//check for a near wheel object is handled by claimObjects[] config\n\n(_target getHitPointDamage _hitPoint >= 1)\n",
        "functionName": "ace_repair_fnc_canReplaceWheel"
      },
      {
        "fileName": "fnc_doFullRepair.sqf",
        "content": "/*\n * Author: Glowbal\n * Fully repairs vehicle.\n *\n * Arguments:\n * 0: Unit that does the repairing (not used) <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle] call ace_repair_fnc_doFullRepair\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"\", \"_vehicle\"];\nTRACE_1(\"params\",_vehicle);\n\n_vehicle setDamage 0;\n",
        "functionName": "ace_repair_fnc_doFullRepair"
      },
      {
        "fileName": "fnc_doRemoveTrack.sqf",
        "content": "/*\n * Author: commy2\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_doRemoveTrack\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\"];\nTRACE_3(\"params\",_unit,_vehicle,_hitPoint);\n\n// get current hitpoint damage\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\n\n// can't remove destroyed or already removed wheel\nif (_hitPointDamage >= 1) exitWith {};\n\n// don't die by spawning / moving the wheel\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\n\n// spawn track\nprivate _newTrack = [\"ACE_Track\", getPosASL _unit, _hitPointDamage] call FUNC(spawnObject);\nTRACE_2(\"new track created\",_newTrack,damage _newTrack);\n\n// raise event to set the new hitpoint damage\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, 1], _vehicle] call CBA_fnc_targetEvent;\n\n// display text message if enabled\nif (GVAR(DisplayTextOnRepair)) then {\n    [localize LSTRING(RemovedTrack)] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_repair_fnc_doRemoveTrack"
      },
      {
        "fileName": "fnc_doRemoveWheel.sqf",
        "content": "/*\n * Author: commy2\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_doRemoveWheel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\"];\nTRACE_3(\"params\",_unit,_vehicle,_hitPoint);\n\n// get current hitpoint damage\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\n\n// can't remove destroyed or already removed wheel\nif (_hitPointDamage >= 1) exitWith {};\n\n// don't die by spawning / moving the wheel\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\n\n// spawn wheel\nprivate _newWheel = [\"ACE_Wheel\", getPosASL _unit, _hitPointDamage] call FUNC(spawnObject);\nTRACE_2(\"new wheel created\",_newWheel,damage _newWheel);\n\n// raise event to set the new hitpoint damage\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, 1], _vehicle] call CBA_fnc_targetEvent;\n\n// display text message if enabled\nif (GVAR(DisplayTextOnRepair)) then {\n    [localize LSTRING(RemovedWheel)] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_repair_fnc_doRemoveWheel"
      },
      {
        "fileName": "fnc_doRepair.sqf",
        "content": "/*\n * Author: commy2\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpointIndex <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, 6, \"MiscRepair\"] call ace_repair_fnc_doRepair\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_hitPointIndex\"];\nTRACE_3(\"params\",_unit,_vehicle,_hitPointIndex);\n\nprivate _postRepairDamageMin = [_unit] call FUNC(getPostRepairDamage);\n\n(getAllHitPointsDamage _vehicle) params [\"_allHitPoints\"];\nprivate _hitPointClassname = _allHitPoints select _hitPointIndex;\n\n// get current hitpoint damage\nprivate _hitPointCurDamage = _vehicle getHitIndex _hitPointIndex;\n\n// repair a max of 0.5, don't use negative values for damage\nprivate _hitPointNewDamage = (_hitPointCurDamage - 0.5) max _postRepairDamageMin;\n\nif (_hitPointNewDamage < _hitPointCurDamage) then {\n    // raise event to set the new hitpoint damage\n    TRACE_3(\"repairing main point\", _vehicle, _hitPointIndex, _hitPointNewDamage);\n    [QGVAR(setVehicleHitPointDamage), [_vehicle, _hitPointIndex, _hitPointNewDamage], _vehicle] call CBA_fnc_targetEvent;\n    _hitPointCurDamage = _hitPointNewDamage;\n};\n\n// Get hitpoint groups if available\nprivate _hitpointGroupConfig = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> QGVAR(hitpointGroups);\nif (isArray _hitpointGroupConfig) then {\n    // Retrieve hitpoint subgroup if current hitpoint is main hitpoint of a group\n    {\n        _x params [\"_masterHitpoint\", \"_subHitArray\"];\n        // Exit using found hitpoint group if this hitpoint is leader of any\n        if (_masterHitpoint == _hitPointClassname) exitWith {\n            {\n                private _subHitIndex = _allHitPoints find _x; //convert hitpoint classname to index\n                if (_subHitIndex == -1) then {\n                    ERROR_2(\"Invalid hitpoint %1 in hitpointGroups of %2\",_x,_vehicle);\n                } else {\n                    private _subPointCurDamage = _vehicle getHitIndex _hitPointIndex;\n                    private _subPointNewDamage = (_subPointCurDamage - 0.5) max _postRepairDamageMin;\n                    if (_subPointNewDamage < _subPointCurDamage) then {\n                        TRACE_3(\"repairing sub point\", _vehicle, _subHitIndex, _subPointNewDamage);\n                        [QGVAR(setVehicleHitPointDamage), [_vehicle, _subHitIndex, _subPointNewDamage], _vehicle] call CBA_fnc_targetEvent;\n                    };\n                };\n            } forEach _subHitArray;\n        };\n    } forEach (getArray _hitpointGroupConfig);\n};\n\n// display text message if enabled\nif (GVAR(DisplayTextOnRepair)) then {\n    // Find localized string\n    private _textLocalized = localize ([LSTRING(RepairedHitPointFully), LSTRING(RepairedHitPointPartially)] select (_hitPointCurDamage > 0));\n    private _textDefault = localize ([LSTRING(RepairedFully), LSTRING(RepairedPartially)] select (_hitPointCurDamage > 0));\n    ([_hitPointClassname, _textLocalized, _textDefault] call FUNC(getHitPointString)) params [\"_text\"];\n\n    // Display text\n    [_text] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_repair_fnc_doRepair"
      },
      {
        "fileName": "fnc_doRepairTrack.sqf",
        "content": "/*\n * Author: commy2\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n * 3: Repair Action Classname (Not used) <STRING>\n * 4: (Not used) <ARRAY>\n * 5: (Not used) <ARRAY>\n * 6: Required Repair Objects <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\", \"RepairTrack\", [], [], [aTrack]] call ace_repair_fnc_doRepairTrack\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\", \"\", \"\", \"\", \"_claimedObjects\"];\nTRACE_4(\"params\",_unit,_vehicle,_hitPoint,_claimedObjects);\n\n_claimedObjects params [[\"_track\", objNull]];\nif ((isNull _track) || {!([_unit, _track, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith))}) exitWith {\n    ERROR_1(\"Bad Track\", _claimedObjects);\n};\n\n// can't use a destroyed track\nif ((damage _track) >= 1) exitWith {};\n\n// get current hitpoint damage\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\nprivate _damageRepaired = (1 - (damage _track)) / 4; // require 4 tracks to fully replace one side\n\n// don't die by spawning / moving the wheel\n_hitPointDamage = (_hitPointDamage - _damageRepaired) min 0;\ndeleteVehicle _track;\n\n// raise event to set the new hitpoint damage\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, _hitPointDamage], _vehicle] call CBA_fnc_targetEvent;\n\n// display text message if enabled\nif (GVAR(DisplayTextOnRepair)) then {\n    [LSTRING(ReplacedTrack)] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_repair_fnc_doRepairTrack"
      },
      {
        "fileName": "fnc_doReplaceTrack.sqf",
        "content": "/*\n * Author: commy2\n * Replaces a track.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n * 3: Repair Action Classname (Not used) <STRING>\n * 4: (Not used) <ARRAY>\n * 5: (Not used) <ARRAY>\n * 6: Required Repair Objects <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\", \"ReplaceTrack\", [], [], [aTrack]] call ace_repair_fnc_doReplaceTrack\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\", \"\", \"\", \"\", \"_claimedObjects\"];\nTRACE_4(\"params\",_unit,_vehicle,_hitPoint,_claimedObjects);\n\n_claimedObjects params [[\"_track\", objNull]];\nif ((isNull _track) || {!([_unit, _track, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith))}) exitWith {\n    ERROR_1(\"Bad Track\", _claimedObjects);\n};\n\n// get current hitpoint damage\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\n\n// can't replace not destroyed wheel\nif (_hitPointDamage < 1) exitWith {};\n\n// get track's damage\nprivate _newHitPointDamage = damage _track;\n\n// can't replace with a destroyed wheel\nif (_newHitPointDamage >= 1) exitWith {};\n\ndeleteVehicle _track;\n\n// raise event to set the new hitpoint damage\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, _newHitPointDamage], _vehicle] call CBA_fnc_targetEvent;\n\n// display text message if enabled\nif (GVAR(DisplayTextOnRepair)) then {\n    [LSTRING(ReplacedTrack)] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_repair_fnc_doReplaceTrack"
      },
      {
        "fileName": "fnc_doReplaceWheel.sqf",
        "content": "/*\n * Author: commy2\n * Repairs a vehicle's wheel with a ACE_wheel spare part object.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint <STRING>\n * 3: Repair Action Classname (Not used) <STRING>\n * 4: (Not used) <ARRAY>\n * 5: (Not used) <ARRAY>\n * 6: Required Repair Objects <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit, vehicle, \"hitpoint\", \"ReplaceWheel\", [], [], [aWheel]] call ace_repair_fnc_doReplaceWheel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\", \"\", \"\", \"\", \"_claimedObjects\"];\nTRACE_4(\"params\",_unit,_vehicle,_hitPoint,_claimedObjects);\n\n_claimedObjects params [[\"_wheel\", objNull]];\nif ((isNull _wheel) || {!([_unit, _wheel, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith))}) exitWith {\n    WARNING_1(\"Bad Claimed Wheel\", _claimedObjects);\n};\n\n// get current hitpoint damage\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\n\n// can't replace not destroyed wheel\nif (_hitPointDamage < 1) exitWith {};\n\n// get replacement wheel's damage\nprivate _newHitPointDamage = damage _wheel;\n\n// can't replace a destroyed wheel\nif (_newHitPointDamage >= 1) exitWith {};\n\ndeleteVehicle _wheel;\n\n// raise event to set the new hitpoint damage\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, _newHitPointDamage], _vehicle] call CBA_fnc_targetEvent;\n\n// display text message if enabled\nif (GVAR(DisplayTextOnRepair)) then {\n    [LSTRING(ReplacedWheel)] call EFUNC(common,displayTextStructured);\n};\n",
        "functionName": "ace_repair_fnc_doReplaceWheel"
      },
      {
        "fileName": "fnc_getClaimObjects.sqf",
        "content": "/*\n * Author: PabstMirror\n * Returns array of required nearby repair objects (wheels/tracks).\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Max range to seach from unit (meters) <NUMBER>\n * 2: Array of arrays of classnames <ARRAY>\n *\n * Return Value:\n * Array of objects, or [] if not all available <ARRAY>\n *\n * Example:\n * [player, 5, [[\"Ace_Track\"]]] call ace_repair_fnc_getClaimObjects\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_maxRange\", \"_objectsToClaim\"];\nTRACE_3(\"params\",_unit,_maxRange,_objectsToClaim);\n\nprivate _return = [];\n\n{\n    private _requiredList = _x; //eg [\"ace_track\", \"ace_track\"]\n    private _ableToAquire = []; //will be array of ojbects\n    {\n        private _nearObjects = nearestObjects [_unit, [_x], _maxRange];\n        private _canClaimObject = objNull;\n        {\n            if ((!(_x in _ableToAquire))\n                    && {[_unit, _x, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)}\n                    &&{(damage _x) < 1}\n                    ) exitWith { _canClaimObject = _x; };\n        } forEach _nearObjects;\n        if (isNull _canClaimObject) exitWith {};\n        _ableToAquire pushBack _canClaimObject;\n    } forEach _x;\n    TRACE_2(\"Check required equals available\",_requiredList,_ableToAquire);\n    if ((count _ableToAquire) == (count _requiredList)) exitWith {_return = _ableToAquire};\n    false\n} count _objectsToClaim;\n\n_return\n",
        "functionName": "ace_repair_fnc_getClaimObjects"
      },
      {
        "fileName": "fnc_getHitPointString.sqf",
        "content": "/*\n * Author: Jonpas\n * Finds the localized string of the given hitpoint name or uses default text if none found.\n *\n * Arguments:\n * 0: Hitpoint <STRING>\n * 1: Localized Text <STRING>\n * 2: Default Text <STRING>\n * 3: Track Added Hitpoints <BOOL> (default: false)\n *\n * Return Value:\n * 0: Text <STRING>\n * 1: Added Hitpoint <NUMBER> (default: [])\n *\n * Example:\n * [\"HitFuel\", \"Repairing %1 ...\", \"Repairing HitFuel\"] call ace_repair_fnc_getHitPointString\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_hitPoint\", \"_textLocalized\", \"_textDefault\", [\"_trackArray\", []]];\n\nprivate _track = (count _trackArray > 0);\nprivate _trackNames = [];\nprivate _trackStrings = [];\nprivate _trackAmount = [];\n\nif (_track) then {\n    _trackNames = _trackArray select 0;\n    _trackStrings = _trackArray select 1;\n    _trackAmount = _trackArray select 2;\n};\n\n// Prepare first part of the string from stringtable\nprivate _text = LSTRING(Hit);\n\n// Remove \"Hit\" from hitpoint name if one exists\nprivate _toFind = if ((toLower _hitPoint) find \"hit\" == 0) then {\n    [_hitPoint, 3] call CBA_fnc_substr\n} else {\n    _hitPoint\n};\n\n// Loop through always shorter part of the hitpoint name to find the string from stringtable\nfor \"_i\" from 0 to (count _hitPoint) do {\n    if (_track) then {\n        // Loop through already added hitpoints and save index\n        private _trackIndex = -1;\n        {\n            if (_x == _toFind) exitWith {\n                _trackIndex = _forEachIndex;\n            };\n        } forEach _trackNames;\n\n        // Use already added hitpoint if one found above and numerize\n        if (_trackIndex != -1) exitWith {\n            _text = localize (_trackStrings select _trackIndex) + \" \" + str(_trackAmount select _trackIndex);\n            _trackAmount set [_trackIndex, (_trackAmount select _trackIndex) + 1]; // Set amount\n            TRACE_2(\"Same hitpoint found\",_toFind,_trackNames);\n        };\n    };\n\n\n    // Localize if localization found\n    private _combinedString = _text + _toFind;\n    if (isLocalized _combinedString) exitWith {\n        _text = format [_textLocalized, localize _combinedString];\n        TRACE_1(\"Hitpoint localized\",_toFind);\n\n        if (_track) then {\n            // Add hitpoint to the list\n            _trackNames pushBack _toFind;\n            _trackStrings pushBack _combinedString;\n            _trackAmount pushBack 2;\n        };\n    };\n\n    // Cut off one character\n    _toFind = [_toFind, 0, count _toFind - 1] call CBA_fnc_substr;\n};\n\n// Don't display part name if no string is found in stringtable\nif (_text == LSTRING(Hit)) then {\n    if (_hitPoint != \"\") then { LOG_1(\"Hitpoint [%1] - could not be localized\", _hitPoint); };\n    _text = _textDefault;\n};\n\n[_text, [_trackNames, _trackStrings, _trackAmount]]\n",
        "functionName": "ace_repair_fnc_getHitPointString"
      },
      {
        "fileName": "fnc_getPostRepairDamage.sqf",
        "content": "/*\n * Author: commy2\n * Returns the damage threshold based on settings and unit type.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n *\n * Return Value:\n * 0: Rpair Damage Threshold <NUMBER>\n *\n * Example:\n * [unit] call ace_repair_fnc_getPostRepairDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\n//If in facility or near vehicle then complete repair of hitpoint:\nif (([_unit] call FUNC(isInRepairFacility) || {[_unit] call FUNC(isNearRepairVehicle)})) exitWith {0};\n\nprivate _class = _unit getVariable [\"ACE_IsEngineer\", getNumber (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"engineer\")];\n//If advanced or more qualified than min, then use engineer threshold:\nif ((_class isEqualTo 2) || {[_unit, GVAR(engineerSetting_Repair) + 1] call FUNC(isEngineer)}) exitWith {\n    (GVAR(repairDamageThreshold_Engineer) min GVAR(repairDamageThreshold))\n};\n\n//Return default threshold:\nGVAR(repairDamageThreshold)\n",
        "functionName": "ace_repair_fnc_getPostRepairDamage"
      },
      {
        "fileName": "fnc_getWheelHitPointsWithSelections.sqf",
        "content": "/*\n * Author: commy2\n * Returns the wheel hitpoints and their selections.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * 0: Wheel hitpoints <ARRAY>\n * 1: Wheel hitpoint selections in model coordinates <ARRAY>\n *\n * Example:\n * [car1] call ace_repair_fnc_getWheelHitPointsWithSelections\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_1(\"params\",_vehicle);\n\n// get the vehicles wheel config\nprivate _wheels = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"Wheels\";\n\n// exit with nothing if the vehicle has no wheels class\nif !(isClass _wheels) exitWith {TRACE_1(\"No Wheels\",_wheels); [[],[]]};\n\n// get all hitpoints and selections\n(getAllHitPointsDamage _vehicle) params [\"_hitPoints\", \"_hitPointSelections\"];\n\n// get all wheels and read selections from config\n_wheels = \"true\" configClasses _wheels;\n\nprivate _wheelHitPoints = [];\nprivate _wheelHitPointSelections = [];\n\n{\n    private _wheelName = configName _x;\n    private _wheelCenter = getText (_x >> \"center\");\n    private _wheelBone = getText (_x >> \"boneName\");\n    private _wheelBoneNameResized = _wheelBone select [0, 9]; //ount \"wheel_X_Y\"; // this is a requirement for physx. Should work for all addon vehicles.\n\n    TRACE_4(\"\",_wheelName,_wheelCenter,_wheelBone,_wheelBoneNameResized);\n\n    private _wheelHitPoint = \"\";\n    private _wheelHitPointSelection = \"\";\n\n    //Commy's orginal method\n    {\n        if ((_wheelBoneNameResized != \"\") && {_x find _wheelBoneNameResized == 0}) exitWith {  // same as above. Requirement for physx.\n            _wheelHitPoint = _hitPoints select _forEachIndex;\n            _wheelHitPointSelection = _hitPointSelections select _forEachIndex;\n            TRACE_2(\"wheel found [Orginal]\", _wheelName, _wheelHitPoint);\n        };\n    } forEach _hitPointSelections;\n\n\n    if (_vehicle isKindOf \"Car\") then {\n        //Backup method, search for the closest hitpoint to the wheel's center selection pos.\n        //Ref #2742 - RHS's HMMWV\n        if (_wheelHitPoint == \"\") then {\n            private _wheelCenterPos = _vehicle selectionPosition _wheelCenter;\n            if (_wheelCenterPos isEqualTo [0,0,0]) exitWith {TRACE_1(\"no center?\",_wheelCenter);};\n\n\n            private _bestDist = 99;\n            private _bestIndex = -1;\n            {\n                if (_x != \"\") then {\n                     //Filter out things that definitly aren't wheeels (#3759)\n                    if ((toLower (_hitPoints select _forEachIndex)) in [\"hitengine\", \"hitfuel\", \"hitbody\"]) exitWith {TRACE_1(\"filter\",_x)};\n                    private _xPos = _vehicle selectionPosition _x;\n                    if (_xPos isEqualTo [0,0,0]) exitWith {};\n                    private _xDist = _wheelCenterPos distance _xPos;\n                    if (_xDist < _bestDist) then {\n                        _bestIndex = _forEachIndex;\n                        _bestDist = _xDist;\n                    };\n                };\n            } forEach _hitPointSelections;\n\n            TRACE_2(\"closestPoint\",_bestDist,_bestIndex);\n            if (_bestIndex != -1) then {\n                _wheelHitPoint = _hitPoints select _bestIndex;\n                _wheelHitPointSelection = _hitPointSelections select _bestIndex;\n                TRACE_2(\"wheel found [Backup]\", _wheelName, _wheelHitPoint);\n            };\n        };\n    };\n\n    if ((_wheelHitPoint != \"\") && {_wheelHitPointSelection != \"\"}) then {\n        _wheelHitPoints pushBack _wheelHitPoint;\n        _wheelHitPointSelections pushBack _wheelHitPointSelection;\n    };\n} forEach _wheels;\n\n[_wheelHitPoints, _wheelHitPointSelections]\n",
        "functionName": "ace_repair_fnc_getWheelHitPointsWithSelections"
      },
      {
        "fileName": "fnc_hasItems.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if the engineer has all items.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Items required <ARRAY>\n *\n * Return Value:\n * Has Items <BOOL>\n *\n * Example:\n * [engineer, [items]] call ace_repair_fnc_hasItems\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_items\"];\nTRACE_2(\"params\",_unit,_items);\n\nprivate _return = true;\n{\n    if ((_x isEqualType []) && {({[_unit, _x] call EFUNC(common,hasItem)} count _x == 0)}) exitWith {\n        _return = false;\n    };\n    if ((_x isEqualType \"\") && {!([_unit, _x] call EFUNC(common,hasItem))}) exitWith {\n        _return = false;\n    };\n} forEach _items;\n\n_return;\n",
        "functionName": "ace_repair_fnc_hasItems"
      },
      {
        "fileName": "fnc_isEngineer.sqf",
        "content": "/*\n * Author: Glowbal, KoffeinFlummi, commy2\n * Check if a unit is any engineer class.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Class <NUMBER> (default: 1)\n *\n * Return Value:\n * Is Engineer Class <BOOL>\n *\n * Example:\n * [unit, 1] call ace_repair_fnc_isEngineer\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_engineerN\", 1]];\nTRACE_2(\"params\",_unit,_engineerN);\n\nprivate _class = _unit getVariable [\"ACE_IsEngineer\", _unit getUnitTrait \"engineer\"];\n\n// This if statement is here for copmatability with the common variant of isEngineer, which requires a bool.\n// We cannot move this function to common because we require the GVAR(engineerSetting_Repair), which only makes sense to include in the repair module.\nif (_class isEqualType false) then {_class = [0, 1] select _class};\n\n_class >= _engineerN;\n",
        "functionName": "ace_repair_fnc_isEngineer"
      },
      {
        "fileName": "fnc_isInRepairFacility.sqf",
        "content": "/*\n * Author: Glowbal\n * Checks if a unit is in a repair facility.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Is inside a repair facility <BOOL>\n *\n * Example:\n * [unit] call ace_repair_fnc_isInRepairFacility\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\nTRACE_1(\"params\",_object);\n\nprivate _position = getPosASL _object;\nprivate _isInBuilding = false;\nprivate _repairFacility = [];\n\nprivate _objects = (lineIntersectsWith [_object modelToWorldVisual [0, 0, (_position select 2)], _object modelToWorldVisual [0, 0, (_position select 2) +10], _object]);\n{\n    if (((typeOf _x) in _repairFacility) || (_x getVariable [\"ACE_isRepairFacility\",0]) > 0) exitWith {\n        _isInBuilding = true;\n    };\n} forEach _objects;\n\nif (!_isInBuilding) then {\n    _objects = position _object nearObjects 7.5;\n    {\n        if (((typeOf _x) in _repairFacility) || (_x getVariable [\"ACE_isRepairFacility\",0]) > 0) exitWith {\n            _isInBuilding = true;\n        };\n    } forEach _objects;\n};\n_isInBuilding;\n",
        "functionName": "ace_repair_fnc_isInRepairFacility"
      },
      {
        "fileName": "fnc_isNearRepairVehicle.sqf",
        "content": "/*\n * Author: KoffeinFlummi\n * Checks if a unit is near an engineering vehicle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Is near engineering vehicle <BOOL>\n *\n * Example:\n * [unit] call ace_repair_fnc_isNearRepairVehicle\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\nTRACE_1(\"params\",_unit);\n\nprivate _nearObjects = nearestObjects [_unit, [\"Air\", \"LandVehicle\", \"Slingload_base_F\"], 20];\n\nprivate _return = false;\n{\n    if ([_x] call FUNC(isRepairVehicle)) exitWith {_return = true;};\n} forEach _nearObjects;\n\n_return;\n",
        "functionName": "ace_repair_fnc_isNearRepairVehicle"
      },
      {
        "fileName": "fnc_isRepairVehicle.sqf",
        "content": "/*\n * Author: Glowbal\n * Check if vehicle is a engineering vehicle.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * Is engineering vehicle <BOOL>\n *\n * Example:\n * [vehicle] call ace_repair_fnc_isRepairVehicle\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_1(\"params\",_vehicle);\n\nif (_vehicle isKindOf \"CAManBase\") exitWith {false};\n\n((_vehicle getVariable [\"ACE_isRepairVehicle\", getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> QGVAR(canRepair))]) > 0);\n",
        "functionName": "ace_repair_fnc_isRepairVehicle"
      },
      {
        "fileName": "fnc_modifyInteraction.sqf",
        "content": "/*\n * Author: PabstMirror\n * Modifies the base interaction point for repair items to show it's current damage.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player <OBJECT>\n * 2: Args <Any>\n * 3: Action Data <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorObject, ace_player, [], []] call ace_repair_fnc_modifyInteraction;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_player\", \"_args\", \"_actionData\"];\nTRACE_4(\"params\",_target,_player,_args,_actionData);\n\n// Interaction dots numbered 0..8, white to red.\n// Convert damage to number (rounding up), so that even slight damage can bee seen\n\nprivate _fileName = format [QPATHTOF(ui\\damage_%1_ca.paa), ceil (linearConversion [0, 1, damage _target, 0, 8, true])];\n_actionData set [2, _fileName];\n",
        "functionName": "ace_repair_fnc_modifyInteraction"
      },
      {
        "fileName": "fnc_modifySelectionInteraction.sqf",
        "content": "/*\n * Author: 654wak654\n * Modifies interaction color of vehicle selection to show it's current damage.\n *\n * Arguments:\n * 0: Target <OBJECT>\n * 1: Player <OBJECT>\n * 2: Args <Any>\n * 3: Action Data <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [cursorObject, ace_player, [], []] call ace_repair_fnc_modifySelectionInteraction;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_target\", \"_player\", \"_args\", \"_actionData\"];\nTRACE_4(\"params\",_target,_player,_args,_actionData);\n\n// Interaction wrenches numbered 0..8, white to red.\n// Convert damage to number (rounding up), so that even slight damage can bee seen\n\nprivate _fileName = format [\n    QPATHTOF(ui\\repair_%1_ca.paa),\n    ceil (linearConversion [0, 1, _target getHitPointDamage (_args select 0), 0, 8, true])\n];\n\n_actionData set [2, _fileName];\n",
        "functionName": "ace_repair_fnc_modifySelectionInteraction"
      },
      {
        "fileName": "fnc_moduleAddSpareParts.sqf",
        "content": "/*\n * Author: Jonpas\n * Adds spare parts to a vehicle.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic] call ace_repair_fnc_moduleAddSpareParts\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif (!isNull _logic) then {\n    private _list = _logic getVariable [\"List\", \"\"];\n    private _part = _logic getVariable [\"Part\", 0];\n    private _amount = _logic getVariable [\"Amount\", 1];\n\n    // Parse list\n    _list = [_list, true, true] call EFUNC(common,parseList);\n\n    // Add synchronized objects to list\n    {\n        _list pushBack _x;\n        nil\n    } count (synchronizedObjects _logic);\n\n    if (_list isEqualTo []) exitWith {};\n\n    TRACE_3(\"Module info parsed\",_list,_part,_amount);\n\n    // Add spare parts\n    {\n        [_x, _amount, _part, true] call FUNC(addSpareParts);\n        false\n    } count _list;\n};\n",
        "functionName": "ace_repair_fnc_moduleAddSpareParts"
      },
      {
        "fileName": "fnc_moduleAssignEngineer.sqf",
        "content": "/*\n * Author: Glowbal\n * Assign an engineer role to a unit.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic] call ace_repair_fnc_moduleAssignEngineer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif (!isNull _logic) then {\n    private _list = _logic getVariable [\"EnableList\", \"\"];\n    private _setting = _logic getVariable [\"role\", 0];\n\n    [_list, \"ACE_IsEngineer\", _setting, true] call EFUNC(common,assignObjectsInList);\n    [synchronizedObjects _logic, \"ACE_IsEngineer\", _setting, true] call EFUNC(common,assignObjectsInList);\n};\n",
        "functionName": "ace_repair_fnc_moduleAssignEngineer"
      },
      {
        "fileName": "fnc_moduleAssignRepairFacility.sqf",
        "content": "/*\n * Author: Glowbal\n * Assign a repair facility.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic] call ace_repair_fnc_moduleAssignRepairFacility\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif (!isNull _logic) then {\n    private _list = _logic getVariable [\"EnableList\", \"\"];\n    private _setting = _logic getVariable [\"role\", 0];\n\n    [_list, \"ACE_isRepairFacility\", _setting, true] call EFUNC(common,assignObjectsInList);\n    [synchronizedObjects _logic, \"ACE_isRepairFacility\", _setting, true] call EFUNC(common,assignObjectsInList);\n };\n",
        "functionName": "ace_repair_fnc_moduleAssignRepairFacility"
      },
      {
        "fileName": "fnc_moduleAssignRepairVehicle.sqf",
        "content": "/*\n * Author: Glowbal\n * Assign a repair vehicle.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic] call ace_repair_fnc_moduleAssignRepairVehicle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif (!isNull _logic) then {\n    private _list = _logic getVariable [\"EnableList\", \"\"];\n    private _setting = _logic getVariable [\"role\", 0];\n\n    [_list, \"ACE_isRepairVehicle\", _setting, true] call EFUNC(common,assignObjectsInList);\n    [synchronizedObjects _logic, \"ACE_isRepairVehicle\", _setting, true] call EFUNC(common,assignObjectsInList);\n};\n",
        "functionName": "ace_repair_fnc_moduleAssignRepairVehicle"
      },
      {
        "fileName": "fnc_moduleRepairSettings.sqf",
        "content": "/*\n * Author: commy2\n * Adjusts repair damage settings.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic] call ace_repair_fnc_moduleRepairSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\n[_logic, QGVAR(engineerSetting_Repair), \"engineerSetting_Repair\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(engineerSetting_Wheel), \"engineerSetting_Wheel\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(consumeItem_ToolKit), \"consumeItem_ToolKit\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(repairDamageThreshold), \"repairDamageThreshold\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(repairDamageThreshold_Engineer), \"repairDamageThreshold_Engineer\"] call EFUNC(common,readSettingFromModule);\n\n\n[_logic, QGVAR(fullRepairLocation), \"fullRepairLocation\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(engineerSetting_fullRepair), \"engineerSetting_fullRepair\"] call EFUNC(common,readSettingFromModule);\n\n[_logic, QGVAR(addSpareParts), \"addSpareParts\"] call EFUNC(common,readSettingFromModule);\n\n[_logic, QGVAR(wheelRepairRequiredItems), \"wheelRepairRequiredItems\"] call EFUNC(common,readSettingFromModule);\n\nINFO(\"Repair Module Initialized.\");\n",
        "functionName": "ace_repair_fnc_moduleRepairSettings"
      },
      {
        "fileName": "fnc_normalizeHitPoints.sqf",
        "content": "/*\n * Author: commy2\n * Used to normalize dependant hitpoints. May overwrite some global variables that are named like hitpoints or \"Total\" though...\n *\n * Arguments:\n * 0: Local Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle] call ace_repair_fnc_normalizeHitPoints\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\nTRACE_2(\"params\",_vehicle, typeOf _vehicle);\n\n// Can't execute all commands if the vehicle isn't local, exit if that's so\nif !(local _vehicle) exitWith {ERROR_1(\"Vehicle Not Local %1\", _vehicle);};\n\n(getAllHitPointsDamage _vehicle) params [[\"_allHitPoints\", []]];\n\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"HitPoints\";\n\nprivate _realHitPoints = [];\nprivate _dependentHitPoints = [];\nprivate _dependentHitPointScripts = [];\n\n// Find dependent hitpoints\n{\n    if ((_x != \"\") && {isClass (_config >> _x)} && {!(_x in _realHitPoints)}) then {\n        _realHitPoints pushBack _x;\n        if (!((getText (_config >> _x >> \"depends\")) in [\"\", \"0\"])) then {\n            _dependentHitPoints pushBack _x;\n            _dependentHitPointScripts pushBack compile getText (_config >> _x >> \"depends\");\n        };\n    };\n} forEach _allHitPoints;\n\nTRACE_2(\"\",_realHitPoints,_dependentHitPoints);\n\n// Don't bother setting variables if no depends on vehicle:\nif (_dependentHitPoints isEqualTo []) exitWith {};\n\n\n// Define global variables\nTotal = damage _vehicle;\n{\n    missionNamespace setVariable [_x, _vehicle getHitPointDamage _x];\n} forEach _realHitPoints;\n\n// apply normalized damage to all dependand hitpoints\n{\n    private _damage = call (_dependentHitPointScripts select _forEachIndex);\n    TRACE_2(\"setting depend hitpoint\", _x, _damage);\n    _vehicle setHitPointDamage [_x, _damage];\n} forEach _dependentHitPoints;\n",
        "functionName": "ace_repair_fnc_normalizeHitPoints"
      },
      {
        "fileName": "fnc_repair_failure.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Glowbal\n * Callback when repair fails.\n *\n * Arguments:\n * 0: Arguments <ARRAY>\n *   0: Unit that does the repairing <OBJECT>\n *   1: Vehicle to repair <OBJECT\n *   2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\n *   3: Repair Action Classname <STRING>\n *   4: None\n *   5: Items available <ARRAY>\n *   6: Claimed Repair Objects <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[unit, vehicle, \"hitpoint\", \"classname\", nil, [items], [aWheel]]] call ace_repair_fnc_repair_failure\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\"];\n_args params [\"_caller\", \"_target\",\"_selectionName\",\"_className\",\"\",\"_usersOfItems\", \"_claimedObjects\"];\nTRACE_5(\"params\",_caller,_target,_selectionName,_className,_usersOfItems);\n\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\n};\nif (vehicle _caller == _caller && {!(_caller call EFUNC(common,isSwimming))}) then {\n    [_caller, _caller getVariable [QGVAR(repairPrevAnimCaller), \"\"], 2] call EFUNC(common,doAnimation);\n};\n_caller setVariable [QGVAR(repairPrevAnimCaller), nil];\n\nprivate _weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnrepair), \"\"]);\nif (_weaponSelect != \"\") then {\n    _caller selectWeapon _weaponSelect;\n} else {\n    _caller action [\"SwitchWeapon\", _caller, _caller, 299];\n};\n\n{\n    (_x select 0) addItem (_x select 1);\n} forEach _usersOfItems;\n\n//Unclaim repair objects:\n{\n    TRACE_2(\"Releasing\", _x, (typeOf _x));\n    [objNull, _x, false] call EFUNC(common,claim);\n} forEach _claimedObjects;\n\n\n// Record specific callback\nprivate _config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\n\nprivate _callback = getText (_config >> \"callbackFailure\");\nif (isNil _callback) then {\n    _callback = compile _callback;\n} else {\n    _callback = missionNamespace getVariable _callback;\n};\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\n\n_args call _callback;\n\n//todo: repair litter?\n",
        "functionName": "ace_repair_fnc_repair_failure"
      },
      {
        "fileName": "fnc_repair_success.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Glowbal\n * Callback when repair completes.\n *\n * Arguments:\n * 0: Arguments <ARRAY>\n *   0: Unit that does the repairing <OBJECT>\n *   1: Vehicle to repair <OBJECT\n *   2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\n *   3: Repair Action Classname <STRING>\n *   4: Items <ARRAY>\n *   5: User of Items <ARRAY>\n *   6: Claimed Repair Objects <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[unit, vehicle, \"hitpoint\", \"classname\", [], [], [aWheel]]] call ace_repair_fnc_repair_success\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_args\"];\n_args params [\"_caller\", \"_target\",\"_selectionName\",\"_className\",\"\",\"\",\"_claimedObjects\"];\nTRACE_4(\"params\",_caller,_target,_selectionName,_className);\n\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\n};\nif (vehicle _caller == _caller && {!(_caller call EFUNC(common,isSwimming))}) then {\n    [_caller, _caller getVariable [QGVAR(repairPrevAnimCaller), \"\"], 2] call EFUNC(common,doAnimation);\n};\n_caller setVariable [QGVAR(repairPrevAnimCaller), nil];\n\nprivate _weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnrepair), \"\"]);\nif (_weaponSelect != \"\") then {\n    _caller selectWeapon _weaponSelect;\n} else {\n    _caller action [\"SwitchWeapon\", _caller, _caller, 299];\n};\n\n//Unclaim repair objects:\n{\n    TRACE_2(\"Releasing\", _x, (typeOf _x));\n    [objNull, _x, false] call EFUNC(common,claim);\n} forEach _claimedObjects;\n\n// Record specific callback\nprivate _config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\n\nprivate _callback = getText (_config >> \"callbackSuccess\");\nif (isNil _callback) then {\n    _callback = compile _callback;\n} else {\n    _callback = missionNamespace getVariable _callback;\n};\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\n\n_args call _callback;\n\n//todo: repair litter?\n",
        "functionName": "ace_repair_fnc_repair_success"
      },
      {
        "fileName": "fnc_repair.sqf",
        "content": "/*\n * Author: Glowbal, KoffeinFlummi\n * Starts the repair process.\n *\n * Arguments:\n * 0: Unit that does the repairing <OBJECT>\n * 1: Vehicle to repair <OBJECT>\n * 2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\n * 3: Repair Action Classname <STRING>\n *\n * Return Value:\n * Succesful Repair Started <BOOL>\n *\n * Example:\n * [unit, vehicle, \"hitpoint\", \"classname\"] call ace_repair_fnc_repair\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_caller\", \"_target\", \"_hitPoint\", \"_className\"];\nTRACE_4(\"params\",_caller,_target,_hitPoint,_className);\n\nprivate _config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\nif !(isClass _config) exitWith {false}; // or go for a default?\n\nprivate _engineerRequired = if (isNumber (_config >> \"requiredEngineer\")) then {\n    getNumber (_config >> \"requiredEngineer\");\n} else {\n    // Check for required class\n    if (isText (_config >> \"requiredEngineer\")) exitWith {\n        missionNamespace getVariable [(getText (_config >> \"requiredEngineer\")), 0];\n    };\n    0;\n};\nif !([_caller, _engineerRequired] call FUNC(isEngineer)) exitWith {false};\n\nif ((isEngineOn _target) && {GVAR(autoShutOffEngineWhenStartingRepair)}) then {\n    [QEGVAR(common,engineOn), [_target, false], _target] call CBA_fnc_targetEvent;\n};\nif ((isEngineOn _target) && {!GVAR(autoShutOffEngineWhenStartingRepair)}) exitWith {\n    [LSTRING(shutOffEngineWarning), 1.5, _caller] call EFUNC(common,displayTextStructured);\n    false\n};\n\n//Items can be an array of required items or a string to a ACE_Setting array\nprivate _items = if (isArray (_config >> \"items\")) then {\n    getArray (_config >> \"items\");\n} else {\n    private _settingName = getText (_config >> \"items\");\n    private _settingItemsArray = getArray (configFile >> \"ACE_Settings\" >> _settingName >> \"_values\");\n    if ((isNil _settingName) || {(missionNamespace getVariable _settingName) >= (count _settingItemsArray)}) exitWith {\n        ERROR(\"bad setting\"); [\"BAD\"]\n    };\n    _settingItemsArray select (missionNamespace getVariable _settingName);\n};\nif (count _items > 0 && {!([_caller, _items] call FUNC(hasItems))}) exitWith {false};\n\nprivate _return = true;\nif (getText (_config >> \"condition\") != \"\") then {\n    private _condition = getText (_config >> \"condition\");\n    if (isNil _condition) then {\n        _condition = compile _condition;\n    } else {\n        _condition = missionNamespace getVariable _condition;\n    };\n    if (_condition isEqualType false) then {\n        _return = _condition;\n    } else {\n        _return = [_caller, _target, _hitPoint, _className] call _condition;\n    };\n};\nif (!_return) exitWith {false};\n\n// private _vehicleStateCondition = if (isText(_config >> \"vehicleStateCondition\")) then {\n    // missionNamespace getVariable [getText(_config >> \"vehicleStateCondition\"), 0]\n// } else {\n    // getNumber(_config >> \"vehicleStateCondition\")\n// };\n// if (_vehicleStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitWith {false};\n\nprivate _repairLocations = getArray (_config >> \"repairLocations\");\nif (!(\"All\" in _repairLocations)) then {\n    private _repairFacility = {([_caller] call FUNC(isInRepairFacility)) || ([_target] call FUNC(isInRepairFacility))};\n    private _repairVeh = {([_caller] call FUNC(isNearRepairVehicle)) || ([_target] call FUNC(isNearRepairVehicle))};\n    {\n        if (_x == \"field\") exitWith {_return = true;};\n        if (_x == \"RepairFacility\" && _repairFacility) exitWith {_return = true;};\n        if (_x == \"RepairVehicle\" && _repairVeh) exitWith {_return = true;};\n        if !(isNil _x) exitWith {\n            private _val = missionNamespace getVariable _x;\n            if (_val isEqualType 0) then {\n                _return = switch (_val) do {\n                    case 0: {true}; //useAnywhere\n                    case 1: {call _repairVeh}; //repairVehicleOnly\n                    case 2: {call _repairFacility}; //repairFacilityOnly\n                    case 3: {(call _repairFacility) || {call _repairVeh}}; //vehicleAndFacility\n                    default {false}; //Disabled\n                };\n            };\n        };\n    } forEach _repairLocations;\n};\n\nprivate _requiredObjects = getArray (_config >> \"claimObjects\");\nprivate _claimObjectsAvailable = [];\nif (!(_requiredObjects isEqualTo [])) then {\n    _claimObjectsAvailable = [_caller, 5, _requiredObjects] call FUNC(getClaimObjects);\n    if (_claimObjectsAvailable isEqualTo []) then {\n        TRACE_2(\"Missing Required Objects\",_requiredObjects,_claimObjectsAvailable);\n        _return = false\n    };\n};\n\nif !(_return && alive _target) exitWith {false};\n//Last exitWith: repair_success or repair_failure will be run\n\n//Claim required objects\n{\n    TRACE_2(\"Claiming\", _x, (typeOf _x));\n    [_caller, _x, false] call EFUNC(common,claim);\n} forEach _claimObjectsAvailable;\n\nprivate _consumeItems = if (isNumber (_config >> \"itemConsumed\")) then {\n    getNumber (_config >> \"itemConsumed\");\n} else {\n    // Check for required class\n    if (isText (_config >> \"itemConsumed\")) exitWith {\n        missionNamespace getVariable [(getText (_config >> \"itemConsumed\")), 0];\n    };\n    0;\n};\n\nprivate _usersOfItems = [];\nif (_consumeItems > 0) then {\n    _usersOfItems = ([_caller, _items] call FUNC(useItems)) select 1;\n};\n\n// Parse the config for the progress callback\nprivate _callbackProgress = getText (_config >> \"callbackProgress\");\nif (_callbackProgress == \"\") then {\n    _callbackProgress = \"true\";\n};\nif (isNil _callbackProgress) then {\n    _callbackProgress = compile _callbackProgress;\n} else {\n    _callbackProgress = missionNamespace getVariable _callbackProgress;\n};\n\n\n// Player Animation\nprivate _callerAnim = [getText (_config >> \"animationCaller\"), getText (_config >> \"animationCallerProne\")] select (stance _caller == \"PRONE\");\n_caller setVariable [QGVAR(selectedWeaponOnrepair), currentWeapon _caller];\n\n// Cannot use secondairy weapon for animation\nif (currentWeapon _caller == secondaryWeapon _caller) then {\n    _caller selectWeapon (primaryWeapon _caller);\n};\n\nprivate _wpn = [\"non\", \"rfl\", \"pst\"] select (1 + ([primaryWeapon _caller, handgunWeapon _caller] find (currentWeapon _caller)));\n_callerAnim = [_callerAnim, \"[wpn]\", _wpn] call CBA_fnc_replace;\nif (vehicle _caller == _caller && {_callerAnim != \"\"}) then {\n    if (primaryWeapon _caller == \"\") then {\n        _caller addWeapon \"ACE_FakePrimaryWeapon\";\n    };\n    if (currentWeapon _caller == \"\") then {\n        _caller selectWeapon (primaryWeapon _caller); // unit always has a primary weapon here\n    };\n\n    if !(_caller call EFUNC(common,isSwimming)) then {\n        if (stance _caller == \"STAND\") then {\n            _caller setVariable [QGVAR(repairPrevAnimCaller), \"amovpknlmstpsraswrfldnon\"];\n        } else {\n            _caller setVariable [QGVAR(repairPrevAnimCaller), animationState _caller];\n        };\n        [_caller, _callerAnim] call EFUNC(common,doAnimation);\n    };\n};\n\n// Get repair time\nprivate _repairTime = [\n    configFile >> \"CfgVehicles\" >> typeOf _target >> QGVAR(repairTimes) >> configName _config,\n    \"number\",\n    -1\n] call CBA_fnc_getConfigEntry;\n\nif (_repairTime < 0) then {\n    _repairTime = if (isNumber (_config >> \"repairingTime\")) then {\n        getNumber (_config >> \"repairingTime\");\n    } else {\n        if (isText (_config >> \"repairingTime\")) exitWith {\n            private _repairTimeConfig = getText (_config >> \"repairingTime\");\n            if (isNil _repairTimeConfig) then {\n                _repairTimeConfig = compile _repairTimeConfig;\n            } else {\n                _repairTimeConfig = missionNamespace getVariable _repairTimeConfig;\n            };\n            if (_repairTimeConfig isEqualType 0) exitWith {\n                _repairTimeConfig;\n            };\n            [_caller, _target, _hitPoint, _className] call _repairTimeConfig;\n        };\n        0;\n    };\n};\n\n// Find localized string\nprivate _hitPointClassname = if (_hitPoint isEqualType \"\") then {\n    _hitPoint\n} else {\n    ((getAllHitPointsDamage _target) select 0) select _hitPoint\n};\nprivate _processText = getText (_config >> \"displayNameProgress\");\nprivate _backupText = format [localize LSTRING(RepairingHitPoint), _hitPointClassname];\n([_hitPointClassname, _processText, _backupText] call FUNC(getHitPointString)) params [\"_text\"];\n\nTRACE_4(\"display\",_hitPoint,_hitPointClassname,_processText,_text);\n\n// Start repair\n[\n    _repairTime,\n    [_caller, _target, _hitPoint, _className, _items, _usersOfItems, _claimObjectsAvailable],\n    DFUNC(repair_success),\n    DFUNC(repair_failure),\n    _text,\n    _callbackProgress,\n    [\"isNotSwimming\", \"isNotOnLadder\"]\n] call EFUNC(common,progressBar);\n\n// Display Icon\nprivate _iconDisplayed = getText (_config >> \"actionIconPath\");\nif (_iconDisplayed != \"\") then {\n    [QGVAR(repairActionIcon), true, _iconDisplayed, [1,1,1,1], getNumber(_config >> \"actionIconDisplayTime\")] call EFUNC(common,displayIcon);\n};\n\n// handle display of text/hints\nprivate _displayText = \"\";\nif (_target != _caller) then {\n    _displayText = getText(_config >> \"displayTextOther\");\n} else {\n    _displayText = getText(_config >> \"displayTextSelf\");\n};\n\nif (_displayText != \"\") then {\n    [QEGVAR(common,displayTextStructured), [[_displayText, [_caller] call EFUNC(common,getName), [_target] call EFUNC(common,getName)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\n};\n\ntrue;\n",
        "functionName": "ace_repair_fnc_repair"
      },
      {
        "fileName": "fnc_setDamage.sqf",
        "content": "/*\n * Author: commy2\n * Sets the structural damage of a vehicle without altering the hitPoints, requires local vehicle.\n *\n * Arguments:\n * 0: Local Vehicle to Damage <OBJECT>\n * 1: Total Damage <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle, 0.5] call ace_repair_fnc_setDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_damage\"];\nTRACE_2(\"params\",_vehicle,_damage);\n\n// can't execute all commands if the vehicle isn't local. exit here.\nif !(local _vehicle) exitWith {};\n\n// save array with damage values of all hitpoints\n(getAllHitPointsDamage _vehicle) params [[\"_allHitPoints\", []], [\"_allHitPointsSelections\", []], [\"_allHitPointDamages\", []]];\n\n// set damage of the vehicle\n_vehicle setDamage _damage;\n\n// restore original hitpoint damage values\n{\n    _vehicle setHitIndex [_forEachIndex, _x];\n} forEach _allHitPointDamages;\n\n// normalize hitpoints\n[_vehicle] call FUNC(normalizeHitPoints);\n",
        "functionName": "ace_repair_fnc_setDamage"
      },
      {
        "fileName": "fnc_setHitPointDamage.sqf",
        "content": "/*\n * Author: commy2\n * Set the hitpoint damage and change the structural damage acordingly, requires local vehicle.\n * Handles the ace_repair_setVehicleHitPointDamage event.\n *\n * Arguments:\n * 0: Local Vehicle to Damage <OBJECT>\n * 1: Selected hitpoint INDEX <NUMBER>\n * 2: Total Damage <NUMBER>\n * 3: Skip destruction effects <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle, 1, 0.5] call ace_repair_fnc_setHitPointDamage\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_hitPointIndex\", \"_hitPointDamage\", [\"_useEffects\", true]];\nTRACE_4(\"params\",_vehicle,typeOf _vehicle,_hitPointIndex,_hitPointDamage);\n\n// can't execute all commands if the vehicle isn't local. exit here.\nif !(local _vehicle) exitWith {ERROR_1(\"Vehicle Not Local %1\", _vehicle);};\n\n// get all hitpoints and selections and damages\n(getAllHitPointsDamage _vehicle) params [[\"_allHitPoints\", []], [\"_allHitPointsSelections\", []], [\"_allHitPointDamages\", []]];\n\n// exit if the hitpoint is not valid\nif ((_hitPointIndex < 0) || {_hitPointIndex >= (count _allHitPoints)}) exitWith {ERROR_2(\"NOT A VALID HITPOINT: %1-%2\", _hitPointIndex,_vehicle);};\n\n// save structural damage and sum of hitpoint damages\n\nprivate _damageOld = damage _vehicle;\n\nprivate _realHitpointCount = 0;\nprivate _hitPointDamageSumOld = 0;\nprivate _hitPointDamageRepaired = 0; //positive for repairs : newSum = (oldSum - repaired)\n{\n    private _selectionName = _allHitPointsSelections select _forEachIndex;\n    //Filter out all the bad hitpoints (HitPoint=\"\" or no selection)\n    if ((!isNil {_vehicle getHit _selectionName}) && {_x != \"\"}) then {\n        _realHitpointCount = _realHitpointCount + 1;\n\n        if ((((toLower _x) find \"glass\") == -1) && {(getText (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"HitPoints\" >> _x >> \"depends\")) in [\"\", \"0\"]}) then {\n            _hitPointDamageSumOld = _hitPointDamageSumOld + (_allHitPointDamages select _forEachIndex);\n            if (_forEachIndex == _hitPointIndex) then {\n                _hitPointDamageRepaired = (_allHitPointDamages select _forEachIndex) - _hitPointDamage;\n            };\n        };\n    };\n} forEach _allHitPoints;\n\n// calculate new structural damage\nprivate _damageNew = (_hitPointDamageSumOld - _hitPointDamageRepaired) / _realHitpointCount;\n\nif (_hitPointDamageSumOld > 0) then {\n    _damageNew = _damageOld * ((_hitPointDamageSumOld - _hitPointDamageRepaired) / _hitPointDamageSumOld);\n};\nTRACE_5(\"structuralDamage\",_damageOld,_damageNew,_hitPointDamageRepaired,_hitPointDamageSumOld,_realHitpointCount);\n\n// set new structural damage value\n_vehicle setDamage [_damageNew, _useEffects];\n\n//Repair the hitpoint in the damages array:\n_allHitPointDamages set [_hitPointIndex, _hitPointDamage];\n\n//Set the new damage for all hitpoints\n{\n    _vehicle setHitIndex [_forEachIndex, _x, _useEffects];\n} forEach _allHitPointDamages;\n\n// normalize hitpoints\n[_vehicle] call FUNC(normalizeHitPoints);\n",
        "functionName": "ace_repair_fnc_setHitPointDamage"
      },
      {
        "fileName": "fnc_spawnObject.sqf",
        "content": "/*\n * Author: commy2\n * Spawns an object of specified string, at specified position with specified damage taken.\n *\n * Arguments:\n * 0: Item classname <STRING>\n * 1: Position ASL <ARRAY>\n * 2: Damage <NUMBER>\n *\n * Return Value:\n * The new object <OBJECT>\n *\n * Example:\n * [\"classname\", [0, 0, 0], 1] call ace_repair_fnc_spawnObject\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_item\", \"_position\", [\"_damage\", 0]];\nTRACE_3(\"params\",_item,_position,_damage);\n\n// randomized end position\n_position = _position vectorAdd [1 - random 2, 1 - random 2, 0];\n\nprivate _newObject = createVehicle [_item, _position, [], 0, \"NONE\"];\n_newObject setPosASL _position;\n\n_newObject setDamage _damage;\n\n[QEGVAR(common,fixCollision), _newObject] call CBA_fnc_localEvent;\n[QEGVAR(common,fixPosition), _newObject] call CBA_fnc_localEvent;\n\n_newObject\n",
        "functionName": "ace_repair_fnc_spawnObject"
      },
      {
        "fileName": "fnc_useItem.sqf",
        "content": "/*\n * Author: Glowbal\n * Use Equipment if any is available.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Item classname <STRING>\n *\n * Return Value:\n * [Had Item to Use <BOOL>, Unit <OBJECT>] <ARRAY>\n *\n * Example:\n * [unit, \"classname\"] call ace_repair_fnc_useItem\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_item\"];\nTRACE_2(\"params\",_unit,_item);\n\nif ([_unit, _item] call EFUNC(common,hasItem)) exitWith {\n    [\"ace_useItem\", [_unit, _item], _unit] call CBA_fnc_targetEvent;\n    [true, _unit];\n};\n\n[false, objNull];\n",
        "functionName": "ace_repair_fnc_useItem"
      },
      {
        "fileName": "fnc_useItems.sqf",
        "content": "/*\n * Author: Glowbal\n * Use Equipment items if any is available.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Item classnames <ARRAY>\n *\n * Return Value:\n * [Had Item to Use <BOOL>, Array of units that used the items <ARRAY>] <ARRAY>\n *\n * Example:\n * [unit, [\"classname1\", \"classname2\"]] call ace_repair_fnc_useItems\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_items\"];\nTRACE_2(\"params\",_unit,_items);\n\nprivate _itemsUsedBy = [];\n{\n    // handle a one of type use item\n    if (_x isEqualType []) then {\n        {\n            private _itemUsedInfo = [_unit, _x] call FUNC(useItem);\n            if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushback [(_itemUsedInfo select 1), _x]};\n        } forEach _x;\n    };\n\n    // handle required item\n    if (_x isEqualType \"\") then {\n        private _itemUsedInfo = [_unit, _x] call FUNC(useItem);\n        if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushback [(_itemUsedInfo select 1), _x]};\n    };\n} forEach _items;\n\n[count _items == count _itemsUsedBy, _itemsUsedBy];\n",
        "functionName": "ace_repair_fnc_useItems"
      }
    ]
  },
  {
    "component": "respawn",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\n[\"ace_rallypointMoved\", FUNC(updateRallypoint)] call CBA_fnc_addEventHandler;\n[\"unit\", FUNC(handlePlayerChanged)] call CBA_fnc_addPlayerEventHandler; // hide enemy rallypoint markers\n\n[QGVAR(showFriendlyFireMessageEvent), FUNC(showFriendlyFireMessage)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      },
      {
        "fileName": "XEH_serverPostInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_settingsInitialized\", {\n    if (GVAR(RemoveDeadBodiesDisconnected)) then {\n        addMissionEventHandler [\"HandleDisconnect\", {\n            [{\n                params [\"_unit\"];\n\n                if (!alive _unit) then {\n                    deleteVehicle _unit;\n                };\n            },\n            _this, 4] call CBA_fnc_waitAndExecute;\n            false\n        }];\n    };\n}] call CBA_fnc_addEventHandler;\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canMoveRallypoint.sqf",
        "content": "/*\n * Author: commy2\n * Checks if a unit can move a rally point.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Side <SIDE>\n *\n * Return Value:\n * Can move <BOOL>\n *\n * Example:\n * [ACE_Player, side ACE_Player] call ace_respawn_fnc_canMoveRallypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_side\"];\n\n// player has to be a rallypoint mover. group leader by default\nif !(_unit getVariable [\"ACE_canMoveRallypoint\", false]) exitWith {false};\n\n// rallypoint of that side has to exist\n!isNull ([\n    objNull,\n    missionNamespace getVariable [\"ACE_Rallypoint_West\", objNull],\n    missionNamespace getVariable [\"ACE_Rallypoint_East\", objNull],\n    missionNamespace getVariable [\"ACE_Rallypoint_Independent\", objNull]\n] select ([west, east, independent] find _side) + 1) // return\n",
        "functionName": "ace_respawn_fnc_canMoveRallypoint"
      },
      {
        "fileName": "fnc_handleInitPostServer.sqf",
        "content": "/*\n * Author: commy2\n * Handle XEH Init Post on Server.\n * Execution on server only.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_Player] call ace_respawn_fnc_handleInitPostServer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _groupUnit = group _unit; // _group is a reserved veriable and shouldn't be used\n\nprivate _rallypoint = [\n    objNull,\n    missionNamespace getVariable [\"ACE_Rallypoint_West\", objNull],\n    missionNamespace getVariable [\"ACE_Rallypoint_East\", objNull],\n    missionNamespace getVariable [\"ACE_Rallypoint_Independent\", objNull]\n] select ([west, east, independent] find side _groupUnit) + 1;\n\n// exit if no moveable rallypoint is placed for that side\nif (isNull _rallypoint) exitWith {};\n\n// find leader\nprivate _leaderVarName = _groupUnit getVariable [QGVAR(leaderVarName), \"\"];\n\n// exit if group already has a playable slot assigned as rallypoint leader\nif (_leaderVarName != \"\") exitWith {\n    // assign JIP unit as rallypoint leader\n    if (str _unit == _leaderVarName) then {\n        if (isNil {_unit getVariable \"ACE_canMoveRallypoint\"}) then {\n            _unit setVariable [\"ACE_canMoveRallypoint\", true, true];\n        };\n    };\n};\n\n// treat group leader\n_unit = leader _groupUnit;\n\n_leaderVarName = vehicleVarName _unit;\n\nif (_leaderVarName == \"\") then {\n    private _leaderID = GETGVAR(NextLeaderID,0);\n\n    _leaderVarName = format [QUOTE(ACE_Rallypoint_Leader_%1), _leaderID];\n\n    _unit setVehicleVarName _leaderVarName;\n\n    GVAR(NextLeaderID) = _leaderID + 1;\n};\n\n// prevent group from getting multiple leaders; use this to assign rallypoint moving ability on JIP\n_groupUnit setVariable [QGVAR(leaderVarName), _leaderVarName];\n\nif (isNil {_unit getVariable \"ACE_canMoveRallypoint\"}) then {\n    _unit setVariable [\"ACE_canMoveRallypoint\", true, true];\n};\n",
        "functionName": "ace_respawn_fnc_handleInitPostServer"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: bux578\n * Handles the XEH killed event.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Killer <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, bad_dude] call ace_respawn_fnc_handleKilled\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// Saves the gear when the player! (and only him) is killed\nif (ACE_player == _unit && {GVAR(SavePreDeathGear)}) then {\n    _unit setVariable [QGVAR(unitGear), getUnitLoadout _unit];\n    _unit setVariable [QGVAR(activeWeaponAndMuzzle), [currentWeapon _unit, currentMuzzle _unit, currentWeaponMode _unit]];\n};\n\nif (missionNamespace getVariable [QGVAR(showFriendlyFireMessage), false]) then {\n    [QGVAR(showFriendlyFireMessageEvent), _this] call CBA_fnc_globalEvent;\n};\n",
        "functionName": "ace_respawn_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle player changed event. Updates visibility of Rallypoint markers.\n *\n * Arguments:\n * 0: New Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player] call ace_respawn_fnc_handlePlayerChanged\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_newUnit\"];\n\nprivate _side = side group _newUnit;\n\n((GETMVAR(ACE_Rallypoint_West,             objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == west));\n((GETMVAR(ACE_Rallypoint_West_Base,        objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == west));\n((GETMVAR(ACE_Rallypoint_East,             objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == east));\n((GETMVAR(ACE_Rallypoint_East_Base,        objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == east));\n((GETMVAR(ACE_Rallypoint_Independent,      objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == independent));\n((GETMVAR(ACE_Rallypoint_Independent_Base, objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == independent));\n",
        "functionName": "ace_respawn_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handleRespawn.sqf",
        "content": "/*\n * Author: bux578\n * Handles the XEH Respawn event.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Corpse <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_Player, old_body_lying_on_floor] call ace_respawn_fnc_handleRespawn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// Restores the gear when the player respawns\nif (GVAR(SavePreDeathGear)) then {\n    [\n        _unit,\n        _unit getVariable QGVAR(unitGear),\n        _unit getVariable QGVAR(activeWeaponAndMuzzle)\n    ] call FUNC(restoreGear);\n};\n\n// fix for setVariable public being lost on respawn for machines that JIP after the command was broadcasted\nif (_unit getVariable [\"ACE_canMoveRallypoint\", false]) then {\n    _unit setVariable [\"ACE_canMoveRallypoint\", true, true];\n};\n",
        "functionName": "ace_respawn_fnc_handleRespawn"
      },
      {
        "fileName": "fnc_initRallypoint.sqf",
        "content": "/*\n * Author: commy2\n * Init code for rallypoints.\n *\n * Arguments:\n * 0: Rallypoint Object <OBJECT>\n * 1: Respawn Marker <STRING>\n * 2: Side <SIDE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [respawn_object, \"\", west] call ace_respawn_fnc_initRallypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_rallypoint\", \"_respawnMarker\", \"_side\"];\n\nprivate _name = typeOf _rallypoint;\n\nif (isNil _name) then {\n    missionNamespace setVariable [_name, _rallypoint];\n\n    _rallypoint setVariable [QGVAR(side), _side];\n\n    if (isServer) then {\n        if (_respawnMarker != \"\" && {!(_respawnMarker in allMapMarkers)}) then {\n            createMarker [_respawnMarker, _rallypoint];\n        };\n\n        [\"ace_rallypointMoved\", [_rallypoint, _side]] call CBA_fnc_globalEvent;\n    };\n} else {\n    deleteVehicle _rallypoint;\n    ERROR(\"Multiple Rallypoints of same type.\");\n};\n\n// init visible marker\nif (hasInterface) then {\n    [{\n        params [\"_rallypoint\", \"_respawnMarker\", \"_side\", \"_name\"];\n\n        private _marker = format [\"ACE_Marker_%1\", _name];\n\n        // exit if marker already exist\n        if (_marker in allMapMarkers) exitWith {};\n\n        _marker = createMarkerLocal [_marker, getPosASL _rallypoint];\n\n        private _type = [\"selector_selectedFriendly\", \"selector_selectedEnemy\"] select (_respawnMarker == \"\");\n\n        _marker setMarkerTypeLocal _type;\n        _marker setMarkerAlphaLocal ([0,1] select (_side == playerSide)); // playerSide to guarantee init\n\n        private _date = _rallypoint getVariable [QGVAR(markerDate), \"\"];\n\n        _marker setMarkerTextLocal _date;\n\n        _rallypoint setVariable [QGVAR(marker), _marker];\n    }, [_rallypoint, _respawnMarker, _side, _name], 0.1] call CBA_fnc_waitAndExecute;\n};\n",
        "functionName": "ace_respawn_fnc_initRallypoint"
      },
      {
        "fileName": "fnc_module.sqf",
        "content": "/*\n * Author: KoffeinFlummi, bux578, esteldunedain, commy2\n * Initializes the respawn module.\n *\n * Arguments:\n * 0: Logic <OBJECT>\n * 1: Synced units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic, [ACE_Player], true] call ace_respawn_fnc_module\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(SavePreDeathGear), \"SavePreDeathGear\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(RemoveDeadBodiesDisconnected), \"RemoveDeadBodiesDisconnected\"] call EFUNC(common,readSettingFromModule);\n\nINFO(\"Respawn Module Initialized.\");\n",
        "functionName": "ace_respawn_fnc_module"
      },
      {
        "fileName": "fnc_moduleFriendlyFire.sqf",
        "content": "/*\n * Author: commy2\n * Initializes the friendly fire module.\n *\n * Arguments:\n * 0: Logic <OBJECT>\n * 1: Synced units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic, [ACE_Player], true] call ace_respawn_fnc_moduleFriendlyFire\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n// this is done for JIP compatibility\nif (isServer) then {\n    [{\n        missionNamespace setVariable [QGVAR(showFriendlyFireMessage), true];\n        publicVariable QGVAR(showFriendlyFireMessage);\n    },\n    [], 0.1] call CBA_fnc_waitAndExecute;\n};\n\nINFO(\"Friendly Fire Messages Module Initialized.\");\n",
        "functionName": "ace_respawn_fnc_moduleFriendlyFire"
      },
      {
        "fileName": "fnc_moduleRallypoint.sqf",
        "content": "/*\n * Author: commy2\n * Initializes the Rallypoint module.\n *\n * Arguments:\n * 0: Logic <OBJECT>\n * 1: Synced units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [logic, [ACE_Player], true] call ace_respawn_fnc_moduleRallypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n{\n    _x setVariable [\"ACE_canMoveRallypoint\", true];\n    false\n} count _units;\n\nINFO(\"Rallypoint Module Initialized.\");\n",
        "functionName": "ace_respawn_fnc_moduleRallypoint"
      },
      {
        "fileName": "fnc_moveRallypoint.sqf",
        "content": "/*\n * Author: commy2\n * Moves a rallypoint to the players location.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Side <SIDE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_Player, side ACE_Player] call ace_respawn_fnc_moveRallypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_side\"];\n\nprivate _rallypoint = [\n    objNull,\n    missionNamespace getVariable [\"ACE_Rallypoint_West\", objNull],\n    missionNamespace getVariable [\"ACE_Rallypoint_East\", objNull],\n    missionNamespace getVariable [\"ACE_Rallypoint_Independent\", objNull]\n] select ([west, east, independent] find _side) + 1;\n\nTRACE_3(\"moving rally\",_unit,_rallypoint,typeOf _rallypoint);\n\nif (isNull _rallypoint) exitWith {};\n\nprivate _position = getPosATL _unit;\n_position = _position findEmptyPosition [0, 2, typeOf _rallypoint];\n\nif (_position isEqualTo []) then {_position = getPosATL _unit};\n\n_position set [2, 0];\n\n[localize LSTRING(Deploy)] call EFUNC(common,displayTextStructured);\n\n[{\n    params [\"_rallypoint\", \"_unit\", \"_position\"];\n\n    _rallypoint setPosATL _position;\n    _unit reveal _rallypoint;\n\n    _rallypoint setVariable [QGVAR(markerDate), [dayTime, \"HH:MM\"] call BIS_fnc_timeToString, true];\n\n    [\"ace_rallypointMoved\", [_rallypoint, _side, _position]] call CBA_fnc_globalEvent;\n\n    [localize LSTRING(Deployed)] call EFUNC(common,displayTextStructured);\n}, [_rallypoint, _unit, _position], 5] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_respawn_fnc_moveRallypoint"
      },
      {
        "fileName": "fnc_restoreGear.sqf",
        "content": "/*\n * Author: bux578, commy2\n * Restores previously saved gear.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: All Gear based on return value of ACE_common_fnc_getAllGear <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_Player, stored_allGear, active_weapon_muzzle_and_mode] call ace_respawn_fnc_restoreGear\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_allGear\", \"_activeWeaponAndMuzzle\"];\nTRACE_3(\"restoreGear\",_unit, count _allGear, _activeWeaponAndMuzzle);\n\n// restore all gear\nif (!isNil \"_allGear\") then {\n    _allGear params [\"_primaryWeaponArray\"];\n    if ((_primaryWeaponArray param [0, \"\"]) == \"ACE_FakePrimaryWeapon\") then {\n        TRACE_1(\"Ignoring fake gun\",_primaryWeaponArray);\n        _allGear set [0, []];\n        _activeWeaponAndMuzzle = nil;\n    };\n    _unit setUnitLoadout _allGear;\n};\n\n// restore the last active weapon, muzzle and weaponMode\nif (!isNil \"_activeWeaponAndMuzzle\") then {\n    // @todo, replace this with CBA_fnc_selectWeapon after next CBA update\n    _activeWeaponAndMuzzle params [\"_activeWeapon\", \"_activeMuzzle\", \"_activeWeaponMode\"];\n\n    if (\n        (_activeMuzzle != \"\") &&\n        {_activeMuzzle != _activeWeapon} &&\n        {_activeMuzzle in getArray (configFile >> \"CfgWeapons\" >> _activeWeapon >> \"muzzles\")}\n    ) then {\n        _unit selectWeapon _activeMuzzle;\n    } else {\n        if (_activeWeapon != \"\") then {\n            _unit selectWeapon _activeWeapon;\n        };\n    };\n\n    if (currentWeapon _unit != \"\") then {\n        private _index = 0;\n\n        while {\n            _index < 299 && {currentWeaponMode _unit != _activeWeaponMode}\n        } do {\n            _unit action [\"SwitchWeapon\", _unit, _unit, _index];\n            _index = _index + 1;\n        };\n    };\n};\n",
        "functionName": "ace_respawn_fnc_restoreGear"
      },
      {
        "fileName": "fnc_showFriendlyFireMessage.sqf",
        "content": "/*\n * Author: commy2\n * Shows a message in system chat of who killed whom.\n *\n * Arguments:\n * 0: Unitn <OBJECT>\n * 1: Killer <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_Player, killer] call ace_module_fnc_functionName\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_killer\"];\n\nif (_unit != _killer && {side group _unit in [side group ACE_player, civilian]} && {side group _killer == side group ACE_player}) then {\n    systemChat format [\"%1 was killed by %2\", [_unit, false, true] call EFUNC(common,getName), [_killer, false, true] call EFUNC(common,getName)];\n\n    // Raise ACE globalEvent\n    [\"ace_killedByFriendly\", [_unit, _killer]] call CBA_fnc_globalEvent;\n};\n",
        "functionName": "ace_respawn_fnc_showFriendlyFireMessage"
      },
      {
        "fileName": "fnc_teleportToRallypoint.sqf",
        "content": "/*\n * Author: commy2\n * Teleports a unit to a rallypoint\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Side <SIDE>\n * 2: Rallypoint name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, side ACE_Player, rallypoint_name] call ace_respawn_fnc_teleportToRallypoint;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_side\", \"_rallypoint\"];\n\nprivate _toBase = _rallypoint find \"_Base\" != -1;\n\n_rallypoint = missionNamespace getVariable [_rallypoint, objNull];\n\nif (isNull _rallypoint) exitWith {};\n\n_unit setPosASL getPosASL _rallypoint;\n\n[[localize LSTRING(TeleportedToRallypoint), localize LSTRING(TeleportedToBase)] select _toBase] call EFUNC(common,displayTextStructured);\n",
        "functionName": "ace_respawn_fnc_teleportToRallypoint"
      },
      {
        "fileName": "fnc_updateRallypoint.sqf",
        "content": "/*\n * Author: commy2\n * Updates marker position and texts.\n *\n * Arguments:\n * 0: Marker <STRING>\n * 1: Side <SIDE>\n * 2: Position <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [marker_name, side ACE_Player, getPos ACE_Player] call ace_respawn_fnc_updateRallypoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_rallypoint\", \"_side\", \"_position\"];\n\nif (!hasInterface) exitWith {};\n\nprivate _marker = _rallypoint getVariable [QGVAR(marker), \"\"];\nprivate _markerDate = _rallypoint getVariable [QGVAR(markerDate), \"\"];\n\n_marker setMarkerPosLocal _position;\n_marker setMarkerTextLocal _markerDate;\n",
        "functionName": "ace_respawn_fnc_updateRallypoint"
      }
    ]
  },
  {
    "component": "safemode",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by esteldunedain\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n// IGNORE_PRIVATE_WARNING(_player)\n//[\"Soldier\", {_player = ACE_player; if (currentWeapon _player in (_player getVariable [QGVAR(safedWeapons), []])) then {[false] call FUNC(setSafeModeVisual)}] call EFUNC(common,addInfoDisplayEventHandler);\n//@todo addEventHandler infoDisplayChanged with select 1 == \"Soldier\"\n\n// add keybinds\n[\"ACE3 Weapons\", QGVAR(safeMode), localize LSTRING(SafeMode),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotEscorting\", \"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player] call CBA_fnc_canUseWeapon && {currentWeapon ACE_player != binocular ACE_player} && {currentWeapon ACE_player != \"\"}) exitWith {false};\n\n    // Statement\n    [ACE_player, currentWeapon ACE_player, currentMuzzle ACE_player] call FUNC(lockSafety);\n    true\n},\n{false},\n[41, [false, true, false]], false] call CBA_fnc_addKeybind;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_lockSafety.sqf",
        "content": "/*\n * Author: commy2\n * Put weapon on safety, or take it off safety if safety is already put on.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n * 2: Muzzle <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, currentWeapon ACE_player, currentMuzzle ACE_player] call ace_safemode_fnc_lockSafety\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// don't immediately switch back\nif (inputAction \"nextWeapon\" > 0) exitWith {};\n\nparams [\"_unit\", \"_weapon\", \"_muzzle\"];\n\nprivate _safedWeapons = _unit getVariable [QGVAR(safedWeapons), []];\n\nif (_weapon in _safedWeapons) exitWith {\n    _this call FUNC(unlockSafety);\n};\n\n_safedWeapons pushBack _weapon;\n\n_unit setVariable [QGVAR(safedWeapons), _safedWeapons];\n\nif (_unit getVariable [QGVAR(actionID), -1] == -1) then {\n    _unit setVariable [QGVAR(actionID), [\n        _unit, \"DefaultAction\", {\n            if (\n                [_this select 1] call CBA_fnc_canUseWeapon\n                && {\n                    if (currentMuzzle (_this select 1) in ((_this select 1) getVariable [QGVAR(safedWeapons), []])) then {\n                        if (inputAction \"nextWeapon\" > 0) exitWith {\n                            [_this select 1, currentWeapon (_this select 1), currentMuzzle (_this select 1)] call FUNC(unlockSafety);\n                            false\n                        };\n                        true\n                    } else {false}\n                }\n            ) then {\n                // player hud\n                [false] call FUNC(setSafeModeVisual);\n                true\n            } else {\n                // player hud\n                [true] call FUNC(setSafeModeVisual);\n                false\n            };\n        }, {}\n    ] call EFUNC(common,addActionEventHandler)];\n};\n\nif (_muzzle isEqualType \"\") then {\n    _unit selectWeapon _muzzle;\n};\n\n// play fire mode selector sound\n[_unit, _weapon, _muzzle] call FUNC(playChangeFiremodeSound);\n\n// show info box\nprivate _picture = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\");\n[localize LSTRING(PutOnSafety), _picture] call EFUNC(common,displayTextPicture);\n",
        "functionName": "ace_safemode_fnc_lockSafety"
      },
      {
        "fileName": "fnc_playChangeFiremodeSound.sqf",
        "content": "/*\n * Author: commy2\n * Play weapon firemode change sound.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, currentWeapon ACE_player] call ace_safemode_fnc_playChangeFiremodeSound\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\n\nprivate _sound = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"changeFiremodeSound\");\n\nif (_sound isEqualTo []) exitWith {\n    playSound \"ACE_Sound_Click\";\n};\n\n// get position where to play the sound (position of the weapon)\nprivate _position = AGLToASL (_unit modelToWorldVisual (_unit selectionPosition \"RightHand\"));\n\n_sound params [\"_filename\", [\"_volume\", 1], [\"_soundPitch\", 1], [\"_distance\", 0]];\n\nif (_filename == \"\") exitWith {\n    playSound \"ACE_Sound_Click\";\n};\n\n// add file extension .wss as default\nif !(toLower (_filename select [count _filename - 4]) in [\".wav\", \".ogg\", \".wss\"]) then {\n    _filename = format [\"%1.wss\", _filename];\n};\n\nplaySound3D [_filename, objNull, false, _position, _volume, _soundPitch, _distance];\n",
        "functionName": "ace_safemode_fnc_playChangeFiremodeSound"
      },
      {
        "fileName": "fnc_setSafeModeVisual.sqf",
        "content": "/*\n * Author: commy2\n * Show firemode indicator, representing safety lock\n *\n * Arguments:\n * 0: Show firemode <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_safemode_fnc_setSafeModeVisual\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_show\"];\n\ndisableSerialization;\n\nprivate _control = (uiNamespace getVariable [\"ACE_dlgSoldier\", displayNull]) displayCtrl 187;\n\nif (isNull _control) exitWith {};\n\nif (_show) then {\n    private _config = configFile >> \"RscInGameUI\" >> \"RscUnitInfoSoldier\" >> \"WeaponInfoControlsGroupLeft\" >> \"controls\" >> \"CA_ModeTexture\";\n\n    _control ctrlSetPosition [getNumber (_config >> \"x\"), getNumber (_config >> \"y\"), getNumber (_config >> \"w\"), getNumber (_config >> \"h\")];\n    _control ctrlCommit 0;\n} else {\n    _control ctrlSetPosition [0, 0, 0, 0];\n    _control ctrlCommit 0;\n};\n",
        "functionName": "ace_safemode_fnc_setSafeModeVisual"
      },
      {
        "fileName": "fnc_unlockSafety.sqf",
        "content": "/*\n * Author: commy2\n * Take weapon of safety lock.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n * 2: Muzzle <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, currentWeapon ACE_player, currentMuzzle ACE_player] call ace_safemode_fnc_unlockSafety\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\", \"_muzzle\"];\n\nprivate _safedWeapons = _unit getVariable [QGVAR(safedWeapons), []];\n_safedWeapons deleteAt (_safedWeapons find _weapon);\n\n_unit setVariable [QGVAR(safedWeapons), _safedWeapons];\n\n// remove action if all weapons have put their safety on\nif (_safedWeapons isEqualTo []) then {\n    [_unit, \"DefaultAction\", _unit getVariable [QGVAR(actionID), -1]] call EFUNC(common,removeActionEventHandler);\n    _unit setVariable [QGVAR(actionID), -1];\n};\n\n_unit selectWeapon _muzzle;\n\nif (inputAction \"nextWeapon\" > 0) then {\n    // switch to the last mode to roll over to first after the default nextWeapon action\n    // get weapon modes\n    private _modes = [];\n    {\n        if (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> _x >> \"showToPlayer\") == 1) then {\n            _modes pushBack _x;\n        };\n        if (_x == \"this\") then {\n            _modes pushBack _weapon;\n        };\n        nil\n    } count getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"modes\");\n\n    // select last mode\n    private _mode = _modes select (count _modes - 1);\n\n    // switch to last mode\n    private _index = 0;\n    while {\n        _index < 299 && {currentMuzzle _unit != _weapon || {currentWeaponMode _unit != _mode}}\n    } do {\n        _unit action [\"SwitchWeapon\", _unit, _unit, _index];\n        _index = _index + 1;\n    };\n} else {\n    // play fire mode selector sound\n    [_unit, _weapon, _muzzle] call FUNC(playChangeFiremodeSound);\n};\n\n// player hud\n[true] call FUNC(setSafeModeVisual);\n\n// show info box\nprivate _picture = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\");\n[localize LSTRING(TookOffSafety), _picture] call EFUNC(common,displayTextPicture);\n",
        "functionName": "ace_safemode_fnc_unlockSafety"
      }
    ]
  },
  {
    "component": "sandbag",
    "files": [
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"MouseZChanged\", {(_this select 1) call FUNC(handleScrollWheel)}];\n_display displayAddEventHandler [\"MouseButtonDown\", {[ACE_player, _this select 1] call FUNC(deployCancel)}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (isServer) then {\n    // Cancel deploy on hard disconnection. Function is identical to killed\n    addMissionEventHandler [\"HandleDisconnect\", {_this call FUNC(handleKilled)}];\n};\n\nif (!hasInterface) exitWith {};\n\nGVAR(sandBag) = objNull;\nGVAR(deployPFH) = -1;\nGVAR(deployDirection) = 0;\n\n// Cancel deploy sandbag if interact menu opened\n[\"ace_interactMenuOpened\", {[ACE_player] call FUNC(handleInteractMenuOpened)}] call CBA_fnc_addEventHandler;\n\n// Cancel deploy on player change. This does work when returning to lobby, but not when hard disconnecting.\n[\"unit\", {_this call FUNC(handlePlayerChanged)}] call CBA_fnc_addPlayerEventHandler;\n[\"loadout\", {_this call FUNC(handlePlayerInventoryChanged)}] call CBA_fnc_addPlayerEventHandler;\n[\"vehicle\", {[ACE_player, objNull] call FUNC(handlePlayerChanged)}] call CBA_fnc_addPlayerEventHandler;\n\n// handle waking up dragged unit and falling unconscious while dragging\n[\"ace_unconscious\", {_this call FUNC(handleUnconscious)}] call CBA_fnc_addEventHandler;\n\n//@todo Captivity?\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canDeploy.sqf",
        "content": "/*\n * Author: Ruthberg, commy2\n * Checks if the player can deploy a sandbag.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Can deploy <BOOL>\n *\n * Example:\n * [ACE_player] call ace_sandbag_fnc_canDeploy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif !(\"ACE_Sandbag_empty\" in items _unit) exitWith {false};\n\n_unit call EFUNC(common,canDig)\n",
        "functionName": "ace_sandbag_fnc_canDeploy"
      },
      {
        "fileName": "fnc_deploy.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\n * Starts the deploy process for sandbags.\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player] call ace_sandbag_fnc_deploy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// prevent the placing unit from running\n[_unit, \"forceWalk\", \"ACE_Sandbag\", true] call EFUNC(common,statusEffect_set);\n\n// create the sandbag\nprivate _sandBag = createVehicle [\"ACE_SandbagObject_NoGeo\", [0, 0, 0], [], 0, \"NONE\"];\n\nGVAR(sandBag) = _sandBag;\n\n// prevent collisions with sandbag\n[QEGVAR(common,enableSimulationGlobal), [_sandBag, false]] call CBA_fnc_serverEvent;\n\nGVAR(deployDirection) = 0;\n\n// pfh that runs while the deployment is in progress\nGVAR(deployPFH) = [{\n    (_this select 0) params [\"_unit\", \"_sandBag\"];\n\n    if (isNull _sandBag) exitWith {\n        [_unit] call FUNC(deployCancel);\n    };\n\n    _sandBag setPosASL (eyePos _unit vectorAdd (positionCameraToWorld [0, 0, 1] vectorDiff positionCameraToWorld [0, 0, 0]));\n    _sandBag setDir (GVAR(deployDirection) + getDir _unit);\n}, 0, [_unit, _sandBag]] call CBA_fnc_addPerFrameHandler;\n\n// add mouse button action and hint\n[localize LSTRING(ConfirmDeployment), localize LSTRING(CancelDeployment), localize LSTRING(ScrollAction)] call EFUNC(interaction,showMouseHint);\n\n_unit setVariable [QGVAR(Deploy), [\n    _unit, \"DefaultAction\",\n    {GVAR(deployPFH) != -1},\n    {[_this select 0] call FUNC(deployConfirm)}\n] call EFUNC(common,addActionEventHandler)];\n\n_unit setVariable [QGVAR(isDeploying), true, true];\n",
        "functionName": "ace_sandbag_fnc_deploy"
      },
      {
        "fileName": "fnc_deployCancel.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\n * Cancels sandbag deployment\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Key <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player] call ace_sandbag_fnc_deployCancel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_key\"];\n\nif (_key != 1 || {GVAR(deployPFH) == -1}) exitWith {};\n\n// enable running again\n[_unit, \"forceWalk\", \"ACE_Sandbag\", false] call EFUNC(common,statusEffect_set);\n\n// delete placement dummy\ndeleteVehicle GVAR(sandBag);\n\n// remove deployment pfh\n[GVAR(deployPFH)] call CBA_fnc_removePerFrameHandler;\nGVAR(deployPFH) = -1;\n\n// remove mouse button actions\ncall EFUNC(interaction,hideMouseHint);\n\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(common,removeActionEventHandler);\n[_unit, \"zoomtemp\",      _unit getVariable [QGVAR(Cancel), -1]] call EFUNC(common,removeActionEventHandler);\n\n_unit setVariable [QGVAR(isDeploying), false, true];\n",
        "functionName": "ace_sandbag_fnc_deployCancel"
      },
      {
        "fileName": "fnc_deployConfirm.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\n * Confirms sandbag deployment\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player] call ace_sandbag_fnc_deployConfirm\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// enable running again\n[_unit, \"forceWalk\", \"ACE_Sandbag\", false] call EFUNC(common,statusEffect_set);\n\n// remove sandbag from inventory\n_unit removeItem \"ACE_Sandbag_empty\";\n\n// delete placement dummy and create real sandbag\n[{\n    if (isNull GVAR(sandBag)) exitWith {};\n\n    params [\"_unit\"];\n\n    private _position = getPosASL GVAR(sandBag);\n    private _direction = getDir GVAR(sandBag);\n\n    deleteVehicle GVAR(sandBag);\n\n    private _sandBag = createVehicle [\"ACE_SandbagObject\", [0, 0, 0], [], 0, \"NONE\"];\n    _sandBag setPosASL _position;\n    _sandBag setDir _direction;\n\n    GVAR(sandBag) = objNull;\n}, [_unit], 1] call CBA_fnc_waitAndExecute;\n\n// remove deployment pfh\n[GVAR(deployPFH)] call CBA_fnc_removePerFrameHandler;\nGVAR(deployPFH) = -1;\n\n// remove mouse button actions\ncall EFUNC(interaction,hideMouseHint);\n\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(common,removeActionEventHandler);\n\n// play animation\n[_unit, \"PutDown\"] call EFUNC(common,doGesture);\n\n_unit setVariable [QGVAR(isDeploying), false, true];\n",
        "functionName": "ace_sandbag_fnc_deployConfirm"
      },
      {
        "fileName": "fnc_handleInteractMenuOpened.sqf",
        "content": "/*\n * Author: commy2\n * Handle opening of interaction menu.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_sandbag_fnc_handleInteractMenuOpened\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\n    [_unit] call FUNC(deployCancel);\n};\n",
        "functionName": "ace_sandbag_fnc_handleInteractMenuOpened"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: commy2\n * Handle death.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_sandbag_fnc_handleKilled\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\n    [_unit] call FUNC(deployCancel);\n};\n",
        "functionName": "ace_sandbag_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle player changes.\n *\n * Arguments:\n * 0: New Player Unit <OBJECT>\n * 1: Old Player Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ace_sandbag_fnc_handlePlayerChanged\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_newPlayer\", \"_oldPlayer\"];\n\nif (_newPlayer getVariable [QGVAR(isDeploying), false]) then {\n    [_newPlayer] call FUNC(deployCancel);\n};\n\nif (_oldPlayer getVariable [QGVAR(isDeploying), false]) then {\n    [_oldPlayer] call FUNC(deployCancel);\n};\n",
        "functionName": "ace_sandbag_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handlePlayerInventoryChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle the InventoryChanged event.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"weapon\"] call ace_sandbag_fnc_handlePlayerInventoryChanged\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\n    if !(\"ACE_Sandbag_empty\" in items _unit) then {\n        [_unit] call FUNC(deployCancel);\n    };\n};\n",
        "functionName": "ace_sandbag_fnc_handlePlayerInventoryChanged"
      },
      {
        "fileName": "fnc_handleScrollWheel.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg\n * Handles sandbag rotation\n *\n * Arguments:\n * 0: scroll amount <NUMBER>\n *\n * Return Value:\n * handled <BOOL>\n *\n * Example:\n * [1.2] call ace_sandbag_fnc_handleScrollWheel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(deployPFH) == -1) exitWith {false};\n\nparams [\"_scroll\"];\n\nGVAR(deployDirection) = GVAR(deployDirection) + (_scroll * 5);\n\ntrue\n",
        "functionName": "ace_sandbag_fnc_handleScrollWheel"
      },
      {
        "fileName": "fnc_handleUnconscious.sqf",
        "content": "/*\n * Author: commy2\n * Handle unconsciousness.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_sandbag_fnc_handleUnconscious\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!local _unit) exitWith {};\n\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\n    [_unit] call FUNC(deployCancel);\n};\n",
        "functionName": "ace_sandbag_fnc_handleUnconscious"
      },
      {
        "fileName": "fnc_pickup.sqf",
        "content": "/*\n * Author: Ruthberg\n * Pick up sandbag\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: sandbag <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit, _sandbag] call ace_sandbag_fnc_pickup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_sandbag\"];\n\n[_unit, \"PutDown\"] call EFUNC(common,doGesture);\n\n_unit setVariable [QGVAR(isUsingSandbag), true];\n\n[{\n    params [\"_unit\", \"_sandbag\"];\n\n    _unit setVariable [QGVAR(isUsingSandbag), false];\n\n    if (isNull _sandbag) exitWith {};\n\n    deletevehicle _sandbag;\n\n    // Force physx update\n    {\n        _x setPosASL (getPosASL _x);\n    } count (_unit nearObjects [\"ACE_SandbagObject\", 5]);\n\n    [_unit, \"ACE_Sandbag_empty\"] call EFUNC(common,addToInventory);\n}, [_unit, _sandbag], 1.5] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_sandbag_fnc_pickup"
      }
    ]
  },
  {
    "component": "scopes",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "/*\n * Author: KoffeinFlummi, esteldunedain, Ruthberg\n *\n * Watches for scope changes.\n * Defines key bindings\n *\n */\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(Optics) = [\"\", \"\", \"\"];\nGVAR(Guns) = [\"\", \"\", \"\"];\nGVAR(canAdjustElevation) = [false, false, false];\nGVAR(canAdjustWindage) = [false, false, false];\nGVAR(baseAngle) = [0, 0, 0]; \nGVAR(boreHeight) = [0, 0, 0];\nGVAR(scopeAdjust) = [[[0,0],0,[0,0],0], [[0,0],0,[0,0],0], [[0,0],0,[0,0],0]];\n\n[\"ace_settingsInitialized\", {\n\n    if (!GVAR(enabled)) exitWith {};\n\n    if (GVAR(deduceBarometricPressureFromTerrainAltitude)) then {\n        GVAR(zeroReferenceBarometricPressure) = 1013.25 * (1 - (0.0065 * EGVAR(common,mapAltitude)) / 288.15) ^ 5.255754495;\n    };\n\n    // Check inventory when it changes\n    [\"loadout\", FUNC(inventoryCheck), true] call CBA_fnc_addPlayerEventHandler;\n\n    // Instantly hide knobs when scoping in\n    [\"cameraView\", {\n        params [\"_player\", \"_newCameraView\"];\n\n        if (_newCameraView == \"GUNNER\") then {\n            private _layer = [QGVAR(Zeroing)] call BIS_fnc_rscLayer;\n            _layer cutText [\"\", \"PLAIN\", 0];\n\n            if !(isNil QGVAR(fadePFH)) then {\n                [GVAR(fadePFH)] call CBA_fnc_removePerFrameHandler;\n                GVAR(fadePFH) = nil;\n            };\n        };\n    }] call CBA_fnc_addPlayerEventHandler;\n\n    // Add keybinds\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustUpMinor), localize LSTRING(AdjustUpMinor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, ELEVATION_UP, MINOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [201, [false, false, false]], true] call CBA_fnc_addKeybind;\n\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustDownMinor), localize LSTRING(AdjustDownMinor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, ELEVATION_DOWN, MINOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [209, [false, false, false]], true] call CBA_fnc_addKeybind;\n\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustLeftMinor), localize LSTRING(AdjustLeftMinor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, WINDAGE_LEFT, MINOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [209, [false, true, false]], true] call CBA_fnc_addKeybind;\n\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustRightMinor), localize LSTRING(AdjustRightMinor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, WINDAGE_RIGHT, MINOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [201, [false, true, false]], true] call CBA_fnc_addKeybind;\n\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustUpMajor), localize LSTRING(AdjustUpMajor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, ELEVATION_UP, MAJOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [201, [true, false, false]], true] call CBA_fnc_addKeybind;\n\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustDownMajor), localize LSTRING(AdjustDownMajor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, ELEVATION_DOWN, MAJOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [209, [true, false, false]], true] call CBA_fnc_addKeybind;\n\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustLeftMajor), localize LSTRING(AdjustLeftMajor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, WINDAGE_LEFT, MAJOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [209, [true, true, false]], true] call CBA_fnc_addKeybind;\n\n    [\"ACE3 Scope Adjustment\", QGVAR(AdjustRightMajor), localize LSTRING(AdjustRightMajor), {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if (!([ACE_player] call CBA_fnc_canUseWeapon)) exitWith {false};\n\n        [ACE_player] call FUNC(inventoryCheck);\n\n        // Statement\n        [ACE_player, WINDAGE_RIGHT, MAJOR_INCREMENT] call FUNC(adjustScope);\n    }, {false}, [201, [true, true, false]], true] call CBA_fnc_addKeybind;\n\n\n    // Register fire event handler\n    [\"ace_firedPlayer\", DFUNC(firedEH)] call CBA_fnc_addEventHandler;\n    [\"ace_firedPlayerNonLocal\", DFUNC(firedEH)] call CBA_fnc_addEventHandler;\n\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_adjustScope.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Ruthberg\n * Changes the adjustment for the current scope\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Turret and Direction <NUMBER>\n * 2: Major Step <BOOL>\n *\n * Return Value:\n * Did we adjust anything? <BOOL>\n *\n * Example:\n * [player, ELEVATION_UP, false] call ace_scopes_fnc_adjustScope\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_turretAndDirection\", \"_majorStep\"];\n\nif (!(_unit isKindOf \"Man\")) exitWith {false};\nif (currentMuzzle _unit != currentWeapon _unit) exitWith {false};\nif (!GVAR(enabled)) exitWith {false};\n\nprivate _weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith {false};\n\nif (!(GVAR(canAdjustElevation) select _weaponIndex) && (_turretAndDirection in [ELEVATION_UP, ELEVATION_DOWN])) exitWith {false};\nif (!(GVAR(canAdjustWindage) select _weaponIndex) && (_turretAndDirection in [WINDAGE_UP, WINDAGE_DOWN])) exitWith {false};\n\nprivate _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _zeroing = _adjustment select _weaponIndex;\n_zeroing params [\"_elevation\", \"_windage\", \"_zero\"];\n\n(GVAR(scopeAdjust) select _weaponIndex) params [\"_maxVertical\", \"_verticalIncrement\", \"_maxHorizontal\", \"_horizontalIncrement\"];\n\nswitch (_turretAndDirection) do {\n    case ELEVATION_UP:   { _elevation = _elevation + _verticalIncrement };\n    case ELEVATION_DOWN: { _elevation = _elevation - _verticalIncrement };\n    case WINDAGE_LEFT:   { _windage = _windage - _horizontalIncrement };\n    case WINDAGE_RIGHT:  { _windage = _windage + _horizontalIncrement };\n};\n\nif (_majorStep) then {\n    switch (_turretAndDirection) do {\n        case ELEVATION_UP:   { _elevation = ceil(_elevation) };\n        case ELEVATION_DOWN: { _elevation = floor(_elevation) };\n        case WINDAGE_LEFT:   { _windage = floor(_windage) };\n        case WINDAGE_RIGHT:  { _windage = ceil(_windage) };\n    };\n};\n\n_elevation = round(_elevation * 10) / 10;\n_windage = round(_windage * 10) / 10;\n\nif ((_elevation + _zero) < _maxVertical select 0 or (_elevation + _zero) > _maxVertical select 1) exitWith {false};\nif (_windage < _maxHorizontal select 0 or _windage > _maxHorizontal select 1) exitWith {false};\n\n[_unit, _elevation, _windage, _zero] call FUNC(applyScopeAdjustment);\n\ntrue\n",
        "functionName": "ace_scopes_fnc_adjustScope"
      },
      {
        "fileName": "fnc_adjustZero.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Ruthberg\n * Updates the zero adjustment of the current scope\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * true <BOOL>\n *\n * Example:\n * [player] call ace_scopes_fnc_adjustZero\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (vehicle _unit != _unit) exitWith {false};\n\nprivate _weaponClass = currentWeapon _unit;\nprivate _weaponIndex = [_unit, _weaponClass] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith {false};\n\nprivate _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _zeroing = _adjustment select _weaponIndex;\n_zeroing params [\"_elevation\", \"_windage\", \"_zero\"];\n\n_zero = round((_zero + _elevation) * 10) / 10;\n_elevation = 0;\n\nprivate _opticsClass = ([_unit] call FUNC(getOptics)) select _weaponIndex;\nif (_zero != 0) then {\n    profileNamespace setVariable [format[QGVAR(PersistentZero_%1_%2), _weaponClass, _opticsClass], _zero];\n} else {\n    profileNamespace setVariable [format[QGVAR(PersistentZero_%1_%2), _weaponClass, _opticsClass], nil];\n};\n\n[_unit, _elevation, _windage, _zero] call FUNC(applyScopeAdjustment);\n\ntrue\n",
        "functionName": "ace_scopes_fnc_adjustZero"
      },
      {
        "fileName": "fnc_applyScopeAdjustment.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Ruthberg\n * Applies the adjustment for the current scope\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Absolute elevation <NUMBER>\n * 2: Absolute windage <NUMBER>\n * 3: Absolute zero reference <NUMBER>\n *\n * Return Value:\n * True <BOOL>\n *\n * Example:\n * [player, 1.3, 0.3, 0.1] call ace_scopes_fnc_applyScopeAdjustment\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_elevation\", \"_windage\", \"_zero\"];\n\nprivate _weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\n\nprivate _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _adjustmentDifference = (_adjustment select _weaponIndex) vectorDiff [_elevation, _windage, _zero];\nif (_adjustmentDifference isEqualTo [0,0,0]) exitWith {false};  // Don't coninue if no adjustment is made\n\n_adjustment set [_weaponIndex, [_elevation, _windage, _zero]];\n[_unit, QGVAR(Adjustment), _adjustment, 0.5] call EFUNC(common,setVariablePublic);\n\nplaySound selectRandom [\"ACE_Scopes_Click_1\", \"ACE_Scopes_Click_2\", \"ACE_Scopes_Click_3\"];\n\n// slightly rotate the player if looking through optic\nif (cameraView == \"GUNNER\") then {\n    if (!GVAR(simplifiedZeroing)) then {\n        // Convert adjustmentDifference from mils to degrees\n        _adjustmentDifference = _adjustmentDifference apply {MRAD_TO_DEG(_x)};\n        _adjustmentDifference params [\"_elevationDifference\", \"_windageDifference\"];\n        private _pitchBankYaw = [_unit] call EFUNC(common,getPitchBankYaw);\n        _pitchBankYaw params [\"_pitch\", \"_bank\", \"_yaw\"];\n        _pitch = _pitch + _elevationDifference;\n        _yaw = _yaw + _windageDifference;\n        [_unit, _pitch, _bank, _yaw] call EFUNC(common,setPitchBankYaw);\n    };\n} else {\n    [] call FUNC(showZeroing);\n};\n\ntrue\n",
        "functionName": "ace_scopes_fnc_applyScopeAdjustment"
      },
      {
        "fileName": "fnc_calculateZeroAngleCorrection.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the zero angle correction for the new zero range based on current zero range and bore height (distance between bore- and sight axis)\n *\n * Arguments:\n * 0: Zero range <NUMBER>\n * 1: Bore height <NUMBER>\n * 2: Weapon <OBJECT>\n * 3: Ammo <CLASS>\n * 4: Magazine <CLASS>\n * 5: Advanced Ballistics enabled? <BOOL>\n *\n * Return Value:\n * zeroAngleCorrection <NUMBER>\n *\n * Example:\n * [5, 6, gun, ammo, magazine, true] call ace_scopes_fnc_calculateZeroAngleCorrection\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_oldZeroRange\", \"_newZeroRange\", \"_boreHeight\"/*in cm*/, \"_weapon\", \"_ammo\", \"_magazine\", \"_advancedBallistics\"];\n\nprivate _airFriction = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\");\nprivate _initSpeed = getNumber(configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\nprivate _initSpeedCoef = getNumber(configFile >> \"CfgWeapons\" >> _weapon >> \"initSpeed\");\nif (_initSpeedCoef > 0) then {\n    _initSpeed = _initSpeedCoef;\n};\nif (_initSpeedCoef < 0) then {\n    _initSpeed = _initSpeed * (-1 * _initSpeedCoef);\n};\n\nprivate _zeroAngle = \"ace_advanced_ballistics\" callExtension format [\"replicateVanillaZero:%1:%2:%3\", _oldZeroRange, _initSpeed, _airFriction];\nprivate _vanillaZero = parseNumber _zeroAngle;\n\n#ifdef DISABLE_DISPERSION\n    _vanillaZero = 0;\n#endif\n\nprivate _trueZero = if (!_advancedBallistics) then {\n    _zeroAngle = \"ace_advanced_ballistics\" callExtension format [\"calcZero:%1:%2:%3:%4\", _newZeroRange, _initSpeed, _airFriction, _boreHeight];\n    (parseNumber _zeroAngle)\n} else {\n    // Get Weapon and Ammo Configurations\n    private _AmmoCacheEntry = uiNamespace getVariable format[QEGVAR(advanced_ballistics,%1), _ammo];\n    if (isNil \"_AmmoCacheEntry\") then {\n         _AmmoCacheEntry = _ammo call EFUNC(advanced_ballistics,readAmmoDataFromConfig);\n    };\n    private _WeaponCacheEntry = uiNamespace getVariable format[QEGVAR(advanced_ballistics,%1), _weapon];\n    if (isNil \"_WeaponCacheEntry\") then {\n         _WeaponCacheEntry = _weapon call EFUNC(advanced_ballistics,readWeaponDataFromConfig);\n    };\n\n    _AmmoCacheEntry params [\"_airFriction\", \"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_transonicStabilityCoef\", \"_dragModel\", \"_ballisticCoefficients\", \"_velocityBoundaries\", \"_atmosphereModel\", \"_ammoTempMuzzleVelocityShifts\", \"_muzzleVelocityTable\", \"_barrelLengthTable\", \"_muzzleVelocityVariationSD\"];\n    _WeaponCacheEntry params [\"_barrelTwist\", \"_twistDirection\", \"_barrelLength\"];\n\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,barrelLengthInfluenceEnabled), false]) then {\n        private _barrelVelocityShift = [_barrelLength, _muzzleVelocityTable, _barrelLengthTable, _initSpeed] call EFUNC(advanced_ballistics,calculateBarrelLengthVelocityShift);\n        _initSpeed = _initSpeed + _barrelVelocityShift;\n    };\n\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,ammoTemperatureEnabled), false]) then {\n        private _ammoTemperatureVelocityShift = ([_ammoTempMuzzleVelocityShifts, GVAR(zeroReferenceTemperature)] call EFUNC(advanced_ballistics,calculateAmmoTemperatureVelocityShift));\n        _initSpeed = _initSpeed + _ammoTemperatureVelocityShift;\n    };\n\n    _zeroAngle = \"ace_advanced_ballistics\" callExtension format [\"calcZeroAB:%1:%2:%3:%4:%5:%6:%7:%8:%9\", _newZeroRange, _initSpeed, _boreHeight, GVAR(zeroReferenceTemperature), GVAR(zeroReferenceBarometricPressure), GVAR(zeroReferenceHumidity), _ballisticCoefficients select 0, _dragModel, _atmosphereModel];\n    (parseNumber _zeroAngle)\n};\n\nprivate _zeroAngleCorrection = _trueZero - _vanillaZero;\n\nmissionNamespace setVariable [format[QGVAR(%1_%2_%3_%4_%5_%6_%7), _oldZeroRange, _newZeroRange, _boreHeight, _weapon, _ammo, _magazine, _advancedBallistics], _zeroAngleCorrection];\n\n_zeroAngleCorrection\n",
        "functionName": "ace_scopes_fnc_calculateZeroAngleCorrection"
      },
      {
        "fileName": "fnc_canAdjustZero.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Ruthberg\n * Checks if the unit can change the zero adjustment of the current scope\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Can we update the zero reference? <BOOL>\n *\n * Example:\n * [player] call ace_scopes_fnc_canAdjustZero\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (cameraView == \"GUNNER\") exitWith {false};\nif (vehicle _unit != _unit) exitWith {false};\nif (GVAR(simplifiedZeroing)) exitWith {false};\nif (!(missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) exitWith {false};\n\nprivate _weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith {false};\n\nprivate _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _elevation = (_adjustment select _weaponIndex) select 0;\n\n// You can only adjust your zero reference, if your relative elevation setting is not 0\n_elevation != 0\n",
        "functionName": "ace_scopes_fnc_canAdjustZero"
      },
      {
        "fileName": "fnc_canResetZero.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Ruthberg\n * Checks if the unit can reset the zero adjustment of the current scope\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Can we reset the zero reference? <BOOL>\n *\n * Example:\n * [player] call ace_scopes_fnc_canResetZero\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (cameraView == \"GUNNER\") exitWith {false};\nif (vehicle _unit != _unit) exitWith {false};\nif (!(missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) exitWith {false};\n\nprivate _weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith {false};\n\nprivate _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _zero = (_adjustment select _weaponIndex) select 2;\n\n// You can only reset your zero reference, if it is not 0 already\n_zero != 0\n",
        "functionName": "ace_scopes_fnc_canResetZero"
      },
      {
        "fileName": "fnc_firedEH.sqf",
        "content": "/*\n * Author: KoffeinFlummi, esteldunedain, Ruthberg\n * Adjusts the flight path of the bullet according to the zeroing. Called from the unified fired EH only for local and non-local players on foot.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_scopes_fnc_firedEH\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nif (!(_ammo isKindOf \"BulletBase\")) exitWith {};\n\nprivate _weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith {};\n\nprivate _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _zeroing = +(_adjustment select _weaponIndex);\nTRACE_1(\"Adjusting With\",_zeroing);\n\n// Convert zeroing from mils to degrees\n_zeroing = _zeroing vectorMultiply MRAD_TO_DEG(1);\n\nif (GVAR(correctZeroing) || GVAR(simplifiedZeroing)) then {\n    private _advancedBallistics = missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false];\n    private _baseAngle = GVAR(baseAngle) select _weaponIndex; \n    private _boreHeight = GVAR(boreHeight) select _weaponIndex;\n    private _oldZeroRange = currentZeroing _unit;\n    private _newZeroRange = [_unit] call FUNC(getCurrentZeroRange);\n    private _zeroCorrection = missionNamespace getVariable format[QGVAR(%1_%2_%3_%4_%5_%6_%7), _oldZeroRange, _newZeroRange, _boreHeight, _weapon, _ammo, _magazine, _advancedBallistics];\n    if (isNil \"_zeroCorrection\") then {\n         _zeroCorrection = [_oldZeroRange, _newZeroRange, _boreHeight, _weapon, _ammo, _magazine, _advancedBallistics] call FUNC(calculateZeroAngleCorrection);\n    };\n    if (GVAR(simplifiedZeroing)) then {\n        _zeroing = [0, 0, _zeroCorrection - _baseAngle];\n    } else {\n        _zeroing = _zeroing vectorAdd [0, 0, _zeroCorrection - _baseAngle];\n    };\n#ifdef DISABLE_DISPERSION\n    _projectile setVelocity (_unit weaponDirection currentWeapon _unit) vectorMultiply (vectorMagnitude (velocity _projectile));\n#endif\n};\n\nif (_zeroing isEqualTo [0, 0, 0]) exitWith {};\n\n_zeroing params [\"_elevation\", \"_windage\", \"_zero\"];\n\n[_projectile, _windage, _elevation + _zero, 0] call EFUNC(common,changeProjectileDirection);\n",
        "functionName": "ace_scopes_fnc_firedEH"
      },
      {
        "fileName": "fnc_getBaseAngle.sqf",
        "content": "/*\n * Author: Ruthberg\n * Gets the base angle of the currently used weapon & optic combination\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon index <NUMBER>\n * 2: Weapon <CLASS>\n * 3: Optic <CLASS>\n *\n * Return Value:\n * base angle <NUMBER>\n *\n * Example:\n * [player, 0, \"srifle_LRR_F\", \"optic_LRPS\"] call ace_scopes_fnc_getBaseAngle\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_weaponIndex\", \"_weaponClass\", \"_opticsClass\"];\n\nprivate _weaponConfig = configFile >> \"CfgWeapons\" >> _weaponClass;\nprivate _baseAngle = getNumber(_weaponConfig >> \"ACE_IronSightBaseAngle\");\n\nif (_opticsClass != \"\") then {\n    if (isNumber (_weaponConfig >> \"ACE_RailBaseAngle\")) then {\n        _baseAngle = getNumber(_weaponConfig >> \"ACE_RailBaseAngle\");\n    } else {\n        _baseAngle = DEFAULT_RAIL_BASE_ANGLE;\n    };\n};\n\n_baseAngle\n",
        "functionName": "ace_scopes_fnc_getBaseAngle"
      },
      {
        "fileName": "fnc_getBoreHeight.sqf",
        "content": "/*\n * Author: Ruthberg\n * Gets the bore height of the currently used weapon & optic combination\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon index <NUMBER>\n * 2: Weapon <CLASS>\n * 3: Optic <CLASS>\n *\n * Return Value:\n * bore height <NUMBER>\n *\n * Example:\n * [player, 0, \"srifle_LRR_F\", \"optic_LRPS\"] call ace_scopes_fnc_getBoreHeight\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\", \"_weaponIndex\", \"_weaponClass\", \"_opticsClass\"];\n\nif (_opticsClass == \"\") then { _opticsClass = _weaponClass; };\n\n// Determine rail height above bore\nprivate _railHeightAboveBore = 0;\nprivate _weaponConfig = configFile >> \"CfgWeapons\" >> _weaponClass;\nif (isNumber (_weaponConfig >> \"ACE_RailHeightAboveBore\")) then {\n    _railHeightAboveBore = getNumber(_weaponConfig >> \"ACE_RailHeightAboveBore\");\n} else {\n    switch (_weaponIndex) do {\n        case 0: { _railHeightAboveBore = 3.0; }; // Rifle\n        case 2: { _railHeightAboveBore = 0.7; }; // Pistol\n    };\n};\n// Determine scope height above rail\nprivate _scopeHeightAboveRail = 0;\nprivate _opticConfig = configFile >> \"CfgWeapons\" >> _opticsClass;\nif (isNumber (_opticConfig >> \"ACE_ScopeHeightAboveRail\")) then {\n    _scopeHeightAboveRail = getNumber(_opticConfig >> \"ACE_ScopeHeightAboveRail\");\n} else {\n    switch (getNumber(_opticConfig >> \"ItemInfo\" >> \"opticType\")) do {\n        case 1: { _scopeHeightAboveRail = 4.5; }; // RCO or similar\n        case 2: { _scopeHeightAboveRail = 4.0; }; // High power scope\n        default {\n            switch (_weaponIndex) do {\n                case 0: { _scopeHeightAboveRail = 2.0; }; // Rifle iron sights\n                case 2: { _scopeHeightAboveRail = 1.0; }; // Pistol iron sights\n            };\n        };\n    };\n};\n\n(_railHeightAboveBore + _scopeHeightAboveRail)\n",
        "functionName": "ace_scopes_fnc_getBoreHeight"
      },
      {
        "fileName": "fnc_getCurrentZeroRange.sqf",
        "content": "/*\n * Author: Ruthberg\n * Gets the zero range of the currently used optic\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * current zero range <NUMBER>\n *\n * Example:\n * [player] call ace_scopes_fnc_getCurrentZeroRange\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!GVAR(enabled)) exitWith { currentZeroing _unit };\n\nprivate _weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith { currentZeroing _unit };\nif (GVAR(simplifiedZeroing)) exitWith {\n    private _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\n    ((_adjustment select _weaponIndex) select 0)\n};\n\nprivate _optic = GVAR(Optics) select _weaponIndex;\nprivate _opticConfig = if (_optic != \"\") then {\n    (configFile >> \"CfgWeapons\" >> _optic)\n} else {\n    (configFile >> \"CfgWeapons\" >> (GVAR(Guns) select _weaponIndex))\n};\n\nprivate _zeroRange = currentZeroing _unit;\nif (GVAR(overwriteZeroRange) && {GVAR(canAdjustElevation) select _weaponIndex}) then {\n    _zeroRange = GVAR(defaultZeroRange);\n};\nif (isNumber (_opticConfig >> \"ACE_ScopeZeroRange\")) then {\n    _zeroRange = getNumber(_opticConfig >> \"ACE_ScopeZeroRange\");\n};\n\n_zeroRange\n",
        "functionName": "ace_scopes_fnc_getCurrentZeroRange"
      },
      {
        "fileName": "fnc_getOptics.sqf",
        "content": "/*\n * Author: commy2\n * Gets the optic classnames of all currently equipped weapons.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * 0: Optic of primary <STRING>\n * 1: Optic of secondary <STRING>\n * 2: Optic of handgun <STRING>\n *\n * Example:\n * [player] call ace_scopes_fnc_getOptics\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _optics = [\"\", \"\", \"\"];\n\nif (!(_unit isKindOf \"CAManBase\")) exitWith {_optics};\n\n{\n    if (count _x >= 2) then {\n        _optics set [_forEachIndex, _x select 2];\n    };\n} forEach [primaryWeaponItems _unit, secondaryWeaponItems _unit, handgunItems _unit];\n\n_optics\n",
        "functionName": "ace_scopes_fnc_getOptics"
      },
      {
        "fileName": "fnc_initModuleSettings.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg\n * Module for adjusting the scopes settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_scopes_fnc_initModuleSettings\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\",\"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(forceUseOfAdjustmentTurrets), \"forceUseOfAdjustmentTurrets\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(correctZeroing), \"correctZeroing\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(overwriteZeroRange), \"overwriteZeroRange\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(defaultZeroRange), \"defaultZeroRange\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(zeroReferenceTemperature), \"zeroReferenceTemperature\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(zeroReferenceBarometricPressure), \"zeroReferenceBarometricPressure\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(zeroReferenceHumidity), \"zeroReferenceHumidity\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(deduceBarometricPressureFromTerrainAltitude), \"deduceBarometricPressureFromTerrainAltitude\"] call EFUNC(common,readSettingFromModule);\nGVAR(defaultZeroRange) = 0 max GVAR(defaultZeroRange) min 1000;\nGVAR(zeroReferenceTemperature) = -55 max GVAR(zeroReferenceTemperature) min 55;\nGVAR(zeroReferenceBarometricPressure) = 0 max GVAR(zeroReferenceBarometricPressure) min 1013.25;\nGVAR(zeroReferenceHumidity) = 0 max GVAR(zeroReferenceHumidity) min 1.0;\n",
        "functionName": "ace_scopes_fnc_initModuleSettings"
      },
      {
        "fileName": "fnc_inventoryCheck.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Commy2, Ruthberg\n * Check if weapon optics changed and reset zeroing if needed\n *\n * Arguments:\n * 0: Player <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_scopes_fnc_inventoryCheck\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_player\"];\n\nprivate _adjustment = ACE_player getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _updateAdjustment = false;\n\nprivate _newOptics = [_player] call FUNC(getOptics);\n{\n    if (_newOptics select _forEachIndex != _x) then {\n        private _opticConfig = configFile >> \"CfgWeapons\" >> (_newOptics select _forEachIndex);\n        private _opticType = getNumber(_opticConfig >> \"ItemInfo\" >> \"opticType\");\n        private _maxVertical = [];\n        private _verticalIncrement = -1;\n        private _maxHorizontal = [];\n        private _horizontalIncrement = -1;\n        if (GVAR(simplifiedZeroing)) then {\n            private _maxDistanceZoomMax = 300;\n            private _maxDiscreteDistanceSize = 0;\n            {\n                _maxDistanceZoomMax = _maxDistanceZoomMax max (getNumber ( _x >> \"distanceZoomMax\"));\n                _maxDiscreteDistanceSize = _maxDiscreteDistanceSize max (count getArray (_x >> \"discreteDistance\"));\n            } forEach (\"isArray (_x >> 'discreteDistance')\" configClasses (_opticConfig >> \"ItemInfo\" >> \"OpticsModes\"));\n            if (_maxDiscreteDistanceSize < 2 && {getNumber (_opticConfig >> \"ACE_ScopeAdjust_VerticalIncrement\") != 0}) then {\n                _maxVertical = [50, _maxDistanceZoomMax];\n                _verticalIncrement = 50;\n            } else {\n                _maxVertical = [0, 0];\n                _verticalIncrement = 0;\n            };\n            _maxHorizontal = [0, 0];\n            _horizontalIncrement = 0;\n        } else {\n            if (isNumber (_opticConfig >> \"ACE_ScopeAdjust_VerticalIncrement\")) then {\n                _verticalIncrement = getNumber (_opticConfig >> \"ACE_ScopeAdjust_VerticalIncrement\");\n            };\n            if (isNumber (_opticConfig >> \"ACE_ScopeAdjust_HorizontalIncrement\")) then {\n                _horizontalIncrement = getNumber (_opticConfig >> \"ACE_ScopeAdjust_HorizontalIncrement\");\n            };\n            if (isArray (_opticConfig >> \"ACE_ScopeAdjust_Vertical\")) then {\n                _maxVertical = getArray (_opticConfig >> \"ACE_ScopeAdjust_Vertical\");\n            };\n            if (isArray (_opticConfig >> \"ACE_ScopeAdjust_Horizontal\")) then {\n                _maxHorizontal = getArray (_opticConfig >> \"ACE_ScopeAdjust_Horizontal\");\n            };\n            if (GVAR(forceUseOfAdjustmentTurrets) && _opticType == 2) then {\n                if (_maxVertical   isEqualTo []) then { _maxVertical   = [-4, 30]; };\n                if (_maxHorizontal isEqualTo []) then { _maxHorizontal = [-6,  6]; };\n                if (_verticalIncrement   == -1) then { _verticalIncrement   = 0.1; };\n                if (_horizontalIncrement == -1) then { _horizontalIncrement = 0.1; };\n            } else {\n                if (_maxVertical   isEqualTo []) then { _maxVertical   = [0, 0]; };\n                if (_maxHorizontal isEqualTo []) then { _maxHorizontal = [0, 0]; };\n                if (_verticalIncrement   == -1) then { _verticalIncrement   = 0; };\n                if (_horizontalIncrement == -1) then { _horizontalIncrement = 0; };\n            };\n        };\n        (GVAR(scopeAdjust) select _forEachIndex) set [0, _maxVertical];\n        (GVAR(scopeAdjust) select _forEachIndex) set [1, _verticalIncrement];\n        (GVAR(scopeAdjust) select _forEachIndex) set [2, _maxHorizontal];\n        (GVAR(scopeAdjust) select _forEachIndex) set [3, _horizontalIncrement];\n        GVAR(canAdjustElevation) set [_forEachIndex, (_verticalIncrement > 0) && !(_maxVertical isEqualTo [0, 0])];\n        GVAR(canAdjustWindage) set [_forEachIndex, (_horizontalIncrement > 0) && !(_maxHorizontal isEqualTo [0, 0])];\n    };\n} forEach GVAR(Optics);\n\nprivate _newGuns = [primaryWeapon _player, secondaryWeapon _player, handgunWeapon _player];\n{\n    if ((_newOptics select _x) != (GVAR(Optics) select _x) || (_newGuns select _x != GVAR(Guns) select _x)) then {\n        GVAR(baseAngle) set [_x, [_player, _x, _newGuns select _x, _newOptics select _x] call FUNC(getBaseAngle)]; \n        GVAR(boreHeight) set [_x, [_player, _x, _newGuns select _x, _newOptics select _x] call FUNC(getBoreHeight)];\n\n        if ((_newOptics select _x) == \"\") then {\n            // Check if the weapon comes with an integrated optic     \n            private _weaponConfig = configFile >> \"CfgWeapons\" >> (_newGuns select _x); \n            private _maxVertical = [0, 0];\n            private _verticalIncrement = 0;\n            private _maxHorizontal = [0, 0];\n            private _horizontalIncrement = 0;\n            if (GVAR(simplifiedZeroing)) then {\n                private _maxZeroing = 300 max (getNumber (_weaponConfig >> \"maxZeroing\"));\n                private _maxDiscreteDistanceSize = count getArray (configFile >> \"CfgWeapons\" >> (_newGuns select _x) >> \"discreteDistance\");\n                if (_maxDiscreteDistanceSize < 2 && {getNumber (_weaponConfig >> \"ACE_ScopeAdjust_VerticalIncrement\") != 0}) then {\n                    _maxVertical = [50, _maxZeroing];\n                    _verticalIncrement = 50;\n                };\n            } else {\n                _verticalIncrement = getNumber (_weaponConfig >> \"ACE_ScopeAdjust_VerticalIncrement\");\n                _horizontalIncrement = getNumber (_weaponConfig >> \"ACE_ScopeAdjust_HorizontalIncrement\");\n                _maxVertical = getArray (_weaponConfig >> \"ACE_ScopeAdjust_Vertical\");\n                _maxHorizontal = getArray (_weaponConfig >> \"ACE_ScopeAdjust_Horizontal\");\n            };\n            TRACE_5(\"\",_newGuns select _x,_verticalIncrement,_horizontalIncrement,_maxVertical,_maxHorizontal);\n            (GVAR(scopeAdjust) select _x) set [0, _maxVertical];\n            (GVAR(scopeAdjust) select _x) set [1, _verticalIncrement];\n            (GVAR(scopeAdjust) select _x) set [2, _maxHorizontal];\n            (GVAR(scopeAdjust) select _x) set [3, _horizontalIncrement];\n            GVAR(canAdjustElevation) set [_x, (_verticalIncrement > 0) && !(_maxVertical isEqualTo [0, 0])];\n            GVAR(canAdjustWindage) set [_x, (_horizontalIncrement > 0) && !(_maxHorizontal isEqualTo [0, 0])];\n        };\n        \n        // The optic or the weapon changed, reset the adjustment\n        private _persistentZero = profileNamespace getVariable [format[QGVAR(PersistentZero_%1_%2), _newGuns select _x, _newOptics select _x], 0];\n        ((GVAR(scopeAdjust) select _x) select 0) params [\"_minElevation\", \"_maxElevation\"];\n        if (!(_persistentZero isEqualType 0) || {_persistentZero < _minElevation || _persistentZero > _maxElevation}) then {\n            _persistentZero = 0;\n        };\n        private _defaultElevation = [0, 300] select GVAR(simplifiedZeroing);\n        if (!((_adjustment select _forEachIndex) isEqualTo [_defaultElevation, 0, _persistentZero])) then {\n            _adjustment set [_forEachIndex, [_defaultElevation, 0, _persistentZero]];\n            _updateAdjustment = true;\n        };\n    }\n} forEach [0, 1, 2];\n\nif (_updateAdjustment) then {\n    [ACE_player, QGVAR(Adjustment), _adjustment, 0.5] call EFUNC(common,setVariablePublic);\n};\n\nGVAR(Optics) = _newOptics;\nGVAR(Guns) = _newGuns;\n",
        "functionName": "ace_scopes_fnc_inventoryCheck"
      },
      {
        "fileName": "fnc_resetZero.sqf",
        "content": "/*\n * Author: KoffeinFlummi, Ruthberg\n * Resets the zero adjustment of the current scope\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * true <BOOL>\n *\n * Example:\n * [player] call ace_scopes_fnc_resetZero\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (vehicle _unit != _unit) exitWith {false};\n\nprivate _weaponClass = currentWeapon _unit;\nprivate _weaponIndex = [_unit, _weaponClass] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith {false};\n\nprivate _adjustment = _unit getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\nprivate _zeroing = _adjustment select _weaponIndex;\n_zeroing params [\"_elevation\", \"_windage\", \"_zero\"];\n\n_elevation = round((_zero + _elevation) * 10) / 10;\n_zero = 0;\n\nprivate _opticsClass = ([_unit] call FUNC(getOptics)) select _weaponIndex;\nprofileNamespace setVariable [format[QGVAR(PersistentZero_%1_%2), _weaponClass, _opticsClass], nil];\n\n[_unit, _elevation, _windage, _zero] call FUNC(applyScopeAdjustment);\n\ntrue\n",
        "functionName": "ace_scopes_fnc_resetZero"
      },
      {
        "fileName": "fnc_showZeroing.sqf",
        "content": "/*\n * Author: KoffeinFlummi, esteldunedain\n * Display the adjustment knobs, update their value and fade them out later\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_scopes_fnc_showZeroing\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nprivate _weaponIndex = [ACE_player, currentWeapon ACE_player] call EFUNC(common,getWeaponIndex);\nif (_weaponIndex < 0) exitWith {};\n\nprivate _adjustment = ACE_player getVariable [QGVAR(Adjustment), [[0, 0, 0], [0, 0, 0], [0, 0, 0]]];\n\n// Display the adjustment knobs\nprivate _layer = [QGVAR(Zeroing)] call BIS_fnc_rscLayer;\n_layer cutRsc [QGVAR(Zeroing), \"PLAIN\", 0, false];\n\n// Find the display\nprivate _display = uiNamespace getVariable [QGVAR(ZeroingDisplay), displayNull];\nif (isNull _display) exitWith {};\n\n// Update values\nprivate _zeroing = _adjustment select _weaponIndex;\n_zeroing params [\"_elevation\", \"_windage\"];\nprivate _vertical = _display displayCtrl 12;\nprivate _horizontal = _display displayCtrl 13;\nif (GVAR(simplifiedZeroing)) then {\n    _vertical ctrlSetText format[\"%1 m\", round(_elevation)];\n    _horizontal ctrlSetText \"\";\n} else {\n    if (GVAR(useLegacyUI)) then {\n        _vertical ctrlSetText (str _elevation);\n        _horizontal ctrlSetText (str _windage);\n    } else {\n        if (_elevation == 0) then {\n            _vertical ctrlSetText \"0\";\n        } else {\n            if (_elevation > 0) then {\n                _vertical ctrlSetText (str _elevation);\n            } else {\n                _vertical ctrlSetText format[localize LSTRING(DisplayAdjustmentDown), abs(_elevation)];\n            };\n        };\n        if (_windage == 0) then {\n            _horizontal ctrlSetText \"0\";\n        } else {\n            if (_windage > 0) then {\n                _horizontal ctrlSetText format[localize LSTRING(DisplayAdjustmentRight), abs(_windage)];\n            } else {\n                _horizontal ctrlSetText format[localize LSTRING(DisplayAdjustmentLeft), abs(_windage)];\n            };\n        };\n    };\n};\n\n// Set the time when to hide the knobs\nGVAR(timeToHide) = diag_tickTime + 3.0;\n\nif !(isNil QGVAR(fadePFH)) exitWith {};\n\n// Launch a PFH to wait and fade out the knobs\nGVAR(fadePFH) = [{\n    if (diag_tickTime >= GVAR(timeToHide)) exitWith {\n        private _pfhId = _this select 1;\n        private _layer = [QGVAR(Zeroing)] call BIS_fnc_rscLayer;\n        _layer cutFadeOut 2;\n\n        GVAR(fadePFH) = nil;\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\n    };\n}, 0.1, []] call CBA_fnc_addPerFrameHandler\n",
        "functionName": "ace_scopes_fnc_showZeroing"
      }
    ]
  },
  {
    "component": "slideshow",
    "files": [
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(slideshows) = 0;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addSlideActions.sqf",
        "content": "/*\n * Author: Jonpas\n * Adds controller slide actions.\n *\n * Arguments:\n * 0: Objects <ARRAY>\n * 1: Images <ARRAY>\n * 2: Names <ARRAY>\n * 3: Controller <OBJECT>\n * 4: Current Slideshow <NUMBER>\n *\n * Return Value:\n * List of actions <ARRAY>\n *\n * Example:\n * [[object], [\"image\"], [\"name\"], controller, 1] call ace_slideshow_fnc_addSlideActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_objects\", \"_images\", \"_names\", \"_controller\", \"_currentSlideshow\"];\n\nprivate _actions = [];\n{\n    _actions pushBack\n    [\n        [\n            format [QGVAR(slideshow%1_slide%2), _currentSlideshow, _forEachIndex + 1],\n            _names select _forEachIndex,\n            \"\",\n            {\n                (_this select 2) params [\"_objects\", \"_image\"];\n                {\n                    _x setObjectTextureGlobal [0, _image]\n                } count _objects;\n            },\n            {true},\n            {},\n            [_objects, _x]\n        ] call EFUNC(interact_menu,createAction),\n        [],\n        _controller\n    ];\n} forEach _images;\n\nTRACE_1(\"Children actions\",_actions);\n\n_actions\n",
        "functionName": "ace_slideshow_fnc_addSlideActions"
      },
      {
        "fileName": "fnc_autoTransition.sqf",
        "content": "/*\n * Author: Jonpas\n * Handles automatic slide transitions using waitAndExecute in a PFH-like manner resulting in no performance loss.\n *\n * Arguments:\n * 0: Objects <ARRAY>\n * 1: Image Paths <ARRAY>\n * 2: State Variable Name <ARRAY>\n * 3: Duration <NUMBER> (0 disables automatic transitions)\n *\n * Return Value:\n * None\n *\n * Example:\n * [objects, images, \"ace_slideshow_slideshow1\", duration] call ace_slideshow_fnc_autoTransition\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_objects\", \"_images\", \"_varString\", \"_duration\"];\n\n// Get current slide number of this slideshow\nprivate _currentSlide = missionNamespace getVariable [_varString, 0];\n\n// Increment slide or return to first slide if reached end\n_currentSlide = (_currentSlide + 1) mod (count _images);\n\n// Save slide back into global variable (PFH's local variables do not persist through PFH run)\nmissionNamespace setVariable [_varString, _currentSlide];\n\n// Set slide\n{\n    _x setObjectTextureGlobal [0, _images select _currentSlide];\n} count _objects;\n\n// Log current slide and execute Next slide\nTRACE_4(\"Auto-transition\",_images select _currentSlide,_currentSlide,count _images,_duration);\n[FUNC(autoTransition), [_objects, _images, _varString, _duration], _duration] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_slideshow_fnc_autoTransition"
      },
      {
        "fileName": "fnc_createSlideshow.sqf",
        "content": "/*\n * Author: Jonpas, DaC\n * Prepares necessary variables and default image.\n *\n * Arguments:\n * 0: Objects <ARRAY>\n * 1: Controller Objects <ARRAY>\n * 2: Image Paths <ARRAY>\n * 3: Action Names <ARRAY>\n * 4: Slide Duration <NUMBER> (0 disables automatic transitions)\n * 5: Set Name <STRING> (default: localized \"Slides\")\n *\n * Return Value:\n * None\n *\n * Example:\n * [[object1, object2, object3], [controller1], [\"images\\image1.paa\", \"images\\image2.paa\"], [\"Action1\", \"Action2\"], 5, \"My Slides\"] call ace_slideshow_fnc_createSlideshow\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\n    [\"_objects\", [], [[]] ],\n    [\"_controllers\", [], [[]] ],\n    [\"_images\", [], [[]] ],\n    [\"_names\", [], [[]] ],\n    [\"_duration\", 0, [0]],\n    [\"_setName\", localize LSTRING(Interaction), [\"\"]]\n];\n\n// Verify data\nif (_objects isEqualTo []) exitWith {\n    ERROR(\"Slideshow Objects field must NOT be empty!\");\n};\nif (count _images != count _names || {_images isEqualTo []} || {_names isEqualTo []}) exitWith {\n    ERROR(\"Slideshow Images or Names fields must NOT be empty and must have equal number of items!\");\n};\n\n// If no controllers use objects as controllers\nif (_controllers isEqualTo []) then {\n    _controllers = _objects;\n};\n\nTRACE_5(\"Information\",_objects,_controllers,_images,_names,_setName);\n\nif (isServer) then {\n    // Default images on whiteboards (first image)\n    {\n        _x setObjectTextureGlobal [0, _images select 0];\n    } count _objects;\n\n    // Number of slideshows (multiple modules support)\n    GVAR(slideshows) = GVAR(slideshows) + 1;\n};\n\nprivate _currentSlideshow = GVAR(slideshows); // Local variable in case GVAR gets changed during execution of below code\n\n// If interaction menu module is not present, set default duration value\nif !([\"ace_interact_menu\"] call EFUNC(common,isModLoaded)) then {\n    _duration = NOINTERACTMENU_DURATION;\n    INFO_1(\"Interaction Menu module not present, defaulting duration value to %1\",_duration);\n};\n\n// Add interactions if automatic transitions are disabled, else setup automatic transitions\nif (_duration == 0) then {\n    {\n        if (_setName == \"\") then {\n            _setName = localize LSTRING(Interaction);\n        };\n\n        // Add Slides sub-action and populate with images\n        private _slidesAction = [\n            format [QGVAR(slideshow%1), _currentSlideshow],\n            _setName,\n            \"\",\n            {},\n            {true},\n            {(_this select 2) call FUNC(addSlideActions)},\n            [_objects, _images, _names, _x, _currentSlideshow],\n            [0, 0, 0],\n            2\n        ] call EFUNC(interact_menu,createAction);\n        [_x, 0, [\"ACE_MainActions\"], _slidesAction] call EFUNC(interact_menu,addActionToObject);\n        nil\n    } count _controllers;\n} else {\n    if !(isServer) exitWith {};\n\n    // Formatted GVAR string (multiple modules support)\n    private _varString = format [QGVAR(slideshow%1), _currentSlideshow];\n    TRACE_1(\"Current Slide\",_varString);\n\n    // Set formatted GVAR to first slide\n    missionNamespace setVariable [_varString, 0];\n\n    // Automatic transitions handler\n    [FUNC(autoTransition), [_objects, _images, _varString, _duration], _duration] call CBA_fnc_waitAndExecute;\n};\n",
        "functionName": "ace_slideshow_fnc_createSlideshow"
      },
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: Jonpas\n * Initializes the module.\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: Units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_slideshow_fnc_moduleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Exit on Headless Client\nif (!hasInterface && !isDedicated) exitWith {};\n\nparams [[\"_logic\", objNull, [objNull]], \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\nif (isNull _logic) exitWith {};\n\n// Extract variables from logic\nprivate _objects = [_logic getVariable [\"Objects\", \"\"], true, true] call EFUNC(common,parseList);\nprivate _controllers = [_logic getVariable [\"Controllers\", \"\"], true, true] call EFUNC(common,parseList);\nprivate _images = [_logic getVariable [\"Images\", \"\"], false, false] call EFUNC(common,parseList);\nprivate _names = [_logic getVariable [\"Names\", \"\"], false, false] call EFUNC(common,parseList);\nprivate _setName = _logic getVariable [\"SetName\", \"\"];\nprivate _duration = _logic getVariable [\"Duration\", 0];\n\n// Objects synced to the module\n{\n    _objects pushBack _x;\n    nil\n} count (synchronizedObjects _logic);\n\n// Prepare with actions\n[_objects, _controllers, _images, _names, _duration, _setName] call FUNC(createSlideshow);\n\nINFO_1(\"Slideshow Module Initialized on %1 Objects\", count _objects);\n",
        "functionName": "ace_slideshow_fnc_moduleInit"
      }
    ]
  },
  {
    "component": "smallarms",
    "files": [],
    "functions": []
  },
  {
    "component": "spectator",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_settingsInitialized\", {\n    GVAR(availableModes) = [[0,1,2], [1,2], [0], [1], [2]] select GVAR(restrictModes);\n    GVAR(availableVisions) = [[-2,-1,0,1], [-2,-1], [-2,0,1], [-2]] select GVAR(restrictVisions);\n}] call CBA_fnc_addEventHandler;\n\nif (isServer) then {\n    // Create a radio channel for any spectators to text chat in\n    GVAR(channel) = radioChannelCreate [[0.729,0.149,0.098,1],\"Spectator\",\"Spectator (%UNIT_NAME)\",[]];\n    publicVariable QGVAR(channel);\n\n    // Used by the template to transfer zeus to virtual unit\n    // Commands must be ran on server\n    [QGVAR(transferZeus),{\n        unassignCurator (_this select 1);\n\n        // Can only re-assign when ready\n        [\n            {isNull getAssignedCuratorUnit (_this select 0)},\n            {(_this select 0) assignCurator (_this select 1)},\n            _this\n        ] call CBA_fnc_waitUntilAndExecute;\n    }] call CBA_fnc_addEventHandler;\n};\n\n[QGVAR(stageSpectator), FUNC(stageSpectator)] call CBA_fnc_addEventHandler;\n\n// A virtual spectator cannot exist without an interface\nif (hasInterface) then {\n    // Local player (not ACE_Player) must be initalized to check\n    [\n        { !isNull player },\n        {\n            if (player isKindOf QGVAR(virtual)) then { [true] call FUNC(setSpectator); };\n        }\n    ] call CBA_fnc_waitUntilAndExecute;\n};\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// Used by public functions\nGVAR(availableModes) = [MODE_FREE, MODE_FPS, MODE_FOLLOW];\nGVAR(availableSides) = [west,east,resistance,civilian];\nGVAR(availableVisions) = [VISION_NORM,VISION_NVG,0,1];\nGVAR(interrupts) = [];\nGVAR(unitBlacklist) = [];\nGVAR(unitWhitelist) = [];\n\n// Tracks whether spectator is active\nGVAR(isSet) = false;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_cam_prepareTarget.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Moves the spectator camera to a position relative to the camera focus.\n * Used for 3PP camera and teleporting, etc.\n *\n * Arguments:\n * 0: New Target <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_spectator_fnc_cam_prepareTarget\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _focus = vehicle (param [0, objNull, [objNull]]);\n\nif !(isNull _focus) then {\n    // Interpolate zoom\n    private _zoom = [0, GVAR(camDistance)] select (GVAR(camMode) == MODE_FOLLOW);\n    private _zoomTemp = GVAR(camDistanceTemp);\n\n    if (_zoomTemp != _zoom) then {\n        _zoomTemp = [_zoomTemp, _zoom, 10, GVAR(camDeltaTime)] call BIS_fnc_lerp;\n        GVAR(camDistanceTemp) = _zoomTemp;\n    };\n\n    // The distance at which to place camera from the focus pivot\n    private _bbd = [_focus] call BIS_fnc_getObjectBBD;\n    private _distance = (_bbd select 1) + _zoomTemp;\n\n    // The pivot on the target vehicle\n    private _isMan = _focus isKindOf \"Man\";\n    private _height = if !(_isMan) then { (_bbd select 2) / 3 } else { switch (stance _focus) do { case \"STAND\": {1.4}; case \"CROUCH\": {0.8}; default {0.4}; }; };\n\n    private _center = if (_isMan) then { AGLToASL (_focus modelToWorldVisual (_focus selectionPosition \"Spine3\")) } else { AGLToASL (_focus modelToWorldVisual [0,0,_height]) };\n\n    // Set dummy location and rotation\n    private _dummy = GVAR(camDummy);\n\n    _dummy setPosASL _center;\n    [_dummy, [GVAR(camYaw), GVAR(camPitch), 0]] call BIS_fnc_setObjectRotation;\n\n    // Apply location and rotation to camera\n    GVAR(camera) setPosASL (AGLToASL (_dummy modelToWorldVisual [0, -_distance, 0]));\n    GVAR(camera) setVectorDirAndUp [vectorDirVisual _dummy, vectorUpVisual _dummy];\n};\n",
        "functionName": "ace_spectator_fnc_cam_prepareTarget"
      },
      {
        "fileName": "fnc_cam_resetTarget.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Removes the current camera interest and detaches dummy target.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_cam_resetTarget\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _camera = GVAR(camera);\nprivate _dummy = GVAR(camDummy);\n\nif !(isNull _camera || isNull _dummy) then {\n    _camera camPrepareTarget objNull;\n    _camera camCommitPrepared 0;\n\n    detach _dummy;\n\n    GVAR(camHasTarget) = false;\n};\n",
        "functionName": "ace_spectator_fnc_cam_resetTarget"
      },
      {
        "fileName": "fnc_cam_setCameraMode.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to select the camera mode\n *\n * Intended to run even if new mode == old mode, as it handles focus\n *\n * Arguments:\n * 0: New camera mode <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [1] call ace_spectator_fnc_cam_setCameraMode\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_newMode\"];\n\nprivate _oldMode = GVAR(camMode);\nprivate _modes = GVAR(availableModes);\nprivate _focus = GVAR(camFocus);\n\n// If new mode isn't available then keep current (unless current also isn't)\nif !(_newMode in _modes) then {\n    _newMode = _modes select ((_modes find _oldMode) max 0);\n};\n\n// Can't switch camera from free mode with no focus selected\nif (!isNull _focus || _newMode == MODE_FREE) then {\n    private _camera = GVAR(camera);\n    private _showHUD = [true,true,true,true,true,true,true,true];\n\n    if (_newMode == MODE_FPS) then {\n        _camera cameraEffect [\"Terminate\", \"BACK\"];\n        _focus switchCamera \"INTERNAL\";\n\n        // Reset vision mode\n        [VISION_NORM] call FUNC(cam_setVisionMode);\n\n        [] call FUNC(cam_resetTarget);\n\n        // Disable camera input\n        _camera camCommand \"manual off\";\n\n        // Hide all unit/group information in first person view\n        _showHUD = [true,false,false,false,false,false,false,true];\n    };\n\n    if (_newMode == MODE_FOLLOW) then {\n        _camera cameraEffect [\"Internal\", \"BACK\"];\n        _focus switchCamera \"EXTERNAL\";\n\n        [] call FUNC(cam_resetTarget);\n\n        // Disable camera input\n        _camera camCommand \"manual off\";\n    };\n\n    if (_newMode == MODE_FREE) then {\n        _camera cameraEffect [\"Internal\", \"BACK\"];\n        player switchCamera \"INTERNAL\";\n        _camera setDir getDirVisual _camera;\n\n        if (!isNull _focus) then {\n            if (_oldMode == MODE_FPS) then {\n                [_focus] call FUNC(cam_prepareTarget);\n            };\n            [_focus] call FUNC(cam_setTarget);\n        };\n\n        // Enable camera input\n        _camera camCommand \"manual on\";\n    };\n\n    // Update the HUD\n    cameraEffectEnableHUD true;\n    showHUD _showHUD;\n    GVAR(camMode) = _newMode;\n\n    // Only update display if it exists, this function is independent of it\n    if !(isNull SPEC_DISPLAY) then {\n        [] call FUNC(ui_updateCamButtons);\n        [] call FUNC(ui_updateHelp);\n    };\n};\n",
        "functionName": "ace_spectator_fnc_cam_setCameraMode"
      },
      {
        "fileName": "fnc_cam_setTarget.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Sets the current camera interest using dummy target.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_spectator_fnc_cam_setTarget\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define CAMERA_TARGET_CHANGE_TIME 0.5\n\nparams [\"_object\"];\n\nprivate _camera = GVAR(camera);\nprivate _dummy = GVAR(camDummy);\nprivate _location = _object worldToModel (_object modelToWorldVisual (_object selectionPosition \"Head\"));\n\nif (!isNull _camera && !isNull _dummy) then {\n    _dummy attachTo [vehicle _object, _location];\n    _camera camPrepareTarget _dummy;\n    _camera camCommitPrepared CAMERA_TARGET_CHANGE_TIME;\n\n    GVAR(camhasTarget) = true;\n};\n",
        "functionName": "ace_spectator_fnc_cam_setTarget"
      },
      {
        "fileName": "fnc_cam_setVisionMode.sqf",
        "content": "/*\n * Author: SilentSpike\n * Function used to select the camera vision mode\n *\n * Arguments:\n * 0: New vision mode <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [-1] call ace_spectator_fnc_cam_setVisionMode\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_newVision\"];\n\nprivate _oldVision = GVAR(camVision);\nprivate _visions = GVAR(availableVisions);\n\n// If new vision isn't available then keep current (unless current also isn't)\nif !(_newVision in _visions) then {\n    _newVision = _visions select ((_visions find _oldVision) max 0);\n};\n\n// Vision mode does not apply to fps view\nif (GVAR(camMode) != MODE_FPS) then {\n    // 0+ are all thermal vision types\n    if (_newVision < 0) then {\n        false setCamUseTi 0;\n        camUseNVG (_newVision >= VISION_NVG);\n    } else {\n        true setCamUseTi _newVision;\n    };\n\n    // Give user feedback that vision mode changed\n    if (_newVision != _oldVision) then {\n        playSound \"RscDisplayCurator_visionMode\";\n\n        GVAR(camVision) = _newVision;\n    };\n};\n",
        "functionName": "ace_spectator_fnc_cam_setVisionMode"
      },
      {
        "fileName": "fnc_cam_tick.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to perform camera ticks\n *\n * Updates camera position in follow mode\n * Updates camera focus if current focus becomes null (in unit modes)\n * Updates camera when focus enters/exits a vehicle\n * Updates camera lights position\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * addMissionEventHandler [\"EachFrame\", {call ace_spectator_fnc_cam_tick}]\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nBEGIN_COUNTER(camTick);\nprivate _cameraMode = GVAR(camMode);\nprivate _camTarget = GVAR(camFocus);\n\n// UI mouse handler makes use of delta time between camera ticks\nprivate _currentTime = diag_tickTime;\nGVAR(camDeltaTime) = _currentTime - GVAR(camLastTickTime);\nGVAR(camLastTickTime) = _currentTime;\n\n\n// If no focus in unit camera modes try to find a new one\nif (_cameraMode != MODE_FREE) then {\n    private _focus = if (isNull _camTarget) then {\n        private _testFocus = ([] call FUNC(getTargetEntities)) select 0;\n        if (isNil \"_testFocus\") then {\n            objNull\n        } else {\n            _testFocus\n        }\n    } else {\n        _camTarget\n    };\n\n    // If new focus was found then switch to it\n    if (!isNull _focus && {_focus != _camTarget}) then {\n        [_focus] call FUNC(setFocus);\n    };\n\n    // Update the follow camera position\n    if (!isNull _focus && {_cameraMode == MODE_FOLLOW}) then {\n        [_focus] call FUNC(cam_prepareTarget);\n    };\n};\n\n// Refresh the local variable\n_camTarget = GVAR(camFocus);\n\n// Focus get in / out of vehicle state\nif !(isNull _camTarget) then {\n    private _targetInVeh = GVAR(camTargetInVehicle);\n\n    if (GVAR(camHasTarget)) then {\n        if (!_targetInVeh && { vehicle _camTarget != _camTarget }) then {\n            [_camTarget] call FUNC(cam_setTarget);\n            GVAR(camTargetInVehicle) = true;\n        };\n\n        if (_targetInVeh && { vehicle _camTarget == _camTarget }) then {\n            [_camTarget] call FUNC(cam_setTarget);\n            GVAR(camTargetInVehicle) = false;\n        };\n    };\n} else {\n    GVAR(camTargetInVehicle) = false;\n};\n\n// Camera lights\nif (count GVAR(camLights) > 1) then {\n    (GVAR(camLights) select 1) setPosASL (AGLToASL (screenToWorld getMousePosition));\n};\nEND_COUNTER(camTick);\n",
        "functionName": "ace_spectator_fnc_cam_tick"
      },
      {
        "fileName": "fnc_cam_toggleSlow.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Function used to set camera slow speed mode\n *\n * Arguments:\n * 0: Enable slow speed <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_spectator_fnc_cam_toggleSlow\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_slowSpeed\"];\n\nif !(GVAR(camSlow) isEqualTo _slowSpeed) then {\n    private _camera = GVAR(camera);\n\n    if (GVAR(camMode) == MODE_FREE) then {\n        GVAR(camSlow) = _slowSpeed;\n\n        if (_slowSpeed) then {\n            _camera camCommand format [\"speedDefault %1\", SPEED_SLOW];\n        } else {\n           _camera camCommand format [\"speedDefault %1\", SPEED_DEFAULT];\n        };\n    } else {\n        _camera camCommand format [\"speedDefault %1\", SPEED_DEFAULT];\n        GVAR(camSlow) = false;\n    };\n};\n",
        "functionName": "ace_spectator_fnc_cam_toggleSlow"
      },
      {
        "fileName": "fnc_cam.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Handles camera initialisation and destruction\n *\n * Arguments:\n * 0: Init/Terminate <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_spectator_fnc_cam\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_init\"];\nTRACE_1(\"cam\",_init);\n\n// No change\nif (_init isEqualTo !isNil QGVAR(camera)) exitWith {};\n\n// Note that init and destroy intentionally happen in reverse order\n// Init: Vars > Camera > Camera Stuff\n// Destroy: Camera Stuff > Camera > Vars\nif (_init) then {\n    // Start tracking camera attributes if not pre-set by public function\n    ISNILS(GVAR(camMode),MODE_FREE);\n    ISNILS(GVAR(camVision),VISION_NORM);\n    ISNILS(GVAR(camFocus),objNull);\n\n    // Ticking related\n    GVAR(camDeltaTime)          = 0;\n    GVAR(camLastTickTime)       = 0;\n    GVAR(camHasTarget)          = false;\n    GVAR(camTargetInVehicle)    = false;\n\n    // Follow camera related\n    GVAR(camDistance)           = 0;\n    GVAR(camDistanceTemp)       = 0;\n    GVAR(camYaw)                = 0;\n    GVAR(camPitch)              = 0;\n\n    // Toggles\n    GVAR(camSlow)               = false;\n    GVAR(camLights)             = [];\n    GVAR(camLight)              = false;\n\n    // Handle pre-set pos and dir (delete GVARs when done)\n    private _pos = if (isNil QGVAR(camPos)) then {eyePos player} else {GVAR(camPos)};\n    private _dir = if (isNil QGVAR(camDir)) then {getDirVisual player} else {GVAR(camDir)};\n    GVAR(camPos) = nil;\n    GVAR(camDir) = nil;\n\n    // Create the camera (CamCurator required for engine driven controls)\n    private _camera = \"CamCurator\" camCreate _pos;\n\n    if (isNull _camera) exitWith { ERROR(\"Camera wasn't created successfully\"); };\n\n    // Switch to the camera and set its attributes\n    _camera cameraEffect [\"internal\", \"back\"];\n    _camera setPosASL _pos;\n    _camera setDir _dir;\n    _camera camCommand \"maxPitch 89\";\n    _camera camCommand \"minPitch -89\";\n    _camera camCommand format [\"speedDefault %1\", SPEED_DEFAULT];\n    _camera camCommand format [\"speedMax %1\", SPEED_FAST];\n    _camera camCommand \"ceilingHeight 5000\";\n    cameraEffectEnableHUD true;\n\n    // If camera followed terrain it would be annoying to track units, etc.\n    _camera camCommand \"atl off\";\n\n    // Camera speed should be consistent irrespective of height (painfully slow otherwise)\n    _camera camCommand \"surfaceSpeed off\";\n\n    // Store camera\n    GVAR(camera) = _camera;\n\n    // Create dummy target used for follow camera\n    GVAR(camDummy) = \"Logic\" createVehicleLocal getPosASLVisual GVAR(camFocus);\n\n    // Handle initial camera mode limitation\n    if !(GVAR(camMode) in GVAR(availableModes)) then {\n        GVAR(camMode) = GVAR(availableModes) select 0;\n    };\n\n    // If inital camera mode is not free cam and no focus, find initial focus\n    if (GVAR(camMode) != MODE_FREE && isNull GVAR(camFocus)) then {\n        [true] call FUNC(setFocus);\n    };\n\n    // Set the initial camera mode (could be pre-set or limited)\n    [GVAR(camMode)] call FUNC(cam_setCameraMode);\n\n    // Handle initial vision mode limitation\n    if !(GVAR(camVision) in GVAR(availableVisions)) then {\n        GVAR(camVision) = GVAR(availableVisions) select 0;\n    };\n\n    // Set the initial vision mode (could be pre-set or limited)\n    [GVAR(camVision)] call FUNC(cam_setVisionMode);\n\n    // Start ticking (follow camera requires EachFrame to avoid jitter)\n    GVAR(camTick) = addMissionEventHandler [\"EachFrame\", {call FUNC(cam_tick)}];\n} else {\n    // Stop ticking\n    removeMissionEventHandler [\"EachFrame\", GVAR(camTick)];\n    GVAR(camTick) = nil;\n\n    // Return to player view\n    if !(isNull GVAR(camera)) then {\n        GVAR(camera) cameraEffect [\"terminate\", \"back\"];\n        deleteVehicle GVAR(camera);\n    };\n    player switchCamera \"internal\";\n\n    // Remove camera variable\n    GVAR(camera) = nil;\n\n    // Destroy dummy target\n    deleteVehicle (GVAR(camDummy));\n    GVAR(camDummy) = nil;\n\n    // Stop tracking everything\n    GVAR(camMode)               = nil;\n    GVAR(camVision)             = nil;\n    GVAR(camFocus)              = nil;\n    GVAR(camDeltaTime)          = nil;\n    GVAR(camLastTickTime)       = nil;\n    GVAR(camHasTarget)          = nil;\n    GVAR(camTargetInVehicle)    = nil;\n    GVAR(camDistance)           = nil;\n    GVAR(camDistanceTemp)       = nil;\n    GVAR(camYaw)                = nil;\n    GVAR(camPitch)              = nil;\n    GVAR(camSlow)               = nil;\n    GVAR(camLights)             = nil;\n    GVAR(camLight)              = nil;\n};\n",
        "functionName": "ace_spectator_fnc_cam"
      },
      {
        "fileName": "fnc_compat_counter.sqf",
        "content": "/*\n * Author: SilentSpike\n * Handles integrating the counter respawn template into the spectator UI\n *\n * Should be called from both RscRespawnCounter XEH and spectator init to account for arbitrary order\n *\n * Arguments:\n * 0: RscRespawnCounter <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [GETUVAR(RscRespawnCounter,displayNull)] call ace_spectator_fnc_compat_counter\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define IDC_COUNTER_TITLE 1001\n#define IDC_COUNTER_BACK 1002\n#define IDC_COUNTER_TEXT 1003\n\nparams [\"_display\"];\n\nif (isNull _display) exitWith {};\n\n{\n    private _ctrl = _display displayCtrl _x;\n\n    (ctrlPosition _ctrl) params [\"_xOld\",\"\",\"_w\",\"_h\"];\n\n    // Center controls at top middle of screen\n    _ctrl ctrlSetPosition [_xOld, safeZoneY, _w, _h];\n    _ctrl ctrlCommit 0;\n} forEach [IDC_COUNTER_TITLE, IDC_COUNTER_BACK, IDC_COUNTER_TEXT];\n",
        "functionName": "ace_spectator_fnc_compat_counter"
      },
      {
        "fileName": "fnc_compat_spectatorBI.sqf",
        "content": "/*\n * Author: SilentSpike\n * Handles \"compatibility\" (i.e. override) for BI spectator respawn types 1, 4 & 5\n *\n * Called from the RscDisplayEGSpectator XEH\n *\n * Arguments:\n * 0: RscDisplayEGSpectator <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_compat_spectatorBI\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _respawn = getMissionConfigValue [\"respawn\",0];\nif (_respawn isEqualType \"\") then { _respawn = [\"\",\"bird\",\"\",\"\",\"group\",\"side\"] find (toLower _respawn); };\nif !(_respawn in [1,4,5]) exitWith {};\n\n// Remember to check for side specific templates\nprivate _templates = getMissionConfigValue [[\"respawnTemplates\",side group player] joinString \"\",getMissionConfigValue [\"respawnTemplates\",[]]];\nif !(QUOTE(ADDON) in _templates) exitWith {};\n\n// Kill BI spectator\n[\"Terminate\"] call BIS_fnc_EGSpectator;\n\n// Start our spectator\n[true] call FUNC(setSpectator);\n\n// Delete the seagull that spawns (not actually the player, a CfgNonAIVehicles object)\n// Respawn type 1 is handled in the template where seagull is passed as paremeter\nif (_respawn in [4,5]) then {\n    // This could delete seagulls created by a wildlife module (a necessary evil)\n    // TODO: Try to find seagull position and delete more accurately with reduced radius\n    { if (_x isKindOf \"seagull\") then {deleteVehicle _x;}; } forEach (nearestObjects [player, [], 250]);\n};\n\n// Switch to a virtual unit so draw3D continues to work\nprivate _grp = createGroup [sideLogic, true];\nprivate _virtual = _grp createUnit [QGVAR(virtual),[0,0,0],[],0,\"\"];\n\n// Transfer assigned zeus if applicable\nprivate _zeus = getAssignedCuratorLogic player;\nif !(isNull _zeus) then {\n    [QGVAR(transferZeus), [_virtual,_zeus]] call CBA_fnc_serverEvent;\n};\n\nselectPlayer _virtual;\n",
        "functionName": "ace_spectator_fnc_compat_spectatorBI"
      },
      {
        "fileName": "fnc_compat_zeus.sqf",
        "content": "/*\n * Author: SilentSpike\n * Handles compatibility with curator interface (i.e. re-opens spectator if applicable)\n *\n * Called from the RscDisplayCurator XEH\n *\n * Arguments:\n * 0: RscDisplayCurator <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_compat_zeus\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"Unload\",{\n    // Only re-open if still a spectator (and not remote-controlling)\n    if (GVAR(isSet) && {isNull (GETMVAR(bis_fnc_moduleRemoteControl_unit,objNull))}) then {\n        // Display must be opened next frame to prevent game crash\n        [{\n            // Reset the camera and vision modes\n            [GVAR(camMode)] call FUNC(cam_setCameraMode);\n            [GVAR(camVision)] call FUNC(cam_setVisionMode);\n            [true] call FUNC(ui);\n        }] call CBA_fnc_execNextFrame;\n    };\n}];\n",
        "functionName": "ace_spectator_fnc_compat_zeus"
      },
      {
        "fileName": "fnc_getCameraAttributes.sqf",
        "content": "/*\n * Author: SilentSpike\n * Returns the current spectator camera attributes (see setCameraAttributes for details).\n *\n * Arguments:\n * None\n *\n * Return Value:\n * [Mode, Focus, Vision, Position, Direction] <ARRAY>\n *\n * Example:\n * [] call ace_spectator_fnc_getCameraAttributes\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nif !(isNil QGVAR(camera)) then {\n    [GVAR(camMode), GVAR(camFocus), GVAR(camVision), getPosATL GVAR(camera), getDirVisual GVAR(camera)]\n} else {\n    // These values could be pre-set by function\n    [\n        GETMVAR(GVAR(camMode),0),\n        GETMVAR(GVAR(camFocus),objNull),\n        GETMVAR(GVAR(camVision),-2),\n        GETMVAR(GVAR(camPos),[ARR_3(0,0,0)]),\n        GETMVAR(GVAR(camDir),0)\n    ]\n};\n",
        "functionName": "ace_spectator_fnc_getCameraAttributes"
      },
      {
        "fileName": "fnc_getGroupIcon.sqf",
        "content": "/*\n * Author: SilentSpike\n * Function used to get an appropriate icon for provided group. Approximate.\n *\n * Arguments:\n * 0: Group to get the icon of <GROUP>\n * 1: Return icons for draw3D use <BOOL> (Default: false)\n *\n * Return Value:\n * Icon of group <STRING>\n *\n * Examples:\n * [group player] call ace_spectator_fnc_getGroupIcon\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define ICON_PATH(var1) QUOTE(a3\\ui_f\\data\\Map\\Markers\\NATO\\var1)\n\n// Military icons\n#define ICON_UNKNOWN [ICON_PATH(b_unknown.paa), QPATHTOF(data\\b_unknown.paa)] select _forDraw\n#define ICON_UAV [ICON_PATH(b_uav.paa), QPATHTOF(data\\b_uav.paa)] select _forDraw\n#define ICON_SUPPORT [ICON_PATH(b_support.paa), QPATHTOF(data\\b_support.paa)] select _forDraw\n#define ICON_SERVICE [ICON_PATH(b_service.paa), QPATHTOF(data\\b_service.paa)] select _forDraw\n#define ICON_RECON [ICON_PATH(b_recon.paa), QPATHTOF(data\\b_recon.paa)] select _forDraw\n#define ICON_PLANE [ICON_PATH(b_plane.paa), QPATHTOF(data\\b_plane.paa)] select _forDraw\n#define ICON_NAVAL [ICON_PATH(b_naval.paa), QPATHTOF(data\\b_naval.paa)] select _forDraw\n#define ICON_MOTOR_INF [ICON_PATH(b_motor_inf.paa), QPATHTOF(data\\b_motor_inf.paa)] select _forDraw\n#define ICON_MORTAR [ICON_PATH(b_mortar.paa), QPATHTOF(data\\b_mortar.paa)] select _forDraw\n#define ICON_MED [ICON_PATH(b_med.paa), QPATHTOF(data\\b_med.paa)] select _forDraw\n#define ICON_MECH_INF [ICON_PATH(b_mech_inf.paa), QPATHTOF(data\\b_mech_inf.paa)] select _forDraw\n#define ICON_MAINT [ICON_PATH(b_maint.paa), QPATHTOF(data\\b_maint.paa)] select _forDraw\n#define ICON_INSTALLATION [ICON_PATH(b_installation.paa), QPATHTOF(data\\b_installation.paa)] select _forDraw\n#define ICON_INF [ICON_PATH(b_inf.paa), QPATHTOF(data\\b_inf.paa)] select _forDraw\n#define ICON_ART [ICON_PATH(b_art.paa), QPATHTOF(data\\b_art.paa)] select _forDraw\n#define ICON_ARMOR [ICON_PATH(b_armor.paa), QPATHTOF(data\\b_armor.paa)] select _forDraw\n#define ICON_AIR [ICON_PATH(b_air.paa), QPATHTOF(data\\b_air.paa)] select _forDraw\n\n// Civilian icons\n#define CIV_ICON_UNKNOWN [ICON_PATH(c_unknown.paa), QPATHTOF(data\\c_unknown.paa)] select _forDraw\n#define CIV_ICON_AIR [ICON_PATH(c_air.paa), QPATHTOF(data\\c_air.paa)] select _forDraw\n#define CIV_ICON_CAR [ICON_PATH(c_car.paa), QPATHTOF(data\\c_car.paa)] select _forDraw\n#define CIV_ICON_PLANE [ICON_PATH(c_plane.paa), QPATHTOF(data\\c_plane.paa)] select _forDraw\n#define CIV_ICON_SHIP [ICON_PATH(c_ship.paa), QPATHTOF(data\\c_ship.paa)] select _forDraw\n\nparams [[\"_group\", grpNull, [grpNull]], [\"_forDraw\", false, [true]]];\n\n// Handle empty or null group\nprivate _leader = leader _group;\nif (isNull _leader) exitWith { [ICON_UNKNOWN, CIV_ICON_UNKNOWN] select (side _group == civilian) };\n\n// Civilians are easy, just check leader's vehicle (unlikely group is large)\nif (side _group == civilian) exitWith {\n    if (_leader != vehicle _leader) then {\n        // More common cases should be checked first\n        (vehicle _leader) call {\n            if (_this isKindOf \"Car\") exitWith {\n                CIV_ICON_CAR\n            };\n\n            // Plane inherits Air, check first\n            if (_this isKindOf \"Plane\") exitWith {\n                CIV_ICON_PLANE\n            };\n\n            if (_this isKindOf \"Air\") exitWith {\n                CIV_ICON_AIR\n            };\n\n            if (_this isKindOf \"Ship\") exitWith {\n                CIV_ICON_SHIP\n            };\n\n            CIV_ICON_UNKNOWN\n        };\n    } else {\n        CIV_ICON_UNKNOWN\n    };\n};\n\n// Handle military groups\nprivate _units = units _group;\nprivate _vehicles = (_units apply { vehicle _x }) - _units;\n\n// If more than 33% of the group is mounted, use most common vehicle\nif (count _vehicles >= 0.33 * count _units) exitWith {\n    // Check the most likely cases first\n    _vehicles call {\n        private _threshold = 0.5 * count _this;\n\n        if (\"Car\" countType _this >= _threshold) exitWith {\n            ICON_MOTOR_INF\n        };\n\n        // APC inherits Tank, check first\n        if (\"APC\" countType _this >= _threshold) exitWith {\n            ICON_MECH_INF\n        };\n\n        // MBT_01_arty_base_F inherits Tank, check first\n        // Unfortunately no common arty class to check\n        if (\"MBT_01_arty_base_F\" countType _this >= _threshold) exitWith {\n            ICON_ART\n        };\n        if (\"MBT_02_arty_base_F\" countType _this >= _threshold) exitWith {\n            ICON_ART\n        };\n\n        if (\"Tank\" countType _this >= _threshold) exitWith {\n            ICON_ARMOR\n        };\n\n        // UAV inherits Plane, check first\n        if (\"UAV\" countType _this >= _threshold) exitWith {\n            ICON_UAV\n        };\n\n        // Plane inherits Air, check first\n        if (\"Plane\" countType _this >= _threshold) exitWith {\n            ICON_PLANE\n        };\n\n        if (\"Air\" countType _this >= _threshold) exitWith {\n            ICON_AIR\n        };\n\n        if (\"Ship\" countType _this >= _threshold) exitWith {\n            ICON_NAVAL\n        };\n\n        // StaticMortar inherits StaticWeapon, check first\n        if (\"StaticMortar\" countType _this >= _threshold) exitWith {\n            ICON_MORTAR\n        };\n\n        if (\"StaticWeapon\" countType _this >= _threshold) exitWith {\n            ICON_INSTALLATION\n        };\n\n        // If it reaches here then it's a mixed group of vehicles\n        ICON_UNKNOWN\n    };\n};\n\n// Check leader for medic/engineer/etc, otherwise just default to infantry\nprivate _medic = [_leader] call EFUNC(common,isMedic);\nprivate _engineer = [_leader] call EFUNC(common,isEngineer);\n\nif (_medic && _engineer) exitWith {\n    ICON_SUPPORT\n};\n\nif (_medic) exitWith {\n    ICON_MED\n};\n\nif (_engineer) exitWith {\n    ICON_MAINT\n};\n\nICON_INF\n",
        "functionName": "ace_spectator_fnc_getGroupIcon"
      },
      {
        "fileName": "fnc_getTargetEntities.sqf",
        "content": "/*\n * Author: SilentSpike\n * Gets the possible entities to spectate based on settings.\n * Optionally includes dead units for the list and switching.\n *\n * Arguments:\n * 0: Include dead <BOOL>\n *\n * Return Value:\n * Valid entities <ARRAY>\n *\n * Example:\n * [true] call ace_spectator_fnc_getTargetEntities\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n// Include dead units if specified (used by entity list)\nprivate _entities = allUnits;\nif (param [0,false]) then { _entities append allDeadMen; };\n\n// Quicker to use local vars that are accessed often in iteration\nprivate _sides = GVAR(availableSides);\n\n// Apply entity filtering\n_entities = _entities select {\n    (GVAR(enableAI) || {isPlayer _x}) && // AI setting\n    {(side group _x) in _sides} && // Available sides\n    {simulationEnabled _x && {simulationEnabled vehicle _x}} && // Hide disabled things\n    { !isObjectHidden _x && {!isObjectHidden vehicle _x} } // Hide hidden things\n};\n\n// Respect the blacklist\n_entities = _entities - GVAR(unitBlacklist);\n\n// Whitelist overrides filtering\n_entities append GVAR(unitWhitelist);\n\n// Never include the local player\n_entities deleteAt (_entities find player);\n\n// Return no duplicates\n_entities arrayIntersect _entities\n",
        "functionName": "ace_spectator_fnc_getTargetEntities"
      },
      {
        "fileName": "fnc_handleFired.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to add projectiles to be drawn when a unit fires\n *\n * Arguments:\n * Fired EH arguments\n *\n * Return Value:\n * None\n *\n * Example:\n * _unit addEventHandler [\"Fired\",{_this call ace_spectator_fnc_handleFired}]\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\n    \"_unit\",\n    [\"_weapon\", \"\", [\"\"]],\n    \"\", // Muzzle\n    \"\", // Mode\n    \"\", // Ammo\n    \"\", // Magazine\n    [\"_projectile\", objNull, [objNull]]\n];\n\n// Remove the EH when spectator is no longer active or unit is removed\nif (isNil QGVAR(entitiesToDraw) || {!(_unit in GVAR(entitiesToDraw))}) exitWith {\n    //USES_VARIABLES [\"_thisEventHandler\"]\n    _unit removeEventHandler [\"Fired\", _thisEventHandler];\n    SETVAR(_unit,GVAR(firedEH),nil);\n};\n\n// Fire time used for unit icon highlighting\n_unit setVariable [QGVAR(highlightTime), time + FIRE_HIGHLIGHT_TIME];\n\n// Store projectiles / grenades for drawing\nif (GVAR(drawProjectiles) && {!isNull _projectile}) then {\n    if (_weapon == \"Throw\") then {\n        if (count GVAR(grenadesToDraw) > MAX_GRENADES) then { GVAR(grenadesToDraw) deleteAt 0; };\n        GVAR(grenadesToDraw) pushBack _projectile;\n    } else {\n        if (count GVAR(projectilesToDraw) > MAX_PROJECTILES) then { GVAR(projectilesToDraw) deleteAt 0; };\n        GVAR(projectilesToDraw) pushBack [_projectile, [[getPosVisual _projectile, [1,0,0,0]]]];\n    };\n};\n",
        "functionName": "ace_spectator_fnc_handleFired"
      },
      {
        "fileName": "fnc_interrupt.sqf",
        "content": "/*\n * Author: SilentSpike\n * Deprecated. Technically never publically documented, but just in case.\n */\n#include \"script_component.hpp\"\n\nparams [[\"_reason\", \"\", [\"\"]], [\"_interrupt\", true, [true]]];\n\nACE_DEPRECATED(QFUNC(interrupt),\"3.12.0\",\"just close and reopen spectator\");\n\n// Nothing to do when spectator is closed\nif !(GVAR(isSet)) exitWith {};\n\nif (_reason == \"\") exitWith { WARNING(\"Invalid Reason\"); };\nif (_interrupt) then {\n    GVAR(interrupts) pushBack _reason;\n} else {\n    GVAR(interrupts) = GVAR(interrupts) - [_reason];\n};\n\nif (GVAR(interrupts) isEqualTo []) then {\n    if (isNull SPEC_DISPLAY) then {\n        [true] call FUNC(ui);\n    };\n} else {\n    if !(isNull SPEC_DISPLAY) then {\n        [false] call FUNC(ui);\n    };\n};\n",
        "functionName": "ace_spectator_fnc_interrupt"
      },
      {
        "fileName": "fnc_moduleSpectatorSettings.sqf",
        "content": "/*\n * Author: SilentSpike\n * Read spectator settings from module\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_spectator_fnc_moduleSpectatorSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(enableAI), \"enableAI\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(restrictModes), \"cameraModes\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(restrictVisions), \"visionModes\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_spectator_fnc_moduleSpectatorSettings"
      },
      {
        "fileName": "fnc_players.sqf",
        "content": "/*\n * Author: SilentSpike\n * Return all of the player entities who are currently in ace spectator\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Spectator Players <ARRAY>\n *\n * Example:\n * [] call ace_spectator_fnc_players\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nallPlayers select { GETVAR(_x,GVAR(isSet),false) }\n",
        "functionName": "ace_spectator_fnc_players"
      },
      {
        "fileName": "fnc_respawnTemplate.sqf",
        "content": "/*\n * Author: SilentSpike\n * The ace_spectator respawn template, compatible with types 1,2,3,4 & 5\n *\n * Handles killed and respawned events as per BI's respawn framework:\n * https://community.bistudio.com/wiki/Arma_3_Respawn\n *\n * Arguments:\n * 0: Corpse/New Unit <OBJECT>\n * 1: Killer/Old Unit <OBJECT>\n * 2: Respawn Type <NUMBER>\n * 3: Respawn Delay <NUMBER>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [bob, kevin, 3, 6] call ace_spectator_fnc_respawnTemplate\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_newCorpse\",objNull,[objNull]], [\"_oldKiller\",objNull,[objNull]], [\"_respawn\",0,[0]], [\"_respawnDelay\",0,[0]]];\nTRACE_4(\"respawnTemplate\",_newCorpse,_oldKiller,_respawn,_respawnDelay);\n\n// Compatibility handled via spectator display XEH\nif (_respawn in [0,1,4,5]) exitWith {\n    // This only applies to respawn type 1 (BIRD/SPECTATOR)\n    // Remove the seagull (not actually the player, a CfgNonAIVehicles object)\n    if (typeOf _newCorpse == \"seagull\") then { deleteVehicle _newCorpse; };\n};\n\n// Virtual spectators should be ignored by the template (otherwise they break)\nif (_newCorpse isKindOf QGVAR(virtual)) exitWith {};\n\n// If player died while already in spectator, ignore\nif (!GVAR(isSet) || {alive _newCorpse}) then {\n    // Negligible respawn delay can result in entering spectator after respawn\n    // So we just use this value rather than living state of the unit\n    [playerRespawnTime > 1] call FUNC(setSpectator);\n};\n",
        "functionName": "ace_spectator_fnc_respawnTemplate"
      },
      {
        "fileName": "fnc_setCameraAttributes.sqf",
        "content": "/*\n * Author: SilentSpike\n * Sets the spectator camera attributes as desired. Local effect.\n * All values are optional and default to no change.\n *\n * Arguments:\n * 0: Camera mode <NUMBER>\n *   - 0: Free\n *   - 1: First Person\n *   - 2: Follow\n * 1: Camera focus <OBJECT or BOOL>\n * 2: Camera vision <NUMBER>\n *   - -2: Normal\n *   - -1: Night vision\n *   -  0: Thermal white hot\n *   -  1: Thermal black hot\n *   - ...\n * 3: Camera position (ATL) <ARRAY>\n * 4: Camera direction (0 - 360) <NUMBER>\n *\n * Notes:\n * - If camera mode is not free and camera has no focus, random will be used\n * - To remove any current camera focus in free cam, use objNull\n * - To select a random camera focus, use a boolean\n *\n * Return Value:\n * None\n *\n * Example:\n * [1, objNull] call ace_spectator_fnc_setCameraAttributes\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\n    [\"_mode\",nil,[0]],\n    [\"_focus\",nil,[objNull,true]],\n    [\"_vision\",nil,[0]],\n    [\"_position\",nil,[[]],3],\n    [\"_direction\",nil,[0]]\n];\n\nif (count _this > 5) then {\n    ACE_DEPRECATED(\"Use of \"\"tilt\"\", \"\"zoom\"\" and \"\"speed\"\" camera attributes\",\"3.12.0\",\"N/A\")\n};\n\n// Apply if camera exists\nif !(isNil QGVAR(camera)) then {\n    // These functions are smart and handle unavailable inputs\n    if !(isNil \"_focus\") then {\n        [_focus] call FUNC(setFocus);\n    };\n\n    if !(isNil \"_mode\") then {\n        // If mode not free and no focus, find focus\n        if ((_mode != MODE_FREE) && {isNull GVAR(camFocus)}) then {\n            [true] call FUNC(setFocus);\n        };\n\n        [_mode] call FUNC(cam_setCameraMode);\n    };\n\n    if !(isNil \"_vision\") then {\n        [_vision] call FUNC(cam_setVisionMode);\n    };\n\n    if !(isNil \"_position\") then {\n        GVAR(camera) setPosATL _position;\n    };\n\n    if !(isNil \"_direction\") then {\n        GVAR(camera) setDir _direction;\n    };\n} else {\n    if !(isNil \"_focus\") then {\n        // If there are no entities this becomes nil, handled on camera startup\n        if (_focus isEqualType true) then {\n            _focus = ([] call FUNC(getTargetEntities)) select 0;\n        };\n\n        GVAR(camFocus) = _focus;\n    };\n\n    if !(isNil \"_mode\") then {\n        GVAR(camMode) = _mode;\n    };\n\n    if !(isNil \"_vision\") then {\n        GVAR(camVision) = _vision;\n    };\n\n    // GVARs exits purely for pre-setting of these attributes\n    if !(isNil \"_position\") then {\n        GVAR(camPos) = ATLtoASL _position;\n    };\n\n    if !(isNil \"_direction\") then {\n        GVAR(camDir) = _direction;\n    };\n};\n",
        "functionName": "ace_spectator_fnc_setCameraAttributes"
      },
      {
        "fileName": "fnc_setFocus.sqf",
        "content": "/*\n * Author: AACO, SilentSpike\n * Function used to set the camera focus\n *\n * Arguments:\n * 0: New focus <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_spectator_fnc_setFocus\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_newFocus\", objNull, [objNull,true]]];\n\n// If boolean provided then first find a focus\nif (_newFocus isEqualType true) then {\n    private _testFocus = ([] call FUNC(getTargetEntities)) select 0;\n\n    if (isNil \"_testFocus\") then {\n        if (MODE_FREE in GVAR(availableModes)) then {\n            WARNING(\"No available entities to focus on. Switching to free cam.\");\n            [MODE_FREE] call FUNC(cam_setCameraMode);\n            _newFocus = objNull;\n        } else {\n            // Default to player if necessary\n            WARNING(\"No available entities to focus on. Using player.\");\n            _newFocus = player;\n        };\n    } else {\n        _newFocus = _testFocus;\n    };\n};\n\nif (_newFocus != GVAR(camFocus) && { !(isNull _newFocus && { isNull GVAR(camFocus) }) }) then {\n    GVAR(camFocus) = _newFocus;\n\n    if (isNull _newFocus) then {\n        if (GVAR(camMode) == MODE_FREE) then {\n            [] call FUNC(cam_resetTarget);\n        } else {\n            [MODE_FREE] call FUNC(cam_setCameraMode);\n        };\n    } else {\n        [GVAR(camMode)] call FUNC(cam_setCameraMode);\n    };\n\n    // Only update display if it exists, this function is independent of it\n    if !(isNull SPEC_DISPLAY) then {\n        [] call FUNC(ui_updateListFocus);\n        [] call FUNC(ui_updateWidget);\n        [] call FUNC(ui_updateHelp);\n    };\n};\n",
        "functionName": "ace_spectator_fnc_setFocus"
      },
      {
        "fileName": "fnc_setSpectator.sqf",
        "content": "/*\n * Author: SilentSpike\n * Enter/exit spectator mode for the local player\n *\n * Client will be able to communicate in ACRE/TFAR as appropriate\n * If \"hide player\" is true player will be hidden from group, invisible and invulnerable, but unmoved\n *\n * Arguments:\n * 0: Spectator state of local client <BOOL> (default: true)\n * 1: Force interface <BOOL> (default: true)\n * 2: Hide player (if alive) <BOOL> (default: true)\n *\n * Return Value:\n * None\n *\n * Example:\n * [true] call ace_spectator_fnc_setSpectator\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_set\",true,[true]], [\"_force\",true,[true]], [\"_hide\",true,[true]]];\nTRACE_3(\"Params\",_set,_force,_hide);\n\n// Only clients can be spectators\nif !(hasInterface) exitWith {};\n\n// Let the display know if it is or isn't forced\n// Could be switched after spectator has already started\nGVAR(uiForced) = _force;\n\n// Exit if no change (everything above this may need to be ran again)\nif (_set isEqualTo GVAR(isSet)) exitWith {};\n\n// Delay if local player (must not be ACE_Player) does not exist\nif (isNull player) exitWith {\n    [\n        { !isNull player },\n        FUNC(setSpectator),\n        _this\n    ] call CBA_fnc_waitUntilAndExecute;\n};\n\n// Remove any current deafness and disable volume updates while spectating\nif ([\"ace_hearing\"] call EFUNC(common,isModLoaded)) then {\n    EGVAR(hearing,disableVolumeUpdate) = _set;\n    EGVAR(hearing,deafnessDV) = 0;\n};\n\n// Toggle spectator mode in 3rd party radio addons\nif ([\"acre_sys_radio\"] call EFUNC(common,isModLoaded)) then {[_set] call acre_api_fnc_setSpectator};\nif ([\"task_force_radio\"] call EFUNC(common,isModLoaded)) then {[player, _set] call TFAR_fnc_forceSpectator};\n\nif (_set) then {\n    // Initalize the camera\n    [true] call FUNC(cam);\n\n    // Create the display when main display is ready\n    [{ !isNull MAIN_DISPLAY },{ [true] call FUNC(ui) }] call CBA_fnc_waitUntilAndExecute;\n\n    // Cache current channel to switch back to on exit\n    GVAR(channelCache) = currentChannel;\n\n    // Channel index starts count after the 5 default channels\n    GVAR(channel) radioChannelAdd [player];\n    setCurrentChannel (5 + GVAR(channel));\n\n    // Cache and disable nametag settings\n    if ([\"ace_nametags\"] call EFUNC(common,isModLoaded)) then {\n        GVAR(nametagSettingCache) = [EGVAR(nametags,showPlayerNames), EGVAR(nametags,showNamesForAI)];\n        EGVAR(nametags,showPlayerNames) = 0;\n        EGVAR(nametags,showNamesForAI) = false;\n    };\n} else {\n    // Kill the display (ensure main display exists, handles edge case where spectator turned off beforehand)\n    [{ !isNull MAIN_DISPLAY },{ [false] call FUNC(ui) }] call CBA_fnc_waitUntilAndExecute;\n\n    // This variable doesn't matter anymore\n    GVAR(uiForced) = nil;\n\n    // Terminate camera\n    [false] call FUNC(cam);\n\n    // Remove from spectator chat\n    GVAR(channel) radioChannelRemove [player];\n\n    // Restore cached channel and delete cache\n    setCurrentChannel GVAR(channelCache);\n    GVAR(channelCache) = nil;\n\n    // Reset nametag settings\n    if ([\"ace_nametags\"] call EFUNC(common,isModLoaded)) then {\n        EGVAR(nametags,showPlayerNames) = GVAR(nametagSettingCache) select 0;\n        EGVAR(nametags,showNamesForAI) = GVAR(nametagSettingCache) select 1;\n        GVAR(nametagSettingCache) = nil;\n    };\n};\n\n// Hide/Unhide the player if enabled and alive\nif (alive player) then {\n    private _hidden = (_hide && _set);\n    TRACE_1(\"\",_hidden);\n\n    // Ignore damage (vanilla and ace_medical)\n    player allowDamage !_hidden;\n    player setVariable [QEGVAR(medical,allowDamage), !_hidden];\n\n    // Move to/from group as appropriate\n    [player, _hidden, QGVAR(isSet), side group player] call EFUNC(common,switchToGroupSide);\n\n    // Ghosts can't talk\n    if (_hidden) then {\n        [player, QGVAR(isSet)] call EFUNC(common,hideUnit);\n        [player, QGVAR(isSet)] call EFUNC(common,muteUnit);\n    } else {\n        [player, QGVAR(isSet)] call EFUNC(common,unhideUnit);\n        [player, QGVAR(isSet)] call EFUNC(common,unmuteUnit);\n    };\n};\n\n// Reset interruptions\nGVAR(interrupts) = [];\n\n// Mark spectator state for reference\nGVAR(isSet) = _set;\nplayer setVariable [QGVAR(isSet), _set, true];\n\n[\"ace_spectatorSet\", [_set, player]] call CBA_fnc_globalEvent;\n",
        "functionName": "ace_spectator_fnc_setSpectator"
      },
      {
        "fileName": "fnc_stageSpectator.sqf",
        "content": "/*\n * Author: SilentSpike\n * Stores and hides a player safely out of the way (used by setSpectator on living players)\n *\n * Units will be gathered at marker ace_spectator_respawn (or [0,0,0] by default)\n * Upon unstage, units will be moved to the position they were in before staging\n *\n * Arguments:\n * 0: Unit to handle <OBJECT>\n * 1: Stage/Unstage <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, true] call ace_spectator_fnc_stageSpectator\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nACE_DEPRECATED(QFUNC(stageSpectator),\"3.12.0\",[ARR_2(QFUNC(setSpectator),\"'s new 3rd parameter\")] joinString \"\");\n\nparams [[\"_unit\",player,[objNull]], [\"_set\",true,[true]]];\n\n// No change, no service (but allow spectators to be reset)\nif !(_set || (GETVAR(_unit,GVAR(isStaged),false))) exitWith {};\n\nif !(local _unit) exitWith {\n    [QGVAR(stageSpectator), [_unit, _set], _unit] call CBA_fnc_targetEvent;\n};\n\n// Prevent unit falling into water\n_unit enableSimulation !_set;\n\n// Move to/from group as appropriate\n[_unit, _set, QGVAR(isStaged), side group _unit] call EFUNC(common,switchToGroupSide);\n\nif (_set) then {\n    // Position should only be saved on first entry\n    if !(GETVAR(_unit,GVAR(isStaged),false)) then {\n        SETVAR(_unit,GVAR(preStagePos),getPosATL _unit);\n\n        // Handle players respawning via pause menu (or script)\n        private _id = _unit addEventHandler [\"Respawn\",{\n            params [\"_unit\"];\n            [_unit] call FUNC(stageSpectator);\n        }];\n\n        SETVAR(_unit,GVAR(respawnEH),_id);\n    };\n\n    // Ghosts can't talk\n    [_unit, QGVAR(isStaged)] call EFUNC(common,hideUnit);\n    [_unit, QGVAR(isStaged)] call EFUNC(common,muteUnit);\n\n    // Position defaults to [0,0,0] if marker doesn't exist\n    _unit setPos (markerPos QGVAR(respawn));\n} else {\n    // Physical beings can talk\n    [_unit, QGVAR(isStaged)] call EFUNC(common,unhideUnit);\n    [_unit, QGVAR(isStaged)] call EFUNC(common,unmuteUnit);\n\n    // Restore original position and delete stored value\n    _unit setPosATL (GETVAR(_unit,GVAR(preStagePos),getPosATL _unit));\n    SETVAR(_unit,GVAR(preStagePos),nil);\n\n    // Remove the respawn handling\n    _unit removeEventHandler [\"Respawn\",GETVAR(_unit,GVAR(respawnEH),-1)];\n    SETVAR(_unit,GVAR(respawnEH),nil);\n};\n\n// Spectators ignore damage (vanilla and ace_medical)\n_unit allowDamage !_set;\n_unit setVariable [QEGVAR(medical,allowDamage), !_set];\n\n// No theoretical change if an existing spectator was reset\nif !(_set isEqualTo (GETVAR(_unit,GVAR(isStaged),false))) then {\n    // Mark spectator state for reference\n    _unit setVariable [QGVAR(isStaged), _set];\n};\n\n// If display exists already update the entity list to hide player\nif !(isNull SPEC_DISPLAY) then {\n    [] call FUNC(ui_updateListEntities);\n};\n",
        "functionName": "ace_spectator_fnc_stageSpectator"
      },
      {
        "fileName": "fnc_switchFocus.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Function used to switch to next or previous camera focus\n *\n * Arguments:\n * 0: Next/Prev unit <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [false] call ace_spectator_fnc_switchFocus\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _next = param [0, true];\nprivate _entities = [true] call FUNC(getTargetEntities);\nprivate _focus = GVAR(camFocus);\n\n// No entities to switch to\nif ((_entities isEqualTo []) || (_entities isEqualTo [_focus])) exitWith {};\n\nprivate _index = (_entities find _focus) max 0;\n\n_index = (_index + ([-1, 1] select _next)) % (count _entities);\nif (_index < 0) then { _index = count _entities + _index; };\n\n[_entities select _index] call FUNC(setFocus);\n",
        "functionName": "ace_spectator_fnc_switchFocus"
      },
      {
        "fileName": "fnc_ui_draw3D.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to draw the 3D icons and track the cursor object\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * addMissionEventHandler [\"Draw3D\", {call ace_spectator_fnc_ui_draw3D}]\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define HEIGHT_OFFSET 1.5\n\nBEGIN_COUNTER(updateCursor);\nprivate _camTarget = missionNamespace getVariable [QGVAR(camFocus), objNull];\nprivate _camTargetVeh = vehicle _camTarget;\nprivate _cursorObject = objNull;\n\n// This doesn't work for units underwater due to use of screenToWorld\n// Would be hard to work around due to parallax\nprivate _start = AGLToASL positionCameraToWorld [0,0,0];\nprivate _end = AGLToASL screenToWorld getMousePosition;\n\n// Can only select units within name drawing distance\nif ((_start distanceSqr _end) <= DISTANCE_NAMES_SQR) then {\n    private _intersections = lineIntersectsSurfaces [_start, _end, _camTarget, _camTargetVeh];\n\n    if !(_intersections isEqualTo []) then {\n        _cursorObject = effectiveCommander ((_intersections select 0) select 3);\n    };\n};\n\nGVAR(cursorObject) = _cursorObject;\nEND_COUNTER(updateCursor);\n\nif !(GVAR(uiMapVisible)) then {\n    if (GVAR(drawUnits)) then {\n        BEGIN_COUNTER(drawTags);\n        // Groups and Units\n        {\n            _x params [\"_unit\", \"_type\", \"_icon\"];\n            private _position = (_unit modelToWorldVisual (_unit selectionPosition \"Head\")) vectorAdd [0,0,HEIGHT_OFFSET];\n\n            // Cursor object is always effectiveCommander so no need to check `in`\n            if (_type == 2 && {_unit in _camTargetVeh || _unit == _cursorObject}) then {\n                drawIcon3D [\n                    ICON_BACKGROUND_UNIT,\n                    [0, 0, 0, [0.4, 0.8] select (_unit in _camTargetVeh)],\n                    _position,\n                    5,\n                    4,\n                    0,\n                    \"\",\n                    0,\n                    0.035,\n                    \"PuristaMedium\",\n                    \"center\"\n                ];\n            };\n\n            // Apply modifiers\n            if (_type == 1 && { time <= GETVAR(_unit,GVAR(highlightTime),0) }) then {\n                _icon set [1, [1,1,1, ((_icon select 1) select 3)]];\n            };\n            _icon set [2, _position];\n\n            // Draw icon\n            drawIcon3D _icon;\n\n            nil // Speed loop\n        } count GVAR(iconsToDraw);\n        END_COUNTER(drawTags);\n    };\n\n    // Draw projectiles and grenades paths\n    if (GVAR(drawProjectiles)) then {\n        BEGIN_COUNTER(drawTracers);\n        private _projectilesNew = [];\n        private _grenadesNew = [];\n\n        // Draw projectiles if there are any\n        {\n            _x params [\n                [\"_projectile\", objNull, [objNull]],\n                [\"_segments\", [], [[]]]\n            ];\n\n            if !(isNull _projectile) then {\n                // Store new segment\n                private _newestIndex = _segments pushBack [\n                    getPosVisual _projectile,\n                    (vectorMagnitude velocity _projectile) call {\n                        if (_this < 250) exitWith { [0,0,1,1] };\n                        if (_this < 500) exitWith { [0,1,0,1] };\n                        [1,0,0,1]\n                    }\n                ];\n\n                // Clamp number of segments to be drawn\n                if (_newestIndex > MAX_PROJECTILE_SEGMENTS) then {\n                    _segments deleteAt 0;\n                    DEC(_newestIndex);\n                };\n\n                // Store projectiles for next frame\n                _projectilesNew pushBack [_projectile, _segments];\n\n                // Draw all projectile segments\n                private _oldLoc = [];\n                {\n                    _x params [\"_locNew\", \"_colorNew\"];\n                    if !(_oldLoc isEqualTo []) then {\n                        drawLine3D [_oldLoc, _locNew, _colorNew];\n                    };\n                    _oldLoc = _locNew;\n\n                    nil // Speed loop\n                } count _segments;\n            };\n\n            nil // Speed loop\n        } count GVAR(projectilesToDraw);\n        GVAR(projectilesToDraw) = _projectilesNew;\n\n        {\n            if !(isNull _x) then {\n                private _grenadeVelocityMagnitude = vectorMagnitude velocity _x;\n\n                // Draw grenade (rotate icon to represent spinning)\n                drawIcon3D [ICON_GRENADE, [1,0,0,1], getPosVisual _x, 0.6, 0.6, if (_grenadeVelocityMagnitude > 0) then { time * 100 * _grenadeVelocityMagnitude } else { 0 }, \"\", 0, 0.05, \"TahomaB\"];\n\n                // Store grenade for next frame\n                _grenadesNew pushBack _x;\n            };\n\n            nil // Speed loop\n        } count GVAR(grenadesToDraw);\n\n        GVAR(grenadesToDraw) = _grenadesNew;\n        END_COUNTER(drawTracers);\n    };\n};\n",
        "functionName": "ace_spectator_fnc_ui_draw3D"
      },
      {
        "fileName": "fnc_ui_fadeList.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO\n * Function used to fade/unfade the entitiy list\n *\n * Arguments:\n * 0: Fade the list <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [false] call ace_spectator_fnc_ui_fadeList\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_fadeList\"];\n\nif (GVAR(uiVisible)) then {\n    private _list = CTRL_LIST;\n    private _tabs = CTRL_TABS;\n\n    if (_fadeList) then {\n        _list ctrlSetBackgroundColor [0,0,0,0];\n        _list ctrlSetFade 0.8;\n\n        _tabs ctrlSetBackgroundColor [0,0,0,0];\n        _tabs ctrlSetFade 0.5;\n\n        ctrlSetFocus CTRL_MOUSE;\n\n        showChat true;\n    } else {\n        _list ctrlSetBackgroundColor [0,0,0,0.75];\n        _list ctrlSetFade 0;\n\n        _tabs ctrlSetBackgroundColor [0,0,0,0.25];\n        _tabs ctrlSetFade 0;\n\n        ctrlSetFocus _list;\n\n        // List overlaps with chat\n        showChat false;\n    };\n\n    _list ctrlCommit 0.2;\n    _tabs ctrlCommit 0.2;\n};\n",
        "functionName": "ace_spectator_fnc_ui_fadeList"
      },
      {
        "fileName": "fnc_ui_getTreeDataIndex.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO\n * Function used to find the tree path of an entity\n *\n * Arguments:\n * 0: Data to search tree for <STRING>\n *\n * Return Value:\n * Tree path to data <ARRAY>\n *\n * Example:\n * [groupID _group] call ace_spectator_fnc_ui_getTreeDataIndex\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_data\", \"\", [\"\"]]];\n\nscopeName QGVAR(getTreeDataIndex);\n\n// Make sure data is not empty\nif (_data != \"\") then {\n    private _ctrl = CTRL_LIST;\n\n    for \"_sideIndex\" from 0 to ((_ctrl tvCount []) - 1) do {\n        if (_ctrl tvData [_sideIndex] == _data) then {\n            [_sideIndex] breakOut QGVAR(getTreeDataIndex);\n        };\n        for \"_groupIndex\" from 0 to ((_ctrl tvCount [_sideIndex]) - 1) do {\n            if (_ctrl tvData [_sideIndex, _groupIndex] == _data) then {\n                [_sideIndex, _groupIndex] breakOut QGVAR(getTreeDataIndex);\n            };\n            for \"_unitIndex\" from 0 to ((_ctrl tvCount [_sideIndex, _groupIndex]) - 1) do {\n                if (_ctrl tvData [_sideIndex, _groupIndex, _unitIndex] == _data) then {\n                    [_sideIndex, _groupIndex, _unitIndex] breakOut QGVAR(getTreeDataIndex);\n                };\n            };\n        };\n    };\n};\n\n[-1] // return empty path if not found (worst case)\n",
        "functionName": "ace_spectator_fnc_ui_getTreeDataIndex"
      },
      {
        "fileName": "fnc_ui_handleChildDestroyed.sqf",
        "content": "/*\n * Author: Nelson Duarte\n * Function used to handle child destroyed event\n * This only matters when abort button is pressed in child escape menu\n * Will close main display to exit client from mission\n *\n * Arguments:\n * 0: Spectator display <DISPLAY>\n * 1: Child display <DISPLAY>\n * 2: Exit code of child <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleChildDestroyed\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_display\",\"_child\",\"_exitCode\"];\n\nif (_exitCode == 104) then {\n    _display closeDisplay 2;\n    MAIN_DISPLAY closeDisplay 2;\n};\n",
        "functionName": "ace_spectator_fnc_ui_handleChildDestroyed"
      },
      {
        "fileName": "fnc_ui_handleKeyDown.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to handle key down event\n *\n * Arguments:\n * 0: Spectator display <DISPLAY>\n * 1: Key DIK code <NUMBER>\n * 2: State of shift <BOOL>\n * 3: State of ctrl <BOOL>\n * 4: State of alt <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleKeyDown\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#include \"\\A3\\ui_f\\hpp\\defineDIKCodes.inc\"\n\nparams [\"\",\"_key\",\"_shift\",\"_ctrl\",\"_alt\"];\n\n// Handle map toggle\nif (_key == DIK_M) exitWith {\n    [] call FUNC(ui_toggleMap);\n    true\n};\n\n// Handle very fast speed\nif (_key == DIK_LALT) exitWith {\n    [true] call FUNC(cam_toggleSlow);\n    true\n};\n\n// Handle escape menu\nif (_key == DIK_ESCAPE) exitWith {\n    if (GVAR(uiMapVisible)) then {\n        [] call FUNC(ui_toggleMap);\n    } else {\n        if (GVAR(uiForced)) then {\n            private _displayType = [\"RscDisplayInterrupt\",\"RscDisplayMPInterrupt\"] select isMultiplayer;\n            SPEC_DISPLAY createDisplay _displayType;\n        } else {\n            [false] call FUNC(setSpectator);\n        };\n    };\n    true\n};\n\n// Handle perspective cycling\nif (_key in [DIK_SPACE, DIK_NUMPADENTER]) exitWith {\n    private _oldMode = GVAR(camMode);\n    private _modes = GVAR(availableModes);\n\n    // Get current index and index count\n    private _iMode = (_modes find _oldMode) max 0;\n    private _countModes = count _modes;\n\n    if (_countModes != 0) then {\n        _iMode = (_iMode + 1) % _countModes;\n        if (_iMode < 0) then { _iMode = _countModes + _iMode; };\n    };\n\n    private _newMode = _modes select _iMode;\n\n    [_newMode] call FUNC(cam_setCameraMode);\n\n    true\n};\n\n// Handle vision mode cycling\nif (_key == DIK_N) exitWith {\n    private _oldVision = GVAR(camVision);\n    private _visions = GVAR(availableVisions);\n\n    // Get current index and index count\n    private _iVision = (_visions find _oldVision) max 0;\n    private _countVisions = count _visions;\n\n    if (_countVisions != 0) then {\n        _iVision = (_iVision + 1) % _countVisions;\n        if (_iVision < 0) then { _iVision = _countVisions + _iVision; };\n    };\n\n    private _newVision = _visions select _iVision;\n\n    [_newVision] call FUNC(cam_setVisionMode);\n    true\n};\n\n// Handle postive change in draw\nif (_key == DIK_PGUP) exitWith {\n    setViewDistance ((viewDistance + 250) min MAX_VIEW_DISTANCE);\n    true\n};\n\n// Handle negative change in draw\nif (_key == DIK_PGDN) exitWith {\n    setViewDistance ((viewDistance - 250) max MIN_VIEW_DISTANCE);\n    true\n};\n\n// Handle spectate lights\nif (_key == DIK_L) exitWith {\n    if (GVAR(camLight)) then {\n        { deleteVehicle _x; } forEach GVAR(camLights);\n        GVAR(camLights) = [];\n    } else {\n        private _cameraLight = \"#lightpoint\" createvehicleLocal getPosASL GVAR(camera);\n        _cameraLight setLightBrightness 2;\n        _cameraLight setLightAmbient [1,1,1];\n        _cameraLight setLightColor [0,0,0];\n        _cameraLight lightAttachObject [GVAR(camera), [0,0,0]];\n\n        private _pointerLight = \"#lightpoint\" createvehicleLocal getPosASL GVAR(camera);\n        _pointerLight setLightBrightness 1;\n        _pointerLight setLightAmbient [1,1,1];\n        _pointerLight setLightColor [0,0,0];\n\n        GVAR(camLights) = [_cameraLight, _pointerLight];\n    };\n\n    GVAR(camLight) = !GVAR(camLight);\n\n    true\n};\n\n// Handle toggling the UI\nif (_key == DIK_BACKSPACE) exitWith {\n    [] call FUNC(ui_toggleUI);\n    true\n};\n\n// Handle toggling help\nif (_key == DIK_F1) exitWith {\n    GVAR(uiHelpVisible) = !GVAR(uiHelpVisible);\n\n    [] call FUNC(ui_updateHelp);\n\n    CTRL_HELP ctrlShow GVAR(uiHelpVisible);\n    CTRL_HELP_BACK ctrlShow GVAR(uiHelpVisible);\n\n    true\n};\n\n// Handle toggle focus info widget\nif (_key == DIK_I) exitWith {\n    GVAR(uiWidgetVisible) = !GVAR(uiWidgetVisible);\n    [] call FUNC(ui_updateWidget);\n    true\n};\n\n// Handle toggling projectile drawing\nif (_key == DIK_P) exitWith {\n    GVAR(drawProjectiles) = !GVAR(drawProjectiles);\n    true\n};\n\n// Handle toggling unit drawing\nif (_key == DIK_O) exitWith {\n    GVAR(drawUnits) = !GVAR(drawUnits);\n    true\n};\n\n// Handle getting next focus target\nif (_key == DIK_RIGHT) exitWith {\n    [true] call FUNC(switchFocus);\n    true\n};\n\n// Handle getting previous focus target\nif (_key == DIK_LEFT) exitWith {\n    [false] call FUNC(switchFocus);\n    true\n};\n\n// If the zeus key is pressed and unit is curator, open zeus interface\nif ((_key in (actionKeys \"CuratorInterface\")) && {!isNull (getAssignedCuratorLogic player)}) exitWith {\n    // Close the UI and disable camera input\n    [false] call FUNC(ui);\n    GVAR(camera) camCommand \"manual off\";\n\n    // Display XEH handles re-opening\n    openCuratorInterface;\n\n    // Set the curator camera to the spectator camera location\n    [{!isNull curatorCamera},{\n        curatorCamera setPosASL (getPosASL GVAR(camera));\n        curatorCamera setDir (getDirVisual GVAR(camera));\n\n        // Curator tracks its own vision mode\n        [getAssignedCuratorLogic player, 0] call bis_fnc_toggleCuratorVisionMode;\n    }] call CBA_fnc_waitUntilAndExecute;\n    true\n};\n\n// Handle acre spectate headset down (if present)\nif (\n    [\"acre_sys_radio\"] call EFUNC(common,isModLoaded) &&\n    { [_key, [_shift, _ctrl, _alt]] isEqualTo (([\"ACRE2\", \"HeadSet\"] call CBA_fnc_getKeybind) select 5) }\n) exitWith {\n    [] call acre_sys_core_fnc_toggleHeadset;\n    true\n};\n\nfalse // default to unhandled\n",
        "functionName": "ace_spectator_fnc_ui_handleKeyDown"
      },
      {
        "fileName": "fnc_ui_handleKeyUp.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Function used to handle key up event\n *\n * Arguments:\n * 0: Spectator display <DISPLAY>\n * 1: Key DIK code <NUMBER>\n * 2: State of shift <BOOL>\n * 3: State of ctrl <BOOL>\n * 4: State of alt <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleKeyUp\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#include \"\\A3\\ui_f\\hpp\\defineDIKCodes.inc\"\n\nparams [\"\",\"_key\",\"_shift\",\"_ctrl\",\"_alt\"];\n\nif (_key == DIK_LALT) exitWith {\n    [false] call FUNC(cam_toggleSlow);\n    true\n};\n\nfalse\n",
        "functionName": "ace_spectator_fnc_ui_handleKeyUp"
      },
      {
        "fileName": "fnc_ui_handleListClick.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to handle list single/double clicks\n *\n * Expected behaviour:\n * Clicking an entry focuses the camera on it (any camera mode)\n * Double clicking an entry teleports the free camera nearby and focuses on it\n *\n * Arguments:\n * 0: Double clicked <BOOL>\n * 1: List Click EH's _this <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [false, _this] call ace_spectator_fnc_ui_handleListClick\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_dblClick\",\"_params\"];\n_params params [\"_list\",\"_index\"];\n\nprivate _handled = false;\nprivate _data = _list tvData _index;\n\n// List contains unique object variables\nprivate _object = missionNamespace getVariable [_data, objNull];\n\nif !(isNull _object) then {\n    if (_dblClick) then {\n        // Place camera within ~10m of the object and above ground level\n        private _pos = getPosASLVisual _object;\n        GVAR(camera) setPosASL (AGLtoASL (_pos getPos [1 + random 10, random 360]) vectorAdd [0,0,2 + random 10]);\n\n        // Reset the focus\n        [objNull] call FUNC(setFocus);\n        [_object] call FUNC(setFocus);\n\n        _handled = true;\n    } else {\n        if (_object != GVAR(camFocus)) then {\n            [_object] call FUNC(setFocus);\n\n            _handled = true;\n        };\n    };\n};\n\nif (_handled) then {\n    playSound \"ReadoutClick\";\n};\n\n_handled\n",
        "functionName": "ace_spectator_fnc_ui_handleListClick"
      },
      {
        "fileName": "fnc_ui_handleMapClick.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO\n * Function used to handle map mouse click events\n *\n * Arguments:\n * 0: Map control <CONTROL>\n * 1: Mouse button pressed <NUMBER>\n * 2: x screen coordinate clicked <BOOL>\n * 3: y screen coordinate clicked <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleMapClick\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"\", \"\", \"_x\", \"_y\"];\n\nif (isNull GVAR(uiMapHighlighted)) then {\n    // Give user feedback that camera is no longer focused\n    if !(isNull GVAR(camFocus)) then {\n        playSound \"ReadoutHideClick1\";\n    };\n\n    // Preserve camera height on teleport\n    private _pos = CTRL_MAP ctrlMapScreenToWorld [_x, _y];\n    _pos set [2, (getPosASLVisual GVAR(camera)) select 2];\n\n    GVAR(camera) setPosASL _pos;\n} else {\n    // Give user feedback that camera is focused on highlighted unit\n    playSound \"ReadoutClick\";\n};\n\n[GVAR(uiMapHighlighted)] call FUNC(setFocus);\n",
        "functionName": "ace_spectator_fnc_ui_handleMapClick"
      },
      {
        "fileName": "fnc_ui_handleMapDraw.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO\n * Function used to handle map draw\n *\n * Arguments:\n * 0: Map control <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleMapDraw\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define MAP_MIN_ENTITY_DISTANCE 30\n\n// Moved timer into map controls group, update here\nCTRL_TIME ctrlSetText ([\"+\", [time / 3600] call BIS_fnc_timeToString] joinString \"\");\n\nBEGIN_COUNTER(drawMap);\n\nparams [\"_map\"];\n\n// Track nearest unit\nprivate _loc = _map ctrlMapScreenToWorld getMousePosition;\nprivate _nearestEntity = objNull;\nprivate _minDist = 999999;\n\n// Draw unit icons\nprivate _handledVehicles = [];\n{\n    private _dist = _x distance2D _loc;\n\n    if (_dist < _minDist && { _dist < MAP_MIN_ENTITY_DISTANCE }) then {\n        _minDist = _dist;\n        _nearestEntity = _x;\n    };\n\n    private _vehicle = vehicle _x;\n    if !(_vehicle in _handledVehicles) then {\n        _handledVehicles pushBack _vehicle;\n\n        private _vehicleTexture = [_vehicle] call EFUNC(common,getVehicleIcon);\n        private _sideColor = [side group _vehicle] call BIS_fnc_sideColor;\n        private _text = \"\";\n\n        if (GVAR(uiMapHighlighted) == _vehicle || {GVAR(uiMapHighlighted) in _vehicle}) then {\n            _text = ([GVAR(uiMapHighlighted)] call EFUNC(common,getName)) select [0, NAME_MAX_CHARACTERS];\n            if !(isPlayer GVAR(uiMapHighlighted)) then { _text = format [\"%1: %2\", localize \"str_player_ai\", _text]; };\n            _sideColor = [0.8, 0.8, 0.5, 1];\n        };\n\n        if (NEEDS_REVIVE(_vehicle)) then {\n            _vehicleTexture = ICON_REVIVE;\n            _sideColor = [0.5, 0, 0, 1];\n        };\n\n        if (time <= _vehicle getVariable [QGVAR(highlightTime), 0]) then {\n            _sideColor = [1, 1, 1, 1];\n        };\n\n        _map drawIcon [_vehicleTexture, _sideColor, getPosASLVisual _vehicle, 24, 24, getDirVisual _vehicle, _text, 1, 0.04, \"TahomaB\", \"right\"];\n    };\n    nil // Speed loop\n} count ([] call FUNC(getTargetEntities));\n\n// Set highlighted unit\nprivate _text = if (isNull _nearestEntity) then {\n    \"\"\n} else {\n    format [\"%1 [%2 m]\", [_nearestEntity] call EFUNC(common,getName), round (_nearestEntity distance2D GVAR(camera))]\n};\n\nGVAR(uiMapHighlighted) = _nearestEntity;\nCTRL_MAP_FOOTER ctrlSetText _text;\n\n// Draw camera icon\nif !(isNil QGVAR(camera)) then {\n    private _cameraPos = getPosASLVisual GVAR(camera);\n    private _cameraDir = getDirVisual GVAR(camera);\n    _map drawIcon [ICON_CAMERA, [0.5, 1, 0.5, 1], _cameraPos, 32, 48, _cameraDir, \"\", 1, 0.05, \"TahomaB\", \"right\"];\n    _map drawArrow [_cameraPos, (_cameraPos getPos [300, _cameraDir]), [0.5, 1, 0.5, 1]];\n};\n\nEND_COUNTER(drawMap);\n",
        "functionName": "ace_spectator_fnc_ui_handleMapDraw"
      },
      {
        "fileName": "fnc_ui_handleMouseButtonDblClick.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to handle mouse button double clicks\n *\n * Expected behaviour:\n * Double left click teleports free camera toward the unit, but does not focus\n *\n * Arguments:\n * 0: Control <CONTROL>\n * 1: Mouse button pressed <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleMouseButtonDblClick\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"\", \"_button\"];\n\nif (_button == 0 && {!isNull GVAR(cursorObject)}) then {\n    [GVAR(cursorObject)] call FUNC(cam_prepareTarget);\n};\n",
        "functionName": "ace_spectator_fnc_ui_handleMouseButtonDblClick"
      },
      {
        "fileName": "fnc_ui_handleMouseButtonDown.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to handle mouse down event\n *\n * Expected behaviour:\n * Left clicking a unit focuses the camera on that unit (in any camera mode)\n * Left clicking empty space removes the current camera focus in free camera\n * Right clicking removes the camera lock, but retains the focus in free camera\n * Right clicking and dragging orbits around the unit in follow camera\n *\n * Arguments:\n * 0: Control <CONTROL>\n * 1: Mouse button pressed <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleMouseButtonDown\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"\", \"_button\"];\n\n// Left click\nif (_button == 0) exitWith {\n    if (isNull GVAR(cursorObject)) then {\n        if (GVAR(camMode) == MODE_FREE && { !isNull GVAR(camFocus) }) then {\n            playSound \"ReadoutHideClick1\";\n            [objNull] call FUNC(setFocus);\n        };\n    } else {\n        if (GVAR(cursorObject) in ([] call FUNC(getTargetEntities))) then {\n            playSound \"ReadoutClick\";\n\n            // Focus will be at screen center\n            [GVAR(cursorObject)] call FUNC(setFocus);\n            setMousePosition [0.5, 0.5];\n        };\n    };\n};\n\n// Right click\nif (_button == 1) then {\n    if (GVAR(camMode) == MODE_FREE && { !isNull GVAR(camFocus) } && { !isNull (attachedTo GVAR(camDummy)) }) then {\n        [] call FUNC(cam_resetTarget);\n    };\n    GVAR(holdingRMB) = true;\n};\n",
        "functionName": "ace_spectator_fnc_ui_handleMouseButtonDown"
      },
      {
        "fileName": "fnc_ui_handleMouseMoving.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO\n * Function used to handle mouse moving event\n *\n * Arguments:\n * 0: Control <CONTROL>\n * 1: Change in x <NUMBER>\n * 2: Change in y <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleMouseMoving\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (GVAR(holdingRMB) && { GVAR(camMode) == MODE_FOLLOW  }) then {\n    params [\"\", \"_deltaX\", \"_deltaY\"];\n\n    if (_deltaX != 0) then {\n        GVAR(camYaw) = ((GVAR(camYaw) + (_deltaX * 100 * GVAR(camDeltaTime)) + 180) % 360) - 180;\n    };\n\n    if (_deltaY != 0) then {\n        GVAR(camPitch) = (((GVAR(camPitch) - (_deltaY * 100 * GVAR(camDeltaTime))) max -90) min 90);\n    };\n};\n",
        "functionName": "ace_spectator_fnc_ui_handleMouseMoving"
      },
      {
        "fileName": "fnc_ui_handleMouseZChanged.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO\n * Function used to handle mouse scroll event\n *\n * Arguments:\n * 0: Control <CONTROL>\n * 1: Change in Z <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * _this call ace_spectator_fnc_ui_handleMouseZChanged\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define FOLLOW_CAMERA_MAX_DISTANCE 5\n\nif (GVAR(camMode) == MODE_FOLLOW) then {\n    if ((_this select 1) > 0) then {\n        GVAR(camDistance) = (GVAR(camDistance) - 1) max 0;\n    } else {\n        GVAR(camDistance) = (GVAR(camDistance) + 1) min FOLLOW_CAMERA_MAX_DISTANCE;\n    };\n};\n",
        "functionName": "ace_spectator_fnc_ui_handleMouseZChanged"
      },
      {
        "fileName": "fnc_ui_toggleMap.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO\n * Function used to toggle the map\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_ui_toggleMap\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (GVAR(uiMapVisible)) then {\n    CTRL_MAP ctrlShow false;\n    CTRL_MAP_GROUP ctrlShow false;\n\n    ctrlSetFocus CTRL_MOUSE;\n\n    if (GVAR(camMode) == MODE_FREE) then {\n        GVAR(camera) camCommand \"manual on\";\n    };\n} else {\n    CTRL_MAP ctrlShow true;\n    CTRL_MAP_GROUP ctrlShow true;\n\n    CTRL_MAP_TITLE ctrlSetText (getMissionConfigValue [\"onLoadName\", getMissionConfigValue [\"briefingName\", localize ELSTRING(common,unknown)]]);\n    CTRL_MAP_SPEC_NUM ctrlSetText str ({GETVAR(_x,GVAR(isSet),false)} count allPlayers);\n\n    CTRL_MAP ctrlMapAnimAdd [0, 0.05, getPosASLVisual GVAR(camera)];\n    ctrlMapAnimCommit CTRL_MAP;\n\n    // Disable camera input while map is open\n    GVAR(camera) camCommand \"manual off\";\n};\n\n// Toggle the tracking variable\nGVAR(uiMapVisible) = !GVAR(uiMapVisible);\n\n// Reset highlighted object\nGVAR(uiMapHighlighted) = objNull;\n",
        "functionName": "ace_spectator_fnc_ui_toggleMap"
      },
      {
        "fileName": "fnc_ui_toggleUI.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to toggle the whole user interface\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_ui_toggleUI\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _visible = !GVAR(uiVisible);\n\n{\n    private _fade = 1;\n    if (_visible) then {\n        _fade = getNumber (configFile >> QGVAR(display) >> \"Controls\" >> ctrlClassName _x >> \"fade\");\n    };\n\n    _x ctrlSetFade _fade;\n    _x ctrlCommit 0.25;\n} forEach [CTRL_LIST, CTRL_TABS, CTRL_CAM_TYPES, CTRL_WIDGET];\n\nshowChat !_visible;\nplaySound ([\"HintExpand\",\"HintCollapse\"] select _visible);\n\nGVAR(uiVisible) = _visible;\n",
        "functionName": "ace_spectator_fnc_ui_toggleUI"
      },
      {
        "fileName": "fnc_ui_updateCamButtons.sqf",
        "content": "/*\n * Author: SilentSpike\n * Used to update the docked camera buttons\n * Disables unavailable, highlights current\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_ui_updateCamButtons\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n// These correspond to the camera mode indices\n#define ENUM_IDCs [IDC_FREE, IDC_FPS, IDC_FOLLOW]\n#define ENUM_ACTIVE [CAM_ICON_FREE_SELECTED, CAM_ICON_FPS_SELECTED, CAM_ICON_FOLLOW_SELECTED]\n#define ENUM_INACTIVE [CAM_ICON_FREE, CAM_ICON_FPS, CAM_ICON_FOLLOW]\n\nprivate _current = ENUM_IDCs select GVAR(camMode);\n\n{\n    if (_forEachIndex in GVAR(availableModes)) then {\n        // Highlight the current camera mode button\n        private _icon = ([ENUM_INACTIVE, ENUM_ACTIVE] select (_x == _current)) select _forEachIndex;\n\n        (CTRL_CAM_TYPES controlsGroupCtrl _x) ctrlSetText _icon;\n        (CTRL_CAM_TYPES controlsGroupCtrl _x) ctrlShow true;\n    } else {\n        // Disable any inactive camera modes\n        (CTRL_CAM_TYPES controlsGroupCtrl _x) ctrlShow false;\n    };\n} forEach ENUM_IDCs;\n",
        "functionName": "ace_spectator_fnc_ui_updateCamButtons"
      },
      {
        "fileName": "fnc_ui_updateHelp.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Updates spectator UI help element\n *\n * Note that there are some redundant conditions in this file\n * This is intentional, since controls appear via priority que\n * The overhead is minimal\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_ui_updateHelp\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#include \"\\A3\\ui_f\\hpp\\defineDIKCodes.inc\"\n#define MAX_CONTROLS_HELP_ENTRIES 12\n\nif !(GVAR(uiHelpVisible)) exitWith {};\n\nprivate _cameraMode = GVAR(camMode);\nprivate _availableModes = GVAR(availableModes);\nprivate _hasTarget = !isNull GVAR(camFocus);\n\nprivate _controls = [];\n\n// When not in first person, camera rotation applies\nif (_cameraMode != MODE_FPS) then {\n    _controls pushback [\"[RMB]\", localize \"STR_A3_Spectator_Helper_CameraRotation\"];\n};\n\n// When in free camera, focus/un-focus with LMB\nif (_cameraMode == MODE_FREE) then {\n    if (_hasTarget) then {\n        _controls pushBack [\"[LMB]\", localize \"STR_A3_Spectator_Helper_Unfocus\"];\n    } else {\n        _controls pushBack [\"[LMB]\", localize \"STR_A3_Spectator_Helper_Focus\"];\n    };\n};\n\n// When the camera has a focus, switch mode applies (if other modes are available)\nif (_hasTarget && {count _availableModes > 1}) then {\n    _controls pushBack [\n        format [\"[%1]\", toUpper ([DIK_SPACE] call CBA_fnc_localizeKey)],\n        localize \"STR_A3_Spectator_Helper_CameraMode\"\n    ];\n};\n\nif (_cameraMode == MODE_FREE) then {\n    _controls pushback [\n        format [\"[%1/%2]\", [DIK_W] call CBA_fnc_localizeKey, [DIK_S] call CBA_fnc_localizeKey],\n        localize \"STR_A3_Spectator_Helper_Movement\"\n    ];\n    _controls pushback [\n        format [\"[%1/%2]\", [DIK_A] call CBA_fnc_localizeKey, [DIK_D] call CBA_fnc_localizeKey],\n        localize \"STR_A3_Spectator_Helper_Strafing\"\n    ];\n    _controls pushback [\n        format [\"[%1/%2]\", [DIK_Q] call CBA_fnc_localizeKey, [DIK_Z] call CBA_fnc_localizeKey],\n        localize \"STR_A3_Spectator_Helper_Height\"\n    ];\n} else {\n    _controls pushback [\n        format [\"[%1]\", toUpper ([DIK_RIGHT] call CBA_fnc_localizeKey)],\n        localize LSTRING(nextUnit)\n    ];\n    _controls pushback [\n        format [\"[%1]\", toUpper ([DIK_LEFT] call CBA_fnc_localizeKey)],\n        localize LSTRING(prevUnit)\n    ];\n};\n\nif (_cameraMode != MODE_FPS) then {\n    _controls pushback [\n        format [\"[%1]\", ([DIK_N] call CBA_fnc_localizeKey)],\n        localize LSTRING(nextVis)\n    ];\n};\n\n_controls pushBack [\n    format [\"[%1]\", toUpper ([DIK_BACK] call CBA_fnc_localizeKey)],\n    localize \"STR_A3_Spectator_Helper_Interface\"\n];\n_controls pushBack [\n    format [\"[%1]\", [DIK_F1] call CBA_fnc_localizeKey],\n    localize \"STR_A3_Spectator_Helper_Controls\"\n];\n\n// Too many controls in the UI, leave these out?\n// _controls pushBack [\n//     format [\"[%1]\", [DIK_M] call CBA_fnc_localizeKey],\n//     localize \"str_usract_map\"\n// ];\n// _controls pushBack [\n//     format [\"[%1]\", [DIK_I] call CBA_fnc_localizeKey],\n//     localize LSTRING(uiIcons)\n// ];\n// _controls pushBack [\n//     format [\"[%1]\", [DIK_O] call CBA_fnc_localizeKey],\n//     localize LSTRING(uiProjectiles)\n// ];\n\nif (_cameraMode == MODE_FREE) then {\n    _controls pushBack [\"[LSHIFT]\", localize \"STR_A3_Spectator_Helper_Shift\"];\n    _controls pushBack [\"[LALT]\", localize LSTRING(camSlow)];\n};\n\nif (count _controls > MAX_CONTROLS_HELP_ENTRIES) then {\n    _controls resize MAX_CONTROLS_HELP_ENTRIES;\n};\n\nprivate _help = CTRL_HELP;\n\n_help ctrlEnable false;\n_help lnbSetColumnsPos [0, 0.45];\nlnbClear _help;\n\n{\n    _help lnbAddRow _x;\n    _help lnbSetColor [[_forEachIndex, 0], [0.75,0.6,0,1]];\n} forEach _controls;\n\n// Set height based on number of rows\nprivate _newH = (GVAR(uiHelpH) / MAX_CONTROLS_HELP_ENTRIES) * count _controls;\nprivate _newY = safezoneY + safezoneH - _newH;\n\n(ctrlPosition _help) params [\"_newX\",\"\",\"_newW\"];\n\n{\n    _x ctrlSetPosition [_newX, _newY, _newW, _newH];\n    _x ctrlCommit 0.15;\n} forEach [CTRL_HELP_BACK, _help];\n",
        "functionName": "ace_spectator_fnc_ui_updateHelp"
      },
      {
        "fileName": "fnc_ui_updateIconsToDraw.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used update the things to 3D draw\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Examples:\n * [] call ace_spectator_fnc_ui_updateIconsToDraw\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _iconsToDraw = [];\nprivate _entitiesToDraw = [];\n\n// camToWorld is used instead of camera object to account for FPP\nprivate _camPos = AGLToASL positionCameraToWorld [0,0,0];\n{\n    private _vehicle = vehicle _x;\n    private _inVehicle = (_vehicle != _x);\n    private _distanceToCameraSqr = _camPos distanceSqr _x;\n\n    if (_distanceToCameraSqr <= DISTANCE_ICONS_SQR && { !_inVehicle || { _x == effectiveCommander _vehicle } }) then {\n        private _group = group _x;\n        private _isLeader = _x == leader _group;\n        private _groupColor = [side _group] call BIS_fnc_sideColor;\n\n        // Calculate distance fade\n        (_distanceToCameraSqr call {\n            if (_this <= 250000) exitWith { // 500^2\n                [1, 4, -2.5, 0.04]\n            };\n            if (_this <= 1000000) exitWith { // 1000^2\n                [0.75, 3.5, -2.2, 0.035]\n            };\n            if (_this <= 2250000) exitWith { // 1500^2\n                [0.5, 3, -1.9, 0.03]\n            };\n            if (_this <= 4000000) exitWith { // 2000^2\n                [0.3, 2.5, -1.6, 0.025]\n            };\n            if (_this <= 6250000) exitWith { // 2500^2\n                [0.2, 2, -1.3, 0.02]\n            };\n            [0.15, 1.5, -1, 0.015]\n        }) params [\"_fadeByDistance\", \"_sizeByDistance\", \"_heightByDistance\", \"_fontSizeByDistance\"];\n\n        // Apply color fade\n        _groupColor set [3, _fadeByDistance];\n\n        // Show unit name only if camera is near enough\n        if (_distanceToCameraSqr < DISTANCE_NAMES_SQR) then {\n            private _name = ([_x] call EFUNC(common,getName)) select [0, NAME_MAX_CHARACTERS];\n            if !(isPlayer _x) then { _name = format [\"%1: %2\", localize \"str_player_ai\", _name]; };\n\n            if (_inVehicle) then {\n                private _crewCount = (({alive _x} count (crew _vehicle)) - 1);\n                if (_crewCount > 0) then {\n                    _name = format [\"%1 (+%2)\", _name, _crewCount];\n                };\n            };\n\n            // Draw unit name for effective commander or all units on foot\n            _iconsToDraw pushBack [_x, 2, [\n                \"\",\n                [1,1,1,1],\n                [0,0,0],\n                0,\n                _heightByDistance,\n                0,\n                _name,\n                2,\n                _fontSizeByDistance,\n                \"PuristaMedium\",\n                \"center\"\n            ]];\n        } else {\n            // Draw group name for effective commander or leader on foot\n            if (_inVehicle || _isLeader) then {\n                _iconsToDraw pushBack [_x, 0, [\n                    \"\",\n                    [1,1,1,_fadeByDistance],\n                    [0,0,0],\n                    0,\n                    _heightByDistance,\n                    0,\n                    groupID _group,\n                    2,\n                    _fontSizeByDistance,\n                    \"PuristaMedium\",\n                    \"center\"\n                ]];\n            };\n        };\n\n        // Draw group icon for effective commander or leader on foot\n        if (_inVehicle || _isLeader) then {\n            _iconsToDraw pushBack [_x, 0, [\n                [_group, true] call FUNC(getGroupIcon),\n                _groupColor,\n                [0,0,0],\n                _sizeByDistance,\n                _sizeByDistance,\n                0,\n                \"\",\n                0,\n                0.035,\n                \"PuristaMedium\",\n                \"center\"\n            ]];\n        };\n\n        // Draw unit icon for effective commander or all units on foot\n        _iconsToDraw pushBack [_x, 1, [\n            [ICON_UNIT, ICON_REVIVE] select (NEEDS_REVIVE(_x)),\n            _groupColor,\n            [0,0,0],\n            _sizeByDistance,\n            _sizeByDistance,\n            0,\n            \"\",\n            0,\n            0.035,\n            \"PuristaMedium\",\n            \"center\"\n        ]];\n\n        // Track entities themselves for use with fired EH\n        _entitiesToDraw pushBack _vehicle;\n\n        // Add fired EH for drawing and icon highlighting\n        if (GETVAR(_vehicle,GVAR(firedEH),-1) == -1) then {\n            SETVAR(_vehicle,GVAR(firedEH),_vehicle addEventHandler [ARR_2(\"Fired\",{_this call FUNC(handleFired)})]);\n        };\n    };\n\n    nil // Speed loop\n} count ([] call FUNC(getTargetEntities));\n\nGVAR(iconsToDraw) = _iconsToDraw;\nGVAR(entitiesToDraw) = _entitiesToDraw;\n",
        "functionName": "ace_spectator_fnc_ui_updateIconsToDraw"
      },
      {
        "fileName": "fnc_ui_updateListEntities.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Updates spectator UI list of units/groups\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_ui_updateListEntities\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _newUnits = [];\nprivate _newGroups = [];\n// Always show the 4 main sides in this intuative order\nprivate _newSides = [str west, str east, str resistance, str civilian];\nprivate _newList = [\n    [west, str west, [west] call BIS_fnc_sideName, [west] call BIS_fnc_sideColor, []],\n    [east, str east, [east] call BIS_fnc_sideName, [east] call BIS_fnc_sideColor, []],\n    [resistance, str resistance, [resistance] call BIS_fnc_sideName, [resistance] call BIS_fnc_sideColor, []],\n    [civilian, str civilian, [civilian] call BIS_fnc_sideName, [civilian] call BIS_fnc_sideColor, []]\n];\n\n// Go through entity groups and cache information (include dead entities)\nprivate _entities = [true] call FUNC(getTargetEntities);\n{\n    // Add the group if new\n    private _group = _x;\n    if !(str _group in _newGroups) then {\n        // Include the group if it contains valid entities\n        private _entitiesGroup = units _group arrayIntersect _entities;\n\n        if !(_entitiesGroup isEqualTo []) then {\n            // Cache the info of valid units in the group\n            private _unitsInfo = [];\n            {\n                _newUnits pushBack ([_x] call BIS_fnc_objectVar);\n\n                private _name = ([_x] call EFUNC(common,getName)) select [0, NAME_MAX_CHARACTERS];\n                if !(isPlayer _x) then { _name = format [\"%1: %2\", localize \"str_player_ai\", _name]; };\n\n                _unitsInfo pushBack [\n                    _x,\n                    alive _x,\n                    alive _x && { NEEDS_REVIVE(_x) },\n                    _name\n                ];\n                nil // Speed loop\n            } count _entitiesGroup;\n\n            // Cache the info of the group itself\n            private _groupTexture = [_group] call FUNC(getGroupIcon);\n            private _groupInfo = [_group, str _group, _groupTexture, groupID _group];\n\n            // Add the group to the correct side\n            private _side = side _group;\n            private _sideIndex = _newSides find (str _side);\n\n            // Add the side if new\n            if (_sideIndex < 0) then {\n                _newList pushBack [\n                    _side,\n                    str _side,\n                    [_side] call BIS_fnc_sideName,\n                    [_side] call BIS_fnc_sideColor,\n                    []\n                ];\n\n                _sideIndex = _newSides pushBack (str _side);\n            };\n\n            // Add it to the right index\n            _newGroups pushBack (str _group);\n            ((_newList select _sideIndex) select 4) pushBack [_groupInfo, _unitsInfo];\n        };\n    };\n    nil // Speed loop\n} count allGroups;\n\n// Whether an update to the list is required (really only if something changed)\nif !(GVAR(curList) isEqualTo _newList) then {\n    private _ctrl = CTRL_LIST;\n\n    // Remove groups/units that are no longer there\n    for \"_sideIndex\" from ((_ctrl tvCount []) - 1) to 0 step -1 do {\n        for \"_groupIndex\" from ((_ctrl tvCount [_sideIndex]) - 1) to 0 step -1 do {\n            for \"_unitIndex\" from ((_ctrl tvCount [_sideIndex, _groupIndex]) - 1) to 0 step -1 do {\n                private _lookup = _newUnits find (_ctrl tvData [_sideIndex, _groupIndex, _unitIndex]);\n                if (_lookup < 0) then {\n                    _ctrl tvDelete [_sideIndex, _groupIndex, _unitIndex];\n                } else {\n                    _newUnits deleteAt _lookup;\n                };\n            };\n            private _lookup = _newGroups find (_ctrl tvData [_sideIndex, _groupIndex]);\n            if (_lookup < 0) then {\n                _ctrl tvDelete [_sideIndex, _groupIndex];\n            } else {\n                _newGroups deleteAt _lookup;\n            };\n        };\n        private _lookup = _newSides find (_ctrl tvData [_sideIndex]);\n        if (_lookup < 0) then {\n            _ctrl tvDelete [_sideIndex];\n        } else {\n            _newSides deleteAt _lookup;\n        };\n    };\n\n    // Hash location lookups, note hashing assumes unique side/group/unit data\n    private _sideDataToPathHash = [[], []];\n    private _groupDataToPathHash = [[], []];\n    private _unitDataToPathHash = [[], []];\n\n    for \"_sideIndex\" from 0 to ((_ctrl tvCount []) - 1) do {\n        (_sideDataToPathHash select 0) pushBack (_ctrl tvData [_sideIndex]);\n        (_sideDataToPathHash select 1) pushBack [_sideIndex];\n        for \"_groupIndex\" from 0 to ((_ctrl tvCount [_sideIndex]) - 1) do {\n            (_groupDataToPathHash select 0) pushBack (_ctrl tvData [_sideIndex, _groupIndex]);\n            (_groupDataToPathHash select 1) pushBack [_sideIndex, _groupIndex];\n            for \"_unitIndex\" from 0 to ((_ctrl tvCount [_sideIndex, _groupIndex]) - 1) do {\n                (_unitDataToPathHash select 0) pushBack (_ctrl tvData [_sideIndex, _groupIndex, _unitIndex]);\n                (_unitDataToPathHash select 1) pushBack [_sideIndex, _groupIndex, _unitIndex];\n            };\n        };\n    };\n\n    // Update/add the values\n    {\n        _x params [\"_side\", \"_sideStr\", \"_sideTitle\", \"_sideColor\", \"_nestedGroupData\"];\n\n        private _sideIndex = -1;\n        private _lookup = (_sideDataToPathHash select 0) find _sideStr;\n        if (_lookup < 0) then {\n            _sideIndex = _ctrl tvAdd [[], _sideTitle];\n            _ctrl tvSetData [[_sideIndex], _sideStr];\n            _ctrl tvExpand [_sideIndex];\n        } else {\n            // pop data out of hash to improve later lookups\n            (_sideDataToPathHash select 0) deleteAt _lookup;\n            private _path = (_sideDataToPathHash select 1) deleteAt _lookup;\n            _sideIndex = _path select 0;\n\n            _ctrl tvSetText [_path, _sideTitle];\n        };\n\n        {\n            _x params [\"_groupInfo\", \"_nestedUnitData\"];\n            _groupInfo params [\"_group\", \"_groupStr\", \"_groupTexture\", \"_groupId\"];\n\n            private _groupIndex = -1;\n            private _lookup = (_groupDataToPathHash select 0) find _groupStr;\n            if (_lookup < 0) then {\n                _groupIndex = _ctrl tvAdd [[_sideIndex], _groupId];\n                _ctrl tvSetData [[_sideIndex, _groupIndex], _groupStr];\n                _ctrl tvSetPicture [[_sideIndex, _groupIndex], _groupTexture];\n                _ctrl tvSetPictureColor [[_sideIndex, _groupIndex], _sideColor];\n                _ctrl tvSetTooltip [[_sideIndex, _groupIndex], _groupId];\n                _ctrl tvExpand [_sideIndex, _groupIndex];\n            } else {\n                // pop data out of hash to improve later lookups\n                (_groupDataToPathHash select 0) deleteAt _lookup;\n                private _path = (_groupDataToPathHash select 1) deleteAt _lookup;\n                _groupIndex = _path select 1;\n\n                _ctrl tvSetText [_path, _groupId];\n                _ctrl tvSetPicture [_path, _groupTexture];\n                _ctrl tvSetPictureColor [_path, _sideColor];\n                _ctrl tvSetTooltip [_path, _groupId];\n            };\n\n            {\n                _x params [\"_unit\", \"_isAlive\", \"_isIncapacitated\", \"_name\"];\n\n                // Show full name in tooltip + whether medic + whether engineer\n                private _tooltip = [[_unit] call EFUNC(common,getName)];\n                if ([_unit] call EFUNC(common,isMedic)) then { _tooltip pushBack (localize \"str_support_medic\"); };\n                if ([_unit] call EFUNC(common,isEngineer)) then { _tooltip pushBack (localize LSTRING(TooltipEngineer)); };\n                _tooltip = _tooltip joinString \" - \";\n\n                private _texture = [_isAlive, _isIncapacitated, _unit] call {\n                    params [\"\",\"\",\"_unit\"];\n                    if !(_this select 0) exitWith { ICON_DEAD };\n                    if (_this select 1) exitWith { ICON_REVIVE };\n                    [vehicle _unit] call EFUNC(common,getVehicleIcon)\n                };\n\n                private _lookup = (_unitDataToPathHash select 0) find ([_unit] call BIS_fnc_objectVar);\n                if (_lookup < 0) then {\n                    private _unitIndex = _ctrl tvAdd [[_sideIndex, _groupIndex], _name];\n                    _ctrl tvSetData [[_sideIndex, _groupIndex, _unitIndex], [_unit] call BIS_fnc_objectVar];\n                    _ctrl tvSetPicture [[_sideIndex, _groupIndex, _unitIndex], _texture];\n                    _ctrl tvSetPictureColor [[_sideIndex, _groupIndex, _unitIndex], _sideColor];\n                    _ctrl tvSetTooltip [[_sideIndex, _groupIndex, _unitIndex], _tooltip];\n                } else {\n                    // pop data out of hash to improve later lookups\n                    (_unitDataToPathHash select 0) deleteAt _lookup;\n                    private _path = (_unitDataToPathHash select 1) deleteAt _lookup;\n                    _ctrl tvSetText [_path, _name];\n                    _ctrl tvSetPicture [_path, _texture];\n                    _ctrl tvSetPictureColor [_path, _sideColor];\n                    _ctrl tvSetTooltip [_path, _tooltip];\n                };\n                nil // Speed loop\n            } count _nestedUnitData;\n            nil // Speed loop\n        } count _nestedGroupData;\n        nil // Speed loop\n    } count _newList;\n\n    // Store the new list as the current list\n    GVAR(curList) = _newList;\n};\n\n// Update focus if required\n[] call FUNC(ui_updateListFocus);\n",
        "functionName": "ace_spectator_fnc_ui_updateListEntities"
      },
      {
        "fileName": "fnc_ui_updateListFocus.sqf",
        "content": "/*\n * Author: Nelson Duarte, AACO, SilentSpike\n * Function used to update the list current selection\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_ui_updateListFocus\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nCTRL_LIST tvSetCurSel ([[GVAR(camFocus)] call BIS_fnc_objectVar] call FUNC(ui_getTreeDataIndex));\n",
        "functionName": "ace_spectator_fnc_ui_updateListFocus"
      },
      {
        "fileName": "fnc_ui_updateWidget.sqf",
        "content": "/*\n * Author: Nelson Duarte, SilentSpike\n * Updates spectator UI unit info widget\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_spectator_fnc_ui_updateWidget\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define IMG_COMMANDER \"a3\\Ui_f\\data\\IGUI\\Cfg\\CommandBar\\imageCommander_ca.paa\"\n#define IMG_DRIVER \"a3\\Ui_f\\data\\IGUI\\Cfg\\CommandBar\\imageDriver_ca.paa\"\n#define IMG_GUNNER \"a3\\Ui_f\\data\\IGUI\\Cfg\\CommandBar\\imageGunner_ca.paa\"\n#define IMG_CARGO \"a3\\Ui_f\\data\\IGUI\\Cfg\\CommandBar\\imageCargo_ca.paa\"\n#define IMG_UNARMED \"\" // TODO: Find suitable unarmed icon\n\n// Hide if no target or widget is toggled off\nif (!GVAR(uiWidgetVisible) || {isNull GVAR(camFocus)}) exitWith {CTRL_WIDGET ctrlShow false};\n\nprivate _focus = GVAR(camFocus);\n\nprivate _name = ([_focus] call EFUNC(common,getName)) select [0, NAME_MAX_CHARACTERS];\nif !(isPlayer _focus) then { _name = format [\"%1: %2\", localize \"str_player_ai\", _name]; };\n\nprivate _unitTypePicture = \"\";\nprivate _vehicleTypePicture = \"\";\nprivate _vehiclePositionPicture = \"\";\nif (_focus != vehicle _focus) then {\n    _vehicleTypePicture = getText (configFile >> \"CfgVehicles\" >> typeOf vehicle _focus >> \"Picture\");\n\n    _vehiclePositionPicture = switch (_focus) do {\n        case (commander vehicle _focus): {IMG_COMMANDER};\n        case (driver vehicle _focus): {IMG_DRIVER};\n        case (gunner vehicle _focus): {IMG_GUNNER};\n        default {IMG_CARGO};\n    };\n} else {\n    _unitTypePicture = [_focus] call EFUNC(common,getVehicleIcon);\n};\n\n\nprivate _weapon = currentWeapon _focus;\nprivate _weaponPicture = if (_weapon != \"\") then {\n    getText (configFile >> \"CfgWeapons\" >> _weapon >> \"Picture\")\n} else {\n    IMG_UNARMED\n};\n\nprivate _throwable = (currentThrowable _focus) param [0,\"\"];\nprivate _throwablePicture = if (_throwable != \"\") then {\n    getText (configFile >> \"CfgMagazines\" >> _throwable >> \"Picture\")\n} else {\n    IMG_UNARMED\n};\n\n(getPlayerScores _focus) params [\n    [\"_kills\",0,[0]],\n    [\"_softKills\",0,[0]],\n    [\"_armoredKills\",0,[0]],\n    [\"_airKills\",0,[0]],\n    [\"_deaths\",0,[0]],\n    [\"_total\",0,[0]]\n];\n\nCTRL_WIDGET_NAME ctrlSetText _name;\nCTRL_WIDGET_KILLS ctrlSetText str _kills;\nCTRL_WIDGET_LAND ctrlSetText str _softKills;\nCTRL_WIDGET_ARMORED ctrlSetText str _armoredKills;\nCTRL_WIDGET_AIR ctrlSetText str _airKills;\nCTRL_WIDGET_DEATHS ctrlSetText str _deaths;\nCTRL_WIDGET_TOTAL ctrlSetText str _total;\n\nCTRL_WIDGET_WEAPON ctrlSetText _weaponPicture;\nCTRL_WIDGET_THROWABLE ctrlSetText _throwablePicture;\n\nCTRL_WIDGET_UNIT ctrlSetText _unitTypePicture;\nCTRL_WIDGET_VEHICLE ctrlSetText _vehicleTypePicture;\nCTRL_WIDGET_VEHICLE_POS ctrlSetText _vehiclePositionPicture;\n\n// Handle widget toggling\nif !(ctrlShown CTRL_WIDGET) then {\n    CTRL_WIDGET ctrlShow true;\n};\n",
        "functionName": "ace_spectator_fnc_ui_updateWidget"
      },
      {
        "fileName": "fnc_ui.sqf",
        "content": "/*\n * Author: SilentSpike\n * Handles UI initialisation and destruction\n *\n * Arguments:\n * 0: Init/Terminate <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [false] call ace_spectator_fnc_ui\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_init\"];\nTRACE_1(\"ui\",_init);\n\n// No change\nif (_init isEqualTo !isNull SPEC_DISPLAY) exitWith {};\n\n// Close map\nopenMap [false,false];\n\n// Close any open dialogs\nwhile {dialog} do {\n    closeDialog 0;\n};\n\n// Note that init and destroy intentionally happen in reverse order\n// Init: Vars > Display > UI Stuff\n// Destroy: UI Stuff > Display > Vars\nif (_init) then {\n    // UI visibility tracking\n    GVAR(uiVisible)         = true;\n    GVAR(uiHelpVisible)     = true;\n    GVAR(uiMapVisible)      = true;\n    GVAR(uiWidgetVisible)   = true;\n\n    // Drawing related\n    GVAR(drawProjectiles)   = false;\n    GVAR(drawUnits)         = true;\n    GVAR(entitiesToDraw)    = [];\n    GVAR(grenadesToDraw)    = [];\n    GVAR(iconsToDraw)       = [];\n    GVAR(projectilesToDraw) = [];\n\n    // RMB tracking is used for follow camera mode\n    GVAR(holdingRMB) = false;\n\n    // Highlighted map object is used for click and drawing events\n    GVAR(uiMapHighlighted) = objNull;\n\n    // Holds the current list data\n    GVAR(curList) = [];\n\n    // Cache view distance and set spectator default\n    GVAR(oldViewDistance) = viewDistance;\n    setViewDistance DEFAULT_VIEW_DISTANCE;\n\n    // If counter already exists handle it, otherwise display XEH will handle it\n    [GETUVAR(RscRespawnCounter,displayNull)] call FUNC(compat_counter);\n\n    // Create the display\n    MAIN_DISPLAY createDisplay QGVAR(display);\n\n    // Store default H value for scaling purposes\n    GVAR(uiHelpH) = (ctrlPosition CTRL_HELP) select 3;\n\n    // Initially hide map\n    [] call FUNC(ui_toggleMap);\n\n    // Initially fade the list\n    [true] call FUNC(ui_fadeList);\n\n    // Initalise the help, widget and list information\n    [] call FUNC(ui_updateCamButtons);\n    [] call FUNC(ui_updateListEntities);\n    [] call FUNC(ui_updateListFocus);\n    [] call FUNC(ui_updateWidget);\n    [] call FUNC(ui_updateHelp);\n\n    // Start updating things to draw\n    GVAR(collectPFH) = [LINKFUNC(ui_updateIconsToDraw), 0.2] call CBA_fnc_addPerFrameHandler;\n\n    // Draw icons and update the cursor object\n    GVAR(uiDraw3D) = addMissionEventHandler [\"Draw3D\", {call FUNC(ui_draw3D)}];\n\n    // Periodically update list and focus widget\n    GVAR(uiPFH) = [{\n        [] call FUNC(ui_updateListEntities);\n        [] call FUNC(ui_updateWidget);\n    }, 5] call CBA_fnc_addPerFrameHandler;\n} else {\n    // Stop updating the list and focus widget\n    [GVAR(uiPFH)] call CBA_fnc_removePerFrameHandler;\n    GVAR(uiPFH) = nil;\n\n    // Stop drawing icons and tracking cursor object\n    removeMissionEventHandler [\"Draw3D\", GVAR(uiDraw3D)];\n    GVAR(uiDraw3D) = nil;\n\n    // Stop updating things to draw\n    [GVAR(collectPFH)] call CBA_fnc_removePerFrameHandler;\n    GVAR(collectPFH) = nil;\n\n    // Destroy the display\n    SPEC_DISPLAY closeDisplay 1;\n\n    // Stop tracking everything\n    GVAR(uiVisible)         = nil;\n    GVAR(uiHelpVisible)     = nil;\n    GVAR(uiMapVisible)      = nil;\n    GVAR(uiWidgetVisible)   = nil;\n    GVAR(holdingRMB)        = nil;\n    GVAR(uiMapHighlighted)  = nil;\n    GVAR(curList)           = nil;\n    GVAR(uiHelpH)           = nil;\n\n    // Stop drawing\n    GVAR(drawProjectiles)   = nil;\n    GVAR(drawUnits)         = nil;\n    GVAR(entitiesToDraw)    = nil;\n    GVAR(grenadesToDraw)    = nil;\n    GVAR(iconsToDraw)       = nil;\n    GVAR(projectilesToDraw) = nil;\n\n    // Reset view distance\n    setViewDistance GVAR(oldViewDistance);\n    GVAR(oldViewDistance) = nil;\n\n    // Ensure chat is shown again\n    showChat true;\n};\n",
        "functionName": "ace_spectator_fnc_ui"
      },
      {
        "fileName": "fnc_updateCameraModes.sqf",
        "content": "/*\n * Author: SilentSpike\n * Adds or removes spectator camera modes from the selection available to the local player.\n * Possible camera modes are:\n *   - 0: Free\n *   - 1: First person\n *   - 2: Follow\n *\n * Default selection is [0,1,2]\n *\n * Arguments:\n * 0: Camera modes to add <ARRAY>\n * 1: Camera modes to remove <ARRAY>\n *\n * Return Value:\n * Available camera modes <ARRAY>\n *\n * Example:\n * [[0], [1,2]] call ace_spectator_fnc_updateCameraModes\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [DFUNC(updateCameraModes),_this];\n};\n\nparams [[\"_addModes\",[],[[]]], [\"_removeModes\",[],[[]]]];\n\nprivate _currentModes = GVAR(availableModes);\n\n// Restrict additions to only possible values\nprivate _newModes = _addModes arrayIntersect ALL_MODES;\n_newModes append (_currentModes - _removeModes);\n\n_newModes = _newModes arrayIntersect _newModes;\n_newModes sort true;\n\n// Can't become an empty array\nif (_newModes isEqualTo []) then {\n    WARNING(\"Cannot remove all spectator camera modes\");\n} else {\n    GVAR(availableModes) = _newModes;\n};\n\n// Update camera in case of change\nif !(isNil QGVAR(camera)) then {\n    // If mode was free and no longer available, find a focus\n    if (!(MODE_FREE in _newModes) && {GVAR(camMode) == MODE_FREE} && {isNull GVAR(camFocus)}) then {\n        [true] call FUNC(setFocus);\n    };\n\n    [GVAR(camMode)] call FUNC(cam_setCameraMode);\n};\n\n_newModes\n",
        "functionName": "ace_spectator_fnc_updateCameraModes"
      },
      {
        "fileName": "fnc_updateSides.sqf",
        "content": "/*\n * Author: SilentSpike\n * Adds or removes sides from the selection available to spectate. Local effect.\n *\n * Default selection is [west,east,resistance,civilian]\n *\n * Arguments:\n * 0: Sides to add <ARRAY>\n * 1: Sides to remove <ARRAY>\n *\n * Return Value:\n * Sides available <ARRAY>\n *\n * Example:\n * [[west], [east,civilian]] call ace_spectator_fnc_updateSides\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [[\"_addSides\",[],[[]]], [\"_removeSides\",[],[[]]]];\n\n// Add and remove sides\n_addSides append (GVAR(availableSides) - _removeSides);\n\n// Only need array of unique sides\n_addSides = _addSides arrayIntersect _addSides;\n\nGVAR(availableSides) = _addSides;\n\n_addSides\n",
        "functionName": "ace_spectator_fnc_updateSides"
      },
      {
        "fileName": "fnc_updateUnits.sqf",
        "content": "/*\n * Author: SilentSpike\n * Adds and removed units from the spectator list. Local effect.\n *\n * Arguments:\n * 0: Units to show in the list <ARRAY>\n * 1: Units to hide in the list <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [allPlayers, [player]] call ace_spectator_fnc_updateUnits\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\n// Function only matters on player clients\nif (!hasInterface) exitWith {};\n\nparams [[\"_addUnits\",[],[[]]], [\"_removeUnits\",[],[[], true]]];\n\n// Deprecated parameter (remember to remove bool from params when removed)\nif (_removeUnits isEqualType true) then {\n    ACE_DEPRECATED(\"Boolean parameter\",\"3.12.0\",\"array (see function header or doc)\");\n    if (_removeUnits) then {\n        _removeUnits = _addUnits;\n        _addUnits = [];\n    };\n};\n\n// Add to the whitelist and prevent list overlap\nGVAR(unitBlacklist) = GVAR(unitBlacklist) - _addUnits;\nGVAR(unitWhitelist) append _addUnits;\n\n// Blacklist overrides the whitelist\nGVAR(unitWhitelist) = GVAR(unitWhitelist) - _removeUnits;\nGVAR(unitBlacklist) append _removeUnits;\n",
        "functionName": "ace_spectator_fnc_updateUnits"
      },
      {
        "fileName": "fnc_updateVisionModes.sqf",
        "content": "/*\n * Author: SilentSpike\n * Adds or removes spectator vision modes from the selection available to the local player.\n *\n * Possible vision modes are:\n *   - -2: Normal\n *   - -1: Night vision\n *   -  0: White hot\n *   -  1: Black hot\n *   -  2: Light Green Hot / Darker Green cold\n *   -  3: Black Hot / Darker Green cold\n *   -  4: Light Red Hot / Darker Red Cold\n *   -  5: Black Hot / Darker Red Cold\n *   -  6: White Hot / Darker Red Cold\n *   -  7: Thermal (Shade of Red and Green, Bodies are white)\n *\n * Default selection is [-2,-1,0,1]\n *\n * Arguments:\n * 0: Vision modes to add <ARRAY>\n * 1: Vision modes to remove <ARRAY>\n *\n * Return Value:\n * Available vision modes <ARRAY>\n *\n * Example:\n * [[0], [1,2]] call ace_spectator_fnc_updateVisionModes\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nif !(EGVAR(common,settingsInitFinished)) exitWith {\n    EGVAR(common,runAtSettingsInitialized) pushBack [DFUNC(updateVisionModes),_this];\n};\n\nparams [[\"_addModes\",[],[[]]], [\"_removeModes\",[],[[]]]];\n\nprivate _currentModes = GVAR(availableVisions);\n\n// Restrict additions to only possible values\nprivate _newModes = _addModes arrayIntersect [-2,-1,0,1,2,3,4,5,6,7];\n_newModes append (_currentModes - _removeModes);\n\n_newModes = _newModes arrayIntersect _newModes;\n_newModes sort true;\n\n// Can't become an empty array\nif (_newModes isEqualTo []) then {\n    WARNING(\"Cannot remove all spectator vision modes\");\n} else {\n    GVAR(availableVisions) = _newModes;\n};\n\n// Update camera in case of change\nif !(isNil QGVAR(camera)) then {\n    [GVAR(camVision)] call FUNC(cam_setVisionMode);\n};\n\n_newModes\n",
        "functionName": "ace_spectator_fnc_updateVisionModes"
      }
    ]
  },
  {
    "component": "spottingscope",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_animateReticle.sqf",
        "content": "/*\n * Author: commy2\n * Animate scripted reticle of spotting scope.\n *\n * Arguments:\n * 0: Reticles RSC info display <DISPLAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [DISPLAY] call ace_spottingscope_fnc_animateReticle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_display\"];\nuinamespace setVariable [QGVAR(dlgSpottingScope), _display];\n\nprivate _ctrlReticle = _display displayCtrl IDC_RETICLE;\nprivate _ctrlBody = _display displayCtrl IDC_BODY;\nprivate _ctrlBlackLeft = _display displayCtrl IDC_BLACK_LEFT;\nprivate _ctrlBlackRight = _display displayCtrl IDC_BLACK_RIGHT;\n\n// check if optics are used\n// hide all controls otherwise\nprivate _isUsingOptic = ctrlShown (_display displayCtrl 154);\n\n_ctrlReticle ctrlShow _isUsingOptic;\n_ctrlBody ctrlShow _isUsingOptic;\n_ctrlBlackLeft ctrlShow _isUsingOptic;\n_ctrlBlackRight ctrlShow _isUsingOptic;\n\n// animate reticle\nprivate _zoom = ([] call EFUNC(common,getZoom)) * MAGIC_SCOPE_NUMBER;\n\n_ctrlReticle ctrlSetPosition [\n    POS_X_BASE(_zoom),\n    POS_Y_BASE(_zoom),\n    POS_W_BASE(_zoom),\n    POS_H_BASE(_zoom)\n];\n\n_ctrlReticle ctrlCommit 0;\n",
        "functionName": "ace_spottingscope_fnc_animateReticle"
      },
      {
        "fileName": "fnc_pickup.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n * Pick up spotting scope\n *\n * Arguments:\n * 0: spotting scope <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [spotting_scope, player] call ace_spottingscope_fnc_pickup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_spottingScope\", \"_unit\"];\n\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\n    _unit playMove \"AmovPercMstpSrasWrflDnon_diary\";\n};\n\n[{\n    params [\"_spottingScope\", \"_unit\"];\n\n    [_unit, \"ACE_SpottingScope\"] call EFUNC(common,addToInventory);\n    deleteVehicle _spottingScope;\n}, [_spottingScope, _unit], 1, 0]call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_spottingscope_fnc_pickup"
      },
      {
        "fileName": "fnc_place.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n * Place down spotting scope\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: scope class <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"ACE_SpottingScope\"] call ace_spottingscope_fnc_place\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_scopeClass\"];\n\n_unit removeItem _scopeClass;\n\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\n    _unit playMove \"AmovPercMstpSrasWrflDnon_diary\";\n};\n\n[{\n    params [\"_unit\"];\n\n    // prevent collision damage\n    [QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\n\n    // Check for a place to land the spotting scope\n    private _direction = getDir _unit;\n    private _position = (getPosASL _unit) vectorAdd [0.8 * sin(_direction), 0.8 * cos(_direction), 0];\n    private _vectorUp = [0, 0, 1];\n    private _intersections = lineIntersectsSurfaces [_position vectorAdd [0, 0, 1.5], _position vectorDiff [0, 0, 1.5], _unit, objNull, true, 1, \"GEOM\", \"FIRE\"];\n    if (_intersections isEqualTo []) then {\n        TRACE_1(\"No intersections\",_intersections);\n    } else {\n        (_intersections select 0) params [\"_touchingPoint\", \"_surfaceNormal\"];\n        _position = _touchingPoint vectorAdd [0, 0, 0.05];\n        _vectorUp = _surfaceNormal;\n    };\n\n    // Create the scope and set its position and orientation\n    private _spottingScope = \"ACE_SpottingScopeObject\" createVehicle [0, 0, 0];\n    _spottingScope setDir _direction;\n    _spottingScope setPosASL _position;\n    _spottingScope setVectorUp _vectorUp;\n    [QEGVAR(common,fixPosition), _spottingScope, _spottingScope] call CBA_fnc_targetEvent;\n    [QEGVAR(common,fixFloating), _spottingScope, _spottingScope] call CBA_fnc_targetEvent;\n\n    _unit reveal _spottingScope;\n\n}, [_unit], 1, 0] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_spottingscope_fnc_place"
      }
    ]
  },
  {
    "component": "switchunits",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "/*\n * Author: bux578\n * Initializes the SwitchUnits pbo.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n\nif (missionNamespace getVariable [QGVAR(EnableSwitchUnits), false]) then {\n    [player] call FUNC(startSwitchUnits);\n} else {\n    [\"ace_settingChanged\", {\n        params [\"_name\", \"_value\"];\n        if ((_name == QGVAR(EnableSwitchUnits)) && {_value}) then {\n            [player] call FUNC(startSwitchUnits);\n        };\n    }] call CBA_fnc_addEventHandler;\n};\n\nif (isServer) then {\n    [QGVAR(switchLocality), {\n        params [\"_unit\", \"_player\"];\n        _unit setVariable [QGVAR(OriginalOwner), owner _unit, true];\n        _unit setOwner (owner _player);\n    }] call CBA_fnc_addEventHandler;\n};\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addMapFunction.sqf",
        "content": "/*\n * Author: bux578\n * Adds a mapClick Eventhandler\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: sides <ARRAY<OBJECT>>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit, _sides] call ace_switchunits_fnc_addMapFunction\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_sides\"];\n\n[\"theMapClick\", \"onMapSingleClick\", {\n    // IGNORE_PRIVATE_WARNING(_pos,_shift,_alt)\n    if (alive ACE_player && {GVAR(OriginalUnit) getVariable [\"ACE_CanSwitchUnits\", false]}) then {\n        [_this, _pos, _shift, _alt] call FUNC(handleMapClick);\n    };\n\n}, [_unit, _sides]] call BIS_fnc_addStackedEventHandler;\n",
        "functionName": "ace_switchunits_fnc_addMapFunction"
      },
      {
        "fileName": "fnc_handleMapClick.sqf",
        "content": "/*\n * Author: bux578\n * Switches to a unit close to a clicked map position\n *\n * Arguments:\n * 0: Faction <ARRAY>\n *   0: unit <OBJECT>\n *   1: sides <ARRAY>\n * 1: Map Position <ARRAY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[unit, _sides], [20, 30]] call ace_switchunits_fnc_handleMapClick\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_faction\", \"_pos\"];\n_faction params [\"\", \"_sides\"];\n\nprivate _sideNearest = [];\n\n{\n    if ([_x] call FUNC(isValidAi) && (side group _x in _sides)) then {\n        _sideNearest pushBack _x;\n    };\n    nil\n} count (nearestObjects [_pos, [\"Man\"], 15]);\n\nif (count _sideNearest > 0) then {\n    [_sideNearest select 0] call FUNC(switchUnit);\n    openMap false;\n};\n",
        "functionName": "ace_switchunits_fnc_handleMapClick"
      },
      {
        "fileName": "fnc_initPlayer.sqf",
        "content": "/*\n * Author: bux578\n * Initializes the player\n *\n * Arguments:\n * 0: player <OBJECT>\n * 1: sides <ARRAY<OBJECT>>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, [west]] call ace_switchunits_fnc_initPlayer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_playerUnit\", \"_sides\"];\n\nif (vehicle _playerUnit == _playerUnit) then {\n    [_sides] call FUNC(markAiOnMap);\n\n    _playerUnit setVariable [QGVAR(IsPlayerUnit), true, true];\n    _playerUnit allowDamage false;\n\n    GVAR(OriginalUnit) = _playerUnit;\n    GVAR(OriginalName) = name _playerUnit;\n    GVAR(OriginalGroup) = group _playerUnit;\n\n    // remove all starting gear of a player\n    removeAllWeapons _playerUnit;\n    removeGoggles _playerUnit;\n    removeHeadgear _playerUnit;\n    removeVest _playerUnit;\n    removeAllAssignedItems _playerUnit;\n    clearAllItemsFromBackpack _playerUnit;\n    removeBackpack _playerUnit;\n    _playerUnit linkItem  \"ItemMap\";\n    removeUniform _playerUnit;\n\n    [_playerUnit, \"forceWalk\", \"ACE_SwitchUnits\", true] call EFUNC(common,statusEffect_set);\n\n    [_playerUnit, _sides] call FUNC(addMapFunction);\n};\n",
        "functionName": "ace_switchunits_fnc_initPlayer"
      },
      {
        "fileName": "fnc_isValidAi.sqf",
        "content": "/*\n * Author: bux578\n * Checks if AI is a valid target for switching.\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * Valid AI <BOOL>\n *\n * Example:\n * [_unit] call ace_switchunits_fnc_isValidAi\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n!([_unit] call EFUNC(common,isPlayer)\n|| {_unit in playableUnits}\n|| {vehicle _unit != _unit}\n|| {_unit getVariable [QGVAR(IsPlayerUnit), false]}\n|| {_unit getVariable [QGVAR(IsPlayerControlled), false]}) // return\n",
        "functionName": "ace_switchunits_fnc_isValidAi"
      },
      {
        "fileName": "fnc_markAiOnMap.sqf",
        "content": "/*\n * Author: bux578\n * Creates markers for AI units for given sides.\n * Marks players in a different colour.\n *\n * Arguments:\n * 0: side <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [[west, east]] call ace_switchunits_fnc_markAiOnMap\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_sidesToShow\"];\n\nGVAR(AllMarkerNames) = [];\n\n[{\n    params [\"_args\"];\n    _args params [\"_sides\"];\n\n    // delete markers\n    {\n        deleteMarkerLocal _x;\n    } count GVAR(AllMarkerNames);\n\n    // reset the array\n    GVAR(AllMarkerNames) = [];\n\n    if (alive ACE_player && {GVAR(OriginalUnit) getVariable [\"ACE_CanSwitchUnits\", false]}) then {\n\n        // create markers\n        {\n            if (([_x] call FUNC(isValidAi) && (side group _x in _sides)) || (_x getVariable [QGVAR(IsPlayerControlled), false])) then {\n\n                private _markerName = str _x;\n\n                private _marker = createMarkerLocal [_markerName, position _x];\n                _markerName setMarkerTypeLocal \"mil_triangle\";\n                _markerName setMarkerShapeLocal \"ICON\";\n                _markerName setMarkerSizeLocal [0.5, 0.7];\n                _markerName setMarkerDirLocal getDir _x;\n\n                // commy's one liner magic\n                private _markerColor = format [\"Color%1\", side group _x];\n\n                if ((_x getVariable [QGVAR(IsPlayerControlled), false])) then {\n                    _markerName setMarkerColorLocal \"ColorOrange\";\n                    _markerName setMarkerTextLocal (_x getVariable [QGVAR(PlayerControlledName), \"\"]);\n                } else {\n                    _markerName setMarkerColorLocal _markerColor;\n                    _markerName setMarkerTextLocal (getText (configFile >> \"CfgVehicles\" >> typeOf _x >> \"displayName\"));\n                };\n\n                GVAR(AllMarkerNames) pushBack _markerName;\n                nil\n            };\n        } count allUnits;\n    };\n}, 1.5, [_sidesToShow]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_switchunits_fnc_markAiOnMap"
      },
      {
        "fileName": "fnc_module.sqf",
        "content": "/*\n * Author: bux578\n * Initializes the SwitchUnits module\n *\n * Arguments:\n * 0: module logic <OBJECT>\n * 1: list of affected units <ARRAY<OBJECT>>\n * 2: isActivated <BOOLEAN>\n *\n * Return Value:\n * None\n *\n * Example:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\nGVAR(Module) = true;\n\n[_logic, QGVAR(SwitchToWest), \"SwitchToWest\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(SwitchToEast), \"SwitchToEast\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(SwitchToIndependent), \"SwitchToIndependent\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(SwitchToCivilian), \"SwitchToCivilian\"] call EFUNC(common,readSettingFromModule);\n\n[_logic, QGVAR(EnableSafeZone), \"EnableSafeZone\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(SafeZoneRadius), \"SafeZoneRadius\"] call EFUNC(common,readSettingFromModule);\n\n[\"CBA_settings_setSettingMission\", [QGVAR(EnableSwitchUnits), true, true]] call CBA_fnc_localEvent;\n\nINFO(\"SwitchUnits Module Initialized.\");\n",
        "functionName": "ace_switchunits_fnc_module"
      },
      {
        "fileName": "fnc_nearestPlayers.sqf",
        "content": "/*\n * Author: bux578\n * Returns an array of alive players in a given radius around a given location\n *\n * Arguments:\n * 0: Center position <POSTION>\n * 1: Radius <NUMBER>\n *\n * Return Value:\n * Player units <ARRAY<OBJECT>>\n *\n * Example:\n * [[300,300,0], 100] call ace_switchunits_fnc_nearestPlayers\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_position\", \"_radius\"];\n\nprivate _nearestPlayers = [];\n\n{\n    if ([_x] call EFUNC(common,isPlayer) && {alive _x}) then {\n        _nearestPlayers pushBack _x;\n    };\n} forEach (nearestObjects [_position, [\"Man\"], _radius]);\n\n_nearestPlayers\n",
        "functionName": "ace_switchunits_fnc_nearestPlayers"
      },
      {
        "fileName": "fnc_startSwitchUnits.sqf",
        "content": "/*\n * Author: bux578\n * Starts the SwitchUnits functionality\n *\n * Arguments:\n * 0: player <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_player] call ace_switchunits_fnc_startSwitchUnits\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_player\"];\n\nif (GVAR(EnableSwitchUnits)) then {\n    private _sides = [];\n\n    if(GVAR(SwitchToWest)) then {_sides pushBack west;};\n    if(GVAR(SwitchToEast)) then {_sides pushBack east;};\n    if(GVAR(SwitchToIndependent)) then {_sides pushBack independent;};\n    if(GVAR(SwitchToCivilian)) then {_sides pushBack civilian;};\n\n    if (_player getVariable [\"ACE_CanSwitchUnits\", false]) then {\n        [_player, _sides] call FUNC(initPlayer);\n    };\n};\n",
        "functionName": "ace_switchunits_fnc_startSwitchUnits"
      },
      {
        "fileName": "fnc_switchBack.sqf",
        "content": "/*\n * Author: bux578\n * Switches back to the original player unit\n *\n * Arguments:\n * 0: Original player unit <OBJECT>\n * 1: Respawned unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_originalPlayerUnit, _currentUnit] call ace_switchunits_fnc_switchBack\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_originalPlayerUnit\"];\n\n[_originalPlayerUnit] joinSilent GVAR(OriginalGroup);\n\n[{\n    params [\"_args\", \"_pfhId\"];\n    _args params [\"_originalPlayerUnit\", \"_currentUnit\"];\n\n    if (local _originalPlayerUnit) exitWith {\n        selectPlayer _originalPlayerUnit;\n\n        // deleteVehicle _currentUnit;\n\n        // private _layer = \"BIS_fnc_respawnCounter\" call bis_fnc_rscLayer;\n        // _layer cuttext [\"\",\"plain\"];\n\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\n    };\n}, 0.2, _this] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_switchunits_fnc_switchBack"
      },
      {
        "fileName": "fnc_switchUnit.sqf",
        "content": "/*\n * Author: bux578\n * Switches to the new given player unit\n *\n * Arguments:\n * 0: the unit to switch to <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit] call ace_switchunits_fnc_switchUnit\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// don't switch to original player units\nif (!([_unit] call FUNC(isValidAi))) exitWith {};\n\n// exit var\nprivate _leave = false;\n\nif (GVAR(EnableSafeZone)) then {\n    private _allNearestPlayers = [position _unit, GVAR(SafeZoneRadius)] call FUNC(nearestPlayers);\n    private _nearestEnemyPlayers = _allNearestPlayers select {((side GVAR(OriginalGroup)) getFriend side _x < 0.6) && !(_x getVariable [QGVAR(IsPlayerControlled), false])};\n\n    if (count _nearestEnemyPlayers > 0) exitWith {\n        _leave = true;\n    };\n};\n\n// exitWith doesn't exit past the \"if(EnableSafeZone)\" block\nif (_leave) exitWith {\n    [localize LSTRING(TooCloseToEnemy)] call EFUNC(common,displayTextStructured);\n};\n\n// should switch locality\n// This doesn't work anymore, because one's now able to switch to units from a different side\n//[_unit] joinSilent group player;\n[QGVAR(switchLocality), [_unit, player]] call CBA_fnc_serverEvent;\n\n[{\n    params [\"_args\", \"_pfhId\"];\n    _args params [\"_unit\", \"_oldUnit\"];\n\n    [localize LSTRING(TryingToSwitch)] call EFUNC(common,displayTextStructured);\n\n    if (local _unit) exitWith {\n        _oldUnit setVariable [QGVAR(IsPlayerControlled), false, true];\n        _oldUnit setVariable [QGVAR(PlayerControlledName), \"\", true];\n\n        private _killedEhId = _unit getVariable [QGVAR(KilledEhId), -1];\n        if (_killedEhId != -1) then {\n            _oldUnit removeEventHandler [\"Killed\", _killedEhId];\n        };\n\n        selectPlayer _unit;\n\n        _unit setVariable [QGVAR(IsPlayerControlled), true, true];\n        _unit setVariable [QGVAR(PlayerControlledName), GVAR(OriginalName), true];\n\n\n        _killedEhId = _unit addEventHandler [\"Killed\", {\n            [GVAR(OriginalUnit), _this select 0] call FUNC(switchBack);\n        }];\n        _unit setVariable [QGVAR(KilledEhId), _killedEhId, true];\n\n\n        // set owner back to original owner\n        private _oldOwner = _oldUnit getVariable[QGVAR(OriginalOwner), -1];\n        if (_oldOwner > -1) then {\n            [\"ace_setOwner\", [_oldUnit, _oldOwner]] call CBA_fnc_serverEvent;\n        };\n\n        [localize LSTRING(SwitchedUnit)] call EFUNC(common,displayTextStructured);\n\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\n    };\n}, 0.2, [_unit, player]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_switchunits_fnc_switchUnit"
      }
    ]
  },
  {
    "component": "tacticalladder",
    "files": [
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"MouseZChanged\", {(_this select 1) call FUNC(handleScrollWheel)}];\n_display displayAddEventHandler [\"MouseButtonDown\", {[ACE_player, _this select 1] call FUNC(cancelTLdeploy)}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(ladder) = objNull;\nGVAR(cancelTime) = 0;\nGVAR(currentStep) = 3;\nGVAR(currentAngle) = 0;\n\n/*[\"ace_interactMenuOpened\", {\n    if ((CBA_missionTime > GVAR(cancelTime)) && !isNull GVAR(ladder)) then {\n        GVAR(ladder) call FUNC(cancelTLdeploy);\n    };\n}] call CBA_fnc_addEventHandler;*/\n\n// Cancel adjustment if interact menu opens\n[\"ace_interactMenuOpened\", {[ACE_player] call FUNC(handleInteractMenuOpened)}] call CBA_fnc_addEventHandler;\n\n// Cancel adjusting on player change.\n[\"unit\", FUNC(handlePlayerChanged)] call CBA_fnc_addPlayerEventHandler;\n[\"vehicle\", {[ACE_player, objNull] call FUNC(handlePlayerChanged)}] call CBA_fnc_addPlayerEventHandler;\n\n// handle falling unconscious\n[\"ace_unconscious\", {_this call FUNC(handleUnconscious)}] call CBA_fnc_addEventHandler;\n\n// @todo captivity?\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_cancelTLdeploy.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg, commy2\n * Cancel tactical ladder deployment\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Key <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_ladder] call ace_tacticalladder_fnc_cancelTLdeploy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __ANIMS [\"extract_1\",\"extract_2\",\"extract_3\",\"extract_4\",\"extract_5\",\"extract_6\",\"extract_7\",\"extract_8\",\"extract_9\",\"extract_10\",\"extract_11\"]\n\nparams [\"_unit\", \"_key\"];\n\nif (_key != 1 || {isNull GVAR(ladder)}) exitWith {};\n\n// enable running again\n[_unit, \"forceWalk\", \"ACE_Ladder\", false] call EFUNC(common,statusEffect_set);\n\ndetach GVAR(ladder);\n\nGVAR(ladder) animate [\"rotate\", 0];\n\n{\n    GVAR(ladder) animate [_x, 0];\n    true\n} count __ANIMS;\n\n// remove mouse buttons and hint\ncall EFUNC(interaction,hideMouseHint);\n\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(Common,removeActionEventHandler);\n\nGVAR(ladder) = objNull;\n",
        "functionName": "ace_tacticalladder_fnc_cancelTLdeploy"
      },
      {
        "fileName": "fnc_confirmTLdeploy.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg, commy2\n * Confirm tactical ladder deployment\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: ladder <OBJECT>\n *\n * Return Value:\n * Success <BOOL>\n *\n * Example:\n * [_ladder] call ace_tacticalladder_fnc_confirmTLdeploy\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_ladder\"];\n\n// enable running again\n[_unit, \"forceWalk\", \"ACE_Ladder\", false] call EFUNC(common,statusEffect_set);\n\nprivate _pos1 = getPosASL _ladder;\nprivate _pos2 = AGLToASL (_ladder modelToWorld (_ladder selectionPosition \"check2\"));\n\nif (lineIntersects [_pos1, _pos2, _ladder]) exitWith {false};\n\ndetach _ladder;\n\n// remove mouse buttons and hint\ncall EFUNC(interaction,hideMouseHint);\n\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(common,removeActionEventHandler);\n\nGVAR(ladder) = objNull;\n\ntrue\n",
        "functionName": "ace_tacticalladder_fnc_confirmTLdeploy"
      },
      {
        "fileName": "fnc_deployTL.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n * Deploy tactical ladder\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit] call ace_tacticalladder_fnc_deployTL\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (backpack _unit != 'ACE_TacticalLadder_Pack') exitWith {};\n\nremoveBackpack _unit;\n\n\nprivate _pos = _unit modelToWorld [0,0,0];\nprivate _offset = if ((_unit call CBA_fnc_getUnitAnim select 0) == \"prone\") then { 1 } else {0.8};\n\n_pos set [0, (_pos select 0) + (sin getDir _unit) * _offset];\n_pos set [1, (_pos select 1) + (cos getDir _unit) * _offset];\n_pos set [2, [_unit] call CBA_fnc_realHeight];\n\nprivate _ladder = \"ACE_TacticalLadder\" createVehicle _pos;\n_ladder setPos _pos;\n_ladder setDir getDir _unit;\n\n_unit reveal _ladder;\n",
        "functionName": "ace_tacticalladder_fnc_deployTL"
      },
      {
        "fileName": "fnc_handleInteractMenuOpened.sqf",
        "content": "/*\n * Author: commy2\n * Handle opening of interaction menu.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_tacticalladder_fnc_handleInteractMenuOpened\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!isNull (GETMVAR(GVAR(ladder),objNull)) && {GVAR(ladder) in attachedObjects _unit}) then {\n    [_unit, GVAR(ladder)] call FUNC(cancelTLdeploy);\n};\n",
        "functionName": "ace_tacticalladder_fnc_handleInteractMenuOpened"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: commy2\n * Handle death.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_tacticalladder_fnc_handleKilled\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!isNull (GETMVAR(ladder,objNull)) && {GVAR(ladder) in attachedObjects _unit}) then {\n    [_unit, GVAR(ladder)] call FUNC(cancelTLdeploy);\n};\n",
        "functionName": "ace_tacticalladder_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle player changes.\n *\n * Arguments:\n * 0: New Player Unit <OBJECT>\n * 1: Old Player Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ace_tacticalladder_fnc_handlePlayerChanged\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nif (isNull (GETGVAR(ladder,objNull))) exitWith {};\n\nparams [\"_newPlayer\", \"_oldPlayer\"];\n\nif (GVAR(ladder) in attachedObjects _newPlayer) then {\n    [_newPlayer, GVAR(ladder)] call FUNC(cancelTLdeploy);\n};\n\nif (GVAR(ladder) in attachedObjects _oldPlayer) then {\n    [_oldPlayer, GVAR(ladder)] call FUNC(cancelTLdeploy);\n};\n",
        "functionName": "ace_tacticalladder_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handleScrollWheel.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n * Handles lengthening and tilting of the ladder\n *\n * Arguments:\n * Amount scrolled <NUMBER>\n *\n * Return Value:\n * Handled <BOOL>\n *\n * Example:\n * [1] call ace_tacticalladder_fnc_handleScrollWheel;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_scroll\"];\n\nif (isNull GVAR(ladder)) exitWith { false };\n\nif (ACE_Modifier == 0) then {\n    // Lengthening\n    if (_scroll > 0) then {\n        private _currentStep = GVAR(currentStep);\n        if (_currentStep == 11) exitWith {};\n        _currentStep = _currentStep + 1;\n        if (GVAR(ladder) animationPhase (format[\"extract_%1\", _currentStep]) == 0) then {\n            GVAR(ladder) animate [format[\"extract_%1\", _currentStep], 1];\n            GVAR(currentStep) = _currentStep;\n        };\n    };\n    if (_scroll < 0) then {\n        private _currentStep = GVAR(currentStep);\n        if (_currentStep == 3) exitWith {};\n        if (GVAR(ladder) animationPhase (format[\"extract_%1\", _currentStep]) == 1) then {\n            GVAR(ladder) animate [format[\"extract_%1\", _currentStep], 0];\n            GVAR(currentStep) = _currentStep - 1;\n        };\n    };\n};// else {\n    // Tilting (disabled due to sinking, interaction point offset and unsuitable animation)\n    //GVAR(currentAngle) = 0 max (GVAR(currentAngle) + _scroll) min 30;\n    //GVAR(ladder) animate [\"rotate\", GVAR(currentAngle)];\n//};\n\ntrue\n",
        "functionName": "ace_tacticalladder_fnc_handleScrollWheel"
      },
      {
        "fileName": "fnc_handleUnconscious.sqf",
        "content": "/*\n * Author: commy2\n * Handle unconsciousness.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_tacticalladder_fnc_handleUnconscious\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!local _unit) exitWith {};\n\nif (!isNull (GETMVAR(ladder,objNull)) && {GVAR(ladder) in attachedObjects _unit}) then {\n    [_unit, GVAR(ladder)] call FUNC(cancelTLdeploy);\n};\n",
        "functionName": "ace_tacticalladder_fnc_handleUnconscious"
      },
      {
        "fileName": "fnc_isLadderEmpty.sqf",
        "content": "/*\n * Author: Jonpas\n * Checks if Tactical Ladder is empty (no one climbing it).\n *\n * Arguments:\n * 0: Ladder <OBJECT>\n *\n * Return Value:\n * Can Be Picked Up <BOOL>\n *\n * Example:\n * [ladder] call ace_tacticalladder_fnc_isLadderEmpty;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_ladder\"];\n\nprivate _unitsNearLadder = nearestObjects [_ladder, [\"CAManBase\"], 4];\nTRACE_1(\"Near Ladder\",_unitsNearLadder);\n\nprivate _ladderEmpty = true;\n{\n    if (getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> animationState _x >> \"ACE_isLadder\") == 1) exitWith {\n        _ladderEmpty = false;\n        TRACE_1(\"On Ladder\",_x);\n    };\n} forEach _unitsNearLadder;\n\n_ladderEmpty\n",
        "functionName": "ace_tacticalladder_fnc_isLadderEmpty"
      },
      {
        "fileName": "fnc_pickupTL.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg, commy2\n * Pick up tactical ladder\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: ladder <OBJECT>\n *\n * Return Value:\n * Success <BOOL>\n *\n * Example:\n * [_unit, _ladder] call ace_tacticalladder_fnc_pickupTL\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_ladder\"];\n\nif (backpack _unit != \"\") exitWith {false};\n\ndeleteVehicle _ladder;\n\n_unit addBackpack \"ACE_TacticalLadder_Pack\";\n\ntrue\n",
        "functionName": "ace_tacticalladder_fnc_pickupTL"
      },
      {
        "fileName": "fnc_positionTL.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n * Position tactical ladder\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: ladder <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit, _ladder] call ace_tacticalladder_fnc_positionTL\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __ANIMS [\"extract_1\",\"extract_2\",\"extract_3\",\"extract_4\",\"extract_5\",\"extract_6\",\"extract_7\",\"extract_8\",\"extract_9\",\"extract_10\",\"extract_11\"]\n\nparams [\"_unit\", \"_ladder\"];\n\n// prevent the placing unit from running\n[_unit, \"forceWalk\", \"ACE_Ladder\", true] call EFUNC(common,statusEffect_set);\n\n{\n    _ladder animate [_x, 0];\n} count __ANIMS;\n\n[_unit, \"amovpercmstpslowwrfldnon_player_idlesteady03\", 2] call EFUNC(common,doAnimation);\n\n_ladder attachTo [_unit, [0, 0.75, 0], \"\"]; // Position ladder in front of player\n\n_ladder animate [\"rotate\", 0];\n{\n    _ladder animate [_x, 1];\n} count [\"extract_1\", \"extract_2\", \"extract_3\"]; // Extract ladder at head height (extract_3)\n\nGVAR(ladder) = _ladder;\nGVAR(cancelTime) = CBA_missionTime + 1; // Workaround to prevent accidental canceling\nGVAR(currentStep) = 3;\nGVAR(currentAngle) = 0;\n\n// add mouse buttons and hints\n//private _adjustText = format [\"%1, +%2\", localize LSTRING(Adjust), localize LSTRING(AdjustTilt)]; // Tilting disabled due to sinking, interaction point offset and unsuitable animation\n[localize LSTRING(Deploy), localize LSTRING(Drop), /*_adjustText*/ localize LSTRING(Adjust)] call EFUNC(interaction,showMouseHint);\n\n_unit setVariable [QGVAR(Deploy), [\n    _unit, \"DefaultAction\",\n    {!isNull GVAR(ladder)},\n    {[_this select 0, GVAR(ladder)] call FUNC(confirmTLdeploy)}\n] call EFUNC(common,addActionEventHandler)];\n",
        "functionName": "ace_tacticalladder_fnc_positionTL"
      }
    ]
  },
  {
    "component": "tagging",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by esteldunedain\n#include \"script_component.hpp\"\n\n\n// Cache for static objects\nGVAR(cacheStaticModels) = [false] call CBA_fnc_createNamespace;\n\n// Consider static everything vehicle that inherit from Static\n// This include houses (which we don't need), but also walls, that we do\nprivate _cfgBase = configFile >> \"CfgVehicles\";\nprivate _countOptions = count _cfgBase;\nfor \"_index\" from 0 to (_countOptions - 1) do {\n    private _cfgClass = _cfgBase select _index;\n    if (isClass _cfgClass) then {\n        if ((configName _cfgClass) isKindOf \"Static\") then {\n            private _model = getText (_cfgClass >> \"model\");\n            if (_model != \"\") then {\n                private _array = _model splitString \"\\\";\n                GVAR(cacheStaticModels) setVariable [(_array select ((count _array) - 1)), true];\n            };\n        };\n    };\n};\n\n// Also consider static all object inheriting from bridges\n_cfgBase = configFile >> \"CfgNonAIVehicles\";\n_countOptions = count _cfgBase;\nfor \"_index\" from 0 to (_countOptions - 1) do {\n    private _cfgClass = _cfgBase select _index;\n    if (isClass _cfgClass) then {\n        if ((configName _cfgClass) isKindOf [\"Bridge_base_F\", _cfgBase]) then {\n            private _model = getText (_cfgClass >> \"model\");\n            if (_model != \"\") then {\n                private _array = _model splitString \"\\\";\n                GVAR(cacheStaticModels) setVariable [(_array select ((count _array) - 1)), true];\n            };\n        };\n    };\n};\n\nif (hasInterface) then {\n    // Compile and cache config tags\n    call FUNC(compileConfigTags);\n\n    // Scripted tag adding EH\n    [QGVAR(applyCustomTag), FUNC(applyCustomTag)] call CBA_fnc_addEventHandler;\n\n    // Keybind\n    [\"ACE3 Equipment\", QGVAR(quickTag), localize LSTRING(QuickTag), {\n        // Conditions\n        if !(ACE_player call FUNC(checkTaggable)) exitWith {false};\n\n        // Statement\n        ACE_player call FUNC(quickTag);\n        true\n    }, {false}, [0, [false, false, false]], false] call CBA_fnc_addKeybind; // Unbound\n};\n\nif (!isServer) exitWith {};\n\nGVAR(testingThread) = false;\nGVAR(tagsToTest) = [];\n\n[QGVAR(createTag), DFUNC(createTag)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(cachedTags) = [];\nGVAR(cachedRequiredItems) = [];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addCustomTag.sqf",
        "content": "/*\n * Author: Jonpas\n * Adds custom tag. Has to be executed on one machine only.\n *\n * Arguments:\n * 0: Unique Identifier <STRING>\n * 1: Display Name <STRING>\n * 2: Required Item <STRING>\n * 3: Textures Paths <ARRAY>\n * 4: Icon Path <STRING> (default: \"\")\n *\n * Return Value:\n * Sucessfully Added Tag <BOOL>\n *\n * Example:\n * [\"ace_victoryRed\", \"Victory Red\", \"ACE_SpraypaintRed\", [\"path\\to\\texture1.paa\", \"path\\to\\texture2.paa\"], \"path\\to\\icon.paa\"] call ace_tagging_fnc_addCustomTag\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\n    [\"_identifier\", \"\", [\"\"]],\n    [\"_displayName\", \"\", [\"\"]],\n    [\"_requiredItem\", \"\", [\"\"]],\n    [\"_textures\", [], [[]]],\n    [\"_icon\", \"\", [\"\"]]\n];\n\n// Verify\nif (_identifier == \"\") exitWith {\n    ERROR(\"Failed adding custom tag - missing identifier\");\n};\n\nif (_displayName == \"\") exitWith {\n    ERROR_1(\"Failed adding custom tag: %1 - missing displayName\",_identifier);\n};\n\nif (_requiredItem == \"\") exitWith {\n    ERROR_1(\"Failed adding custom tag: %1 - missing requiredItem\",_identifier);\n};\nif (!isClass (configFile >> \"CfgWeapons\" >> _requiredItem)) exitWith {\n    ERROR_2(\"Failed adding custom tag: %1 - requiredItem %2 does not exist\",_identifier,_requiredItem);\n};\n\nif (_textures isEqualTo []) exitWith {\n    ERROR_1(\"Failed adding custom tag: %1 - missing textures\",_identifier);\n};\n\n_identifier = [_identifier] call CBA_fnc_removeWhitespace;\n_requiredItem = toLower _requiredItem;\n\n// Add\n[QGVAR(applyCustomTag), [_identifier, _displayName, _requiredItem, _textures, _icon]] call CBA_fnc_globalEventJIP;\n",
        "functionName": "ace_tagging_fnc_addCustomTag"
      },
      {
        "fileName": "fnc_addTagActions.sqf",
        "content": "/*\n * Author: Jonpas\n * Compiles tags from ACE_Tags and returns children actions.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [unit] call ace_tagging_fnc_addTagActions\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nprivate _actions = [];\n{\n    _x params [\"_class\", \"_displayName\", \"_requiredItem\", \"_textures\", \"_icon\"];\n\n    _actions pushBack [\n        [\n            format [\"ACE_ConfigTag_%1\", _class],\n            _displayName,\n            _icon,\n            {\n                (_this select 2) params [\"_unit\", \"_class\", \"_textures\"];\n                [_unit, selectRandom _textures] call FUNC(tag);\n                _unit setVariable [QGVAR(lastUsedTag), _class];\n            },\n            {\n                (_this select 2) params [\"_unit\", \"\", \"\", \"_requiredItem\"];\n                _requiredItem in ((items _unit) apply {toLower _x})\n            },\n            {},\n            [_unit, _class, _textures, _requiredItem]\n        ] call EFUNC(interact_menu,createAction),\n        [],\n        _unit\n    ];\n} forEach GVAR(cachedTags);\n\n_actions\n",
        "functionName": "ace_tagging_fnc_addTagActions"
      },
      {
        "fileName": "fnc_applyCustomTag.sqf",
        "content": "/*\n * Author: Jonpas\n * Applies custom tag to the cache.\n *\n * Arguments:\n * 0: Unique Identifier <STRING>\n * 1: Display Name <STRING>\n * 2: Required Item <STRING>\n * 3: Textures Paths <ARRAY>\n * 4: Icon Path <STRING> (default: \"\")\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"ace_victoryRed\", \"Victory Red\", \"ACE_SpraypaintRed\", [\"path\\to\\texture1.paa\", \"path\\to\\texture2.paa\"], \"path\\to\\icon.paa\"] call ace_tagging_fnc_applyCustomTag\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_identifier\", \"_displayName\", \"_requiredItem\"];\n\n// Add only if tag not already added (compare identifiers)\nif !(GVAR(cachedTags) select {_x select 0 == _identifier} isEqualTo []) exitWith {\n    INFO_2(\"Tag with selected identifier already exists: %1 (%2)\",_identifier,_displayName)\n};\n\nGVAR(cachedTags) pushBack _this;\nGVAR(cachedRequiredItems) pushBackUnique _requiredItem;\nTRACE_1(\"Added custom script tag\",_this);\n",
        "functionName": "ace_tagging_fnc_applyCustomTag"
      },
      {
        "fileName": "fnc_checkTaggable.sqf",
        "content": "/*\n * Author: BaerMitUmlaut, esteldunedain\n * Checks if there is a taggable surface within 2.5m in front of the player.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Is surface taggable <BOOL>\n *\n * Example:\n * [player] call ace_tagging_fnc_checkTaggable\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n[_this, {\n    params [\"_unit\"];\n\n    // Exit if no required item in inventory\n    if ((GVAR(cachedRequiredItems) arrayIntersect ((items _unit) apply {toLower _x})) isEqualTo []) exitWith {false};\n\n    private _startPosASL = eyePos _unit;\n    private _cameraPosASL =  AGLToASL positionCameraToWorld [0, 0, 0];\n    private _cameraDir = (AGLToASL positionCameraToWorld [0, 0, 1]) vectorDiff _cameraPosASL;\n    private _endPosASL = _startPosASL vectorAdd (_cameraDir vectorMultiply 2.5);\n\n    private _intersections = lineIntersectsSurfaces [_startPosASL, _endPosASL, _unit, objNull, true, 1, \"FIRE\", \"GEOM\"];\n\n    // If there's no intersections\n    if (_intersections isEqualTo []) exitWith {false};\n\n    (_intersections select 0) params [\"\", \"\", \"\", \"_object\"];\n\n    // Exit if trying to tag a non static object\n    TRACE_1(\"Obj:\",_intersections);\n\n    // Exit if trying to tag a non static object\n    if ((!isNull _object) && {\n        // If the class is alright, do not exit\n        if (_object isKindOf \"Static\") exitWith {false};\n\n        // If the class is not categorized correctly search the cache\n        private _modelName = (getModelInfo _object) select 0;\n        private _isStatic = GVAR(cacheStaticModels) getVariable [_modelName, false];\n        TRACE_2(\"Object:\",_modelName,_isStatic);\n        // If the class in not on the cache, exit\n        (!_isStatic)\n    }) exitWith {\n        TRACE_1(\"Pointed object is non static\",_object);\n        false\n    };\n\n    true\n}, missionNamespace, QGVAR(checkTaggableCache), 0.5] call EFUNC(common,cachedCall);\n",
        "functionName": "ace_tagging_fnc_checkTaggable"
      },
      {
        "fileName": "fnc_compileConfigTags.sqf",
        "content": "/*\n * Author: Jonpas\n * Compiles and caches tags from ACE_Tags config.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_tagging_fnc_compileConfigTags\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n{\n    private _failure = false;\n    private _class = configName _x;\n\n    private _displayName = getText (_x >> \"displayName\");\n    if (_displayName == \"\") then {\n        ERROR_1(\"Failed compiling ACE_Tags for tag: %1 - missing displayName\",_class);\n        _failure = true;\n    };\n\n    private _requiredItem = toLower (getText (_x >> \"requiredItem\"));\n    if (_requiredItem == \"\") then {\n        ERROR_1(\"Failed compiling ACE_Tags for tag: %1 - missing requiredItem\",_class);\n        _failure = true;\n    } else {\n        if (!isClass (configFile >> \"CfgWeapons\" >> _requiredItem)) then {\n            ERROR_2(\"Failed compiling ACE_Tags for tag: %1 - requiredItem %2 does not exist\",_class,_requiredItem);\n            _failure = true;\n        };\n    };\n\n    private _textures = getArray (_x >> \"textures\");\n    if (_textures isEqualTo []) then {\n        ERROR_1(\"Failed compiling ACE_Tags for tag: %1 - missing textures\",_class);\n        _failure = true;\n    };\n\n    private _icon = getText (_x >> \"icon\");\n\n    if (!_failure) then {\n        GVAR(cachedTags) pushBack [_class, _displayName, _requiredItem, _textures, _icon];\n        GVAR(cachedRequiredItems) pushBackUnique _requiredItem;\n    };\n} forEach (\"true\" configClasses (configFile >> \"ACE_Tags\"));\n",
        "functionName": "ace_tagging_fnc_compileConfigTags"
      },
      {
        "fileName": "fnc_createTag.sqf",
        "content": "/*\n * Author: BaerMitUmlaut, esteldunedain\n * Creates a tag and handle its destruction. Only execute on the server.\n *\n * Arguments:\n * 0: Position ASL <ARRAY>\n * 1: Vector dir and up <ARRAY>\n * 2: Colour of the tag (valid colours are black, red, green and blue or full path to custom texture) <STRING>\n * 3: Object it should be tied to <OBJECT>\n * 4: Unit that created the tag <OBJECT>\n *\n * Return Value:\n * Tag created <BOOL>\n *\n * Example:\n * [positionASL, vectorDirAndUp, \"z\\ace\\addons\\tagging\\UI\\tags\\black\\0.paa\", object] call ace_tagging_fnc_createTag\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_tagPosASL\", \"_vectorDirAndUp\", \"_texture\", \"_object\", \"_unit\"];\nTRACE_5(\"createTag:\",_tagPosASL,_vectorDirAndUp,_texture,_object,_unit);\n\nif (_texture == \"\") exitWith {\n    ERROR_1(\"%1 is not a valid tag texture.\",_texture);\n    false\n};\n\nprivate _tag = createSimpleObject [\"UserTexture1m_F\", _tagPosASL];\n_tag setObjectTextureGlobal [0, _texture];\n_tag setVectorDirAndUp _vectorDirAndUp;\n\n// Throw a global event for mision makers\n[\"ace_tagCreated\", [_tag, _texture, _object, _unit]] call CBA_fnc_globalEvent;\n\nif (isNull _object) exitWith {true};\n\n// If the tag is applied to an object, handle its destruction\n_object setVariable [QGVAR(testVar), true];\nif (_object getVariable [QGVAR(testVar), false]) then {\n    // The object supports variables and hence HandleDamage too\n    // Use the cheaper alternative for handling destruction: HandleDamage\n\n    // If the object already has tags attached, just add the new one to the list\n    private _attachedTags = _object getVariable QGVAR(attachedTags);\n    if !(isNil  \"_attachedTags \") exitWith {\n        _attachedTags pushBack _tag;\n    };\n\n    _attachedTags = [_tag];\n    _object setVariable [QGVAR(attachedTags), _attachedTags];\n\n    // If it's the first tag attached to that object, add a handledamage event handler\n    _object addEventHandler [\"HandleDamage\", {\n        params [\"_object\", \"_selection\", \"_damage\"];\n        if (_selection == \"\" && _damage >= 1) then {\n            {\n                deleteVehicle _x;\n            } foreach (_object getVariable [QGVAR(attachedTags), []]);\n            _object setVariable [QGVAR(attachedTags), []];\n        };\n    }];\n};\n\n// Periodic test the tag:\n// - For object that don't support handledamage\n// - For object that do, to support doors opening/closing, etc\nGVAR(tagsToTest) pushBack [_tag, _tagPosASL, _vectorDirAndUp];\n\n// Run the test\nif (!GVAR(testingThread)) then {\n    call FUNC(tagTestingThread);\n};\n\ntrue\n",
        "functionName": "ace_tagging_fnc_createTag"
      },
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: Jonpas\n * Initializes the Tagging module.\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: Units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_tagging_fnc_moduleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"\", \"_activated\"];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(quickTag), \"quickTag\"] call EFUNC(common,readSettingFromModule);\n\nINFO(\"Tagging Module Initialized.\");\n",
        "functionName": "ace_tagging_fnc_moduleInit"
      },
      {
        "fileName": "fnc_quickTag.sqf",
        "content": "/*\n * Author: Jonpas\n * Selects random tag and applies it.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_tagging_fnc_quickTag\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n// Exit if Quick Tag disabled\nif (GVAR(quickTag) == 0) exitWith {};\n\nparams [\"_unit\"];\n\nprivate _possibleTags = [];\nprivate _useRandom = false;\n\n// Last Used\nif (GVAR(quickTag) == 1) then {\n    private _lastUsedTagClass = _unit getVariable [QGVAR(lastUsedTag), nil];\n\n    if (isNil \"_lastUsedTagClass\") then {\n        _useRandom = true;\n    } else {\n        private _lastUsedTag = GVAR(cachedTags) select {(_x select 0) == _lastUsedTagClass};\n        _possibleTags = _lastUsedTag;\n    };\n};\n\n// Random X\nif ((GVAR(quickTag) == 2) || _useRandom) then {\n    private _xTags = GVAR(cachedTags) select {(_x select 0) in [\"ACE_XBlack\", \"ACE_XRed\", \"ACE_XGreen\", \"ACE_XBlue\"]};\n    _possibleTags = _xTags;\n};\n\n// Random\nif (GVAR(quickTag) == 3) then {\n    _possibleTags = GVAR(cachedTags);\n};\n\n// Tag\nif !(_possibleTags isEqualTo []) then {\n    private _availableTags = _possibleTags select {(_x select 2) in ((items _unit) apply {toLower _x})};\n    [_unit, selectRandom ((selectRandom _availableTags) select 3)] call FUNC(tag);\n};\n",
        "functionName": "ace_tagging_fnc_quickTag"
      },
      {
        "fileName": "fnc_tag.sqf",
        "content": "/*\n * Author: BaerMitUmlaut, esteldunedain\n * Creates a tag on a wall that is on the closest surface within 2m on front of the unit.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: The colour of the tag (valid colours are black, red, green and blue or full path to custom texture) <STRING>\n *\n * Return Value:\n * Sucess <BOOL>\n *\n * Example:\n * success = [player, \"z\\ace\\addons\\tagging\\UI\\tags\\black\\0.paa\"] call ace_tagging_fnc_tag\n *\n * Public: Yes\n */\n\n#include \"script_component.hpp\"\n\nparams [\n    [\"_unit\", objNull, [objNull]],\n    [\"_texture\", \"\", [\"\"]]\n];\n\nif (isNull _unit || {_texture == \"\"}) exitWith {\n    ERROR_2(\"Tag parameters invalid. Unit: %1, Texture: %2\",_unit,_texture);\n};\n\nprivate _startPosASL = eyePos _unit;\nprivate _cameraPosASL =  AGLToASL positionCameraToWorld [0, 0, 0];\nprivate _cameraDir = (AGLToASL positionCameraToWorld [0, 0, 1]) vectorDiff _cameraPosASL;\nprivate _endPosASL = _startPosASL vectorAdd (_cameraDir vectorMultiply 2.5);\n\n// Check for intersections below the unit\nprivate _intersections = lineIntersectsSurfaces [_startPosASL, _endPosASL, _unit, objNull, true, 1, \"GEOM\", \"FIRE\"];\n\n// If there's no intersections\nif (_intersections isEqualTo []) exitWith {\n    TRACE_3(\"No intersections\",_intersections);\n    false\n};\n\n(_intersections select 0) params [\"_touchingPoint\", \"_surfaceNormal\", \"\", \"_object\"];\nTRACE_3(\"\",_touchingPoint, _surfaceNormal, _object);\n\n// Exit if trying to tag a non static object\nif ((!isNull _object) && {\n    // If the class is alright, do not exit\n    if (_object isKindOf \"Static\") exitWith {false};\n\n    // If the class is not categorized correctly search the cache\n    private _modelName = (getModelInfo _object) select 0;\n    private _isStatic = GVAR(cacheStaticModels) getVariable [_modelName, false];\n    TRACE_2(\"Object:\",_modelName,_isStatic);\n    // If the class in not on the cache, exit\n    (!_isStatic)\n}) exitWith {\n    TRACE_1(\"Pointed object is non static\",_object);\n    false\n};\n\n\n// If the surface normal points away, flip it. This happens in weird places like the Stratis Pier\nif (_surfaceNormal vectorDotProduct  (_endPosASL vectorDiff _startPosASL) > 0) then {\n    _surfaceNormal = _surfaceNormal vectorMultiply -1;\n};\n\n// Check if its a valid surface: big enough, reasonably plane\nprivate _v1 = vectorNormalized (_surfaceNormal vectorMultiply -1);\nprivate _v2 = vectorNormalized (_v1 vectorCrossProduct (_endPosASL vectorDiff _startPosASL));\n// If the surface is not horizontal (>20º), create vup _v2 pointing upward instead of away\nif (abs (_v1 select 2) < 0.94) then {\n    private _v3Temp = _v1 vectorCrossProduct [0, 0, 1];\n    _v2 = _v3Temp vectorCrossProduct _v1;\n};\nprivate _v3 = _v2 vectorCrossProduct _v1;\n\nTRACE_3(\"Reference:\", _v1, _v2, _v3);\n\nprivate _fnc_isOk = {\n    params [\"_rx\", \"_ry\"];\n    private _startPosASL2 = _touchingPoint vectorAdd (_v2 vectorMultiply _rx) vectorAdd (_v3 vectorMultiply _ry) vectorAdd (_v1 vectorMultiply (-0.06));\n    private _endPosASL2   = _startPosASL2 vectorAdd (_v1 vectorMultiply (0.12));\n    private _intersections = lineIntersectsSurfaces [_startPosASL2, _endPosASL2, _unit, objNull, true, 1, \"GEOM\", \"FIRE\"];\n    // If there's no intersections\n    if (_intersections isEqualTo []) exitWith {false;};\n\n    if !(((_intersections select 0) select 3) isEqualTo _object) exitWith {false;};\n\n    true\n};\n\nif ( !([ 0.5 * TAG_SIZE, 0.5 * TAG_SIZE] call _fnc_isOk) ||\n    {!([ 0.5 * TAG_SIZE,-0.5 * TAG_SIZE] call _fnc_isOk) ||\n    {!([-0.5 * TAG_SIZE, 0.5 * TAG_SIZE] call _fnc_isOk) ||\n    {!([-0.5 * TAG_SIZE,-0.5 * TAG_SIZE] call _fnc_isOk)}}}) exitWith {\n    TRACE_3(\"Unsuitable location:\",_touchingPoint);\n    false\n};\n\nprivate _vectorDirAndUp = [_surfaceNormal vectorMultiply -1, _v3];\n\n// Everything ok, make the unit create the tag\n[_unit, \"PutDown\"] call EFUNC(common,doGesture);\n\n[{\n    params [\"\", \"\", \"\", \"\", \"_unit\"];\n    TRACE_2(\"Unit:\",_unit,_this);\n\n    playSound3D [QUOTE(PATHTO_R(sounds\\spray.ogg)), _unit, false, (eyePos _unit), 10, 1, 15];\n\n    // Tell the server to create the tag and handle its destruction\n    [QGVAR(createTag), _this] call CBA_fnc_serverEvent;\n}, [_touchingPoint vectorAdd (_surfaceNormal vectorMultiply 0.06), _vectorDirAndUp, _texture, _object, _unit], 0.6] call CBA_fnc_waitAndExecute;\n\ntrue\n",
        "functionName": "ace_tagging_fnc_tag"
      },
      {
        "fileName": "fnc_tagTestingThread.sqf",
        "content": "/*\n * Author: esteldunedain\n * Checks if tags are still leaning on an object periodically.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_tagging_fnc_tagTestingThread\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nGVAR(tagsToTest) = GVAR(tagsToTest) select {\n    _x params [\"_tag\", \"_tagPosASL\", \"_vectorDirAndUp\"];\n\n    _vectorDirAndUp params [\"_v1\", \"_v2\"];\n\n    private _endPosASL = _tagPosASL vectorAdd (_v1 vectorMultiply 0.08);\n\n    // Check for intersections below the unit\n    private _intersections = lineIntersectsSurfaces [_tagPosASL, _endPosASL, _tag, objNull, true, 1, \"GEOM\", \"FIRE\"];\n\n    // If there's no intersections\n    if (_intersections isEqualTo []) then {\n        TRACE_1(\"No intersections, deleting:\",_tag);\n        deleteVehicle _tag;\n        false\n    } else {\n        true\n    };\n};\n\n// If there's no more tag\nif (GVAR(tagsToTest) isEqualTo []) exitWith {\n    GVAR(testingThread) = false;\n};\n\n// Schedule for execution again after 5 seconds\n[DFUNC(tagTestingThread), [], 5] call CBA_fnc_waitAndExecute;\nGVAR(testingThread) = true;\n",
        "functionName": "ace_tagging_fnc_tagTestingThread"
      }
    ]
  },
  {
    "component": "thermals",
    "files": [],
    "functions": []
  },
  {
    "component": "trenches",
    "files": [
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"MouseZChanged\", {(_this select 1) call FUNC(handleScrollWheel)}];\n_display displayAddEventHandler [\"MouseButtonDown\", {[ACE_player, _this select 1] call FUNC(placeCancel)}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (isServer) then {\n    // Cancel dig on hard disconnection. Function is identical to killed\n    addMissionEventHandler [\"HandleDisconnect\", {_this call FUNC(handleKilled)}];\n};\n\nif (!hasInterface) exitWith {};\n\nGVAR(trenchId) = 0;\nGVAR(trench) = objNull;\nGVAR(digPFH) = -1;\nGVAR(digDirection) = 0;\n\n// Cancel dig sandbag if interact menu opened\n[\"ace_interactMenuOpened\", {[ACE_player] call FUNC(handleInteractMenuOpened)}] call CBA_fnc_addEventHandler;\n\n// Cancel dig on player change. This does work when returning to lobby, but not when hard disconnecting.\n[\"unit\", FUNC(handlePlayerChanged)] call CBA_fnc_addPlayerEventHandler;\n[\"loadout\", FUNC(handlePlayerInventoryChanged)] call CBA_fnc_addPlayerEventHandler;\n[\"vehicle\", {[ACE_player, objNull] call FUNC(handlePlayerChanged)}] call CBA_fnc_addPlayerEventHandler;\n\n// handle waking up dragged unit and falling unconscious while dragging\n[\"ace_unconscious\", {_this call FUNC(handleUnconscious)}] call CBA_fnc_addEventHandler;\n\n//@todo Captivity?\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_canContinueDiggingTrench.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Checks if a unit can continue digging a trench\n *\n * Arguments:\n * 0: trench <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * Can continue <BOOL>\n *\n * Example:\n * [TrenchObj, ACE_player] call ace_trenches_fnc_canContinueDiggingTrench\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_trench\", \"_unit\"];\n\nif !(\"ACE_EntrenchingTool\" in items _unit) exitWith {false};\nif ((_trench getVariable [QGVAR(progress), 0]) >= 1) exitWith {false};\n\n// Prevent removing/digging trench by more than one person\nif (_trench getVariable [QGVAR(digging), false]) exitWith {false};\n\ntrue\n",
        "functionName": "ace_trenches_fnc_canContinueDiggingTrench"
      },
      {
        "fileName": "fnc_canDigTrench.sqf",
        "content": "/*\n * Author: Ruthberg, commy2, esteldunedain\n * Checks if a unit can dig a trench.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * Can dig <BOOL>\n *\n * Example:\n * [ACE_player] call ace_trenches_fnc_canDigTrench\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif !(\"ACE_EntrenchingTool\" in items _unit) exitWith {false};\n\n_unit call EFUNC(common,canDig)\n",
        "functionName": "ace_trenches_fnc_canDigTrench"
      },
      {
        "fileName": "fnc_canRemoveTrench.sqf",
        "content": "/*\n * Author: SzwedzikPL\n * Checks if a unit can remove a trench\n *\n * Arguments:\n * 0: trench <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * Can remove <BOOL>\n *\n * Example:\n * [TrenchObj, ACE_player] call ace_trenches_fnc_canRemoveTrench\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_trench\", \"_unit\"];\n\nif !(\"ACE_EntrenchingTool\" in items _unit) exitWith {false};\n\n// Prevent removing/digging trench by more than one person\nif (_trench getVariable [QGVAR(digging), false]) exitWith {false};\n\ntrue\n",
        "functionName": "ace_trenches_fnc_canRemoveTrench"
      },
      {
        "fileName": "fnc_continueDiggingTrench.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support, esteldunedain\n * Continue process of digging trench.\n *\n * Arguments:\n * 0: trench <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [TrenchObj, ACE_player] call ace_trenches_fnc_continueDiggingTrench\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_trench\", \"_unit\"];\nTRACE_2(\"continueDiggingTrench\",_trench,_unit);\n\nprivate _actualProgress = _trench getVariable [QGVAR(progress), 0];\nif(_actualProgress == 1) exitWith {};\n\n// Mark trench as being worked on\n_trench setVariable [QGVAR(digging), true, true];\n\nprivate _digTime = getNumber (configFile >> \"CfgVehicles\" >> (typeof _trench) >> QGVAR(diggingDuration));\nprivate _digTimeLeft = _digTime * (1 - _actualProgress);\n\nprivate _placeData = _trench getVariable [QGVAR(placeData), [[], []]];\n_placeData params [\"_basePos\", \"_vecDirAndUp\"];\n\nprivate _trenchId = _unit getVariable [QGVAR(isDiggingId), -1];\nif(_trenchId < 0) then {\n    _trenchId = GVAR(trenchId);\n    _unit setVariable [QGVAR(isDiggingId), _trenchId, true];\n    GVAR(trenchId) = GVAR(trenchId) + 1;\n};\n\n// Create progress bar\nprivate _fnc_onFinish = {\n    (_this select 0) params [\"_unit\", \"_trench\"];\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\n    _trench setVariable [QGVAR(digging), false, true];\n\n    // Save progress global\n    private _progress = _trench getVariable [QGVAR(progress), 0];\n    _trench setVariable [QGVAR(progress), _progress, true];\n\n    // Reset animation\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\n};\nprivate _fnc_onFailure = {\n    (_this select 0) params [\"_unit\", \"_trench\"];\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\n    _trench setVariable [QGVAR(digging), false, true];\n\n    // Save progress global\n    private _progress = _trench getVariable [QGVAR(progress), 0];\n    _trench setVariable [QGVAR(progress), _progress, true];\n\n    // Reset animation\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\n};\n[(_digTimeLeft + 0.5), [_unit, _trench], _fnc_onFinish, _fnc_onFailure, localize LSTRING(DiggingTrench)] call EFUNC(common,progressBar);\n\nif(_actualProgress == 0) then {\n    [_unit, _trench, _trenchId, _basePos vectorDiff [0, 0, 1.0], _vecDirAndUp, _actualProgress] call FUNC(setTrenchPlacement);\n\n    //Remove grass\n    {\n        private _trenchGrassCutter = createVehicle [\"Land_ClutterCutter_medium_F\", [0, 0, 0], [], 0, \"NONE\"];\n        private _cutterPos = AGLToASL (_trench modelToWorld _x);\n        _cutterPos set [2, getTerrainHeightASL _cutterPos];\n        _trenchGrassCutter setPosASL _cutterPos;\n        deleteVehicle _trenchGrassCutter;\n    } foreach getArray (configFile >> \"CfgVehicles\" >> (typeof _trench) >> QGVAR(grassCuttingPoints));\n};\n\nprivate _progressLeft = (_actualProgress * 10) + 1;\n\nfor \"_i\" from _progressLeft to 10 do {\n    private _vectorDiffZ = 1 - (_i / 10);\n    private _delay = _digTime * ((_i / 10) - _actualProgress);\n    private _progress = _i / 10;\n    [DFUNC(setTrenchPlacement), [_unit, _trench, _trenchId, _basePos vectorDiff [0, 0, _vectorDiffZ], _vecDirAndUp, _progress], _delay] call CBA_fnc_waitAndExecute;\n};\n\n// Play animation\n[_unit, \"AinvPknlMstpSnonWnonDnon_medic4\"] call EFUNC(common,doAnimation);\n",
        "functionName": "ace_trenches_fnc_continueDiggingTrench"
      },
      {
        "fileName": "fnc_handleInteractMenuOpened.sqf",
        "content": "/*\n * Author: commy2\n * Handle opening of interaction menu.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_trenches_fnc_handleInteractMenuOpened\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\n    [_unit] call FUNC(placeCancel);\n};\n",
        "functionName": "ace_trenches_fnc_handleInteractMenuOpened"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: commy2\n * Handle death.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_trenches_fnc_handleKilled\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\n    [_unit] call FUNC(placeCancel);\n};\n",
        "functionName": "ace_trenches_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle player changes.\n *\n * Arguments:\n * 0: New Player Unit <OBJECT>\n * 1: Old Player Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, kevin] call ace_trenches_fnc_handlePlayerChanged\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_newPlayer\", \"_oldPlayer\"];\n\nif (_newPlayer getVariable [QGVAR(isPlacing), false]) then {\n    [_newPlayer] call FUNC(placeCancel);\n};\n\nif (_oldPlayer getVariable [QGVAR(isPlacing), false]) then {\n    [_oldPlayer] call FUNC(placeCancel);\n};\n",
        "functionName": "ace_trenches_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handlePlayerInventoryChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle the InventoryChanged event.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, \"weapon\"] call ace_trenches_fnc_handlePlayerInverntoryChanged\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\n    if !(\"ACE_EntrenchingTool\" in items _unit) then {\n        [_unit] call FUNC(placeCancel);\n    };\n};\n",
        "functionName": "ace_trenches_fnc_handlePlayerInventoryChanged"
      },
      {
        "fileName": "fnc_handleScrollWheel.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg\n * Handles sandbag rotation\n *\n * Arguments:\n * 0: scroll amount <NUMBER>\n *\n * Return Value:\n * handled <BOOL>\n *\n * Example:\n * [1.2] call ace_sandbag_fnc_handleScrollWheel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (GVAR(digPFH) == -1) exitWith {false};\n\nparams [\"_scroll\"];\n\nGVAR(digDirection) = GVAR(digDirection) + (_scroll * 5);\n\ntrue\n",
        "functionName": "ace_trenches_fnc_handleScrollWheel"
      },
      {
        "fileName": "fnc_handleUnconscious.sqf",
        "content": "/*\n * Author: commy2\n * Handle unconsciousness.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_trenches_fnc_handleUnconscious\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!local _unit) exitWith {};\n\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\n    [_unit] call FUNC(placeCancel);\n};\n",
        "functionName": "ace_trenches_fnc_handleUnconscious"
      },
      {
        "fileName": "fnc_placeCancel.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\n * Cancels trench dig\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Key <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player] call ace_sandbag_fnc_placeCancel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_key\"];\n\nif (_key != 1 || {GVAR(digPFH) == -1}) exitWith {};\n\n// enable running again\n[_unit, \"forceWalk\", \"ACE_Trenches\", false] call EFUNC(common,statusEffect_set);\n\n// delete placement dummy\ndeleteVehicle GVAR(trench);\n\n// remove digment pfh\n[GVAR(digPFH)] call CBA_fnc_removePerFrameHandler;\nGVAR(digPFH) = -1;\n\n// remove mouse button actions\ncall EFUNC(interaction,hideMouseHint);\n\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Dig), -1]] call EFUNC(common,removeActionEventHandler);\n\n_unit setVariable [QGVAR(isPlacing), false, true];\n",
        "functionName": "ace_trenches_fnc_placeCancel"
      },
      {
        "fileName": "fnc_placeConfirm.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support and esteldunedain\n * Confirms trench dig\n *\n * Arguments:\n * 0: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player] call ace_trenches_fnc_placeConfirm\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n// enable running again\n[_unit, \"forceWalk\", \"ACE_Trenches\", false] call EFUNC(common,statusEffect_set);\n\n// remove dig pfh\n[GVAR(digPFH)] call CBA_fnc_removePerFrameHandler;\nGVAR(digPFH) = -1;\n\n// remove mouse button actions\ncall EFUNC(interaction,hideMouseHint);\n\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Dig), -1]] call EFUNC(common,removeActionEventHandler);\n\n_unit setVariable [QGVAR(isPlacing), false, true];\n\n// Delete placement dummy and create real trench\nparams [\"_unit\"];\nif (isNull GVAR(trench)) exitWith {};\n\ndeleteVehicle GVAR(trench);\nprivate _trench = createVehicle [GVAR(trenchClass), [0, 0, 0], [], 0, \"NONE\"];\n\nGVAR(trenchPlacementData) params [\"_dx\", \"_dy\", \"_offset\"];\nprivate _basePos = GVAR(trenchPos);\nprivate _angle = (GVAR(digDirection) + getDir _unit);\n\n// _v1 forward from the player, _v2 to the right, _v3 points away from the ground\nprivate _v3 = surfaceNormal _basePos;\nprivate _v2 = [sin _angle, +cos _angle, 0] vectorCrossProduct _v3;\nprivate _v1 = _v3 vectorCrossProduct _v2;\n\n// Stick the trench to the ground\n_basePos set [2, getTerrainHeightASL _basePos];\nprivate _minzoffset = 0;\n\nfor [{private _ix = -_dx/2},{_ix <= _dx/2},{_ix = _ix + _dx/3}] do {\n    for [{private _iy = -_dy/2},{_iy <= _dy/2},{_iy = _iy + _dy/3}] do {\n        private _pos = _basePos vectorAdd (_v2 vectorMultiply _ix)\n                                vectorAdd (_v1 vectorMultiply _iy);\n        _minzoffset = _minzoffset min ((getTerrainHeightASL _pos) - (_pos select 2));\n        #ifdef DEBUG_MODE_FULL\n            _pos set [2, getTerrainHeightASL _pos];\n            _pos2 = +_pos;\n            _pos2 set [2, getTerrainHeightASL _pos + 1];\n            drawLine3D [ASLtoAGL _pos, ASLtoAGL _pos2, [1,1,0,1]];\n        #endif\n    };\n};\n_basePos set [2, (_basePos select 2) + _minzoffset + _offset];\nprivate _vecDirAndUp = [_v1, _v3];\nGVAR(trench) = objNull;\n\n_trench setVariable [QGVAR(placeData), [_basePos, _vecDirAndUp], true];\n\n[_trench, _unit] call FUNC(continueDiggingTrench);\n",
        "functionName": "ace_trenches_fnc_placeConfirm"
      },
      {
        "fileName": "fnc_placeTrench.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support, esteldunedain\n * Starts the place process for trench.\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: Trench class <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, \"ACE_envelope_small\"] call ace_trenches_fnc_placeTrench\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_trenchClass\"];\n\n//Load trench data\nprivate _noGeoModel = getText (configFile >> \"CfgVehicles\" >> _trenchClass >> QGVAR(noGeoClass));\nif(_noGeoModel == \"\") then {_noGeoModel = _trenchClass;};\n\nGVAR(trenchClass) = _trenchClass;\nGVAR(trenchPlacementData) = getArray (configFile >> \"CfgVehicles\" >> _trenchClass >> QGVAR(placementData));\nTRACE_1(\"\",GVAR(trenchPlacementData));\n\n// prevent the placing unit from running\n[_unit, \"forceWalk\", \"ACE_Trenches\", true] call EFUNC(common,statusEffect_set);\n\n// create the trench\nprivate _trench = createVehicle [_noGeoModel, [0, 0, 0], [], 0, \"NONE\"];\n\nGVAR(trench) = _trench;\n\n// prevent collisions with trench\n[QEGVAR(common,enableSimulationGlobal), [_trench, false]] call CBA_fnc_serverEvent;\n\nGVAR(digDirection) = 0;\n\n// pfh that runs while the dig is in progress\nGVAR(digPFH) = [{\n    (_this select 0) params [\"_unit\", \"_trench\"];\n\n    // Cancel if the helper object is gone\n    if (isNull _trench) exitWith {\n        [_unit] call FUNC(placeCancel);\n    };\n\n    // Cancel if the place is no longer suitable\n    if !([_unit] call FUNC(canDigTrench)) exitWith {\n        [_unit] call FUNC(placeCancel);\n    };\n\n    // Update trench position\n    GVAR(trenchPlacementData) params [\"_dx\", \"_dy\", \"_offset\"];\n    private _basePos = eyePos _unit vectorAdd ([sin getDir _unit, +cos getDir _unit, 0] vectorMultiply 1.0);\n\n    private _angle = (GVAR(digDirection) + getDir _unit);\n\n    // _v1 forward from the player, _v2 to the right, _v3 points away from the ground\n    private _v3 = surfaceNormal _basePos;\n    private _v2 = [sin _angle, +cos _angle, 0] vectorCrossProduct _v3;\n    private _v1 = _v3 vectorCrossProduct _v2;\n\n    // Stick the trench to the ground\n    _basePos set [2, getTerrainHeightASL _basePos];\n    private _minzoffset = 0;\n    for [{private _ix = -_dx/2},{_ix <= _dx/2},{_ix = _ix + _dx/3}] do {\n        for [{private _iy = -_dy/2},{_iy <= _dy/2},{_iy = _iy + _dy/3}] do {\n            private _pos = _basePos vectorAdd (_v2 vectorMultiply _ix)\n                                    vectorAdd (_v1 vectorMultiply _iy);\n            _minzoffset = _minzoffset min ((getTerrainHeightASL _pos) - (_pos select 2));\n            #ifdef DEBUG_MODE_FULL\n                _pos set [2, getTerrainHeightASL _pos];\n                _pos2 = +_pos;\n                _pos2 set [2, getTerrainHeightASL _pos + 1];\n                drawLine3D [ASLtoAGL _pos, ASLtoAGL _pos2, [1,1,0,1]];\n            #endif\n        };\n    };\n    _basePos set [2, (_basePos select 2) + _minzoffset + _offset];\n    TRACE_2(\"\",_minzoffset,_offset);\n    _trench setPosASL _basePos;\n    _trench setVectorDirAndUp [_v1, _v3];\n    GVAR(trenchPos) = _basePos;\n\n}, 0, [_unit, _trench]] call CBA_fnc_addPerFrameHandler;\n\n// add mouse button action and hint\n[localize LSTRING(ConfirmDig), localize LSTRING(CancelDig), localize LSTRING(ScrollAction)] call EFUNC(interaction,showMouseHint);\n\n_unit setVariable [QGVAR(Dig), [\n    _unit, \"DefaultAction\",\n    {GVAR(digPFH) != -1},\n    {[_this select 0] call FUNC(placeConfirm)}\n] call EFUNC(common,addActionEventHandler)];\n\n_unit setVariable [QGVAR(isPlacing), true, true];\n",
        "functionName": "ace_trenches_fnc_placeTrench"
      },
      {
        "fileName": "fnc_removeTrench.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support and esteldunedain\n * Removes trench\n *\n * Arguments:\n * 0: trench <OBJECT>\n * 1: unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [TrenchObj, ACE_player] call ace_trenches_fnc_removeTrench\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_trench\", \"_unit\"];\nTRACE_2(\"removeTrench\",_trench,_unit);\n\nprivate _actualProgress = _trench getVariable [QGVAR(progress), 0];\nif(_actualProgress == 0) exitWith {};\n\n// Mark trench as being worked on\n_trench setVariable [QGVAR(digging), true, true];\n\nprivate _removeTime = getNumber (configFile >> \"CfgVehicles\" >> (typeof _trench) >> QGVAR(removalDuration));\nprivate _removeTimeLeft = _removeTime * _actualProgress;\n\nprivate _placeData = _trench getVariable [QGVAR(placeData), [[], []]];\n_placeData params [\"_basePos\", \"_vecDirAndUp\"];\n\nprivate _trenchId = _unit getVariable [QGVAR(isDiggingId), -1];\nif(_trenchId < 0) then {\n    _trenchId = GVAR(trenchId);\n    _unit setVariable [QGVAR(isDiggingId), _trenchId, true];\n    GVAR(trenchId) = GVAR(trenchId) + 1;\n};\n\n// Create progress bar\nprivate _fnc_onFinish = {\n    (_this select 0) params [\"_unit\", \"_trench\"];\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\n\n    // Remove trench\n    deleteVehicle _trench;\n\n    // Reset animation\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\n};\nprivate _fnc_onFailure = {\n    (_this select 0) params [\"_unit\", \"_trench\"];\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\n    _trench setVariable [QGVAR(digging), false, true];\n\n    // Save progress global\n    private _progress = _trench getVariable [QGVAR(progress), 0];\n    _trench setVariable [QGVAR(progress), _progress, true];\n\n    // Reset animation\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\n};\n[(_removeTimeLeft + 0.5), [_unit, _trench], _fnc_onFinish, _fnc_onFailure, localize LSTRING(RemovingTrench)] call EFUNC(common,progressBar);\n\nprivate _progressLeft = ((1 - _actualProgress) * 10) + 1;\n\nfor \"_i\" from _progressLeft to 10 do {\n    private _vectorDiffZ = _i / 10;\n    private _delay = _removeTime * ((_i / 10) - (1 - _actualProgress));\n    private _progress = 1 - (_i / 10);\n\n    [DFUNC(setTrenchPlacement), [_unit, _trench, _trenchId, _basePos vectorDiff [0, 0, _vectorDiffZ], _vecDirAndUp, _progress], _delay] call CBA_fnc_waitAndExecute;\n};\n\n// Play animation\n[_unit, \"AinvPknlMstpSnonWnonDnon_medic4\"] call EFUNC(common,doAnimation);\n",
        "functionName": "ace_trenches_fnc_removeTrench"
      },
      {
        "fileName": "fnc_setTrenchPlacement.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support and esteldunedain\n * Sets trench placement\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: trench <OBJECT>\n * 2: trench id <NUMBER>\n * 3: position ASL <ARRAY>\n * 4: vector dir and up <ARRAY>\n * 5: progress <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, TrenchObj, 2, [0,0,0], [[0,0,0],[0,0,0]], 0.5] call ace_trenches_fnc_setTrenchPlacement\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_trench\", \"_trenchId\", \"_pos\", \"_vecDirAndUp\", \"_progress\"];\n\n// If the progress bar was cancelled, cancel elevation\n// We use an uid to avoid any chance of an older trench being raised when a new one is built\nif (_unit getVariable [QGVAR(isDiggingId), -1] != _trenchId) exitWith {};\n\n_trench setPosASL _pos;\n_trench setVectorDirAndUp _vecDirAndUp;\n\n// Save progress local\n_trench setVariable [QGVAR(progress), _progress];\n",
        "functionName": "ace_trenches_fnc_setTrenchPlacement"
      }
    ]
  },
  {
    "component": "tripod",
    "files": [
      {
        "fileName": "XEH_missionDisplayLoad.sqf",
        "content": "#include \"script_component.hpp\"\n\nparams [\"_display\"];\n\n_display displayAddEventHandler [\"MouseZChanged\", {(_this select 1) call FUNC(handleScrollWheel)}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(adjustPFH) = -1;\n\nGVAR(height) = 0;\n\n// Cancel adjustment if interact menu opens\n[\"ace_interactMenuOpened\", {[ACE_player] call FUNC(handleInteractMenuOpened)}] call CBA_fnc_addEventHandler;\n\n// Cancel adjusting on player change.\n[\"unit\", FUNC(handlePlayerChanged)] call CBA_fnc_addPlayerEventHandler;\n[\"vehicle\", {[ACE_player, objNull] call FUNC(handlePlayerChanged)}] call CBA_fnc_addPlayerEventHandler;\n\n// handle falling unconscious\n[\"ace_unconscious\", {_this call FUNC(handleUnconscious)}] call CBA_fnc_addEventHandler;\n\n// @todo captivity?\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_adjust.sqf",
        "content": "/*\n * Author: Ruthberg\n * Adjust tripod height\n *\n * Arguments:\n * 0: tripod <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, tripod] call ace_tripod_fnc_adjust\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_tripod\"];\n\n_unit setVariable [QGVAR(adjusting), true, true];\n\n// add PFH to adjust the tripod animation\nGVAR(adjustPFH) = [{\n    (_this select 0) params [\"_unit\", \"_tripod\"];\n\n    if (!(_unit getVariable [QGVAR(adjusting), false]) || {isNull _tripod} || {_unit distance _tripod > 5}) exitWith {\n        call EFUNC(interaction,hideMouseHint);\n\n        [_unit, \"DefaultAction\", _unit getVariable [QGVAR(Adjust), -1]] call EFUNC(common,removeActionEventHandler);\n\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    {\n        _tripod animate [_x, 1 - GVAR(height)];\n    } count [\"slide_down_tripod\", \"retract_leg_1\", \"retract_leg_2\", \"retract_leg_3\"];\n\n}, 0, [_unit, _tripod]] call CBA_fnc_addPerFrameHandler;\n\n// add mouse button action and hint\n[localize \"STR_ACE_Tripod_Done\", \"\", localize \"STR_ACE_Tripod_ScrollAction\"] call EFUNC(interaction,showMouseHint);\n\n_unit setVariable [QGVAR(Adjust), [\n    _unit, \"DefaultAction\",\n    {GVAR(adjustPFH) != -1},\n    {(_this select 0) setVariable [QGVAR(adjusting), false, true]}\n] call EFUNC(common,addActionEventHandler)];\n",
        "functionName": "ace_tripod_fnc_adjust"
      },
      {
        "fileName": "fnc_handleInteractMenuOpened.sqf",
        "content": "/*\n * Author: commy2\n * Handle opening of interaction menu.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_tripod_fnc_handleInteractMenuOpened\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(adjusting), false]) then {\n    _unit setVariable [QGVAR(adjusting), false, true];\n};\n",
        "functionName": "ace_tripod_fnc_handleInteractMenuOpened"
      },
      {
        "fileName": "fnc_handleKilled.sqf",
        "content": "/*\n * Author: commy2\n * Handle death.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_tripod_fnc_handleKilled\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (_unit getVariable [QGVAR(adjusting), false]) then {\n    _unit setVariable [QGVAR(adjusting), false, true];\n};\n",
        "functionName": "ace_tripod_fnc_handleKilled"
      },
      {
        "fileName": "fnc_handlePlayerChanged.sqf",
        "content": "/*\n * Author: commy2\n * Handle player changes.\n *\n * Arguments:\n * 0: New Player Unit <OBJECT>\n * 1: Old Player Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_tripod_fnc_handlePlayerChanged\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_newPlayer\", \"_oldPlayer\"];\n\nif (_newPlayer getVariable [QGVAR(adjusting), false]) then {\n    _newPlayer setVariable [QGVAR(adjusting), false, true];\n};\n\nif (_oldPlayer getVariable [QGVAR(adjusting), false]) then {\n    _oldPlayer setVariable [QGVAR(adjusting), false, true];\n};\n",
        "functionName": "ace_tripod_fnc_handlePlayerChanged"
      },
      {
        "fileName": "fnc_handleScrollWheel.sqf",
        "content": "/*\n * Author: Garth 'L-H' de Wet, Ruthberg\n * Handles sandbag rotation\n *\n * Arguments:\n * 0: scroll amount <NUMBER>\n *\n * Return Value:\n * handled <BOOL>\n *\n * Example:\n * [1.2] call ace_tripod_fnc_handleScrollWheel;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_scroll\"];\n\nif (GVAR(adjustPFH) == -1) exitWith {false};\n\nGVAR(height) = 0 max (GVAR(height) + (_scroll / 20)) min 1;\n\ntrue\n",
        "functionName": "ace_tripod_fnc_handleScrollWheel"
      },
      {
        "fileName": "fnc_handleUnconscious.sqf",
        "content": "/*\n * Author: commy2\n * Handle unconsciousness.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob] call ace_tripod_fnc_handleUnconscious\n *\n * Public: No\n*/\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\nif (!local _unit) exitWith {};\n\nif (_unit getVariable [QGVAR(adjusting), false]) then {\n    _unit setVariable [QGVAR(adjusting), false, true];\n};\n",
        "functionName": "ace_tripod_fnc_handleUnconscious"
      },
      {
        "fileName": "fnc_pickup.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n * Pick up tripod\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: tripod <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, tripod] call ace_tripod_fnc_pickup\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_tripod\"];\n\nif (stance _unit == \"STAND\") then {\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\"] call EFUNC(common,doAnimation);\n};\n\n[{\n    params [\"_unit\", \"_tripod\"];\n\n    if (isNull _tripod) exitWith {};\n\n    deleteVehicle _tripod;\n\n    [_unit, \"ACE_Tripod\"] call EFUNC(common,addToInventory);\n}, [_unit, _tripod], 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_tripod_fnc_pickup"
      },
      {
        "fileName": "fnc_place.sqf",
        "content": "/*\n * Author: Rocko, Ruthberg\n * Place down tripod\n *\n * Arguments:\n * 0: unit <OBJECT>\n * 1: tripod class <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"ACE_Tripod\"] call ace_tripod_fnc_place\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_tripodClass\"];\n\n_unit removeItem _tripodClass;\n\nif (stance _unit == \"STAND\") then {\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\"] call EFUNC(common,doAnimation);\n};\n\n[{\n    params [\"_unit\"];\n\n    private _direction = getDir _unit;\n    private _position = getPosASL _unit vectorAdd [0.8 * sin _direction, 0.8 * cos _direction, 0.02];\n\n    private _tripod = \"ACE_TripodObject\" createVehicle [0, 0, 0];\n\n    {\n        _tripod animate [_x, 1];\n    } count [\"slide_down_tripod\", \"retract_leg_1\", \"retract_leg_2\", \"retract_leg_3\"];\n\n    [{\n        (_this select 0) params [\"_tripod\", \"_direction\", \"_position\"];\n\n        if (_tripod animationPhase \"slide_down_tripod\" == 1) then {\n            _tripod setDir _direction;\n            _tripod setPosASL _position;\n\n            if ((getPosATL _tripod select 2) - (getPos _tripod select 2) < 1E-5) then { // if not on object, then adjust to surface normale\n                _tripod setVectorUp (surfaceNormal (position _tripod));\n            };\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n        };\n    }, 0, [_tripod, _direction, _position]] call CBA_fnc_addPerFrameHandler;\n\n}, [_unit], 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_tripod_fnc_place"
      }
    ]
  },
  {
    "component": "ui",
    "files": [
      {
        "fileName": "XEH_clientInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n// Exit on Headless\nif (!hasInterface) exitWith {};\n\n// Compile and cache config UI\nGVAR(configCache) = call CBA_fnc_createNamespace;\ncall FUNC(compileConfigUI);\n\n// Scripted API namespace\nGVAR(elementsSet) = call CBA_fnc_createNamespace;\n\n// Attach all event handlers where UI has to be updated\n[\"ace_settingsInitialized\", {\n    // Initial settings\n    [false] call FUNC(setElements);\n\n    // On load and entering/exiting a vehicle\n    [\"ace_infoDisplayChanged\", {\n        // Selective UI Advanced\n        // Defaults must be set in this EH to make sure controls are activated and advanced settings can be modified\n        private _force = [true, false] select (GVAR(allowSelectiveUI));\n        {\n            [_x, missionNamespace getVariable (format [QGVAR(%1), _x]), false, _force] call FUNC(setAdvancedElement);\n        } forEach (allVariables GVAR(configCache));\n\n        // Execute local event for when it's safe to modify UI through this API\n        // infoDisplayChanged can execute multiple times, make sure it only happens once\n        if (!GVAR(interfaceInitialized)) then {\n            [QGVAR(InterfaceInitialized), []] call CBA_fnc_localEvent;\n            GVAR(interfaceInitialized) = true;\n        };\n    }] call CBA_fnc_addEventHandler;\n\n    // On changing settings\n    [\"ace_settingChanged\", {\n        params [\"_name\"];\n\n        if (_name in ELEMENTS_BASIC) then {\n            [true] call FUNC(setElements);\n        } else {\n            private _nameNoPrefix = toLower (_name select [7]);\n            private _cachedElement = GVAR(configCache) getVariable _nameNoPrefix;\n            if (!isNil \"_cachedElement\") then {\n                [_nameNoPrefix, missionNamespace getVariable _name, true] call FUNC(setAdvancedElement);\n            };\n        };\n    }] call CBA_fnc_addEventHandler;\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nGVAR(interfaceInitialized) = false;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_compileConfigUI.sqf",
        "content": "/*\n * Author: Jonpas\n * Compiles and caches UI from ACE_UI config.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_ui_fnc_compileConfigUI\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n{\n    private _failure = false;\n    private _class = toLower (configName _x);\n\n    private _idd = getNumber (_x >> \"idd\");\n\n    private _elements = getArray (_x >> \"elements\");\n    if (_elements isEqualTo []) then {\n        ERROR_1(\"Failed compiling ACE_UI for Element: %1 - missing elements\",_class);\n        _failure = true;\n    };\n\n    private _location = getNumber (_x >> \"location\");\n    if !(_location in [ANYWHERE, GROUND_ONLY, VEHICLE_ONLY]) then {\n        ERROR_2(\"Failed compiling ACE_UI for Element: %1 - missing or invalid location %2\",_class,_location);\n        _failure = true;\n    };\n\n    if (!_failure) then {\n        private _conditions = [];\n        {\n            _conditions pushBack [compile (getText _x), configName _x];\n            TRACE_1(\"Caching Condition\",_x);\n        } forEach (configProperties [_x >> \"conditions\"]);\n\n        GVAR(configCache) setVariable [_class, [_idd, _elements, _location, _conditions]];\n    };\n} forEach (\"true\" configClasses (configFile >> \"ACE_UI\"));\n",
        "functionName": "ace_ui_fnc_compileConfigUI"
      },
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: Jonpas\n * Initializes the UI module.\n *\n * Arguments:\n * 0: Module Logic <LOGIC>\n * 1: Units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_ui_fnc_moduleInit\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif (!_activated) exitWith {};\n\n[_logic, QGVAR(allowSelectiveUI), \"allowSelectiveUI\"] call EFUNC(common,readSettingFromModule);\n\n// Basic\nif (isArray (missionConfigFile >> \"showHUD\")) then {\n    // HUD visibility is hardcoded in mission config and showHUD command is overriden\n    INFO(\"User Interface Module Failed to Initialize Basic settings - showHUD overriden in mission config!\");\n} else {\n    [_logic, QGVAR(soldierVehicleWeaponInfo), \"soldierVehicleWeaponInfo\"] call EFUNC(common,readSettingFromModule);\n    [_logic, QGVAR(vehicleRadar), \"vehicleRadar\"] call EFUNC(common,readSettingFromModule);\n    [_logic, QGVAR(vehicleCompass), \"vehicleCompass\"] call EFUNC(common,readSettingFromModule);\n    [_logic, QGVAR(commandMenu), \"commandMenu\"] call EFUNC(common,readSettingFromModule);\n    [_logic, QGVAR(groupBar), \"groupBar\"] call EFUNC(common,readSettingFromModule);\n};\n\n// Advanced\n[_logic, QGVAR(weaponName), \"weaponName\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(weaponNameBackground), \"weaponNameBackground\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(firingMode), \"firingMode\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(ammoType), \"ammoType\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(ammoCount), \"ammoCount\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(magCount), \"magCount\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(throwableName), \"throwableName\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(throwableCount), \"throwableCount\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(zeroing), \"zeroing\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(weaponLowerInfoBackground), \"weaponLowerInfoBackground\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(stance), \"stance\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(staminaBar), \"staminaBar\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerWeaponName), \"gunnerWeaponName\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerWeaponNameBackground), \"gunnerWeaponNameBackground\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerFiringMode), \"gunnerFiringMode\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerAmmoType), \"gunnerAmmoType\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerAmmoCount), \"gunnerAmmoCount\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerMagCount), \"gunnerMagCount\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerLaunchableName), \"gunnerLaunchableName\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerLaunchableCount), \"gunnerLaunchableCount\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerZeroing), \"gunnerZeroing\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(gunnerWeaponLowerInfoBackground), \"gunnerWeaponLowerInfoBackground\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleName), \"vehicleName\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleNameBackground), \"vehicleNameBackground\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleFuelBar), \"vehicleFuelBar\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleSpeed), \"vehicleSpeed\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleAltitude), \"vehicleAltitude\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleDamage), \"vehicleDamage\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleInfoBackground), \"vehicleInfoBackground\"] call EFUNC(common,readSettingFromModule);\n\nINFO_1(\"User Interface Module Initialized. Allow client modifications: %1\",GVAR(allowSelectiveUI));\n",
        "functionName": "ace_ui_fnc_moduleInit"
      },
      {
        "fileName": "fnc_setAdvancedElement.sqf",
        "content": "/*\n * Author: Jonpas\n * Sets advanced visible element of the UI using displays and controls.\n *\n * Arguments:\n * 0: Element Name <STRING>\n * 1: Show/Hide Element <BOOL>\n * 2: Show Hint <BOOL>\n * 3: Force change even when disallowed <BOOL> (default: false)\n *\n * Return Value:\n * Successfully Set <BOOL>\n *\n * Example:\n * _successfullySet = [\"ammoCount\", true, false] call ace_ui_fnc_setAdvancedElement\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_element\", \"_show\", [\"_showHint\", false, [true]], [\"_force\", false, [true]] ];\n\nprivate _cachedElement = GVAR(configCache) getVariable _element;\nif (isNil \"_cachedElement\") exitWith {};\n\nif (!_force && {!GVAR(allowSelectiveUI)}) exitWith {\n    [LSTRING(Disallowed), 2] call EFUNC(common,displayTextStructured);\n    false\n};\n\n_cachedElement params [\"_idd\", \"_elements\", \"_location\", \"_conditions\"];\n\n// Exit if main vehicle type condition not fitting\nprivate _canUseWeapon = ACE_player call CBA_fnc_canUseWeapon;\nif ((_canUseWeapon && {_location == 2}) || {!_canUseWeapon && {_location == 1}}) exitWith {false};\n\n// Get setting from config API\n{\n    if (!call (_x select 0)) exitWith {\n        // Display and print info which component forced the element except for default vehicle check\n        if (_showHint) then {\n            [LSTRING(Disabled), 2] call EFUNC(common,displayTextStructured);\n            INFO_2(\"Attempted modification of a forced User Interface element '%1' by '%2'.\",_element,_x select 1);\n        };\n        _show = false;\n    };\n} count _conditions;\n\n// Get setting from scripted API\nif (!_force) then {\n    private _setElement = GVAR(elementsSet) getVariable _element;\n    if (!isNil \"_setElement\") then {\n        _setElement params [\"_sourceSet\", \"_showSet\"];\n        if (_showHint) then {\n            [LSTRING(Disabled), 2] call EFUNC(common,displayTextStructured);\n            INFO_2(\"Attempted modification of a forced User Interface element '%1' by '%2'.\",_element,_sourceSet);\n        };\n        _show = _showSet;\n    };\n};\n\n_show = [1, 0] select _show;\n\n// Disable/Enable elements\nprivate _success = false;\n{\n    private _idc = _x;\n\n    // Loop through IGUI displays as they can be present several times for some reason\n    {\n        if (_idd == ctrlIDD _x) then {\n            //TRACE_3(\"Setting Element Visibility\",_show,_idd,_idc);\n\n            (_x displayCtrl _idc) ctrlSetFade _show;\n            (_x displayCtrl _idc) ctrlCommit 0;\n\n            _success = true;\n        };\n    } count (uiNamespace getVariable \"IGUI_displays\");\n    nil\n} count _elements;\n\n_success\n",
        "functionName": "ace_ui_fnc_setAdvancedElement"
      },
      {
        "fileName": "fnc_setElements.sqf",
        "content": "/*\n * Author: Jonpas\n * Sets basic visible elements of the UI using showHUD setter.\n *\n * Arguments:\n * 0: Show Hint <BOOL> (default: false)\n *\n * Return Value:\n * None\n *\n * Example:\n * [false] call ace_ui_fnc_setElements\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [[\"_showHint\", false]];\n\nif (isArray (missionConfigFile >> \"showHUD\")) exitWith {\n    if (_showHint) then {\n        [LSTRING(Disabled)] call EFUNC(common,displayTextStructured);\n    };\n};\n\n[\"ui\", [\n    true,\n    GVAR(soldierVehicleWeaponInfo),\n    GVAR(vehicleRadar),\n    GVAR(vehicleCompass),\n    true,\n    GVAR(commandMenu),\n    GVAR(groupBar),\n    true\n]] call EFUNC(common,showHud);\n",
        "functionName": "ace_ui_fnc_setElements"
      },
      {
        "fileName": "fnc_setElementVisibility.sqf",
        "content": "/*\n * Author: Jonpas\n * Setter for toggling advanced element visibility.\n *\n * Arguments:\n * 0: Source <STRING>\n * 1: Set/Unset <BOOL>\n * 2: Element Name <STRING>\n * 3: Show/Hide Element <BOOL> (default: false)\n *\n * Return Value:\n * Successfully Modified <BOOL>\n *\n * Example:\n * _successfullyModified = [\"ace_reload\", true, \"ammoCount\", false] call ace_ui_fnc_setElementVisibility\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\n    [\"_source\", \"\", [\"\"]],\n    [\"_set\", true, [true]],\n    [\"_element\", \"\", [\"\"]],\n    [\"_show\", false, [true]]\n];\n\nif (_source == \"\" || {_element == \"\"}) exitWith {\n    WARNING(\"Source or Element may not be empty strings!\");\n};\n\n_element = toLower _element;\n\n// Verify element is bound\nprivate _cachedElement = GVAR(configCache) getVariable _element;\nif (isNil \"_cachedElement\") exitWith {\n    WARNING_2(\"Element '%1' does not exist - modification by '%2' failed.\",_element,_source);\n};\n\nprivate _setElement = GVAR(elementsSet) getVariable _element;\nprivate _return = false;\n\nif (isNil \"_setElement\") then {\n    TRACE_3(\"Setting element\",_source,_element,_show);\n    private _success = [_element, _show, false, true] call FUNC(setAdvancedElement);\n\n    if (_success) then {\n        GVAR(elementsSet) setVariable [_element, [_source, _show]];\n        _return = true;\n    };\n} else {\n    _setElement params [\"_sourceSet\"];\n\n    if (_set) then {\n        if (GVAR(interfaceInitialized)) then {\n            WARNING_3(\"Element '%1' already set by '%2' - modification by '%3' failed.\",_element,_sourceSet,_source);\n        };\n    } else {\n        TRACE_3(\"Unsetting element\",_sourceSet,_element,_show);\n        GVAR(elementsSet) setVariable [_element, nil];\n\n        [_element, _show, false, true] call FUNC(setAdvancedElement);\n        _return = true;\n    };\n};\n\nTRACE_2(\"Visibility set\",_element,_return);\n_return\n",
        "functionName": "ace_ui_fnc_setElementVisibility"
      }
    ]
  },
  {
    "component": "vector",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "// by commy2\n\n[\"ACE3 Equipment\", QGVAR(AzimuthKey), localize LSTRING(AzimuthKey),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(((currentWeapon ACE_player) isKindOf [\"ACE_Vector\", configFile >> \"CfgWeapons\"]) && {cameraView == \"GUNNER\"}) exitWith {false};\n\n    // prevent holding down\n    if (GETGVAR(isDownStateKey1,false)) exitWith {false};\n    GVAR(isDownStateKey1) = true;\n\n    // Statement\n    [\"azimuth\"] call FUNC(onKeyDown);\n    false\n},\n{\n    // prevent holding down\n    GVAR(isDownStateKey1) = false;\n\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n    // Statement\n    [\"azimuth\"] call FUNC(onKeyUp);\n    false\n},\n[15, [false, false, false]], false, 0] call CBA_fnc_addKeybind; //Tab Key\n\n\n[\"ACE3 Equipment\", QGVAR(DistanceKey), localize LSTRING(DistanceKey),\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(((currentWeapon ACE_player) isKindOf [\"ACE_Vector\", configFile >> \"CfgWeapons\"]) && {cameraView == \"GUNNER\"}) exitWith {false};\n\n    // prevent holding down\n    if (GETGVAR(isDownStateKey2,false)) exitWith {false};\n    GVAR(isDownStateKey2) = true;\n\n    // Statement\n    [\"distance\"] call FUNC(onKeyDown);\n    false\n},\n{\n    // prevent holding down\n    GVAR(isDownStateKey2) = false;\n\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n\n    // Statement\n    [\"distance\"] call FUNC(onKeyUp);\n    false\n},\n[19, [false, false, false]], false] call CBA_fnc_addKeybind; //R Key\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by commy2\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(holdKeyHandler) = -1;\nGVAR(isKeyDownAzimuth) = false;\nGVAR(isKeyDownDistance) = false;\nGVAR(keyDownTimeAzimuth) = -1;\nGVAR(keyDownTimeDistance) = -1;\nGVAR(useMil) = false;\nGVAR(useFeet) = false;\nGVAR(modeReticle) = 0;\nGVAR(illuminate) = false;\n\n#include \"initKeybinds.sqf\"\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_adjustBrightness.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * 0: Number <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [5] call ace_vector_fnc_adjustBrigthness\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _color = [[1,0,0,0.5], [1,0,0,1]] select (_this select 0);\n\n(_dlgVector displayCtrl 1301) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1302) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1310) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1311) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1312) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1313) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1314) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1315) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1316) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1317) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1318) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1319) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1321) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1322) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1323) ctrlSetTextColor _color;\n(_dlgVector displayCtrl 1324) ctrlSetTextColor _color;\n\nGVAR(illuminate) = _this select 0;\n\n_this call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_adjustBrightness"
      },
      {
        "fileName": "fnc_clearDisplay.sqf",
        "content": "/*\n * Author: commy2\n * Clears the vectors control items.\n *\n * Arguments:\n * 0: String <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [5] call ace_vector_fnc_clearDisplay\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nswitch (_this select 0) do {\n    case (\"azimuth\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1317) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1318) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1319) ctrlSetText \"\";\n    };\n\n    case (\"distance\"): {\n        (_dlgVector displayCtrl 1310) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1311) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1312) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n};\n",
        "functionName": "ace_vector_fnc_clearDisplay"
      },
      {
        "fileName": "fnc_convertToTexturesDegree.sqf",
        "content": "/*\n * Author: commy2\n * converts azimuth into array of textures for the vectors scripted info control\n *\n * Arguments:\n * 0: Number <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [5] call ace_vector_fnc_convertToTexturesDegree\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_number\"];\n\nif (GVAR(useMil)) then {\n\n    _number = round (6400 / 360 * _number);\n    if (_number isEqualTo 6400) then {_number = 0};\n\n    [_number] call FUNC(convertToTexturesDistance)    // return\n\n} else {\n\n    _number = round _number;\n\n    private _isNegative = _number < 0;\n\n    _number = abs _number;\n    if (_number isEqualTo 360) then {_number = 0};\n\n    private _digit1 = floor (_number / 100);\n    private _digit2 = floor (_number / 10) - _digit1 * 10;\n    private _digit3 = _number mod 10;\n    private _digit4 = QPATHTOF(rsc\\vector_degree.paa);\n\n    if (_isNegative) then {\n\n        if (_digit1 isEqualTo 0) then {\n            if (_digit2 isEqualTo 0) then {\n                _digit1 = \"\";\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n            } else {\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n            };\n        } else {\n            _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n            _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n            _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n            _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n        };\n\n    } else {\n\n        if (_digit1 isEqualTo 0) then {\n            if (_digit2 isEqualTo 0) then {\n                _digit1 = \"\";\n                _digit2 = \"\";\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n            } else {\n                _digit1 = \"\";\n                _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n            };\n        } else {\n            _digit1 = format [QPATHTOF(rsc\\vector_%1.paa), _digit1];\n            _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n            _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n        };\n\n    };\n\n    [_digit1, _digit2, _digit3, _digit4]    // return\n}\n",
        "functionName": "ace_vector_fnc_convertToTexturesDegree"
      },
      {
        "fileName": "fnc_convertToTexturesDistance.sqf",
        "content": "/*\n * Author: commy2\n * converts rangefinder distance into array of textures for the vectors scripted info control\n *\n * Arguments:\n * 0: Number <NUMBER>\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * [5] call ace_vector_fnc_convertToTexturesDistance\n *\n * Public: No\n */\n#include \"script_component.hpp\"\nparams [\"_number\"];\n\n_number = round _number;\nprivate _isNegative = _number < 0;\n_number = abs _number;\n\nif (_number >= 10000) exitWith {\n    [QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa)]    // return\n};\n\n\nprivate _digit1 = floor (_number / 1000);\nprivate _digit2 = floor (_number / 100) - _digit1 * 10;\nprivate _digit3 = floor (_number / 10) - _digit1 * 100 - _digit2 * 10;\nprivate _digit4 = _number mod 10;\n\nif (_isNegative) then {\n\n    if (_digit1 == 0) then {\n        if (_digit2 == 0) then {\n            if (_digit3 == 0) then {\n                _digit1 = \"\";\n                _digit2 = \"\";\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n            } else {\n                _digit1 = \"\";\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n            };\n        } else {\n            _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n            _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n            _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n            _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n        };\n    } else {\n        _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n        _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n        _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n        _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n    };\n\n} else {\n\n    if (_digit1 == 0) then {\n        if (_digit2 == 0) then {\n            if (_digit3 == 0) then {\n                _digit1 = \"\";\n                _digit2 = \"\";\n                _digit3 = \"\";\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n            } else {\n                _digit1 = \"\";\n                _digit2 = \"\";\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n            };\n        } else {\n            _digit1 = \"\";\n            _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n            _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n            _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n        };\n    } else {\n        _digit1 = format [QPATHTOF(rsc\\vector_%1.paa), _digit1];\n        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n        _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n    };\n\n};\n\n[_digit1, _digit2, _digit3, _digit4]\n",
        "functionName": "ace_vector_fnc_convertToTexturesDistance"
      },
      {
        "fileName": "fnc_convertToTexturesFOS.sqf",
        "content": "/*\n * Author: commy2\n * converts rangefinder distance into array of textures for the vectors scripted info control\n *\n * Arguments:\n * 0: Number <NUMBER>\n * 1: Number <NUMBER>\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * [5, 6] call ace_vector_fnc_convertToTexturesFOS\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\nparams [\"_number\", \"_coordinate\"];\n\n_number = round (_number select _coordinate);\nprivate _isNegative = _number < 0;\n_number = abs _number;\n\nif (_number > 9999) exitWith {\n    [QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa)]    // return\n};\n\nprivate _digit0 = \"\";\nprivate _digit1 = floor (_number / 1000);\nprivate _digit2 = floor (_number / 100) - _digit1 * 10;\nprivate _digit3 = floor (_number / 10) - _digit1 * 100 - _digit2 * 10;\nprivate _digit4 = _number mod 10;\n\nswitch (_coordinate) do {\n    case 0 : {\n\n        if (_isNegative) then {\n\n            if (_digit1 == 0) then {\n                if (_digit2 == 0) then {\n                    if (_digit3 == 0) then {\n                        _digit0 = QPATHTOF(rsc\\vector_l.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit3 = \"\";\n                        _digit4 = \"\";\n                    } else {\n                        _digit0 = QPATHTOF(rsc\\vector_l.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit4 = \"\";\n                    };\n                } else {\n                    _digit0 = QPATHTOF(rsc\\vector_l.paa);\n                    _digit1 = \"\";\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                };\n            } else {\n                _digit0 = \"\";\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n            };\n\n        } else {\n\n            if (_digit1 == 0) then {\n                if (_digit2 == 0) then {\n                    if (_digit3 == 0) then {\n                        _digit0 = QPATHTOF(rsc\\vector_r.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit3 = \"\";\n                        _digit4 = \"\";\n                    } else {\n                        _digit0 = QPATHTOF(rsc\\vector_r.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit4 = \"\";\n                    };\n                } else {\n                    _digit0 = QPATHTOF(rsc\\vector_r.paa);\n                    _digit1 = \"\";\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                };\n            } else {\n                _digit0 = \"\";\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n            };\n        };\n\n    };\n\n    case 1 : {\n\n        if (_isNegative) then {\n\n            if (_digit1 == 0) then {\n                if (_digit2 == 0) then {\n                    if (_digit3 == 0) then {\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit3 = \"\";\n                        _digit4 = \"\";\n                    } else {\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit4 = \"\";\n                    };\n                } else {\n                    _digit0 = QPATHTOF(rsc\\vector_d.paa);\n                    _digit1 = \"\";\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                };\n            } else {\n                _digit0 = \"\";\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n            };\n\n        } else {\n\n            if (_digit1 == 0) then {\n                if (_digit2 == 0) then {\n                    if (_digit3 == 0) then {\n                        _digit0 = QPATHTOF(rsc\\vector_a.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit3 = \"\";\n                        _digit4 = \"\";\n                    } else {\n                        _digit0 = QPATHTOF(rsc\\vector_a.paa);\n                        _digit1 = \"\";\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit4 = \"\";\n                    };\n                } else {\n                    _digit0 = QPATHTOF(rsc\\vector_a.paa);\n                    _digit1 = \"\";\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                };\n            } else {\n                _digit0 = \"\";\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n            };\n        };\n\n    };\n\n    case 2 : {\n\n        if (_isNegative) then {\n\n            if (_digit1 == 0) then {\n                if (_digit2 == 0) then {\n                    if (_digit3 == 0) then {\n                        _digit0 = QPATHTOF(rsc\\vector_u.paa);\n                        _digit1 = QPATHTOF(rsc\\vector_p.paa);\n                        _digit2 = \"\";\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit4 = \"\";\n                    } else {\n                        _digit0 = QPATHTOF(rsc\\vector_u.paa);\n                        _digit1 = QPATHTOF(rsc\\vector_p.paa);\n                        _digit2 = \"\";\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                        _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                    };\n                } else {\n                    _digit0 = QPATHTOF(rsc\\vector_u.paa);\n                    _digit1 = QPATHTOF(rsc\\vector_p.paa);\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                };\n            } else {\n                _digit0 = \"\";\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n            };\n\n        } else {\n\n            if (_digit1 == 0) then {\n                if (_digit2 == 0) then {\n                    if (_digit3 == 0) then {\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\n                        _digit1 = QPATHTOF(rsc\\vector_n.paa);\n                        _digit2 = \"\";\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                        _digit4 = \"\";\n                    } else {\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\n                        _digit1 = QPATHTOF(rsc\\vector_n.paa);\n                        _digit2 = \"\";\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                        _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                    };\n                } else {\n                    _digit0 = QPATHTOF(rsc\\vector_d.paa);\n                    _digit1 = QPATHTOF(rsc\\vector_n.paa);\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\n                };\n            } else {\n                _digit0 = \"\";\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\n            };\n        };\n\n    };\n};\n\n// trap errors\nif !([_digit0, _digit1, _digit2, _digit3, _digit4] isEqualTypeAll \"\") exitWith {\n    [QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa)]    // return\n};\n\n[_digit0, _digit1, _digit2, _digit3, _digit4]\n",
        "functionName": "ace_vector_fnc_convertToTexturesFOS"
      },
      {
        "fileName": "fnc_dataTransfer.sqf",
        "content": "/*\n * Author: PabstMirror\n * Data transfer over a connected cable. Based on page 14 of pdf.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_vector_fnc_dataTransfer\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _distance = call FUNC(getDistance);\nprivate _direction = call FUNC(getDirection);\nprivate _azimuth = _direction select 0;\nprivate _inclination = _direction select 1;\n//Send Data to connected GPS\n[QGVAR(rangefinderData), [_distance, _azimuth, _inclination]] call CBA_fnc_localEvent;\n",
        "functionName": "ace_vector_fnc_dataTransfer"
      },
      {
        "fileName": "fnc_getDirection.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * call ace_vector_fnc_getDirection\n *\n * Public: No\n */\n\n// by commy2\n#include \"script_component.hpp\"\n\n/*\nprivate \"_dlgVector\";\n\ndisableSerialization;\n_dlgVector = GETUVAR(ACE_dlgVector, displayNull);\n\n[\n    round parseNumber ctrlText (_dlgVector displayCtrl 156),\n    round parseNumber ctrlText (_dlgVector displayCtrl 182)\n]\n*/\n\n#define MAX_ABSINCLINATION 45\n\nprivate _position = ATLToASL positionCameraToWorld [0,0,0];\nprivate _direction = ATLToASL positionCameraToWorld [0,0,1];\n\nprivate _azimuth = ((_direction select 0) - (_position select 0)) atan2 ((_direction select 1) - (_position select 1));\nprivate _inclination = asin ((_direction select 2) - (_position select 2));\n\nif (_azimuth < 0) then {_azimuth = _azimuth + 360};\nif (abs _inclination > MAX_ABSINCLINATION) then {_inclination = -1000};\n\n[_azimuth, _inclination]\n",
        "functionName": "ace_vector_fnc_getDirection"
      },
      {
        "fileName": "fnc_getDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * call ace_vector_fnc_getDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n#define MIN_DISTANCE 10\n#define MAX_DISTANCE [6000, 9000] select GVAR(useFeet)\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _distance = ctrlText (_dlgVector displayCtrl 151);\n\nif (_distance == \"----\") exitWith {-1000};\n\n_distance = round parseNumber _distance;\n\nif (GVAR(useFeet)) then {\n    _distance = 3.28084 * _distance;\n};\n\nif (_distance > MAX_DISTANCE) exitWith {-1000};\nif (_distance < MIN_DISTANCE) exitWith {-1000};\n\n_distance\n",
        "functionName": "ace_vector_fnc_getDistance"
      },
      {
        "fileName": "fnc_getFallOfShot.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * call ace_vector_fnc_getFallOfShot\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _distanceP1 = GVAR(pData) select 0;\nprivate _directionP1 = GVAR(pData) select 1;\nprivate _azimuthP1 = _directionP1 select 0;\nprivate _inclinationP1 = _directionP1 select 1;\nprivate _distanceP2 = call FUNC(getDistance);\nprivate _directionP2 = call FUNC(getDirection);\nprivate _azimuthP2 = _directionP2 select 0;\nprivate _inclinationP2 = _directionP2 select 1;\n\nprivate _abscissa = _distanceP1 * sin (_azimuthP1 - _azimuthP2);\nprivate _ordinate = _distanceP1 * cos (_inclinationP1 - _inclinationP2) - _distanceP2 * cos (_azimuthP1 - _azimuthP2);\nprivate _applicate = (sin _inclinationP2 * _distanceP2) - (sin _inclinationP1 * _distanceP1);\n\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\n    [-1000, -1000, -1000]    // return\n};\n\n[_abscissa, _ordinate, _applicate]\n",
        "functionName": "ace_vector_fnc_getFallOfShot"
      },
      {
        "fileName": "fnc_getHeightDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * call ace_vector_fnc_getHeightDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _distance = call FUNC(getDistance);\nprivate _direction = call FUNC(getDirection);\n\nprivate _azimuth = _direction select 0;\nprivate _inclination = _direction select 1;\n\nif (_distance < -999) exitWith {\n    [-1000, -1000]    // return\n};\n\n[sin _inclination * _distance, cos _inclination * _distance]\n",
        "functionName": "ace_vector_fnc_getHeightDistance"
      },
      {
        "fileName": "fnc_getRelativeAzimuthDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * call ace_vector_fnc_getRelativeAzimuthDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _distanceP1 = GVAR(pData) select 0;\nprivate _directionP1 = GVAR(pData) select 1;\nprivate _azimuthP1 = _directionP1 select 0;\nprivate _inclinationP1 = _directionP1 select 1;\n\nprivate _distanceP2 = call FUNC(getDistance);\nprivate _directionP2 = call FUNC(getDirection);\nprivate _azimuthP2 = _directionP2 select 0;\nprivate _inclinationP2 = _directionP2 select 1;\n\nprivate _relDirection = sqrt ((_azimuthP1 - _azimuthP2) ^ 2 + (_inclinationP1 - _inclinationP2) ^ 2);\nprivate _relDistance = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _relDirection);\nprivate _relHeight = (sin _inclinationP1 * _distanceP1) - (sin _inclinationP2 * _distanceP2);\nprivate _relLength = sqrt (_relDistance ^ 2 - _relHeight ^ 2); if (str(_relLength) == \"-1.#IND\") then {_relLength = 0};\n\nprivate _lenghtP1 = cos _inclinationP1 * _distanceP1;\nprivate _lenghtP2 = cos _inclinationP2 * _distanceP2;\nprivate _relAzimuth = (sin _azimuthP2 * _lenghtP2 - sin _azimuthP1 * _lenghtP1) atan2 (cos _azimuthP2 * _lenghtP2 - cos _azimuthP1 * _lenghtP1);\nif (_relAzimuth < 0) then {_relAzimuth = _relAzimuth + 360};\n\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\n    [-1000, -1000]    // return\n};\n\n[_relAzimuth, _relLength]\n",
        "functionName": "ace_vector_fnc_getRelativeAzimuthDistance"
      },
      {
        "fileName": "fnc_getRelativeDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Number <NUMBER>\n *\n * Example:\n * call ace_vector_fnc_getRelativeDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _distanceP1 = GVAR(pData) select 0;\nprivate _directionP1 = GVAR(pData) select 1;\nprivate _azimuthP1 = _directionP1 select 0;\nprivate _inclinationP1 = _directionP1 select 1;\n\nprivate _distanceP2 = call FUNC(getDistance);\nprivate _directionP2 = call FUNC(getDirection);\nprivate _azimuthP2 = _directionP2 select 0;\nprivate _inclinationP2 = _directionP2 select 1;\n\n\nprivate _relDirection = sqrt ((_azimuthP1 - _azimuthP2) ^ 2 + (_inclinationP1 - _inclinationP2) ^ 2);\nprivate _relDistance = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _relDirection);\n\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\n    -1000    // return\n};\n\n_relDistance\n",
        "functionName": "ace_vector_fnc_getRelativeDistance"
      },
      {
        "fileName": "fnc_getRelativeHeightLength.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * call ace_vector_fnc_getRelativeHeightLength\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _distanceP1 = GVAR(pData) select 0;\nprivate _directionP1 = GVAR(pData) select 1;\nprivate _azimuthP1 = _directionP1 select 0;\nprivate _inclinationP1 = _directionP1 select 1;\nprivate _distanceP2 = call FUNC(getDistance);\nprivate _directionP2 = call FUNC(getDirection);\nprivate _azimuthP2 = _directionP2 select 0;\nprivate _inclinationP2 = _directionP2 select 1;\n\nprivate _azimuth = abs (_azimuthP1 - _azimuthP2);\nprivate _inclination = abs (_inclinationP1 - _inclinationP2);\nprivate _height = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _inclination);\nprivate _length = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _azimuth);\n\nif (_inclination < 0) then {_height = -1 * _height};\n\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\n    [-1000, -1000]    // return\n};\n\n[_height, _length]\n",
        "functionName": "ace_vector_fnc_getRelativeHeightLength"
      },
      {
        "fileName": "fnc_illuminate.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * 0: String <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"5\"] call ace_vector_fnc_illuminate\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nif (_this select 0) then {\n    {\n        if (ctrlIDC _x != 170) then {\n            private _string = ctrlText _x;\n            private _index = _string find \".paa\";\n\n            if (_index != -1 && {_string find \"_illum.paa\" == -1}) then {\n                _string = toArray _string;\n                _string resize _index;\n\n                _x ctrlSetText format [\"%1_illum.paa\", toString _string];\n            };\n        };\n    } forEach allControls _dlgVector;\n} else {\n    {\n        if (ctrlIDC _x != 170) then {\n            private _string = ctrlText _x;\n            private _index = _string find \"_illum.paa\";\n\n            if (_index != -1) then {\n                _string = toArray _string;\n                _string resize _index;\n\n                _x ctrlSetText format [\"%1.paa\", toString _string];\n            };\n\n        };\n    } forEach allControls _dlgVector;\n};\n",
        "functionName": "ace_vector_fnc_illuminate"
      },
      {
        "fileName": "fnc_nextMode.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * 0: String<STRING>\n *\n * Return Value:\n * Array <ARRAY>\n *\n * Example:\n * [\"5\"] call ace_vector_fnc_nextMode\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nswitch (_this select 0) do {\n    case (\"settings\"): {\n        switch (GVAR(configTemp)) do {\n            case ([false, false]): {\n                GVAR(configTemp) = [false, true];\n            };\n            case ([false, true]): {\n                GVAR(configTemp) = [true, true];\n            };\n            case ([true, true]): {\n                GVAR(configTemp) = [true, false];\n            };\n            case ([true, false]): {\n                GVAR(configTemp) = [false, false];\n            };\n        };\n\n        [[\"meter\", \"feet\"] select (GVAR(configTemp) select 0)] call FUNC(showText);\n        [[\"deg\",   \"mil\" ] select (GVAR(configTemp) select 1)] call FUNC(showText);\n    };\n\n    case (\"config\"): {\n        GVAR(configTemp) = GVAR(configTemp) + 1;\n        if (GVAR(configTemp) > 2) then {GVAR(configTemp) = 0};\n\n        switch (GVAR(configTemp)) do {\n            case (0): {\n                [\"eret\"] call FUNC(showText);\n                [\"off\"]  call FUNC(showText);\n            };\n            case (1): {\n                [\"eret\"] call FUNC(showText);\n                [\"on\"]   call FUNC(showText);\n            };\n            case (2): {\n                [\"nigt\"] call FUNC(showText);\n                [\"on\"]   call FUNC(showText);\n            };\n        };\n    };\n};\n",
        "functionName": "ace_vector_fnc_nextMode"
      },
      {
        "fileName": "fnc_onKeyDown.sqf",
        "content": "/*\n * Author: commy2\n * Handles pressing the special vector keys.\n *\n * Arguments:\n * 0: String <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"5\"] call ace_vector_fnc_onKeyDown\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n// set vector config settings\nswitch (GVAR(modeReticle)) do {\n    case (0): {\n        [false] call FUNC(adjustBrightness);\n        [false] call FUNC(showReticle);\n    };\n    case (1): {\n        [false] call FUNC(adjustBrightness);\n        [true] call FUNC(showReticle);\n    };\n    case (2): {\n        [true] call FUNC(adjustBrightness);\n        [true] call FUNC(showReticle);\n    };\n};\n\nprivate _fnc_setPFH = {\n    if (GVAR(holdKeyHandler) > -1) then {\n        [GVAR(holdKeyHandler)] call CBA_fnc_removePerFrameHandler;\n        GVAR(holdKeyHandler) = -1;\n    };\n\n    GVAR(currentMode) = _this;\n    GVAR(holdKeyHandler) = [FUNC(onKeyHold), 0, _this] call CBA_fnc_addPerFrameHandler;\n};\n\nswitch (_this select 0) do {\n    case (\"azimuth\"): {\n        GVAR(keyDownTabCountDistance) = 0;\n\n        // handle input in option menu\n        if (GVAR(currentMode) == \"settings\") exitWith {\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 1) exitWith {};\n\n            if (diag_tickTime < GVAR(keyDownTimeAzimuth) + 0.5) then {\n                GVAR(keyDownTabCountAzimuth) = (GETGVAR(keyDownTabCountAzimuth,0)) + 1;\n            } else {\n                GVAR(keyDownTabCountAzimuth) = 1;\n            };\n\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\n        };\n\n        if (GVAR(currentMode) == \"config\") exitWith {\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 0.5) exitWith {};\n\n            [\"config\"] call FUNC(nextMode);\n        };\n\n        // prevent additinal modifier input if advanced mode it set, spaghetti\n        if (GETGVAR(isKeyDownDistance,false) && {GETGVAR(currentMode,\"\") in [\"relative_distance\", \"relative_height+length\"]}) exitWith {};\n\n        [\"azimuth\"] call FUNC(clearDisplay);\n\n        GVAR(isKeyDownAzimuth) = true;\n        [false] call FUNC(showP1);\n\n        // handle 5 times clicking\n        if (diag_tickTime < GVAR(keyDownTimeAzimuth) + 0.5) then {\n            GVAR(keyDownTabCountAzimuth) = (GETGVAR(keyDownTabCountAzimuth,0)) + 1;\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\n        } else {\n            GVAR(keyDownTabCountAzimuth) = 1;\n        };\n\n        // open settings menu\n        if (GVAR(keyDownTabCountAzimuth) == 5) exitWith {\n            GVAR(keyDownTimeMenu) = diag_tickTime;\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\n            GVAR(keyDownTabCountAzimuth) = 0;\n            GVAR(configTemp) = [GVAR(useFeet), GVAR(useMil)];\n            [\"settings\"] call FUNC(showText);\n            \"settings\" call _fnc_setPFH;\n        };\n\n        if (diag_tickTime < GVAR(keyDownTimeAzimuth) + 0.5) exitWith {\n            \"azimuth+inclination\" call _fnc_setPFH;\n        };\n\n        GVAR(keyDownTimeAzimuth) = diag_tickTime;\n\n        if (diag_tickTime > GVAR(keyDownTimeDistance) + 0.5) then {\n            if !(GETGVAR(isKeyDownDistance,false)) then {\n                [\"distance\"] call FUNC(clearDisplay);\n                \"azimuth\" call _fnc_setPFH;\n            };\n        } else {\n            if (GETGVAR(isKeyDownDistance,false)) then {\n                \"azimuth+distance\" call _fnc_setPFH;\n            } else {\n                [\"distance\"] call FUNC(clearDisplay);\n                \"azimuth\" call _fnc_setPFH;\n            };\n        };\n\n    };\n\n    case (\"distance\"): {\n        GVAR(keyDownTabCountAzimuth) = 0;\n\n        // handle input in option menu\n        if (GVAR(currentMode) == \"config\") exitWith {\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 0.5) exitWith {};\n\n            if (diag_tickTime < GVAR(keyDownTimeDistance) + 0.5) then {\n                GVAR(keyDownTabCountDistance) = (GETGVAR(keyDownTabCountDistance,0)) + 1;\n            } else {\n                GVAR(keyDownTabCountDistance) = 1;\n            };\n\n            GVAR(keyDownTimeDistance) = diag_tickTime;\n        };\n\n        if (GVAR(currentMode) == \"settings\") exitWith {\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 0.5) exitWith {};\n\n            [\"settings\"] call FUNC(nextMode);\n        };\n\n        // prevent additinal modifier input if advanced mode it set, spaghetti\n        if (GETGVAR(isKeyDownAzimuth,false) && {GETGVAR(currentMode,\"\") in [\"relative_azimuth+distance\", \"fall_of_shot\"]}) exitWith {};\n\n        // toggle fos values\n        if (GETGVAR(currentMode,\"\") == \"fall_of_shot\") exitWith {\n            [!(GETGVAR(FOSState,true))] call FUNC(showFallOfShot);\n        };\n\n        [\"distance\"] call FUNC(clearDisplay);\n\n        GVAR(isKeyDownDistance) = true;\n        [false] call FUNC(showP1);\n\n        // handle 5 times clicking\n        if (diag_tickTime < GVAR(keyDownTimeDistance) + 0.5) then {\n            GVAR(keyDownTabCountDistance) = (GETGVAR(keyDownTabCountDistance,0)) + 1;\n            GVAR(keyDownTimeDistance) = diag_tickTime;\n        } else {\n            GVAR(keyDownTabCountDistance) = 1;\n        };\n\n        // open config menu\n        if (GVAR(keyDownTabCountDistance) == 5) exitWith {\n            GVAR(keyDownTimeMenu) = diag_tickTime;\n            GVAR(keyDownTimeDistance) = diag_tickTime;\n            GVAR(keyDownTabCountDistance) = 0;\n            GVAR(configTemp) = GVAR(modeReticle);\n            [\"config\"] call FUNC(showText);\n            \"config\" call _fnc_setPFH;\n        };\n\n        if (diag_tickTime < GVAR(keyDownTimeDistance) + 0.5) exitWith {\n            \"height+distance\" call _fnc_setPFH;\n        };\n\n        GVAR(keyDownTimeDistance) = diag_tickTime;\n\n        if (diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5) then {\n            if !(GETGVAR(isKeyDownAzimuth,false)) then {\n                [\"azimuth\"] call FUNC(clearDisplay);\n                \"distance\" call _fnc_setPFH;\n            };\n        } else {\n            if (GETGVAR(isKeyDownAzimuth,false)) then {\n                \"azimuth+distance\" call _fnc_setPFH;\n            } else {\n                [\"azimuth\"] call FUNC(clearDisplay);\n                \"distance\" call _fnc_setPFH;\n            };\n        };\n\n    };\n};\n",
        "functionName": "ace_vector_fnc_onKeyDown"
      },
      {
        "fileName": "fnc_onKeyHold.sqf",
        "content": "/*\n * Author: commy2\n * PFH executed while holding a vector key down.\n *\n * Arguments:\n * 0: String <STRING>\n * 1: Number <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"5\", 5] call ace_vector_fnc_onKeyHold\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif (!((currentWeapon ACE_player) isKindOf [\"ACE_Vector\", configFile >> \"CfgWeapons\"])) exitWith {\n    [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n    GVAR(currentMode) = \"\";\n\n    if (GVAR(holdKeyHandler) > -1) then {\n        GVAR(holdKeyHandler) = -1;\n    };\n};\n\nswitch (_this select 0) do {\n    case (\"azimuth\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.2;\n\n        [false] call FUNC(showCenter);\n\n        if (_isReady) then {\n            call FUNC(showAzimuth);\n        };\n\n        if (!GVAR(isKeyDownAzimuth)) then {\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"distance\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\n\n        [_isReady] call FUNC(showCenter);\n\n        if (!GVAR(isKeyDownDistance)) then {\n            if (_isReady) then {\n                call FUNC(showDistance);\n                [false] call FUNC(showCenter);\n            };\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"azimuth+distance\"): {\n\n        call FUNC(showAzimuth);\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\n\n        [_isReady] call FUNC(showCenter);\n\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\n            if (_isReady) then {\n                call FUNC(showDistance);\n                [false] call FUNC(showCenter);\n                [] call FUNC(dataTransfer);\n            };\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"azimuth+inclination\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.2;\n\n        [false] call FUNC(showCenter);\n\n        if (_isReady) then {\n            call FUNC(showAzimuthInclination);\n        };\n\n        if (!GVAR(isKeyDownAzimuth)) then {\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"height+distance\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\n\n        [_isReady] call FUNC(showCenter);\n\n        if (!GVAR(isKeyDownDistance)) then {\n            if (_isReady) then {\n                call FUNC(showHeightDistance);\n                [false] call FUNC(showCenter);\n            };\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"relative_distance\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5;\n\n        [_isReady] call FUNC(showCenter);\n\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\n            if (_isReady) then {\n                call FUNC(showRelativeDistance);\n            };\n            [false] call FUNC(showCenter);\n            [false] call FUNC(showP1);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"relative_height+length\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5;\n\n        [_isReady] call FUNC(showCenter);\n\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\n            if (_isReady) then {\n                call FUNC(showRelativeHeightLength);\n            };\n            [false] call FUNC(showCenter);\n            [false] call FUNC(showP1);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"relative_azimuth+distance\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\n\n        [_isReady] call FUNC(showCenter);\n\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\n            if (_isReady) then {\n                call FUNC(showRelativeAzimuthDistance);\n            };\n            [false] call FUNC(showCenter);\n            [false] call FUNC(showP1);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"fall_of_shot\"): {\n\n        private _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\n\n        [_isReady] call FUNC(showCenter);\n\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\n            if (_isReady) then {\n                GVAR(FOSData) = call FUNC(getFallOfShot);\n                [false] call FUNC(showFallOfShot);\n            };\n            [false] call FUNC(showCenter);\n            [false] call FUNC(showP1);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n    };\n\n    case (\"settings\"): {\n        if (diag_tickTime < GVAR(keyDownTimeMenu) + 1) exitWith {\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\n        };\n\n        [[\"meter\", \"feet\"] select (GVAR(configTemp) select 0)] call FUNC(showText);\n        [[\"deg\",   \"mil\" ] select (GVAR(configTemp) select 1)] call FUNC(showText);\n\n        if (GVAR(keyDownTabCountAzimuth) >= 5) exitWith {\n            GVAR(useFeet) = GVAR(configTemp) select 0;\n            GVAR(useMil) = GVAR(configTemp) select 1;\n\n            [\"clear_left\"] call FUNC(showText);\n            [\"clear_right\"] call FUNC(showText);\n            [\"stor\"] call FUNC(showText);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            GVAR(currentMode) = \"\";\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n        if (GVAR(keyDownTabCountAzimuth) > 0 && {diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5}) exitWith {\n\n            [\"clear_left\"] call FUNC(showText);\n            [\"clear_right\"] call FUNC(showText);\n            [\"old_settings\"] call FUNC(showText);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            GVAR(currentMode) = \"\";\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n    };\n\n    case (\"config\"): {\n        if (diag_tickTime < GVAR(keyDownTimeMenu) + 1) exitWith {\n            GVAR(keyDownTimeDistance) = diag_tickTime;\n        };\n\n        switch (GVAR(configTemp)) do {\n            case (0): {\n                [\"eret\"] call FUNC(showText);\n                [\"off\"]  call FUNC(showText);\n            };\n            case (1): {\n                [\"eret\"] call FUNC(showText);\n                [\"on\"]   call FUNC(showText);\n            };\n            case (2): {\n                [\"nigt\"] call FUNC(showText);\n                [\"on\"]   call FUNC(showText);\n            };\n        };\n\n        if (GVAR(keyDownTabCountDistance) >= 5) exitWith {\n            GVAR(modeReticle) = GVAR(configTemp);\n\n            [\"clear_left\"] call FUNC(showText);\n            [\"clear_right\"] call FUNC(showText);\n            [\"stor\"] call FUNC(showText);\n\n            // set new config settings\n            switch (GVAR(configTemp)) do {\n                case (0): {\n                    [false] call FUNC(adjustBrightness);\n                    [false] call FUNC(showReticle);\n                };\n                case (1): {\n                    [false] call FUNC(adjustBrightness);\n                    [true] call FUNC(showReticle);\n                };\n                case (2): {\n                    [true] call FUNC(adjustBrightness);\n                    [true] call FUNC(showReticle);\n                };\n            };\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            GVAR(currentMode) = \"\";\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n\n        if (GVAR(keyDownTabCountDistance) > 0 && {diag_tickTime > GVAR(keyDownTimeDistance) + 0.5}) exitWith {\n\n            [\"clear_left\"] call FUNC(showText);\n            [\"clear_right\"] call FUNC(showText);\n            [\"old_config\"] call FUNC(showText);\n\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\n\n            GVAR(currentMode) = \"\";\n\n            if (GVAR(holdKeyHandler) > -1) then {\n                GVAR(holdKeyHandler) = -1;\n            };\n        };\n    };\n\n};\n",
        "functionName": "ace_vector_fnc_onKeyHold"
      },
      {
        "fileName": "fnc_onKeyUp.sqf",
        "content": "/*\n * Author: commy2\n * Handles releasing the special vector keys.\n *\n * Arguments:\n * 0: String <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"5\"] call ace_vector_fnc_onKeyUp\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nprivate _fnc_setPFH = {\n    if (GVAR(holdKeyHandler) > -1) then {\n        [GVAR(holdKeyHandler)] call CBA_fnc_removePerFrameHandler;\n        GVAR(holdKeyHandler) = -1;\n    };\n\n    GVAR(currentMode) = _this;//\n    GVAR(holdKeyHandler) = [FUNC(onKeyHold), 0, _this] call CBA_fnc_addPerFrameHandler;\n};\n\nswitch (_this select 0) do {\n    case (\"azimuth\"): {\n\n        GVAR(isKeyDownAzimuth) = false;\n\n        if (GVAR(isKeyDownDistance)) then {\n\n            switch (GVAR(currentMode)) do {\n                case (\"distance\"): {\n                    [\"azimuth\"] call FUNC(clearDisplay);\n                    [true] call FUNC(showP1);\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\n                    \"relative_distance\" call _fnc_setPFH;\n                };\n\n                case (\"height+distance\"): {\n                    [\"azimuth\"] call FUNC(clearDisplay);\n                    [true] call FUNC(showP1);\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\n                    \"relative_height+length\" call _fnc_setPFH;\n                };\n            };\n\n        };\n\n    };\n\n    case (\"distance\"): {\n\n        GVAR(isKeyDownDistance) = false;\n\n        if (GVAR(isKeyDownAzimuth)) then {\n\n            switch (GVAR(currentMode)) do {\n                case (\"azimuth\"): {\n                    [\"azimuth\"] call FUNC(clearDisplay);\n                    [\"distance\"] call FUNC(clearDisplay);\n                    [true] call FUNC(showP1);\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\n                    \"relative_azimuth+distance\" call _fnc_setPFH;\n                };\n\n                case (\"azimuth+inclination\"): {\n                    [\"azimuth\"] call FUNC(clearDisplay);\n                    [\"distance\"] call FUNC(clearDisplay);\n                    [true] call FUNC(showP1);\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\n                    \"fall_of_shot\" call _fnc_setPFH;\n                };\n            };\n\n        };\n\n    };\n};\n",
        "functionName": "ace_vector_fnc_onKeyUp"
      },
      {
        "fileName": "fnc_showAzimuth.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showAzimuth\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _direction = call FUNC(getDirection);\n\nprivate _digits = _direction call FUNC(convertToTexturesDegree);\n\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showAzimuth"
      },
      {
        "fileName": "fnc_showAzimuthInclination.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showAzimuthInclination\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _direction = call FUNC(getDirection);\n\n// azimuth\nprivate _digits = [_direction select 0] call FUNC(convertToTexturesDegree);\n\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\n\n// inclination\n_digits = [_direction select 1] call FUNC(convertToTexturesDegree);\n\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showAzimuthInclination"
      },
      {
        "fileName": "fnc_showCenter.sqf",
        "content": "/*\n * Author: commy2\n * Shows or hides the vectors center square thingy.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showCenter\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n((GETUVAR(ACE_dlgVector,displayNull)) displayCtrl 1301) ctrlSetText ([\"\", QPATHTOF(rsc\\vector_center.paa)] select (_this select 0));\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showCenter"
      },
      {
        "fileName": "fnc_showDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _distance = call FUNC(getDistance);\n\nprivate _digits = [_distance] call FUNC(convertToTexturesDistance);\n\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showDistance"
      },
      {
        "fileName": "fnc_showFallOfShot.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * 0: Unknown <UNKNOWN>\n *\n * Return Value:\n * None\n *\n * Example:\n * [?] call ace_vector_fnc_showFallOfShot\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nGVAR(FOSState) = _this select 0;\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _fosData = GVAR(FOSData);\n\nif !(_this select 0) then {\n    // of ordinate\n    private _digits = [_fosData, 1] call FUNC(convertToTexturesFOS);\n\n    (_dlgVector displayCtrl 1310) ctrlSetText (_digits select 0);\n    (_dlgVector displayCtrl 1311) ctrlSetText (_digits select 1);\n    (_dlgVector displayCtrl 1312) ctrlSetText (_digits select 2);\n    (_dlgVector displayCtrl 1313) ctrlSetText (_digits select 3);\n    (_dlgVector displayCtrl 1314) ctrlSetText (_digits select 4);\n\n    // of abscissa\n    _digits = [_fosData, 0] call FUNC(convertToTexturesFOS);\n\n    (_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\n    (_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\n    (_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\n    (_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\n    (_dlgVector displayCtrl 1319) ctrlSetText (_digits select 4);\n\n} else {\n    // applicate\n    private _digits = [_fosData, 2] call FUNC(convertToTexturesFOS);\n\n    (_dlgVector displayCtrl 1310) ctrlSetText (_digits select 0);\n    (_dlgVector displayCtrl 1311) ctrlSetText (_digits select 1);\n    (_dlgVector displayCtrl 1312) ctrlSetText (_digits select 2);\n    (_dlgVector displayCtrl 1313) ctrlSetText (_digits select 3);\n    (_dlgVector displayCtrl 1314) ctrlSetText (_digits select 4);\n\n    // nothing\n    (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n    (_dlgVector displayCtrl 1316) ctrlSetText \"\";\n    (_dlgVector displayCtrl 1317) ctrlSetText \"\";\n    (_dlgVector displayCtrl 1318) ctrlSetText \"\";\n    (_dlgVector displayCtrl 1319) ctrlSetText \"\";\n\n};\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showFallOfShot"
      },
      {
        "fileName": "fnc_showHeightDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showHeightDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _heightDistance = call FUNC(getHeightDistance);\n\n// height\nprivate _digits = [_heightDistance select 0] call FUNC(convertToTexturesDistance);\n\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\n\n// non-slope distance\n_digits = [_heightDistance select 1] call FUNC(convertToTexturesDistance);\n\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showHeightDistance"
      },
      {
        "fileName": "fnc_showP1.sqf",
        "content": "/*\n * Author: commy2\n * Shows or hides the 1-P text line.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showP1\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nif (_this select 0) then {\n    (_dlgVector displayCtrl 1321) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\n    (_dlgVector displayCtrl 1322) ctrlSetText QPATHTOF(rsc\\vector_minus.paa);\n    (_dlgVector displayCtrl 1323) ctrlSetText QPATHTOF(rsc\\vector_p.paa);\n    (_dlgVector displayCtrl 1324) ctrlSetText \"\";\n} else {\n    (_dlgVector displayCtrl 1321) ctrlSetText \"\";\n    (_dlgVector displayCtrl 1322) ctrlSetText \"\";\n    (_dlgVector displayCtrl 1323) ctrlSetText \"\";\n    (_dlgVector displayCtrl 1324) ctrlSetText \"\";\n};\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showP1"
      },
      {
        "fileName": "fnc_showRelativeAzimuthDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showRelativeAzimuthDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _azimuthDistance = call FUNC(getRelativeAzimuthDistance);\n\n// relative azimuth\nprivate _digits = [_azimuthDistance select 0] call FUNC(convertToTexturesDegree);\n\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\n\n// relative non-slope distance\n_digits = [_azimuthDistance select 1] call FUNC(convertToTexturesDistance);\n\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showRelativeAzimuthDistance"
      },
      {
        "fileName": "fnc_showRelativeDistance.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showRelativeDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _distance = call FUNC(getRelativeDistance);\n\n// relative slope distance\nprivate _digits = [_distance] call FUNC(convertToTexturesDistance);\n\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\n",
        "functionName": "ace_vector_fnc_showRelativeDistance"
      },
      {
        "fileName": "fnc_showRelativeHeightLength.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showRelativeHeightLength\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nprivate _heightLength = call FUNC(getRelativeHeightLength);\n\n// height\nprivate _digits = [_heightLength select 0] call FUNC(convertToTexturesDistance);\n\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\n\n// length\n_digits = [_heightLength select 1] call FUNC(convertToTexturesDistance);\n\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showRelativeHeightLength"
      },
      {
        "fileName": "fnc_showReticle.sqf",
        "content": "/*\n * Author: commy2\n * Shows or hides the electronic reticle.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_vector_fnc_showReticle\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n((GETUVAR(ACE_dlgVector,displayNull)) displayCtrl 1302) ctrlSetText ([\"\", QPATHTOF(rsc\\vector_crosshair.paa)] select (_this select 0));\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showReticle"
      },
      {
        "fileName": "fnc_showText.sqf",
        "content": "/*\n * Author: commy2\n *\n *\n * Arguments:\n * 0: String <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"5\"] call ace_vector_fnc_showText\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\nprivate _dlgVector = GETUVAR(ACE_dlgVector,displayNull);\n\nswitch (_this select 0) do {\n    case (\"config\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_c.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_g.paa);\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"settings\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_u.paa);\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_5.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"nigt\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_g.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n    };\n\n    case (\"eret\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_r.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n    };\n\n    case (\"on\"): {\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"off\"): {\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"deg\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_3.paa);\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_6.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_0.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_degree.paa);\n    };\n\n    case (\"mil\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_6.paa);\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_4.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_0.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_0.paa);\n    };\n\n    case (\"meter\"): {\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_5.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_minus.paa);\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_u.paa);\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"feet\"): {\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"stor\"): {\n        (_dlgVector displayCtrl 1321) ctrlSetText QPATHTOF(rsc\\vector_5.paa);\n        (_dlgVector displayCtrl 1322) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n        (_dlgVector displayCtrl 1323) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\n        (_dlgVector displayCtrl 1324) ctrlSetText QPATHTOF(rsc\\vector_r.paa);\n    };\n\n    case (\"old_config\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_d.paa);\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_c.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"old_settings\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_d.paa);\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_u.paa);\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"clear_left\"): {\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1317) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1318) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1319) ctrlSetText \"\";\n    };\n\n    case (\"clear_right\"): {\n        (_dlgVector displayCtrl 1310) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1311) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1312) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\n    };\n\n    case (\"clear_stor\"): {\n        (_dlgVector displayCtrl 1321) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1322) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1323) ctrlSetText \"\";\n        (_dlgVector displayCtrl 1324) ctrlSetText \"\";\n    };\n};\n\n[GVAR(illuminate)] call FUNC(illuminate);\n",
        "functionName": "ace_vector_fnc_showText"
      }
    ]
  },
  {
    "component": "vehiclelock",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n//Add Event Handlers\n[QGVAR(setupCustomKey), {_this call FUNC(serverSetupCustomKeyEH)}] call CBA_fnc_addEventHandler;\n[QGVAR(setVehicleLock), {_this call FUNC(setVehicleLockEH)}] call CBA_fnc_addEventHandler;\n\nif (!hasInterface) exitwith {};\n\n[\"ace_settingsInitialized\", {\n    TRACE_1(\"SettingsInitialized eh\",GVAR(LockVehicleInventory));\n\n    if (GVAR(LockVehicleInventory)) then {\n        [\"CAManBase\", \"InventoryOpened\", {_this call FUNC(onOpenInventory);}] call CBA_fnc_addClassEventHandler;\n    };\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addKeyForVehicle.sqf",
        "content": "/*\n * Author: PabstMirror\n * Adds a key to a unit that will open a vehicle\n * Note: has global effects for Unit (will add items to remote unit)\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: custom key (true: custom key (magazine)  -  false: side key (item)) <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [ACE_player, car, true] call ACE_VehicleLock_fnc_addKeyForVehicle\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!params [[\"_unit\", objNull, [objNull]], [\"_veh\", objNull, [objNull]], [\"_useCustom\", false, [false]]]) exitWith {\n    ERROR(\"Input wrong type\");\n};\nTRACE_3(\"params\",_unit,_veh,_useCustom);\n\nif (isNull _unit) exitWith {ERROR(\"null unit\");};\nif (isNull _veh) exitWith {ERROR(\"null vehicle\");};\n\nif (_useCustom) then {\n    private _previousMags = magazinesDetail _unit;\n    _unit addMagazine [\"ACE_key_customKeyMagazine\", 1]; //addMagazine array has global effects\n    private _newMags = (magazinesDetail _unit) - _previousMags;\n    if ((count _newMags) == 0) exitWith {ERROR(\"failed to add magazine (inventory full?)\");};\n    private _keyMagazine = _newMags select 0;\n    TRACE_2(\"setting up key on server\",_veh,_keyMagazine);\n    //Have the server run add the key to the vehicle's key array:\n    [QGVAR(setupCustomKey), [_veh, _keyMagazine]] call CBA_fnc_serverEvent;\n} else {\n    private _keyName = [_veh] call FUNC(getVehicleSideKey);\n    _unit addItem _keyName; //addItem has global effects\n};\n",
        "functionName": "ace_vehiclelock_fnc_addKeyForVehicle"
      },
      {
        "fileName": "fnc_getVehicleSideKey.sqf",
        "content": "/*\n * Author: PabstMirror\n * Returns the side specifc key for a vehicle\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * The vehicle's side key classname <STRING>\n *\n * Example:\n * [tank1] call ACE_VehicleLock_fnc_getVehicleSideKey;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_veh\"];\nTRACE_1(\"params\",_veh);\n\nif (isNull _veh) exitWith {ERROR(\"null vehicle\"); \"error\"};\n\nprivate _vehConfigSide = [_veh, true] call BIS_fnc_objectSide;\nprivate _vehSide = _veh getVariable [QGVAR(lockSide), _vehConfigSide];\n\nprivate _returnValue = \"\";\n\nswitch (_vehSide) do {\ncase (west):       {_returnValue = \"ACE_key_west\"};\ncase (east):       {_returnValue = \"ACE_key_east\"};\ncase (resistance): {_returnValue = \"ACE_key_indp\"};\n    default        {_returnValue = \"ACE_key_civ\"};\n};\n\n_returnValue\n",
        "functionName": "ace_vehiclelock_fnc_getVehicleSideKey"
      },
      {
        "fileName": "fnc_handleVehicleInitPost.sqf",
        "content": "/*\n * Author: PabstMirror\n * For every lockable vehicle, sets the starting lock state to a sane value.\n * Only run if the InitModule is placed.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [car] call ACE_VehicleLock_fnc_handleVehicleInitPost\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!isServer) exitWith {};\n\nparams [\"_vehicle\"];\nTRACE_1(\"params\",_vehicle);\n\n[{\n    //If the module wasn't placed, just exit (needs to be in wait because objectInitEH is before moduleInit)\n    if (GVAR(VehicleStartingLockState) == -1) exitWith {};\n\n    params [\"_vehicle\"];\n\n    if ((_vehicle isKindOf \"Car\") || {_vehicle isKindOf \"Tank\"} || {_vehicle isKindOf \"Helicopter\"}) then {\n        //set lock state (eliminates the ambigious 1-\"Default\" and 3-\"Locked for Player\" states)\n        private _lock = switch (GVAR(VehicleStartingLockState)) do {\n            case (0): { (locked _vehicle) in [2, 3] };\n            case (1): { true };\n            case (2): { false };\n        };\n        if ((_lock && {(locked _vehicle) != 2}) || {!_lock && {(locked _vehicle) != 0}}) then {\n            TRACE_3(\"Setting Lock State\",_lock,(typeOf _vehicle),_vehicle);\n            [QGVAR(SetVehicleLock), [_vehicle, _lock], [_vehicle]] call CBA_fnc_targetEvent;\n        };\n    };\n    //Delay call until mission start (so everyone has the eventHandler's installed)\n}, [_vehicle], 0.25] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_vehiclelock_fnc_handleVehicleInitPost"
      },
      {
        "fileName": "fnc_hasKeyForVehicle.sqf",
        "content": "/*\n * Author: PabstMirror\n * Returns if user has a valid key for the vehicle\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Vehicle <OBJECT>\n *\n * Return Value:\n * unit has key for vehicle <BOOL>\n *\n * Example:\n * [bob, car] call ACE_VehicleLock_fnc_hasKeyForVehicle;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_veh\"];\nTRACE_2(\"params\",_unit,_veh);\n\nif (isNull _unit) exitWith {ERROR(\"null unit\"); false};\nif (isNull _veh) exitWith {ERROR(\"null vehicle\"); false};\n\nprivate _returnValue = false;\n\n//Master can open anything \"no matter what\"\nif (\"ACE_key_master\" in (items _unit)) then {_returnValue = true};\n\n//Check side key\nprivate _sideKeyName = [_veh] call FUNC(getVehicleSideKey);\nif (_sideKeyName in (items _unit)) then {_returnValue = true};\n\n//Check custom keys\nprivate _customKeys = _veh getVariable [QGVAR(customKeys), []];\n{\n    if (_x in (magazinesDetail _unit)) then {_returnValue = true;};\n} forEach _customKeys;\n\n_returnValue\n",
        "functionName": "ace_vehiclelock_fnc_hasKeyForVehicle"
      },
      {
        "fileName": "fnc_lockpick.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles lockpick functionality.  Three different functions:\n * \"canLockpick\": returns BOOL if lockpick is possible\n * \"startLockpick\": starts the process\n * \"finishLockpick\": on completions, opens the lock\n *\n * Arguments:\n * 0: Unit (player) <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: Function Type <OBJECT>\n *\n * Return Value:\n * \"canLockpick\" <BOOL>\n *\n * Example:\n * [ACE_player, ACE_Interaction_Target, 'canLockpick'] call ACE_VehicleLock_fnc_lockpick\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_veh\", \"_funcType\"];\nTRACE_3(\"params\",_unit,_veh,_funcType);\n\nif (isNull _unit) exitWith {ERROR(\"null unit\"); false};\nif (isNull _veh) exitWith {ERROR(\"null vehicle\"); false};\n\n//Exit if vehicle unlocked:\nif ((locked _veh) == 0) exitWith {false};\n\n//need lockpick item\nif (!(\"ACE_key_lockpick\" in (items _unit))) exitWith {false};\n\nprivate _vehLockpickStrenth = _veh getVariable[QGVAR(lockpickStrength), GVAR(DefaultLockpickStrength)];\nif (!(_vehLockpickStrenth isEqualType 0)) exitWith {ERROR(\"ACE_vehicleLock_LockpickStrength invalid\"); false};\n\n//-1 indicates unpickable lock\nif (_vehLockpickStrenth < 0) exitWith {false};\n\n//Condition check for progressBar\nprivate _condition = {\n    params [\"_args\"];\n    _args params [\"_unit\", \"_veh\"];\n    ((_unit distance _veh) < 5) && {(speed _veh) < 0.1}\n};\n\nif (!([[_unit, _veh]] call _condition)) exitWith {false};\n\nprivate _returnValue = _funcType in [\"canLockpick\", \"startLockpick\", \"finishLockpick\"];\nswitch (_funcType) do {\n    case \"canLockpick\": {\n        _returnValue = !([_unit, _veh] call FUNC(hasKeyForVehicle)) && {(locked _veh) in [2, 3]};\n    };\n    case \"startLockpick\": {\n        [_vehLockpickStrenth, [_unit, _veh, \"finishLockpick\"], {(_this select 0) call FUNC(lockpick)}, {}, (localize LSTRING(Action_LockpickInUse)), _condition, [\"isNotInside\", \"isNotSwimming\"]] call EFUNC(common,progressBar);\n    };\n    case \"finishLockpick\": {\n        [QGVAR(setVehicleLock), [_veh, false], [_veh]] call CBA_fnc_targetEvent;\n    };\n    default {\n        ERROR(\"bad function type\");\n    };\n};\n\n_returnValue\n",
        "functionName": "ace_vehiclelock_fnc_lockpick"
      },
      {
        "fileName": "fnc_moduleInit.sqf",
        "content": "/*\n * Author: PabstMirror\n * Function for setup module.  Sets default lockpick strength and default lock state.\n *\n * Arguments:\n * 0: The Module Logic Object <OBJECT>\n * 1: synced objects <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [fromModule] call ACE_VehicleLock_fnc_hasKeyForVehicle;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_syncedUnits\", \"_activated\"];\nTRACE_3(\"params\",_logic,_syncedUnits,_activated);\n\nif (!_activated) exitWith {WARNING(\"Vehicle Lock Init Module - placed but not active\");};\n\n//Set the GVAR for default lockpick strength\n[_logic, QGVAR(DefaultLockpickStrength), \"DefaultLockpickStrength\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(LockVehicleInventory), \"LockVehicleInventory\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(VehicleStartingLockState), \"VehicleStartingLockState\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_vehiclelock_fnc_moduleInit"
      },
      {
        "fileName": "fnc_moduleSync.sqf",
        "content": "/*\n * Author: PabstMirror\n * Function for sync module.  Assigns keys for all synced vehicles to any players that are synced.\n *\n * Arguments:\n * 0: The Module Logic Object <OBJECT>\n * 1: synced objects <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [fromModule] call ACE_VehicleLock_fnc_moduleSync;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (!isServer) exitWith {};\n\nparams [\"_logic\", \"_syncedObjects\", \"_activated\"];\nTRACE_3(\"params\",_logic,_syncedObjects,_activated);\n\nif !(_activated) exitWith {WARNING(\"Vehicle Lock Sync Module - placed but not active\");};\n\n[{\n    params [\"_syncedObjects\"];\n\n    private _listOfVehicles = [];\n    {\n        if ((_x isKindOf \"Car\") || (_x isKindOf \"Tank\") || (_x isKindOf \"Helicopter\")) then {\n            _listOfVehicles pushBack _x;\n        };\n    } forEach _syncedObjects;\n\n    if ((count _listOfVehicles) == 0) exitWith {  //Verbose error for mission makers (only shows on server)\n        [\"ACE_VehicleLock_fnc_moduleSync: no vehicles synced\"] call BIS_fnc_error;\n    };\n\n    {\n        private _unit = _x;\n        if (_unit isKindOf \"CAManBase\") then {\n            {\n                [_unit, _x, true] call FUNC(addKeyForVehicle);\n            } forEach _listOfVehicles;\n        };\n    } forEach _syncedObjects;\n\n    //Wait to add keys until various gear assigns have finished (~5 seconds)\n}, [_syncedObjects], 5, 1] call CBA_fnc_waitAndExecute;\n",
        "functionName": "ace_vehiclelock_fnc_moduleSync"
      },
      {
        "fileName": "fnc_onOpenInventory.sqf",
        "content": "/*\n * Author: PabstMirror\n * Handles the inventory opening.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Container <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, car] call ACE_VehicleLock_fnc_onOpenInventory;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_container\"];\nTRACE_2(\"params\",_unit,_container);\n\n//Only check for player:\nif (_unit != ace_player) exitWith {};\n\nif (GVAR(LockVehicleInventory) && //if setting not enabled\n        {(vehicle ace_player) == ace_player} && //Player dismounted\n        {(_container isKindOf \"Car\") || (_container isKindOf \"Tank\") || (_container isKindOf \"Helicopter\")} && //container is a lockable veh\n        {(locked _container) in [2,3]} && //Vehicle is locked\n        {!([ace_player, _container] call FUNC(hasKeyForVehicle))} //player doesn't have key\n        ) then {\n    //Give feedback that vehicle is locked\n    playSound \"ACE_Sound_Click\";\n\n    //For compatibiltiy with ACRE, wait until the display is open, close it and then reopen the player's own inventory\n    //ref: http://gitlab.idi-systems.com/idi-systems/acre2-public/issues/70\n    [{\n        !isNull (findDisplay 602)\n    },\n    {\n        TRACE_1(\"car display open: closing\", _this);\n        (findDisplay 602) closeDisplay 0;\n        [{\n            TRACE_1(\"Opening Player Inventory\", _this);\n            ACE_player action [\"Gear\", objNull]\n        }, []] call CBA_fnc_execNextFrame;\n    },\n    []] call CBA_fnc_waitUntilAndExecute;\n};\n",
        "functionName": "ace_vehiclelock_fnc_onOpenInventory"
      },
      {
        "fileName": "fnc_serverSetupCustomKeyEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * On the server: Adds a key (magazineDetail name) to approved keys for a vehicle.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Magazine Name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [tank1, \"someMagainze [id xx:yy]\"] call ACE_VehicleLock_fnc_serverSetupCustomKeyEH\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_veh\", \"_key\"];\nTRACE_2(\"params\",_veh,_key);\n\nif (!isServer) exitWith {ERROR(\"only run on server\");};\nif (isNull _veh) exitWith {ERROR(\"null vehicle\");};\nif (_key == \"\") exitWith {ERROR(\"empty key string\");};\n\nprivate _currentKeys = _veh getVariable [QGVAR(customKeys), []];\n_currentKeys pushBack _key;\n_veh setVariable [QGVAR(customKeys), _currentKeys, true];\n",
        "functionName": "ace_vehiclelock_fnc_serverSetupCustomKeyEH"
      },
      {
        "fileName": "fnc_setVehicleLockEH.sqf",
        "content": "/*\n * Author: PabstMirror\n * Sets a vehicle lock state because of a \"ace_vehiclelock_setVehicleLock\" event\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: New lock state <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [tank1, false] call ACE_VehicleLock_fnc_setVehicleLockEH;\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_veh\", \"_isLocked\"];\nTRACE_2(\"params\",_veh,_isLocked);\n\nprivate _lockNumber = [0, 2] select _isLocked;\nTRACE_2(\"Setting Lock State\", _veh, _lockNumber);\n_veh lock _lockNumber;\n",
        "functionName": "ace_vehiclelock_fnc_setVehicleLockEH"
      }
    ]
  },
  {
    "component": "vehicles",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by esteldunedain\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\nGVAR(isSpeedLimiter) = false;\n// Add keybinds\n[\"ACE3 Vehicles\", QGVAR(speedLimiter), localize LSTRING(SpeedLimiter),\n{\n    private _connectedUAV = getConnectedUAV ACE_player;\n    private _uavControll = UAVControl _connectedUAV;\n    if ((_uavControll select 1) == \"DRIVER\") then {\n        if !(_connectedUAV isKindOf \"UGV_01_base_F\") exitWith {false};\n        GVAR(isUAV) = true;\n        [_uavControll select 0, _connectedUAV] call FUNC(speedLimiter);\n        true\n    } else {\n        // Conditions: canInteract\n        if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n        // Conditions: specific\n        if !(ACE_player == driver vehicle ACE_player &&\n        {vehicle ACE_player isKindOf 'Car' ||\n            {vehicle ACE_player isKindOf 'Tank'}}) exitWith {false};\n\n            GVAR(isUAV) = false;\n        // Statement\n        [ACE_player, vehicle ACE_player] call FUNC(speedLimiter);\n        true\n    };\n\n},\n{false},\n[211, [false, false, false]], false] call CBA_fnc_addKeybind; //DELETE Key\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_speedLimiter.sqf",
        "content": "/*\n * Author: commy2\n * Toggle speed limiter for Driver in Vehicle.\n *\n * Arguments:\n * 0: Driver <OBJECT>\n * 1: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, car] call ace_vehicles_fnc_speedLimiter\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_driver\", \"_vehicle\"];\n\nif (GVAR(isSpeedLimiter)) exitWith {\n    [localize LSTRING(Off)] call EFUNC(common,displayTextStructured);\n    playSound \"ACE_Sound_Click\";\n    GVAR(isSpeedLimiter) = false;\n};\n\n[localize LSTRING(On)] call EFUNC(common,displayTextStructured);\nplaySound \"ACE_Sound_Click\";\nGVAR(isSpeedLimiter) = true;\n\nprivate _maxSpeed = speed _vehicle max 5;\n\n[{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_driver\", \"_vehicle\", \"_maxSpeed\"];\n\n    if (GVAR(isUAV)) then {\n        private _uavControll = UAVControl _vehicle;\n        if ((_uavControll select 0) != _driver || _uavControll select 1 != \"DRIVER\") then {\n            GVAR(isSpeedLimiter) = false;\n        };\n    } else {\n        if (_driver != driver _vehicle) then {\n            GVAR(isSpeedLimiter) = false;\n        };\n    };\n\n    if (!GVAR(isSpeedLimiter)) exitWith {\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\n    };\n\n    private _speed = speed _vehicle;\n\n    if (_speed > _maxSpeed) then {\n        _vehicle setVelocity ((velocity _vehicle) vectorMultiply ((_maxSpeed / _speed) - 0.00001));  // fix 1.42-hotfix PhysX libraries applying force in previous direction when turning\n    };\n\n} , 0, [_driver, _vehicle, _maxSpeed]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_vehicles_fnc_speedLimiter"
      },
      {
        "fileName": "fnc_startEngine.sqf",
        "content": "/*\n * Author: commy2\n * Delays engine start of vehicle.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n * 1: Is Engine on <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle player, false] call ace_vehicle_fnc_startEngine\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\", \"_isEngineOn\"];\n\nif (!_isEngineOn || {floor abs speed _vehicle > 0}) exitWith {};\n\n[{\n    params [\"_args\", \"_idPFH\"];\n    _args params [\"_vehicle\", \"_time\", \"_direction\"];\n\n    if (CBA_missionTime > _time) exitWith { [_idPFH] call CBA_fnc_removePerFrameHandler; };\n\n    _vehicle setVelocity [0, 0, 0];\n    _vehicle setVectorDirAndUp _direction;\n\n} , 0, [_vehicle, CBA_missionTime + STARTUP_DELAY, [vectorDir _vehicle, vectorUp _vehicle]]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_vehicles_fnc_startEngine"
      }
    ]
  },
  {
    "component": "viewdistance",
    "files": [
      {
        "fileName": "XEH_clientInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n[\"ace_settingsInitialized\", {\n    // if not enabled, then bugger off.\n    if !(GVAR(enabled)) exitWith {};\n\n    // Limit on load\n    [false] call FUNC(adaptViewDistance);\n\n    // Set the EH which waits for any of the view distance settings to be changed, so that the effect is show immediately\n    [\"ace_settingChanged\",{\n        params [\"_name\"];\n        if ((_name  == QGVAR(viewDistanceOnFoot)) ||\n            (_name  == QGVAR(viewDistanceLandVehicle)) ||\n            (_name  == QGVAR(viewDistanceAirVehicle)) ||\n            (_name  == QGVAR(objectViewDistanceCoeff))) then {\n\n            [true] call FUNC(adaptViewDistance);\n        };\n    }] call CBA_fnc_addEventHandler;\n\n    // Set the EH which waits for a vehicle change to automatically swap between On Foot/In Land Vehicle/In Air Vehicle\n    // Also run when SettingsInitialized runs (not guaranteed)\n    [\"vehicle\",{\n        [false] call FUNC(adaptViewDistance);\n    }] call CBA_fnc_addPlayerEventHandler;\n    [\"ACE_controlledUAV\", {\n        [false] call FUNC(adaptViewDistance);\n    }] call CBA_fnc_addEventHandler;\n    \n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_adaptViewDistance.sqf",
        "content": "/*\n * Author: Winter\n * Sets the player's current view distance according to whether s/he is on foot, in a land vehicle or in an air vehicle.\n *\n * Arguments:\n * 0: Show Prompt <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_viewdistance_fnc_adaptViewDistance\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_showPrompt\"];\n\nif (!GVAR(enabled) || isNull ACE_player) exitWith {};\n\nprivate _vehicle = vehicle ACE_player;\n\nACE_controlledUAV params [\"_uav\"];\nif (!isNull _uav) then {\n    TRACE_1(\"using UAV\",ACE_controlledUAV);\n    _vehicle = _uav;\n};\n\nprivate _landVehicle = _vehicle isKindOf \"LandVehicle\" || {_vehicle isKindOf \"Ship_F\"};\nprivate _airVehicle = _vehicle isKindOf \"Air\";\n\nif (!_landVehicle && !_airVehicle) exitWith {\n    [GVAR(viewDistanceOnFoot), _showPrompt] call FUNC(changeViewDistance);\n};\n\nif (_landVehicle) exitWith {\n    [GVAR(viewDistanceLandVehicle), _showPrompt] call FUNC(changeViewDistance);\n};\n\nif (_airVehicle) exitWith {\n    [GVAR(viewDistanceAirVehicle), _showPrompt] call FUNC(changeViewDistance);\n};\n",
        "functionName": "ace_viewdistance_fnc_adaptViewDistance"
      },
      {
        "fileName": "fnc_changeViewDistance.sqf",
        "content": "/*\n * Author: Winter\n * Sets the player's current view distance according to allowed values.\n *\n * Arguments:\n * 0: View Distance setting INDEX <NUMBER>\n * 1: Show Prompt <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_viewdistance_fnc_changeViewDistance\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_indexRequested\", \"_showPrompt\"];\n\nprivate _newViewDistance = [_indexRequested] call FUNC(returnValue); // changes the setting index into an actual view distance value\nprivate _objectViewDistanceCoeff = [GVAR(objectViewDistanceCoeff)] call FUNC(returnObjectCoeff); // changes the setting index into a coefficient.\nprivate _viewDistanceLimit = GVAR(limitViewDistance); // Grab the limit\n\nTRACE_3(\"Limit\",_newViewDistance,_viewDistanceLimit,_showPrompt);\nsetViewDistance (_newViewDistance min _viewDistanceLimit);\n\nif (_objectViewDistanceCoeff isEqualType 0) then {\n    if (_objectViewDistanceCoeff > 0) then {\n        setObjectViewDistance (_objectViewDistanceCoeff * viewDistance);\n    } else {\n        // Restore correct view distance when changing from FoV Based to Off\n        // Restoring directly inside PFH's self-exit resulted in the need of selecting another option to take effect\n        setObjectViewDistance GVAR(fovBasedPFHminimalViewDistance);\n    };\n} else {\n    if (isNil QGVAR(fovBasedPFHminimalViewDistance)) then {\n        GVAR(fovBasedPFHminimalViewDistance) = getObjectViewDistance select 0; // Minimal view distance holder and PFH isRunning variable\n        [FUNC(setFovBasedOvdPFH), 0, []] call CBA_fnc_addPerFrameHandler;\n    };\n};\n\nif (_showPrompt) then {\n    if (GVAR(objectViewDistanceCoeff) > 0) then {\n        private _text = \"\";\n        // FoV Based or %\n        if (GVAR(objectViewDistanceCoeff) == 6) then {\n            _text = format [\"<t align='center'>%1 %2<br/>Min. %3<br/>Max. %4</t>\", localize LSTRING(objectinfotext), localize LSTRING(object_fovBased), GVAR(fovBasedPFHminimalViewDistance), viewDistance];\n        } else {\n            _text = [\n                format [\"<t align='center'>%1 %2m\", localize LSTRING(invalid), viewDistance],\n                format [\"<t align='center'>%1 %2m\", localize LSTRING(infotext), viewDistance]\n            ] select (_newViewDistance <= _viewDistanceLimit);\n            _text = _text + format [\"<br/><t align='center'>%1 %2%3</t>\", localize LSTRING(objectinfotext), _objectViewDistanceCoeff * 100, \"%\"];\n        };\n        [parseText _text, 2] call EFUNC(common,displayTextStructured);\n    };\n};\n",
        "functionName": "ace_viewdistance_fnc_changeViewDistance"
      },
      {
        "fileName": "fnc_initModule.sqf",
        "content": "/*\n * Author: Winter\n * Initializes the view distance limiter module.\n *\n * Arguments:\n * 0: logic <OBJECT>\n * 1: Synchronised Units <ARRAY>\n * 2: Module Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC; [bob, kevin], true] call ace_viewdistance_fnc_initModule\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif (!_activated) exitWith {\n    WARNING(\"View Distance Limit Module is placed but NOT active.\");\n};\n\n[_logic, QGVAR(enabled),\"moduleViewDistanceEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(limitViewDistance),\"moduleViewDistanceLimit\"] call EFUNC(common,readSettingFromModule);\n\nINFO_1(\"View Distance Limit Module Initialized. Limit set by module: %1\",GVAR(limitViewDistance));\n",
        "functionName": "ace_viewdistance_fnc_initModule"
      },
      {
        "fileName": "fnc_returnObjectCoeff.sqf",
        "content": "/*\n * Author: Winter\n * Returns the object view distance coefficient according to the given index\n *\n * Arguments:\n * 0: Object View Distance setting Index <NUMBER>\n *\n * Return Value:\n * Object View Distance <NUMBER>\n *\n * Example:\n * [2] call ace_viewdistance_fnc_returnObjectCoeff;\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_index\"];\n\nswitch (_index) do {\n    case 0: {0.00}; // Off\n    case 1: {0.20}; // Very Low\n    case 2: {0.40}; // Low\n    case 3: {0.60}; // Medium\n    case 4: {0.80}; // High\n    case 5: {1.00}; // Very High\n    case 6: {\"fov\"}; // FoV Based\n    default {0.50}; // something broke if this returns\n};\n",
        "functionName": "ace_viewdistance_fnc_returnObjectCoeff"
      },
      {
        "fileName": "fnc_returnValue.sqf",
        "content": "/*\n * Author: Winter\n * Returns the view distance value according to the given index.\n *\n * Arguments:\n * 0: View Distance Index <NUMBER>\n *\n * Return Value:\n * View Distance <NUMBER>\n *\n * Example:\n * [2] call ace_viewdistance_fnc_returnViewDistanceValue\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_index\"];\n\nswitch (_index) do {\n    case 0: {viewDistance}; // Video Settings option\n    case 1: {500};\n    case 2: {1000};\n    case 3: {1500};\n    case 4: {2000};\n    case 5: {2500};\n    case 6: {3000};\n    case 7: {3500};\n    case 8: {4000};\n    case 9: {5000};\n    case 10: {6000};\n    case 11: {7000};\n    case 12: {8000};\n    case 13: {9000};\n    case 14: {10000};\n    default {1000};\n};\n",
        "functionName": "ace_viewdistance_fnc_returnValue"
      },
      {
        "fileName": "fnc_setFovBasedOvdPFH.sqf",
        "content": "/*\n * Author: Jonpas\n * Sets Object View Distance dynamically based on current Field of View, between Object View Distance (minimal value) and View Distance (maximum value) set before this PFH starts.\n *\n * Arguments:\n * 0: PFH Arguments <ARRAY>\n * 1: PFH Handle <NUMBER>\n *\n * Return Value:\n * PFH Handle <NUMBER>\n *\n * Example:\n * [] call ace_viewdistance_fnc_setFovBasedOvdPFH\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"\", \"_idPFH\"];\n\n// Remove PFH and set Object View Distance back to what it was before\nif (GVAR(objectViewDistanceCoeff) < 6) exitWith {\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\n    GVAR(fovBasedPFHminimalViewDistance) = nil;\n};\n\nprivate _zoom = (call CBA_fnc_getFov) select 1;\n\nif (_zoom > VD_ZOOM_NORMAL) then {\n    // Dynamically set Object View Distance based on player's Zoom Level and View Distance\n    if ((vehicle ACE_player) isKindOf \"Air\") then {\n        setObjectViewDistance ((_zoom / VD_ZOOM_DIVISION_AIR * (viewDistance - GVAR(fovBasedPFHminimalViewDistance))) + GVAR(fovBasedPFHminimalViewDistance));\n    } else {\n        setObjectViewDistance ((_zoom / VD_ZOOM_DIVISION * (viewDistance - GVAR(fovBasedPFHminimalViewDistance))) + GVAR(fovBasedPFHminimalViewDistance));\n    };\n} else {\n    if ((vehicle ACE_player) isKindOf \"Air\") then {\n        setObjectViewDistance (GVAR(fovBasedPFHminimalViewDistance) + viewDistance / 10);\n    } else {\n        setObjectViewDistance GVAR(fovBasedPFHminimalViewDistance);\n    };\n};\nTRACE_2(\"FoV Based\",getObjectViewDistance select 0,_zoom);\n",
        "functionName": "ace_viewdistance_fnc_setFovBasedOvdPFH"
      }
    ]
  },
  {
    "component": "weaponselect",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "// by esteldunedain\n#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\n// add keybinds\n[\"ACE3 Weapons\", QGVAR(SelectPistolNew), localize LSTRING(SelectPistol), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player] call CBA_fnc_canUseWeapon) exitWith {false};\n\n    // Statement\n    [ACE_player, handgunWeapon ACE_player] call FUNC(selectWeaponMode);\n    false\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 1 Key)\n\n[\"ACE3 Weapons\", QGVAR(SelectRifleNew), localize LSTRING(SelectRifle), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player] call CBA_fnc_canUseWeapon) exitWith {false};\n\n    // Statement\n    [ACE_player, primaryWeapon ACE_player] call FUNC(selectWeaponMode);\n    false\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 2 Key)\n\n[\"ACE3 Weapons\", QGVAR(SelectRifleMuzzleNew), localize LSTRING(SelectRifleMuzzle), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player] call CBA_fnc_canUseWeapon) exitWith {false};\n\n    // Statement\n    [ACE_player, primaryWeapon ACE_player] call FUNC(selectWeaponMuzzle);\n    false\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 3 Key)\n\n[\"ACE3 Weapons\", QGVAR(SelectLauncherNew), localize LSTRING(SelectLauncher), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player] call CBA_fnc_canUseWeapon) exitWith {false};\n\n    // Statement\n    [ACE_player, secondaryWeapon ACE_player] call FUNC(selectWeaponMode);\n    false\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 4 Key)\n\n[\"ACE3 Weapons\", QGVAR(SelectBinocularNew), localize LSTRING(SelectBinocular), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player] call CBA_fnc_canUseWeapon) exitWith {false};\n\n    // Statement\n    [ACE_player, binocular ACE_player] call FUNC(selectWeaponMode);\n    false\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 5 Key)\n\n[\"ACE3 Weapons\", QGVAR(SelectGrenadeFrag), localize LSTRING(SelectGrenadeFrag), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Don't change mode or show hint if advanced throwing is active\n    if (ACE_player getVariable [QEGVAR(advanced_throwing,inHand), false]) exitWith {false};\n\n    // Statement\n    [ACE_player, 1] call FUNC(selectNextGrenade);\n    true\n},\n{false},\n[7, [false, false, false]], false] call CBA_fnc_addKeybind; //6 Key\n\n[\"ACE3 Weapons\", QGVAR(SelectGrenadeOther), localize LSTRING(SelectGrenadeOther), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Don't change mode or show hint if advanced throwing is active\n    if (ACE_player getVariable [QEGVAR(advanced_throwing,inHand), false]) exitWith {false};\n\n    // Statement\n    [ACE_player, 2] call FUNC(selectNextGrenade);\n    true\n},\n{false},\n[8, [false, false, false]], false] call CBA_fnc_addKeybind; //7 Key\n\n[\"ACE3 Weapons\", QGVAR(HolsterWeapon), localize LSTRING(HolsterWeapon), {\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, [\"isNotInside\", \"isNotEscorting\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !([ACE_player] call CBA_fnc_canUseWeapon) exitWith {false};\n\n    // Statement\n    if ((currentWeapon ACE_player) != \"\") then {\n        [ACE_player] call FUNC(putWeaponAway);\n    } else {\n        private _weapon = switch (true) do {\n            case ((primaryWeapon ACE_player) != \"\"): {primaryWeapon ACE_player};\n            case ((handgunWeapon ACE_player) != \"\"): {handgunWeapon ACE_player};\n            case ((secondaryWeapon ACE_player) != \"\"): {secondaryWeapon ACE_player};\n            default {\"\"};\n        };\n        if (_weapon != \"\") then {ACE_player selectWeapon _weapon};\n    };\n    true\n},\n{false},\n[11, [false, false, false]], false] call CBA_fnc_addKeybind; //0 Key\n\n[\"ACE3 Vehicles\", QGVAR(EngineOn), localize LSTRING(EngineOn), {\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !((ACE_player != vehicle ACE_player) && {ACE_player == driver vehicle ACE_player} && {!isEngineOn vehicle ACE_player}) exitWith {false};\n\n    // Statement\n    vehicle ACE_player engineOn true;\n    true\n},\n{false},\n[3, [false, false, false]], false] call CBA_fnc_addKeybind; //2 Key\n\n[\"ACE3 Vehicles\", QGVAR(EngineOff), localize LSTRING(EngineOff), {\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(ACE_player != vehicle ACE_player && {ACE_player == driver vehicle ACE_player} && {isEngineOn vehicle ACE_player}) exitWith {false};\n\n    // Statement\n    vehicle ACE_player engineOn false;\n    true\n},\n{false},\n[2, [false, false, false]], false] call CBA_fnc_addKeybind; //1 Key\n\n[\"ACE3 Vehicles\", QGVAR(SelectMainGunNew), localize LSTRING(SelectMainGun), {\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(ACE_player != vehicle ACE_player) exitWith {false};\n\n    // Statement\n    [ACE_player, vehicle ACE_player, 0] call FUNC(selectWeaponVehicle);\n    true\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 3 Key)\n\n[\"ACE3 Vehicles\", QGVAR(SelectMachineGunNew), localize LSTRING(SelectMachineGun), {\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(ACE_player != vehicle ACE_player) exitWith {false};\n\n    // Statement\n    [ACE_player, vehicle ACE_player, 1] call FUNC(selectWeaponVehicle);\n    true\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 4 Key)\n\n[\"ACE3 Vehicles\", QGVAR(SelectMissilesNew), localize LSTRING(SelectMissiles), {\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(ACE_player != vehicle ACE_player) exitWith {false};\n\n    // Statement\n    [ACE_player, vehicle ACE_player, 2] call FUNC(selectWeaponVehicle);\n    true\n},\n{false},\n[0, [false, false, false]], false] call CBA_fnc_addKeybind; //Unbound (was 5 Key)\n\n[\"ACE3 Vehicles\", QGVAR(FireSmokeLauncher), localize LSTRING(FireSmokeLauncher), {\n    // Conditions: canInteract\n    if !([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(ACE_player != vehicle ACE_player && {ACE_player == commander vehicle ACE_player}) exitWith {false};\n\n    // Statement\n    [vehicle ACE_player] call FUNC(fireSmokeLauncher);\n    true\n},\n{false},\n[10, [false, false, false]], false] call CBA_fnc_addKeybind; //9 Key\n\n[\"ACE3 Vehicles\", QGVAR(CollisionLights), localize LSTRING(CollisionLights), {\n    // Conditions: canInteract\n    if (!([ACE_player, vehicle ACE_player, []] call EFUNC(common,canInteractWith))) exitWith {false};\n    // Conditions: specific\n    if ((ACE_player isEqualTo (vehicle ACE_player)) || {ACE_player != (driver (vehicle ACE_player))}) exitWith {false};\n    \n    // Statement\n    (vehicle ACE_player) setCollisionLight !(isCollisionLightOn (vehicle ACE_player));\n    true\n},\n{false},\n[0, [false, false, false]]] call CBA_fnc_addKeybind;\n\n// Register fire event handler\n[\"ace_firedPlayer\", DFUNC(throwGrenade)] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// collect frag and other grenades separately\nGVAR(GrenadesAll) = [];\nGVAR(GrenadesFrag) = [];\nGVAR(GrenadesNonFrag) = [];\n\n{\n    private _magazines = getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> _x >> \"magazines\");\n\n    GVAR(GrenadesAll) append _magazines;\n\n    {\n        private _ammo = getText (configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\n        private _explosive = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"explosive\");\n\n        ([GVAR(GrenadesFrag), GVAR(GrenadesNonFrag)] select (_explosive == 0)) pushBack _x;\n        false\n    } count _magazines;\n    false\n} count getArray (configFile >> \"CfgWeapons\" >> \"Throw\" >> \"muzzles\");\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_displayGrenadeTypeAndNumber.sqf",
        "content": "/*\n * Author: esteldunedain, commy2\n * Display a grenade type and quantity.\n *\n * Arguments:\n * 0: grenade magazine class <STRING>\n * 1: number of grenades <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [currentMagazine player, 3] call ace_weaponselect_fnc_displayGrenadeTypeAndNumber\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif !(GVAR(DisplayText)) exitWith {};\n\nparams [\"_magazine\", \"_numberofGrenades\"];\n\nprivate _color = [[1, 0, 0], [1, 1, 1]] select (_numberofGrenades > 0);\nprivate _name = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"displayNameShort\");\n\nprivate _text = [format [\"%1  x%2\", _name, _numberofGrenades], _color] call EFUNC(common,stringToColoredText);\nprivate _picture = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"picture\");\n\n[_text, _picture] call EFUNC(common,displayTextPicture);\n",
        "functionName": "ace_weaponselect_fnc_displayGrenadeTypeAndNumber"
      },
      {
        "fileName": "fnc_fireSmokeLauncher.sqf",
        "content": "/*\n * Author: commy2\n * Fire Vehicle Smoke Launcher.\n *\n * Arguments:\n * 0: Vehicle <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [vehicle player] call ace_weaponselect_fnc_fireSmokeLauncher\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_vehicle\"];\n\nprivate _turret = _vehicle call EFUNC(common,getTurretCommander);\nprivate _weapons = _vehicle weaponsTurret _turret;\n\nif (\n    count _weapons > 1\n    || {count _weapons > 0 && {!(_weapons select 0 in [\"SmokeLauncher\", \"BWA3_SmokeLauncher\"])}}  // @todo somebody might use custom smoke launcher weapons aswell, maybe ...\n) then {\n    //This doesn't work reliably for vehilces with additional weapons for the commander. Select smoke launcher instead.\n\n    // avoid infinite loop\n    if !(\"SmokeLauncher\" in _weapons) exitWith {};\n\n    private _index = 0;\n\n    while {\n        _vehicle currentWeaponTurret _turret != \"SmokeLauncher\"\n    } do {\n        [commander _vehicle, _vehicle, _index] call FUNC(selectWeaponVehicle);\n        _index = _index + 1;\n    };\n\n} else {\n    // fire away!\n\n    private _logic = createGroup sideLogic createUnit [\"Logic\", [0,0,0], [], 0, \"NONE\"];\n\n    _logic action [\"useWeapon\", _vehicle, commander _vehicle, 0];\n\n    deleteVehicle _logic;\n};\n",
        "functionName": "ace_weaponselect_fnc_fireSmokeLauncher"
      },
      {
        "fileName": "fnc_playChangeFiremodeSound.sqf",
        "content": "/*\n * Author: commy2\n * Play weapon firemode change sound.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, currentWeapon player] call ace_weaponselect_fnc_playChangeFiremodeSound\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\n\nprivate _sound = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"changeFiremodeSound\");\n\nif (_sound isEqualTo []) exitWith {};\n\n// get position where to play the sound (position of the weapon)\nprivate _position = AGLToASL (_unit modelToWorldVisual (_unit selectionPosition \"RightHand\"));\n\n_sound params [\"_filename\", [\"_volume\", 1], [\"_soundPitch\", 1], [\"_distance\", 0]];\n\nif (_filename == \"\") exitWith {};\n\n// add file extension .wss as default\nif !(toLower (_filename select [count _filename - 4]) in [\".wav\", \".ogg\", \".wss\"]) then {\n    _filename = format [\"%1.wss\", _filename];\n};\n\nplaySound3D [_filename, objNull, false, _position, _volume, _soundPitch, _distance];\n",
        "functionName": "ace_weaponselect_fnc_playChangeFiremodeSound"
      },
      {
        "fileName": "fnc_putWeaponAway.sqf",
        "content": "/*\n * Author: commy2\n * The unit will put its current weapon away.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player] call ace_weaponselect_fnc_putWeaponAway\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\"];\n\n_unit call EFUNC(common,fixLoweredRifleAnimation);\n\n_unit action [\"SwitchWeapon\", _unit, _unit, 299];\n",
        "functionName": "ace_weaponselect_fnc_putWeaponAway"
      },
      {
        "fileName": "fnc_selectNextGrenade.sqf",
        "content": "/*\n * Author: commy2\n * Select the next grenade.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Grenade type [0: all, 1: frags, 2: non-frags] (default: 0) <NUMBER>\n *\n * Return Value:\n * Selecting successful? <BOOL>\n *\n * Example:\n * [player] call ace_weaponselect_fnc_selectNextGrenade\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", [\"_type\", 0]];\n\n// get currently selected grenade\nprivate _currentGrenade = currentThrowable _unit;\n\n// get correct array format if no grenade is selected\nif (_currentGrenade isEqualTo []) then {\n    _currentGrenade = [\"\", \"\"];\n};\n\n_currentGrenade = _currentGrenade select 0;\n\n// get available magazines for that unit\nprivate _magazines = magazines _unit;\n\nprivate _grenades = [];\n\n{\n    if (_x in _magazines) then {\n        _grenades pushBack _x;\n    };\n    false\n} count ([GVAR(GrenadesAll), GVAR(GrenadesFrag), GVAR(GrenadesNonFrag)] select _type);\n\n// abort if no grenades are available\nif (_grenades isEqualTo []) exitWith {false};\n\n// get next grenade muzzle\nprivate _nextGrenadeIndex = (_grenades find _currentGrenade) + 1;\n\n// roll over if the last grenade was selected\nif (_nextGrenadeIndex >= count _grenades) then {\n    _nextGrenadeIndex = 0;\n};\n\nprivate _nextGrenade = _grenades select _nextGrenadeIndex;\n\n// abort if the same grenade would be selected\nif (_currentGrenade == _nextGrenade) exitWith {false};\n\n// current best method to select a grenade: remove all grenades except the one you want to select, then add them back\nprivate _uniformGrenades =  uniformItems  _unit select {_x in GVAR(GrenadesAll) && {_x != _nextGrenade}};\nprivate _vestGrenades =     vestItems     _unit select {_x in GVAR(GrenadesAll) && {_x != _nextGrenade}};\nprivate _backpackGrenades = backpackItems _unit select {_x in GVAR(GrenadesAll) && {_x != _nextGrenade}};\n\n// remove all grenades except those we are switching to --> this breaks the selector\n{_unit removeItemFromUniform  _x; false} count _uniformGrenades;\n{_unit removeItemFromVest     _x; false} count _vestGrenades;\n{_unit removeItemFromBackpack _x; false} count _backpackGrenades;\n\n// readd grenades\n{_unit addItemToUniform  _x; false} count _uniformGrenades;\n{_unit addItemToVest     _x; false} count _vestGrenades;\n{_unit addItemToBackpack _x; false} count _backpackGrenades;\n\n[_nextGrenade, {_x == _nextGrenade} count _magazines] call FUNC(displayGrenadeTypeAndNumber);\n\ntrue\n",
        "functionName": "ace_weaponselect_fnc_selectNextGrenade"
      },
      {
        "fileName": "fnc_selectWeaponMode.sqf",
        "content": "/*\n * Author: commy2\n * The player will select the specified weapon or will change to the next firing mode if the weapon was already selected.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, currentWeapon player] call ace_weaponselect_fnc_selectWeaponMode\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\n\nif (_weapon == \"\") exitWith {};\n\nif (currentWeapon _unit != _weapon) exitWith {\n    _unit selectWeapon _weapon;\n};\n\n// unlock safety\nif (_weapon in (_unit getVariable [QEGVAR(safemode,safedWeapons), []])) exitWith {\n    [_unit, _weapon, _weapon] call EFUNC(safemode,unlockSafety);\n};\n\nprivate _muzzles = [_weapon] call EFUNC(common,getWeaponMuzzles);\nprivate _modes = [_weapon] call EFUNC(common,getWeaponModes);\n\nprivate _index = (_modes find currentWeaponMode _unit) + 1;\n\nif (_index > count _modes - 1) then {_index = 0};\n\nprivate _muzzle = _muzzles select 0;\nprivate _mode = _modes select _index;\n\n_index = 0;\n\nwhile {\n    _index < 299 && {currentMuzzle _unit != _muzzle || {currentWeaponMode _unit != _mode}}\n} do {\n    _unit action [\"SwitchWeapon\", _unit, _unit, _index];\n    _index = _index + 1;\n};\n\n// play fire mode selector sound\n[_unit, _weapon] call FUNC(playChangeFiremodeSound);\n",
        "functionName": "ace_weaponselect_fnc_selectWeaponMode"
      },
      {
        "fileName": "fnc_selectWeaponMuzzle.sqf",
        "content": "/*\n * Author: commy2\n * The player will select the specified weapon and change to the first additional muzzle. E.g. the grenade launcher of a assault rifle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Weapon <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, currentWeapon player] call ace_weaponselect_fnc_selectWeaponMuzzle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_weapon\"];\n\nif (_weapon == \"\") exitWith {};\n\nprivate _muzzles = _weapon call EFUNC(common,getWeaponMuzzles);\n\nif (currentWeapon _unit != _weapon) exitWith {\n    if (count _muzzles > 1) then {\n\n        // unlock safety\n        /*if (_weapon in (_unit getVariable [QEGVAR(safemode,safedWeapons), []])) exitWith {\n            [_unit, _weapon, _muzzles select 1] call EFUNC(safemode,unlockSafety);\n        };*/\n\n        _unit selectWeapon (_muzzles select 1);\n    };\n};\n\nprivate _index = (_muzzles find currentMuzzle _unit) + 1;\n\nif (_index > count _muzzles - 1) then {_index = 1};\n\nprivate _muzzle = _muzzles select _index;\n\n_index = 0;\nwhile {\n    _index < 299 && {currentMuzzle _unit != _muzzle}\n} do {\n    _unit action [\"SwitchWeapon\", _unit, _unit, _index];\n    _index = _index + 1;\n};\n",
        "functionName": "ace_weaponselect_fnc_selectWeaponMuzzle"
      },
      {
        "fileName": "fnc_selectWeaponVehicle.sqf",
        "content": "/*\n * Author: commy2\n * Select weapon for unit in vehicle.\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Vehicle <OBJECT>\n * 2: Weapon index <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, vehicle player, 1] call ace_weaponselect_fnc_selectWeaponVehicle\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_vehicle\", \"_index\"];\n\nprivate _turret = _unit call EFUNC(common,getTurretIndex);\n\nif (_turret isEqualTo [] && {_unit == driver _vehicle}) then {\n    private _weapons = weapons _vehicle;\n\n    if (_index > count _weapons - 1) exitWith {};\n\n    private _weapon = _weapons select _index;\n\n    _index = 0;\n\n    while {\n        _index < 299 && {currentWeapon _vehicle != _weapon}\n    } do {\n        _unit action [\"SwitchWeapon\", _vehicle, _unit, _index];\n        _index = _index + 1;\n    };\n} else {\n    private _weapons = _vehicle weaponsTurret _turret;\n\n    if (_index > count _weapons - 1) exitWith {};\n\n    private _weapon = _weapons select _index;\n\n    _index = 0;\n\n    while {\n        _index < 299 && {_vehicle currentWeaponTurret _turret != _weapon}\n    } do {\n        _unit action [\"SwitchWeapon\", _vehicle, _unit, _index];\n        _index = _index + 1;\n    };\n};\n",
        "functionName": "ace_weaponselect_fnc_selectWeaponVehicle"
      },
      {
        "fileName": "fnc_throwGrenade.sqf",
        "content": "/*\n * Author: commy2\n * Display Grenade information on grenade throw. Called from the unified fired EH only for the local player.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile] call ace_weaponselect_fnc_throwGrenade\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nif (_weapon != \"Throw\") exitWith {};\n\nprivate _count = ({_x == _magazine} count uniformItems _unit) + ({_x == _magazine} count vestItems _unit) + ({_x == _magazine} count backpackItems _unit);\n\n[_magazine, _count] call FUNC(displayGrenadeTypeAndNumber);\n\nif (_count == 0) then {\n    if (GVAR(CurrentGrenadeMuzzleIsFrag)) then {GVAR(CurrentGrenadeMuzzleFrag) = \"\"} else {GVAR(CurrentGrenadeMuzzleOther) = \"\"};\n};\n",
        "functionName": "ace_weaponselect_fnc_throwGrenade"
      }
    ]
  },
  {
    "component": "weather",
    "files": [
      {
        "fileName": "init3DEN.sqf",
        "content": "// point of this file is to disable \"auto-weather\" by default\n// we want this, because it breaks weather commands we use in this component\n#include \"script_component.hpp\"\n\n// cannot create checkboxes which have the default value \"true\"\n// 3den uses inverted checkboxes instead, but those only change in appearence\n// we have to auto set these settings manually - on mission creation\nadd3DENEventHandler [\"onMissionNew\", {\n    set3DENMissionAttributes [\n        [\"Intel\", \"IntelWavesIsForced\", true],\n        [\"Intel\", \"IntelWindIsForced\", true]\n    ];\n}];\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nGVAR(WindInfo) = false;\n[\"ACE3 Common\", QGVAR(WindInfoKey), localize LSTRING(WindInfoKeyToggle),\n{\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n\n    // Statement\n    [] call FUNC(displayWindInfo);\n},\n{false},\n[37, [true, false, false]], false, 0] call CBA_fnc_addKeybind; // (SHIFT + K)\n\n[\"ACE3 Common\", QGVAR(WindInfoKey_hold), localize LSTRING(WindInfoKeyHold),\n{\n    // Conditions: canInteract\n    if !([ACE_player, ACE_player, []] call EFUNC(common,canInteractWith)) exitWith {false};\n\n    // Statement\n    [] call FUNC(displayWindInfo);\n},\n{\n    GVAR(WindInfo) = false;\n    ([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\", 2];\n},\n[0, [false, false, false]], false, 0] call CBA_fnc_addKeybind; // (empty default key)\n"
      },
      {
        "fileName": "XEH_postServerInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_settingsInitialized\", {\n    if (!GVAR(enabled)) exitWith {};\n\n    GVAR(temperatureShift) = random [-SD_TO_MIN_MAX(4), 0, SD_TO_MIN_MAX(4)]; // Gauss(0, 4)\n    GVAR(badWeatherShift)  = random [-SD_TO_MIN_MAX(2) + 4, 4, 4 + SD_TO_MIN_MAX(2)]; // Gauss(4, 2)\n    GVAR(humidityShift)    = random [-SD_TO_MIN_MAX(0.065), 0, SD_TO_MIN_MAX(0.065)]; // Gauss(0, 0.065)\n\n    if (GVAR(windSimulation)) then {\n        call FUNC(initWind);\n        [FUNC(updateWind), 1] call CBA_fnc_addPerFrameHandler;\n    };\n    [FUNC(updateWeather), GVAR(updateInterval)] call CBA_fnc_addPerFrameHandler;\n\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "//#define DEBUG_MODE_FULL\n#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\n// Make sure this data is read before client/server postInit\ncall FUNC(getMapData);\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_calculateAirDensity.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the air density\n *\n * Arguments:\n * 0: temperature - degrees celsius <NUMBER>\n * 1: pressure - hPa <NUMBER>\n * 2: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\n *\n * Return Value:\n * density of air - kg * m^(-3) <NUMBER>\n *\n * Example:\n * [0, 1020, 0.5] call ace_weather_fnc_calculateAirDensity\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_temperature\", \"_pressure\", \"_relativeHumidity\"];\n\n_pressure = _pressure * 100; // hPa to Pa\n\nif (_relativeHumidity > 0) then {\n    // Saturation vapor pressure calculated according to: http://wahiduddin.net/calc/density_algorithms.htm\n    // 610.78 gives pressure in Pa - https://en.wikipedia.org/wiki/Density_of_air\n    private _pSat = 610.78 * 10 ^ ((7.5 * _temperature) / (_temperature + 237.3));\n    private _vaporPressure = _relativeHumidity * _pSat;\n    private _partialPressure = _pressure - _vaporPressure;\n\n    (_partialPressure * DRY_AIR_MOLAR_MASS + _vaporPressure * WATER_VAPOR_MOLAR_MASS) / (UNIVERSAL_GAS_CONSTANT * KELVIN(_temperature))\n} else {\n    _pressure / (SPECIFIC_GAS_CONSTANT_DRY_AIR * KELVIN(_temperature))\n};\n",
        "functionName": "ace_weather_fnc_calculateAirDensity"
      },
      {
        "fileName": "fnc_calculateBarometricPressure.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the barometric pressure based on altitude and weather\n *\n * Arguments:\n * altitude - meters <NUMBER>\n *\n * Return Value:\n * barometric pressure - hPA <NUMBER>\n *\n * Example:\n * 0 call ace_weather_fnc_calculateBarometricPressure\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n((1013.25 - 10 * GVAR(currentOvercast)) * (1 - (0.0065 * (EGVAR(common,mapAltitude) + _this)) / (KELVIN(GVAR(currentTemperature)) + 0.0065 * EGVAR(common,mapAltitude))) ^ 5.255754495);\n",
        "functionName": "ace_weather_fnc_calculateBarometricPressure"
      },
      {
        "fileName": "fnc_calculateDensityAltitude.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates density altitude for a given air density\n *\n * Arguments:\n * density of air - kg * m^(-3) <NUMBER>\n *\n * Return Value:\n * density altitude - m <NUMBER>\n *\n * Example:\n * 1.225 call ace_weather_fnc_calculateDensityAltitude\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Source: http://wahiduddin.net/calc/density_altitude.htm\n\n((44.3308 - 42.2665 * _this ^ 0.2349692456) * 1000)\n",
        "functionName": "ace_weather_fnc_calculateDensityAltitude"
      },
      {
        "fileName": "fnc_calculateDewPoint.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates dew point based on temperature and relative humidity\n *\n * Arguments:\n * 0: temperature - degrees celsius <NUMBER>\n * 1: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\n *\n * Return Value:\n * dew point <NUMBER>\n *\n * Example:\n * [32, 0.4] call ace_weather_fnc_calculateDewPoint\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __b 17.67\n#define __c 243.5\n\nparams [\"_t\", \"_rh\"];\n\nif (_rh == 0) exitWith { CELSIUS(0) };\n\n// Source: https://en.wikipedia.org/wiki/Dew_point\n\nprivate _gamma = ln(_rh) + (__b * _t) / (__c + _t);\n\n(__c * _gamma) / (__b - _gamma)\n",
        "functionName": "ace_weather_fnc_calculateDewPoint"
      },
      {
        "fileName": "fnc_calculateHeatIndex.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates heat index based on temperature and relative humidity\n *\n * Arguments:\n * 0: temperature - degrees celsius <NUMBER>\n * 1: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\n *\n * Return Value:\n * heat index <NUMBER>\n *\n * Example:\n * [36, 0.75] call ace_weather_fnc_calculateHeatIndex\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __C1 0.363445176\n#define __C2 0.988622465\n#define __C3 4.777114035\n#define __C4 -0.114037667\n#define __C5 -0.000850208\n#define __C6 -0.020716198\n#define __C7 0.000687678\n#define __C8  0.000274954\n\nparams [\"_t\", \"_rh\"];\n\n// Source: https://en.wikipedia.org/wiki/Heat_index\n\n_t = TO_FAHRENHEIT(_t);\n_rh = _rh * 100; // relative humidity in %\n\nTO_CELSIUS(__C1 + __C2 * _t + __C3 * _rh + __C4 * _t * _rh + __C5 * _t^2 + __C6 * _rh^2 + __C7 * _t^2 * _rh + __C8 * _t * _rh^2)\n",
        "functionName": "ace_weather_fnc_calculateHeatIndex"
      },
      {
        "fileName": "fnc_calculateRoughnessLength.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the terrain roughness length at a given world position\n *\n * Arguments:\n * world position <posASL>\n *\n * Return Value:\n * roughness length <NUMBER>\n *\n * Example:\n * (getPosASL player) call ace_weather_fnc_calculateRoughnessLength\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Source: http://es.ucsc.edu/~jnoble/wind/extrap/index.html\n#define ROUGHNESS_LENGTHS [0.0002, 0.0005, 0.0024, 0.03, 0.055, 0.1, 0.2, 0.4, 0.8, 1.6]\n\nprivate _windSource = _this vectorDiff ((vectorNormalized wind) vectorMultiply 25);\n\nprivate _nearBuildings = count (_windSource nearObjects [\"Building\", 50]);\nprivate _isWater = surfaceIsWater _windSource;\n\nif (_nearBuildings == 0 && _isWater) exitWith {\n    0.0005\n};\n\nif (_nearBuildings >= 10) exitWith {\n    1.6\n};\n\nROUGHNESS_LENGTHS select (2 + (_nearBuildings min 6))\n",
        "functionName": "ace_weather_fnc_calculateRoughnessLength"
      },
      {
        "fileName": "fnc_calculateSpeedOfSound.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the speed of sound for a given temperature\n *\n * Arguments:\n * temperature - degrees celsius <NUMBER>\n *\n * Return Value:\n * speed of sound - m/s <NUMBER>\n *\n * Example:\n * 0 call ace_weather_fnc_calculateSpeedOfSound\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(331.3 * sqrt(1 + (_this / 273.15)))\n",
        "functionName": "ace_weather_fnc_calculateSpeedOfSound"
      },
      {
        "fileName": "fnc_calculateTemperatureAtHeight.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the temperature based on altitude and weather\n *\n * Arguments:\n * height - meters <NUMBER>\n *\n * Return Value:\n * temperature - degrees celsius <NUMBER>\n *\n * Example:\n * 500 call ace_weather_fnc_calculateTemperatureAtHeight\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n(GVAR(currentTemperature) - 0.0065 * _this)\n",
        "functionName": "ace_weather_fnc_calculateTemperatureAtHeight"
      },
      {
        "fileName": "fnc_calculateWetBulb.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates wet bulb based on temperature and relative humidity\n *\n * Arguments:\n * 0: temperature - degrees celsius <NUMBER>\n * 1: pressure - hPa <NUMBER>\n * 2: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\n *\n * Return Value:\n * wet bulb <NUMBER>\n *\n * Example:\n * [0, 1020, 0.5] call ace_weather_fnc_calculateWetBulb\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_temperature\", \"_pressure\", \"_relativeHumidity\"];\n\n// Source: http://cosmoquest.org/forum/showthread.php?155366-Calculating-Wet-Bulb-Temperature-from-RH-amp-Dry-Bulb\nprivate _es = 6.112 * exp((17.67 * _temperature) / (_temperature + 243.5));\nprivate _e = _es * _relativeHumidity;\nprivate _eDiff = _es - _e;\nprivate _eGuessPrev = _es;\nprivate _cTempDelta = 3.3145;\nprivate _twGuess = _temperature;\n\nfor \"_j\" from 1 to 50 do {\n    _twGuess = _twGuess - _cTempDelta;\n    private _eguess = 6.112 * exp((17.67 * _twGuess) / (_twGuess + 243.5));\n    _eguess = _eguess - (_pressure * (_temperature - _twGuess) * 0.00066 * (1 + (0.00115 * _twGuess)));\n    _eDiff = _eguess - _e;\n    if (abs(_eDiff) <= 0.001) exitWith {};\n    _cTempDelta = _eDiff / ((_eguessprev - _eguess) / _cTempDelta);\n    _eguessprev = _eguess;\n};\n\n_twGuess\n",
        "functionName": "ace_weather_fnc_calculateWetBulb"
      },
      {
        "fileName": "fnc_calculateWindChill.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates wind chill based on temperature and wind speed\n *\n * Arguments:\n * 0: temperature - degrees celsius <NUMBER>\n * 1: wind speed - m/s <NUMBER>\n *\n * Return Value:\n * wind chill <NUMBER>\n *\n * Example:\n * [0, 10] call ace_weather_fnc_calculateWindChill\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_t\", \"_v\"];\n\n// Source: https://en.wikipedia.org/wiki/Wind_chill\n\nif (_t > 10) exitWith { _t };\nif (_v < 1.39) exitWith { _t };\n\n_v = _v * 3,6; // wind speed in km/h\n(13.12 + 0.6215 * _t - 11.37 * _v ^ 0.16 + 0.3965 * _t * _v ^ 0.16)\n",
        "functionName": "ace_weather_fnc_calculateWindChill"
      },
      {
        "fileName": "fnc_calculateWindSpeed.sqf",
        "content": "/*\n * Author: Ruthberg\n * Calculates the true wind speed at a given world position\n *\n * Arguments:\n * 0: world position - posASL <POSTION>\n * 1: Account for wind gradient (used in advanced ballistics) <BOOL>\n * 2: Account for terrain <BOOL>\n * 3: Account for obstacles <BOOL>\n *\n * Return Value:\n * wind speed - m/s <NUMBER>\n *\n * Example:\n * [eyePos ACE_player, true, true, true] call ace_weather_fnc_calculateWindSpeed;\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_position\", \"_windGradientEnabled\", \"_terrainEffectEnabled\", \"_obstacleEffectEnabled\"];\n\nprivate _fnc_polar2vect = {\n    params [\"_mag\",\"_dir\",\"_elev\"];\n    private _mag2D = _mag * cos(_elev);\n    [_mag2D * sin(_dir), _mag2D * cos(_dir), _mag * sin(_elev)];\n};\n\nprivate _windSpeed = vectorMagnitude wind;\nprivate _windDir = (wind select 0) atan2 (wind select 1);\nprivate _windDirAdjusted = _windDir + 180;\n\n// Wind gradient\nif (_windGradientEnabled) then {\n    if (_windSpeed > 0.05) then {\n        private _height = (ASLToATL _position) select 2;\n        _height = 0 max _height min 20;\n        if (_height < 20) then {\n            private _roughnessLength = _position call FUNC(calculateRoughnessLength);\n            _windSpeed = _windSpeed * abs(ln(_height / _roughnessLength) / ln(20 / _roughnessLength));\n        };\n    };\n};\n\n// Terrain effect on wind\nif (_terrainEffectEnabled) then {\n    if (_windSpeed > 0.05) then {\n        private _newWindSpeed = 0;\n        {\n            private _windSource = [100, _windDirAdjusted, _x] call _fnc_polar2vect;\n            if (!(terrainIntersectASL [_position, _position vectorAdd _windSource])) exitWith {\n                _newWindSpeed = cos(_x * 9) * _windSpeed;\n            };\n            _windSource = [100, _windDirAdjusted + _x, 0] call _fnc_polar2vect;\n            if (!(terrainIntersectASL [_position, _position vectorAdd _windSource])) exitWith {\n                _newWindSpeed = cos(_x * 9) * _windSpeed;\n            };\n            _windSource = [100, _windDirAdjusted - _x, 0] call _fnc_polar2vect;\n            if (!(terrainIntersectASL [_position, _position vectorAdd _windSource])) exitWith {\n                _newWindSpeed = cos(_x * 9) * _windSpeed;\n            };\n            nil\n        } count [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n        _windSpeed = _newWindSpeed;\n    };\n};\n\n// Obstacle effect on wind\nif (_obstacleEffectEnabled) then {\n    if (_windSpeed > 0.05) then {\n        private _newWindSpeed = 0;\n        {\n            private _windSource = [20, _windDirAdjusted, _x] call _fnc_polar2vect;\n            if (!(lineIntersects [_position, _position vectorAdd _windSource])) exitWith {\n                _newWindSpeed = cos(_x * 2) * _windSpeed;\n            };\n            _windSource = [20, _windDirAdjusted + _x, 0] call _fnc_polar2vect;\n            if (!(lineIntersects [_position, _position vectorAdd _windSource])) exitWith {\n                _newWindSpeed = cos(_x * 2) * _windSpeed;\n            };\n            _windSource = [20, _windDirAdjusted - _x, 0] call _fnc_polar2vect;\n            if (!(lineIntersects [_position, _position vectorAdd _windSource])) exitWith {\n                _newWindSpeed = cos(_x * 2) * _windSpeed;\n            };\n            nil\n        } count [0, 5, 10, 15, 20, 25, 30, 35, 40, 45];\n        _windSpeed = _newWindSpeed;\n    };\n};\n\n_windSpeed = 0 max _windSpeed;\n\n_windSpeed\n",
        "functionName": "ace_weather_fnc_calculateWindSpeed"
      },
      {
        "fileName": "fnc_displayWindInfo.sqf",
        "content": "/*\n * Author: Ruthberg\n * Displays a wind info (colored arrow) in the top left corner of the screen\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_weather_fnc_displayWindInfo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"RscWindIntuitive\")\n#define __ctrl (__dsp displayCtrl 132948)\n\nif (GVAR(WindInfo)) exitWith {\n    GVAR(WindInfo) = false;\n    ([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n    true\n};\n\nEGVAR(advanced_ballistics,Protractor) = false;\n1 cutText [\"\", \"PLAIN\"];\nGVAR(WindInfo) = true;\n\n\nTRACE_1(\"Starting Wind Info PFEH\", GVAR(WindInfo));\n\n[{\n    disableSerialization;\n    params [\"\", \"_pfID\"];\n\n    if ((!GVAR(WindInfo)) || {!([ACE_player, ACE_player, []] call EFUNC(common,canInteractWith))}) exitWith {\n        TRACE_1(\"Ending Wind Info PFEH\", GVAR(WindInfo));\n        GVAR(WindInfo) = false;\n        ([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\n        [_pfID] call CBA_fnc_removePerFrameHandler;\n    };\n\n    //Keeps the display open:\n    ([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutRsc [\"RscWindIntuitive\", \"PLAIN\", 1, false];\n\n    private _windSpeed = if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\n        // With wind gradient\n        [eyePos ACE_player, true, true, true] call FUNC(calculateWindSpeed);\n    } else {\n        // Without wind gradient\n        [eyePos ACE_player, false, true, true] call FUNC(calculateWindSpeed);\n    };\n\n\n    private _playerDir = (ACE_player call CBA_fnc_headDir) select 0;\n    private _windDir = (wind select 0) atan2 (wind select 1);\n    _windDir = 30 * (round(((_windDir - _playerDir + 360) % 360) / 30));\n\n    // Color Codes from https://en.wikipedia.org/wiki/Beaufort_scale#Modern_scale\n    private _beaufortNumber = 0;\n    private _windColor = [1, 1, 1, 1];\n    if (_windSpeed > 0.3) then { _windColor = [0.796, 1, 1, 1]; _beaufortNumber = 1; };\n    if (_windSpeed > 1.5) then { _windColor = [0.596, 0.996, 0.796, 1]; _beaufortNumber = 2; };\n    if (_windSpeed > 3.3) then { _windColor = [0.596, 0.996, 0.596, 1]; _beaufortNumber = 3; };\n    if (_windSpeed > 5.4) then { _windColor = [0.6, 0.996, 0.4, 1]; _beaufortNumber = 4; };\n    if (_windSpeed > 7.9) then { _windColor = [0.6, 0.996, 0.047, 1]; _beaufortNumber = 5; };\n    if (_windSpeed > 10.7) then { _windColor = [0.8, 0.996, 0.059, 1]; _beaufortNumber = 6; };\n    if (_windSpeed > 13.8) then { _windColor = [1, 0.996, 0.067, 1]; _beaufortNumber = 7; };\n    if (_windSpeed > 17.1) then { _windColor = [1, 0.796, 0.051, 1]; _beaufortNumber = 8; };\n    if (_windSpeed > 20.7) then { _windColor = [1, 0.596, 0.039, 1]; _beaufortNumber = 9; };\n    if (_windSpeed > 24.4) then { _windColor = [1, 0.404, 0.031, 1]; _beaufortNumber = 10; };\n    if (_windSpeed > 28.4) then { _windColor = [1, 0.22, 0.027, 1]; _beaufortNumber = 11; };\n    if (_windSpeed > 32.6) then { _windColor = [1, 0.078, 0.027, 1]; _beaufortNumber = 12; };\n\n\n    TRACE_3(\"update display\",_beaufortNumber,_windDir,_windSpeed);\n    __ctrl ctrlSetTextColor _windColor;\n    if (_beaufortNumber > 0) then {\n        __ctrl ctrlSetText QPATHTOF(UI\\wind_arrow_ca.paa);\n        __ctrl ctrlSetAngle [_windDir, 0.5, 0.5];\n    } else {\n        __ctrl ctrlSetText QPATHTOF(UI\\wind_noneCircle_ca.paa);\n    };\n    __ctrl ctrlCommit 0;\n\n    //Update the beaufort balls:\n    (ctrlPosition __ctrl) params [\"_ctrlX\", \"_ctrlY\", \"_ctrlWidth\", \"_ctrlHeight\"];\n    private _centerX = _ctrlX + _ctrlWidth / 2;\n    private _centerY = _ctrlY + _ctrlHeight / 2;\n    private _ballHeight = _ctrlHeight / 17;\n    private _ballWidth = _ballHeight * 3/4;\n\n    for \"_index\" from 0 to (_beaufortNumber - 1) do {\n        private _ball = __dsp ctrlCreate [\"RscPicture\", _index];\n        _ball ctrlSetText QPATHTOF(UI\\wind_dot_ca.paa);\n        _ball ctrlSetTextColor [1,1,1,1];\n        private _ballCenterX = _centerX - (_ballWidth / 2) + ((sin _windDir) * 0.013333) * (_index - 4.9) + ((cos _windDir) * 0.0125);\n        private _ballCenterY = _centerY - (_ballHeight / 2) - ((1 * cos _windDir) * 4/3*0.013333) * (_index - 4.9) + ((sin _windDir) * 0.0125);\n        _ball ctrlSetPosition [_ballCenterX, _ballCenterY, _ballWidth, _ballHeight];\n        _ball ctrlCommit 0;\n    };\n\n}, 0.5, []] call CBA_fnc_addPerFrameHandler;\n\ntrue\n",
        "functionName": "ace_weather_fnc_displayWindInfo"
      },
      {
        "fileName": "fnc_getMapData.sqf",
        "content": "/*\n * Author: Ruthberg, esteldunedain\n * Get the weather data for the current map\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_weather_fnc_getMapData\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _worldName = toLower worldName;\nTRACE_1(\"getting map data\",_worldName);\n\n// Set default values\n\n// Source: https://weatherspark.com/averages/32194/Lemnos-Limnos-North-Aegean-Islands-Greece\nGVAR(WindSpeedMax) = [[8.8, 5.5], [8.8, 5], [8.6, 4.8], [7.6, 3.4], [7.0, 3.0], [7.1, 3.0], [7.5, 3.1], [8.0, 3.2], [7.6, 3.5], [7.8, 4.6], [7.9, 5.0], [8.2, 5.5]];\nGVAR(WindSpeedMean) = [4.8, 4.9, 4.6, 4.1, 3.5, 3.5, 4.3, 4.4, 4.1, 4.5, 4.5, 5.0];\nGVAR(WindSpeedMin) = [[0.2, 5.0], [0.1, 5.0], [0.2, 4.3], [0.0, 3.0], [0.0, 2.1], [0.0, 2.0], [0.1, 3.1], [0.3, 3.1], [0.0, 3.6], [0.0, 4.2], [0.1, 5.0], [0.2, 5.5]];\nGVAR(WindDirectionProbabilities) = [\n    [0.06, 0.32, 0.05, 0.04, 0.15, 0.06, 0.02, 0.02], // January\n    [0.08, 0.32, 0.04, 0.04, 0.18, 0.06, 0.02, 0.02], // February\n    [0.09, 0.30, 0.04, 0.04, 0.20, 0.06, 0.02, 0.03], // March\n    [0.10, 0.25, 0.03, 0.04, 0.22, 0.06, 0.02, 0.04], // April\n    [0.18, 0.25, 0.03, 0.04, 0.18, 0.04, 0.01, 0.05], // May\n    [0.25, 0.25, 0.03, 0.03, 0.15, 0.03, 0.00, 0.08], // June\n    [0.32, 0.30, 0.02, 0.02, 0.10, 0.01, 0.00, 0.09], // July\n    [0.28, 0.35, 0.02, 0.01, 0.08, 0.01, 0.00, 0.08], // August\n    [0.20, 0.37, 0.03, 0.01, 0.11, 0.01, 0.01, 0.05], // September\n    [0.10, 0.39, 0.04, 0.02, 0.15, 0.02, 0.01, 0.03], // October\n    [0.08, 0.38, 0.06, 0.04, 0.19, 0.03, 0.02, 0.02], // November\n    [0.06, 0.37, 0.05, 0.03, 0.18, 0.04, 0.02, 0.02]  // December\n];\n\nGVAR(TempDay) = [1, 3, 9, 14, 19, 23, 25, 24, 21, 13, 7, 2];\nGVAR(TempNight) = [-4, -3, 0, 4, 9, 12, 14, 14, 10, 6, 2, -2];\nGVAR(Humidity) = [82, 80, 78, 70, 71, 72, 70, 73, 78, 80, 83, 82];\n\nGVAR(currentTemperature) = 15;\nGVAR(currentHumidity) = 0;\nGVAR(currentOvercast) = 0;\n\n// Get all non inherited arrays to filter maps that inherit from Stratis/Altis/Tanoa\nprivate _nonInheritedArrays = configProperties [configFile >> \"CfgWorlds\" >> _worldName, \"isArray _x\", false];\n// And check if any custom non-inherited weather is defined through config and use that if so\nif ((configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_TempDay\") in _nonInheritedArrays) exitWith {\n    if (isArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_TempDay\")) then {\n        GVAR(TempDay) = getArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_TempDay\");\n    };\n    if (isArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_TempNight\")) then {\n        GVAR(TempNight) = getArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_TempNight\");\n    };\n    if (isArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_Humidity\")) then {\n        GVAR(Humidity) = getArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_Humidity\");\n    };\n    if (isArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindSpeedMin\")) then {\n        GVAR(WindSpeedMin) = getArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindSpeedMin\");\n    };\n    if (isArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindSpeedMean\")) then {\n        GVAR(WindSpeedMean) = getArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindSpeedMean\");\n    };\n    if (isArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindSpeedMax\")) then {\n        GVAR(WindSpeedMax) = getArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindSpeedMax\");\n    };\n    if (isArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindDirectionProbabilities\")) then {\n        GVAR(WindDirectionProbabilities) = getArray (configFile >> \"CfgWorlds\" >> _worldName >> \"ACE_WindDirectionProbabilities\");\n    };\n};\n\n// Check if the map is among the most popular\nif (_worldName in [\"chernarus\", \"bootcamp_acr\", \"woodland_acr\", \"utes\"]) then {\n    // Source: http://www.iten-online.ch/klima/europa/tschechien/prag.htm\n    GVAR(TempDay) = [1, 3, 9, 14, 19, 23, 25, 24, 21, 13, 7, 2];\n    GVAR(TempNight) = [-4, -3, 0, 4, 9, 12, 14, 14, 10, 6, 2, -2];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Prague,Czech-Republic\n    GVAR(Humidity) = [82, 80, 78, 70, 71, 72, 70, 73, 78, 80, 83, 82];\n\n    // Source: https://weatherspark.com/averages/32335/Prague-Central-Bohemia-Czech-Republic\n    GVAR(WindSpeedMax)  = [[6.7, 2.4], [6.8, 2.2], [7.1, 2.0], [6.7, 1.9], [6.5, 1.8], [6.4, 1.8], [6.4, 1.8], [5.9, 1.9], [5.8, 2.1], [5.9, 2.3], [6.4, 2.8], [7.0, 3.0]];\n    GVAR(WindSpeedMean) = [4.5, 4.3, 4.4, 4.1, 3.6, 3.6, 3.6, 3.4, 3.6, 0, 4.1, 4.6];\n    GVAR(WindSpeedMin)  = [[1.5, 1.1], [1.5, 1.1], [1.5, 1.0], [1.2, 0.9], [1.1, 0.8], [1.0, 0.8], [1.0, 1.0], [1.0, 0.9], [1.1, 1.0], [1.0, 1.0], [1.3, 1.1], [1.8, 1.2]];\n    GVAR(WindDirectionProbabilities) = [\n        [0.06, 0.02, 0.06, 0.06, 0.10, 0.23, 0.15, 0.06], // January\n        [0.08, 0.03, 0.08, 0.06, 0.08, 0.18, 0.15, 0.08], // February\n        [0.08, 0.02, 0.10, 0.06, 0.07, 0.17, 0.15, 0.08], // March\n        [0.12, 0.04, 0.10, 0.05, 0.06, 0.12, 0.13, 0.10], // April\n        [0.12, 0.05, 0.09, 0.05, 0.05, 0.10, 0.13, 0.10], // May\n        [0.12, 0.04, 0.06, 0.03, 0.05, 0.13, 0.16, 0.10], // June\n        [0.09, 0.03, 0.07, 0.04, 0.06, 0.16, 0.18, 0.10], // July\n        [0.09, 0.03, 0.08, 0.04, 0.06, 0.15, 0.16, 0.09], // August\n        [0.07, 0.03, 0.08, 0.06, 0.08, 0.18, 0.15, 0.08], // September\n        [0.06, 0.03, 0.10, 0.07, 0.10, 0.19, 0.13, 0.05], // October\n        [0.06, 0.02, 0.08, 0.07, 0.10, 0.15, 0.13, 0.05], // November\n        [0.06, 0.02, 0.06, 0.06, 0.10, 0.24, 0.15, 0.05]  // December\n    ];\n};\n\nif (_worldName in [\"takistan\", \"zargabad\", \"mountains_acr\", \"shapur_baf\", \"provinggrounds_pmc\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/asien/afghanistan/kabul.htm\n    GVAR(TempDay) = [4.5, 5.5, 12.5, 19.2, 24.4, 30.2, 32.1, 32, 28.5, 22.4, 15, 8.3];\n    GVAR(TempNight) = [-7.1, -5.7, 0.7, 6, 8.8, 12.4, 15.3, 14.3, 9.4, 3.9, -1.2, -4.7];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Kabul,Afghanistan\n    GVAR(Humidity) = [68, 69, 62, 60, 49, 37, 38, 39, 40, 41, 56, 61];\n\n    // Source: https://weatherspark.com/averages/32750/Kabul-Afghanistan\n    GVAR(WindSpeedMax)  = [[4.0, 1.0], [4.1, 1.0], [5.1, 1.1], [6.9, 1.2], [8.9, 1.2], [10.0, 1.1], [9.1,1.0], [8.2, 1.0], [6.9, 1.0], [5.2, 1.0], [3.8, 0.9], [3.7, 0.9]];\n    GVAR(WindSpeedMean) = [2.2, 2.2, 2.5, 2.8, 3.8, 4.4, 0, 3.3, 2.7, 2.4, 1.8, 1.9];\n    GVAR(WindSpeedMin)  = [[0.2, 0.4], [0.2, 0.4], [0.2, 0.4], [0.3, 0.4], [0.6, 0.4], [0.9, 0.4], [0.7, 0.4], [0.5, 0.4], [0.2, 0.5], [0.1, 0.1], [0, 0.1], [0, 0.1]];\n    GVAR(WindDirectionProbabilities) = [\n        [0.04, 0.02, 0.05, 0.04, 0.05, 0.04, 0.11, 0.29], // January\n        [0.08, 0.04, 0.06, 0.04, 0.06, 0.04, 0.10, 0.20], // February\n        [0.12, 0.06, 0.08, 0.04, 0.05, 0.04, 0.09, 0.19], // March\n        [0.18, 0.07, 0.09, 0.05, 0.05, 0.04, 0.08, 0.16], // April\n        [0.27, 0.05, 0.05, 0.03, 0.04, 0.03, 0.08, 0.16], // May\n        [0.35, 0.04, 0.04, 0.02, 0.02, 0.02, 0.07, 0.13], // June\n        [0.30, 0.07, 0.09, 0.04, 0.02, 0.02, 0.05, 0.10], // July\n        [0.23, 0.07, 0.08, 0.06, 0.03, 0.02, 0.05, 0.10], // August\n        [0.15, 0.06, 0.10, 0.06, 0.04, 0.02, 0.07, 0.13], // September\n        [0.12, 0.04, 0.07, 0.06, 0.04, 0.03, 0.10, 0.17], // October\n        [0.07, 0.03, 0.06, 0.05, 0.06, 0.02, 0.10, 0.20], // November\n        [0.05, 0.03, 0.06, 0.05, 0.06, 0.04, 0.11, 0.26]  // December\n    ];\n};\n\nif (_worldName in [\"fallujah\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/asien/irak/bagdad.htm\n    GVAR(TempDay) = [16, 19, 23, 29, 36, 41, 43, 43, 40, 33, 24, 17];\n    GVAR(TempNight) = [4, 6, 10, 15, 20, 23, 25, 25, 21, 16, 10, 5];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Bagdad,Iraq\n    GVAR(Humidity) = [69, 60, 55, 50, 36, 23, 21, 22, 29, 38, 58, 68];\n};\n\nif (_worldName in [\"fata\", \"abbottabad\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/asien/pakistan/zhob.htm\n    GVAR(TempDay) = [12.4, 15.8, 20.8, 26.9, 32.8, 37, 36.8, 35.9, 33.8, 28.2, 22.2, 16.2];\n    GVAR(TempNight) = [-0.6, 2.4, 7.4, 13.1, 18.2, 22.8, 23.8, 22.9, 19.2, 12, 5.6, 1.2];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Zhob,Pakistan\n    GVAR(Humidity) = [50, 40, 42, 40, 30, 30, 50, 49, 40, 32, 38, 41];\n\n    // Source: https://weatherspark.com/averages/31382/Shkin-Paktika-Afghanistan\n    GVAR(WindSpeedMax)  = [[3.0, 1.0], [3.3, 1.0], [4.0, 1.0], [4.3, 1.4], [4.3, 1.5], [4.6, 1.4], [4.5, 1.3], [4.0, 0.9], [4.0, 1.0], [3.5, 1.0], [3.4, 1.0], [3.1, 1.0]];\n    GVAR(WindSpeedMean) = [1.3, 1.5, 1.6, 1.7, 1.7, 1.7, 1.6, 1.5, 1.5, 1.4, 1.4, 1.2];\n    GVAR(WindSpeedMin)  = [[0.2, 0.1], [0.2, 0.1], [0.2, 0.1], [0.2, 0.1], [0.1, 0.1], [0.1, 0.1], [0.3, 0.1], [0.2, 0.1], [0.1, 0.1], [0.1, 0.1], [0.1, 0.1], [0.1, 0.1]];\n    GVAR(WindDirectionProbabilities) = [\n        [0.09, 0.03, 0.02, 0.03, 0.05, 0.07, 0.07, 0.18], // January\n        [0.07, 0.02, 0.01, 0.05, 0.10, 0.10, 0.06, 0.12], // February\n        [0.07, 0.02, 0.01, 0.07, 0.14, 0.11, 0.08, 0.12], // March\n        [0.07, 0.04, 0.03, 0.05, 0.12, 0.08, 0.06, 0.13], // April\n        [0.10, 0.03, 0.02, 0.04, 0.10, 0.09, 0.08, 0.18], // May\n        [0.12, 0.05, 0.04, 0.05, 0.08, 0.06, 0.06, 0.16], // June\n        [0.06, 0.04, 0.02, 0.06, 0.05, 0.01, 0.02, 0.06], // July\n        [0.08, 0.03, 0.04, 0.05, 0.09, 0.04, 0.02, 0.06], // August\n        [0.10, 0.04, 0.02, 0.06, 0.11, 0.09, 0.06, 0.13], // September\n        [0.07, 0.02, 0.01, 0.04, 0.11, 0.08, 0.08, 0.19], // October\n        [0.06, 0.01, 0.00, 0.05, 0.11, 0.09, 0.08, 0.13], // November\n        [0.07, 0.01, 0.01, 0.03, 0.08, 0.09, 0.09, 0.18]  // December\n    ];\n};\n\nif (_worldName in [\"sfp_wamako\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/afrika/niger/tahoua.htm\n    GVAR(TempDay) = [33.4, 35, 38.4, 41.5, 41.4, 40, 35.6, 32.9, 35.8, 38.2, 36.4, 33.1];\n    GVAR(TempNight) = [14.9, 16.3, 20.4, 23.7, 25.8, 24.8, 23.1, 22, 22.6, 21.6, 18.6, 15.3];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Tahoua,Niger\n    GVAR(Humidity) = [68, 60, 57, 50, 32, 22, 20, 21, 25, 38, 58, 69];\n};\n\nif (_worldName in [\"sfp_sturko\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/afrika/niger/tahoua.htm\n    GVAR(TempDay) = [2.2, 2.4, 5.1, 10.2, 16.1, 20.1, 21.1, 20.9, 17.2, 12.7, 7.4, 3.9];\n    GVAR(TempNight) = [-2, -2.3, -0.7, 2.6, 7.1, 11.4, 13.1, 12.7, 10, 6.9, 3.1, -0.1];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,karlskrona,Sweden\n    GVAR(Humidity) = [86, 85, 80, 72, 68, 69, 74, 77, 79, 81, 86, 88];\n};\n\nif (_worldName in [\"bornholm\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/afrika/niger/tahoua.htm\n    GVAR(TempDay) = [1.9, 1.7, 3.8, 8.1, 14, 18.1, 19.6, 19.8, 16.2, 11.9, 7.3, 3.9];\n    GVAR(TempNight) = [-1.6, -2.1, -0.7, 1.7, 6.2, 10.7, 13, 13.1, 10.6, 7.2, 3.5, 0.1];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,allinge,Denmark\n    GVAR(Humidity) = [85, 84, 80, 76, 69, 69, 76, 77, 79, 81, 86, 86];\n\n    // Source: https://weatherspark.com/averages/28830/R-nne-Capital-Region-of-Denmark\n    GVAR(WindSpeedMax)  = [[9.3, 2.2], [8.4, 2.2], [7.9, 2.2], [7.1, 2.1], [7.2, 2.1], [6.8, 2.0], [6.8, 2.0], [7.1, 2.1], [7.7, 2.2], [8.6, 2.2], [8.8, 2.2], [9.3, 2.2]];\n    GVAR(WindSpeedMean) = [6.9, 6.0, 5.7, 4.9, 4.8, 4.6, 4.7, 4.9, 5.5, 6.2, 6.5, 6.7];\n    GVAR(WindSpeedMin)  = [[3.9, 2.0], [3.0, 2.0], [2.3, 2.0], [1.8, 1.8], [1.7, 1.8], [1.7, 1.7], [1.7, 1.8], [1.9, 1.9], [2.6, 2.0], [2.9, 2.0], [3.3, 2.1], [3.5, 2.0]];\n    GVAR(WindDirectionProbabilities) = [\n        [0.07, 0.04, 0.07, 0.05, 0.09, 0.12, 0.20, 0.07], // January\n        [0.08, 0.06, 0.10, 0.06, 0.06, 0.08, 0.20, 0.08], // February\n        [0.05, 0.06, 0.13, 0.08, 0.07, 0.08, 0.19, 0.06], // March\n        [0.05, 0.11, 0.16, 0.09, 0.05, 0.06, 0.17, 0.06], // April\n        [0.04, 0.10, 0.15, 0.08, 0.05, 0.06, 0.20, 0.05], // May\n        [0.03, 0.07, 0.10, 0.07, 0.05, 0.07, 0.28, 0.06], // June\n        [0.04, 0.06, 0.11, 0.07, 0.04, 0.07, 0.28, 0.06], // July\n        [0.05, 0.06, 0.11, 0.07, 0.06, 0.08, 0.26, 0.06], // August\n        [0.06, 0.06, 0.11, 0.07, 0.06, 0.09, 0.21, 0.06], // September\n        [0.07, 0.05, 0.09, 0.08, 0.08, 0.12, 0.18, 0.07], // October\n        [0.08, 0.06, 0.08, 0.07, 0.10, 0.12, 0.16, 0.07], // November\n        [0.08, 0.05, 0.06, 0.04, 0.10, 0.14, 0.19, 0.07]  // December\n    ];\n};\nif (_worldName in [\"imrali\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/europa/tuerkei/bursa.htm\n    GVAR(TempDay) = [9.3, 10.7, 13.6, 18.8, 23.5, 28.2, 30.3, 30.2, 27, 21.4, 16.5, 11.8];\n    GVAR(TempNight) = [1.4, 2.4, 3.7, 7.1, 10.9, 14.3, 16.5, 16.3, 13, 9.5, 6, 3.8];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Bursa,Turkey\n    GVAR(Humidity) = [78, 75, 70, 70, 71, 61, 58, 59, 63, 69, 77, 76];\n};\nif (_worldName in [\"kunduz\"]) exitWith {\n    // Source: http://www.iten-online.ch/klima/asien/afghanistan/kunduz.htm\n    GVAR(TempDay) = [6.3, 9.5, 15.8, 23, 29.8, 37.3, 39, 36.9, 31.8, 24.5, 16, 9.7];\n    GVAR(TempNight) = [-2.4, 0, 5.7, 11.6, 15.7, 20.9, 21.5, 21.5, 16.3, 10.6, 4.1, 0];\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Kabul,Afghanistan\n    GVAR(Humidity) = [70, 72, 64, 61, 49, 34, 36, 38, 39, 52, 51, 63];\n\n    // Source: https://weatherspark.com/averages/32753/Kunduz-Afghanistan\n    GVAR(WindSpeedMax)  = [[3.5, 0.8], [4.0, 0.6], [4.3, 2.0], [4.6, 1.1], [5.1, 1.2], [5.7, 1.0], [4.9, 0.8], [4.5, 0.3], [4.3, 0.3], [3.8, 0.5], [3.0, 1.3], [3.1, 0.8]];\n    GVAR(WindSpeedMean) = [1.5, 1.8, 2.1, 2.4, 2.5, 2.8, 2.7, 2.5, 2.3, 2.1, 1.7, 1.6];\n    GVAR(WindSpeedMin)  = [[0.2, 0.1], [0.3, 0.3], [0.4, 0.1], [0.8, 0.2], [0.8, 0.1], [1.0, 0.3], [0.9, 0.5], [0.8, 0.2], [0.8, 0.1], [0.7, 0.1], [0.5, 0.1], [0.2, 0.2]];\n    GVAR(WindDirectionProbabilities) = [\n        [0.04, 0.02, 0.05, 0.11, 0.12, 0.06, 0.09, 0.06], // January\n        [0.04, 0.02, 0.05, 0.11, 0.12, 0.06, 0.08, 0.07], // February\n        [0.05, 0.04, 0.06, 0.14, 0.12, 0.06, 0.10, 0.08], // March\n        [0.09, 0.05, 0.08, 0.13, 0.07, 0.05, 0.07, 0.07], // April\n        [0.14, 0.07, 0.13, 0.13, 0.06, 0.05, 0.05, 0.08], // May\n        [0.16, 0.06, 0.12, 0.12, 0.05, 0.04, 0.05, 0.10], // June\n        [0.17, 0.06, 0.08, 0.12, 0.06, 0.04, 0.05, 0.12], // July\n        [0.15, 0.05, 0.06, 0.16, 0.08, 0.05, 0.07, 0.13], // August\n        [0.15, 0.04, 0.08, 0.20, 0.13, 0.05, 0.10, 0.14], // September\n        [0.08, 0.02, 0.08, 0.22, 0.15, 0.06, 0.13, 0.13], // October\n        [0.06, 0.02, 0.05, 0.20, 0.17, 0.06, 0.12, 0.10], // November\n        [0.04, 0.02, 0.05, 0.14, 0.19, 0.07, 0.10, 0.07]  // December\n    ];\n};\n",
        "functionName": "ace_weather_fnc_getMapData"
      },
      {
        "fileName": "fnc_initModuleSettings.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg\n * Module for adjusting the wind deflection settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [module, [], true] call ace_weather_fnc_initModuleSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n// Turns the weather module on / off\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n\n// Server weather update interval\n[_logic, QGVAR(updateInterval), \"updateInterval\"] call EFUNC(common,readSettingFromModule);\n\n// Turns the (map based) wind simulation on / off\n[_logic, QGVAR(windSimulation), \"windSimulation\"] call EFUNC(common,readSettingFromModule);\n\nGVAR(updateInterval) = 1 max GVAR(updateInterval) min 600;\n",
        "functionName": "ace_weather_fnc_initModuleSettings"
      },
      {
        "fileName": "fnc_initWind.sqf",
        "content": "/*\n * Author: Ruthberg\n * Inits the wind variables on the server (on mission start)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_weather_fnc_initWind\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _month = date select 1;\nprivate _windDirectionProbabilities = GVAR(WindDirectionProbabilities) select (_month - 1);\n\nGVAR(wind_direction_reference) = random 360;\nprivate _sum = 0;\nfor \"_i\" from 0 to 7 do {\n    _sum = _sum + (_windDirectionProbabilities select _i);\n};\nprivate _rand = random _sum;\nprivate _csum = [0, 0, 0, 0, 0, 0, 0, 0];\nfor \"_i\" from 0 to 7 do {\n    for \"_j\" from 0 to _i do {\n        _csum set [_i, (_csum select _i) + (_windDirectionProbabilities select _j)];\n    };\n};\nprivate _index = 0;\nfor \"_i\" from 0 to 7 do {\n    if (_rand > (_csum select _i)) then {\n        _index = _index + 1;\n    };\n};\nGVAR(wind_direction_reference) = 45 * _index;\n\nGVAR(wind_mean_dir) = GVAR(wind_direction_reference);\nGVAR(wind_direction_reference) = GVAR(wind_direction_reference) + (random 22.5) - (random 22.5);\nGVAR(wind_direction_reference) = (360 + GVAR(wind_direction_reference)) % 360;\n\nGVAR(min_wind_speed) = GVAR(WindSpeedMin) select (_month - 1);\nGVAR(min_wind_speed) = (GVAR(min_wind_speed) select 0) + (random (GVAR(min_wind_speed) select 1)) - (random (GVAR(min_wind_speed) select 1));\nGVAR(min_wind_speed) = 0 max GVAR(min_wind_speed);\nGVAR(mean_wind_speed) = GVAR(WindSpeedMean) select (_month - 1);\nGVAR(max_wind_speed) = GVAR(WindSpeedMax) select (_month - 1);\nGVAR(max_wind_speed) = (GVAR(max_wind_speed) select 0) + (random (GVAR(max_wind_speed) select 1)) - (random (GVAR(max_wind_speed) select 1));\nGVAR(max_wind_speed) = 0 max GVAR(max_wind_speed);\n\nGVAR(wind_upper_span) = GVAR(max_wind_speed) - GVAR(mean_wind_speed);\nGVAR(wind_lower_span) = GVAR(min_wind_speed) - GVAR(mean_wind_speed);\n\nGVAR(current_wind_direction) = GVAR(wind_direction_reference);\nGVAR(next_wind_direction) = GVAR(current_wind_direction);\n\nGVAR(current_wind_speed) = GVAR(min_wind_speed) + (GVAR(max_wind_speed) - GVAR(min_wind_speed)) * (random 1);\nGVAR(next_wind_speed) = GVAR(current_wind_speed);\n\nGVAR(last_wind_update) = 0;\nGVAR(next_wind_udpate) = 0;\n",
        "functionName": "ace_weather_fnc_initWind"
      },
      {
        "fileName": "fnc_updateHumidity.sqf",
        "content": "/*\n * Author: ACE2 Team\n * Smoothly updates GVAR(currentHumidity) on the server (based on time of day and map data)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_weather_fnc_updateHumidity\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (rain > 0 && overcast > 0.7) then {\n    GVAR(currentHumidity) = 1;\n} else {\n    private _month = date select 1;\n    GVAR(currentHumidity) = (GVAR(Humidity) select (_month - 1)) / 100;\n    GVAR(currentHumidity) = GVAR(currentHumidity) + GVAR(humidityShift);\n    private _avgTemperature = ((GVAR(TempDay) select (_month - 1)) + (GVAR(TempNight) select (_month - 1))) / 2;\n    private _pS1 = 6.112 * exp((17.62 * _avgTemperature) / (243.12 + _avgTemperature));\n    private _PS2 = 6.112 * exp((17.62 * GVAR(currentTemperature)) / (243.12 + GVAR(currentTemperature)));\n    GVAR(currentHumidity) = GVAR(currentHumidity) * _PS1 / _PS2;\n};\n\nGVAR(currentHumidity) = 0 max GVAR(currentHumidity) min 1;\n\npublicVariable QGVAR(currentHumidity);\n",
        "functionName": "ace_weather_fnc_updateHumidity"
      },
      {
        "fileName": "fnc_updateTemperature.sqf",
        "content": "/*\n * Author: ACE2 Team\n * Smoothly updates GVAR(currentTemperature) on the server (based on time of day and map data)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_weather_fnc_updateTemperature\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _month = date select 1;\nprivate _timeRatio = abs(daytime - 12) / 12;\n\nGVAR(currentTemperature) = (GVAR(TempDay) select (_month - 1)) * (1 - _timeRatio) + (GVAR(TempNight) select (_month - 1)) * _timeRatio;\nGVAR(currentTemperature) = GVAR(currentTemperature) + GVAR(temperatureShift) - GVAR(badWeatherShift) * GVAR(currentOvercast);\nGVAR(currentTemperature) = round(GVAR(currentTemperature) * 10) / 10;\n\npublicVariable QGVAR(currentTemperature);\n",
        "functionName": "ace_weather_fnc_updateTemperature"
      },
      {
        "fileName": "fnc_updateWeather.sqf",
        "content": "/*\n * Author: ACE2 Team, esteldunedain, Ruthberg\n * Updates the weather evolution on the server. Broadcasts relevant weather information to the clients.\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_weather_fnc_updateWeather\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nmissionNamespace setVariable [QGVAR(currentOvercast), overcast, true];\n\n[] call FUNC(updateTemperature);\n[] call FUNC(updateHumidity);\n\n// Wind simulation\nif (GVAR(windSimulation) && CBA_missionTime > GVAR(next_wind_udpate)) then {\n\n    GVAR(current_wind_direction) = GVAR(next_wind_direction);\n    GVAR(current_wind_speed) = GVAR(next_wind_speed);\n\n    private _transitionPeriod = GVAR(updateInterval) * (2 + (random 4)) / (1 + overcast);\n    GVAR(next_wind_udpate) = CBA_missionTime + _transitionPeriod;\n\n    private _windDirectionVariance = (90 - (random 180)) * (overcast ^ 2);\n    GVAR(next_wind_direction) = (360 + GVAR(wind_direction_reference) + _windDirectionVariance) % 360;\n\n    if ((random 1) < (0.3 max overcast)) then {\n        private _speedVariance = GVAR(wind_upper_span) * (random 1) ^ 2 + GVAR(wind_lower_span) * (random 1) ^ 2;\n        GVAR(next_wind_speed) = GVAR(mean_wind_speed) + _speedVariance;\n    };\n\n    GVAR(last_wind_update) = CBA_missionTime;\n\n    TRACE_5(\"dirCur/dirNew/spdCur/spdNew/period\",GVAR(current_wind_direction),GVAR(next_wind_direction),GVAR(current_wind_speed),GVAR(next_wind_speed),_transitionPeriod);\n};\n",
        "functionName": "ace_weather_fnc_updateWeather"
      },
      {
        "fileName": "fnc_updateWind.sqf",
        "content": "/*\n * Author: ACE2 Team, Ruthberg\n * Smoothly updates wind on the server (based on time of year and map data)\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * [] call ace_weather_fnc_updateWind\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nprivate _speed = linearConversion [GVAR(last_wind_update), GVAR(next_wind_udpate), CBA_missionTime, GVAR(current_wind_speed), GVAR(next_wind_speed), true];\nprivate _direction = linearConversion [GVAR(last_wind_update), GVAR(next_wind_udpate), CBA_missionTime, GVAR(current_wind_direction), GVAR(next_wind_direction), true];\n\nsetWind [-_speed * sin(_direction), -_speed * cos(_direction), true];\n",
        "functionName": "ace_weather_fnc_updateWind"
      }
    ]
  },
  {
    "component": "winddeflection",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nif (!hasInterface) exitWith {};\n\nGVAR(trackedBullets) = [];\n\n[\"ace_settingsInitialized\", {\n    //If not enabled, dont't add PFEH\n    if (!GVAR(enabled)) exitWith {};\n\n    // Register fire event handler\n    [\"ace_firedPlayer\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n    [\"ace_firedPlayerNonLocal\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n\n    if (GVAR(vehicleEnabled)) then {\n        [\"ace_firedPlayerVehicle\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n        [\"ace_firedPlayerVehicleNonLocal\", DFUNC(handleFired)] call CBA_fnc_addEventHandler;\n    };\n\n    [] call FUNC(updateTrajectoryPFH);\n\n}] call CBA_fnc_addEventHandler;\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "/**\n * XEH_preInit.sqf\n * @Descr: N/A\n * @Author: Glowbal\n *\n * @Arguments: []\n * @Return:\n * @PublicAPI: false\n */\n\n#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_handleFired.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg\n * Handles wind deflection for projectiles. Called from the unified fired EH only for players on foot and their vehicles if required by settings.\n *\n * Arguments:\n * None. Parameters inherited from EFUNC(common,firedEH)\n *\n * Return Value:\n * None\n *\n * Example:\n * [clientFiredBIS-XEH] call ace_advanced_ballistics_fnc_handleFired\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\n\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false] && {_projectile isKindOf \"BulletBase\"} && {_unit isKindOf \"Man\"}) exitWith {false};\n\nif (!((_projectile isKindOf \"BulletBase\") || {_projectile isKindOf \"GrenadeBase\"})) exitWith {false};\nif (_unit distance ACE_player > GVAR(simulationRadius)) exitWith {false};\n\nGVAR(trackedBullets) pushBack [_projectile, getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\")];\n",
        "functionName": "ace_winddeflection_fnc_handleFired"
      },
      {
        "fileName": "fnc_initModuleSettings.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg\n * Module for adjusting the wind deflection settings\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None <NIL>\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_winddeflection_fnc_initModuelSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(vehicleEnabled), \"vehicleEnabled\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(simulationInterval), \"simulationInterval\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(simulationRadius), \"simulationRadius\"] call EFUNC(common,readSettingFromModule);\n\nGVAR(simulationInterval) = 0 max GVAR(simulationInterval) min 0.2;\n",
        "functionName": "ace_winddeflection_fnc_initModuleSettings"
      },
      {
        "fileName": "fnc_updateTrajectoryPFH.sqf",
        "content": "/*\n * Author: Glowbal, Ruthberg\n * Handles wind deflection for projectiles.\n *\n * Arguments:\n * 0: bullet - Object the event handler is assigned to <OBJECT>\n * 1: airFriction - air friction of the bullet <NUMBER>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bullet, 2] call ace_winddeflection_fnc_updateTrajectoryPFH\n *\n * Public: No\n */\n// #define ENABLE_PERFORMANCE_COUNTERS\n#include \"script_component.hpp\"\n\n[{\n    // BEGIN_COUNTER(pfeh);\n\n    params [\"_args\"];\n    _args params [\"_lastTime\"];\n    private _deltaT = CBA_missionTime - _lastTime;\n    _args set [0, CBA_missionTime];\n    private _isWind = (vectorMagnitude wind > 0);\n\n    {\n        _x params [\"_bullet\", \"_airFriction\"];\n\n        private _bulletVelocity = velocity _bullet;\n        private _bulletSpeedSqr = vectorMagnitudeSqr _bulletVelocity;\n\n        if ((!alive _bullet) || {(_bullet isKindOf \"BulletBase\") && {_bulletSpeedSqr < 10000}}) then {\n            GVAR(trackedBullets) deleteAt (GVAR(trackedBullets) find _x);\n        } else {\n            if (_isWind) then {\n                private _trueVelocity = _bulletVelocity vectorDiff wind;\n                private _trueSpeed = vectorMagnitude _trueVelocity;\n\n                private _dragRef = _deltaT * _airFriction * _bulletSpeedSqr;\n                private _accelRef = (vectorNormalized _bulletVelocity) vectorMultiply (_dragRef);\n                _bulletVelocity = _bulletVelocity vectorDiff _accelRef;\n\n                private _drag = _deltaT * _airFriction * _trueSpeed;\n                private _accel = _trueVelocity vectorMultiply (_drag);\n                _bulletVelocity = _bulletVelocity vectorAdd _accel;\n            };\n            _bullet setVelocity _bulletVelocity;\n        };\n        nil\n    } count +GVAR(trackedBullets);\n    // END_COUNTER(pfeh);\n}, GVAR(simulationInterval), [CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_winddeflection_fnc_updateTrajectoryPFH"
      }
    ]
  },
  {
    "component": "yardage450",
    "files": [
      {
        "fileName": "initKeybinds.sqf",
        "content": "\n[\"ACE3 Equipment\", QGVAR(DistanceKey), localize \"STR_ACE_Yardage450_PowerButtonKey\",\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if !(GVAR(active)) exitWith {false};\n    if (currentWeapon ACE_player != \"ACE_Yardage450\" || cameraView != \"GUNNER\") exitWith {false};\n\n    // Statement\n    if !(GVAR(powerButtonPressed)) then {\n        GVAR(powerButtonPressed) = true;\n        call FUNC(acquireTarget);\n    };\n    true\n},\n{\n    // Conditions: canInteract\n    if !([ACE_player, objNull, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\n    // Conditions: specific\n    if (currentWeapon ACE_player != \"ACE_Yardage450\" || cameraView != \"GUNNER\") exitWith {false};\n\n    // Statement\n    GVAR(powerButtonPressed) = false;\n    call FUNC(turnOn);\n    true\n},\n[19, [false, false, false]], false] call CBA_fnc_addKeybind; //R Key\n"
      },
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"initKeybinds.sqf\"\n\nGVAR(active) = false;\n\nGVAR(useYards) = false;\n\nGVAR(powerButtonPressed) = false;\nGVAR(powerOnTime) = 0;\n\nGVAR(lasing) = false;\nGVAR(targetAcquired) = false;\nGVAR(targetRangeText) = \"---\";\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_acquireTarget.sqf",
        "content": "/*\n * Author: Ruthberg\n * Fires the laser to acquire the target\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_yardage450_fnc_acquireTarget\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n// Reference: http://www.optcorp.com/pdf/Bushnell/YardageProSport.pdf\n#define MIN_DISTANCE ([9, 10] select GVAR(useYards))\n#define MAX_DISTANCE ([732, 800] select GVAR(useYards))\n#define METERING_POINT_NUMBER 8\n\nGVAR(lasing) = true;\nGVAR(targetAcquired) = false;\n\nGVAR(distances) = [];\nGVAR(distanceIndex) = -1;\n\n[{\n    if (GVAR(targetAcquired) || !GVAR(powerButtonPressed)) exitWith {\n        GVAR(lasing) = false;\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    ([eyePos ACE_player, ACE_player weaponDirection (currentWeapon ACE_player), ACE_player] call EFUNC(laser,shootRay)) params [\"\", \"_distance\"];\n\n    GVAR(distanceIndex) = (GVAR(distanceIndex) + 1) % METERING_POINT_NUMBER;\n    GVAR(distances) set [GVAR(distanceIndex), _distance - 1 + (random 2)];\n\n    if (count GVAR(distances) == METERING_POINT_NUMBER) then {\n        private _min = selectMin GVAR(distances);\n        private _max = selectMax GVAR(distances);\n\n        if (_max - _min < 5) then {\n            private _range = (_min + _max) / 2;\n            if (_range >= MIN_DISTANCE && _range <= MAX_DISTANCE) then {\n                GVAR(targetAcquired) = true;\n                GVAR(targetRangeText) = Str(round(_range));\n            };\n        };\n    };\n}, 0.1, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_yardage450_fnc_acquireTarget"
      },
      {
        "fileName": "fnc_turnOn.sqf",
        "content": "/*\n * Author: Ruthberg\n * Shows the Yardage 450 screen elements\n *\n * Arguments:\n * None\n *\n * Return Value:\n * None\n *\n * Example:\n * call ace_yardage450_fnc_turnOn\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\n#define __dsp (uiNamespace getVariable \"ACE_RscYardage450\")\n#define __ctrlTarget (__dsp displayCtrl 720041)\n#define __ctrlLaser (__dsp displayCtrl 720042)\n#define __ctrlRange (__dsp displayCtrl 720043)\n#define __ctrlMeters (__dsp displayCtrl 720044)\n#define __ctrlYards (__dsp displayCtrl 720045)\n\nif (currentWeapon ACE_player != \"ACE_Yardage450\" || cameraView != \"GUNNER\") exitWith {};\n\nGVAR(powerOnTime) = CBA_missionTime;\n\nif (GVAR(active)) exitWith {};\n\nGVAR(active) = true;\n\n[{\n    if (CBA_missionTime - GVAR(powerOnTime) > 30) exitWith {\n        GVAR(active) = false;\n        74210 cutText [\"\", \"PLAIN\"];\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\n    };\n\n    if (currentWeapon ACE_player == \"ACE_Yardage450\" && cameraView == \"GUNNER\") then {\n        74210 cutRsc [\"ACE_RscYardage450\", \"PLAIN\", 1, false];\n\n        __ctrlLaser ctrlShow GVAR(lasing);\n        if (GVAR(targetAcquired)) then {\n            __ctrlTarget ctrlSetText \"Target Acquired\";\n            __ctrlRange ctrlSetText GVAR(targetRangeText);\n        } else {\n            __ctrlTarget ctrlSetText \"\";\n            __ctrlRange ctrlSetText \"---\";\n        };\n        __ctrlMeters ctrlShow !GVAR(useYards);\n        __ctrlYards ctrlShow GVAR(useYards);\n    } else {\n        74210 cutText [\"\", \"PLAIN\"];\n    };\n\n}, 0, []] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_yardage450_fnc_turnOn"
      }
    ]
  },
  {
    "component": "zeus",
    "files": [
      {
        "fileName": "XEH_postInit.sqf",
        "content": "#include \"script_component.hpp\"\n\n[\"ace_settingsInitialized\",{\n    // Only add an InitPost EH if setting is enabled (and apply retroactively)\n    if (isServer && {GVAR(autoAddObjects)}) then {\n        [\"AllVehicles\", \"InitPost\", FUNC(addObjectToCurator), true, [], true] call CBA_fnc_addClassEventHandler;\n    };\n}] call CBA_fnc_addEventHandler;\n\n// Global skill module PVs values for persistence, just listen for the PV\nQGVAR(GlobalSkillAI) addPublicVariableEventHandler FUNC(moduleGlobalSetSkill);\n\n[QGVAR(moveToRespawnPosition), BIS_fnc_moveToRespawnPosition] call CBA_fnc_addEventHandler;\n[QGVAR(moduleDefendArea), CBA_fnc_taskDefend] call CBA_fnc_addEventHandler;\n[QGVAR(modulePatrolArea), CBA_fnc_taskPatrol] call CBA_fnc_addEventHandler;\n[QGVAR(moduleSearchNearby), CBA_fnc_searchNearby] call CBA_fnc_addEventHandler;\n[QGVAR(moduleSearchArea), CBA_fnc_taskSearchArea] call CBA_fnc_addEventHandler;\n[QGVAR(suppressiveFire), LINKFUNC(moduleSuppressiveFireLocal)] call CBA_fnc_addEventHandler;\n[QGVAR(enableFlashlight), {\n    params [\"_unit\", \"_mode\"];\n    _unit enableGunLights _mode;\n}] call CBA_fnc_addEventHandler;\n\n// Editable object commands must be ran on server, this events are used in the respective module\nif (isServer) then {\n    [QGVAR(equipFries), EFUNC(fastroping,equipFRIES)] call CBA_fnc_addEventHandler;\n    [QGVAR(addObjects), {\n        params [\"_objects\", [\"_curator\", objNull]];\n\n        if !(isNull _curator) exitWith { _curator addCuratorEditableObjects [_objects, true]; };\n\n        {\n            _x addCuratorEditableObjects [_objects, true];\n        } forEach allCurators;\n    }] call CBA_fnc_addEventHandler;\n\n    [QGVAR(removeObjects), {\n        params [\"_objects\", [\"_curator\", objNull]];\n\n        if !(isNull _curator) exitWith { _curator removeCuratorEditableObjects [_objects, true]; };\n\n        {\n            _x removeCuratorEditableObjects [_objects, true];\n        } forEach allCurators;\n    }] call CBA_fnc_addEventHandler;\n};\n"
      },
      {
        "fileName": "XEH_preInit.sqf",
        "content": "#include \"script_component.hpp\"\n\nADDON = false;\n\nPREP_RECOMPILE_START;\n#include \"XEH_PREP.hpp\"\nPREP_RECOMPILE_END;\n\nif (isServer) then {\n    [QGVAR(zeusUnitAssigned), FUNC(handleZeusUnitAssigned)] call CBA_fnc_addEventHandler;\n};\n\nGVAR(GlobalSkillAI) = [0.5,0.5,0.5,0.5,true,true];\n\nADDON = true;\n"
      },
      {
        "fileName": "XEH_preStart.sqf",
        "content": "#include \"script_component.hpp\"\n\n#include \"XEH_PREP.hpp\"\n"
      }
    ],
    "functions": [
      {
        "fileName": "fnc_addObjectToCurator.sqf",
        "content": "/*\n * Author: Glowbal\n * Adds an object to curator upon spawn\n *\n * Arguments:\n * Object <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [object] call ace_zeus_fnc_addObjectToCurator\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_object\"];\n\nif (!(_object getVariable [QGVAR(addObject), GVAR(autoAddObjects)])) exitWith {};\n\n[{\n    TRACE_1(\"Delayed addCuratorEditableObjects\",_this);\n    {\n        _x addCuratorEditableObjects [[_this], true];\n    } forEach allCurators;\n}, _object] call CBA_fnc_execNextFrame;\n",
        "functionName": "ace_zeus_fnc_addObjectToCurator"
      },
      {
        "fileName": "fnc_bi_moduleCurator.sqf",
        "content": "/*\n * Author: Bohemia Interactive\n * Module function for initalizing zeus\n * Edited to remove eagle and global ascension message\n * Added \"zeusUnitAssigned\" event call\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_bi_moduleCurator\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif (_activated) then {\n\n    //--- Terminate when not created on the server\n    if (!isserver && local _logic && isnull (getassignedcuratorunit _logic)) exitwith {\n        [format [\"%1 is trying to create curator logic ModuleCurator_F\",profilename],\"bis_fnc_error\",false] call bis_fnc_mp;\n        deletevehicle _logic;\n    };\n\n    //--- Get curator owner\n    _ownerVar = _logic getvariable [\"owner\",\"\"];\n    _ownerUID = parsenumber _ownerVar;\n    if (cheatsenabled) then {\n        _ownerVarArray = toarray _ownerVar;\n        _ownerVarArray resize 3;\n        if (tostring _ownerVarArray == \"DEV\") then {_ownerUID = 1;};\n    };\n    if (_ownerVar == \"\" && !ismultiplayer) then {\n        [\"Curator owner not defined, player used instead in singleplayer.\"] call bis_fnc_error;\n        _ownerVar = player call bis_fnc_objectvar;\n    };\n    if (_ownerUID > 0 && !ismultiplayer) then {\n        _ownerVar = player call bis_fnc_objectvar;\n    };\n    _isAdmin = _ownerVar == \"#adminLogged\" || _ownerVar == \"#adminVoted\";\n\n    //--- Wipe out the variable so clients can't access it\n    _logic setvariable [\"owner\",nil];\n\n    //--- Server\n    if (isserver) then {\n\n        //--- Prepare admin variable\n        _adminVar = \"\";\n        if (_isAdmin) then {\n            _letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n            _adminVar = \"admin_\";\n            for \"_i\" from 0 to 9 do {_adminVar = _adminVar + selectRandom _letters};\n            _logic setvariable [\"adminVar\",_adminVar,true];\n        };\n\n        //--- Get allowed addons\n        _addonsType = _logic getvariable [\"Addons\",2];\n        _addons = [];\n        switch _addonsType do {\n\n            //--- All (including unofficial ones)\n            case 3: {\n                _cfgPatches = configfile >> \"cfgpatches\";\n                for \"_i\" from 0 to (count _cfgPatches - 1) do {\n                    _class = _cfgPatches select _i;\n                    if (isclass _class) then {_addons set [count _addons,configname _class];};\n                };\n                _addons call bis_fnc_activateaddons;\n                removeallcuratoraddons _logic;\n                _logic addcuratoraddons _addons;\n            };\n\n            //--- All active\n            case 2: {};\n\n            //--- All mission\n            case 1: {\n                _addonsList = [];\n                {\n                    _addonsList = _addonsList + (unitaddons typeof _x);\n                } foreach (entities \"all\");\n                removeallcuratoraddons _logic;\n                _logic addcuratoraddons _addonsList;\n            };\n\n            //--- None\n            case 0: {\n                removeallcuratoraddons _logic;\n            };\n        };\n\n        //--- Handle ownership\n        [_logic,_ownerVar,_ownerUID,_adminVar] spawn {\n            scriptname \"BIS_fnc_moduleCurator: Owner\";\n\n            params [\"_logic\", \"_ownerVar\", \"_ownerUID\", \"_adminVar\"];\n\n            if (_adminVar != \"\") then {_ownerVar = _adminVar;};\n\n            _forced = _logic getvariable [\"forced\",0] > 0;\n            _name = _logic getvariable [\"name\",\"\"];\n            if (_name == \"\") then {_name = localize \"STR_A3_curator\";};\n\n            //--- Wait until mission starts\n            waitUntil {time > 0}; // NOTE: DO NOT CHANGE TO CBA_missionTime, IT BREAKS THE MODULE\n\n            //--- Refresh addon list, so it's broadcasted to clients\n            _addons = curatoraddons _logic;\n            removeAllCuratorAddons _logic;\n            _logic addcuratoraddons _addons;\n\n            while {true} do {\n                //--- Wait for player to become Zeus\n                switch true do {\n                    case (_ownerUID > 0): {\n                        waituntil {\n                            sleep 0.01;\n                            {getplayeruid _x == _ownerVar} count playableunits > 0 || isnull _logic\n                        };\n                    };\n                    default {\n                        waituntil {isplayer (missionnamespace getvariable [_ownerVar,objnull]) || isnull _logic};\n                    };\n                };\n                if (isnull _logic) exitwith {};\n\n                //--- Assign\n                _player = objnull;\n                switch true do {\n                    case (_ownerUID > 0): {\n                        {\n                            if (getplayeruid _x == _ownerVar) exitwith {_player = _x;};\n                        } foreach playableunits;\n                    };\n                    default {\n                        _player = missionnamespace getvariable [_ownerVar,objnull];\n                    };\n                };\n\n                waituntil {unassigncurator _logic; isnull (getassignedcuratorunit _logic) || isnull _logic};\n                waituntil {_player assignCurator _logic; getassignedcuratorunit _logic == _player || isnull _logic};\n                if (isnull _logic) exitwith {};\n\n                //--- Add radio channels\n                {\n                    _x radiochanneladd [_player];\n                } foreach (_logic getvariable [\"channels\",[]]);\n\n                // Added by ace_zeus to delay ascension message code\n                private _msgCode = {\n                    params [\"_logic\",\"_player\"];\n\n                    //--- Sent notification to all assigned players\n                    if ((_logic getVariable [\"showNotification\",true]) && GVAR(zeusAscension)) then {\n                        {\n                            if (isplayer _x) then {\n                                [[\"CuratorAssign\",[_name,name _player]],\"bis_fnc_showNotification\",_x] call bis_fnc_mp;\n                            };\n                        } forEach (curatoreditableobjects _logic);\n                    };\n                };\n\n                // Added by ace_zeus to hide ascension messages\n                if !(EGVAR(common,settingsInitFinished)) then {\n                    EGVAR(common,runAtSettingsInitialized) pushBack [_msgCode, [_logic,_player]];\n                } else {\n                    [_logic,_player] call _msgCode;\n                };\n\n                [_logic,\"curatorUnitAssigned\",[_logic,_player]] call bis_fnc_callscriptedeventhandler;\n\n                // Added by ace_zeus\n                [QGVAR(zeusUnitAssigned), [_logic,_player]] call CBA_fnc_globalEvent;\n\n                //--- Wait for player to stop being Zeus\n                switch true do {\n                    case (_ownerUID > 0): {\n                        waituntil {\n                            sleep 0.01;\n                            {getplayeruid _x == _ownerVar} count playableunits == 0 || isnull _logic\n                        };\n                    };\n                    default {\n                        waituntil {_player != missionnamespace getvariable [_ownerVar,objnull] || isnull _logic};\n                    };\n                };\n                if (isnull _logic) exitwith {};\n\n                //--- Add radio channels\n                {\n                    _x radiochannelremove [_player];\n                } foreach (_logic getvariable [\"channels\",[]]);\n\n                //--- Unassign\n                waituntil {unassigncurator _logic; isnull (getassignedcuratorunit _logic) || isnull _logic};\n                if (isnull _logic) exitwith {};\n            };\n        };\n\n        // Added by ace_zeus to delay bird code\n        private _birdCode = {\n            params [\"_logic\"];\n\n            if (GVAR(zeusBird)) then {\n                //--- Create bird\n                _birdType = _logic getVariable [\"birdType\",\"eagle_f\"];\n                if (_birdType != \"\") then {\n                    _bird = createvehicle [_birdType,[100,100,100],[],0,\"none\"];\n                    _logic setVariable [\"bird\",_bird,true];\n                };\n\n                //--- Locality changed\n                _logic addeventhandler [\n                    \"local\",\n                    {\n                        _logic = _this select 0;\n                        _bird = _logic getVariable [\"bird\",objnull];\n                        _bird setowner owner _logic;\n                    }\n                ];\n            };\n        };\n\n        // Added by ace_zeus to hide camera bird\n        if !(EGVAR(common,settingsInitFinished)) then {\n            EGVAR(common,runAtSettingsInitialized) pushBack [_birdCode, [_logic]];\n        } else {\n            [_logic] call _birdCode;\n        };\n\n        //--- Activated all future addons\n        _addons = [];\n        {\n            if (typeof _x == \"ModuleCuratorAddAddons_F\") then {\n                _paramAddons = call compile (\"[\" + (_x getvariable [\"addons\",\"\"]) + \"]\");\n                {\n                    if !(_x in _addons) then {_addons set [count _addons,_x];};\n                    {\n                        if !(_x in _addons) then {_addons set [count _addons,_x];};\n                    } foreach (unitaddons _x);\n                } foreach _paramAddons;\n            };\n        } foreach (synchronizedobjects _logic);\n        _addons call bis_fnc_activateaddons;\n    };\n\n    //--- Player\n    if (hasinterface) then {\n        waituntil {local player};\n        _serverCommand = if (_ownerVar == \"#adminLogged\") then {\"#shutdown\"} else {\"#kick\"};\n\n        //--- Black effect until the interface is open\n        _forced = _logic getvariable [\"forced\",0] > 0;\n        if (_forced) then {\n            _isCurator = switch true do {\n                case (_ownerUID > 0): {\n                    getplayeruid player == _ownerVar\n                };\n                case (_isAdmin): {\n                    isserver || servercommandavailable _serverCommand\n                };\n                default {\n                    player == missionnamespace getvariable [_ownerVar,objnull]\n                };\n            };\n            if (_isCurator) then {\n                [true,true] spawn bis_fnc_forceCuratorInterface;\n                (\"RscDisplayCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",1e10];\n            };\n        };\n\n        //--- Check if player is server admin\n        if (_isAdmin) then {\n            _adminVar = _logic getvariable [\"adminVar\",\"\"];\n            _logic setvariable [\"adminVar\",nil];\n            if (isserver) then {\n                //--- Host\n                missionnamespace setvariable [_adminVar,player];\n            } else {\n                //--- Client\n                [_logic,_adminVar,_serverCommand] spawn {\n                    scriptname \"BIS_fnc_moduleCurator: Admin check\";\n\n                    _logic = _this select 0;\n                    _adminVar = _this select 1;\n                    _serverCommand = _this select 2;\n                    while {true} do {\n                        waituntil {sleep 0.1; servercommandavailable _serverCommand};\n                        missionnamespace setvariable [_adminVar,player];\n                        publicvariable _adminVar;\n                        _respawn = player addeventhandler [\"respawn\",format [\"%1 = _this select 0; publicvariable '%1';\",_adminVar]];\n\n                        waituntil {sleep 0.1; !servercommandavailable _serverCommand};\n                        missionnamespace setvariable [_adminVar,objnull];\n                        publicvariable _adminVar;\n                        player removeeventhandler [\"respawn\",_respawn];\n                    };\n                };\n            };\n        };\n\n        [_logic] spawn {\n            _logic = _this select 0;\n            sleep 1;\n            waituntil {alive player};\n\n            //--- Show warning when Zeus key is not assigned\n            if (count (actionkeys \"curatorInterface\") == 0) then {\n                [\n                    format [\n                        localize \"str_a3_cfgvehicles_modulecurator_f_keyNotAssigned\",\n                        ([\"IGUI\",\"WARNING_RGB\"] call bis_fnc_displaycolorget) call bis_fnc_colorRGBAtoHTML\n                    ]\n                ] call bis_fnc_guiMessage;\n            };\n\n            //--- Show hint about pinging for players\n            if (\n                isnil {profilenamespace getvariable \"bis_fnc_curatorPinged_done\"}\n                &&\n                {isTutHintsEnabled}\n                &&\n                {isnull getassignedcuratorlogic player}\n                &&\n                {player in curatoreditableobjects _logic}\n            ) then {\n                sleep 0.5;\n                [[\"Curator\",\"Ping\"]] call bis_fnc_advHint;\n            };\n        };\n\n        //--- Add local event handlers\n        _logic addeventhandler [\"curatorFeedbackMessage\",{_this call bis_fnc_showCuratorFeedbackMessage;}];\n        _logic addeventhandler [\"curatorPinged\",{_this call bis_fnc_curatorPinged;}];\n        _logic addeventhandler [\"curatorObjectPlaced\",{_this call bis_fnc_curatorObjectPlaced;}];\n        _logic addeventhandler [\"curatorObjectEdited\",{_this call bis_fnc_curatorObjectEdited;}];\n        _logic addeventhandler [\"curatorWaypointPlaced\",{_this call bis_fnc_curatorWaypointPlaced;}];\n\n        _logic addeventhandler [\"curatorObjectDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\n        _logic addeventhandler [\"curatorGroupDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\n        _logic addeventhandler [\"curatorWaypointDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\n        _logic addeventhandler [\"curatorMarkerDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\n\n        player call bis_fnc_curatorRespawn;\n    };\n};\n",
        "functionName": "ace_zeus_fnc_bi_moduleCurator"
      },
      {
        "fileName": "fnc_bi_moduleMine.sqf",
        "content": "/*\n * Author: Bohemia Interactive\n * Module function for spawning mines\n * Edited to remove forced map markers and mines being revealed to players\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_bi_moduleMine\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif (_activated) then {\n    _explosive = gettext (configFile >> \"CfgVehicles\" >> typeOf _logic >> \"explosive\");\n    if (_explosive != \"\") then {\n        _explosive = createvehicle [_explosive,position _logic,[],0,\"none\"];\n        _explosive attachto [_logic];\n\n        // Added by ace_zeus to control if mines are revealed\n        if (GVAR(revealMines) > 0) then {\n            //--- Reveal the mine to curator's side\n            {\n                _side = (getassignedcuratorunit _x) call bis_fnc_objectSide;\n                _side revealmine _explosive;\n            } forEach (objectcurators _logic);\n\n            if (GVAR(revealMines) > 1) then {\n                //--- Mark minefields in the map\n                [] spawn bis_fnc_drawMinefields;\n            };\n        };\n\n        //--- Show hint to curator who placed the object\n        [[[\"Curator\",\"PlaceMines\"],nil,nil,nil,nil,nil,nil,true],\"bis_fnc_advHint\",_logic] call bis_fnc_mp;\n\n        waitUntil {sleep 0.1; isnull _explosive || isnull _logic || !alive _logic};\n        if (isnull _logic) then {deletevehicle _explosive;} else {_explosive setdamage 1;};\n        deletevehicle _logic;\n    };\n};\n",
        "functionName": "ace_zeus_fnc_bi_moduleMine"
      },
      {
        "fileName": "fnc_bi_moduleProjectile.sqf",
        "content": "/*\n * Author: Bohemia Interactive\n * Module function for spawning projectiles\n * Used by Curator artillery modules etc\n * Edited to remove radio warning and add ballistics support\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_bi_moduleProjectile\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n_fnc_scriptNameParentTemp = if !(isNil '_fnc_scriptName') then {_fnc_scriptName} else {'BIS_fnc_moduleProjectile'};\nprivate _fnc_scriptNameParent = _fnc_scriptNameParentTemp;\n_fnc_scriptNameParentTemp = nil;\n\nprivate _fnc_scriptName = 'BIS_fnc_moduleProjectile';\nscriptname _fnc_scriptName;\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif ({local _x} count (objectcurators _logic) > 0) then {\n    //--- Reveal the circle to curators\n    _logic hideobject false;\n    _logic setpos position _logic;\n};\nif !(isserver) exitWith {};\n\nif (_activated) then {\n    _ammo = _logic getVariable [\"type\",gettext (configFile >> \"CfgVehicles\" >> typeOf _logic >> \"ammo\")];\n    if (_ammo != \"\") then {\n        _CfgAmmo = configFile >> \"CfgAmmo\" >> _ammo;\n        _dirVar = _fnc_scriptname + typeOf _logic;\n        _logic setdir (missionnamespace getVariable [_dirVar,direction _logic]); //--- Restore custom direction\n        _pos = getposatl _logic;\n        _posAmmo = +_pos;\n        _posAmmo set [2,0];\n        _dir = direction _logic;\n        _simulation = tolower gettext (configFile >> \"CfgAmmo\" >> _ammo >> \"simulation\");\n        _altitude = 0;\n        _velocity = [];\n        _attach = false;\n        _radio = \"\";\n        _delay = 60;\n        _sound = \"\";\n        _soundSourceClass = \"\";\n        _hint = [];\n        _shakeStrength = 0;\n        _shakeRadius = 0;\n        switch (_simulation) do {\n            case \"shotshell\": {\n                _altitude = 1000;\n                _velocity = [0,0,-100];\n                _radio = \"SentGenIncoming\";\n                _sounds = if (getnumber (_cfgAmmo >> \"hit\") < 200) then {[\"mortar1\",\"mortar2\"]} else {[\"shell1\",\"shell2\",\"shell3\",\"shell4\"]};\n                _sound = selectRandom _sounds;\n                _hint = [\"Curator\",\"PlaceOrdnance\"];\n                _shakeStrength = 0.01;\n                _shakeRadius = 300;\n            };\n            case \"shotsubmunitions\": {\n                _posAmmo = [_posAmmo,500,_dir + 180] call bis_fnc_relpos;\n                _altitude = 1000 - ((getterrainheightasl _posAmmo) - (getterrainheightasl _pos));\n                _posAmmo set [2,_altitude];\n                _velocity = [sin _dir * 68,cos _dir * 68,-100];\n                _radio = \"SentGenIncoming\";\n                _hint = [\"Curator\",\"PlaceOrdnance\"];\n                _shakeStrength = 0.02;\n                _shakeRadius = 500;\n            };\n            case \"shotilluminating\": {\n                _altitude = 66;\n                _velocity = [wind select 0,wind select 1,30];\n                _sound = \"SN_Flare_Fired_4\";\n                _soundSourceClass = \"SoundFlareLoop_F\";\n            };\n            case \"shotnvgmarker\";\n            case \"shotsmokex\": {\n                _altitude = 0;\n                _velocity = [0,0,0];\n                _attach = true;\n            };\n            default {[\"Ammo simulation '%1' is not supported\",_simulation] call bis_fnc_error;};\n        };\n        _fnc_playRadio = {\n            if (_radio != \"\") then {\n                _entities = (getposatl _logic) nearentities [\"All\",100];\n                _sides = [];\n                {\n                    if (isplayer _x) then {\n                        _side = side group _x;\n                        if (_side in [east,west,resistance,civilian]) then {\n                            //--- Play radio (only if it wasn't played recently)\n                            if (CBA_missionTime > _x getVariable [\"BIS_fnc_moduleProjectile_radio\",-_delay]) then {\n                                [[_side,_radio,\"side\"],\"bis_fnc_sayMessage\",_x] call bis_fnc_mp;\n                                _x setVariable [\"BIS_fnc_moduleProjectile_radio\",CBA_missionTime + _delay];\n                            };\n                        };\n                    };\n                } forEach _entities;\n            };\n        };\n        if (count _hint > 0 && {count objectCurators _logic > 0}) then {\n            [[_hint,nil,nil,nil,nil,nil,nil,true],\"bis_fnc_advHint\",objectcurators _logic] call bis_fnc_mp;\n        };\n        if (count _velocity == 3) then {\n            _altitude = (_logic getVariable [\"altitude\",_altitude]) call bis_fnc_parsenumber;\n            _radio = _logic getVariable [\"radio\",_radio];\n\n            //--- Create projectile\n            _posAmmo set [2,_altitude];\n            _projectile = createvehicle [_ammo,_posAmmo,[],0,\"none\"];\n            _projectile setpos _posAmmo;\n            _projectile setvelocity _velocity;\n            if (_attach) then {_projectile attachto [_logic,[0,0,_altitude]];};\n\n           // Added by ace_zeus for ace_frag compatibility\n            if (!isNil QEFUNC(frag,addPfhRound)) then {\n                [objNull, _ammo, _projectile, true] call EFUNC(frag,addPfhRound);\n            };\n\n            //--- Play sound\n            if (_sound != \"\") then {[[_logic,_sound,\"say3D\"],\"bis_fnc_sayMessage\"] call bis_fnc_mp;};\n\n            //--- Create sound source\n            _soundSource = if (_soundSourceClass != \"\") then {createSoundSource [_soundSourceClass,_pos,[],0]} else {objnull};\n\n            // Added by ace_zeus to toggle ordnance radio message\n            if (GVAR(radioOrdnance)) then {\n                //--- Play radio warning\n                [] call _fnc_playRadio;\n            };\n\n            //--- Update\n            if (_attach) then {\n                waitUntil {\n                    _soundSource setposatl getposatl _projectile;\n                    sleep 1;\n                    isnull _projectile || isnull _logic\n                };\n            } else {\n                waitUntil {\n                    _soundSource setposatl getposatl _projectile;\n\n                    if (getposatl _logic distance _pos > 0 || direction _logic != _dir) then {\n                        _posNew = getposasl _logic;\n                        _dirDiff = direction _logic - _dir;\n                        _posNew = [_posNew,[getposasl _projectile,_pos] call bis_fnc_distance2d,direction _logic + 180] call bis_fnc_relpos;\n                        _posNew set [2,getposasl _projectile select 2];\n                        _projectile setvelocity ([velocity _projectile,-_dirDiff] call bis_fnc_rotatevector2d);\n                        _projectile setposasl _posNew;\n                        _pos = getposatl _logic;\n                        _dir = direction _logic;\n                        missionnamespace setVariable [_dirVar,_dir];\n                    };\n                    sleep 0.1;\n                    isnull _projectile || isnull _logic\n                };\n            };\n            deletevehicle _projectile;\n            deletevehicle _soundSource;\n            if (count objectcurators _logic > 0) then {\n\n                //--- Delete curator spawned logic\n                if (_shakeStrength > 0) then {\n                    if (_simulation == \"shotsubmunitions\") then {sleep 0.5;};\n                    [[_shakeStrength,0.7,[position _logic,_shakeRadius]],\"bis_fnc_shakeCuratorCamera\"] call bis_fnc_mp;\n                };\n                deletevehicle _logic;\n            } else {\n\n                //--- Repeat to achieve permanent effect\n                _repeat = _logic getVariable [\"repeat\",0] > 0;\n                if (_repeat) then {\n                    [_logic,_units,_activated] call bis_fnc_moduleprojectile;\n                } else {\n                    deletevehicle _logic;\n                };\n            };\n        } else {\n            deletevehicle _logic;\n        };\n    } else {\n        [\"Cannot create projectile, 'ammo' config attribute is missing in %1\",typeOf _logic] call bis_fnc_error;\n    };\n};\n",
        "functionName": "ace_zeus_fnc_bi_moduleProjectile"
      },
      {
        "fileName": "fnc_bi_moduleRemoteControl.sqf",
        "content": "/*\n * Author: Bohemia Interactive\n * Module function for remote controlling units as zeus\n * Edited to remove global wind sound\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_bi_moduleRemoteControl\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n_logic = _this select 0;\n_units = _this select 1;\n_activated = _this select 2;\n\nif (_activated && local _logic && !isnull curatorcamera) then {\n\n    //--- Terminate when remote control is already in progress\n    if !(isnull (missionnamespace getvariable [\"bis_fnc_moduleRemoteControl_unit\",objnull])) exitwith {};\n\n    //--- Get unit under cursor\n    _unit = objnull;\n    _mouseOver = missionnamespace getvariable [\"bis_fnc_curatorObjectPlaced_mouseOver\",[\"\"]];\n    if ((_mouseOver select 0) == typename objnull) then {_unit = _mouseOver select 1;};\n    _unit = effectivecommander _unit;\n\n    //--- Check if the unit is suitable\n    _error = \"\";\n    if !(side group _unit in [east,west,resistance,civilian]) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorEmpty\";};\n    if (isplayer _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorPlayer\";};\n    if !(alive _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorDestroyed\";};\n    if (isnull _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorNull\";};\n    if !(isnull (_unit getvariable [\"bis_fnc_moduleRemoteControl_owner\",objnull])) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorControl\";};\n    if (isuavconnected vehicle _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorControl\";};\n\n    if (_error == \"\") then {\n        _unit spawn {\n            scriptname \"bis_fnc_moduleRemoteControl: Loop\";\n            _unit = _this;\n            _vehicle = vehicle _unit;\n            _vehicleRole = str assignedvehiclerole _unit;\n\n            bis_fnc_moduleRemoteControl_unit = _unit;\n            _unit setvariable [\"bis_fnc_moduleRemoteControl_owner\",player,true];\n\n            // Added by ace_zeus to toggle remote control wind sound\n            if (GVAR(remoteWind)) then {\n                //--- Play wind cue to all players\n                [format [\"wind%1\",ceil random 5],\"bis_fnc_playsound\"] call bis_fnc_mp;\n            };\n\n            _blur = ppeffectcreate [\"RadialBlur\",144];\n            _blur ppeffectenable true;\n            _blur ppeffectadjust [0,0,0.3,0.3];\n            _blur ppeffectcommit 0;\n            _blur ppeffectadjust [0.03,0.03,0.1,0.1];\n            _blur ppeffectcommit 1;\n\n            _cam = \"camera\" camcreate getposatl curatorcamera;\n            _cam cameraeffect [\"internal\",\"back\"];\n            _cam campreparetarget (screentoworld [0.5,0.5]);\n            _cam camcommitprepared 0;\n            _cam campreparetarget _unit;\n            _cam campreparefov 0.1;\n            _cam camcommitprepared 1;\n            sleep 0.75;\n\n            (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black out\",0.25];\n            sleep 0.25;\n\n            //--- Wait for interface to close\n            (finddisplay 312) closedisplay 2;\n            waituntil {isnull curatorcamera};\n\n            //--- Switch\n            player remotecontrol _unit;\n            if (cameraon != _vehicle) then {\n                _vehicle switchcamera cameraview;\n            };\n\n            ppeffectdestroy _blur;\n            _cam cameraeffect [\"terminate\",\"back\"];\n            camdestroy _cam;\n\n            _color = ppeffectcreate [\"colorCorrections\",1896];\n            _color ppeffectenable true;\n            _color ppeffectadjust [1,1,0,[0,0,0,1],[1,1,1,1],[0,0,0,0],[0.9,0.0,0,0,0,0.5,1]];\n            _color ppeffectcommit 0;\n\n            _curator = getassignedcuratorlogic player;\n            [_curator,\"curatorObjectRemoteControlled\",[_curator,player,_unit,true]] call bis_fnc_callScriptedEventHandler;\n            [[\"Curator\",\"RemoteControl\"],nil,nil,nil,nil,nil,nil,true] call bis_fnc_advHint;\n\n            sleep 0.3;\n            _color ppeffectadjust [1,1,0,[0,0,0,1],[1,1,1,1],[0,0,0,0],[0.9,0.85,0,0,0,0.5,1]];\n            _color ppeffectcommit 0.3;\n            (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",0.5];\n\n            //--- Back to player\n            _vehicle = vehicle _unit;\n            _vehicleRole = str assignedvehiclerole _unit;\n            _rating = rating player;\n            waituntil {\n                //--- Refresh when vehicle or vehicle role changes\n                if ((vehicle _unit != _vehicle || str assignedvehiclerole _unit != _vehicleRole) && {alive _unit}) then {\n                    player remotecontrol _unit;\n                    _vehicle = vehicle _unit;\n                    _vehicleRole = str assignedvehiclerole _unit;\n                };\n                if (rating player < _rating) then {\n                    player addrating (-rating player + _rating);\n                };\n                sleep 0.01;\n                !isnull curatorcamera\n                ||\n                {cameraon == vehicle player}\n                ||\n                {!alive _unit} //--- Also isnull check, objNull is not alive\n                ||\n                {!alive player}\n                ||\n                {isnull getassignedcuratorlogic player}\n            };\n\n            player addrating (-rating player + _rating);\n            objnull remotecontrol _unit;\n            _unit setvariable [\"bis_fnc_moduleRemoteControl_owner\",nil,true];\n\n            if (alive player) then {\n                //--- Death screen\n                if (\n                    isnull curatorcamera\n                    &&\n                    {cameraon != vehicle player}\n                    &&\n                    {!isnull _unit}\n                    &&\n                    {!isnull getassignedcuratorlogic player}\n                    //&&\n                    //{(_unit getvariable [\"bis_fnc_moduleRemoteControl_owner\",objnull] == player)}\n                ) then {\n                    sleep 2;\n                    (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black out\",1];\n                    sleep 1;\n                };\n                if !(isnull _unit) then {\n                    _unitPos = getposatl _unit;\n                    _camPos = [_unitPos,10,direction _unit + 180] call bis_fnc_relpos;\n                    _camPos set [2,(_unitPos select 2) + (getterrainheightasl _unitPos) - (getterrainheightasl _camPos) + 10];\n                    //[_camPos,_unit] call bis_fnc_setcuratorcamera;\n                    (getassignedcuratorlogic player) setvariable [\"bis_fnc_modulecuratorsetcamera_params\",[_camPos,_unit]];\n                };\n\n                sleep 0.1; //--- Engine needs a delay in case controlled unit was deleted\n                (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",1e10];\n                opencuratorinterface;\n                ppeffectdestroy _color;\n\n                waituntil {!isnull curatorcamera};\n            } else {\n                ppeffectdestroy _color;\n            };\n            player switchcamera cameraview;\n            bis_fnc_moduleRemoteControl_unit = nil;\n            (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",1];\n            [_curator,\"curatorObjectRemoteControlled\",[_curator,player,_unit,false]] call bis_fnc_callScriptedEventHandler;\n            sleep 0.01;\n        };\n    } else {\n        [objnull,_error] call bis_fnc_showCuratorFeedbackMessage;\n    };\n    deletevehicle _logic;\n};\n",
        "functionName": "ace_zeus_fnc_bi_moduleRemoteControl"
      },
      {
        "fileName": "fnc_getModuleDestination.sqf",
        "content": "/*\n * Author: PabstMirror\n * Allows zeus to click to indicate a 3d position.\n *\n * Arguments:\n * 0: The souce object <OBJECT>\n * 1: Code to run when position is ready <CODE>\n * - Code is passed\n *  0: Successful <BOOL>\n *  1: Object <OBJECT>\n *  2: Position ASL <ARRAY>\n *  3: State of Shift <BOOL>\n *  4: State of Ctrl <BOOL>\n *  5: State of Alt <BOOL>\n * 2: Text <STRING> (default: \"\")\n * 3: Icon image file <STRING> (default: \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\")\n * 4: Icon color <ARRAY> (default: [1,0,0,1])\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, {systemChat format [\"Done %1\", _this]}] call ace_zeus_fnc_getModuleDestination\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_object\", \"_code\", [\"_text\", \"\"], [\"_icon\", \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\"], [\"_color\", [1,0,0,1]]];\n\nif (missionNamespace getVariable [QGVAR(moduleDestination_running), false]) exitWith {\n    [false, _object, [0,0,0], false, false, false] call _code;\n    ERROR(\"getModuleDestination already running\");\n};\n\nGVAR(moduleDestination_running) = true;\n\n// Add mouse button eh for the zeus display (triggered from 2d or 3d)\nGVAR(moduleDestination_displayEHMouse) = [findDisplay 312, \"mouseButtonDown\", {\n    params [\"\", \"_mouseButton\", \"\", \"\", \"_shift\", \"_ctrl\", \"_alt\"];\n\n    if (_mouseButton != 0) exitWith {}; // Only watch for LMB\n    TRACE_2(\"placed\",_object,_mousePosASL);\n\n    _thisArgs params [\"_object\", \"_code\"];\n\n    // Get mouse position on 2D map or 3D world\n    private _mousePosASL = if (ctrlShown ((findDisplay 312) displayCtrl 50)) then {\n        private _pos2d = (((findDisplay 312) displayCtrl 50) ctrlMapScreenToWorld getMousePosition);\n        _pos2d set [2, getTerrainHeightASL _pos2d];\n        _pos2d\n    } else {\n        AGLToASL (screenToWorld getMousePosition);\n    };\n\n    [true, _object, _mousePosASL, _shift, _ctrl, _alt] call _code;\n    GVAR(moduleDestination_running) = false;\n}, [_object, _code]] call CBA_fnc_addBISEventHandler;\n\n// Add key eh for the zeus display (triggered from 2d or 3d)\nGVAR(moduleDestination_displayEHKeyboard) = [findDisplay 312, \"KeyDown\", {\n    params [\"\", \"_keyCode\", \"_shift\", \"_ctrl\", \"_alt\"];\n\n    if (_keyCode != 1) exitWith {}; // Only watch for ESC\n    TRACE_2(\"aborted\",_object,_mousePosASL);\n\n    _thisArgs params [\"_object\", \"_code\"];\n\n    // Get mouse position on 2D map or 3D world\n    private _mousePosASL = if (ctrlShown ((findDisplay 312) displayCtrl 50)) then {\n        private _pos2d = (((findDisplay 312) displayCtrl 50) ctrlMapScreenToWorld getMousePosition);\n        _pos2d set [2, getTerrainHeightASL _pos2d];\n        _pos2d\n    } else {\n        AGLToASL (screenToWorld getMousePosition);\n    };\n\n    [false, _object, _mousePosASL, _shift, _ctrl, _alt] call _code;\n    GVAR(moduleDestination_running) = false;\n    true\n}, [_object, _code]] call CBA_fnc_addBISEventHandler;\n\n// Add draw EH for the zeus map - draws the 2D icon and line\nGVAR(moduleDestination_mapDrawEH) = [((findDisplay 312) displayCtrl 50), \"draw\", {\n    params [\"_mapCtrl\"];\n    _thisArgs params [\"_object\", \"_text\", \"_icon\", \"_color\"];\n\n    private _pos2d = (((findDisplay 312) displayCtrl 50) ctrlMapScreenToWorld getMousePosition);\n    _mapCtrl drawIcon [_icon, _color, _pos2d, 24, 24, 45, _text, 1, 0.03, \"TahomaB\", \"right\"];\n    _mapCtrl drawLine [getPos _object, _pos2d, _color];\n}, [_object, _text, _icon, _color]] call CBA_fnc_addBISEventHandler;\n\n// Add draw EH for 3D camera view - draws the 3D icon and line\n[{\n    (_this select 0) params [\"_object\", \"_code\", \"_text\", \"_icon\", \"_color\"];\n    if ((isNull _object) || {isNull findDisplay 312} || {!isNull findDisplay 49}) then {\n        TRACE_3(\"null-exit\",isNull _object,isNull findDisplay 312,isNull findDisplay 49);\n        GVAR(moduleDestination_running) = false;\n        [false, _object, [0,0,0], false, false, false] call _code;\n    };\n    if (GVAR(moduleDestination_running)) then {\n        // Draw the 3d icon and line\n        private _mousePosAGL = screenToWorld getMousePosition;\n        drawIcon3D [_icon, _color, _mousePosAGL, 1.5, 1.5, 45, _text];\n        drawLine3D [_mousePosAGL, ASLtoAGL (getPosASL _object), _color];;\n    } else {\n        TRACE_4(\"cleaning up\",_this select 1,GVAR(moduleDestination_displayEHMouse),GVAR(moduleDestination_displayEHKeyboard),GVAR(moduleDestination_mapDrawEH));\n        (_this select 1) call CBA_fnc_removePerFrameHandler;\n        (findDisplay 312) displayRemoveEventHandler [\"mouseButtonDown\", GVAR(moduleDestination_displayEHMouse)];\n        (findDisplay 312) displayRemoveEventHandler [\"KeyDown\", GVAR(moduleDestination_displayEHKeyboard)];\n        ((findDisplay 312) displayCtrl 50) ctrlRemoveEventHandler [\"draw\", GVAR(moduleDestination_mapDrawEH)];\n        GVAR(moduleDestination_displayEHMouse) = nil;\n        GVAR(moduleDestination_displayEHKeyboard) = nil;\n        GVAR(moduleDestination_mapDrawEH) = nil;\n    };\n}, 0, [_object, _code, _text, _icon, _color]] call CBA_fnc_addPerFrameHandler;\n",
        "functionName": "ace_zeus_fnc_getModuleDestination"
      },
      {
        "fileName": "fnc_handleZeusUnitAssigned.sqf",
        "content": "/*\n * Author: SilentSpike\n * Contextually removes addons (given in ACE_Curator) from zeus based on their required addon(s)\n *\n * ACE_Curator format:\n * ModuleAddon = \"RequiredAddon\";\n * OR\n * ModuleAddon[] = {\"RequiredAddon1\",\"RequiredAddon2\",...}\n *\n * Arguments:\n * 0: The zeus logic <LOGIC>\n * 1: The zeus player <UNIT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, bob] call ace_zeus_fnc_handleZeusUnitAssigned\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nif !(isClass (configFile >> \"ACE_Curator\")) exitWith { ERROR(\"The ACE_Curator class does not exist\") };\n\nparams [\"_logic\"];\nprivate _removeAddons = [];\n\nprivate _numCfgs = count (configFile >> \"ACE_Curator\");\nfor \"_n\" from 0 to (_numCfgs - 1) do {\n    private _cfg = (configFile >> \"ACE_Curator\") select _n;\n\n    if (isArray _cfg) then {\n        _requiredAddon = getArray _cfg;\n        {\n            if !(isClass (configFile >> \"CfgPatches\" >> _x)) exitWith {\n                _removeAddons pushBack (configName _cfg);\n            };\n        } forEach _requiredAddon;\n    };\n\n    if (isText _cfg) then {\n        _requiredAddon = getText _cfg;\n        if !(isClass (configFile >> \"CfgPatches\" >> _requiredAddon)) then {\n            _removeAddons pushBack (configName _cfg);\n        };\n    };\n};\n\n_logic removeCuratorAddons _removeAddons;\n",
        "functionName": "ace_zeus_fnc_handleZeusUnitAssigned"
      },
      {
        "fileName": "fnc_moduleAddArsenal.sqf",
        "content": "/*\n * Author: alganthe\n * Add a full arsenal to an object\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\nif (!local _logic) exitWith {};\n\nprivate _object = attachedTo _logic;\nTRACE_3(\"moduleAddArsenal\",_logic,_object,typeOf _object);\n\nswitch (true) do {\n    case (isNull _object): {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    };\n    case (isPlayer _object): {\n        [\"str_a3_cfgvehicles_moduleremotecontrol_f_errorPlayer\"] call FUNC(showMessage);\n    };\n    case (!alive _object): {\n        [LSTRING(OnlyAlive)] call FUNC(showMessage);\n    };\n    default {\n        TRACE_1(\"BIS_fnc_arsenal: AmmoboxInit\",_object);\n        // Global Effects: \"Action to access the Arsenal will be added automatically on all clients.\"\n        [\"AmmoboxInit\", [_object, true]] call BIS_fnc_arsenal;\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleAddArsenal"
      },
      {
        "fileName": "fnc_moduleAddOrRemoveFRIES.sqf",
        "content": "/*\n * Author: 654wak654\n * Add/Removes FRIES from a helicopter.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleAddOrRemoveFRIES\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && {local _logic}) exitWith {};\n\nif !([\"ace_fastroping\"] call EFUNC(common,isModLoaded)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    (GETMVAR(BIS_fnc_curatorObjectPlaced_mouseOver,[\"\"])) params [\"_mouseOverType\", \"_mouseOverUnit\"];\n\n    if (_mouseOverType != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        if !(alive _mouseOverUnit) then {\n            [LSTRING(OnlyAlive)] call FUNC(showMessage);\n        } else {\n            private _config = configFile >> \"CfgVehicles\" >> typeOf _mouseOverUnit;\n            private _displayName = getText (_config >> \"displayName\");\n            if !(isNumber (_config >> QEGVAR(fastroping,enabled))) then {\n                [LSTRING(NotFastRopeCompatible), _displayName] call FUNC(showMessage);\n            } else {\n                private _fries = GETVAR(_mouseOverUnit,EGVAR(fastroping,FRIES),objNull);\n                if (isNull _fries) then {\n                    [QGVAR(equipFries), [_mouseOverUnit]] call CBA_fnc_serverEvent;\n                } else {\n                    if ([_mouseOverUnit] call EFUNC(fastroping,canCutRopes)) then {\n                        [LSTRING(CantRemoveFRIES), _displayName] call FUNC(showMessage);\n                    } else {\n                        [_mouseOverUnit] call EFUNC(fastroping,cutRopes);\n                        deleteVehicle _fries;\n                    };\n                };\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleAddOrRemoveFRIES"
      },
      {
        "fileName": "fnc_moduleAddSpareTrack.sqf",
        "content": "/*\n * Author: Jonpas\n * Adds a Spare Track to the vehicle.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleAddSpareTrack\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif !([\"ace_cargo\"] call EFUNC(common,isModLoaded) && [\"ace_repair\"] call EFUNC(common,isModLoaded)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    (GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"])) params [\"_mouseOverType\", \"_mouseOverUnit\"];\n\n    if (_mouseOverType != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        if !(alive _mouseOverUnit) then {\n            [LSTRING(OnlyAlive)] call FUNC(showMessage);\n        } else {\n            if (getNumber (configFile >> \"CfgVehicles\" >> \"ACE_Track\" >> QEGVAR(cargo,size)) > [_mouseOverUnit] call EFUNC(cargo,getCargoSpaceLeft)) then {\n                [LSTRING(OnlyEnoughCargoSpace)] call FUNC(showMessage);\n            } else {\n                [\"ace_addCargo\", [\"ACE_Track\", _mouseOverUnit, 1, true]] call CBA_fnc_localEvent;\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleAddSpareTrack"
      },
      {
        "fileName": "fnc_moduleAddSpareWheel.sqf",
        "content": "/*\n * Author: Jonpas\n * Adds a Spare Wheel to the vehicle.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleAddSpareWheel\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif !([\"ace_cargo\"] call EFUNC(common,isModLoaded) && [\"ace_repair\"] call EFUNC(common,isModLoaded)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    (GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"])) params [\"_mouseOverType\", \"_mouseOverUnit\"];\n\n    if (_mouseOverType != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        if !(alive _mouseOverUnit) then {\n            [LSTRING(OnlyAlive)] call FUNC(showMessage);\n        } else {\n            if (getNumber (configFile >> \"CfgVehicles\" >> \"ACE_Wheel\" >> QEGVAR(cargo,size)) > [_mouseOverUnit] call EFUNC(cargo,getCargoSpaceLeft)) then {\n                [LSTRING(OnlyEnoughCargoSpace)] call FUNC(showMessage);\n            } else {\n                [\"ace_addCargo\", [\"ACE_Wheel\", _mouseOverUnit, 1, true]] call CBA_fnc_localEvent;\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleAddSpareWheel"
      },
      {
        "fileName": "fnc_moduleCaptive.sqf",
        "content": "/*\n * Author: SilentSpike\n * Flips the capture state of the unit the module is placed on.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleCaptive\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif (isNil QEFUNC(captives,setHandcuffed)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    private _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\n\n    if ((_mouseOver select 0) != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        private _unit = effectivecommander (_mouseOver select 1);\n\n        if !(_unit isKindOf \"CAManBase\") then {\n            [LSTRING(OnlyInfantry)] call FUNC(showMessage);\n        } else {\n            if !(alive _unit) then {\n                [LSTRING(OnlyAlive)] call FUNC(showMessage);\n            } else {\n                private _captive = GETVAR(_unit,EGVAR(captives,isHandcuffed),false);\n                // Event initalized by ACE_Captives\n                [QEGVAR(captives,setHandcuffed), [_unit, !_captive], _unit] call CBA_fnc_targetEvent;\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleCaptive"
      },
      {
        "fileName": "fnc_moduleConfigurePylons.sqf",
        "content": "/*\n * Author: 654wak654\n * Opens the pylon configuration menu for the aircraft module is placed on.\n *\n * Arguments:\n * 0: Module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleConfigurePylons\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (canSuspend) exitWith {[FUNC(moduleConfigurePylons), _this] call CBA_fnc_directCall;};\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && {local _logic}) exitWith {};\n\nprivate _aircraft = attachedTo _logic;\n\ndeleteVehicle _logic;\n\nif (isNull _aircraft) exitWith {\n    [LSTRING(NothingSelected)] call FUNC(showMessage);\n};\nif (!alive _aircraft) exitWith {\n    [LSTRING(OnlyAlive)] call FUNC(showMessage);\n};\n\n[_aircraft, true] call EFUNC(pylons,showDialog);\n",
        "functionName": "ace_zeus_fnc_moduleConfigurePylons"
      },
      {
        "fileName": "fnc_moduleGarrison.sqf",
        "content": "/*\n * Author: alganthe\n * Module calling the garrison function.\n *\n * Arguments:\n * 0: Module logic <OBJECT>\n * 1: Position of the module <POSITION>\n * 2: Radius of the task <NUMBER>\n * 3: Filling mode of the garrison function <NUMBER>\n * 4: Enable or not top down filling <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [2203.64, 2281.47, 1], 20, 2, true] call ace_zeus_fnc_moduleGarrison\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_pos\", \"_radius\" ,\"_mode\" , \"_topDownMode\", \"_teleport\"];\n\nprivate _unit = (attachedTo _logic);\nprivate _building = nearestBuilding (getPosASL _unit);\n\n// Handles errors\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n    case (_unit distance _building < 500): {\n        [LSTRING(BuildingTooFar)] call _fnc_errorAndClose;\n    };\n};\n\nprivate _units = units _unit;\n// Make sure all units are disembarked\n{\n    if (vehicle _x != _x) then {\n        moveOut _x;\n    };\n} forEach _units;\n\n[_pos, [\"Building\"], _units, _radius, _mode, _topDownMode, _teleport] call EFUNC(ai,garrison);\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleGarrison"
      },
      {
        "fileName": "fnc_moduleGlobalSetSkill.sqf",
        "content": "/*\n * Author: SilentSpike\n * PV event handler to update the AI skill on all machines when set by zeus module\n *\n * Arguments:\n * 0: Variable name <STRING>\n * 1: Variable new value <ANY>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleGlobalSetSkill\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n_this params [\"_varName\",\"_varValue\"];\n_varValue params [\"_general\",\"_accuracy\",\"_handling\",\"_spotting\",\"_cover\",\"_combat\"];\nTRACE_1(\"Params\",_this);\n\nTRACE_6(\"AI settings updated\",GVAR(GlobalSkillAI));\n{\n    if (local _x) then {\n        _x setSkill [\"general\", _general];\n        _x setSkill [\"commanding\", _general];\n        _x setSkill [\"courage\", _general];\n        _x setSkill [\"aimingAccuracy\", _accuracy];\n        _x setSkill [\"aimingShake\", _handling];\n        _x setSkill [\"aimingSpeed\", _handling];\n        _x setSkill [\"reloadSpeed\", _handling];\n        _x setSkill [\"spotDistance\", _spotting];\n        _x setSkill [\"spotTime\", _spotting];\n\n        if (_cover) then {\n            _x enableAI \"COVER\";\n        } else {\n            _x disableAI \"COVER\";\n        };\n\n        if (_combat) then {\n            _x enableAI \"AUTOCOMBAT\";\n        } else {\n            _x disableAI \"AUTOCOMBAT\";\n        };\n    };\n} forEach allUnits;\n",
        "functionName": "ace_zeus_fnc_moduleGlobalSetSkill"
      },
      {
        "fileName": "fnc_moduleGroupSide.sqf",
        "content": "/*\n * Author: SilentSpike\n * Zeus module function to change side of a group on dialog confirmation\n *\n * Arguments:\n * 0: Unit to target <OBJECT>\n * 1: Chosen side <SIDE>\n *\n * Return Value:\n * None\n *\n * Example:\n * [this, west] call ace_zeus_fnc_moduleGroupSide\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_unit\",\"_newSide\"];\nprivate _side = side _unit;\n\n// Nothing to do here\nif (_side == _newSide) exitWith {};\n\nprivate _oldGroup = group _unit;\nprivate _newGroup = createGroup _newSide;\n\n// Pretty hacky, will replace units return group with this new group if unconcious\nif (GETVAR(_unit,ACE_isUnconscious,false) && {GETMVAR(EGVAR(medical,moveUnitsFromGroupOnUnconscious),false)}) then {\n        private _previousGroupsList = _unit getVariable [QEGVAR(common,previousGroupSwitchTo), []];\n\n        {\n            if (\"ACE_isUnconscious\" == (_x select 2)) exitWith {\n                _x set [0,_newGroup];\n                _x set [1,_newSide];\n                _previousGroupsList set [_forEachIndex, _x];\n            };\n        } forEach _previousGroupsList;\n\n        _unit setVariable [QEGVAR(common,previousGroupSwitchTo), _previousGroupsList, true];\n} else {\n    (units _unit) joinSilent _newGroup;\n    deleteGroup _oldGroup;\n};\n",
        "functionName": "ace_zeus_fnc_moduleGroupSide"
      },
      {
        "fileName": "fnc_moduleLoadIntoCargo.sqf",
        "content": "/*\n * Author: 654wak654\n * Loads the object module is placed on into selected vehicle.\n *\n * Arguments:\n * 0: Module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleLoadIntoCargo\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nif (canSuspend) exitWith {[FUNC(moduleLoadIntoCargo), _this] call CBA_fnc_directCall;};\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && {local _logic}) exitWith {};\n\nprivate _cargo = attachedTo _logic;\n\ndeleteVehicle _logic;\n\nif !(missionNamespace getVariable [QEGVAR(cargo,enable), false]) exitWith {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n};\nif (isNull _cargo) exitWith {\n    [LSTRING(NothingSelected)] call FUNC(showMessage);\n};\nif (!alive _cargo) exitWith {\n    [LSTRING(OnlyAlive)] call FUNC(showMessage);\n};\n\n[\n    _cargo,\n    {\n        params [\"_successful\", \"_cargo\", \"_mousePosASL\"];\n        if (!_successful) exitWith {};\n\n        private _holder = (nearestObjects [ASLToAGL _mousePosASL, EGVAR(cargo,cargoHolderTypes), 5]) param [0, objNull];\n        if (isNull _holder) exitWith {\n            [LSTRING(NothingSelected)] call FUNC(showMessage);\n        };\n        if (!alive _holder) exitWith {\n            [LSTRING(OnlyAlive)] call FUNC(showMessage);\n        };\n\n        private _displayName = [_cargo] call EFUNC(common,getName);\n        if ([_cargo, _holder] call EFUNC(cargo,loadItem)) then {\n            private _loadedItem = [localize ELSTRING(cargo,LoadedItem), \"<br/>\", \" \"] call CBA_fnc_replace;\n            private _holderDisplayName = [_holder] call EFUNC(common,getName);\n            [_loadedItem, _displayName, _holderDisplayName] call FUNC(showMessage);\n        } else {\n            private _loadingFailed = [localize ELSTRING(cargo,LoadingFailed), \"<br/>\", \" \"] call CBA_fnc_replace;\n            [_loadingFailed, _displayName] call FUNC(showMessage);\n        };\n    },\n    localize LSTRING(ModuleLoadIntoCargo_DisplayName),\n    \"a3\\ui_f\\data\\IGUI\\Cfg\\Actions\\loadVehicle_ca.paa\"\n] call FUNC(getModuleDestination);\n",
        "functionName": "ace_zeus_fnc_moduleLoadIntoCargo"
      },
      {
        "fileName": "fnc_moduleRemoveArsenal.sqf",
        "content": "/*\n * Author: alganthe\n * Remove arsenal from an object\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\nif (!local _logic) exitWith {};\n\nprivate _object = attachedTo _logic;\nTRACE_3(\"moduleRemoveArsenal\",_logic,_object,typeOf _object);\n\nswitch (true) do {\n    case (isNull _object): {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    };\n    case (isPlayer _object): {\n        [\"str_a3_cfgvehicles_moduleremotecontrol_f_errorPlayer\"] call FUNC(showMessage);\n    };\n    case (!alive _object): {\n        [LSTRING(OnlyAlive)] call FUNC(showMessage);\n    };\n    default {\n        TRACE_1(\"Calling removeVirtualXXXCargo functions\",_object);\n        [_object, (_object call BIS_fnc_getVirtualItemCargo), true] call BIS_fnc_removeVirtualItemCargo;\n        [_object, (_object call BIS_fnc_getVirtualWeaponCargo), true] call BIS_fnc_removeVirtualWeaponCargo;\n        [_object, (_object call BIS_fnc_getVirtualMagazineCargo), true] call BIS_fnc_removeVirtualMagazineCargo;\n        [_object, (_object call BIS_fnc_getVirtualBackpackCargo), true] call BIS_fnc_removeVirtualBackpackCargo;\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleRemoveArsenal"
      },
      {
        "fileName": "fnc_moduleSearchNearby.sqf",
        "content": "/*\n * Author: SilentSpike\n * Commands the group the module is placed on to search the nearest building\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleSearchNearby\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\",\"_units\",\"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\n//Validate the module target:\nprivate _unit = effectiveCommander (attachedTo _logic);\nprivate _building = nearestBuilding (getPosASL _unit);\n\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n    case (_unit distance _building < 500): {\n        [LSTRING(BuildingTooFar)] call _fnc_errorAndClose;\n    };\n};\n\n//Perform the module function:\n[QGVAR(moduleSearchNearby), [_unit], _unit] call CBA_fnc_targetEvent;\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleSearchNearby"
      },
      {
        "fileName": "fnc_moduleSetMedic.sqf",
        "content": "/*\n * Author: SilentSpike, Glowbal\n * Assigns a medic role from the medical module to a unit\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleSetMedic\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif !([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    private _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\n\n    if ((_mouseOver select 0) != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        private _unit = effectivecommander (_mouseOver select 1);\n\n        if !(_unit isKindOf \"CAManBase\") then {\n            [LSTRING(OnlyInfantry)] call FUNC(showMessage);\n        } else {\n            if !(alive _unit) then {\n                [LSTRING(OnlyAlive)] call FUNC(showMessage);\n            } else {\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\n                    [LSTRING(OnlyNonCaptive)] call FUNC(showMessage);\n                } else {\n                    private _medicN = GETVAR(_unit,EGVAR(medical,medicClass),0);\n                    if (_medicN < 1) then {\n                        _unit setVariable [QEGVAR(medical,medicClass), 1, true];\n                    };\n                };\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleSetMedic"
      },
      {
        "fileName": "fnc_moduleSetMedicalFacility.sqf",
        "content": "/*\n * Author: SilentSpike, Glowbal\n * Assigns a medic role from the medical module to a unit\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleSetMedicalFacility\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif !([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    private _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\n\n    if ((_mouseOver select 0) != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        private _unit = (_mouseOver select 1);\n\n        if (_unit isKindOf \"Man\" || {!(_unit isKindOf \"Building\")}) then {\n            [LSTRING(OnlyStructures)] call FUNC(showMessage);\n        } else {\n            if !(alive _unit) then {\n                [LSTRING(OnlyAlive)] call FUNC(showMessage);\n            } else {\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\n                    [LSTRING(OnlyNonCaptive)] call FUNC(showMessage);\n                } else {\n                    if (!(GETVAR(_unit,EGVAR(medical,isMedicalFacility),false))) then {\n                        _unit setVariable [QEGVAR(medical,isMedicalFacility), true, true];\n                    };\n                };\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleSetMedicalFacility"
      },
      {
        "fileName": "fnc_moduleSetMedicalVehicle.sqf",
        "content": "/*\n * Author: SilentSpike, Glowbal\n * Assigns a medic role from the medical module to a unit\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleSetMedicalVehicle\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif !([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    private _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\n\n    if ((_mouseOver select 0) != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        private _unit = (_mouseOver select 1);\n\n        if (_unit isKindOf \"Man\" || {_unit isKindOf \"Building\"}) then {\n            [LSTRING(OnlyVehicles)] call FUNC(showMessage);\n        } else {\n            if !(alive _unit) then {\n                [LSTRING(OnlyAlive)] call FUNC(showMessage);\n            } else {\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\n                    [LSTRING(OnlyNonCaptive)] call FUNC(showMessage);\n                } else {\n                    private _medicN = GETVAR(_unit,EGVAR(medical,medicClass),0);\n                    if (_medicN < 1) then {\n                        _unit setVariable [QEGVAR(medical,medicClass), 1, true];\n                    };\n                };\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleSetMedicalVehicle"
      },
      {
        "fileName": "fnc_moduleSimulation.sqf",
        "content": "/*\n * Author: Fisher, SilentSpike\n * Toggle Simulation on object.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC] call ace_zeus_fnc_moduleSimulation\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif !(local _logic) exitWith {};\n\nprivate _object = attachedTo _logic;\nif (isNull _object) then {\n    [LSTRING(NothingSelected)] call FUNC(showMessage);\n} else {\n    [QEGVAR(common,enableSimulationGlobal), [_object, !(simulationEnabled _object)]] call CBA_fnc_serverEvent;\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleSimulation"
      },
      {
        "fileName": "fnc_moduleSuppressiveFire.sqf",
        "content": "/*\n * Author: bux, PabstMirror\n * Commands the selected unit or group to start suppressive fire on the unit, group or location the module is placed on\n *\n * Arguments:\n * 0: Module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleSuppressiveFire\n *\n * Public: No\n */\n// #define DRAW_ZEUS_INFO\n#include \"script_component.hpp\"\n\nif (canSuspend) exitWith {[FUNC(moduleSuppressiveFire), _this] call CBA_fnc_directCall;};\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && {local _logic}) exitWith {};\n\n// Validate the module target\nprivate _unit = effectiveCommander (attachedTo _logic);\nTRACE_3(\"moduleSuppressiveFire placed\",_unit,typeOf _unit,typeOf _logic);\n\ndeleteVehicle _logic; // cleanup logic now, we just needed it to get the attached unit\n\nif (isNull _unit) exitWith {\n    [LSTRING(NothingSelected)] call FUNC(showMessage);\n};\nif (!alive _unit) exitWith {\n    [LSTRING(OnlyAlive)] call FUNC(showMessage);\n};\nif ([_unit] call EFUNC(common,isPlayer)) exitWith {\n    [\"str_a3_cfgvehicles_moduleremotecontrol_f_errorPlayer\"] call FUNC(showMessage);\n};\n\n[_unit, {\n    params [\"_successful\", \"_unit\", \"_mousePosASL\"];\n    TRACE_3(\"getModuleDestination return\",_successful,_unit,_mousePosASL);\n    if !(_successful && {alive _unit}) exitWith {};\n    private _vehicle = vehicle _unit;\n\n    private _targetASL = _mousePosASL vectorAdd [0,0,0.6]; // mouse pos is at ground level zero, raise up a bit;\n    private _artilleryMag = \"\";\n\n    if ((getNumber (configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"artilleryScanner\")) == 1) then {\n        // Artillery - Get mortar ammo type and verify in range\n        if (isNull gunner _vehicle) exitWith {_targetASL = [];};\n        {\n            private _ammo = getText (configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\n            private _hit = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"hit\");\n            if (_hit > 20) exitWith {_artilleryMag = _x;};\n        } forEach getArtilleryAmmo [_vehicle];\n        TRACE_1(\"getArtilleryAmmo\",_artilleryMag);\n        if (_artilleryMag == \"\") exitWith {_targetASL = [];};\n        private _eta = _vehicle getArtilleryETA [ASLtoAGL _targetASL, _artilleryMag];\n        TRACE_1(\"getArtilleryETA\",_eta);\n        if (_eta < 0) exitWith {\n            [ELSTRING(Interaction,NotInRange)] call FUNC(showMessage);\n            _targetASL = [];\n        };\n        [\"TOF: %1 sec\", _eta toFixed 1] call FUNC(showMessage);\n    } else {\n        // Direct fire - Get a target position that will work\n        private _lis = lineIntersectsSurfaces [eyePos _unit, _targetASL, _unit, _vehicle];\n        if ((count _lis) > 0) then { // If point is hidden, unit won't fire, do a ray cast to find where they should shoot at\n            _targetASL = ((_lis select 0) select 0);\n            TRACE_1(\"using ray cast pos\",_mousePosASL distance _targetASL);\n        };\n        if (_unit isEqualTo _vehicle) then { // Max range a unit can fire seems to be based on the weapon's config\n            private _distance =  _targetASL vectorDistance eyePos _unit;\n            private _maxWeaponRange = getNumber (configFile >> \"CfgWeapons\" >> (currentWeapon _unit) >> \"maxRange\");\n            TRACE_3(\"\",_distance,_maxWeaponRange,currentWeapon _unit);\n            if (_distance > (_maxWeaponRange - 50)) then {\n                if (_distance > (2.5 * _maxWeaponRange)) then {\n                    _targetASL = [];\n                    [ELSTRING(Interaction,NotInRange)] call FUNC(showMessage);\n                } else {\n                    // 1-2.5x the weapon max range, find a virtual point the AI can shoot at (won't have accurate elevation, but it will put rounds downrange)\n                    private _fakeElevation = (_distance / 100000) * (_distance - _maxWeaponRange);\n                    _targetASL = (eyePos _unit) vectorAdd (((eyePos _unit) vectorFromTo _targetASL) vectorMultiply (_maxWeaponRange - 50)) vectorAdd [0,0,_fakeElevation];\n                    TRACE_2(\"using virtual halfway point\",_mousePosASL distance _targetASL,_fakeElevation);\n                };\n            };\n        };\n    };\n\n    if (_targetASL isEqualTo []) exitWith {};\n\n    private _units = [_unit];\n    if (_unit == (leader _unit)) then {_units = units _unit;};\n    if (_artilleryMag != \"\") then {_units = [gunner _vehicle];};\n\n    {\n        if (((_unit distance _x) < 30) && {!([_x] call EFUNC(common,isPlayer))} && {[_x] call EFUNC(common,isAwake)}) then {\n            TRACE_2(\"sending event\",_x,_targetASL);\n            [QGVAR(suppressiveFire), [_x, _targetASL, _artilleryMag], _x] call CBA_fnc_targetEvent;\n        };\n    } forEach _units;\n\n#ifdef DRAW_ZEUS_INFO\n    [eyePos _unit, _mousePosASL, [0,0,1,1]] call EFUNC(common,addLineToDebugDraw);\n    [eyePos _unit, _targetASL, [1,0,0,1]] call EFUNC(common,addLineToDebugDraw);\n    if (_unit != _vehicle) then {\n        [_vehicle] call CBA_fnc_addUnitTrackProjectiles;\n    } else {\n        {\n            [_x] call CBA_fnc_addUnitTrackProjectiles;\n        } forEach _units;\n    };\n#endif\n\n}, localize LSTRING(ModuleSuppressiveFire_DisplayName)] call FUNC(getModuleDestination);\n",
        "functionName": "ace_zeus_fnc_moduleSuppressiveFire"
      },
      {
        "fileName": "fnc_moduleSuppressiveFireLocal.sqf",
        "content": "/*\n * Author: bux, PabstMirror\n * Commands the selected unit or group to start suppressive fire on the unit, group or location the module is placed on\n *\n * Arguments:\n * 0: Unit <OBJECT>\n * 1: Fire Pos ASL <ARRAY>\n * 2: Artiller Magazine <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * [bob, [5, 6, 7], \"bigmagazine\"] call ace_zeus_fnc_moduleSuppressiveFireLocal\n *\n * Public: No\n */\n#include \"script_component.hpp\"\n\nparams [\"_unit\", \"_targetASL\", \"_artilleryMag\"];\nTRACE_4(\"moduleSuppressiveFireLocal\",_unit,local _unit,_targetASL,_artilleryMag);\n\nif (_artilleryMag != \"\") exitWith {\n    (vehicle _unit) doArtilleryFire [ASLtoAGL _targetASL, _artilleryMag, 4];\n    TRACE_3(\"doArtilleryFire\",_unit,_targetASL,_artilleryMag);\n};\n\n[{\n    params [\"_unit\", \"_burstsLeft\", \"_nextRun\", \"_targetASL\", \"_artilleryMag\"];\n    if (!alive _unit) exitWith {true};\n    if (CBA_missionTime >= _nextRun) then {\n        _burstsLeft = _burstsLeft - 1;\n        _this set [1, _burstsLeft];\n        _this set [2, _nextRun + 4];\n        _unit doSuppressiveFire _targetASL;\n        TRACE_2(\"doSuppressiveFire\",_unit,_targetASL);\n    };\n    (_burstsLeft <= 0)\n}, {\n    TRACE_1(\"Done\",_this);\n}, [_unit, 11, CBA_missionTime, _targetASL, _artilleryMag]] call CBA_fnc_waitUntilAndExecute;\n\n",
        "functionName": "ace_zeus_fnc_moduleSuppressiveFireLocal"
      },
      {
        "fileName": "fnc_moduleSurrender.sqf",
        "content": "/*\n * Author: SilentSpike\n * Flips the surrender state of the unit the module is placed on.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleSurrender\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif (isNil QEFUNC(captives,setSurrendered)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    private _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\n\n    if ((_mouseOver select 0) != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        private _unit = effectivecommander (_mouseOver select 1);\n\n        if !(_unit isKindOf \"CAManBase\") then {\n            [LSTRING(OnlyInfantry)] call FUNC(showMessage);\n        } else {\n            if !(alive _unit) then {\n                [LSTRING(OnlyAlive)] call FUNC(showMessage);\n            } else {\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\n                    [LSTRING(OnlyNonCaptive)] call FUNC(showMessage);\n                } else {\n                    private _surrendering = GETVAR(_unit,EGVAR(captives,isSurrendering),false);\n                    // Event initalized by ACE_Captives\n                    [QEGVAR(captives,setSurrendered), [_unit, !_surrendering], _unit] call CBA_fnc_targetEvent;\n                };\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleSurrender"
      },
      {
        "fileName": "fnc_moduleTeleportPlayers.sqf",
        "content": "/*\n * Author: SilentSpike\n * Zeus module function to teleport players on dialog confirmation\n *\n * Arguments:\n * 0: Teleport to <OBJECT>\n * 1: Player UID <STRING>\n * 2: Teleport group <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [player, \"5854854754\", false] call ace_zeus_fnc_moduleTeleportPlayers\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\",\"_uid\",\"_group\"];\n\n// Get the chosen unit\nprivate _player = [_uid] call BIS_fnc_getUnitByUID;\n\n// Handle if group mode was selected\nif (_group) then {\n    _player = units _player;\n} else {\n    _player = [_player];\n};\n\n// Handle teleportation\n{\n    moveOut _x;\n\n    private _attached = attachedTo _logic;\n    if (isNull _attached) then {\n        // Function takes position AGL and must be ran where local\n        [QGVAR(moveToRespawnPosition), [_x, _logic modelToWorld [0,0,0]], _x] call CBA_fnc_targetEvent;\n    } else {\n        [QGVAR(moveToRespawnPosition), [_x, _attached], _x] call CBA_fnc_targetEvent;\n    };\n} forEach _player;\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleTeleportPlayers"
      },
      {
        "fileName": "fnc_moduleToggleFlashlight.sqf",
        "content": "/*\n * Author: alganthe\n * Zeus module function to toggle Flashlights\n *\n * Arguments:\n * 0: Logic object <OBJECT>\n * 1: Toggle mode <BOOL>\n * 2: Add gear <BOOL>\n * 3: Target of the toggle <SCALAR> 0: blufor; 1: opfor; 2: indep; 3: civ; 4: selected group\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, true, true, 4] call ace_zeus_fnc_moduleToggleFlashlight\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_toggle\", \"_addGear\", \"_target\"];\n\nprivate _units = [];\n\nif (_target == 4) then {\n    _units =  units (attachedTo _logic);\n} else {\n    _units =  allUnits select {alive _x && {side _x == ([blufor, opfor, independent, civilian] select _target)}},\n};\n\nif (_toggle) then {\n    {\n        // enableGunLights doesn't work on players\n        if !(isPlayer _x || {(currentWeapon _x) isEqualTo \"\"}) then {\n            private _pointer = (_x weaponAccessories (currentWeapon _x)) select 1;\n\n            if (!(_pointer isEqualTo \"\") && {isNull (configfile >> \"CfgWeapons\" >> _pointer >> \"ItemInfo\" >> \"Pointer\")}) then {\n                [QGVAR(enableFlashlight), [_x, \"forceOn\"], _x] call CBA_fnc_targetEvent;\n\n            } else {\n                if (_addGear) then {\n                    // Retrieve compatible items for the pointer slot\n                    private _pointerSlotCompatible = [currentWeapon _x, \"pointer\"] call CBA_fnc_compatibleItems;\n\n                    // Get flashlights from the array above and select the first one\n                    private _flashlight = (_pointerSlotCompatible select {isNull (configfile >> \"CfgWeapons\" >> _x >> \"ItemInfo\" >> \"Pointer\")}) select 0;\n\n                    [QEGVAR(common,addWeaponItem), [_x, (currentWeapon _x), _flashlight], _x] call CBA_fnc_targetEvent;\n                    [QGVAR(enableFlashlight), [_x, \"forceOn\"], _x] call CBA_fnc_targetEvent;\n                };\n            };\n        };\n    } foreach _units;\n\n} else {\n    {\n        if !(isPlayer _x || {(currentWeapon _x) isEqualTo \"\"}) then {\n            [QGVAR(enableFlashlight), [_x, \"forceOff\"], _x] call CBA_fnc_targetEvent;\n        };\n    } foreach _units;\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleToggleFlashlight"
      },
      {
        "fileName": "fnc_moduleToggleNvg.sqf",
        "content": "/*\n * Author: alganthe\n * Zeus module function to toggle NVGs\n *\n * Arguments:\n * 0: Logic object <OBJECT>\n * 1: Toggle mode <BOOL>\n * 2: Target of the toggle <SCALAR> 0: blufor; 1: opfor; 2: indep; 3: civ; 4: selected group\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, true, 4] call ace_zeus_fnc_moduleToggleNvg\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_toggle\", \"_target\"];\n\nprivate _units = [];\n\nif (_target == 4) then {\n    _units = units (attachedTo _logic);\n} else {\n    _units = allUnits select {alive _x && {side _x == ([blufor, opfor, independent, civilian] select _target)}},\n};\n\nif (_toggle) then {\n    {\n        if (!isplayer _x && {hmd _x isEqualTo \"\"}) then {\n            private _cfgArray = getArray (configFile >> 'CfgVehicles' >> typeOf _x >>'linkedItems');\n\n            private _nvgClass = _cfgArray select {_x isKindOf [\"NVGoggles\",(configFile >> \"CfgWeapons\")]};\n            private _nvgHelmet =_cfgArray select {count (getArray (configFile >> \"CfgWeapons\" >> _x >> \"subItems\")) > 0};\n\n            // Can't have more than 1 assigned by default\n            if (count _nvgClass == 1 || {count _nvgHelmet == 1}) then {\n                if (count _nvgHelmet == 1) then {\n                    _x addHeadgear (_nvgHelmet select 0);\n                } else {\n                    _x linkItem  (_nvgClass select 0);\n                };\n\n            } else {\n                _x linkItem \"NVGoggles\";\n            };\n        };\n    } foreach _units;\n\n} else {\n    {\n        if (!isplayer _x) then {\n            private _cfgArray = getArray (configFile >> 'CfgVehicles' >> typeOf _x >>'linkedItems');\n\n            private _nvgHelmet =_cfgArray select {count (getArray (configFile >> \"CfgWeapons\" >> _x >> \"subItems\")) > 0};\n\n            if (count _nvgHelmet == 1) then {\n                removeHeadgear _x;\n            } else {\n                _x unlinkItem (hmd _x);\n            };\n        };\n    } foreach _units;\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleToggleNvg"
      },
      {
        "fileName": "fnc_moduleUnconscious.sqf",
        "content": "/*\n * Author: SilentSpike\n * Flips the unconscious state of the unit the module is placed on.\n *\n * Arguments:\n * 0: The module logic <OBJECT>\n * 1: Synchronized units <ARRAY>\n * 2: Activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleUnconscious\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated && local _logic) exitWith {};\n\nif (isNil QEFUNC(medical,setUnconscious)) then {\n    [LSTRING(RequiresAddon)] call FUNC(showMessage);\n} else {\n    private _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\n\n    if ((_mouseOver select 0) != \"OBJECT\") then {\n        [LSTRING(NothingSelected)] call FUNC(showMessage);\n    } else {\n        private _unit = effectivecommander (_mouseOver select 1);\n\n        if !(_unit isKindOf \"CAManBase\") then {\n            [LSTRING(OnlyInfantry)] call FUNC(showMessage);\n        } else {\n            if !(alive _unit) then {\n                [LSTRING(OnlyAlive)] call FUNC(showMessage);\n            } else {\n                private _conscious = GETVAR(_unit,ACE_isUnconscious,false);\n                // Function handles locality for me\n                [_unit, !_conscious, 10e10, true] call EFUNC(medical,setUnconscious);\n            };\n        };\n    };\n};\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleUnconscious"
      },
      {
        "fileName": "fnc_moduleUnGarrison.sqf",
        "content": "/*\n * Author: alganthe\n * Un-garrison a garrisoned group.\n *\n * Arguments:\n * 0: Module logic <OBJECT>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC] call ace_zeus_fnc_moduleUngarrison\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\"];\n\nif (!local _logic) exitWith {}; // Module is global\n\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nprivate _unit = effectiveCommander (attachedTo _logic);\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n    case !(isPlayer _unit): {\n        [\"str_a3_cfgvehicles_moduleremotecontrol_f_errorPlayer\"] call _fnc_errorAndClose;\n    };\n};\nprivate _units = units _unit;\n\n[QEGVAR(ai,unGarrison), [_units], _units] call CBA_fnc_targetEvent;\n\ndeleteVehicle _logic;\n",
        "functionName": "ace_zeus_fnc_moduleUnGarrison"
      },
      {
        "fileName": "fnc_moduleZeusSettings.sqf",
        "content": "/*\n * Author: SilentSpike\n * Module for adjusting various aspects of zeus\n *\n * Arguments:\n * 0: The module logic <LOGIC>\n * 1: units <ARRAY>\n * 2: activated <BOOL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [LOGIC, [bob, kevin], true] call ace_zeus_fnc_moduleZeusSettings\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_logic\", \"_units\", \"_activated\"];\n\nif !(_activated) exitWith {};\n\n[_logic, QGVAR(zeusAscension), \"zeusAscension\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(zeusBird), \"zeusBird\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(radioOrdnance), \"radioOrdnance\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(revealMines), \"revealMines\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(remoteWind), \"remoteWind\"] call EFUNC(common,readSettingFromModule);\n[_logic, QGVAR(autoAddObjects), \"autoAddObjects\"] call EFUNC(common,readSettingFromModule);\n",
        "functionName": "ace_zeus_fnc_moduleZeusSettings"
      },
      {
        "fileName": "fnc_showMessage.sqf",
        "content": "/*\n * Author: 654wak654\n * Shows a Zeus message through the BIS function, handles localization.\n * If multiple args are given, they get formatted.\n *\n * Arguments:\n * 0: Message <STRING>\n * N: Anything <ANY> (default: nil)\n *\n * Return Value:\n * None\n *\n * Example:\n * [\"something\"] call ace_zeus_fnc_showMessage\n * [\"something %1 in %2\", \"strange\", getPos neighborhood] call ace_zeus_fnc_showMessage\n *\n * Public: Yes\n */\n#include \"script_component.hpp\"\n\nif (!(_this isEqualTypeParams [\"\"])) exitWith {ERROR_1(\"First arg must be string [%1]\",_this);};\n\nprivate _message = _this apply {if ((_x isEqualType \"\") && {isLocalized _x}) then {localize _x} else {_x}};\n[objNull, format _message] call BIS_fnc_showCuratorFeedbackMessage;\n",
        "functionName": "ace_zeus_fnc_showMessage"
      },
      {
        "fileName": "fnc_ui_attributeCargo.sqf",
        "content": "/*\n * Author: PabstMirror\n * Initalises the ace_cargo attribute of the zeus vehicle attributes display\n * (the display shown on double click)\n *\n * Arguments:\n * 0: ace_cargo controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_attributeCargo\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_control\"];\nTRACE_1(\"params\",_control);\n\nprivate _veh = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\nTRACE_1(\"\",_veh);\n\nprivate _loaded = _veh getVariable [QEGVAR(cargo,loaded), []];\nTRACE_1(\"\",_loaded);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n{\n    (_control controlsGroupCtrl 80086) lbAdd (str _x);\n} forEach _loaded;\n",
        "functionName": "ace_zeus_fnc_ui_attributeCargo"
      },
      {
        "fileName": "fnc_ui_attributePosition.sqf",
        "content": "/*\n * Author: SilentSpike\n * Initalises the `position` zeus module attribute\n *\n * Arguments:\n * 0: position controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_attributePosition\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n//Generic Init:\nparams [\"_control\"];\nprivate _display = ctrlParent _control;\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Specific on-load stuff:\nprivate _map = _control controlsGroupCtrl 26469;\n\n// Centre map on the logic initially\n_map ctrlMapAnimAdd [0, ctrlMapScale _map, _logic];\nctrlMapAnimCommit _map;\n\nprivate _fnc_onDraw = {\n    params [\"_map\"];\n\n    private _display = ctrlParent _map;\n    private _pos = GETVAR(_display,GVAR(position),[]);\n    private _radius = GETVAR(_display,GVAR(radius),0);\n\n    if !(_pos isEqualTo []) then {\n        // Works alongside radius attribute\n        if (_radius == 0) then {\n            _map drawIcon [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", [0,0,0,1], _pos, 19, 19, 0, \"\", 0, 0];\n        } else {\n            _map drawEllipse [_pos, _radius, _radius, 0, [0,0,0,1], \"\"];\n        };\n    };\n};\n\nprivate _fnc_onMapClick = {\n    params [\"_map\",\"_button\",\"_x\",\"_y\",\"_shift\",\"_ctrl\",\"_alt\"];\n\n    if (_button == 0) then {\n        private _display = ctrlParent _map;\n        SETVAR(_display,GVAR(position),_pos);\n    };\n};\n\nSETVAR(_display,GVAR(position),getPos _logic);\n_map ctrlAddEventHandler [\"draw\",_fnc_onDraw];\n_map ctrlAddEventHandler [\"mouseButtonDown\",_fnc_onMapClick];\n",
        "functionName": "ace_zeus_fnc_ui_attributePosition"
      },
      {
        "fileName": "fnc_ui_attributeRadius.sqf",
        "content": "/*\n * Author: SilentSpike\n * Initalises the `radius` zeus module attribute\n *\n * Arguments:\n * 0: radius controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_attributeRadius\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n//Generic Init:\nparams [\"_control\"];\nprivate _display = ctrlParent _control;\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Specific on-load stuff:\nprivate _edit = _control controlsGroupCtrl 26467;\n\n_edit ctrlSetText \"100\";\n\nprivate _fnc_onKeyUp = {\n    params [\"_display\"];\n\n    private _edit = _display displayCtrl 26467;\n    private _radius = parseNumber (ctrlText _edit);\n\n    // Handle invalid radius (non-numerical input)\n    if (_radius == 0) then {\n        _edit ctrlSetTooltip (localize LSTRING(AttributeRadiusInvalid));\n        _edit ctrlSetTextColor [1,0,0,1];\n    } else {\n        _edit ctrlSetTooltip \"\";\n        _edit ctrlSetTextColor [1,1,1,1];\n        SETVAR(_display,GVAR(radius),_radius);\n    };\n};\n\n[_display] call _fnc_onKeyUp;\n_display displayAddEventHandler [\"keyUp\", _fnc_onKeyUp];\n",
        "functionName": "ace_zeus_fnc_ui_attributeRadius"
      },
      {
        "fileName": "fnc_ui_defendArea.sqf",
        "content": "/*\n * Author: SilentSpike\n * Initalises the `defend area` zeus module display\n *\n * Arguments:\n * 0: dummy controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_defendArea\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n//Generic Init:\nparams [\"_control\"];\nprivate _display = ctrlParent _control;\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Validate the module target:\nprivate _unit = effectiveCommander (attachedTo _logic);\n\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    _display closeDisplay 0;\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n};\n\nprivate _fnc_onUnload = {\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    if (_this select 1 == 2) then {\n        deleteVehicle _logic;\n    };\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _unit = effectiveCommander (attachedTo _logic);\n    private _radius = GETVAR(_display,GVAR(radius),50);\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\n\n    [QGVAR(moduleDefendArea), [_unit,_position,_radius], _unit] call CBA_fnc_targetEvent;\n    deleteVehicle _logic;\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_control ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_defendArea"
      },
      {
        "fileName": "fnc_ui_editableObjects.sqf",
        "content": "/*\n * Author: Fisher, SilentSpike\n * Updated all/local curator with objects in the module radius.\n *\n * Arguments:\n * 0: editableObjects controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_editableObjects\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_control\"];\n\n//Generic Init:\nprivate _display = ctrlParent _control;\nprivate _ctrlButtonOK = _display displayCtrl 1; //IDC_OK\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\nTRACE_1(\"logicObject\",_logic);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Specific on-load stuff:\n(_display displayCtrl 16188) cbSetChecked true;\n\nprivate _fnc_onUnload = {\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\n    if (isNull _logic) exitWith {};\n\n    if (_this select 1 == 2) then {\n        deleteVehicle _logic;\n    };\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlParent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\n    if (isNull _logic) exitWith {};\n\n    private _radius = GETVAR(_display,GVAR(radius),50);\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\n    private _allCurators = cbChecked (_display displayCtrl 16188);\n    private _removeObjects = cbChecked (_display displayCtrl 16189);\n\n    private _objects = nearestObjects [_position, [\"All\"], _radius];\n    private _localCurator = [getAssignedCuratorLogic player, objNull] select _allCurators;\n\n    if (_removeObjects) then {\n        [QGVAR(removeObjects), [_objects, _localCurator]] call CBA_fnc_serverEvent;\n    } else {\n        [QGVAR(addObjects), [_objects, _localCurator]] call CBA_fnc_serverEvent;\n    };\n\n    deleteVehicle _logic;\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_ctrlButtonOK ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_editableObjects"
      },
      {
        "fileName": "fnc_ui_garrison.sqf",
        "content": "/*\n * Author: alganthe\n * Initalises the \"Garrison\" zeus module display.\n *\n * Arguments:\n * 0: Garrison controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * onSetFocus = \"_this call ace_zeus_fnc_ui_garrison\"\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_control\"];\n\n//Generic Init:\nprivate _display = ctrlparent _control;\nprivate _ctrlButtonOK = _display displayctrl 1; //IDC_OK\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\nTRACE_1(\"logicObject\",_logic);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n// Handles errors\nprivate _unit = effectiveCommander (attachedTo _logic);\n\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    _display closeDisplay 0;\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n    case !(isPlayer _unit): {\n        [\"str_a3_cfgvehicles_moduleremotecontrol_f_errorPlayer\"] call _fnc_errorAndClose;\n    };\n};\n\n//Specific on-load stuff:\nprivate _listbox = _display displayCtrl 73063;\n{\n    _listbox lbSetValue  [_listbox lbAdd (_x select 0), _x select 1];\n} forEach [\n    [localize LSTRING(ModuleGarrison_FillingModeEven), 0],\n    [localize LSTRING(ModuleGarrison_FillingModeBuilding), 1],\n    [localize LSTRING(ModuleGarrison_FillingModeRandom), 2]\n];\n\n_listbox lbSetCurSel 0;\n\n//Specific on-load stuff:\n(_display displayCtrl 73061) cbSetChecked (_logic getVariable [\"TopDownFilling\",false]);\n(_display displayCtrl 73062) cbSetChecked (_logic getVariable [\"Teleport\",false]);\n\nprivate _fnc_onUnload = {\n    params [\"_display\"];\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    deleteVehicle _logic;\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _lb = _display displayCtrl 73063;\n\n    private _radius = GETVAR(_display,GVAR(radius),50);\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\n    private _mode = _lb lbValue (lbCurSel _lb);\n    private _TopDownFilling = cbChecked (_display displayCtrl 73061);\n    private _teleport = cbChecked (_display displayCtrl 73062);\n\n    [_logic, _position ,_radius, _mode, _TopDownFilling, _teleport] call FUNC(moduleGarrison);\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_ctrlButtonOK ctrlAddEventHandler [\"buttonclick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_garrison"
      },
      {
        "fileName": "fnc_ui_globalSetSkill.sqf",
        "content": "/*\n * Author: PabstMirror\n * Initalises the `global skill` zeus module display\n *\n * Arguments:\n * 0: globalSetSkill controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_globalSetSkill\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_control\"];\nTRACE_1(\"params\",_control);\n\n//Generic Init:\nprivate _display = ctrlParent _control;\nprivate _ctrlButtonOK = _display displayCtrl 1; //IDC_OK\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\nTRACE_1(\"logicObject\",_logic);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Specific on-load stuff:\nprivate _fnc_sliderMove = {\n    params [\"_slider\"];\n    private _idc = ctrlIDC _slider; // IDCs ∈ [16184,16187]\n    private _curVal = GVAR(GlobalSkillAI) select (_idc - 16184); // [0,3]\n    _slider ctrlSetTooltip format [\"%1%3 (was %2%3)\", round(sliderPosition _slider * 100), round(_curVal * 100), \"%\"];\n};\n\n{\n    private _slider = _display displayCtrl _x;\n    _slider sliderSetRange [0, 1];\n    _slider sliderSetSpeed [0.01,0.1];\n    _slider sliderSetPosition (GVAR(GlobalSkillAI) select _forEachIndex);\n    _slider ctrlAddEventHandler [\"SliderPosChanged\", _fnc_sliderMove];\n    _slider call _fnc_sliderMove;\n} forEach [16184,16185,16186,16187];\n\n(_display displayCtrl 16188) cbSetChecked (GVAR(GlobalSkillAI) select 4);\n(_display displayCtrl 16189) cbSetChecked (GVAR(GlobalSkillAI) select 5);\n\nprivate _fnc_onUnload = {\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    deleteVehicle _logic;\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n    TRACE_1(\"_fnc_onConfirm params\",_this);\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    GVAR(GlobalSkillAI) = [\n        sliderPosition (_display displayCtrl 16184), // General\n        sliderPosition (_display displayCtrl 16185), // Accuracy\n        sliderPosition (_display displayCtrl 16186), // Handling\n        sliderPosition (_display displayCtrl 16187), // Spotting\n        cbChecked (_display displayCtrl 16188), // Seek cover\n        cbChecked (_display displayCtrl 16189) // Autocombat\n    ];\n    publicVariable QGVAR(GlobalSkillAI); // Values should persist for future use\n\n    // PV EH won't run on local machine\n    [QGVAR(GlobalSkillAI),GVAR(GlobalSkillAI)] call FUNC(moduleGlobalSetSkill);\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_ctrlButtonOK ctrlAddEventHandler [\"buttonclick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_globalSetSkill"
      },
      {
        "fileName": "fnc_ui_groupSide.sqf",
        "content": "/*\n * Author: SilentSpike\n * Initalises the `group side` zeus module display\n *\n * Arguments:\n * 0: groupSide controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_groupSide\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n#define IDCs [31201,31200,31202,31203]\n\nparams [\"_control\"];\n\n//Generic Init:\nprivate _display = ctrlParent _control;\nprivate _ctrlButtonOK = _display displayCtrl 1; //IDC_OK\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\nTRACE_1(\"logicObject\",_logic);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Validate the module target:\nprivate _unit = effectiveCommander (attachedTo _logic);\nprivate _side = side _unit;\n\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    _display closeDisplay 0;\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n    case (_side in [west,east,independent,civilian]): {\n        [LSTRING(OnlySpecificSide)] call _fnc_errorAndClose;\n    };\n};\n\n//Specific on-load stuff:\nprivate _idcActive = 31200 + ([west,east,independent,civilian] find _side);\nSETVAR(_display,oldSide,_idcActive - 31200);\nSETVAR(_display,newSide,_idcActive - 31200);\n\nprivate _fnc_onSelection = {\n    params [[\"_activeCtrl\", controlNull, [controlNull]]];\n\n    private _display = ctrlParent _activeCtrl;\n    if (isNull _display) exitWith {};\n\n    // Update the button scales and colours on selection\n    {\n        private _ctrl = _display displayCtrl _x;\n        private _color = _ctrl getVariable \"color\";\n        private _scale = 1;\n\n        if (ctrlIDC _activeCtrl == _x) then {\n            _color set [3,1];\n            _scale = 1.2\n        } else {\n            _color set [3,0.5];\n        };\n\n        _ctrl ctrlSetTextColor _color;\n        [_ctrl,_scale,0.1] call BIS_fnc_ctrlSetScale;\n    } forEach IDCs;\n\n    // Store selected button index for confirmation\n    SETVAR(_display,newSide,(ctrlIDC _activeCtrl) - 31200);\n};\n\n// Initalize buttons with colour and scale\n{\n    private _ctrl = _display displayCtrl _x;\n    private _color = [_forEachIndex] call BIS_fnc_sideColor;\n    _ctrl setVariable [\"color\", _color];\n    _ctrl ctrlSetActiveColor _color;\n    _color set [3,0.5];\n\n    if (ctrlIDC _ctrl == _idcActive) then {\n        [_ctrl,1.2,0] call BIS_fnc_ctrlSetScale;\n        _color set [3,1];\n    };\n\n    _ctrl ctrlSetTextColor _color;\n\n    _ctrl ctrlAddEventHandler [\"buttonclick\", _fnc_onSelection];\n} forEach IDCs;\n\nprivate _fnc_onUnload = {\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    if (_this select 1 == 2) then {\n        deleteVehicle _logic;\n    };\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _unit = effectiveCommander (attachedTo _logic);\n    private _side = [west,east,independent,civilian] select (GETVAR(_display,newSide,GETVAR(_display,oldSide,0)));\n\n    [_unit, _side] call FUNC(moduleGroupSide);\n    deleteVehicle _logic;\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_ctrlButtonOK ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_groupSide"
      },
      {
        "fileName": "fnc_ui_patrolArea.sqf",
        "content": "/*\n * Author: SilentSpike\n * Initalises the `patrol area` zeus module display\n *\n * Arguments:\n * 0: dummy controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_patrolArea\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n//Generic Init:\nparams [\"_control\"];\nprivate _display = ctrlParent _control;\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Validate the module target:\nprivate _unit = effectiveCommander (attachedTo _logic);\n\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    _display closeDisplay 0;\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n};\n\nprivate _fnc_onUnload = {\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    if (_this select 1 == 2) then {\n        deleteVehicle _logic;\n    };\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _unit = effectiveCommander (attachedTo _logic);\n    private _radius = GETVAR(_display,GVAR(radius),50);\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\n\n    [QGVAR(modulePatrolArea), [_unit,_position,_radius,5], _unit] call CBA_fnc_targetEvent;\n    deleteVehicle _logic;\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_control ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_patrolArea"
      },
      {
        "fileName": "fnc_ui_searchArea.sqf",
        "content": "/*\n * Author: SilentSpike\n * Initalises the `search area` zeus module display\n *\n * Arguments:\n * 0: dummy controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_searchArea\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\n//Generic Init:\nparams [\"_control\"];\nprivate _display = ctrlParent _control;\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Validate the module target:\nprivate _unit = effectiveCommander (attachedTo _logic);\n\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    _display closeDisplay 0;\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nswitch (false) do {\n    case !(isNull _unit): {\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\n    };\n    case (_unit isKindOf \"CAManBase\"): {\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n    };\n    case (alive _unit): {\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n    };\n};\n\nprivate _fnc_onUnload = {\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    if (_this select 1 == 2) then {\n        deleteVehicle _logic;\n    };\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _unit = effectiveCommander (attachedTo _logic);\n    private _radius = GETVAR(_display,GVAR(radius),50);\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\n    private _marker = QGVAR(ModuleSearchArea) + str(_unit);\n\n    createMarker [_marker, _position];\n    _marker setMarkerAlpha 0;\n    _marker setMarkerShape \"ELLIPSE\";\n    _marker setMarkerSize [_radius,_radius];\n\n    [QGVAR(moduleSearchArea), [_unit,_marker], _unit] call CBA_fnc_targetEvent;\n    deleteVehicle _logic;\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_control ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_searchArea"
      },
      {
        "fileName": "fnc_ui_teleportPlayers.sqf",
        "content": "/*\n * Author: SilentSpike\n * Initalises the `teleport players` zeus module display\n *\n * Arguments:\n * 0: teleportPlayers controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * [CONTROL] call ace_zeus_fnc_ui_teleportPlayers\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nparams [\"_control\"];\n\n//Generic Init:\nprivate _display = ctrlParent _control;\nprivate _ctrlButtonOK = _display displayCtrl 1; //IDC_OK\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objNull);\nTRACE_1(\"logicObject\",_logic);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\n//Specific on-load stuff:\nprivate _listbox = _display displayCtrl 16189;\n{\n    if (alive _x) then {\n        _listbox lbSetData [_listbox lbAdd (name _x), getPlayerUID _x];\n    };\n} forEach ([] call CBA_fnc_players);\n\n_listbox lbSetCurSel 0;\n(_display displayCtrl 16188) cbSetChecked (_logic getVariable [\"tpGroup\",false]);\n\nprivate _fnc_onUnload = {\n    params [\"_display\"];\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    // Store checkbox value for reopening\n    _logic setVariable [\"tpGroup\", cbChecked (_display displayCtrl 16188)];\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _lb = _display displayCtrl 16189;\n\n    private _uid = _lb lbData (lbCurSel _lb);\n    private _group = cbChecked (_display displayCtrl 16188);\n\n    [_logic, _uid, _group] call FUNC(moduleTeleportPlayers);\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_ctrlButtonOK ctrlAddEventHandler [\"buttonclick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_teleportPlayers"
      },
      {
        "fileName": "fnc_ui_toggleFlashlight.sqf",
        "content": "/*\n * Author: alganthe\n * Initalises the `Toggle Flashlights` zeus module display\n *\n * Arguments:\n * 0: Flashlight toggle controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * onSetFocus = \"_this call ace_zeus_fnc_ui_toggleFLashlight\"\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_control\"];\n\n//Generic Init:\nprivate _display = ctrlparent _control;\nprivate _ctrlButtonOK = _display displayctrl 1; //IDC_OK\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\nTRACE_1(\"logicObject\",_logic);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\nprivate _unit = effectiveCommander (attachedTo _logic);\n\n// Handles errors\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    _display closeDisplay 0;\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nif !(isNull _unit) then {\n    switch (false) do {\n        case (_unit isKindOf \"CAManBase\"): {\n            [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n        };\n        case (alive _unit): {\n            [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n        };\n    };\n};\n\n//Specific on-load stuff:\nprivate _comboBox = _display displayCtrl 56218;\nprivate _comboBox2 = _display displayCtrl 56219;\nprivate _comboBox3 = _display displayCtrl 56220;\n\n{\n    _comboBox lbSetValue  [_comboBox lbAdd (_x select 0), _x select 1];\n} forEach [\n    [localize ELSTRING(common,Disabled), 0],\n    [localize ELSTRING(common,Enabled), 1]\n];\n\nif (isNull _unit) then {\n    {\n        _comboBox2 lbSetValue  [_comboBox2 lbAdd (_x select 0), _x select 1];\n    } forEach [\n        [\"BLUFOR\", 0],\n        [\"OPFOR\", 1],\n        [\"INDEP\", 2],\n        [\"CIV\", 3]\n    ];\n} else {\n    {\n        _comboBox2 lbSetValue  [_comboBox2 lbAdd (_x select 0), _x select 1];\n    } forEach [\n        [localize LSTRING(moduleToggleNVG_SelectedGroup), 4],\n        [\"BLUFOR\", 0],\n        [\"OPFOR\", 1],\n        [\"INDEP\", 2],\n        [\"CIV\", 3]\n    ];\n};\n\n{\n    _comboBox3 lbSetValue  [_comboBox3 lbAdd (_x select 0), _x select 1];\n} foreach [\n    [localize ELSTRING(common,Disabled), 0],\n    [localize ELSTRING(common,Enabled), 1]\n];\n\n\nprivate _enabledDefault = false;\nif (!isNull _unit) then {\n    _enabledDefault = _unit isFlashlightOn (currentWeapon _unit);\n};\n_comboBox lbSetCurSel ([0,1] select _enabledDefault);\n_comboBox2 lbSetCurSel 0;\n_comboBox3 lbSetCurSel 0;\n\nprivate _fnc_onUnload = {\n    params [\"_display\"];\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    deleteVehicle _logic;\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _combo1 = _display displayCtrl 56218;\n    private _combo2 = _display displayCtrl 56219;\n    private _combo3 = _display displayCtrl 56220;\n\n    private _toggle = _combo1 lbValue (lbCurSel _combo1);\n    private _target = _combo2 lbValue (lbCurSel _combo2);\n    private _gear = _combo3 lbValue (lbCurSel _combo3);\n\n\n    _toggle = [\n        false,\n        true\n    ] select (_toggle == 1);\n\n    _gear = [\n        false,\n        true\n    ] select (_gear == 1);\n\n    [_logic, _toggle, _gear, _target] call FUNC(moduleToggleFlashlight);\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_ctrlButtonOK ctrlAddEventHandler [\"buttonclick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_toggleFlashlight"
      },
      {
        "fileName": "fnc_ui_toggleNvg.sqf",
        "content": "/*\n * Author: alganthe\n * Initalises the `Toggle NVGs` zeus module display\n *\n * Arguments:\n * 0: Nvg toggle controls group <CONTROL>\n *\n * Return Value:\n * None\n *\n * Example:\n * onSetFocus = \"_this call ace_zeus_fnc_ui_toggleNvg\"\n *\n * Public: No\n*/\n\n#include \"script_component.hpp\"\n\ndisableSerialization;\n\nparams [\"_control\"];\n\n//Generic Init:\nprivate _display = ctrlparent _control;\nprivate _ctrlButtonOK = _display displayctrl 1; //IDC_OK\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\nTRACE_1(\"logicObject\",_logic);\n\n_control ctrlRemoveAllEventHandlers \"setFocus\";\n\nprivate _unit = effectiveCommander (attachedTo _logic);\n\n// Handles errors\nscopeName \"Main\";\nprivate _fnc_errorAndClose = {\n    params [\"_msg\"];\n    _display closeDisplay 0;\n    deleteVehicle _logic;\n    [_msg] call FUNC(showMessage);\n    breakOut \"Main\";\n};\n\nif !(isNull _unit) then {\n    switch (false) do {\n        case (_unit isKindOf \"CAManBase\"): {\n            [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\n        };\n        case (alive _unit): {\n            [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\n        };\n    };\n};\n\n//Specific on-load stuff:\nprivate _comboBox = _display displayCtrl 92855;\nprivate _comboBox2 = _display displayCtrl 92856;\n\n{\n    _comboBox lbSetValue  [_comboBox lbAdd (_x select 0), _x select 1];\n} forEach [\n    [localize ELSTRING(common,Disabled), 0],\n    [localize ELSTRING(common,Enabled), 1]\n];\n\nif (isNull _unit) then {\n    {\n        _comboBox2 lbSetValue  [_comboBox2 lbAdd (_x select 0), _x select 1];\n    } forEach [\n        [\"BLUFOR\", 0],\n        [\"OPFOR\", 1],\n        [\"INDEP\", 2],\n        [\"CIV\", 3]\n    ];\n} else {\n    {\n        _comboBox2 lbSetValue  [_comboBox2 lbAdd (_x select 0), _x select 1];\n    } forEach [\n        [localize LSTRING(moduleToggleNVG_SelectedGroup), 4],\n        [\"BLUFOR\", 0],\n        [\"OPFOR\", 1],\n        [\"INDEP\", 2],\n        [\"CIV\", 3]\n    ];\n};\n\n\nprivate _enabledDefault = false;\nif (!isNull _unit) then {\n    _enabledDefault = !(hmd _unit isEqualTo \"\");\n};\n_comboBox lbSetCurSel ([0,1] select _enabledDefault);\n_comboBox2 lbSetCurSel 0;\n\nprivate _fnc_onUnload = {\n    params [\"_display\"];\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    deleteVehicle _logic;\n};\n\nprivate _fnc_onConfirm = {\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\n\n    private _display = ctrlparent _ctrlButtonOK;\n    if (isNull _display) exitWith {};\n\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\n    if (isNull _logic) exitWith {};\n\n    private _combo1 = _display displayCtrl 92855;\n    private _combo2 = _display displayCtrl 92856;\n\n    private _toggle = _combo1 lbValue (lbCurSel _combo1);\n    private _target = _combo2 lbValue (lbCurSel _combo2);\n\n    private _toggle = [\n        false,\n        true\n    ] select (_toggle == 1);\n\n    [_logic, _toggle, _target] call FUNC(moduleToggleNvg);\n};\n\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\n_ctrlButtonOK ctrlAddEventHandler [\"buttonclick\", _fnc_onConfirm];\n",
        "functionName": "ace_zeus_fnc_ui_toggleNvg"
      },
      {
        "fileName": "fnc_zeusAttributes.sqf",
        "content": "/*\n * Author: PabstMirror\n * Dummy function to include BIS script file.\n * Used in initalisation of zeus attribute displays.\n *\n * Arguments:\n * 0: UI event string <STRING>\n * 1: UI event parameters <ARRAY>\n * 2: Display class name <STRING>\n *\n * Return Value:\n * None\n *\n * Example:\n * onLoad = \"['onLoad',_this,'RscDisplayExample'] call ace_zeus_fnc_zeusAttributes\"\n *\n * Public: No\n */\n\n#include \"script_component.hpp\"\n\nTRACE_1(\"params\",_this);\n\n#include \"\\a3\\ui_f_curator\\UI\\Displays\\RscDisplayAttributes.sqf\"\n",
        "functionName": "ace_zeus_fnc_zeusAttributes"
      }
    ]
  }
]